void sub_18AF9EAD0(uint64_t a1)
{
  sub_18AF9EB0C(a1, (uint64_t)&qword_1E91268B8, (uint64_t)&unk_1ED7F3530, (uint64_t)sub_18AF9EBE0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_18AF971FC);
}

void sub_18AF9EB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_18AF9CEE4(a1, v5[2], v5[3], v5[4], v5[5], v5[6], a2, a3, a4, a5);
}

uint64_t sub_18AF9EB4C()
{
  return sub_18AF9EB58(&qword_1E91268B8);
}

uint64_t sub_18AF9EB58(uint64_t *a1)
{
  uint64_t v2 = sub_18AF161EC(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + ((v4 + 16) & ~v4), v2);
  uint64_t v6 = sub_18AF3563C();

  return MEMORY[0x1F4186498](v6, v7, v5);
}

uint64_t sub_18AF9EBE0(void *a1, char a2)
{
  return sub_18AF9E7CC(a1, a2, &qword_1E91268B8);
}

void sub_18AF9EBF0(void *a1, char a2)
{
  sub_18AF9C9C4(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *, uint64_t))(v2 + 24));
}

void sub_18AF9ECC8(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
}

uint64_t sub_18AF9ECF0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_18AF9ED00()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_18AF9ED18()
{
  return v0;
}

uint64_t sub_18AF9ED38(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

uint64_t sub_18AF9ED44()
{
  return v0;
}

void __swiftcall CKQuerySubscription.init(recordType:predicate:subscriptionID:options:)(CKQuerySubscription *__return_ptr retstr, Swift::String recordType, NSPredicate *predicate, Swift::String subscriptionID, CKQuerySubscriptionOptions options)
{
  object = subscriptionID._object;
  uint64_t countAndFlagsBits = subscriptionID._countAndFlagsBits;
  v9 = recordType._object;
  uint64_t v10 = recordType._countAndFlagsBits;
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v12 = (void *)MEMORY[0x18C128F60](v10, v9);
  swift_bridgeObjectRelease();
  v13 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_initWithRecordType_predicate_subscriptionID_options_, v12, predicate, v13, options);
}

uint64_t CKQuerySubscription.recordType.getter()
{
  id v1 = objc_msgSend(v0, sel_recordType);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void __swiftcall CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(CKModifySubscriptionsOperation *__return_ptr retstr, Swift::OpaquePointer_optional subscriptionsToSave, Swift::OpaquePointer_optional subscriptionIDsToDelete)
{
  uint64_t v3 = *(void *)&subscriptionsToSave.is_nil;
  rawValue = subscriptionsToSave.value._rawValue;
  id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v6 = v5;
  if (rawValue)
  {
    sub_18AF9EF54();
    id v7 = v6;
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v5;
    v8.super.isa = 0;
  }
  objc_msgSend(v6, sel_setSubscriptionsToSave_, v8.super.isa);

  if (v3)
  {
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.isa = 0;
  }
  objc_msgSend(v6, sel_setSubscriptionIDsToDelete_, v10.super.isa);
}

unint64_t sub_18AF9EF54()
{
  unint64_t result = qword_1E9125620;
  if (!qword_1E9125620)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9125620);
  }
  return result;
}

void CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v1;
    v9[4] = sub_18AF9F854;
    v9[5] = v4;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AFAF510;
    v9[3] = &unk_1ED7F1040;
    _Block_copy(v9);
    sub_18AF18598();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setPerSubscriptionSaveBlock_);
    _Block_release(v3);
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v1;
    v9[4] = sub_18AF9FC7C;
    v9[5] = v4;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AF9FC84;
    v9[3] = &unk_1ED7F1658;
    _Block_copy(v9);
    sub_18AF18598();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setPerSubscriptionDeleteBlock_);
    _Block_release(v3);
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v3 = sub_18AF19EAC();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    v9[4] = sub_18AFA085C;
    v9[5] = v3;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AFA00BC;
    v9[3] = &unk_1ED7F1360;
    uint64_t v4 = _Block_copy(v9);
    sub_18AF42F30((uint64_t)v2);
    swift_retain();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setModifySubscriptionsCompletionBlock_);
    _Block_release(v4);
    objc_msgSend(v2, sel_setCanDropItemResultsEarly_, 1, v9[0]);
    sub_18AF30B4C();
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

uint64_t CKModifySubscriptionsOperation.subscriptionIDsToDelete.getter()
{
  return sub_18AFA08E8(v0);
}

void sub_18AF9F2CC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(v0);
}

void CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(uint64_t a1)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v1, sel_setSubscriptionIDsToDelete_, isa);
}

void (*CKModifySubscriptionsOperation.subscriptionIDsToDelete.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  *a1 = sub_18AFA08E8(v1);
  return sub_18AF9F3B8;
}

void sub_18AF9F3B8(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(*a1);
  }
}

void (*CKModifySubscriptionsOperation.perSubscriptionSaveBlock.getter())(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  unint64_t result = (void (*)(uint64_t, uint64_t, void *, char))objc_msgSend(v0, sel_perSubscriptionSaveBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFA0978;
    *(void *)(v4 + 24) = v3;
    return sub_18AFA0980;
  }
  return result;
}

uint64_t sub_18AF9F4A0@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifySubscriptionsOperation.perSubscriptionSaveBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFA0A94;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AF9F510(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFA0A4C;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter((uint64_t)v4);
}

void sub_18AF9F5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)MEMORY[0x18C128F60]();
  if (a4) {
    uint64_t v9 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = (id)v9;
  (*(void (**)(uint64_t, void *, uint64_t))(a5 + 16))(a5, v8, a3);
}

void sub_18AF9F62C(uint64_t a1, uint64_t a2, id a3, char a4, void (*a5)(uint64_t, uint64_t, id, id))
{
  if (a4)
  {
    id v9 = a3;
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    id v12 = 0;
    id v13 = a3;
  }
  else
  {
    id v14 = a3;
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    id v12 = a3;
    id v13 = 0;
  }
  a5(v10, v11, v12, v13);

  sub_18AF62BA4(a3);
}

void sub_18AF9F6C4(uint64_t a1, uint64_t a2, void *a3, id a4, void (*a5)(uint64_t, uint64_t, id, uint64_t))
{
  if (a4)
  {
    id v9 = a4;
    a5(a1, a2, a4, 1);
    id v10 = a4;
LABEL_4:

    return;
  }
  if (a3)
  {
    id v12 = a3;
    a5(a1, a2, a3, 0);
    id v10 = v12;
    goto LABEL_4;
  }
  type metadata accessor for CKError(0);
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AF62B54();
  _BridgedStoredNSError.init(_:userInfo:)();
  a5(a1, a2, v13, 1);
}

uint64_t sub_18AF9F81C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AF9F854(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_18AF9F6C4(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, id, uint64_t))(v4 + 16));
}

uint64_t (*CKModifySubscriptionsOperation.perSubscriptionSaveBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifySubscriptionsOperation.perSubscriptionSaveBlock.getter();
  v1[1] = v2;
  return sub_18AF9F8A0;
}

uint64_t sub_18AF9F8A0(uint64_t *a1, char a2)
{
  return sub_18AF9FD9C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.getter())(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t result = (void (*)(uint64_t, uint64_t, void *, char))objc_msgSend(v0, sel_perSubscriptionDeleteBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFA098C;
    *(void *)(v4 + 24) = v3;
    return sub_18AFA0994;
  }
  return result;
}

uint64_t sub_18AF9F970@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFA0A58;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AF9F9E0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFA0A4C;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter((uint64_t)v4);
}

uint64_t sub_18AF9FA70(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(void *, uint64_t *))
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = a3;
  char v7 = a4 & 1;
  return a5(v8, &v6);
}

void sub_18AF9FAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)MEMORY[0x18C128F60]();
  if (a3) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v6);
}

void sub_18AF9FB3C(uint64_t a1, uint64_t a2, id a3, char a4, void (*a5)(uint64_t, uint64_t, id))
{
  if (a4)
  {
    id v9 = a3;
    a5(a1, a2, a3);
    sub_18AF53C0C(a3, 1);
  }
  else
  {
    a5(a1, a2, 0);
  }
}

void sub_18AF9FBDC(uint64_t a1, uint64_t a2, id a3, void (*a4)(uint64_t, uint64_t, id, uint64_t))
{
  if (a3)
  {
    id v8 = a3;
    a4(a1, a2, a3, 1);
  }
  else
  {
    a4(a1, a2, 0, 0);
  }
}

void sub_18AF9FC7C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_18AF9FBDC(a1, a2, a3, *(void (**)(uint64_t, uint64_t, id, uint64_t))(v3 + 16));
}

void sub_18AF9FC84(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t (*CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.getter();
  v1[1] = v2;
  return sub_18AF9FD5C;
}

uint64_t sub_18AF9FD5C(uint64_t *a1, char a2)
{
  return sub_18AF9FD9C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

uint64_t sub_18AF9FD9C(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

void (*CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.getter())(objc_class *a1, objc_class *a2, uint64_t a3)
{
  uint64_t result = (void (*)(objc_class *, objc_class *, uint64_t))objc_msgSend(v0, sel_modifySubscriptionsCompletionBlock);
  if (result)
  {
    *(void *)(sub_18AF33890() + 16) = result;
    return sub_18AFA09A0;
  }
  return result;
}

uint64_t sub_18AF9FEAC@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result = (uint64_t)CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFA0A14;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())result;
  return result;
}

void sub_18AF9FF1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
  }
  sub_18AF42F30(v1);
  CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.setter();
}

uint64_t sub_18AF9FFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t *, uint64_t *))
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v5 = a3;
  return a4(&v7, &v6, &v5);
}

void CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.setter()
{
}

void sub_18AF9FFFC(objc_class *a1, Class a2, uint64_t a3, uint64_t a4)
{
  Class isa = a1;
  if (a1)
  {
    sub_18AF9EF54();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    a2 = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, isa, a2);
}

uint64_t sub_18AFA00BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF9EF54();
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3) {
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t (*CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.getter();
  v1[1] = v2;
  return sub_18AFA01BC;
}

uint64_t sub_18AFA01BC(uint64_t *a1, char a2)
{
  return sub_18AF9FD9C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.getter())(objc_class *, objc_class *, uint64_t)
{
  uint64_t result = (void (*)(objc_class *, objc_class *, uint64_t))objc_msgSend(v0, sel_modifySubscriptionsCompletionBlock);
  if (result)
  {
    *(void *)(sub_18AF33890() + 16) = result;
    return sub_18AFA0B0C;
  }
  return result;
}

uint64_t sub_18AFA0268@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result = (uint64_t)CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFA0A14;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())result;
  return result;
}

void sub_18AFA02D8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
  }
  sub_18AF42F30(v1);
  CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter();
}

void CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter()
{
}

void sub_18AFA0374()
{
  sub_18AF16EA8();
  if (v3)
  {
    v5[4] = v1;
    v5[5] = v0;
    v5[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v5[2] = sub_18AFA00BC;
    v5[3] = v4;
    _Block_copy(v5);
    sub_18AF18598();
    uint64_t v3 = swift_release();
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_18AF342E0(v3, sel_setModifySubscriptionsCompletionBlock_);
  sub_18AF30B4C();
  _Block_release(v2);
  sub_18AF185B4();
}

uint64_t (*CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.getter();
  v1[1] = v2;
  return sub_18AFA0464;
}

uint64_t sub_18AFA0464(uint64_t *a1, char a2)
{
  return sub_18AF9FD9C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_modifySubscriptionsCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFA0B0C;
    *(void *)(v4 + 24) = v3;
    return sub_18AFA09A8;
  }
  return result;
}

uint64_t sub_18AFA0534@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void sub_18AFA05A4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter((uint64_t)v4);
}

void sub_18AFA0634(void *a1, char a2, void (*a3)(void, void, void *))
{
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1EB279440);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    MEMORY[0x18C12BB10](v9, -1, -1);
  }

  if (a2)
  {
    id v10 = a1;
    a3(0, 0, a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    a3(MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], 0);
  }
}

void sub_18AFA079C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void *, uint64_t))
{
  if (!a3) {
    goto LABEL_4;
  }
  swift_getErrorValue();
  id v6 = a3;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a4(0, 0);
    return;
  }
  id v7 = a3;
  a4(a3, 1);
}

void sub_18AFA085C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_18AFA079C(a1, a2, a3, *(void (**)(void *, uint64_t))(v3 + 16));
}

uint64_t (*CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.getter();
  v1[1] = v2;
  return sub_18AFA08A8;
}

uint64_t sub_18AFA08A8(uint64_t *a1, char a2)
{
  return sub_18AF9FD9C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFA08E8(void *a1)
{
  id v1 = objc_msgSend(a1, sel_subscriptionIDsToDelete);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AFA0940()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AFA0978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18AF9F5A0(a1, a2, a3, a4, *(void *)(v4 + 16));
}

void sub_18AFA0980(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  sub_18AF9F62C(a1, a2, a3, a4 & 1, *(void (**)(uint64_t, uint64_t, id, id))(v4 + 16));
}

void sub_18AFA098C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18AF9FAB8(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AFA0994(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  sub_18AF9FB3C(a1, a2, a3, a4 & 1, *(void (**)(uint64_t, uint64_t, id))(v4 + 16));
}

void sub_18AFA09A0(objc_class *a1, objc_class *a2, uint64_t a3)
{
  sub_18AF9FFFC(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AFA09A8(void *a1, char a2)
{
  sub_18AFA0634(a1, a2 & 1, *(void (**)(void, void, void *))(v2 + 16));
}

uint64_t sub_18AFA09B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKModifySubscriptionsOperation.subscriptionIDsToDelete.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18AFA0A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AF9FFAC(a1, a2, a3, *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *))(v3 + 16));
}

uint64_t sub_18AFA0A18(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(v3 + 16))(*a1, *a2, *a3);
}

uint64_t sub_18AFA0A4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_18AF9FA70(a1, a2, a3, a4 & 1, *(uint64_t (**)(void *, uint64_t *))(v4 + 16));
}

uint64_t sub_18AFA0A58(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, void))(v2 + 16))(*a1, a1[1], *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t sub_18AFA0A94(void *a1, uint64_t a2)
{
  return sub_18AFAF4D0(a1, a2, *(uint64_t (**)(void, void, void, void))(v2 + 16));
}

uint64_t sub_18AFA0B10(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_18AF5F6FC(a1, a2);
  sub_18AFA0CE0(1, a1, a2, (uint64_t *)&v26);
  long long v8 = v26;
  long long v26 = xmmword_18B1F0AA0;
  switch(*((void *)&v8 + 1) >> 62)
  {
    case 1:
      if ((uint64_t)v8 >> 32 < (int)v8)
      {
        __break(1u);
        JUMPOUT(0x18AFA0CD0);
      }
      sub_18AF389F8();
      sub_18AF5F6FC(v8, *((unint64_t *)&v8 + 1));
      sub_18AFA11A4((int)v8, (uint64_t)v8 >> 32, *((void *)&v8 + 1) & 0x3FFFFFFFFFFFFFFFLL, a3, a4, v8, *((unint64_t *)&v8 + 1), (uint64_t *)&v26);
      goto LABEL_6;
    case 2:
      sub_18AF389F8();
      sub_18AF5F6FC(v8, *((unint64_t *)&v8 + 1));
      swift_retain();
      swift_retain();
      sub_18AF3948C();
      sub_18AFA11A4(v17, v18, v19, v20, v21, v22, v23, v24);
      swift_release();
      swift_release();
LABEL_6:
      sub_18AF5AF68(v8, *((unint64_t *)&v8 + 1));
      break;
    case 3:
      sub_18AF389F8();
      sub_18AFA1390(0, 0, 0, a3, a4, v8, *((unint64_t *)&v8 + 1), (uint64_t *)&v26);
      sub_18AF5AF68(v8, *((unint64_t *)&v8 + 1));
      break;
    default:
      sub_18AF389F8();
      sub_18AF3948C();
      sub_18AFA1390(v9, v10, v11, v12, v13, v14, v15, v16);
      sub_18AF5AF68(v8, *((unint64_t *)&v8 + 1));
      break;
  }
  return v26;
}

uint64_t sub_18AFA0CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x18AFA0E3CLL);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(v5)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_18AFA1648(v10, a1, v9, a2, a3);
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 0:
        uint64_t v13 = BYTE6(a3);
        goto LABEL_12;
      case 1:
        uint64_t v13 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        goto LABEL_12;
      case 3:
LABEL_12:
        if (v13 < v11) {
          __break(1u);
        }
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  switch((int)v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
LABEL_14:
      uint64_t v14 = Data._Representation.subscript.getter();
      uint64_t v16 = v15;
      uint64_t result = sub_18AF5AF68(a2, a3);
      *a4 = v14;
      a4[1] = v16;
      return result;
    default:
LABEL_16:
      JUMPOUT(0);
  }
}

uint64_t sub_18AFA0E6C(const UInt8 *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_10:
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x18AFA109CLL);
      }
      unint64_t v18 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v19 = (int)a3;
      uint64_t v20 = v7;
      sub_18AF5F6FC(a5, a6);
      sub_18AF5F6FC(a3, a4);
      uint64_t result = sub_18AFA1294(v19, a3 >> 32, v18, a1, a2, a5, a6, a3, a4, a7);
      break;
    case 2uLL:
      uint64_t v16 = *(void *)(a3 + 16);
      unint64_t v18 = *(void *)(a3 + 24);
      uint64_t v19 = v16;
      uint64_t v20 = v7;
      sub_18AF5F6FC(a5, a6);
      sub_18AF5F6FC(a3, a4);
      swift_retain();
      swift_retain();
      sub_18AFA1294(v19, v18, a4 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, a5, a6, a3, a4, a7);
      if (v7) {
        goto LABEL_10;
      }
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      uint64_t v20 = &v17;
      sub_18AF5F6FC(a5, a6);
      return sub_18AFA14AC(0, 0, 0, a1, a2, a5, a6, a3, a4, a7);
    default:
      uint64_t v19 = (uint64_t)&v17;
      uint64_t v20 = v7;
      sub_18AF5F6FC(a5, a6);
      return sub_18AFA14AC(a3, a4 & 0xFFFFFFFFFFFFLL, BYTE6(a4), a1, a2, a5, a6, a3, a4, a7);
  }
  return result;
}

void *sub_18AFA10AC(const UInt8 *a1, uint64_t a2, const UInt8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v12 = Data.count.getter();
  CFDataRef v13 = CFDataCreate(v11, a3, v12);
  CFIndex v14 = Data.count.getter();
  CFDataRef v15 = CFDataCreate(v11, a1, v14);
  uint64_t result = (void *)PCSCopyUnwrappedKey();
  if (result)
  {
    CFDataRef v17 = result;
    BytePtr = CFDataGetBytePtr(v17);
    CFIndex Length = CFDataGetLength(v17);

    uint64_t v20 = sub_18AF63574((uint64_t)BytePtr, Length);
    uint64_t v22 = v21;

    uint64_t v23 = *a9;
    unint64_t v24 = a9[1];
    *a9 = v20;
    a9[1] = v22;
    return (void *)sub_18AF5AF68(v23, v24);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AFA11A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t *a8)
{
  uint64_t result = __DataStorage._bytes.getter();
  CFDataRef v15 = (const UInt8 *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  BOOL v16 = __OFSUB__(a2, a1);
  uint64_t v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = &v15[v19];
  if (v15) {
    uint64_t v21 = (uint64_t)v20;
  }
  else {
    uint64_t v21 = 0;
  }
  sub_18AFA0E6C(v15, v21, a4, a5, a6, a7, a8);
  sub_18AF5AF68(a4, a5);
  return sub_18AF5AF68(a6, a7);
}

uint64_t sub_18AFA1294(uint64_t a1, uint64_t a2, uint64_t a3, const UInt8 *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t *a10)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v17 = (const UInt8 *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v17 += a1 - result;
  }
  BOOL v18 = __OFSUB__(a2, a1);
  uint64_t v19 = a2 - a1;
  if (v18)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v20 = __DataStorage._length.getter();
  if (v20 >= v19) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v20;
  }
  uint64_t v22 = &v17[v21];
  if (v17) {
    uint64_t v23 = (uint64_t)v22;
  }
  else {
    uint64_t v23 = 0;
  }
  sub_18AFA10AC(v17, v23, a4, a5, a6, a7, a8, a9, a10);
  sub_18AF5AF68(a6, a7);
  return sub_18AF5AF68(a8, a9);
}

uint64_t sub_18AFA1390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t *a8)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a1;
  __int16 v14 = a2;
  char v15 = BYTE2(a2);
  char v16 = BYTE3(a2);
  char v17 = BYTE4(a2);
  char v18 = BYTE5(a2);
  sub_18AFA0E6C((const UInt8 *)&v13, (uint64_t)&v13 + a3, a4, a5, a6, a7, a8);
  sub_18AF5AF68(a4, a5);
  return sub_18AF5AF68(a6, a7);
}

uint64_t sub_18AFA14AC(uint64_t a1, uint64_t a2, uint64_t a3, const UInt8 *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t *a10)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a1;
  __int16 v15 = a2;
  char v16 = BYTE2(a2);
  char v17 = BYTE3(a2);
  char v18 = BYTE4(a2);
  char v19 = BYTE5(a2);
  sub_18AFA10AC((const UInt8 *)&v14, (uint64_t)&v14 + a3, a4, a5, a6, a7, a8, a9, a10);
  sub_18AF5AF68(a6, a7);
  return sub_18AF5AF68(a8, a9);
}

uint64_t sub_18AFA15D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v8 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v8)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)a3;
      uint64_t v5 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a3 + 16);
      uint64_t v5 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = 0;
      uint64_t v5 = BYTE6(a4);
      break;
  }
  if (v5 >= result)
  {
    BOOL v8 = __OFSUB__(result, v6);
    BOOL v7 = result - v6 < 0;
  }
  else
  {
    BOOL v8 = 0;
    BOOL v7 = 1;
  }
  if (v7 != v8)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x18AFA1638);
  }
  return result;
}

uint64_t sub_18AFA1648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_18AFA16D0(a1, a3, a4, a5);
  if (a2 <= 0)
  {
    if (v9 <= 0 && v9 > a2) {
      return 0;
    }
  }
  else if ((v9 & 0x8000000000000000) == 0 && v9 < (unint64_t)a2)
  {
    return 0;
  }
  return sub_18AFA15D0(a1, a2, a4, a5);
}

uint64_t sub_18AFA16D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v4 = a3 >> 32;
      uint64_t v5 = (int)a3;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = a3 >> 32;
      uint64_t v8 = (int)a3;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 16);
      uint64_t v7 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v7 = BYTE6(a4);
      break;
  }
  if (v7 < a2 || v8 > a2) {
    goto LABEL_21;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v10)
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x18AFA17A0);
  }
  return result;
}

CloudKit::CKDeviceCapability::Level_optional __swiftcall CKDeviceCapability.Level.init(rawValue:)(Swift::Int rawValue)
{
  unsigned int v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4) {
    LOBYTE(v2) = 3;
  }
  *id v1 = v2;
  return (CloudKit::CKDeviceCapability::Level_optional)rawValue;
}

void __swiftcall CKDeviceCapability.init(level:name:value:)(CloudKit::CKDeviceCapability *__return_ptr retstr, CloudKit::CKDeviceCapability::Level level, Swift::String name, Swift::String value)
{
  object = value._object;
  uint64_t countAndFlagsBits = value._countAndFlagsBits;
  uint64_t v6 = name._object;
  uint64_t v7 = name._countAndFlagsBits;
  CloudKit::CKDeviceCapability::Level v9 = *(unsigned char *)level;
  unint64_t v10 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_18AF5A52C(v10, v7, (unint64_t)v6);
    uint64_t v12 = MEMORY[0x18C129130](v11);
    if (v13) {
      break;
    }
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      uint64_t v14 = 0;
      __int16 v15 = (void *)0xE000000000000000;
      goto LABEL_6;
    }
  }
  uint64_t v14 = v12;
  __int16 v15 = v13;
  swift_bridgeObjectRelease();
LABEL_6:
  unint64_t v16 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_18AF5A52C(v16, countAndFlagsBits, (unint64_t)object);
    uint64_t v18 = MEMORY[0x18C129130](v17);
    if (v19) {
      break;
    }
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = 0;
      uint64_t v21 = (void *)0xE000000000000000;
      goto LABEL_11;
    }
  }
  uint64_t v20 = v18;
  uint64_t v21 = v19;
  swift_bridgeObjectRelease();
LABEL_11:
  retstr->level = v9;
  retstr->name._uint64_t countAndFlagsBits = v14;
  retstr->name._object = v15;
  retstr->value._uint64_t countAndFlagsBits = v20;
  retstr->value._object = v21;
}

uint64_t CKDeviceCapability.Level.rawValue.getter()
{
  return *v0 + 1;
}

uint64_t CKDeviceCapabilitySet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_18AFA29E8();
  sub_18AF19278();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t static CKDeviceCapabilitySet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_18AF5A938(*a1, *a2);
}

Swift::Bool __swiftcall CKDeviceCapabilitySet.contains(_:)(CloudKit::CKDeviceCapabilitySet a1)
{
  uint64_t v21 = *(void *)(*(void *)a1._sortedCapabilities._rawValue + 16);
  if (!v21) {
    return 1;
  }
  int64_t v2 = 0;
  uint64_t v3 = 0;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = *(void *)a1._sortedCapabilities._rawValue + 32;
  uint64_t v6 = *(void *)v1 + 64;
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  while (2)
  {
    Swift::Bool result = v2 < v4;
    if (v2 < v4)
    {
      uint64_t v8 = (void *)(v5 + 40 * v3);
      int v9 = *(unsigned __int8 *)v8;
      uint64_t v10 = v8[2];
      uint64_t v11 = v8[3];
      uint64_t v12 = v8[4];
      uint64_t v22 = v3 + 1;
      uint64_t v23 = v8[1];
      uint64_t v13 = (uint64_t *)(v6 + 40 * v2);
      uint64_t v14 = v2;
      while (1)
      {
        if (v2 >= (unint64_t)v4)
        {
          __break(1u);
          return result;
        }
        if (*((unsigned __int8 *)v13 - 32) == v9)
        {
          uint64_t v15 = *(v13 - 1);
          uint64_t v16 = *v13;
          BOOL v17 = *(v13 - 3) == v23 && *(v13 - 2) == v10;
          if (v17 || (Swift::Bool result = _stringCompareWithSmolCheck(_:_:expecting:)()))
          {
            if (v15 == v11 && v16 == v12) {
              break;
            }
            Swift::Bool result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              break;
            }
          }
        }
        ++v14;
        v13 += 5;
        if (v14 >= v4) {
          return 0;
        }
      }
      int64_t v2 = v14 + 1;
      uint64_t v3 = v22;
      uint64_t v6 = v19;
      uint64_t v5 = v20;
      Swift::Bool result = 1;
      if (v22 != v21) {
        continue;
      }
    }
    break;
  }
  return result;
}

uint64_t CKDeviceCapabilityCheckOptions.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v4 = sub_18AF19284(v3);
  MEMORY[0x1F4188790](v4);
  sub_18AF33940();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v18 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = type metadata accessor for Date();
  sub_18AF43708((uint64_t)v10, 1, 1, v11);
  char v19 = 0;
  sub_18AFA4A38((uint64_t)v10, (uint64_t)v7);
  sub_18AFA4A38((uint64_t)v7, v1);
  uint64_t v12 = sub_18AF1A054();
  if (sub_18AF436E0(v12, v13, v11) == 1)
  {
    sub_18AFA4AA0((uint64_t)v7);
    char v14 = 0;
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18AFA4AA0((uint64_t)v7);
    sub_18AF19278();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v11);
    char v14 = v19;
  }
  uint64_t result = sub_18AFA4AA0((uint64_t)v10);
  *(unsigned char *)a1 = v14;
  *(void *)(a1 + 8) = isa;
  return result;
}

uint64_t CKDeviceCapabilityCheckOptions.init(excludeDevicesWithoutCapabilityCheckingSupport:excludeZoneAccessBefore:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v8 = sub_18AF19284(v7);
  MEMORY[0x1F4188790](v8);
  sub_18AF33940();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v19 - v10;
  char v20 = a1;
  sub_18AFA4A38(a2, (uint64_t)&v19 - v10);
  sub_18AFA4A38((uint64_t)v11, v3);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = sub_18AF1A054();
  if (sub_18AF436E0(v13, v14, v12) == 1)
  {
    char v15 = a1 & 1;
    sub_18AFA4AA0((uint64_t)v11);
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18AFA4AA0((uint64_t)v11);
    sub_18AF19278();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v3, v12);
    char v15 = v20;
  }
  uint64_t result = sub_18AFA4AA0(a2);
  *(unsigned char *)a3 = v15;
  *(void *)(a3 + 8) = isa;
  return result;
}

BOOL static CKDeviceCapabilityCheckOptions.== infix(_:_:)()
{
  sub_18AF30BFC();
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void **)(v0 + 8);
  uint64_t v5 = *(void **)(v1 + 8);
  if (v4)
  {
    if (v5)
    {
      sub_18AF34EA0(0, &qword_1E9125D00);
      id v6 = v5;
      id v7 = v4;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8) {
        return 1;
      }
    }
    return 0;
  }
  return !v5;
}

CloudKit::CKDeviceCapabilityCheckResult __swiftcall CKDeviceCapabilityCheckResult.init(isSupported:)(CloudKit::CKDeviceCapabilityCheckResult isSupported)
{
  v1->isSupported = isSupported.isSupported;
  return isSupported;
}

BOOL sub_18AFA1E48(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_18AFA1E54(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x656D614E656E6F7ALL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = "anonymousCKUserID";
  unint64_t v6 = 0x656D614E656E6F7ALL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0x6D614E72656E776FLL;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 2:
      unint64_t v3 = 0x800000018B1D1860;
      unint64_t v6 = 0xD000000000000011;
      break;
    case 3:
      sub_18AF402A4();
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x6D614E72656E776FLL;
      unint64_t v7 = 0xE900000000000065;
      break;
    case 2:
      unint64_t v7 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v2 = 0x6573616261746164;
      unint64_t v7 = 0xED000065706F6353;
      break;
    default:
      break;
  }
  if (v6 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_18AFA1FE4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x4449656E6F7ALL;
  }
  else {
    uint64_t v3 = 0x614E64726F636572;
  }
  if (v2) {
    unint64_t v4 = 0xEA0000000000656DLL;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x4449656E6F7ALL;
  }
  else {
    uint64_t v5 = 0x614E64726F636572;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xEA0000000000656DLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_18AFA2088(int a1, Swift::UInt a2)
{
}

uint64_t sub_18AFA20B0(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 3:
      sub_18AF402A4();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFA2180()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void sub_18AFA21EC(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t static CKDeviceCapability.MaxUTF8Bytes.getter()
{
  return 128;
}

Swift::Int sub_18AFA2220()
{
  return sub_18AFC45E4(*v0);
}

void sub_18AFA2228(uint64_t a1)
{
  sub_18AFA21EC(a1, *v1);
}

Swift::Int sub_18AFA2230(uint64_t a1)
{
  return sub_18AFC4684(a1, *v1);
}

CloudKit::CKDeviceCapability::Level_optional sub_18AFA2238(Swift::Int *a1)
{
  return CKDeviceCapability.Level.init(rawValue:)(*a1);
}

uint64_t sub_18AFA2240@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKDeviceCapability.Level.rawValue.getter();
  *a1 = result;
  return result;
}

void CKDeviceCapability.level.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *CKDeviceCapability.level.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*CKDeviceCapability.level.modify())()
{
  return nullsub_2;
}

uint64_t sub_18AFA22D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFA22DC()
{
  return CKDeviceCapability.name.setter();
}

uint64_t CKDeviceCapability.name.setter()
{
  sub_18AF305FC();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v0;

  return sub_18AFA2360();
}

uint64_t sub_18AFA2360()
{
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v3 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_18AF5A52C(v3, v2, v1);
    uint64_t v5 = MEMORY[0x18C129130](v4);
    if (v6) {
      break;
    }
    if (!--v3)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0;
      unint64_t v9 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  uint64_t result = swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(v0 + 8) = v8;
  *(void *)(v0 + 16) = v9;
  return result;
}

uint64_t (*CKDeviceCapability.name.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return sub_18AFA2408;
}

uint64_t sub_18AFA2408(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_18AFA2360();
  }
  return result;
}

uint64_t sub_18AFA2464@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFA2470()
{
  return CKDeviceCapability.value.setter();
}

uint64_t CKDeviceCapability.value.setter()
{
  sub_18AF305FC();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;

  return sub_18AFA24F4();
}

uint64_t sub_18AFA24F4()
{
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v3 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_18AF5A52C(v3, v2, v1);
    uint64_t v5 = MEMORY[0x18C129130](v4);
    if (v6) {
      break;
    }
    if (!--v3)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0;
      unint64_t v9 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  uint64_t result = swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(v0 + 24) = v8;
  *(void *)(v0 + 32) = v9;
  return result;
}

uint64_t (*CKDeviceCapability.value.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return sub_18AFA259C;
}

uint64_t sub_18AFA259C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_18AFA24F4();
  }
  return result;
}

BOOL CKDeviceCapability.isEmpty.getter()
{
  unint64_t v1 = v0[2];
  uint64_t v2 = v0[1] & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = v0[4];
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v4 = v0[3] & 0xFFFFFFFFFFFFLL;
  }
  return v4 == 0;
}

uint64_t CKDeviceCapability.hash(into:)()
{
  Hasher._combine(_:)(*v0 + 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static CKDeviceCapability.== infix(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  BOOL v6 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      sub_18AF2AD20();
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

Swift::Int CKDeviceCapability.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_18AF3A2D4();
  Hasher._combine(_:)(v1 + 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_18AFA27EC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void static CKDeviceCapability.compare(_:_:)()
{
  sub_18AF30BFC();
  if (!v6)
  {
LABEL_13:
    sub_18AF3387C();
    return;
  }
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  BOOL v6 = v0[1] == v1[1] && v0[2] == v1[2];
  if (v6 || (sub_18AF33BEC(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v2 == v4 && v3 == v5) {
      goto LABEL_13;
    }
    sub_18AF2AD20();
  }
  else
  {
    sub_18AF33BEC();
  }
  sub_18AF3387C();
  _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t CKDeviceCapabilitySet.capabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFA2944@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKDeviceCapabilitySet.capabilities.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18AFA2980()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return CKDeviceCapabilitySet.capabilities.setter(v0);
}

#error "18AFA29C4: call analysis failed (funcsize=15)"

uint64_t sub_18AFA29E8()
{
  dispatch thunk of Collection.count.getter();
  sub_18AF655A0();
  uint64_t v1 = v0;
  uint64_t v2 = Sequence.sorted(by:)();
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    uint64_t v5 = v1;
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = (unint64_t *)(v2 + 64);
  uint64_t v5 = v1;
  do
  {
    uint64_t v6 = *((unsigned __int8 *)v4 - 32);
    uint64_t v8 = *(v4 - 3);
    unint64_t v7 = *(v4 - 2);
    uint64_t v10 = *(v4 - 1);
    unint64_t v9 = *v4;
    uint64_t v11 = *(void *)(v5 + 16);
    if (!v11)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_18AF5A618(0, 0, 0);
      sub_18AF5A618(v6, v8, v7);
      goto LABEL_18;
    }
    uint64_t v12 = (void *)(v5 + 40 * v11);
    if (*((unsigned __int8 *)v12 - 8) != v6
      || ((uint64_t v13 = v12[2], v14 = v12[3], *v12 == v8) ? (v15 = v12[1] == v7) : (v15 = 0),
          !v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      uint64_t v18 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v18 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (v18)
      {
        uint64_t v19 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0) {
          uint64_t v19 = v10 & 0xFFFFFFFFFFFFLL;
        }
        if (v19)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_18AF655A0();
            uint64_t v5 = v23;
          }
          unint64_t v21 = *(void *)(v5 + 16);
          unint64_t v20 = *(void *)(v5 + 24);
          if (v21 >= v20 >> 1)
          {
            sub_18AF34080(v20);
            sub_18AF655A0();
            uint64_t v5 = v24;
          }
          *(void *)(v5 + 16) = v21 + 1;
          uint64_t v22 = v5 + 40 * v21;
          *(unsigned char *)(v22 + 32) = v6;
          *(void *)(v22 + 40) = v8;
          *(void *)(v22 + 48) = v7;
          *(void *)(v22 + 56) = v10;
          *(void *)(v22 + 64) = v9;
        }
      }
      goto LABEL_30;
    }
    if (v13 == v10 && v14 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v17 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_30:
    v4 += 5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_33:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t (*CKDeviceCapabilitySet.capabilities.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_18AFA2CEC;
}

#error "18AFA2D48: call analysis failed (funcsize=32)"

BOOL sub_18AFA2D6C()
{
  sub_18AF30BFC();
  if (v7)
  {
    uint64_t v3 = v1[3];
    uint64_t v4 = v1[4];
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    BOOL v7 = v1[1] == v2[1] && v1[2] == v2[2];
    if (v7 || (sub_18AF3AA00(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (v3 == v5 && v4 == v6) {
        return 0;
      }
    }
    else
    {
      sub_18AF3AA00();
    }
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
  else
  {
    return !v0;
  }
}

CloudKit::CKDeviceCapabilitySet __swiftcall CKDeviceCapabilitySet.init()()
{
  *char v0 = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t CKDeviceCapabilitySet.subscript.getter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  int v4 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v5 = (uint64_t *)(v2 + 64);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  do
  {
    if (*((unsigned __int8 *)v5 - 32) == v4)
    {
      uint64_t v8 = *(v5 - 3);
      uint64_t v7 = *(v5 - 2);
      uint64_t v9 = *(v5 - 1);
      uint64_t v10 = *v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_18AF5B1A8();
      }
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_18AF34080(v11);
        sub_18AF5B1A8();
      }
      *(void *)(v6 + 16) = v12 + 1;
      uint64_t v13 = v6 + 40 * v12;
      *(unsigned char *)(v13 + 32) = v4;
      *(void *)(v13 + 40) = v8;
      *(void *)(v13 + 48) = v7;
      *(void *)(v13 + 56) = v9;
      *(void *)(v13 + 64) = v10;
    }
    v5 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_18AFA2F5C@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 v4 = *a2;
  uint64_t v7 = *a1;
  unsigned __int8 v6 = v4;
  uint64_t result = CKDeviceCapabilitySet.subscript.getter(&v6);
  *a3 = result;
  return result;
}

uint64_t sub_18AFA2FA4(uint64_t a1, uint64_t a2, char *a3)
{
  char v5 = *a3;
  uint64_t v3 = swift_bridgeObjectRetain();
  return CKDeviceCapabilitySet.subscript.setter(v3, &v5);
}

#error "18AFA3238: call analysis failed (funcsize=160)"

void sub_18AFA3264(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_18AF655A0();
    uint64_t v3 = v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18AFA78E0();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_18AFA3344(uint64_t a1)
{
}

void sub_18AFA3364(uint64_t a1)
{
}

void sub_18AFA3384(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 + v3 > *(void *)(v4 + 24) >> 1)
  {
    sub_18AF38258();
    uint64_t v4 = a2();
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((*(void *)(v4 + 24) >> 1) - *(void *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18AFA7A64();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v2 = v4;
    sub_18AF3387C();
    return;
  }
  uint64_t v8 = *(void *)(v4 + 16);
  BOOL v9 = __OFADD__(v8, v3);
  uint64_t v10 = v8 + v3;
  if (!v9)
  {
    *(void *)(v4 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_18AFA3470(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AF22CF0();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_30;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x18C1298D0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    uint64_t result = sub_18AF33150(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  sub_18AF3387C();
  return specialized Array._endMutation()();
}

void sub_18AFA362C()
{
  sub_18AFA8DE8();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v7 = *(void *)(v1 + 24) >> 1, v7 < v3))
  {
    sub_18AF38258();
    sub_18AF6590C();
    uint64_t v1 = v8;
    uint64_t v7 = *(void *)(v8 + 24) >> 1;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (v7 - *(void *)(v1 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18AFA7B08();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *char v0 = v1;
    return;
  }
  uint64_t v9 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v9, v2);
  uint64_t v10 = v9 + v2;
  if (!v5)
  {
    *(void *)(v1 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_18AFA3704()
{
  sub_18AFA8DE8();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v7 = *(void *)(v1 + 24) >> 1, v7 < v3))
  {
    sub_18AF38258();
    sub_18AF65A10(v8, v9, v10, v11);
    uint64_t v1 = v12;
    uint64_t v7 = *(void *)(v12 + 24) >> 1;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (v7 - *(void *)(v1 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18AFA7BDC();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *char v0 = v1;
    return;
  }
  uint64_t v13 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v13, v2);
  uint64_t v14 = v13 + v2;
  if (!v5)
  {
    *(void *)(v1 + 16) = v14;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t (*CKDeviceCapabilitySet.subscript.modify(uint64_t a1, unsigned __int8 *a2))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 8) = v2;
  unsigned __int8 v3 = *a2;
  *(unsigned char *)(a1 + 16) = *a2;
  uint64_t v6 = *v2;
  unsigned __int8 v5 = v3;
  *(void *)a1 = CKDeviceCapabilitySet.subscript.getter(&v5);
  return sub_18AFA384C;
}

uint64_t sub_18AFA384C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    char v5 = *((unsigned char *)a1 + 16);
    uint64_t v3 = swift_bridgeObjectRetain();
    CKDeviceCapabilitySet.subscript.setter(v3, &v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = *((unsigned char *)a1 + 16);
    return CKDeviceCapabilitySet.subscript.setter(v2, &v6);
  }
}

#error "18AFA3954: call analysis failed (funcsize=46)"

#error "18AFA3A50: call analysis failed (funcsize=62)"

void CKDeviceCapabilitySet.hash(into:)()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 64;
    do
    {
      Hasher._combine(_:)(*(unsigned __int8 *)(v3 - 32) + 1);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

Swift::Int CKDeviceCapabilitySet.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_18AF3A2D4();
  swift_bridgeObjectRetain();
  sub_18AFA8040((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_18AFA3BE4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_18AFA8040((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t CKDeviceCapabilitySet.startIndex.getter()
{
  return 0;
}

uint64_t CKDeviceCapabilitySet.endIndex.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

BOOL CKDeviceCapabilitySet.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

unint64_t CKDeviceCapabilitySet.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v3 = *(void *)v2 + 40 * result;
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 56);
  uint64_t v7 = *(void *)(v3 + 64);
  *(unsigned char *)a2 = *(unsigned char *)(v3 + 32);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v7;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t sub_18AFA3CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = __OFADD__(a1, a2);
  unint64_t result = a1 + a2;
  if (v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > *(void *)(a3 + 16)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t sub_18AFA3CF8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int64_t v7 = sub_18AF5AE98(a1, a3, a4);
  if (a2 < 1)
  {
    if (v7 <= 0 && v7 > a2) {
      return 0;
    }
  }
  else if ((v7 & 0x8000000000000000) == 0 && v7 < (unint64_t)a2)
  {
    return 0;
  }
  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (result > *(void *)(a4 + 16)) {
LABEL_14:
  }
    __break(1u);
  return result;
}

unint64_t sub_18AFA3D80@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_18AFA3DB0(*a1, *v2);
  *a2 = result;
  return result;
}

unint64_t sub_18AFA3DB0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a1, 1);
  unint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result >= *(void *)(a2 + 16)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t *sub_18AFA3DD0(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(*(void *)v1 + 16))
  {
    *unint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_18AFA3DFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_18AFA3CD4(*a1, a2, *v3);
  *a3 = result;
  return result;
}

unint64_t sub_18AFA3E2C(unint64_t *a1, unint64_t *a2)
{
  return sub_18AF5AE98(*a1, *a2, *v2);
}

void sub_18AFA3E3C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_18AFA3E44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKDeviceCapabilitySet.endIndex.getter();
  *a1 = result;
  return result;
}

void (*sub_18AFA3E6C())(void *a1)
{
  sub_18AF305FC();
  unint64_t v2 = (void (**)(void **))malloc(0x28uLL);
  *uint64_t v1 = v2;
  v2[4] = sub_18AFA3EC8(v2, *v0);
  return sub_18AF33408;
}

void (*sub_18AFA3EC8(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x28uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v2 + 40 * a2;
    uint64_t v9 = *(void *)(v7 + 40);
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v10 = *(void *)(v7 + 56);
    uint64_t v11 = *(void *)(v7 + 64);
    *(unsigned char *)uint64_t v6 = *(unsigned char *)(v7 + 32);
    *((void *)v6 + 1) = v9;
    *((void *)v6 + 2) = v8;
    *((void *)v6 + 3) = v10;
    *((void *)v6 + 4) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_18AFA3F6C;
  }
  __break(1u);
  return result;
}

void sub_18AFA3F6C(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_18AFA3FB4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_18AFA3FC4(*a1, a1[1], *v2, a2);
}

uint64_t sub_18AFA3FC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (result < 0 || *(void *)(a3 + 16) < a2)
  {
    __break(1u);
  }
  else
  {
    a4[1] = a2;
    a4[2] = a3;
    *a4 = result;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18AFA3FE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18AFA4014();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18AFA4014()
{
  return 0;
}

void sub_18AFA4024(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

unint64_t sub_18AFA4034@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_18AFA3CF8(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_18AFA4070(uint64_t *a1, uint64_t *a2)
{
  return sub_18AFA4084(*a1, *a2, a2[1]);
}

uint64_t sub_18AFA4084(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a2)
  {
    BOOL v4 = __OFSUB__(result, a3);
    BOOL v3 = result - a3 < 0;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v3 = 0;
  }
  if (v3 == v4) {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AFA4098(uint64_t *a1, uint64_t *a2)
{
  return sub_18AFA40AC(*a1, *a2, a2[1]);
}

uint64_t sub_18AFA40AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AFA40C0(uint64_t *a1, uint64_t *a2)
{
  return sub_18AFA40D8(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_18AFA40D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2) {
    __break(1u);
  }
  return result;
}

unint64_t sub_18AFA40EC@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_18AFA411C(*a1, *v2);
  *a2 = result;
  return result;
}

unint64_t sub_18AFA411C(unint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) <= result) {
    __break(1u);
  }
  else {
    ++result;
  }
  return result;
}

void *sub_18AFA4134(void *result)
{
  if (*result >= *(void *)(*(void *)v1 + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_18AFA4158(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_18AFA4164()
{
  return sub_18AFA416C(*v0);
}

uint64_t sub_18AFA416C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_18AFA4174()
{
  return sub_18AFA417C(*v0);
}

void *sub_18AFA417C(uint64_t a1)
{
  uint64_t v1 = sub_18AFBF578(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_18AFA41B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFFF630(a1, a2, a3, *v3);
}

uint64_t CKDeviceCapabilitySet.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_18AF655A0();
  uint64_t v4 = v3;
  uint64_t v92 = *(void *)(a1 + 16);
  if (!v92) {
    goto LABEL_81;
  }
  unint64_t v5 = 0;
  uint64_t v93 = a1 + 32;
  uint64_t v91 = a1;
  while (2)
  {
    if (v5 >= *(void *)(a1 + 16))
    {
LABEL_88:
      __break(1u);
LABEL_89:
      sub_18AF18574();
      sub_18AF22D28();
      uint64_t result = sub_18AF35128();
      __break(1u);
      return result;
    }
    uint64_t v6 = (unsigned __int8 *)(v93 + 16 * v5);
    HIDWORD(v102) = *v6;
    uint64_t v7 = *((void *)v6 + 1);
    uint64_t v94 = v5 + 1;
    uint64_t v96 = v7 + 64;
    uint64_t v8 = 1 << *(unsigned char *)(v7 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v7 + 64);
    int64_t v97 = (unint64_t)(v8 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v11 = 0;
    uint64_t v95 = v7;
    if (v10)
    {
LABEL_8:
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_86;
      }
      if (v14 >= v97) {
        break;
      }
      unint64_t v15 = *(void *)(v96 + 8 * v14);
      ++v11;
      if (v15) {
        goto LABEL_22;
      }
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v97) {
        break;
      }
      unint64_t v15 = *(void *)(v96 + 8 * v11);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v11 = v14 + 2;
      if (v14 + 2 >= v97) {
        break;
      }
      unint64_t v15 = *(void *)(v96 + 8 * v11);
      if (v15) {
        goto LABEL_22;
      }
      int64_t v16 = v14 + 3;
      if (v16 >= v97) {
        break;
      }
      unint64_t v15 = *(void *)(v96 + 8 * v16);
      if (!v15)
      {
        while (1)
        {
          int64_t v11 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_87;
          }
          if (v11 >= v97) {
            goto LABEL_80;
          }
          unint64_t v15 = *(void *)(v96 + 8 * v11);
          ++v16;
          if (v15) {
            goto LABEL_22;
          }
        }
      }
      int64_t v11 = v16;
LABEL_22:
      unint64_t v10 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_23:
      uint64_t v17 = *(void *)(*(void *)(v7 + 56) + 8 * v13);
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v99 = v10;
        uint64_t v100 = v11;
        uint64_t v101 = v4;
        uint64_t v19 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v13);
        uint64_t v20 = *v19;
        unint64_t v21 = v19[1];
        uint64_t v115 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_18AF5B1A8();
        uint64_t v22 = 0;
        uint64_t v23 = v115;
        uint64_t v98 = v17;
        uint64_t v103 = v17 + 32;
        if ((v21 & 0x2000000000000000) != 0) {
          uint64_t v24 = HIBYTE(v21) & 0xF;
        }
        else {
          uint64_t v24 = v20 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v110 = v24;
        uint64_t v25 = (v24 << 16) | 0xB;
        uint64_t v109 = (v24 << 16) | 7;
        if ((v20 & 0x800000000000000) != 0) {
          uint64_t v25 = (v24 << 16) | 7;
        }
        uint64_t v108 = v25;
        uint64_t v104 = v20;
        uint64_t v105 = v18;
        do
        {
          uint64_t v107 = v22;
          long long v26 = (uint64_t *)(v103 + 16 * v22);
          unint64_t v27 = v26[1];
          uint64_t v114 = *v26;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v28 = 8388612;
          unint64_t v29 = 128;
          uint64_t v106 = v23;
          while (1)
          {
            if ((v21 & 0x1000000000000000) != 0)
            {
              uint64_t v31 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
              uint64_t v30 = (v32 & 1) != 0 ? v108 : v31;
            }
            else
            {
              uint64_t v30 = v110 >= v29 ? v28 : v109;
            }
            swift_bridgeObjectRetain();
            uint64_t v33 = MEMORY[0x18C129100](15, v30, v20, v21);
            uint64_t v35 = v34;
            uint64_t v37 = v36;
            uint64_t v39 = v38;
            swift_bridgeObjectRelease();
            uint64_t v40 = MEMORY[0x18C129130](v33, v35, v37, v39);
            if (v41) {
              break;
            }
            v28 -= 0x10000;
            if (!--v29)
            {
              swift_bridgeObjectRelease();
              uint64_t v42 = 0;
              unint64_t v43 = 0xE000000000000000;
              goto LABEL_42;
            }
          }
          uint64_t v42 = v40;
          unint64_t v43 = v41;
          swift_bridgeObjectRelease();
LABEL_42:
          uint64_t v44 = v114;
          if ((v27 & 0x2000000000000000) != 0) {
            uint64_t v45 = HIBYTE(v27) & 0xF;
          }
          else {
            uint64_t v45 = v114 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v113 = v45;
          uint64_t v46 = (v45 << 16) | 0xB;
          if ((v114 & 0x800000000000000) != 0) {
            uint64_t v46 = (v45 << 16) | 7;
          }
          uint64_t v111 = v46;
          uint64_t v112 = (v45 << 16) | 7;
          uint64_t v47 = 8388612;
          unint64_t v48 = 128;
          while (1)
          {
            if ((v27 & 0x1000000000000000) != 0)
            {
              uint64_t v50 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
              uint64_t v49 = (v51 & 1) != 0 ? v111 : v50;
            }
            else
            {
              uint64_t v49 = v113 >= v48 ? v47 : v112;
            }
            swift_bridgeObjectRetain();
            uint64_t v52 = MEMORY[0x18C129100](15, v49, v44, v27);
            uint64_t v54 = v53;
            uint64_t v56 = v55;
            uint64_t v58 = v57;
            swift_bridgeObjectRelease();
            uint64_t v59 = MEMORY[0x18C129130](v52, v54, v56, v58);
            if (v60) {
              break;
            }
            v47 -= 0x10000;
            --v48;
            uint64_t v44 = v114;
            if (!v48)
            {
              swift_bridgeObjectRelease();
              uint64_t v61 = 0;
              unint64_t v62 = 0xE000000000000000;
              goto LABEL_59;
            }
          }
          uint64_t v61 = v59;
          unint64_t v62 = v60;
          swift_bridgeObjectRelease();
LABEL_59:
          uint64_t v23 = v106;
          uint64_t v63 = v107;
          unint64_t v64 = *(void *)(v106 + 16);
          if (v64 >= *(void *)(v106 + 24) >> 1)
          {
            sub_18AF5B1A8();
            uint64_t v63 = v107;
            uint64_t v23 = v106;
          }
          *(void *)(v23 + 16) = v64 + 1;
          uint64_t v65 = v23 + 40 * v64;
          *(unsigned char *)(v65 + 32) = BYTE4(v102);
          uint64_t v22 = v63 + 1;
          *(void *)(v65 + 40) = v42;
          *(void *)(v65 + 48) = v43;
          *(void *)(v65 + 56) = v61;
          *(void *)(v65 + 64) = v62;
          uint64_t v20 = v104;
        }
        while (v22 != v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v11 = v100;
        uint64_t v4 = v101;
        uint64_t v7 = v95;
        unint64_t v10 = v99;
      }
      else
      {
        uint64_t v23 = MEMORY[0x1E4FBC860];
      }
      uint64_t v66 = *(void *)(v23 + 16);
      uint64_t v67 = *(void *)(v4 + 16);
      if (__OFADD__(v67, v66))
      {
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      if (v67 + v66 > *(void *)(v4 + 24) >> 1)
      {
        sub_18AF655A0();
        uint64_t v4 = v74;
        if (!*(void *)(v23 + 16))
        {
LABEL_77:
          if (v66) {
            goto LABEL_83;
          }
          goto LABEL_78;
        }
      }
      else if (!v66)
      {
        goto LABEL_77;
      }
      uint64_t v68 = *(void *)(v4 + 16);
      if ((*(void *)(v4 + 24) >> 1) - v68 < v66) {
        goto LABEL_84;
      }
      unint64_t v69 = v4 + 40 * v68 + 32;
      if (v23 + 32 < v69 + 40 * v66 && v69 < v23 + 32 + 40 * v66) {
        goto LABEL_89;
      }
      swift_arrayInitWithCopy();
      if (v66)
      {
        uint64_t v71 = *(void *)(v4 + 16);
        BOOL v72 = __OFADD__(v71, v66);
        uint64_t v73 = v71 + v66;
        if (v72) {
          goto LABEL_85;
        }
        *(void *)(v4 + 16) = v73;
      }
LABEL_78:
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_8;
      }
    }
LABEL_80:
    swift_release();
    a1 = v91;
    unint64_t v5 = v94;
    if (v94 != v92) {
      continue;
    }
    break;
  }
LABEL_81:
  swift_bridgeObjectRelease();
  uint64_t v75 = swift_bridgeObjectRetain();
  sub_18AF5A6A8(v75, v76, v77, v78, v79, v80, v81, v82, v86, v87, v88, a2, v91, v92, v93, v94, v95, v96, v97,
    v98,
    v99,
    v100,
    v101,
    v102);
  uint64_t v84 = v83;
  uint64_t result = swift_bridgeObjectRelease_n();
  void *v90 = v84;
  return result;
}

#error "18AFA4820: call analysis failed (funcsize=14)"

uint64_t CKDeviceCapabilityCheckOptions.excludeDevicesWithoutCapabilityCheckingSupport.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CKDeviceCapabilityCheckOptions.excludeDevicesWithoutCapabilityCheckingSupport.modify())()
{
  return nullsub_2;
}

uint64_t sub_18AFA4870@<X0>(uint64_t a1@<X8>)
{
  return CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.getter(a1);
}

void sub_18AFA48AC(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9125470);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18AFA4A38(a1, (uint64_t)v4);
  CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.setter((uint64_t)v4);
}

void CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v5 = sub_18AF19284(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18AFA4A38(a1, (uint64_t)v7);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = sub_18AF1A054();
  if (sub_18AF436E0(v9, v10, v8) == 1)
  {
    sub_18AFA4AA0(a1);
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18AFA4AA0(a1);
    sub_18AF19278();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v8);
  }

  *(void *)(v2 + 8) = isa;
}

uint64_t sub_18AFA4A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18AFA4AA0(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9125470);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v4);
  size_t v6 = *(void *)(v5 + 64);
  v3[1] = malloc(v6);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = malloc(v6);
  v3[4] = v8;
  if (*(void *)(v1 + 8))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  uint64_t v10 = type metadata accessor for Date();
  sub_18AF43708((uint64_t)v7, v9, 1, v10);
  sub_18AFA8108((uint64_t)v7, (uint64_t)v8);
  return sub_18AFA4BF8;
}

void sub_18AFA4BF8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = (void *)v2[2];
    uint64_t v4 = (void *)v2[3];
    size_t v6 = (void *)v2[1];
    sub_18AFA4A38(*(void *)(*(void *)a1 + 32), (uint64_t)v6);
    CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.setter((uint64_t)v6);
    sub_18AFA4AA0((uint64_t)v3);
  }
  else
  {
    sub_18AFA4A38(*(void *)(*(void *)a1 + 32), v2[2]);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = sub_18AF1A054();
    int v10 = sub_18AF436E0(v8, v9, v7);
    uint64_t v11 = v2[4];
    if (v10 == 1)
    {
      sub_18AFA4AA0(v2[4]);
      Class isa = 0;
    }
    else
    {
      uint64_t v13 = v2[2];
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      sub_18AFA4AA0(v11);
      sub_18AF19278();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v7);
    }
    uint64_t v4 = (void *)v2[3];
    uint64_t v3 = (void *)v2[4];
    size_t v6 = (void *)v2[1];
    uint64_t v5 = (void *)v2[2];
    uint64_t v15 = *v2;

    *(void *)(v15 + 8) = isa;
  }
  free(v3);
  free(v4);
  free(v5);
  free(v6);
  sub_18AF3387C();
  free(v16);
}

void CKDeviceCapabilityCheckOptions.hash(into:)()
{
  uint64_t v1 = *(void **)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int CKDeviceCapabilityCheckOptions.hashValue.getter()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  id v2 = *(void **)(v0 + 8);
  sub_18AF3A2D4();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    id v3 = v2;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_18AFA4E3C()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  id v2 = *(void **)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    id v3 = v2;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void CKDeviceCapabilityCheckResult.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static CKDeviceCapabilityCheckResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int CKDeviceCapabilityCheckResult.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  sub_18AF3A2D4();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_18AFA4F54()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void CKContainerOptions.supportedDeviceCapabilities.getter(void *a1@<X8>)
{
  unint64_t v3 = sub_18AFA7F0C(v1);
  if (!v3)
  {
    uint64_t v24 = 0;
LABEL_20:
    *a1 = v24;
    return;
  }
  uint64_t v4 = v3;
  if (v3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_19:
    sub_18AF5A6A8(v7, v17, v18, v19, v20, v21, v22, v23, v26, v27, v28, v29, v30, v31, v32, (uint64_t)v33, v34, v35, v36,
      v37,
      v38,
      v39,
      v40,
      v41);
    uint64_t v24 = v25;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v35 = MEMORY[0x1E4FBC860];
    sub_18AF5B1A8();
    if (v5 < 0) {
      break;
    }
    uint64_t v26 = (uint64_t)a1;
    uint64_t v27 = v5;
    uint64_t v6 = 0;
    uint64_t v7 = v35;
    uint64_t v28 = v4;
    unint64_t v29 = v4 & 0xC000000000000001;
    while (v5 != v6)
    {
      if (v29) {
        id v8 = (id)MEMORY[0x18C1298C0](v6, v4);
      }
      else {
        id v8 = *(id *)(v4 + 8 * v6 + 32);
      }
      uint64_t v9 = v8;
      CKDeviceCapability.wrapped.getter(&v30);
      uint64_t v10 = v32;
      if (!v32) {
        goto LABEL_22;
      }
      uint64_t v11 = v31;
      a1 = v33;
      uint64_t v12 = v34;
      char v13 = v30;

      uint64_t v35 = v7;
      unint64_t v15 = *(void *)(v7 + 16);
      unint64_t v14 = *(void *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_18AF34080(v14);
        sub_18AF5B1A8();
        uint64_t v7 = v35;
      }
      *(void *)(v7 + 16) = v15 + 1;
      uint64_t v16 = v7 + 40 * v15;
      *(unsigned char *)(v16 + 32) = v13;
      ++v6;
      *(void *)(v16 + 40) = v11;
      *(void *)(v16 + 48) = v10;
      *(void *)(v16 + 56) = a1;
      *(void *)(v16 + 64) = v12;
      uint64_t v5 = v27;
      uint64_t v4 = v28;
      if (v27 == v6)
      {
        swift_bridgeObjectRelease();
        a1 = (void *)v26;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
}

void sub_18AFA514C(void *a1@<X8>)
{
  CKContainerOptions.supportedDeviceCapabilities.getter(&v2);
  *a1 = v2;
}

#error "18AFA51B0: call analysis failed (funcsize=15)"

void CKContainerOptions.supportedDeviceCapabilities.setter(uint64_t a1, uint64_t a2, CloudKit::CKDeviceCapability *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_18AF193AC();
  a27 = v29;
  a28 = v30;
  uint64_t v31 = v28;
  uint64_t v33 = *v32;
  if (*v32)
  {
    unint64_t v34 = *(void *)(v33 + 16);
    unint64_t v35 = sub_18AF5AE98(0, v34, v33);
    if (v35)
    {
      unint64_t v36 = v35;
      a16 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v36 & 0x8000000000000000) == 0)
      {
        type metadata accessor for CKDeviceCapability(0);
        if (v36 - 1 >= *(void *)(v33 + 16))
        {
LABEL_16:
          __break(1u);
          return;
        }
        uint64_t v37 = (uint64_t *)(v33 + 64);
        while (1)
        {
          uint64_t v39 = *(v37 - 3);
          uint64_t v38 = *(v37 - 2);
          uint64_t v40 = *(v37 - 1);
          uint64_t v41 = *v37;
          LOBYTE(a11) = *((unsigned char *)v37 - 32);
          a12 = v39;
          a13 = v38;
          a14 = v40;
          a15 = v41;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CKDeviceCapability.init(_:)(v42, (CloudKit::CKDeviceCapability *)&a11);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if (!v34) {
            break;
          }
          v37 += 5;
          --v34;
          if (!--v36) {
            goto LABEL_10;
          }
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_16;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    type metadata accessor for CKDeviceCapability(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v31, sel_setSupportedDeviceCapabilities_, isa);
  sub_18AF38F44();
}

uint64_t (*CKContainerOptions.supportedDeviceCapabilities.modify(void *a1))()
{
  a1[1] = v1;
  CKContainerOptions.supportedDeviceCapabilities.getter(a1);
  return sub_18AFA5390;
}

#error "18AFA53EC: call analysis failed (funcsize=28)"

uint64_t CKDatabase.checkSupportedDeviceCapabilities(_:in:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD *a4)
{
  *(void *)(v5 + 160) = a3;
  *(void *)(v5 + 168) = v4;
  *(void *)(v5 + 152) = a1;
  uint64_t v8 = sub_18AF161EC(&qword_1E91268D8);
  *(void *)(v5 + 176) = v8;
  *(void *)(v5 + 184) = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = *a2;
  *(void *)(v5 + 192) = v9;
  *(void *)(v5 + 200) = v10;
  *(_OWORD *)(v5 + 208) = *a4;
  return MEMORY[0x1F4188298](sub_18AFA54E4, 0, 0);
}

uint64_t sub_18AFA54E4()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 200);
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = sub_18AF5AE98(0, v2, v1);
  if (v3)
  {
    unint64_t v4 = v3;
    uint64_t v5 = specialized ContiguousArray.reserveCapacity(_:)();
    if ((v4 & 0x8000000000000000) == 0)
    {
      uint64_t v5 = type metadata accessor for CKDeviceCapability(0);
      if (v4 - 1 >= *(void *)(v1 + 16))
      {
LABEL_15:
        __break(1u);
        return MEMORY[0x1F41881E8](v5);
      }
      uint64_t v6 = (void **)(*(void *)(v0 + 200) + 64);
      while (1)
      {
        uint64_t v8 = (uint64_t)*(v6 - 3);
        uint64_t v7 = *(v6 - 2);
        uint64_t v9 = (uint64_t)*(v6 - 1);
        uint64_t v10 = *v6;
        v25.level = *((unsigned char *)v6 - 32);
        v25.name._uint64_t countAndFlagsBits = v8;
        v25.name._object = v7;
        v25.value._uint64_t countAndFlagsBits = v9;
        v25.value._object = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CKDeviceCapability.init(_:)(v11, &v25);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t v5 = specialized ContiguousArray._endMutation()();
        if (!v2) {
          break;
        }
        --v2;
        v6 += 5;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v12 = *(void **)(v0 + 216);
  if (v12 == (void *)1)
  {
    char v13 = 0;
  }
  else
  {
    char v14 = *(unsigned char *)(v0 + 208);
    type metadata accessor for CKDeviceCapabilityCheckOptions(0);
    v25.level = v14 & 1;
    v25.name._uint64_t countAndFlagsBits = (uint64_t)v12;
    id v15 = v12;
    char v13 = CKDeviceCapabilityCheckOptions.init(_:)((char *)&v25);
  }
  *(void *)(v0 + 224) = v13;
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 192);
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v22 = v13;
  uint64_t v23 = *(void **)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 160);
  type metadata accessor for CKDeviceCapability(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 232) = isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = sub_18AFA57D4;
  swift_continuation_init();
  *(void *)(v0 + 136) = v18;
  uint64_t v20 = sub_18AF3A5E0((uint64_t *)(v0 + 112));
  type metadata accessor for CKDeviceCapabilityCheckResult(0);
  sub_18AF161EC(&qword_1E9125660);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(v20, v17, v18);
  *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_18AFA5A18;
  *(void *)(v0 + 104) = &unk_1ED7F1068;
  objc_msgSend(v23, sel_checkSupportedDeviceCapabilities_inZone_options_completionHandler_, isa, v24, v22, v0 + 80);
  uint64_t v5 = v0 + 16;
  return MEMORY[0x1F41881E8](v5);
}

uint64_t sub_18AFA57D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    unint64_t v2 = sub_18AFA598C;
  }
  else {
    unint64_t v2 = sub_18AFA58E4;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

void sub_18AFA58E4()
{
  uint64_t v1 = *(void **)(v0 + 232);
  unint64_t v2 = *(unsigned __int8 **)(v0 + 144);

  int v3 = v2[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped];
  if (v3 == 2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(unsigned char **)(v0 + 152);

    *uint64_t v4 = v3 & 1;
    swift_task_dealloc();
    uint64_t v5 = *(void (**)(void))(v0 + 8);
    v5();
  }
}

uint64_t sub_18AFA598C()
{
  uint64_t v1 = (void *)v0[29];
  unint64_t v2 = (void *)v0[28];
  swift_willThrow();

  swift_task_dealloc();
  int v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_18AFA5A18(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v7 = a3;
    sub_18AFCA1B4((uint64_t)v5, (uint64_t)v7);
  }
  else if (a2)
  {
    id v6 = a2;
    sub_18AFCA2C8((uint64_t)v5, (uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
}

void CKCheckSupportedDeviceCapabilitiesOperation.init(desiredCapabilities:zoneIDs:options:)(uint64_t a1, uint64_t a2, CloudKit::CKDeviceCapability *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_18AF193AC();
  a27 = v28;
  a28 = v30;
  uint64_t v32 = *v31;
  uint64_t v33 = *((void *)v29 + 1);
  if (v33 == 1)
  {
    unint64_t v34 = 0;
  }
  else
  {
    char v35 = *v29;
    type metadata accessor for CKDeviceCapabilityCheckOptions(0);
    LOBYTE(a11) = v35 & 1;
    a12 = v33;
    unint64_t v34 = CKDeviceCapabilityCheckOptions.init(_:)((char *)&a11);
  }
  unint64_t v36 = *(void *)(v32 + 16);
  unint64_t v37 = sub_18AF5AE98(0, v36, v32);
  if (v37)
  {
    unint64_t v38 = v37;
    a16 = (void *)MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v38 & 0x8000000000000000) == 0)
    {
      type metadata accessor for CKDeviceCapability(0);
      if (v38 - 1 >= *(void *)(v32 + 16))
      {
LABEL_15:
        __break(1u);
        return;
      }
      uint64_t v39 = (uint64_t *)(v32 + 64);
      while (1)
      {
        uint64_t v41 = *(v39 - 3);
        uint64_t v40 = *(v39 - 2);
        uint64_t v42 = *(v39 - 1);
        uint64_t v43 = *v39;
        LOBYTE(a11) = *((unsigned char *)v39 - 32);
        a12 = v41;
        a13 = v40;
        a14 = v42;
        a15 = v43;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CKDeviceCapability.init(_:)(v44, (CloudKit::CKDeviceCapability *)&a11);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (!v36) {
          break;
        }
        v39 += 5;
        --v36;
        if (!--v38)
        {
          uint64_t v45 = a16;
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = (void *)MEMORY[0x1E4FBC860];
LABEL_12:
  id v46 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for CKDeviceCapability(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  Array._bridgeToObjectiveC()();
  sub_18AF33DC8();
  objc_msgSend(v46, sel_initWithDesiredCapabilities_zoneIDs_options_, isa, v45, v34);

  sub_18AF38F44();
}

id CKCheckSupportedDeviceCapabilitiesOperation.init(desiredCapabilitySets:zoneIDs:options:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *((void *)a3 + 1);
  if (v4 == 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    char v6 = *a3;
    type metadata accessor for CKDeviceCapabilityCheckOptions(0);
    v29.level = v6 & 1;
    v29.name._uint64_t countAndFlagsBits = v4;
    uint64_t v5 = CKDeviceCapabilityCheckOptions.init(_:)((char *)&v29);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v27 = v5;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    sub_18AF5B638();
    uint64_t v8 = a1;
    uint64_t v9 = 0;
    uint64_t v10 = v31;
    uint64_t v28 = v8 + 32;
    do
    {
      uint64_t v11 = *(void *)(v28 + 8 * v9);
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v30 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        type metadata accessor for CKDeviceCapability(0);
        char v13 = (void **)(v11 + 64);
        do
        {
          uint64_t v15 = (uint64_t)*(v13 - 3);
          char v14 = *(v13 - 2);
          uint64_t v16 = (uint64_t)*(v13 - 1);
          uint64_t v17 = *v13;
          v29.level = *((unsigned char *)v13 - 32);
          v29.name._uint64_t countAndFlagsBits = v15;
          v29.name._object = v14;
          v29.value._uint64_t countAndFlagsBits = v16;
          v29.value._object = v17;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CKDeviceCapability.init(_:)(v18, &v29);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v13 += 5;
          --v12;
        }
        while (v12);
        uint64_t v19 = v30;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = MEMORY[0x1E4FBC860];
      }
      uint64_t v31 = v10;
      unint64_t v21 = *(void *)(v10 + 16);
      unint64_t v20 = *(void *)(v10 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_18AF34080(v20);
        sub_18AF5B638();
        uint64_t v10 = v31;
      }
      ++v9;
      *(void *)(v10 + 16) = v21 + 1;
      *(void *)(v10 + 8 * v21 + 32) = v19;
    }
    while (v9 != v7);
    swift_bridgeObjectRelease();
    uint64_t v5 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18AF161EC(&qword_1E91268E0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v22, sel_initWithDesiredCapabilitySets_zoneIDs_options_, isa, v24, v5);

  return v25;
}

void CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilitySets.getter()
{
  uint64_t v1 = sub_18AFA7F6C(v0);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v46 = MEMORY[0x1E4FBC860];
  uint64_t v4 = v1;
  sub_18AF5B658();
  uint64_t v5 = 0;
  uint64_t v6 = v46;
  uint64_t v32 = v4;
  uint64_t v33 = v3;
  uint64_t v34 = v4 + 32;
  while (1)
  {
    unint64_t v7 = *(void *)(v34 + 8 * v5);
    if (v7 >> 62) {
      break;
    }
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_6;
    }
LABEL_18:
    uint64_t v17 = v2;
LABEL_19:
    sub_18AF5A6A8(v17, v9, v10, v11, v12, v13, v14, v15, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41,
      v42,
      v43,
      v44,
      v45,
      v46);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v46 = v6;
    unint64_t v30 = *(void *)(v6 + 16);
    unint64_t v29 = *(void *)(v6 + 24);
    if (v30 >= v29 >> 1)
    {
      sub_18AF34080(v29);
      sub_18AF5B658();
      uint64_t v6 = v46;
    }
    ++v5;
    *(void *)(v6 + 16) = v30 + 1;
    *(void *)(v6 + 8 * v30 + 32) = v28;
    if (v5 == v3)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v36 = v5;
  uint64_t v45 = v2;
  sub_18AF5B1A8();
  if ((v8 & 0x8000000000000000) == 0)
  {
    uint64_t v35 = v6;
    uint64_t v16 = 0;
    uint64_t v17 = v45;
    uint64_t v38 = v7;
    unint64_t v39 = v7 & 0xC000000000000001;
    uint64_t v37 = v8;
    while (v8 != v16)
    {
      if (v39) {
        id v18 = (id)MEMORY[0x18C1298C0](v16, v7);
      }
      else {
        id v18 = *(id *)(v7 + 8 * v16 + 32);
      }
      uint64_t v19 = v18;
      CKDeviceCapability.wrapped.getter(&v40);
      uint64_t v20 = v42;
      if (!v42) {
        goto LABEL_27;
      }
      uint64_t v21 = v41;
      uint64_t v22 = v43;
      uint64_t v23 = v44;
      char v24 = v40;

      uint64_t v45 = v17;
      unint64_t v25 = *(void *)(v17 + 16);
      if (v25 >= *(void *)(v17 + 24) >> 1)
      {
        sub_18AF5B1A8();
        uint64_t v17 = v45;
      }
      *(void *)(v17 + 16) = v25 + 1;
      uint64_t v26 = v17 + 40 * v25;
      *(unsigned char *)(v26 + 32) = v24;
      ++v16;
      *(void *)(v26 + 40) = v21;
      *(void *)(v26 + 48) = v20;
      *(void *)(v26 + 56) = v22;
      *(void *)(v26 + 64) = v23;
      uint64_t v8 = v37;
      unint64_t v7 = v38;
      if (v37 == v16)
      {
        uint64_t v2 = MEMORY[0x1E4FBC860];
        uint64_t v3 = v33;
        uint64_t v6 = v35;
        uint64_t v5 = v36;
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilities.getter@<X0>(void *a1@<X8>)
{
  CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilitySets.getter();
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 != 1) {
    goto LABEL_5;
  }
  CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilitySets.getter();
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(v5 + 32);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_6:
  *a1 = v6;
  return result;
}

uint64_t CKCheckSupportedDeviceCapabilitiesOperation.zoneIDs.getter()
{
  uint64_t result = sub_18AFA7FD0(v0);
  if (!result) {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

double CKCheckSupportedDeviceCapabilitiesOperation.options.getter@<D0>(void *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_options);
  if (v3)
  {
    id v5 = v3;
    CKDeviceCapabilityCheckOptions.wrapped.getter(a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18B1F1E70;
  }
  return result;
}

void (*CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.getter())(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double result = (void (*)(uint64_t, uint64_t *, uint64_t))objc_msgSend(v0, sel_perResultBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFA81A8;
    *(void *)(v4 + 24) = v3;
    return sub_18AFA81B0;
  }
  return result;
}

uint64_t sub_18AFA63B4@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFA8D80;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AFA6424(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFA8D48;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.setter((uint64_t)v4, v3);
}

id CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AFA81B8;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AFA6C60;
    v9[3] = &unk_1ED7F3930;
    unint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setPerResultBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setPerResultBlock_, 0);
  }
}

void sub_18AFA65E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for CKDeviceCapability(0);
  v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a4) {
    uint64_t v10 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v10 = 0;
  }
  id v11 = (id)v10;
  (*(void (**)(uint64_t, uint64_t, Class, uint64_t))(a5 + 16))(a5, a1, v9.super.isa, a3);
}

void sub_18AFA6690(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, void, void, void))
{
  uint64_t v6 = *a2;
  unint64_t v7 = *(void **)a3;
  if (*(unsigned char *)(a3 + 8))
  {
    unint64_t v8 = *(void *)(v6 + 16);
    unint64_t v9 = sub_18AF5AE98(0, v8, v6);
    if (v9)
    {
      unint64_t v10 = v9;
      uint64_t v35 = MEMORY[0x1E4FBC860];
      id v11 = v7;
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v10 & 0x8000000000000000) != 0)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      type metadata accessor for CKDeviceCapability(0);
      if (v10 - 1 >= *(void *)(v6 + 16))
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      id v31 = a4;
      uint64_t v12 = (void **)(v6 + 64);
      while (1)
      {
        uint64_t v14 = (uint64_t)*(v12 - 3);
        uint64_t v13 = *(v12 - 2);
        uint64_t v15 = (uint64_t)*(v12 - 1);
        uint64_t v16 = *v12;
        v34.level = *((unsigned char *)v12 - 32);
        v34.name._uint64_t countAndFlagsBits = v14;
        v34.name._object = v13;
        v34.value._uint64_t countAndFlagsBits = v15;
        v34.value._object = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CKDeviceCapability.init(_:)(v17, &v34);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (!v8) {
          break;
        }
        v12 += 5;
        --v8;
        if (!--v10)
        {
          uint64_t v18 = v35;
          a4 = (void (*)(void, void, void, void))v31;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    id v30 = v7;
    uint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_20:
    sub_18AF9E5A8(v7, 1);
    a4(a1, v18, 0, v7);
    sub_18AF53C0C(v7, 1);
    swift_bridgeObjectRelease();
    sub_18AF53C0C(v7, 1);
  }
  else
  {
    unint64_t v19 = *(void *)(v6 + 16);
    unint64_t v20 = sub_18AF5AE98(0, v19, v6);
    uint64_t v21 = MEMORY[0x1E4FBC860];
    if (v20)
    {
      unint64_t v22 = v20;
      uint64_t v35 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v22 & 0x8000000000000000) != 0)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      type metadata accessor for CKDeviceCapability(0);
      if (v22 - 1 >= *(void *)(v6 + 16))
      {
LABEL_28:
        __break(1u);
        return;
      }
      id v32 = a4;
      uint64_t v23 = (void **)(v6 + 64);
      while (1)
      {
        uint64_t v25 = (uint64_t)*(v23 - 3);
        char v24 = *(v23 - 2);
        uint64_t v26 = (uint64_t)*(v23 - 1);
        uint64_t v27 = *v23;
        v34.level = *((unsigned char *)v23 - 32);
        v34.name._uint64_t countAndFlagsBits = v25;
        v34.name._object = v24;
        v34.value._uint64_t countAndFlagsBits = v26;
        v34.value._object = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CKDeviceCapability.init(_:)(v28, &v34);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (!v19) {
          goto LABEL_24;
        }
        v23 += 5;
        --v19;
        if (!--v22)
        {
          uint64_t v21 = v35;
          a4 = (void (*)(void, void, void, void))v32;
          break;
        }
      }
    }
    type metadata accessor for CKDeviceCapabilityCheckResult(0);
    v34.level = v7 & 1;
    CKDeviceCapabilityCheckResult.init(_:)((CKDeviceCapabilityCheckResult *)(v7 & 1), (CloudKit::CKDeviceCapabilityCheckResult)&v34);
    id v33 = v29;
    a4(a1, v21, v29, 0);
    swift_bridgeObjectRelease();
  }
}

void sub_18AFA69AC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  unint64_t v9 = (void (*)(unint64_t, uint64_t *, uint64_t *))a5;
  unint64_t v10 = a4;
  unint64_t v11 = a3;
  if (a2 >> 62) {
    goto LABEL_23;
  }
  uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    if (!v14) {
      break;
    }
    uint64_t v41 = MEMORY[0x1E4FBC860];
    sub_18AF5B1A8();
    if (v14 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v26 = v10;
    uint64_t v27 = v11;
    uint64_t v28 = a1;
    uint64_t v29 = v8;
    uint64_t v16 = 0;
    uint64_t v15 = v41;
    uint64_t v30 = (uint64_t)v9;
    unint64_t v31 = a2 & 0xC000000000000001;
    while (v14 != v16)
    {
      if (v31) {
        id v17 = (id)MEMORY[0x18C1298C0](v16, a2);
      }
      else {
        id v17 = *(id *)(a2 + 8 * v16 + 32);
      }
      uint64_t v18 = v17;
      CKDeviceCapability.wrapped.getter(&v36);
      uint64_t v8 = v38;
      if (!v38) {
        goto LABEL_25;
      }
      unint64_t v9 = v37;
      uint64_t v32 = v40;
      uint64_t v33 = v39;
      unint64_t v11 = v36;

      uint64_t v41 = v15;
      unint64_t v10 = *(void *)(v15 + 16);
      a1 = v10 + 1;
      if (v10 >= *(void *)(v15 + 24) >> 1)
      {
        sub_18AF5B1A8();
        uint64_t v15 = v41;
      }
      *(void *)(v15 + 16) = a1;
      unint64_t v19 = v15 + 40 * v10;
      *(unsigned char *)(v19 + 32) = v11;
      ++v16;
      *(void *)(v19 + 40) = v9;
      *(void *)(v19 + 48) = v8;
      *(void *)(v19 + 56) = v33;
      *(void *)(v19 + 64) = v32;
      if (v14 == v16)
      {
        unint64_t v9 = (void (*)(unint64_t, uint64_t *, uint64_t *))v30;
        unint64_t v11 = v27;
        a1 = v28;
        unint64_t v10 = v26;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_15:
  sub_18AF5A6A8(v15, a2, a3, a4, a5, a6, a7, a8, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v36,
    (uint64_t)v37,
    v38,
    v39,
    v40,
    v41);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v41 = v21;
    uint64_t v36 = v10;
    LOBYTE(v37) = 1;
    id v22 = (id)v10;
    v9(a1, &v41, &v36);

    swift_bridgeObjectRelease();
    return;
  }
  if (!v11)
  {
    uint64_t v41 = v21;
    type metadata accessor for CKError(0);
    uint64_t v36 = 1;
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF62B54();
    _BridgedStoredNSError.init(_:userInfo:)();
    id v24 = (id)v35;
    uint64_t v36 = v35;
    LOBYTE(v37) = 1;
    goto LABEL_21;
  }
  uint64_t v41 = v21;
  int v23 = *(unsigned __int8 *)(v11 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
  if (v23 != 2)
  {
    uint64_t v36 = v23 & 1;
    LOBYTE(v37) = 0;
    id v24 = (id)v11;
LABEL_21:
    v9(a1, &v41, &v36);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_26:
  __break(1u);
}

void sub_18AFA6C60(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(void (**)(id, uint64_t, void *, void *))(a1 + 32);
  type metadata accessor for CKDeviceCapability(0);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v12 = a2;
  id v10 = a4;
  id v11 = a5;
  v8(v12, v9, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t (*CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.modify(void (**a1)(uint64_t a1, uint64_t *a2, uint64_t a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.getter();
  a1[1] = v3;
  return sub_18AFA6D78;
}

uint64_t sub_18AFA6D78(uint64_t *a1, char a2)
{
  return sub_18AFA7480(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_checkSupportedDeviceCapabilitiesCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFA81C8;
    *(void *)(v4 + 24) = v3;
    return sub_18AFA8208;
  }
  return result;
}

uint64_t sub_18AFA6E50@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AFA6EC0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.setter((uint64_t)v4, v3);
}

id CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF62928;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AFA7334;
    v9[3] = &unk_1ED7F39D0;
    unint64_t v7 = _Block_copy(v9);
    sub_18AF42F30(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setCheckSupportedDeviceCapabilitiesCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 0);
    sub_18AF1E758(a1);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setCheckSupportedDeviceCapabilitiesCompletionBlock_, 0);
  }
}

void sub_18AFA70A8(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF161EC(&qword_1E9126980);
    sub_18AF62AF4();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_18AFA717C(void *a1, char a2, void (*a3)(uint64_t, void *))
{
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1EB279440);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    MEMORY[0x18C12BB10](v9, -1, -1);
  }

  if (a2)
  {
    id v11 = a1;
    a3(0, a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF161EC(&qword_1E9126980);
    sub_18AF62AF4();
    uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
    a3(v10, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18AFA7334(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF161EC(&qword_1E9126980);
    sub_18AF62AF4();
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t (*CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.getter();
  a1[1] = v3;
  return sub_18AFA7440;
}

uint64_t sub_18AFA7440(uint64_t *a1, char a2)
{
  return sub_18AFA7480(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFA7480(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AFA7524()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF656A4);
}

uint64_t sub_18AFA753C()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF656B8);
}

uint64_t sub_18AFA7554()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF65798);
}

uint64_t sub_18AFA756C()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF657AC);
}

uint64_t sub_18AFA7584()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF657E0);
}

uint64_t sub_18AFA759C()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF657F4);
}

uint64_t sub_18AFA75B4()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF6590C);
}

uint64_t sub_18AFA75CC()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF65A10);
}

uint64_t sub_18AFA75E4()
{
  return sub_18AFA75FC((uint64_t (*)(void))sub_18AF65BE8);
}

uint64_t sub_18AFA75FC(uint64_t (*a1)(void))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    sub_18AF38258();
    uint64_t result = a1();
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_18AFA7654(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF656A4);
}

uint64_t sub_18AFA766C(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF656B8);
}

uint64_t sub_18AFA7684(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF65798);
}

uint64_t sub_18AFA769C(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF657AC);
}

uint64_t sub_18AFA76B4(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF657E0);
}

uint64_t sub_18AFA76CC(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF657F4);
}

uint64_t sub_18AFA76E4(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF6590C);
}

uint64_t sub_18AFA76FC(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF65A10);
}

uint64_t sub_18AFA7714(uint64_t a1)
{
  return sub_18AFA772C(a1, (uint64_t (*)(BOOL))sub_18AF65BE8);
}

uint64_t sub_18AFA772C(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_18AFA7774(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF305FC();
  if (v4 + 32 * v3 > v2 && v2 + 32 * v3 > v4)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }
  sub_18AF161EC(&qword_1E9126080);
  sub_18AF39134();

  return swift_arrayInitWithCopy();
}

void *sub_18AFA7834(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = (void *)sub_18AF35128();
    __break(1u);
    return result;
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, 8 * a2);
}

uint64_t sub_18AFA78E0()
{
  sub_18AF16EB4();
  if (v3 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  if (v2 + 40 * v1 > v0 && v0 + 40 * v1 > v2)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7990(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF16BFC();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF39134();

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7A4C()
{
  return sub_18AFA7A64();
}

uint64_t sub_18AFA7A58()
{
  return sub_18AFA7A64();
}

uint64_t sub_18AFA7A64()
{
  sub_18AF16EB4();
  if (v0 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF343C8();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7AFC()
{
  return sub_18AFA7BDC();
}

uint64_t sub_18AFA7B08()
{
  sub_18AF16EB4();
  if (v3 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  if (v2 + 24 * v1 > v0 && v0 + 24 * v1 > v2)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7BB8()
{
  return sub_18AFA7BDC();
}

uint64_t sub_18AFA7BC4()
{
  return sub_18AFA7A64();
}

uint64_t sub_18AFA7BD0()
{
  return sub_18AFA7BDC();
}

uint64_t sub_18AFA7BDC()
{
  sub_18AF16EB4();
  if (v0 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF4120C();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7C74()
{
  return sub_18AFA7A64();
}

uint64_t sub_18AFA7C80(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF16BFC();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }
  sub_18AF161EC(&qword_1E91268E0);
  sub_18AF39134();

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7D30()
{
  sub_18AF16EB4();
  if (v0 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF4120C();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7DD0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF305FC();
  type metadata accessor for CKAsyncSerialQueue.WaitContext();
  sub_18AF19278();
  uint64_t v7 = *(void *)(v6 + 72) * v3;
  unint64_t v8 = a3 + v7;
  unint64_t v9 = v4 + v7;
  if (v8 > v4 && v9 > a3)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }
  sub_18AF39134();

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFA7EA4()
{
  return sub_18AFA7A64();
}

uint64_t sub_18AFA7EB0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_18AF2A644(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = MEMORY[0x18C1290D0](15, a1 >> 16);
    sub_18AF2A644(v3);
    return v4 | 8;
  }
}

uint64_t sub_18AFA7F0C(void *a1)
{
  id v1 = objc_msgSend(a1, sel_supportedDeviceCapabilities);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  type metadata accessor for CKDeviceCapability(0);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AFA7F6C(void *a1)
{
  id v1 = objc_msgSend(a1, sel_desiredCapabilitySets);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  sub_18AF161EC(&qword_1E91268E0);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AFA7FD0(void *a1)
{
  id v1 = objc_msgSend(a1, sel_zoneIDs);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18AFA8040(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 64;
    do
    {
      Hasher._combine(_:)(*(unsigned __int8 *)(v4 - 32) + 1);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 40;
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_18AFA8108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18AFA8170()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AFA81A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18AFA65E0(a1, a2, a3, a4, *(void *)(v4 + 16));
}

void sub_18AFA81B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_18AFA6690(a1, a2, a3, *(void (**)(void, void, void, void))(v3 + 16));
}

void sub_18AFA81B8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_18AFA69AC(a1, a2, a3, a4, *(void *)(v8 + 16), *(void *)(v8 + 24), a7, a8);
}

uint64_t sub_18AFA81C0()
{
  return swift_release();
}

void sub_18AFA81C8(objc_class *a1, uint64_t a2)
{
  sub_18AFA70A8(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_18AFA81D0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AFA8208(void *a1, char a2)
{
  sub_18AFA717C(a1, a2 & 1, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t sub_18AFA8214(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

unint64_t sub_18AFA8228()
{
  unint64_t result = qword_1E91268E8;
  if (!qword_1E91268E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91268E8);
  }
  return result;
}

unint64_t sub_18AFA8278()
{
  unint64_t result = qword_1E91268F0;
  if (!qword_1E91268F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91268F0);
  }
  return result;
}

unint64_t sub_18AFA82C8()
{
  unint64_t result = qword_1E91268F8;
  if (!qword_1E91268F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91268F8);
  }
  return result;
}

unint64_t sub_18AFA8318()
{
  unint64_t result = qword_1E9126900;
  if (!qword_1E9126900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126900);
  }
  return result;
}

uint64_t sub_18AFA8364()
{
  return sub_18AFA8644(&qword_1E9126908);
}

unint64_t sub_18AFA8398()
{
  unint64_t result = qword_1E9126910;
  if (!qword_1E9126910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126910);
  }
  return result;
}

uint64_t sub_18AFA83E4()
{
  return sub_18AFA8544(&qword_1E9126918, (void (*)(void))sub_18AFA842C);
}

unint64_t sub_18AFA842C()
{
  unint64_t result = qword_1E9126928;
  if (!qword_1E9126928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126928);
  }
  return result;
}

unint64_t sub_18AFA847C()
{
  unint64_t result = qword_1E9126930;
  if (!qword_1E9126930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126930);
  }
  return result;
}

uint64_t sub_18AFA84C8()
{
  return sub_18AFA8644(&qword_1E9126938);
}

uint64_t sub_18AFA84FC()
{
  return sub_18AFA8544(&qword_1E9126940, (void (*)(void))sub_18AFA8318);
}

uint64_t sub_18AFA8544(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(&qword_1E9126920);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18AFA85B8()
{
  unint64_t result = qword_1E9126948;
  if (!qword_1E9126948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126948);
  }
  return result;
}

uint64_t sub_18AFA8604()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_18AFA8610()
{
  return sub_18AFA8644(&qword_1E9126950);
}

uint64_t sub_18AFA8644(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(&qword_1E91264F8);
    sub_18AFA8398();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AFA86B4()
{
  return sub_18AF3345C(&qword_1E9126958, &qword_1E9126920);
}

uint64_t sub_18AFA86F0()
{
  return sub_18AF3345C(&qword_1E9126960, &qword_1E9126968);
}

unint64_t sub_18AFA8730()
{
  unint64_t result = qword_1E9126970;
  if (!qword_1E9126970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126970);
  }
  return result;
}

unint64_t sub_18AFA8780()
{
  unint64_t result = qword_1E9126978;
  if (!qword_1E9126978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126978);
  }
  return result;
}

uint64_t sub_18AFA87EC()
{
  return 0;
}

uint64_t initializeWithCopy for CKDeviceCapability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CKDeviceCapability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CKDeviceCapability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKDeviceCapability()
{
}

unsigned char *storeEnumTagSinglePayload for CKDeviceCapability.Level(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AFA8A04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for CKDeviceCapability.Level()
{
}

void type metadata accessor for CKDeviceCapabilitySet()
{
}

uint64_t initializeBufferWithCopyOfBuffer for CKDeviceCapabilityCheckOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void destroy for CKDeviceCapabilityCheckOptions(uint64_t a1)
{
}

uint64_t assignWithCopy for CKDeviceCapabilityCheckOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for CKDeviceCapabilityCheckOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for CKDeviceCapabilityCheckOptions(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKDeviceCapabilityCheckOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for CKDeviceCapabilityCheckOptions()
{
}

uint64_t getEnumTagSinglePayload for CKDeviceCapabilityCheckResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CKDeviceCapabilityCheckResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AFA8D14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for CKDeviceCapabilityCheckResult()
{
}

uint64_t sub_18AFA8D48(uint64_t a1)
{
  int v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_18AFA8D80(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t destroy for AssetInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AssetInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AssetInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AssetInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetInfo()
{
  return &type metadata for AssetInfo;
}

uint64_t sub_18AFA9010(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E676953656C6966 && a2 == 0xED00006572757461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000018B1D3860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736B6E756863 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_18AFA9178(char a1)
{
  if (!a1) {
    return 0x6E676953656C6966;
  }
  if (a1 == 1) {
    return 0xD000000000000012;
  }
  return 0x736B6E756863;
}

uint64_t sub_18AFA91DC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_18AF161EC(&qword_1E91269B0);
  sub_18AF22CB0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_18AF25FCC(a1, a1[3]);
  sub_18AFA9730();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + 32);
    v12[15] = 2;
    sub_18AF161EC(&qword_1E9126998);
    sub_18AFA97C8(&qword_1E91269B8, (void (*)(void))sub_18AFA9838);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

uint64_t sub_18AFA9390@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_18AF161EC(&qword_1E9126988);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v5);
  sub_18AF25FCC(a1, a1[3]);
  sub_18AFA9730();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_18AF40A30((uint64_t)a1);
  }
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v16 = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v15 = v9;
  sub_18AF161EC(&qword_1E9126998);
  sub_18AFA97C8(&qword_1E91269A0, (void (*)(void))sub_18AFA977C);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = sub_18AF38A10();
  v13(v12);
  swift_bridgeObjectRetain();
  sub_18AF40A30((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v16;
  a2[1] = v8;
  a2[2] = v15;
  a2[3] = v11;
  a2[4] = v17;
  return result;
}

uint64_t sub_18AFA9628()
{
  return sub_18AFA9178(*v0);
}

uint64_t sub_18AFA9630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18AFA9010(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18AFA9658(uint64_t a1)
{
  unint64_t v2 = sub_18AFA9730();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AFA9694(uint64_t a1)
{
  unint64_t v2 = sub_18AFA9730();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_18AFA96D0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_18AFA9390(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_18AFA9718(void *a1)
{
  return sub_18AFA91DC(a1);
}

unint64_t sub_18AFA9730()
{
  unint64_t result = qword_1E9126990;
  if (!qword_1E9126990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126990);
  }
  return result;
}

unint64_t sub_18AFA977C()
{
  unint64_t result = qword_1E91269A8;
  if (!qword_1E91269A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91269A8);
  }
  return result;
}

uint64_t sub_18AFA97C8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(&qword_1E9126998);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18AFA9838()
{
  unint64_t result = qword_1E91269C0;
  if (!qword_1E91269C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91269C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AssetInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AFA9950);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetInfo.CodingKeys()
{
  return &type metadata for AssetInfo.CodingKeys;
}

unint64_t sub_18AFA998C()
{
  unint64_t result = qword_1E91269C8;
  if (!qword_1E91269C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91269C8);
  }
  return result;
}

unint64_t sub_18AFA99DC()
{
  unint64_t result = qword_1E91269D0;
  if (!qword_1E91269D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91269D0);
  }
  return result;
}

unint64_t sub_18AFA9A2C()
{
  unint64_t result = qword_1E91269D8;
  if (!qword_1E91269D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91269D8);
  }
  return result;
}

uint64_t sub_18AFA9A78(uint64_t a1, unint64_t a2)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = Data.count.getter();
  v9[0] = MEMORY[0x18C128910](v5);
  v9[1] = v6;
  size_t v8 = 0;
  sub_18AF5F6FC(a1, a2);
  swift_retain();
  sub_18AFAA354(v9, a1, a2, v2, &v8);
  return v9[0];
}

void sub_18AFA9B1C()
{
}

Swift::Int sub_18AFA9B44()
{
  return Hasher._finalize()();
}

Swift::Int sub_18AFA9B90()
{
  return Hasher._finalize()();
}

uint64_t sub_18AFA9BD0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = sub_18AFA9CCC(a1, a2, a3, a4);
  if (v9)
  {
    uint64_t v10 = v9;
    sub_18AF5AF68(a3, a4);
    sub_18AF5AF68(a1, a2);
    *(void *)(v4 + 16) = v10;
  }
  else
  {
    sub_18AFAADD0();
    swift_allocError();
    swift_willThrow();
    sub_18AF5AF68(a3, a4);
    sub_18AF5AF68(a1, a2);
    swift_deallocPartialClassInstance();
  }
  return v4;
}

uint64_t sub_18AFA9CCC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        JUMPOUT(0x18AFA9E68);
      }
      sub_18AF5F6FC(a3, a4);
      sub_18AF5F6FC(a1, a2);
      uint64_t v8 = sub_18AFAAA14((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      sub_18AF5AF68(a1, a2);
      break;
    case 2uLL:
      uint64_t v9 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      sub_18AF5F6FC(a3, a4);
      swift_retain();
      swift_retain();
      uint64_t v8 = sub_18AFAAA14(v10, v11, v9, a3, a4);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      sub_18AF5F6FC(a3, a4);
      uint64_t v8 = sub_18AFAAE1C(0, 0, 0, a3, a4);
      break;
    default:
      sub_18AF5F6FC(a3, a4);
      uint64_t v8 = sub_18AFAAE1C(a1, a2 & 0xFFFFFFFFFFFFLL, BYTE6(a2), a3, a4);
      break;
  }
  return v8;
}

uint64_t sub_18AFA9E78()
{
  CCCryptorRelease(*(CCCryptorRef *)(v0 + 16));

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t type metadata accessor for ChunkDataDecryptor()
{
  return self;
}

uint64_t sub_18AFA9ED4@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_11:
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x18AFAA06CLL);
      }
      sub_18AF5F6FC(a3, a4);
      uint64_t result = (uint64_t)sub_18AFAAADC((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, a3, a4);
      uint64_t v17 = result;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      uint64_t v15 = *(void *)(a3 + 24);
      sub_18AF5F6FC(a3, a4);
      swift_retain();
      swift_retain();
      CCCryptorRef v16 = sub_18AFAAADC(v14, v15, a4 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, a3, a4);
      if (v5) {
        goto LABEL_11;
      }
      uint64_t v17 = (uint64_t)v16;
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      uint64_t v13 = 0;
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      goto LABEL_6;
    default:
      uint64_t v11 = BYTE6(a4);
      uint64_t v12 = a4 & 0xFFFFFFFFFFFFLL;
      uint64_t v13 = a3;
LABEL_6:
      uint64_t result = (uint64_t)sub_18AFAAF20(v13, v12, v11, a1, a2, a3, a4);
      uint64_t v17 = result;
      break;
  }
  *a5 = v17;
  return result;
}

uint64_t sub_18AFAA07C(void *a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, size_t *a6)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_10:
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x18AFAA29CLL);
      }
      uint64_t p_dataOutMoved = (int)a3;
      unint64_t v15 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_18AF5F6FC(a3, a4);
      uint64_t result = sub_18AFAA920(p_dataOutMoved, a3 >> 32, v15, a5, a3, a4, a1, a2, a6);
      break;
    case 2uLL:
      uint64_t p_dataOutMoved = *(void *)(a3 + 16);
      unint64_t v15 = *(void *)(a3 + 24);
      swift_retain();
      sub_18AF5F6FC(a3, a4);
      swift_retain();
      swift_retain();
      sub_18AFAA920(p_dataOutMoved, v15, a4 & 0x3FFFFFFFFFFFFFFFLL, a5, a3, a4, a1, a2, a6);
      if (v6) {
        goto LABEL_10;
      }
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      swift_retain();
      return sub_18AFAACBC(0, 0, 0, a5, a3, a4, a1, a2, a6);
    default:
      uint64_t p_dataOutMoved = (uint64_t)&dataOutMoved;
      swift_retain();
      return sub_18AFAACBC(a3, a4 & 0xFFFFFFFFFFFFLL, BYTE6(a4), a5, a3, a4, a1, a2, a6);
  }
  return result;
}

uint64_t sub_18AFAA2AC(void *dataIn, int a2, uint64_t a3, uint64_t a4, unint64_t a5, void *dataOut, int a7, size_t *dataOutMoved)
{
  uint64_t v9 = *(_CCCryptor **)(a3 + 16);
  size_t v10 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a4), a4))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x18AFAA344);
      }
      size_t v10 = HIDWORD(a4) - (int)a4;
      return CCCryptorUpdate(v9, dataIn, v10, dataOut, v10, dataOutMoved);
    case 2uLL:
      uint64_t v12 = *(void *)(a4 + 16);
      uint64_t v11 = *(void *)(a4 + 24);
      size_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        return CCCryptorUpdate(v9, dataIn, v10, dataOut, v10, dataOutMoved);
      }
      goto LABEL_8;
    case 3uLL:
      return CCCryptorUpdate(v9, dataIn, v10, dataOut, v10, dataOutMoved);
    default:
      size_t v10 = BYTE6(a5);
      return CCCryptorUpdate(v9, dataIn, v10, dataOut, v10, dataOutMoved);
  }
}

uint64_t sub_18AFAA354(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, size_t *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  sub_18AF5F6FC(a2, a3);
  swift_retain();
  sub_18AF5F6FC(a2, a3);
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  swift_retain();
  switch(v10 >> 62)
  {
    case 1uLL:
      uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_18B1F0AA0;
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      uint64_t v14 = v11 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
      if (v14 < (int)v11) {
        goto LABEL_15;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v11, __DataStorage._offset.getter())) {
        goto LABEL_16;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v14 = v11 >> 32;
LABEL_11:
      if (v14 < (int)v11)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
      }
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      sub_18AFAA7F0((int)v11, v14, v13, a2, a3, a4, a5);
      sub_18AF5AF68(a2, a3);
      swift_release();
      sub_18AF5AF68(a2, a3);
      *a1 = v11;
      a1[1] = v13 | 0x4000000000000000;
LABEL_13:
      swift_release();
      sub_18AF5AF68(a2, a3);
      swift_release();
      sub_18AF5AF68(a2, a3);
      swift_release();
      sub_18AF5AF68(a2, a3);
      return swift_release();
    case 2uLL:
      *(void *)&long long v21 = v11;
      *((void *)&v21 + 1) = v10 & 0x3FFFFFFFFFFFFFFFLL;
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v20 = a5;
      uint64_t v15 = v11;
      uint64_t v16 = v10 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v17 = *(void *)(v11 + 16);
      uint64_t v18 = *(void *)(v11 + 24);
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      sub_18AFAA7F0(v17, v18, v16, a2, a3, a4, v20);
      sub_18AF5AF68(a2, a3);
      swift_release();
      sub_18AF5AF68(a2, a3);
      *a1 = v15;
      a1[1] = v16 | 0x8000000000000000;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v21 + 7) = 0;
      *(void *)&long long v21 = 0;
      swift_retain();
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      sub_18AF5F6FC(a2, a3);
      sub_18AFAA8CC(&v21, 0, a2, a3, a4, a5);
      sub_18AF5AF68(a2, a3);
      goto LABEL_13;
    default:
      *(void *)&long long v21 = v11;
      WORD4(v21) = v10;
      BYTE10(v21) = BYTE2(v10);
      BYTE11(v21) = BYTE3(v10);
      BYTE12(v21) = BYTE4(v10);
      BYTE13(v21) = BYTE5(v10);
      BYTE14(v21) = BYTE6(v10);
      swift_retain();
      sub_18AF5F6FC(a2, a3);
      swift_retain();
      sub_18AF5F6FC(a2, a3);
      sub_18AFAA8CC(&v21, BYTE6(v10), a2, a3, a4, a5);
      sub_18AF5AF68(a2, a3);
      unint64_t v12 = DWORD2(v21) | ((unint64_t)BYTE12(v21) << 32) | ((unint64_t)BYTE13(v21) << 40) | ((unint64_t)BYTE14(v21) << 48);
      *a1 = v21;
      a1[1] = v12;
      goto LABEL_13;
  }
}

uint64_t sub_18AFAA7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, size_t *a7)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v13 = result;
  uint64_t result = __DataStorage._offset.getter();
  uint64_t v14 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  BOOL v15 = __OFSUB__(a2, a1);
  uint64_t v16 = a2 - a1;
  if (v15)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v17 = __DataStorage._length.getter();
  if (v17 >= v16) {
    int v18 = v16;
  }
  else {
    int v18 = v17;
  }
  sub_18AFAA07C((void *)(v13 + v14), v13 + v14 + v18, a4, a5, a6, a7);
  sub_18AF5AF68(a4, a5);
  return swift_release();
}

uint64_t sub_18AFAA8CC(void *a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, size_t *a6)
{
  return swift_release();
}

uint64_t sub_18AFAA920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7, int a8, size_t *a9)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v16 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v16 += a1 - result;
  }
  BOOL v17 = __OFSUB__(a2, a1);
  uint64_t v18 = a2 - a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v19 = __DataStorage._length.getter();
  if (v19 >= v18) {
    int v20 = v18;
  }
  else {
    int v20 = v19;
  }
  int v21 = v16 + v20;
  if (v16) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  sub_18AFAA2AC(v16, v22, a4, a5, a6, a7, a8, a9);
  swift_release();
  return sub_18AF5AF68(a5, a6);
}

uint64_t sub_18AFAAA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = &v11[v15];
  if (v11) {
    uint64_t v17 = (uint64_t)v16;
  }
  else {
    uint64_t v17 = 0;
  }
  sub_18AFA9ED4(v11, v17, a4, a5, &v18);
  uint64_t result = sub_18AF5AF68(a4, a5);
  if (!v5) {
    return v18;
  }
  return result;
}

CCCryptorRef sub_18AFAAADC(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  cryptorRef[1] = *(CCCryptorRef *)MEMORY[0x1E4F143B8];
  uint64_t v11 = __DataStorage._bytes.getter();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v13)) {
      __break(1u);
    }
    uint64_t v14 = (const void *)(v12 + a1 - v13);
  }
  else
  {
    uint64_t v14 = 0;
  }
  __DataStorage._length.getter();
  cryptorRef[0] = 0;
  size_t v15 = Data.count.getter();
  CCCryptorStatus v16 = CCCryptorCreateWithMode(1u, 3u, 0, 0, a4, v14, v15, 0, 0, 0, 0, cryptorRef);
  sub_18AF5AF68(a6, a7);
  if (v16) {
    return 0;
  }
  else {
    return cryptorRef[0];
  }
}

CCCryptorRef sub_18AFAABE8(const void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  cryptorRef[1] = *(CCCryptorRef *)MEMORY[0x1E4F143B8];
  cryptorRef[0] = 0;
  size_t v11 = Data.count.getter();
  LODWORD(a4) = CCCryptorCreateWithMode(1u, 3u, 0, 0, a4, a1, v11, 0, 0, 0, 0, cryptorRef);
  sub_18AF5AF68(a6, a7);
  if (a4) {
    return 0;
  }
  else {
    return cryptorRef[0];
  }
}

uint64_t sub_18AFAACBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *dataOut, int a8, size_t *dataOutMoved)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t dataIn = a1;
  __int16 v13 = a2;
  char v14 = BYTE2(a2);
  char v15 = BYTE3(a2);
  char v16 = BYTE4(a2);
  char v17 = BYTE5(a2);
  sub_18AFAA2AC(&dataIn, (int)&dataIn + a3, a4, a5, a6, dataOut, a8, dataOutMoved);
  swift_release();
  return sub_18AF5AF68(a5, a6);
}

unint64_t sub_18AFAADD0()
{
  unint64_t result = qword_1E91269E0;
  if (!qword_1E91269E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91269E0);
  }
  return result;
}

uint64_t sub_18AFAAE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  sub_18AFA9ED4(&v9, (uint64_t)&v9 + a3, a4, a5, v15);
  uint64_t result = sub_18AF5AF68(a4, a5);
  if (!v5) {
    return v15[0];
  }
  return result;
}

CCCryptorRef sub_18AFAAF20(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a1;
  __int16 v15 = a2;
  char v16 = BYTE2(a2);
  char v17 = BYTE3(a2);
  char v18 = BYTE4(a2);
  char v19 = BYTE5(a2);
  sub_18AF5F6FC(a6, a7);
  CCCryptorRef v12 = sub_18AFAABE8(&v14, (uint64_t)&v20, a3, a4, a5, a6, a7);
  sub_18AF5AF68(a6, a7);
  return v12;
}

uint64_t getEnumTagSinglePayload for ChunkDataDecryptor.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ChunkDataDecryptor.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18AFAB14CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_18AFAB174()
{
  return 0;
}

ValueMetadata *type metadata accessor for ChunkDataDecryptor.Error()
{
  return &type metadata for ChunkDataDecryptor.Error;
}

unint64_t sub_18AFAB190()
{
  unint64_t result = qword_1E91269E8;
  if (!qword_1E91269E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91269E8);
  }
  return result;
}

CKQuery __swiftcall CKQuery.init(recordType:predicate:)(Swift::String recordType, NSPredicate *predicate)
{
  object = recordType._object;
  uint64_t countAndFlagsBits = recordType._countAndFlagsBits;
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v6 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  uint64_t v7 = (objc_class *)objc_msgSend(v5, sel_initWithRecordType_predicate_, v6, predicate);

  char v11 = v7;
  result._recordType = v10;
  result._sortDescriptors = v9;
  result._predicate = v8;
  result.super.Class isa = v11;
  return result;
}

uint64_t CKQuery.recordType.getter()
{
  id v1 = objc_msgSend(v0, sel_recordType);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void (*CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.getter())(void *a1, char a2)
{
  CKQuery result = (void (*)(void *, char))objc_msgSend(v0, sel_discoverAllUserIdentitiesCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_18AF20008;
    *(void *)(v4 + 24) = v3;
    return sub_18AF539B8;
  }
  return result;
}

uint64_t sub_18AFAB354()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18AFAB38C@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AFAB3FC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.setter((uint64_t)v4, v3);
}

id CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF53A80;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF53A88;
    uint64_t v9[3] = &unk_1ED7F1090;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setDiscoverAllUserIdentitiesCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setDiscoverAllUserIdentitiesCompletionBlock_, 0);
  }
}

id (*CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.getter();
  a1[1] = v3;
  return sub_18AFAB608;
}

id sub_18AFAB608(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) == 0) {
    return CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.setter(*a1, v3);
  }
  sub_18AF42F30(*a1);
  CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.setter(v2, v3);

  return (id)sub_18AF1E758(v2);
}

uint64_t sub_18AFAB68C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void CKQueryOperation.desiredKeys.setter(uint64_t a1)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v1, sel_setDesiredKeys_, isa);
}

id CKQueryOperation.recordMatchedBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF61DC8;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF61DD0;
    uint64_t v9[3] = &unk_1ED7F10B8;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setRecordMatchedBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF62BB4(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setRecordMatchedBlock_, 0);
  }
}

id CKQueryOperation.queryResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AFABFD4;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF7F4A8;
    uint64_t v9[3] = &unk_1ED7F1680;
    uint64_t v7 = _Block_copy(v9);
    sub_18AF62BB8(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setQueryCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF62BB4(a1);
    return (id)sub_18AF62BB4(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setQueryCompletionBlock_, 0);
  }
}

uint64_t CKQueryOperation.desiredKeys.getter()
{
  return sub_18AF6A060(v0);
}

void sub_18AFAB9D0()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKQueryOperation.desiredKeys.setter(v0);
}

void (*CKQueryOperation.desiredKeys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  *a1 = sub_18AF6A060(v1);
  return sub_18AFABA48;
}

void sub_18AFABA48(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    CKQueryOperation.desiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKQueryOperation.desiredKeys.setter(*a1);
  }
}

void (*CKQueryOperation.recordMatchedBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_recordMatchedBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AFABB38@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKQueryOperation.recordMatchedBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF62AEC;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AFABBA8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF62AE0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF62BB8(v1);
  return CKQueryOperation.recordMatchedBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18AFABC38()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*CKQueryOperation.recordMatchedBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKQueryOperation.recordMatchedBlock.getter();
  a1[1] = v3;
  return sub_18AFABCB8;
}

uint64_t sub_18AFABCB8(uint64_t *a1, char a2)
{
  return sub_18AFAC064(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKQueryOperation.recordMatchedBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKQueryOperation.queryResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_queryCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF55F48;
    *(void *)(v4 + 24) = v3;
    return sub_18AFAC140;
  }
  return result;
}

uint64_t sub_18AFABD90@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKQueryOperation.queryResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFAC1CC;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AFABE00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFAC18C;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF62BB8(v1);
  return CKQueryOperation.queryResultBlock.setter((uint64_t)v4, v3);
}

void sub_18AFABE90(id a1, char a2, void (*a3)(id, id))
{
  if (a2)
  {
    id v5 = a1;
    id v6 = 0;
    id v7 = a1;
  }
  else
  {
    id v8 = a1;
    id v6 = a1;
    id v7 = 0;
  }
  a3(v6, v7);

  sub_18AF62BA4(a1);
}

void sub_18AFABF08(void *a1, void *a2, void (*a3)(void *, uint64_t))
{
  if (!a2) {
    goto LABEL_4;
  }
  swift_getErrorValue();
  id v6 = a2;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a3(a1, 0);
    return;
  }
  id v7 = a2;
  a3(a2, 1);
}

void sub_18AFABFD4(void *a1, void *a2)
{
  sub_18AFABF08(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t (*CKQueryOperation.queryResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKQueryOperation.queryResultBlock.getter();
  a1[1] = v3;
  return sub_18AFAC024;
}

uint64_t sub_18AFAC024(uint64_t *a1, char a2)
{
  return sub_18AFAC064(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKQueryOperation.queryResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AFAC204, (uint64_t (*)(uint64_t, uint64_t))sub_18AFAC200);
}

uint64_t sub_18AFAC064(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AFAC108()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AFAC140(void *a1, char a2)
{
  sub_18AFABE90(a1, a2 & 1, *(void (**)(id, id))(v2 + 16));
}

uint64_t sub_18AFAC14C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKQueryOperation.desiredKeys.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18AFAC18C(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_18AFAC1CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_18AFAC230(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 48;
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v17 = v3 - 1;
    uint64_t v6 = MEMORY[0x1E4FBC860];
    uint64_t v18 = a1 + 48;
    do
    {
      uint64_t v19 = v6;
      uint64_t v7 = (uint64_t *)(v5 + 24 * v4);
      unint64_t v8 = v4;
      while (1)
      {
        if (v8 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v9 = (void *)*(v7 - 2);
        uint64_t v10 = *(v7 - 1);
        unint64_t v4 = v8 + 1;
        uint64_t v11 = *v7;
        sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
        id v12 = v9;
        swift_bridgeObjectRetain();
        id v13 = objc_msgSend(v12, sel_zoneID);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          break;
        }
        swift_bridgeObjectRelease();

        v7 += 3;
        ++v8;
        if (v20 == v4) {
          goto LABEL_13;
        }
      }
      uint64_t v6 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AF5B598();
        uint64_t v6 = v19;
      }
      unint64_t v15 = *(void *)(v6 + 16);
      if (v15 >= *(void *)(v6 + 24) >> 1)
      {
        sub_18AF5B598();
        uint64_t v6 = v19;
      }
      *(void *)(v6 + 16) = v15 + 1;
      char v16 = (void *)(v6 + 24 * v15);
      v16[4] = v12;
      v16[5] = v10;
      v16[6] = v11;
      uint64_t v5 = v18;
    }
    while (v17 != v8);
  }
LABEL_13:

  swift_bridgeObjectRelease();
}

void sub_18AFAC3FC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v14 = v6;
      unint64_t v7 = v5;
      while (1)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        unint64_t v8 = *(void **)(a1 + 32 + 8 * v7);
        unint64_t v5 = v7 + 1;
        sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
        id v9 = v8;
        id v10 = objc_msgSend(v9, sel_zoneID);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }

        ++v7;
        if (v4 == v5) {
          goto LABEL_13;
        }
      }
      uint64_t v6 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AF5B578();
        uint64_t v6 = v14;
      }
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v13 = v12 + 1;
      if (v12 >= *(void *)(v6 + 24) >> 1)
      {
        sub_18AF5B578();
        unint64_t v13 = v12 + 1;
        uint64_t v6 = v14;
      }
      *(void *)(v6 + 16) = v13;
      *(void *)(v6 + 8 * v12 + 32) = v9;
    }
    while (v4 - 1 != v7);
  }
LABEL_13:

  swift_bridgeObjectRelease();
}

void *sub_18AFAC598(void *a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v23 = a1;
  unint64_t v12 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v15 = (a2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C1298C0](i - 4, a2) : *(id *)(a2 + 8 * i);
      unint64_t v12 = v15;
      uint64_t v16 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      int v22 = v15;
      sub_18AFAD838((uint64_t)&v23, &v22, a3, a4, a5, a6, a7, a8);
      if (v8)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v12;
      }

      if (v16 == v13)
      {
        swift_bridgeObjectRelease();
        return v23;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t CKDatabase.recordZoneChanges(inZonesWith:configurations:shouldFetchAssetContents:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_18AF18508((uint64_t)sub_18AFAC708);
}

uint64_t sub_18AFAC708()
{
  uint64_t v1 = *(void **)(v0 + 32);
  *(void *)(v0 + 40) = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_container);
  id v3 = objc_msgSend(v2, sel_convenienceConfiguration);
  *(void *)(v0 + 48) = v3;

  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_18AFAC810;
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  char v7 = *(unsigned char *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 16);
  return sub_18AFAC990(v8, v5, v7, v6, (uint64_t)v3);
}

uint64_t sub_18AFAC810(uint64_t a1)
{
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF22DBC();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v9, v10, v11);
  }
  else
  {
    unint64_t v12 = *(void **)(v5 + 40);

    uint64_t v13 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v13(a1);
  }
}

uint64_t sub_18AFAC930()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 40);

  sub_18AF16D48();
  return v2();
}

uint64_t sub_18AFAC990(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 56) = v5;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a4;
  *(unsigned char *)(v6 + 152) = a3;
  *(void *)(v6 + 24) = a1;
  return sub_18AF18508((uint64_t)sub_18AFAC9B4);
}

uint64_t sub_18AFAC9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v114 = v12;
  uint64_t v13 = (void *)v12;
  BOOL v72 = *(void **)(v12 + 48);
  uint64_t v77 = (void (*)(uint64_t, void *, void *))(v12 + 16);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v62 = *(void *)(v12 + 40);
  uint64_t v67 = *(void (**)(uint64_t, void *, void *, void *))(v12 + 56);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 152);
  uint64_t v57 = *(void *)(v12 + 24);
  sub_18AF34EA0(0, &qword_1E9125140);
  swift_bridgeObjectRetain();
  v119.value._rawValue = (void *)swift_bridgeObjectRetain();
  v119.is_nil = v14;
  CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v16, v119, v120);
  uint64_t v18 = v17;
  *(void *)(v12 + 64) = v17;
  objc_msgSend(v17, sel_setFetchAllChanges_, 0);
  objc_msgSend(v18, sel_setShouldFetchAssetContents_, v15);
  uint64_t v19 = sub_18AF33890();
  *(void *)(v12 + 72) = v19;
  uint64_t v20 = MEMORY[0x1E4FBC868];
  *(void *)(v19 + 16) = MEMORY[0x1E4FBC868];
  uint64_t v21 = sub_18AF33890();
  v13[10] = v21;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  *(void *)(v21 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v23 = sub_18AF33890();
  v13[11] = v23;
  *(void *)(v23 + 16) = v22;
  uint64_t v24 = sub_18AF33890();
  v13[12] = v24;
  *(void *)(v24 + 16) = v20;
  uint64_t v25 = sub_18AF33890();
  v13[13] = v25;
  *(void *)(v25 + 16) = v20;
  uint64_t v26 = sub_18AF33890();
  v13[14] = v26;
  *(void *)(v26 + 16) = v20;
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter((uint64_t)sub_18AFACF84, v19, v27, v28, v29, v30, v31, v32, v57, v62, v67, v72, v77, v82, v86, v90, v94, v98, v102,
    v106,
    v110,
    v114);
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter((uint64_t)sub_18AF9E224, v21, v33, v34, v35, v36, v37, v38, v58, v63, v68, v73, v78, v83, v87, v91, v95, v99, v103,
    v107,
    v111,
    v115);
  swift_retain();
  CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.setter((uint64_t)sub_18AFAD014, v23, v39, v40, v41, v42, v43, v44, v59, v64, v69, v74, v79, v84, v88, v92, v96, v100, v104,
    v108,
    v112,
    v116);
  uint64_t v45 = (void *)swift_allocObject();
  v45[2] = v24;
  v45[3] = v25;
  v45[4] = v26;
  swift_retain();
  swift_retain();
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter((uint64_t)sub_18AFAD190, (uint64_t)v45, v46, v47, v48, v49, v50, v51, v60, v65, v70, v75, v80, v85, v89, v93, v97, v101, v105,
    v109,
    v113,
    v117);
  uint64_t v52 = (void *)swift_task_alloc();
  v13[15] = v52;
  v52[2] = v18;
  v52[3] = v61;
  v52[4] = v26;
  v52[5] = v24;
  v52[6] = v19;
  v52[7] = v21;
  v52[8] = v23;
  v52[9] = v25;
  v52[10] = v71;
  v52[11] = v66;
  v52[12] = v76;
  uint64_t v53 = swift_task_alloc();
  v13[16] = v53;
  *(void *)(v53 + 16) = v18;
  uint64_t v54 = (void *)swift_task_alloc();
  v13[17] = v54;
  uint64_t v55 = sub_18AF161EC(&qword_1E9125068);
  *uint64_t v54 = v13;
  v54[1] = sub_18AFACCE8;
  return MEMORY[0x1F4188148](v81, &unk_1E9126A08, v52, sub_18AFADB0C, v53, 0, 0, v55, a9, a10, a11, a12);
}

uint64_t sub_18AFACCE8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF22DBC();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFACDD0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_18AFACE84()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v1();
}

uint64_t sub_18AFACF4C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AFACF84(void *a1, void *a2, char a3)
{
}

uint64_t sub_18AFACF90(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  sub_18AFA75CC();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 16);
  sub_18AFA76FC(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(v6 + 16) = v5 + 1;
  *(void *)(v6 + 8 * v5 + 32) = v4;
  return swift_endAccess();
}

uint64_t sub_18AFAD014(void *a1)
{
  return sub_18AFACF90(a1, v1);
}

void sub_18AFAD01C(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a5 & 0x100) != 0)
  {
    swift_beginAccess();
    id v12 = a1;
    sub_18AFAE3F4(a2, a3, a4, a5, 1);
    sub_18AFF3740((uint64_t)a2, (uint64_t)v12);
    swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    id v8 = a2;
    id v9 = a1;
    sub_18AFF37BC();
    swift_endAccess();

    swift_beginAccess();
    sub_18AFF3758(a5 & 1, v9);
    swift_endAccess();
  }
}

uint64_t sub_18AFAD148()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_18AFAD190(void *a1, void *a2, uint64_t a3, unint64_t a4, __int16 a5)
{
}

uint64_t sub_18AFAD1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 104) = v12;
  *(_OWORD *)(v8 + 80) = v10;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return MEMORY[0x1F4188298](sub_18AFAD1E8, 0, 0);
}

uint64_t sub_18AFAD1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF339B8();
  uint64_t v13 = *(void *)(v12 + 104);
  uint64_t v14 = swift_task_alloc();
  *(void *)(v12 + 112) = v14;
  long long v15 = *(_OWORD *)(v12 + 40);
  long long v16 = *(_OWORD *)(v12 + 56);
  long long v17 = *(_OWORD *)(v12 + 72);
  long long v18 = *(_OWORD *)(v12 + 88);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v12 + 24);
  *(_OWORD *)(v14 + 32) = v15;
  *(_OWORD *)(v14 + 48) = v16;
  *(_OWORD *)(v14 + 64) = v17;
  *(_OWORD *)(v14 + 80) = v18;
  *(void *)(v14 + 96) = v13;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v12 + 120) = v19;
  sub_18AF161EC(&qword_1E9125068);
  *uint64_t v19 = v12;
  v19[1] = sub_18AFAD2F8;
  sub_18AF16AA0();
  return MEMORY[0x1F4188160](v20, v21, v22, 0xD000000000000071, v23, v24, v14, v25, a9, a10, a11, a12);
}

uint64_t sub_18AFAD2F8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF22DBC();
  *id v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    sub_18AF16D48();
    return v10();
  }
}

uint64_t sub_18AFAD3F4()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFAD450(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *long long v10 = v2;
  v10[1] = sub_18AF38E00;
  return sub_18AFAD1A8(a1, v12, v4, v5, v6, v7, v8, v9);
}

id sub_18AFAD554(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void *a1), void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v38 = a3;
  uint64_t v47 = a12;
  uint64_t v48 = a11;
  uint64_t v45 = a2;
  id v46 = a10;
  uint64_t v39 = a9;
  uint64_t v40 = a4;
  uint64_t v37 = (void (*)(uint64_t, void *))sub_18AF161EC(&qword_1E9125070);
  uint64_t v13 = *((void *)v37 - 1);
  uint64_t v14 = *(void *)(v13 + 64);
  __n128 v15 = MEMORY[0x1F4188790](v37);
  long long v16 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v13 + 16))(v16, a1, v15);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, void (*)(uint64_t, void *)))(v13 + 32))(v23 + v17, v16, v37);
  *(void *)(v23 + v18) = v38;
  uint64_t v24 = v41;
  *(void *)(v23 + v36) = v40;
  *(void *)(v23 + v19) = v24;
  uint64_t v25 = v43;
  *(void *)(v23 + v20) = v42;
  *(void *)(v23 + v21) = v25;
  *(void *)(v23 + v22) = v44;
  *(void *)(v23 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8)) = v39;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v26 = v23;
  uint64_t v27 = v45;
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter((uint64_t)sub_18AFADC7C, v26, v28, v29, v30, v31, v32, v33, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
    (uint64_t)v46,
    v47,
    v48);
  return objc_msgSend(v46, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_, v27, v48, v47);
}

uint64_t sub_18AFAD780(void *a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    id v11 = a1;
    sub_18AF161EC(&qword_1E9125070);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_18AFAC598(MEMORY[0x1E4FBC868], a4, (uint64_t *)(a5 + 16), (uint64_t *)(a6 + 16), a7 + 16, a8 + 16, a9 + 16, (uint64_t *)(a10 + 16));
    sub_18AF161EC(&qword_1E9125070);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_18AFAD838(uint64_t a1, void **a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  id v11 = *a2;
  swift_beginAccess();
  uint64_t v12 = *a3;
  id v13 = v11;
  uint64_t v14 = sub_18AFFDF6C((uint64_t)v13, v12);

  if (v14)
  {
    swift_endAccess();
    uint64_t v39 = (uint64_t)v14;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    __int16 v43 = 256;
    id v15 = v13;
    id v16 = v14;
    sub_18AFF3864((uint64_t)&v39, v15);

    return;
  }
  swift_endAccess();
  swift_beginAccess();
  uint64_t v17 = *a4;
  id v18 = v13;
  unint64_t v19 = sub_18AFFDFB8(v18, v17);

  if (!v19)
  {
    swift_endAccess();
    id v37 = v18;
    uint64_t v39 = related decl 'e' for CKErrorCode.init(_:description:)(1, 0xD000000000000021, 0x800000018B1D3960);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    __int16 v43 = 256;
    sub_18AFF3864((uint64_t)&v39, v37);

    return;
  }
  swift_endAccess();
  swift_beginAccess();
  id v20 = v18;
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_18AFADD74(v21, v20);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  id v23 = v20;
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_18AFAC230(v24, v23);
  uint64_t v26 = v25;
  swift_beginAccess();
  id v27 = v23;
  uint64_t v28 = swift_bridgeObjectRetain();
  sub_18AFAC3FC(v28, v27);
  uint64_t v30 = v29;
  swift_beginAccess();
  uint64_t v31 = *a8;
  if (!*(void *)(*a8 + 16))
  {
    id v38 = v19;
LABEL_10:
    unsigned __int8 v36 = 0;
    goto LABEL_11;
  }
  id v32 = v27;
  id v33 = v19;
  sub_18AF7D0BC();
  if ((v35 & 1) == 0)
  {

    goto LABEL_10;
  }
  unsigned __int8 v36 = *(unsigned char *)(*(void *)(v31 + 56) + v34);

LABEL_11:
  swift_endAccess();
  uint64_t v39 = v22;
  uint64_t v40 = v26;
  uint64_t v41 = v30;
  uint64_t v42 = v19;
  __int16 v43 = v36;
  sub_18AFF3864((uint64_t)&v39, v27);
}

id sub_18AFADB0C()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

id sub_18AFADB1C(uint64_t a1)
{
  return sub_18AFAD554(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void (**)(void *))(v1 + 72), *(void **)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96));
}

uint64_t sub_18AFADB5C()
{
  uint64_t v1 = sub_18AF161EC(&qword_1E9125070);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((((((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t sub_18AFADC7C(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(sub_18AF161EC(&qword_1E9125070) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_18AFAD780(a1, v4, v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v8), *(void *)(v2 + v9), *(void *)(v2 + v10), *(void *)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2+ ((((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_18AFADD74(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  v16[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  unint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v9 = (void *)((char *)v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_18AF6FC30(0, v6, v9);
    id v10 = v8;
    sub_18AFADF28(v9, v6, v3, v10);
    if (v2) {
      swift_willThrow();
    }
    else {
      uint64_t v3 = v11;
    }
  }
  else
  {
    uint64_t v12 = (unint64_t *)swift_slowAlloc();
    sub_18AF6FC30(0, v6, v12);
    id v13 = v8;
    sub_18AFADF28(v12, v6, v3, v13);
    uint64_t v3 = v14;
    MEMORY[0x18C12BB10](v12, -1, -1);
  }
  return v3;
}

void sub_18AFADF28(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v20 = a2;
  uint64_t v22 = 0;
  int64_t v5 = 0;
  uint64_t v23 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v11 >= v24) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v23 + 8 * v11);
    ++v5;
    if (!v12)
    {
      int64_t v5 = v11 + 1;
      if (v11 + 1 >= v24) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v23 + 8 * v5);
      if (!v12)
      {
        int64_t v5 = v11 + 2;
        if (v11 + 2 >= v24) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v23 + 8 * v5);
        if (!v12) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_20:
    uint64_t v14 = *(void **)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = *(void **)(*(void *)(a3 + 56) + 16 * v10);
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
    id v16 = v14;
    sub_18AF84C94(v15);
    id v17 = objc_msgSend(v16, sel_zoneID, v20);
    char v18 = static NSObject.== infix(_:_:)();

    sub_18AF62BA4(v15);
    if (v18)
    {
      *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        sub_18AFAE16C(a1, v20, v22, a3);

        return;
      }
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v24) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v23 + 8 * v13);
  if (v12)
  {
    int64_t v5 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v5 >= v24) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v23 + 8 * v5);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_18AFAE16C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_18AF161EC((uint64_t *)&unk_1E9124FB0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v35) {
        return v9;
      }
      unint64_t v16 = v34[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v35) {
          return v9;
        }
        unint64_t v16 = v34[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v35) {
            return v9;
          }
          unint64_t v16 = v34[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v35) {
              return v9;
            }
            unint64_t v16 = v34[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v35) {
                  return v9;
                }
                unint64_t v16 = v34[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    char v18 = *(void **)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t v19 = *(void *)(v4 + 56) + 16 * v14;
    uint64_t v20 = *(void **)v19;
    char v21 = *(unsigned char *)(v19 + 8);
    Swift::Int v22 = *(void *)(v9 + 40);
    id v23 = v18;
    sub_18AF84C94(v20);
    uint64_t result = NSObject._rawHashValue(seed:)(v22);
    uint64_t v24 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) == 0) {
      break;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    *(void *)(*(void *)(v9 + 48) + 8 * v27) = v23;
    uint64_t v32 = *(void *)(v9 + 56) + 16 * v27;
    *(void *)uint64_t v32 = v20;
    *(unsigned char *)(v32 + 8) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v9;
    }
  }
  char v28 = 0;
  unint64_t v29 = (unint64_t)(63 - v24) >> 6;
  while (++v26 != v29 || (v28 & 1) == 0)
  {
    BOOL v30 = v26 == v29;
    if (v26 == v29) {
      unint64_t v26 = 0;
    }
    v28 |= v30;
    uint64_t v31 = *(void *)(v12 + 8 * v26);
    if (v31 != -1)
    {
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id sub_18AFAE3F4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return a1;
  }
  else
  {
    id v9 = a1;
    return (id)sub_18AF5F6E8(a2, a3);
  }
}

id CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AFAEC60;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AFAEC68;
    uint64_t v9[3] = &unk_1ED7F10E0;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setPerShareMetadataBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setPerShareMetadataBlock_, 0);
  }
}

id CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF53A80;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF53A88;
    uint64_t v9[3] = &unk_1ED7F16A8;
    uint64_t v7 = _Block_copy(v9);
    sub_18AF42F30(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchShareMetadataCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF1E758(a1);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setFetchShareMetadataCompletionBlock_, 0);
  }
}

uint64_t CKFetchShareMetadataOperation.rootRecordDesiredKeys.getter()
{
  return sub_18AFAF0E4(v0);
}

void sub_18AFAE6E8()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(v0);
}

void CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(uint64_t a1)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v1, sel_setRootRecordDesiredKeys_, isa);
}

void (*CKFetchShareMetadataOperation.rootRecordDesiredKeys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  *a1 = sub_18AFAF0E4(v1);
  return sub_18AFAE7D4;
}

void sub_18AFAE7D4(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(*a1);
  }
}

void (*CKFetchShareMetadataOperation.perShareMetadataResultBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perShareMetadataBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFAF13C;
    *(void *)(v4 + 24) = v3;
    return sub_18AFAF144;
  }
  return result;
}

uint64_t sub_18AFAE8C4@<X0>(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchShareMetadataOperation.perShareMetadataResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF54760;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t))result;
  return result;
}

id sub_18AFAE934(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF54720;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter((uint64_t)v4, v3);
}

void sub_18AFAE9C4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, NSURL *a4@<X8>)
{
  URL._bridgeToObjectiveC()(a4);
  unint64_t v8 = v7;
  if (a2) {
    uint64_t v9 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = (id)v9;
  (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, a1);
}

void sub_18AFAEA54(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id, id))
{
  if (a3)
  {
    id v7 = a2;
    uint64_t v8 = a1;
    id v9 = 0;
    id v10 = a2;
  }
  else
  {
    id v11 = a2;
    uint64_t v8 = a1;
    id v9 = a2;
    id v10 = 0;
  }
  a4(v8, v9, v10);

  sub_18AF62BA4(a2);
}

void sub_18AFAEAE0(uint64_t a1, void *a2, id a3, void (*a4)(uint64_t, id, uint64_t))
{
  if (a3)
  {
    id v7 = a3;
    a4(a1, a3, 1);
    id v8 = a3;
LABEL_4:

    return;
  }
  if (a2)
  {
    id v10 = a2;
    a4(a1, a2, 0);
    id v8 = v10;
    goto LABEL_4;
  }
  type metadata accessor for CKError(0);
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AF62B54();
  _BridgedStoredNSError.init(_:userInfo:)();
  a4(a1, v11, 1);
}

uint64_t sub_18AFAEC28()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AFAEC60(uint64_t a1, void *a2, void *a3)
{
  sub_18AFAEAE0(a1, a2, a3, *(void (**)(uint64_t, id, uint64_t))(v3 + 16));
}

uint64_t sub_18AFAEC68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void (**)(char *, void *, void *))(a1 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v12 = a3;
  id v13 = a4;
  v11(v10, a3, a4);

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t (*CKFetchShareMetadataOperation.perShareMetadataResultBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchShareMetadataOperation.perShareMetadataResultBlock.getter();
  a1[1] = v3;
  return sub_18AFAEDE0;
}

uint64_t sub_18AFAEDE0(uint64_t *a1, char a2)
{
  return sub_18AFAF040(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_fetchShareMetadataCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF20008;
    *(void *)(v4 + 24) = v3;
    return sub_18AF539B8;
  }
  return result;
}

uint64_t sub_18AFAEEB8@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AFAEF28(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter((uint64_t)v4, v3);
}

uint64_t (*CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.getter();
  a1[1] = v3;
  return sub_18AFAF000;
}

uint64_t sub_18AFAF000(uint64_t *a1, char a2)
{
  return sub_18AFAF040(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFAF040(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AFAF0E4(void *a1)
{
  id v1 = objc_msgSend(a1, sel_rootRecordDesiredKeys);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18AFAF13C(uint64_t a1@<X1>, uint64_t a2@<X2>, NSURL *a3@<X8>)
{
  sub_18AFAE9C4(a1, a2, *(void *)(v3 + 16), a3);
}

void sub_18AFAF144(uint64_t a1, void *a2, char a3)
{
  sub_18AFAEA54(a1, a2, a3 & 1, *(void (**)(uint64_t, id, id))(v3 + 16));
}

uint64_t sub_18AFAF150()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18AFAF188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKFetchShareMetadataOperation.rootRecordDesiredKeys.getter();
  *a1 = result;
  return result;
}

void __swiftcall CKFetchSubscriptionsOperation.init(subscriptionIDs:)(CKFetchSubscriptionsOperation *__return_ptr retstr, Swift::OpaquePointer subscriptionIDs)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithSubscriptionIDs_, isa);
}

id CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF9F854;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AFAF510;
    uint64_t v9[3] = &unk_1ED7F1108;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setPerSubscriptionCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF30B4C();
  }
  else
  {
    return objc_msgSend(v2, sel_setPerSubscriptionCompletionBlock_, 0);
  }
}

id CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF62928;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AFAFC5C;
    uint64_t v9[3] = &unk_1ED7F16D0;
    uint64_t v7 = _Block_copy(v9);
    sub_18AF42F30(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchSubscriptionCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF30B4C();
    return (id)sub_18AF30B4C();
  }
  else
  {
    return objc_msgSend(v2, sel_setFetchSubscriptionCompletionBlock_, 0);
  }
}

uint64_t sub_18AFAF4D0(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void))
{
  return a3(*a1, a1[1], *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

void sub_18AFAF510(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void *, void *))(a1 + 32);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  swift_retain();
  id v11 = a3;
  id v10 = a4;
  v6(v7, v9, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t CKFetchSubscriptionsOperation.subscriptionIDs.getter()
{
  return sub_18AFB01E4(v0);
}

void sub_18AFAF5CC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKFetchSubscriptionsOperation.subscriptionIDs.setter(v0);
}

void CKFetchSubscriptionsOperation.subscriptionIDs.setter(uint64_t a1)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v1, sel_setSubscriptionIDs_, isa);
}

void (*CKFetchSubscriptionsOperation.subscriptionIDs.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  *a1 = sub_18AFB01E4(v1);
  return sub_18AFAF6B8;
}

void sub_18AFAF6B8(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    CKFetchSubscriptionsOperation.subscriptionIDs.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchSubscriptionsOperation.subscriptionIDs.setter(*a1);
  }
}

void (*CKFetchSubscriptionsOperation.perSubscriptionResultBlock.getter())(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t result = (void (*)(uint64_t, uint64_t, void *, char))objc_msgSend(v0, sel_perSubscriptionCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFA0978;
    *(void *)(v4 + 24) = v3;
    return sub_18AFA0980;
  }
  return result;
}

uint64_t sub_18AFAF7A8@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchSubscriptionsOperation.perSubscriptionResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFA0A58;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AFAF818(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFA0A4C;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18AFAF8A8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*CKFetchSubscriptionsOperation.perSubscriptionResultBlock.modify(void (**a1)(uint64_t a1, uint64_t a2, void *a3, char a4)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchSubscriptionsOperation.perSubscriptionResultBlock.getter();
  a1[1] = v3;
  return sub_18AFAF928;
}

uint64_t sub_18AFAF928(uint64_t *a1, char a2)
{
  return sub_18AFB0140(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.getter())(objc_class *a1, uint64_t a2)
{
  uint64_t result = (void (*)(objc_class *, uint64_t))objc_msgSend(v0, sel_fetchSubscriptionCompletionBlock);
  if (result)
  {
    *(void *)(swift_allocObject() + 16) = result;
    return sub_18AFB0274;
  }
  return result;
}

uint64_t sub_18AFAF9DC@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF62AB0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AFAFA4C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF62A74;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.setter((uint64_t)v4, v3);
}

void CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.setter(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4[4] = a1;
    v4[5] = a2;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 1107296256;
    v4[2] = sub_18AFAFC5C;
    v4[3] = &unk_1ED7F1450;
    uint64_t v3 = _Block_copy(v4);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v3 = 0;
  }
  objc_msgSend(v2, sel_setFetchSubscriptionCompletionBlock_, v3);
  sub_18AF30B4C();
  _Block_release(v3);
}

void sub_18AFAFBB0(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_18AF9EF54();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_18AFAFC5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF9EF54();
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t (*CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.modify(void (**a1)(objc_class *a1, uint64_t a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.getter();
  a1[1] = v3;
  return sub_18AFAFD48;
}

uint64_t sub_18AFAFD48(uint64_t *a1, char a2)
{
  return sub_18AFB0140(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_fetchSubscriptionCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFB02D0;
    *(void *)(v4 + 24) = v3;
    return sub_18AFB027C;
  }
  return result;
}

uint64_t sub_18AFAFE20@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    id v6 = sub_18AF53C04;
  }
  else
  {
    id v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AFAFE90(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter((uint64_t)v4, v3);
}

void sub_18AFAFF20(void *a1, char a2, void (*a3)(uint64_t, void *))
{
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1EB279440);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    MEMORY[0x18C12BB10](v9, -1, -1);
  }

  if (a2)
  {
    id v11 = a1;
    a3(0, a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    sub_18AF9EF54();
    uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
    a3(v10, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t (*CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.getter();
  a1[1] = v3;
  return sub_18AFB0100;
}

uint64_t sub_18AFB0100(uint64_t *a1, char a2)
{
  return sub_18AFB0140(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFB0140(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AFB01E4(void *a1)
{
  id v1 = objc_msgSend(a1, sel_subscriptionIDs);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AFB023C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AFB0274(objc_class *a1, uint64_t a2)
{
  sub_18AFAFBB0(a1, a2, *(void *)(v2 + 16));
}

void sub_18AFB027C(void *a1, char a2)
{
  sub_18AFAFF20(a1, a2 & 1, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t sub_18AFB0288@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKFetchSubscriptionsOperation.subscriptionIDs.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18AFB0310(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v31 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v30 - v8;
  uint64_t v10 = type metadata accessor for SHA256Digest();
  MEMORY[0x1F4188790](v10 - 8);
  MEMORY[0x1F4188790](v11);
  id v13 = (char *)v30 - v12;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v14 = __DataStorage.init(capacity:)();
  uint64_t v32 = 0;
  uint64_t v33 = v14 | 0x4000000000000000;
  sub_18AFB0824(129);
  sub_18AFB08D4();
  dispatch thunk of HashFunction.init()();
  v30[1] = v13;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        JUMPOUT(0x18AFB078CLL);
      }
      sub_18AF5F6FC(a1, a2);
      sub_18AF67234((int)a1, a1 >> 32);
      goto LABEL_5;
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
      sub_18AF5F6FC(a1, a2);
      swift_retain();
      swift_retain();
      sub_18AF67234(v15, v16);
      swift_release();
      swift_release();
LABEL_5:
      sub_18AF5AF68(a1, a2);
      goto LABEL_8;
    case 3uLL:
      sub_18AF394A8();
      goto LABEL_7;
    default:
LABEL_7:
      sub_18AF67314();
      sub_18AF5AF68(a1, a2);
LABEL_8:
      dispatch thunk of HashFunction.finalize()();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v31 + 8);
      v17(v9, v4);
      uint64_t v18 = sub_18AF6343C();
      unint64_t v20 = v19;
      dispatch thunk of HashFunction.init()();
      switch(v20 >> 62)
      {
        case 1uLL:
          if (v18 >> 32 < (int)v18) {
            goto LABEL_17;
          }
          uint64_t v31 = 0;
          sub_18AF5F6FC(v18, v20);
          sub_18AF67234((int)v18, v18 >> 32);
LABEL_12:
          sub_18AF5AF68(v18, v20);
          break;
        case 2uLL:
          uint64_t v31 = 0;
          uint64_t v22 = *(void *)(v18 + 16);
          uint64_t v21 = *(void *)(v18 + 24);
          sub_18AF5F6FC(v18, v20);
          swift_retain();
          swift_retain();
          sub_18AF67234(v22, v21);
          swift_release();
          swift_release();
          goto LABEL_12;
        case 3uLL:
          sub_18AF394A8();
          goto LABEL_14;
        default:
LABEL_14:
          sub_18AF67314();
          sub_18AF5AF68(v18, v20);
          break;
      }
      dispatch thunk of HashFunction.finalize()();
      v17(v6, v4);
      sub_18AF5AF68(v18, v20);
      uint64_t v23 = sub_18AF6343C();
      unint64_t v25 = v24;
      uint64_t v26 = sub_18AFB07AC(20, v23, v24);
      unint64_t v28 = v27;
      sub_18AF5AF68(v23, v25);
      Data.append(_:)();
      sub_18AF5AF68(v26, v28);
      return v32;
  }
}

uint64_t sub_18AFB07AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = BYTE6(a3);
  unint64_t v4 = a3 >> 62;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  switch(v4)
  {
    case 1uLL:
      uint64_t v8 = (int)a2;
      uint64_t v7 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v7 = v3;
      break;
  }
  if (v7 < v8 || v8 > a1)
  {
    __break(1u);
    JUMPOUT(0x18AFB0814);
  }
  return Data._Representation.subscript.getter();
}

uint64_t sub_18AFB0824(char a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_18AF161EC(&qword_1E9125E90);
  unint64_t v5 = sub_18AFB0924();
  LOBYTE(v3[0]) = a1;
  sub_18AF25FCC(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)();
  return sub_18AF40A30((uint64_t)v3);
}

unint64_t sub_18AFB08D4()
{
  unint64_t result = qword_1E9125E38;
  if (!qword_1E9125E38)
  {
    type metadata accessor for SHA256();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125E38);
  }
  return result;
}

unint64_t sub_18AFB0924()
{
  unint64_t result = qword_1E9125E98;
  if (!qword_1E9125E98)
  {
    sub_18AF67604(&qword_1E9125E90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125E98);
  }
  return result;
}

BOOL static CKAsyncSerialQueue.OrderingPolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CKAsyncSerialQueue.OrderingPolicy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CKAsyncSerialQueue.OrderingPolicy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void CKAsyncSerialQueue.ordering.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 112);
}

uint64_t sub_18AFB0A1C()
{
  sub_18AF161EC(&qword_1E9125248);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  qword_1E9125258 = result;
  return result;
}

uint64_t CKAsyncSerialQueue.queueDepth.getter()
{
  swift_beginAccess();
  return *(void *)(*(void *)(v0 + 136) + 24);
}

uint64_t CKAsyncSerialQueue.__allocating_init(ordering:)(char *a1)
{
  uint64_t v2 = swift_allocObject();
  CKAsyncSerialQueue.init(ordering:)(a1);
  return v2;
}

uint64_t CKAsyncSerialQueue.init(ordering:)(char *a1)
{
  char v2 = *a1;
  swift_defaultActor_initialize();
  *(void *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = *(void *)_emptyDequeStorage.unsafeMutableAddressor();
  *(unsigned char *)(v1 + 112) = v2;
  swift_retain();
  return v1;
}

uint64_t CKAsyncSerialQueue.run<A>(_:)()
{
  sub_18AF19FAC();
  sub_18AF1A060();
  uint64_t v4 = swift_task_alloc();
  unint64_t v5 = (void *)sub_18AF16AE4(v4);
  void *v5 = v6;
  v5[1] = sub_18AF13048;
  return sub_18AFB0BE4(v3, 0, v2, v1, v0);
}

uint64_t sub_18AFB0BE4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 80) = a5;
  *(void *)(v6 + 88) = v5;
  *(void *)(v6 + 64) = a3;
  *(void *)(v6 + 72) = a4;
  *(unsigned char *)(v6 + 176) = a2;
  *(void *)(v6 + 56) = a1;
  *(void *)(v6 + 96) = *v5;
  return sub_18AF18660((uint64_t)sub_18AFB0C34, (uint64_t)v5);
}

uint64_t sub_18AFB0C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v46 = v12;
  uint64_t v13 = sub_18AF383B0();
  *(void *)(v12 + 104) = sub_18AF1BF50(&qword_1E9125160, v14, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v15 = Identifiable<>.id.getter();
  sub_18AF385E8(v15, v13);
  char v17 = v16;
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v44 = (uint64_t (*)(uint64_t))(*(void *)(v12 + 64) + **(int **)(v12 + 64));
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v12 + 112) = v18;
    *uint64_t v18 = v12;
    v18[1] = sub_18AFB10FC;
    uint64_t v19 = *(void *)(v12 + 56);
    return v44(v19);
  }
  uint64_t v21 = *(void *)(v12 + 88);
  if (*(unsigned char *)(v21 + 128))
  {
    uint64_t v22 = *(void *)(v21 + 120);
    if (!__OFADD__(v22, 1))
    {
      char v23 = *(unsigned char *)(v12 + 176);
      *(void *)(v21 + 120) = v22 + 1;
      uint64_t v24 = swift_task_alloc();
      *(void *)(v12 + 120) = v24;
      *(unsigned char *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = v22;
      *(void *)(v24 + 32) = v21;
      uint64_t v25 = swift_task_alloc();
      *(void *)(v12 + 128) = v25;
      *(unsigned char *)(v25 + 16) = v23;
      *(void *)(v25 + 24) = v21;
      *(void *)(v25 + 32) = v22;
      uint64_t v27 = sub_18AF1BF50(&qword_1E9125260, v26, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      unint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v12 + 136) = v28;
      *unint64_t v28 = v12;
      v28[1] = sub_18AFB11BC;
      uint64_t v29 = MEMORY[0x1E4FBC848] + 8;
      return MEMORY[0x1F4188148](v28, &unk_1E9126A88, v24, sub_18AFB5948, v25, v21, v27, v29, a9, a10, a11, a12);
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    swift_task_reportUnexpectedExecutor();
  }
  uint64_t v30 = *(void *)(v12 + 88);
  swift_beginAccess();
  if (*(void *)(*(void *)(v30 + 136) + 24))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(unsigned char *)(v21 + 128) = 1;
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    sub_18AF2AD34();
  }
  if (*(unsigned char *)(*(void *)(v12 + 88) + 128) == 1)
  {
    if (*(unsigned char *)(v12 + 176) == 1) {
      static Task<>.checkCancellation()();
    }
    uint64_t v31 = sub_18AF383B0();
    uint64_t v32 = sub_18AF1BC6C(v31);
    sub_18AF3660C((uint64_t)v45, v32, v33, v34, v35, v36, v37, v38, v42, v43);
    if (qword_1E9125240 == -1) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  swift_once();
LABEL_19:
  unint64_t v39 = sub_18AF38264();
  sub_18AF3395C(v39);
  sub_18AF1BF50(&qword_1E9125260, v40, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v12 + 160) = v41;
  *uint64_t v41 = v12;
  v41[1] = sub_18AFB14B0;
  sub_18AF3408C();
  sub_18AF16C18();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFB10FC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AFB11BC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF22DBC();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 88);
    uint64_t v8 = sub_18AFB1610;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 88);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = sub_18AFB12B4;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AFB12B4()
{
  uint64_t v16 = v0;
  uint64_t v1 = *(void *)(v0 + 144);
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    sub_18AF2AD34();
  }
  if (*(unsigned char *)(*(void *)(v0 + 88) + 128) != 1)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_10;
  }
  if (*(unsigned char *)(v0 + 176) == 1)
  {
    static Task<>.checkCancellation()();
    if (v1)
    {
      sub_18AF434E4();
      sub_18AF1D758();
      return v2();
    }
  }
  uint64_t v4 = sub_18AF383B0();
  uint64_t v5 = sub_18AF1BC6C(v4);
  sub_18AF3660C((uint64_t)v15, v5, v6, v7, v8, v9, v10, v11, v15[0], v15[1]);
  if (qword_1E9125240 != -1) {
    goto LABEL_14;
  }
LABEL_10:
  unint64_t v12 = sub_18AF38264();
  sub_18AF3395C(v12);
  sub_18AF1BF50(&qword_1E9125260, v13, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_18AFB14B0;
  sub_18AF3408C();
  sub_18AF16C18();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFB14B0()
{
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF22DBC();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 88);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    uint64_t v8 = sub_18AFB1674;
  }
  else {
    uint64_t v8 = sub_18AFB15B0;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AFB15B0()
{
  sub_18AF339B8();
  sub_18AF434E4();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AFB1610()
{
  sub_18AF339B8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFB1674()
{
  sub_18AF339B8();
  sub_18AF434E4();
  sub_18AF16D48();
  return v0();
}

uint64_t CKAsyncSerialQueue.runUnlessCancelled<A>(_:)()
{
  sub_18AF19FAC();
  sub_18AF1A060();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_18AF16AE4(v4);
  void *v5 = v6;
  v5[1] = sub_18AF38E00;
  return sub_18AFB0BE4(v3, 1, v2, v1, v0);
}

uint64_t CKAsyncSerialQueue.run<A>(closureSentToActorHook:closure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_18AF18660((uint64_t)sub_18AFB17A4, v6);
}

uint64_t sub_18AFB17A4()
{
  sub_18AF339B8();
  (*(void (**)(void))(v0 + 24))();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AFB5954;
  uint64_t v2 = sub_18AF33C00();
  return sub_18AFB0BE4(v2, 0, v3, v4, v5);
}

uint64_t CKAsyncSerialQueue.runUnlessCancelled<A>(closureSentToActorHook:closure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_18AF18660((uint64_t)sub_18AFB1868, v6);
}

uint64_t sub_18AFB1868()
{
  sub_18AF339B8();
  (*(void (**)(void))(v0 + 24))();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AFB1904;
  uint64_t v2 = sub_18AF33C00();
  return sub_18AFB0BE4(v2, 1, v3, v4, v5);
}

uint64_t sub_18AFB1904()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AFB19C4()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

void sub_18AFB1A20(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_18AFB4B3C();
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 40) & ~v7;
  sub_18AFB54F8((void *)(*a1 + 16), *a1 + v8);
  if (!v1 && (v9 & 1) != 0)
  {
    uint64_t v33 = v4;
    uint64_t v10 = *a1;
    uint64_t v11 = (void *)(*a1 + 16);
    uint64_t v12 = *(void *)(*a1 + 24);
    swift_retain();
    uint64_t v31 = sub_18AF5B0AC(v12);
    unint64_t v14 = v13;
    sub_18AFB4744(v11, v10 + v8, (uint64_t)&v34);
    uint64_t v15 = v35;
    if (v35 < 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    unint64_t v30 = v14;
    uint64_t v32 = v12;
    sub_18AFB55B8(v34, v35, 0, v35, v14);
    sub_18AFB5728((uint64_t)&v36, (uint64_t)v37, (uint64_t *)&unk_1E9124D58);
    sub_18AFB5728((uint64_t)v37, (uint64_t)&v38, (uint64_t *)&unk_1E9124D58);
    if (v40)
    {
      uint64_t v16 = v32;
    }
    else
    {
      uint64_t v17 = v15 + v39;
      if (__OFADD__(v15, v39))
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      uint64_t v16 = v32;
      if (v17 < v15)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      sub_18AFB55B8(v38, v39, v15, v15 + v39, v30);
      uint64_t v15 = v17;
    }
    if (v16 < v15)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    size_t v18 = v31;
    *(void *)(v31 + 16) = v15;
    swift_release();
    size_t v41 = v18;
    sub_18AFB1D08(&v41);
    size_t v19 = v41;
    uint64_t v20 = *(void *)(*a1 + 24);
    if (v20 < 0)
    {
LABEL_36:
      __break(1u);
      return;
    }
    if (v20)
    {
      uint64_t v21 = *(void *)(v41 + 16);
      if (v21)
      {
        unint64_t v22 = 0;
        uint64_t v32 = v41 + ((v7 + 32) & ~v7);
        uint64_t v23 = v20 - 1;
        uint64_t v24 = v21 - 1;
        while (v22 < *(void *)(v19 + 16))
        {
          uint64_t v25 = *(void *)(v33 + 72);
          sub_18AF1DCF4(v32 + v25 * v22, (uint64_t)v6);
          if ((int64_t)v22 >= *(void *)(*a1 + 24)) {
            goto LABEL_31;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_18AFB4B3C();
          }
          uint64_t v26 = *(void *)(*a1 + 32);
          if ((int64_t)(v22 + v26) >= *(void *)(*a1 + 16)) {
            uint64_t v27 = *(void *)(*a1 + 16);
          }
          else {
            uint64_t v27 = 0;
          }
          sub_18AFB578C((uint64_t)v6, *a1 + v8 + (v22 + v26 - v27) * v25);
          sub_18AF43838((uint64_t)v6);
          BOOL v28 = v23 == v22 || v24 == v22;
          ++v22;
          if (v28) {
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
LABEL_28:
    swift_release();
  }
}

void sub_18AFB1D08(size_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8);
  size_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    size_t v3 = sub_18AFB54D0(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_18AFB32C4(v5);
  *a1 = v3;
}

void sub_18AFB1DB0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v6 - 8);
  sub_18AF19290();
  uint64_t v9 = v8 - v7;
  if (a1)
  {
    uint64_t v10 = type metadata accessor for TaskPriority();
    sub_18AF43708(v9, 1, 1, v10);
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = a2;
    v11[5] = a3;
    swift_retain();
    sub_18AF42DB4(v9, (uint64_t)&unk_1E9126A48, (uint64_t)v11);
    swift_release();
  }
}

uint64_t sub_18AFB1E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x1F4188298](sub_18AFB1EB0, a4, 0);
}

uint64_t sub_18AFB1EB0()
{
  sub_18AF339B8();
  sub_18AFB1F08(*(void *)(v0 + 24));
  sub_18AF16D48();
  return v1();
}

uint64_t sub_18AFB1F08(uint64_t a1)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E91251B8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v6 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v37 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t *)((char *)&v33 - v9);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v33 - v12;
  unint64_t v14 = (uint64_t *)(v1 + 136);
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *(void **)(v1 + 136);
  uint64_t v17 = v16[3];
  if (!v17) {
    return result;
  }
  uint64_t v34 = v4;
  uint64_t v35 = v3;
  unint64_t v33 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  size_t v18 = (char *)v16 + v33;
  uint64_t result = swift_retain();
  uint64_t v19 = 0;
  while (1)
  {
    if (v19 >= v17)
    {
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v20 = v16[4];
    uint64_t v21 = v19 + v20 >= v16[2] ? v16[2] : 0;
    uint64_t v22 = *(void *)(v6 + 72);
    sub_18AF1DCF4((uint64_t)&v18[(v19 + v20 - v21) * v22], (uint64_t)v13);
    sub_18AF43950((uint64_t)v13, (uint64_t)v10);
    uint64_t v23 = *v10;
    uint64_t result = sub_18AF43838((uint64_t)v10);
    if (v23 == a1) {
      break;
    }
    ++v19;
    uint64_t v17 = v16[3];
    if (v19 == v17) {
      return swift_release();
    }
  }
  swift_release();
  swift_beginAccess();
  uint64_t result = *v14;
  if (v19 >= *(void *)(*v14 + 24))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    uint64_t result = sub_18AFB4B3C();
  }
  uint64_t v24 = *v14;
  if (v19 >= *(void *)(*v14 + 24)) {
    goto LABEL_21;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (v25 + v19 >= *(void *)(v24 + 16)) {
    uint64_t v26 = *(void *)(v24 + 16);
  }
  else {
    uint64_t v26 = 0;
  }
  unint64_t v27 = v24 + v33;
  uint64_t v28 = v37;
  sub_18AF1DCF4(v24 + v33 + (v25 - v26 + v19) * v22, v37);
  swift_retain();
  sub_18AFB4C2C(v19, v19 + 1, (uint64_t *)(v24 + 16), v27);
  swift_endAccess();
  swift_release();
  uint64_t v29 = v35;
  uint64_t v30 = v34;
  uint64_t v31 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v38, v28 + *(int *)(v36 + 24), v35);
  type metadata accessor for CancellationError();
  sub_18AF1BF50(&qword_1E9126A50, 255, MEMORY[0x1E4FBCF50]);
  uint64_t v32 = swift_allocError();
  CancellationError.init()();
  uint64_t v39 = v32;
  CheckedContinuation.resume(throwing:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
  return sub_18AF43838(v28);
}

uint64_t CKAsyncSerialQueue.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CKAsyncSerialQueue.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

unint64_t sub_18AFB232C()
{
  unint64_t result = qword_1E9126A38;
  if (!qword_1E9126A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1E9126A38);
  }
  return result;
}

uint64_t sub_18AFB2378()
{
  return MEMORY[0x1E4FBB060];
}

uint64_t sub_18AFB2384@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CKAsyncSerialQueue()
{
  return self;
}

uint64_t method lookup function for CKAsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKAsyncSerialQueue);
}

uint64_t dispatch thunk of CKAsyncSerialQueue.__allocating_init(ordering:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

unsigned char *storeEnumTagSinglePayload for CKAsyncSerialQueue.OrderingPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AFB24CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKAsyncSerialQueue.OrderingPolicy()
{
  return &type metadata for CKAsyncSerialQueue.OrderingPolicy;
}

uint64_t *sub_18AFB2504(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)v4 + v11;
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_18AF161EC(&qword_1E91251B8);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

void *sub_18AFB262C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18AF161EC(&qword_1E91251B8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

void *sub_18AFB2704(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18AF161EC(&qword_1E91251B8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void *sub_18AFB27DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18AF161EC(&qword_1E91251B8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_18AFB28B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TaskPriority();
  sub_18AF16EC0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(int *)(a3 + 20);
  }
  else
  {
    uint64_t v8 = sub_18AF161EC(&qword_1E91251B8);
    uint64_t v9 = *(int *)(a3 + 24);
  }

  return sub_18AF436E0(a1 + v9, a2, v8);
}

uint64_t sub_18AFB2934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for TaskPriority();
  sub_18AF16EC0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(int *)(a4 + 20);
  }
  else
  {
    uint64_t v10 = sub_18AF161EC(&qword_1E91251B8);
    uint64_t v11 = *(int *)(a4 + 24);
  }

  return sub_18AF43708(a1 + v11, a2, a2, v10);
}

void sub_18AFB29BC()
{
  type metadata accessor for TaskPriority();
  if (v0 <= 0x3F)
  {
    sub_18AFB2A94();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_18AFB2A94()
{
  if (!qword_1E91251A8)
  {
    sub_18AF67604(&qword_1E9125660);
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E91251A8);
    }
  }
}

uint64_t sub_18AFB2B04()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18AFB2B44()
{
  sub_18AF19FAC();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_18AF16AE4(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_18AF38E00;
  return sub_18AFB1E90(v2, v3, v4, v6, v5);
}

void sub_18AFB2BF8()
{
  sub_18AF41020();
  if (v4)
  {
    sub_18AF3386C();
    if (v5 != v6)
    {
      sub_18AF339D4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  sub_18AF306DC();
  if (v3)
  {
    sub_18AF161EC(&qword_1E9126AA0);
    uint64_t v7 = (void *)sub_18AF19FB8();
    size_t v8 = j__malloc_size(v7);
    v7[2] = v2;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 32);
  }
  uint64_t v9 = (char *)sub_18AF30C0C();
  if (v1)
  {
    sub_18AF665A8(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_18AFA7774((uint64_t)v9, v10);
  }
  swift_release();
}

void sub_18AFB2CAC()
{
}

void sub_18AFB2CE0()
{
  sub_18AF41020();
  if (v3)
  {
    sub_18AF3386C();
    if (v4 != v5)
    {
      sub_18AF339D4();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  sub_18AF306DC();
  if (v2)
  {
    sub_18AF161EC(&qword_1E9124D50);
    char v6 = (const void *)swift_allocObject();
    size_t v7 = j__malloc_size(v6);
    sub_18AF3AA14(v7);
  }
  size_t v8 = (char *)sub_18AF30C0C();
  if (v1)
  {
    sub_18AF66608(v8, v9, v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_18AFA78E0();
  }
  swift_release();
}

void sub_18AFB2D98()
{
}

void sub_18AFB2DCC()
{
}

void sub_18AFB2E00()
{
}

void sub_18AFB2E34()
{
  sub_18AF41020();
  if (v3)
  {
    sub_18AF3386C();
    if (v4 != v5)
    {
      sub_18AF339D4();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  sub_18AF306DC();
  if (v2)
  {
    sub_18AF161EC(&qword_1E9124E68);
    char v6 = (const void *)swift_allocObject();
    size_t v7 = j__malloc_size(v6);
    sub_18AF3AA14(v7);
  }
  size_t v8 = (char *)sub_18AF30C0C();
  if (v1)
  {
    sub_18AF66674(v8, v9, v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_18AFA7B08();
  }
  swift_release();
}

void sub_18AFB2EEC()
{
}

void sub_18AFB2F20()
{
}

void sub_18AFB2F54()
{
}

void sub_18AFB2F88()
{
}

void sub_18AFB2FBC()
{
}

void sub_18AFB2FF0()
{
}

void sub_18AFB3024()
{
  sub_18AF33E10();
  if (v6)
  {
    sub_18AF3386C();
    if (v8 != v9)
    {
      sub_18AF339D4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_18AF161EC(v5);
    uint64_t v12 = (void *)sub_18AF19FB8();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

size_t sub_18AFB30F4(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    size_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_18AF161EC(&qword_1E9126A70);
  uint64_t v10 = *(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  size_t v13 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_18AF667CC(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_18AFA7DD0(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

void sub_18AFB3290()
{
}

void sub_18AFB32C4(uint64_t *a1)
{
  uint64_t v141 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v141);
  uint64_t v131 = (uint64_t)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v142 = (uint64_t)&v125 - v6;
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v139 = (uint64_t)&v125 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v138 = (uint64_t)&v125 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int v11 = _minimumMergeRunLength(_:)(v10);
  if (v11 >= v10)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10) {
        sub_18AFB3C0C(0, v10, 1, a1);
      }
      return;
    }
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  Swift::Int v12 = v11;
  uint64_t v135 = v1;
  v140 = a1;
  uint64_t v128 = sub_18AF5B0AC(v10 / 2);
  unint64_t v133 = v13;
  if (v10 > 0)
  {
    Swift::Int v127 = v12;
    Swift::Int v14 = 0;
    uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
    Swift::Int v16 = v10;
    Swift::Int v129 = v10;
    while (1)
    {
      Swift::Int v17 = v14;
      Swift::Int v18 = v14 + 1;
      if (v14 + 1 >= v16)
      {
        ++v14;
      }
      else
      {
        uint64_t v19 = *v140;
        uint64_t v20 = *(void *)(v134 + 72);
        uint64_t v21 = v138;
        sub_18AF1DCF4(*v140 + v20 * v18, v138);
        uint64_t v22 = v19 + v20 * v14;
        uint64_t v23 = v139;
        sub_18AF1DCF4(v22, v139);
        LODWORD(v137) = static TaskPriority.> infix(_:_:)();
        sub_18AF43838(v23);
        sub_18AF43838(v21);
        Swift::Int v14 = v17 + 2;
        uint64_t v136 = v19;
        uint64_t v143 = v20;
        if (v17 + 2 < v16)
        {
          Swift::Int v24 = v16;
          uint64_t v132 = v17;
          uint64_t v25 = v20 * v18;
          uint64_t v26 = v19;
          uint64_t v27 = v20 * v14;
          while (1)
          {
            Swift::Int v28 = v14;
            uint64_t v29 = v138;
            sub_18AF1DCF4(v26 + v27, v138);
            uint64_t v30 = v139;
            sub_18AF1DCF4(v26 + v25, v139);
            int v31 = static TaskPriority.> infix(_:_:)();
            sub_18AF43838(v30);
            sub_18AF43838(v29);
            if ((v137 ^ v31)) {
              break;
            }
            Swift::Int v14 = v28 + 1;
            v26 += v143;
            if (v28 + 1 >= v24)
            {
              Swift::Int v16 = v24;
              Swift::Int v14 = v24;
              Swift::Int v17 = v132;
              goto LABEL_12;
            }
          }
          Swift::Int v14 = v28;
          Swift::Int v17 = v132;
          Swift::Int v16 = v24;
        }
LABEL_12:
        if (v137)
        {
          if (v14 < v17) {
            goto LABEL_142;
          }
          if (v17 < v14)
          {
            Swift::Int v137 = v16;
            v126 = v15;
            uint64_t v32 = 0;
            Swift::Int v33 = v17;
            uint64_t v34 = v143;
            uint64_t v35 = v143 * (v14 - 1);
            Swift::Int v36 = v14 * v143;
            Swift::Int v37 = v33;
            uint64_t v132 = v33;
            uint64_t v38 = v33 * v143;
            uint64_t v39 = v140;
            do
            {
              if (v37 != v14 + v32 - 1)
              {
                uint64_t v40 = v136;
                if (!v136) {
                  goto LABEL_148;
                }
                Swift::Int v41 = v14;
                unint64_t v42 = v136 + v38;
                uint64_t v43 = v136 + v35;
                sub_18AF43950(v136 + v38, v131);
                if (v38 < v35 || v42 >= v40 + v36)
                {
                  swift_arrayInitWithTakeFrontToBack();
                  uint64_t v34 = v143;
                }
                else
                {
                  uint64_t v34 = v143;
                  if (v38 != v35) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                sub_18AF43950(v131, v43);
                uint64_t v39 = v140;
                Swift::Int v14 = v41;
              }
              ++v37;
              --v32;
              v35 -= v34;
              v36 -= v34;
              v38 += v34;
            }
            while (v37 < v14 + v32);
            uint64_t v15 = v126;
            Swift::Int v17 = v132;
            Swift::Int v16 = v137;
            goto LABEL_30;
          }
        }
      }
      uint64_t v39 = v140;
LABEL_30:
      if (v14 < v16)
      {
        if (__OFSUB__(v14, v17)) {
          goto LABEL_139;
        }
        if (v14 - v17 < v127)
        {
          if (__OFADD__(v17, v127)) {
            goto LABEL_143;
          }
          if (v17 + v127 >= v16) {
            Swift::Int v45 = v16;
          }
          else {
            Swift::Int v45 = v17 + v127;
          }
          if (v45 < v17)
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
            return;
          }
          if (v14 != v45)
          {
            uint64_t v132 = v17;
            v126 = v15;
            uint64_t v46 = *(void *)(v134 + 72);
            uint64_t v47 = v46 * (v14 - 1);
            uint64_t v136 = v46;
            Swift::Int v48 = v14 * v46;
            Swift::Int v130 = v45;
            do
            {
              uint64_t v49 = 0;
              uint64_t v50 = v132;
              Swift::Int v137 = v14;
              while (1)
              {
                uint64_t v143 = v50;
                uint64_t v51 = *v39;
                Swift::Int v52 = v48;
                uint64_t v53 = v48 + v49 + *v39;
                uint64_t v54 = v138;
                uint64_t v55 = v39;
                sub_18AF1DCF4(v53, v138);
                uint64_t v56 = v47;
                uint64_t v57 = v47 + v49 + v51;
                uint64_t v58 = v139;
                sub_18AF1DCF4(v57, v139);
                LOBYTE(v51) = static TaskPriority.> infix(_:_:)();
                sub_18AF43838(v58);
                sub_18AF43838(v54);
                if ((v51 & 1) == 0) {
                  break;
                }
                uint64_t v59 = *v55;
                if (!*v55) {
                  goto LABEL_146;
                }
                Swift::Int v48 = v52;
                uint64_t v47 = v56;
                uint64_t v60 = v59 + v56 + v49;
                sub_18AF43950(v59 + v52 + v49, v142);
                swift_arrayInitWithTakeFrontToBack();
                sub_18AF43950(v142, v60);
                Swift::Int v61 = v137;
                v49 -= v136;
                uint64_t v50 = v143 + 1;
                uint64_t v39 = v140;
                if (v137 == v143 + 1) {
                  goto LABEL_46;
                }
              }
              Swift::Int v61 = v137;
              uint64_t v47 = v56;
              Swift::Int v48 = v52;
              uint64_t v39 = v55;
LABEL_46:
              Swift::Int v14 = v61 + 1;
              v47 += v136;
              v48 += v136;
            }
            while (v14 != v130);
            Swift::Int v14 = v130;
            uint64_t v15 = v126;
            Swift::Int v17 = v132;
          }
        }
      }
      if (v14 < v17) {
        goto LABEL_138;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AFB420C();
        uint64_t v15 = v114;
      }
      unint64_t v62 = v15[2];
      unint64_t v63 = v62 + 1;
      if (v62 >= v15[3] >> 1)
      {
        sub_18AFB420C();
        uint64_t v15 = v115;
      }
      uint64_t v15[2] = v63;
      uint64_t v64 = v15 + 4;
      uint64_t v65 = &v15[2 * v62 + 4];
      *uint64_t v65 = v17;
      v65[1] = v14;
      if (v62)
      {
        while (1)
        {
          unint64_t v66 = v63 - 1;
          if (v63 >= 4)
          {
            uint64_t v71 = &v64[2 * v63];
            uint64_t v72 = *(v71 - 8);
            uint64_t v73 = *(v71 - 7);
            BOOL v77 = __OFSUB__(v73, v72);
            uint64_t v74 = v73 - v72;
            if (v77) {
              goto LABEL_123;
            }
            uint64_t v76 = *(v71 - 6);
            uint64_t v75 = *(v71 - 5);
            BOOL v77 = __OFSUB__(v75, v76);
            uint64_t v69 = v75 - v76;
            char v70 = v77;
            if (v77) {
              goto LABEL_124;
            }
            unint64_t v78 = v63 - 2;
            uint64_t v79 = &v64[2 * v63 - 4];
            uint64_t v81 = *v79;
            uint64_t v80 = v79[1];
            BOOL v77 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v77) {
              goto LABEL_125;
            }
            BOOL v77 = __OFADD__(v69, v82);
            uint64_t v83 = v69 + v82;
            if (v77) {
              goto LABEL_127;
            }
            if (v83 >= v74)
            {
              uint64_t v101 = &v64[2 * v66];
              uint64_t v103 = *v101;
              uint64_t v102 = v101[1];
              BOOL v77 = __OFSUB__(v102, v103);
              uint64_t v104 = v102 - v103;
              if (v77) {
                goto LABEL_133;
              }
              BOOL v94 = v69 < v104;
              goto LABEL_85;
            }
          }
          else
          {
            if (v63 != 3)
            {
              uint64_t v95 = v15[4];
              uint64_t v96 = v15[5];
              BOOL v77 = __OFSUB__(v96, v95);
              uint64_t v88 = v96 - v95;
              char v89 = v77;
              goto LABEL_79;
            }
            uint64_t v68 = v15[4];
            uint64_t v67 = v15[5];
            BOOL v77 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            char v70 = v77;
          }
          if (v70) {
            goto LABEL_126;
          }
          unint64_t v78 = v63 - 2;
          uint64_t v84 = &v64[2 * v63 - 4];
          uint64_t v86 = *v84;
          uint64_t v85 = v84[1];
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v88 = v85 - v86;
          char v89 = v87;
          if (v87) {
            goto LABEL_128;
          }
          uint64_t v90 = &v64[2 * v66];
          uint64_t v92 = *v90;
          uint64_t v91 = v90[1];
          BOOL v77 = __OFSUB__(v91, v92);
          uint64_t v93 = v91 - v92;
          if (v77) {
            goto LABEL_130;
          }
          if (__OFADD__(v88, v93)) {
            goto LABEL_132;
          }
          if (v88 + v93 >= v69)
          {
            BOOL v94 = v69 < v93;
LABEL_85:
            if (v94) {
              unint64_t v66 = v78;
            }
            goto LABEL_87;
          }
LABEL_79:
          if (v89) {
            goto LABEL_129;
          }
          uint64_t v97 = &v64[2 * v66];
          uint64_t v99 = *v97;
          uint64_t v98 = v97[1];
          BOOL v77 = __OFSUB__(v98, v99);
          uint64_t v100 = v98 - v99;
          if (v77) {
            goto LABEL_131;
          }
          if (v100 < v88) {
            goto LABEL_96;
          }
LABEL_87:
          unint64_t v105 = v66 - 1;
          if (v66 - 1 >= v63)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
          if (!*v140) {
            goto LABEL_147;
          }
          Swift::Int v106 = v14;
          uint64_t v107 = v15;
          uint64_t v108 = &v64[2 * v105];
          uint64_t v109 = *v108;
          uint64_t v110 = &v64[2 * v66];
          uint64_t v111 = v110[1];
          uint64_t v112 = v135;
          sub_18AFB3E54(*v140 + *(void *)(v134 + 72) * *v108, *v140 + *(void *)(v134 + 72) * *v110, *v140 + *(void *)(v134 + 72) * v111, v133);
          uint64_t v135 = v112;
          if (v112)
          {
            Swift::Int v10 = v129;
LABEL_102:
            swift_bridgeObjectRelease();
            if (v10 >= -1)
            {
              *(void *)(v128 + 16) = 0;
              swift_bridgeObjectRelease();
              return;
            }
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          if (v111 < v109) {
            goto LABEL_120;
          }
          if (v66 > v107[2]) {
            goto LABEL_121;
          }
          *uint64_t v108 = v109;
          v64[2 * v105 + 1] = v111;
          unint64_t v113 = v107[2];
          if (v66 >= v113) {
            goto LABEL_122;
          }
          uint64_t v15 = v107;
          unint64_t v63 = v113 - 1;
          memmove(&v64[2 * v66], v110 + 2, 16 * (v113 - 1 - v66));
          v107[2] = v113 - 1;
          Swift::Int v14 = v106;
          if (v113 <= 2) {
            goto LABEL_96;
          }
        }
      }
      unint64_t v63 = 1;
LABEL_96:
      Swift::Int v16 = v140[1];
      Swift::Int v10 = v129;
      if (v14 >= v16) {
        goto LABEL_105;
      }
    }
  }
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v63 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_105:
  if (v63 >= 2)
  {
    uint64_t v116 = *v140;
    while (1)
    {
      unint64_t v117 = v63 - 2;
      if (v63 < 2) {
        break;
      }
      if (!v116) {
        goto LABEL_149;
      }
      uint64_t v118 = v15;
      uint64_t v119 = v15[2 * v117 + 4];
      uint64_t v120 = v15[2 * v63 + 3];
      uint64_t v121 = v135;
      sub_18AFB3E54(v116 + *(void *)(v134 + 72) * v119, v116 + *(void *)(v134 + 72) * v15[2 * v63 + 2], v116 + *(void *)(v134 + 72) * v120, v133);
      uint64_t v135 = v121;
      if (v121) {
        goto LABEL_102;
      }
      if (v120 < v119) {
        goto LABEL_135;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AFB42D8();
        uint64_t v118 = v124;
      }
      if (v117 >= v118[2]) {
        goto LABEL_136;
      }
      v122 = &v118[2 * v117 + 4];
      void *v122 = v119;
      v122[1] = v120;
      unint64_t v123 = v118[2];
      if (v63 > v123) {
        goto LABEL_137;
      }
      memmove(&v118[2 * v63 + 2], &v118[2 * v63 + 4], 16 * (v123 - v63));
      v118[2] = v123 - 1;
      unint64_t v63 = v123 - 1;
      uint64_t v15 = v118;
      if (v123 <= 2) {
        goto LABEL_116;
      }
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
LABEL_116:
  swift_bridgeObjectRelease();
  if (v10 < -1) {
    goto LABEL_145;
  }
  *(void *)(v128 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_18AFB3C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v24 = a1;
  uint64_t v27 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v7 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v28 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  Swift::Int v11 = (char *)&v22 - v10;
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v26 = a3;
  uint64_t v23 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v30 = v16 * (v26 - 1);
    uint64_t v25 = v16;
    uint64_t v29 = v16 * v26;
    while (2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v24;
      do
      {
        uint64_t v19 = *a4;
        sub_18AF1DCF4(v29 + v17 + *a4, (uint64_t)v15);
        sub_18AF1DCF4(v30 + v17 + v19, (uint64_t)v11);
        LOBYTE(v19) = static TaskPriority.> infix(_:_:)();
        sub_18AF43838((uint64_t)v11);
        uint64_t result = sub_18AF43838((uint64_t)v15);
        if ((v19 & 1) == 0) {
          break;
        }
        uint64_t v20 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        uint64_t v21 = v20 + v30 + v17;
        sub_18AF43950(v20 + v29 + v17, v28);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_18AF43950(v28, v21);
        v17 -= v25;
        ++v18;
      }
      while (v26 != v18);
      v30 += v25;
      v29 += v25;
      if (++v26 != v23) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_18AFB3E54(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v51 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v8 = MEMORY[0x1F4188790](v51);
  uint64_t v50 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (uint64_t)&v44 - v10;
  uint64_t v12 = *(void *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  int64_t v13 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_75;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_76;
  }
  uint64_t v17 = v13 / v12;
  uint64_t v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    sub_18AF667CC(a2, v15 / v12, a4);
    uint64_t v28 = v18 * v12;
    unint64_t v19 = a4 + v18 * v12;
    if (v28 < 1 || a1 >= a2) {
      goto LABEL_69;
    }
    unint64_t v47 = a4;
    uint64_t v48 = -v12;
    uint64_t v45 = v12;
    unint64_t v46 = a1;
    while (1)
    {
      unint64_t v30 = a3;
      uint64_t v31 = v48;
      uint64_t v32 = v49;
      a3 += v48;
      unint64_t v33 = v19 + v48;
      sub_18AF1DCF4(v19 + v48, v49);
      unint64_t v34 = a2 + v31;
      uint64_t v35 = a2 + v31;
      uint64_t v36 = v50;
      sub_18AF1DCF4(v35, v50);
      char v37 = static TaskPriority.> infix(_:_:)();
      sub_18AF43838(v36);
      sub_18AF43838(v32);
      if (v37)
      {
        if (v30 >= a2 && a3 < a2)
        {
          unint64_t v40 = v46;
          a4 = v47;
          if (v30 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v34;
          uint64_t v12 = v45;
          goto LABEL_65;
        }
        swift_arrayInitWithTakeFrontToBack();
        a2 = v34;
      }
      else
      {
        if (v30 >= v19 && a3 < v19)
        {
          a4 = v47;
          if (v30 != v19) {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v19 = v33;
          goto LABEL_64;
        }
        swift_arrayInitWithTakeFrontToBack();
        unint64_t v19 = v33;
      }
      a4 = v47;
LABEL_64:
      uint64_t v12 = v45;
      unint64_t v40 = v46;
LABEL_65:
      if (v19 <= a4 || a2 <= v40) {
        goto LABEL_69;
      }
    }
  }
  sub_18AF667CC(a1, v13 / v12, a4);
  unint64_t v19 = a4 + v17 * v12;
  if (v17 * v12 >= 1 && a2 < a3)
  {
    do
    {
      uint64_t v21 = v49;
      sub_18AF1DCF4(a2, v49);
      uint64_t v22 = v50;
      sub_18AF1DCF4(a4, v50);
      char v23 = static TaskPriority.> infix(_:_:)();
      sub_18AF43838(v22);
      sub_18AF43838(v21);
      if (v23)
      {
        unint64_t v24 = a2 + v12;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        if (a1 < a4 || a1 >= a4 + v12)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v24 = a2;
        a4 += v12;
      }
      a1 += v12;
      BOOL v27 = a4 >= v19 || v24 >= a3;
      a2 = v24;
    }
    while (!v27);
  }
  a2 = a1;
LABEL_69:
  int64_t v42 = v19 - a4;
  if (v12 != -1 || v42 != 0x8000000000000000)
  {
    sub_18AF667CC(a4, v42 / v12, a2);
    return;
  }
LABEL_77:
  __break(1u);
}

void sub_18AFB420C()
{
  sub_18AF41020();
  if (v3)
  {
    sub_18AF3386C();
    if (v5 != v6)
    {
      sub_18AF339D4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v4 = v2;
  }
  uint64_t v7 = *((void *)v0 + 2);
  if (v4 <= v7) {
    uint64_t v8 = *((void *)v0 + 2);
  }
  else {
    uint64_t v8 = v4;
  }
  if (v8)
  {
    sub_18AF161EC(&qword_1E9126A68);
    uint64_t v9 = (char *)sub_18AF19FB8();
    j__malloc_size(v9);
    sub_18AF33E84();
    *((void *)v9 + 2) = v7;
    *((void *)v9 + 3) = v10;
  }
  else
  {
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v11 = v9 + 32;
  uint64_t v12 = v0 + 32;
  if (v1)
  {
    if (v9 != v0 || &v12[16 * v7] <= v11) {
      memmove(v11, v12, 16 * v7);
    }
    *((void *)v0 + 2) = 0;
  }
  else
  {
    memcpy(v11, v12, 16 * v7);
  }
  swift_bridgeObjectRelease();
}

void sub_18AFB42D8()
{
}

uint64_t sub_18AFB42EC(Swift::Int a1, char a2)
{
  char v3 = v2;
  uint64_t v4 = *v2;
  char v5 = (Swift::Int *)(*v2 + 16);
  Swift::Int v6 = *v5;
  if (*v5 >= a1)
  {
    uint64_t v15 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8) + 80);
    sub_18AF161EC((uint64_t *)&unk_1E9125170);
    uint64_t v14 = swift_allocObject();
    long long v16 = *(_OWORD *)(v4 + 24);
    *(void *)(v14 + 16) = v6;
    *(_OWORD *)(v14 + 24) = v16;
    if ((uint64_t)v16 >= 1) {
      sub_18AFB49A8(v14 + 16, v14 + ((v15 + 40) & ~v15), v5, v4 + ((v15 + 40) & ~v15));
    }
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v11 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
    Deque._Storage._growCapacity(to:linearly:)(a1, a2 & 1);
    uint64_t v12 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80);
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v13 = *(void *)(v10 + 24);
      sub_18AF161EC((uint64_t *)&unk_1E9125170);
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = sub_18AFB46A8();
      *(void *)(v14 + 24) = v13;
      *(void *)(v14 + 32) = 0;
      if (v13 >= 1)
      {
        swift_retain();
        sub_18AFB4578(v14 + 16, v14 + ((v12 + 40) & ~v12), (void *)(v10 + 16), v10 + ((v12 + 40) & ~v12));
        *(void *)(v10 + 24) = 0;
        swift_release();
      }
    }
    else
    {
      sub_18AF161EC((uint64_t *)&unk_1E9125170);
      uint64_t v14 = swift_allocObject();
      uint64_t v17 = sub_18AFB46A8();
      uint64_t v18 = *(void *)(v10 + 24);
      *(void *)(v14 + 16) = v17;
      *(void *)(v14 + 24) = v18;
      *(void *)(v14 + 32) = 0;
      if (v18 >= 1) {
        sub_18AFB4804(v14 + 16, v14 + ((v12 + 40) & ~v12), (void *)(v10 + 16), v10 + ((v12 + 40) & ~v12));
      }
    }
  }
  uint64_t result = swift_release();
  *char v3 = v14;
  return result;
}

uint64_t sub_18AFB4538(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (a2 < 0)
  {
LABEL_7:
    if ((result & 0x8000000000000000) == 0) {
      return result;
    }
    BOOL v4 = __OFADD__(result, *a3);
    result += *a3;
    if (!v4) {
      return result;
    }
LABEL_11:
    __break(1u);
    return result;
  }
  BOOL v4 = __OFSUB__(result, *a3);
  if (result >= *a3)
  {
    result -= *a3;
    if (v4)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  return result;
}

void sub_18AFB4578(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = a3[1];
  uint64_t v9 = *(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8);
  if (v5 < v8)
  {
    uint64_t v10 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      uint64_t v11 = v5;
      unint64_t v12 = a4;
      goto LABEL_6;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v8;
LABEL_6:
  BOOL v13 = v5 < v8;
  uint64_t v14 = *(void *)(v9 + 72);
  BOOL v15 = v10 != 0;
  BOOL v16 = v13 && v15;
  if (v13 && v15) {
    unint64_t v17 = v12;
  }
  else {
    unint64_t v17 = 0;
  }
  if (v13 && v15) {
    uint64_t v18 = v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v11 >= 1)
  {
    if (a4)
    {
      sub_18AF667CC(a4 + v14 * v4, v11, a2);
      goto LABEL_16;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = 0;
LABEL_16:
  if (!v16 || v18 <= 0) {
    return;
  }
  if (!v17)
  {
LABEL_23:
    __break(1u);
    return;
  }
  sub_18AF667CC(v17, v18, a2 + v14 * v11);
}

uint64_t sub_18AFB46A8()
{
  size_t v1 = j__malloc_size(v0);
  uint64_t v2 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t result = v2 - 8;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 72);
  if (v6)
  {
    int64_t v7 = v1 - ((v5 + 40) & ~v5);
    if (v6 != -1 || v7 != 0x8000000000000000) {
      return v7 / v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_18AFB4744@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result[2];
  uint64_t v5 = *result - v4;
  if (__OFSUB__(*result, v4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = result[1];
    uint64_t v8 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t result = (void *)(v8 - 8);
    uint64_t v9 = v10;
    if (v5 >= v7)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = v7;
LABEL_6:
      *(void *)a3 = a2 + *(void *)(v9 + 72) * v4;
      *(void *)(a3 + 8) = v13;
      *(void *)(a3 + 16) = v11;
      *(void *)(a3 + 24) = v12;
      *(unsigned char *)(a3 + 32) = v5 >= v7;
      return result;
    }
    uint64_t v12 = v7 - v5;
    if (!__OFSUB__(v7, v5))
    {
      uint64_t v13 = v5;
      uint64_t v11 = a2;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_18AFB4804(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = a3[1];
  uint64_t result = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  if (v5 < v8)
  {
    uint64_t v10 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      uint64_t v11 = v5;
      unint64_t v12 = a4;
      goto LABEL_6;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v8;
LABEL_6:
  uint64_t v13 = *(void *)(*(void *)(result - 8) + 72);
  if (v11 < 1)
  {
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  if (!a4)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v14 = a4 + v13 * v4;
  if (v14 < a2 + v13 * v11 && v14 + v13 * v11 > a2) {
    goto LABEL_30;
  }
  uint64_t result = swift_arrayInitWithCopy();
LABEL_14:
  if (v5 >= v8 || v10 < 1) {
    return result;
  }
  if (!v12)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = a2 + v13 * v11;
  if (v17 + v13 * v10 > v12 && v17 < v12 + v13 * v10) {
    goto LABEL_30;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_18AFB49A8(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = a3[1];
  uint64_t result = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  if (v5 < v8)
  {
    uint64_t v10 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      uint64_t v11 = v5;
      unint64_t v12 = a4;
      goto LABEL_6;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v8;
LABEL_6:
  uint64_t v13 = *(void *)(*(void *)(result - 8) + 72);
  if (v11 < 1) {
    goto LABEL_14;
  }
  if (!a4)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v14 = a4 + v13 * v4;
  unint64_t v15 = a2 + v13 * v4;
  if (v14 < v15 + v13 * v11 && v15 < v14 + v13 * v11) {
    goto LABEL_29;
  }
  uint64_t result = swift_arrayInitWithCopy();
LABEL_14:
  if (v5 < v8 && v10 >= 1)
  {
    if (v12)
    {
      if (a2 + v13 * v10 <= v12 || v12 + v13 * v10 <= a2) {
        return swift_arrayInitWithCopy();
      }
LABEL_29:
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_18AFB4B3C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  sub_18AF161EC((uint64_t *)&unk_1E9125170);
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 24);
  *(void *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v6;
  if ((uint64_t)v6 >= 1) {
    sub_18AFB49A8(v5 + 16, v5 + ((v4 + 40) & ~v4), (void *)(v1 + 16), v1 + ((v4 + 40) & ~v4));
  }
  uint64_t result = swift_release();
  *uint64_t v0 = v5;
  return result;
}

uint64_t sub_18AFB4C2C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  sub_18AFB4D38(a1, a2, a3, a4, (uint64_t)&v11);
  char v8 = v14 | (v13 == 0);
  if (v14 & 1 | (v13 == 0)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v12;
  }
  long long v15 = v11;
  sub_18AFB5728((uint64_t)&v15, (uint64_t)v16, &qword_1E9126A58);
  sub_18AFB5728((uint64_t)v16, (uint64_t)&v17, &qword_1E9126A58);
  if (v17)
  {
    type metadata accessor for CKAsyncSerialQueue.WaitContext();
    swift_arrayDestroy();
  }
  if (!(v8 & 1 | (v9 == 0)))
  {
    type metadata accessor for CKAsyncSerialQueue.WaitContext();
    swift_arrayDestroy();
  }
  return sub_18AFB4E18(a1, a2, a3, a4);
}

uint64_t sub_18AFB4D38@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = v6 + result;
  uint64_t v8 = *a3;
  if (v6 + result >= *a3) {
    uint64_t v9 = *a3;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v6 + a2;
  if (v10 >= v8) {
    uint64_t v11 = *a3;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = v7 - v9;
    uint64_t v15 = v10 - v11;
    if (v12) {
      BOOL v16 = v14 < v15;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = v16;
    uint64_t v18 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
    uint64_t v20 = *(void *)(v18 - 8);
    uint64_t result = v18 - 8;
    uint64_t v19 = v20;
    if (v17 == 1)
    {
      uint64_t v21 = 0;
      uint64_t v15 = 0;
LABEL_18:
      *(void *)a5 = a4 + *(void *)(v19 + 72) * v14;
      *(void *)(a5 + 8) = v12;
      *(void *)(a5 + 16) = v21;
      *(void *)(a5 + 24) = v15;
      *(unsigned char *)(a5 + 32) = v17;
      return result;
    }
    uint64_t v12 = v8 - v14;
    if (!__OFSUB__(v8, v14))
    {
      uint64_t v21 = a4;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_18AFB4E18(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v4 < 1) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v8 = a3[1];
  uint64_t v7 = a3[2];
  uint64_t v9 = *a3;
  if (v7 + result >= *a3) {
    uint64_t v10 = *a3;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v7 + a2 >= v9) {
    uint64_t v11 = *a3;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v8 - a2;
  if (__OFSUB__(v8, a2)) {
    goto LABEL_84;
  }
  uint64_t v14 = v7 + result - v10;
  uint64_t v15 = v7 + a2 - v11;
  uint64_t result = a3[2];
  if (v12 > v6)
  {
    uint64_t result = sub_18AFB4538(result, v4, a3);
    uint64_t v12 = result;
    if (!v6) {
      goto LABEL_69;
    }
    if (v15 <= 0) {
      uint64_t v16 = v9;
    }
    else {
      uint64_t v16 = v15;
    }
    if (v14 <= 0) {
      uint64_t v17 = v9;
    }
    else {
      uint64_t v17 = v14;
    }
    if (v7 >= v17)
    {
      if (v16 < result)
      {
        if (v14 > 0)
        {
          uint64_t v32 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
          sub_18AF667CC(a4, v14, a4 + *(void *)(*(void *)(v32 - 8) + 72) * v4);
          sub_18AFB4538(0, v14, a3);
          sub_18AFB4538(v4, v14, a3);
        }
        uint64_t v14 = *a3 - v4;
        uint64_t v33 = *(void *)(*(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8) + 72);
        sub_18AF667CC(a4 + v33 * v14, v4, a4);
        sub_18AFB4538(v14, v4, a3);
        uint64_t result = sub_18AFB4538(0, v4, a3);
        BOOL v19 = __OFSUB__(v6, v15);
        v6 -= v15;
        if (v19) {
          goto LABEL_89;
        }
        if (v6 < 1) {
          goto LABEL_69;
        }
        uint64_t v14 = a3[2];
        unint64_t v34 = a4 + v33 * v12;
        unint64_t v35 = a4 + v14 * v33;
        goto LABEL_67;
      }
      if (__OFSUB__(0, v14))
      {
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      if (v14 > 0)
      {
        v15 -= v14;
        uint64_t v43 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
        sub_18AF667CC(a4, v14, a4 + *(void *)(*(void *)(v43 - 8) + 72) * v15);
        sub_18AFB4538(0, v14, a3);
        uint64_t result = sub_18AFB4538(v15, v14, a3);
      }
      BOOL v19 = __OFSUB__(v6, v14);
      v6 -= v14;
      if (v19) {
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    if (v16 >= result)
    {
      if (v6 > 0)
      {
        uint64_t v41 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
        sub_18AF667CC(a4 + *(void *)(*(void *)(v41 - 8) + 72) * v7, v6, a4 + *(void *)(*(void *)(v41 - 8) + 72) * v12);
        uint64_t v42 = v7;
LABEL_68:
        sub_18AFB4538(v42, v6, a3);
        uint64_t result = sub_18AFB4538(v12, v6, a3);
        goto LABEL_69;
      }
      goto LABEL_69;
    }
    if (v15 > 0)
    {
      uint64_t v14 = v9 - v4;
      uint64_t v18 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
      sub_18AF667CC(a4 + *(void *)(*(void *)(v18 - 8) + 72) * (v9 - v4), v15, a4);
      sub_18AFB4538(v9 - v4, v15, a3);
      uint64_t result = sub_18AFB4538(0, v15, a3);
    }
    BOOL v19 = __OFSUB__(v6, v15);
    v6 -= v15;
    if (!v19)
    {
LABEL_65:
      if (v6 >= 1)
      {
        uint64_t v14 = a3[2];
        uint64_t v44 = *(void *)(*(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8) + 72);
        unint64_t v34 = a4 + v44 * v12;
        unint64_t v35 = a4 + v44 * v14;
LABEL_67:
        sub_18AF667CC(v35, v6, v34);
        uint64_t v42 = v14;
        goto LABEL_68;
      }
LABEL_69:
      a3[2] = v12;
      uint64_t v45 = a3[1];
      BOOL v19 = __OFSUB__(v45, v4);
      uint64_t v46 = v45 - v4;
      if (!v19) {
        goto LABEL_81;
      }
      __break(1u);
      goto LABEL_72;
    }
    __break(1u);
  }
  uint64_t result = sub_18AFB4538(result, v8, a3);
  uint64_t v20 = v8 - v4;
  if (__OFSUB__(v8, v4))
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v8 = v4;
  uint64_t v21 = v20 + v7;
  if (v21 >= v9) {
    uint64_t v22 = v9;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v12)
  {
    uint64_t v23 = result;
    uint64_t v24 = v21 - v22;
    if (v21 - v22 <= 0) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v21 - v22;
    }
    if (result <= 0) {
      uint64_t v26 = v9;
    }
    else {
      uint64_t v26 = result;
    }
    if (v15 >= v26)
    {
      uint64_t v36 = v9 - v15;
      BOOL v37 = __OFSUB__(v9, v15);
      if (v25 >= v14)
      {
        if (v37)
        {
LABEL_93:
          __break(1u);
          return result;
        }
        if (v36 > 0)
        {
          uint64_t v48 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
          sub_18AF667CC(a4 + *(void *)(*(void *)(v48 - 8) + 72) * v15, v9 - v15, a4 + *(void *)(*(void *)(v48 - 8) + 72) * v14);
          sub_18AFB4538(v15, v9 - v15, a3);
          uint64_t result = sub_18AFB4538(v14, v9 - v15, a3);
          uint64_t v14 = result;
        }
        if (v23 >= 1)
        {
          uint64_t v49 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
          sub_18AF667CC(a4, v23, a4 + *(void *)(*(void *)(v49 - 8) + 72) * v14);
          sub_18AFB4538(0, v23, a3);
          uint64_t v30 = v14;
          uint64_t v31 = v23;
          goto LABEL_79;
        }
      }
      else
      {
        if (v37)
        {
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        if (v36 > 0)
        {
          uint64_t v38 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
          sub_18AF667CC(a4 + *(void *)(*(void *)(v38 - 8) + 72) * v15, v9 - v15, a4 + *(void *)(*(void *)(v38 - 8) + 72) * v14);
          sub_18AFB4538(v15, v9 - v15, a3);
          uint64_t v14 = sub_18AFB4538(v14, v9 - v15, a3);
        }
        uint64_t v39 = *(void *)(*(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8) + 72);
        sub_18AF667CC(a4, v8, a4 + v39 * v14);
        uint64_t v40 = sub_18AFB4538(0, v8, a3);
        uint64_t result = sub_18AFB4538(v14, v8, a3);
        if (v24 >= 1)
        {
          sub_18AF667CC(a4 + v40 * v39, v24, a4);
          sub_18AFB4538(v40, v24, a3);
          uint64_t v30 = 0;
          uint64_t v31 = v24;
          goto LABEL_79;
        }
      }
    }
    else
    {
      if (v25 >= v14)
      {
LABEL_72:
        if (v12 <= 0) {
          goto LABEL_80;
        }
        uint64_t v47 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
        sub_18AF667CC(a4 + *(void *)(*(void *)(v47 - 8) + 72) * v15, v12, a4 + *(void *)(*(void *)(v47 - 8) + 72) * v14);
        sub_18AFB4538(v15, v12, a3);
        uint64_t v30 = v14;
        uint64_t v31 = v12;
        goto LABEL_79;
      }
      uint64_t v27 = v9 - v14;
      if (__OFSUB__(v9, v14))
      {
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      if (v27 > 0)
      {
        uint64_t v28 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
        sub_18AF667CC(a4 + *(void *)(*(void *)(v28 - 8) + 72) * v15, v9 - v14, a4 + *(void *)(*(void *)(v28 - 8) + 72) * v14);
        uint64_t v15 = sub_18AFB4538(v15, v9 - v14, a3);
        uint64_t result = sub_18AFB4538(v14, v9 - v14, a3);
      }
      if (__OFSUB__(v12, v27)) {
        goto LABEL_88;
      }
      if (v12 - v27 >= 1)
      {
        uint64_t v29 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
        sub_18AF667CC(a4 + *(void *)(*(void *)(v29 - 8) + 72) * v15, v12 - v27, a4);
        sub_18AFB4538(v15, v12 - v27, a3);
        uint64_t v30 = 0;
        uint64_t v31 = v12 - v27;
LABEL_79:
        uint64_t result = sub_18AFB4538(v30, v31, a3);
      }
    }
  }
LABEL_80:
  uint64_t v50 = a3[1];
  BOOL v19 = __OFSUB__(v50, v8);
  uint64_t v46 = v50 - v8;
  if (v19)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
LABEL_81:
  a3[1] = v46;
  return result;
}

void sub_18AFB54BC()
{
}

size_t sub_18AFB54D0(uint64_t a1)
{
  return sub_18AFB30F4(0, *(void *)(a1 + 16), 0, a1);
}

void sub_18AFB54E4()
{
}

void sub_18AFB54F8(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1] + v2;
  if (*a1 >= v3)
  {
    if (v3 < v2)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = *(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8);
      if (!__OFSUB__(v3, v2))
      {
        v6[0] = a2 + *(void *)(v5 + 72) * v2;
        v6[1] = v3 - v2;
        sub_18AFB32C4(v6);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t sub_18AFB55B8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = a5;
  if (a5) {
    unint64_t v5 = a5 + *(void *)(*(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8) + 72) * a3;
  }
  if (a1)
  {
    if (a2)
    {
      if (a4 - a3 < a2)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if (v5)
      {
        if (a2 < 0) {
          goto LABEL_18;
        }
        uint64_t v10 = *(void *)(*(void *)(type metadata accessor for CKAsyncSerialQueue.WaitContext() - 8) + 72) * a2;
        unint64_t v11 = v5 + v10;
        unint64_t v12 = a1 + v10;
        if (v11 > a1 && v12 > v5) {
          goto LABEL_18;
        }
        swift_arrayInitWithCopy();
      }
    }
  }
  else
  {
    a2 = 0;
  }
  uint64_t result = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_18AFB5728(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_18AF161EC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_18AFB578C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_18AFB57F0(uint64_t a1)
{
  uint64_t v3 = *(int **)(v1 + 24);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_18AF16AE4(v4);
  void *v5 = v6;
  v5[1] = sub_18AF38E00;
  return sub_18AF14514(a1, v3);
}

uint64_t sub_18AFB589C(uint64_t a1)
{
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_18AF16AE4(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_18AF13048;
  return sub_18AF43C0C(a1, v3, v5, v4);
}

void sub_18AFB5948()
{
  sub_18AFB1DB0(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

id CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF61DC8;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF61DD0;
    uint64_t v9[3] = &unk_1ED7F1130;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setPerShareParticipantCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setPerShareParticipantCompletionBlock_, 0);
  }
}

id CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF53A80;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF53A88;
    uint64_t v9[3] = &unk_1ED7F16F8;
    uint64_t v7 = _Block_copy(v9);
    sub_18AF42F30(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchShareParticipantsCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF1E758(a1);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setFetchShareParticipantsCompletionBlock_, 0);
  }
}

void (*CKFetchShareParticipantsOperation.perShareParticipantResultBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perShareParticipantCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AFB5C74@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchShareParticipantsOperation.perShareParticipantResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFB6194;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AFB5CE4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFB6188;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18AFB5D74(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t *, uint64_t *))
{
  uint64_t v7 = a1;
  uint64_t v5 = a2;
  char v6 = a3 & 1;
  return a4(&v7, &v5);
}

uint64_t sub_18AFB5DBC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*CKFetchShareParticipantsOperation.perShareParticipantResultBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchShareParticipantsOperation.perShareParticipantResultBlock.getter();
  a1[1] = v3;
  return sub_18AFB5E3C;
}

uint64_t sub_18AFB5E3C(uint64_t *a1, char a2)
{
  return sub_18AFB60D4(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_fetchShareParticipantsCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF20008;
    *(void *)(v4 + 24) = v3;
    return sub_18AF539B8;
  }
  return result;
}

uint64_t sub_18AFB5F14@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    char v6 = sub_18AF53C04;
  }
  else
  {
    char v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AFB5F84(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18AFB6014()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t (*CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.getter();
  a1[1] = v3;
  return sub_18AFB6094;
}

uint64_t sub_18AFB6094(uint64_t *a1, char a2)
{
  return sub_18AFB60D4(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFB60D4(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AFB6188(uint64_t a1, uint64_t a2, char a3)
{
  return sub_18AFB5D74(a1, a2, a3 & 1, *(uint64_t (**)(uint64_t *, uint64_t *))(v3 + 16));
}

uint64_t sub_18AFB6194(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

BOOL sub_18AFB61F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = (int)a1;
      uint64_t v2 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v2 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return v3 == v2;
    default:
      uint64_t v3 = 0;
      uint64_t v2 = BYTE6(a2);
      break;
  }
  return v3 == v2;
}

id sub_18AFB6258()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F50D78]), sel_init);
  objc_msgSend(v0, sel_set_allowsExpensiveAccess_, 1);
  if (qword_1E91256F8 != -1) {
    swift_once();
  }
  uint64_t v1 = (unsigned char *)(qword_1E9126AA8 + 16);
  uint64_t v2 = (os_unfair_lock_s *)(qword_1E9126AA8 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_1E9126AA8 + 20));
  sub_18AF38AFC(v1, &v4);
  os_unfair_lock_unlock(v2);
  if (v4 == 1)
  {
    objc_msgSend(v0, sel_setNetworkingDelegate_, objc_msgSend(self, sel_testNetworkingDelegate));
    swift_unknownObjectRelease();
  }
  return v0;
}

uint64_t sub_18AFB6368()
{
  sub_18AF161EC(&qword_1E91255C0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 0;
  qword_1E9126AA8 = result;
  return result;
}

uint64_t static AssetStreamHandle.useNetworkingDelegateLock.getter()
{
  if (qword_1E91256F8 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t static AssetStreamHandle.makeAssetStreamHandle(from:with:for:)()
{
  sub_18AF19FAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  *(void *)(v1 + 32) = v0;
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 40) = v12;
  void *v12 = v1;
  v12[1] = sub_18AFB64EC;
  return sub_18AFB66BC(v11, v9, v7, v5, v3);
}

uint64_t sub_18AFB64EC()
{
  sub_18AF19FAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_18AF184F0();
  uint64_t v9 = v8;
  sub_18AF16D18();
  *uint64_t v10 = v9;
  uint64_t v11 = *v1;
  sub_18AF16CB4();
  void *v12 = v11;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v13 = *(uint64_t (**)(void))(v11 + 8);
    return v13();
  }
  else
  {
    void v9[6] = v3;
    v9[7] = v5;
    v9[8] = v7;
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v15, v16, v17);
  }
}

uint64_t sub_18AFB6618()
{
  sub_18AF2A56C();
  Class super_class = v0[3].super_class;
  id receiver = v0[4].receiver;
  id v3 = v0[3].receiver;
  uint64_t v4 = (objc_class *)v0[2].receiver;
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  uint64_t v6 = &v5[OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal];
  *(void *)uint64_t v6 = receiver;
  *((void *)v6 + 1) = super_class;
  *((void *)v6 + 2) = v3;
  v0[1].id receiver = v5;
  v0[1].Class super_class = v4;
  id v7 = objc_msgSendSuper2(v0 + 1, sel_init);
  uint64_t v8 = (uint64_t (*)(id))v0->super_class;
  return v8(v7);
}

uint64_t sub_18AFB66BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  return sub_18AF18508((uint64_t)sub_18AFB66DC);
}

uint64_t sub_18AFB66DC()
{
  sub_18AF19FAC();
  if (sub_18AFB61F4(v0[10], v0[11]))
  {
    type metadata accessor for CKError(0);
    v0[8] = 8;
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AFBBA98((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_18AF16D48();
    return v1();
  }
  else
  {
    id v3 = (void *)swift_task_alloc();
    v0[14] = v3;
    *id v3 = v0;
    v3[1] = sub_18AFB6844;
    uint64_t v4 = v0[9];
    return sub_18AFB8FB0(v4);
  }
}

uint64_t sub_18AFB6844()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *id v3 = v2;
  *id v3 = *v1;
  v2[15] = v4;
  v2[16] = v5;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16D48();
    return v6();
  }
  else
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v8, v9, v10);
  }
}

uint64_t sub_18AFB6948()
{
  sub_18AF1A048();
  uint64_t v1 = v0[17];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_18AFBBA4C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    sub_18AF5AF68(v0[15], v0[16]);
    swift_release();
    sub_18AF16D48();
    return v4();
  }
  else
  {
    uint64_t v3 = v0[10];
    unint64_t v2 = v0[11];
    swift_release();
    uint64_t v6 = sub_18AFB9588(v0[6], v3, v2);
    sub_18AF5AF68(v0[15], v0[16]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF16D48();
    uint64_t v10 = v7;
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[13];
    swift_bridgeObjectRetain();
    return v10(v6, v8, v9);
  }
}

uint64_t sub_18AFB6B94(uint64_t a1, void *a2, void *a3, const void *a4)
{
  uint64_t v8 = type metadata accessor for URL();
  v4[2] = v8;
  v4[3] = *(void *)(v8 - 8);
  v4[4] = swift_task_alloc();
  v4[5] = _Block_copy(a4);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  void v4[6] = v11;
  v4[7] = v13;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v4[8] = v15;
  swift_getObjCClassMetadata();
  uint64_t v16 = (void *)swift_task_alloc();
  v4[9] = v16;
  void *v16 = v4;
  v16[1] = sub_18AFB6D24;
  return static AssetStreamHandle.makeAssetStreamHandle(from:with:for:)();
}

uint64_t sub_18AFB6D24()
{
  sub_18AF1A048();
  unint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = (void *)*v1;
  uint64_t v6 = (void *)*v1;
  sub_18AF16CB4();
  *id v7 = v6;
  uint64_t v8 = (void *)*v1;
  *id v7 = *v1;
  swift_task_dealloc();
  unint64_t v9 = v5[7];
  uint64_t v10 = v5[6];
  uint64_t v11 = (void (**)(void, void, void))v5[5];
  (*(void (**)(void, void))(v5[3] + 8))(v5[4], v5[2]);
  swift_bridgeObjectRelease();
  sub_18AF5AF68(v10, v9);
  if (v2)
  {
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();

    ((void (**)(void, void, void *))v11)[2](v11, 0, v12);
    _Block_release(v11);
  }
  else
  {
    ((void (**)(void, void *, void))v11)[2](v11, v4, 0);
    _Block_release(v11);
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v8[1];
  return v13();
}

uint64_t sub_18AFB6F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  sub_18AF43708((uint64_t)v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  unint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  uint64_t v9[3] = 0;
  v9[4] = &unk_1E9126B98;
  v9[5] = v8;
  sub_18AFBB3EC((uint64_t)v6, (uint64_t)&unk_1E9126BA8, (uint64_t)v9);
  return swift_release();
}

objc_class *AssetStreamHandle.__allocating_init(from:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return AssetStreamHandle.init(from:)(a1, a2);
}

objc_class *AssetStreamHandle.init(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = v4;
  sub_18AF5F6FC(a1, a2);
  uint64_t v9 = sub_18AFB7188(a1, a2);
  if (v3)
  {
    sub_18AF5AF68(a1, a2);

    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v12 = (uint64_t *)&v8[OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal];
    uint64_t *v12 = v9;
    v12[1] = v10;
    v12[2] = v11;

    v14.id receiver = v8;
    v14.Class super_class = ObjectType;
    ObjectType = (objc_class *)objc_msgSendSuper2(&v14, sel_init);
    sub_18AF5AF68(a1, a2);
  }
  return ObjectType;
}

uint64_t sub_18AFB7188(uint64_t a1, unint64_t a2)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_18AFB873C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_18AF5AF68(a1, a2);
  uint64_t result = swift_release();
  if (!v2) {
    return v6;
  }
  return result;
}

uint64_t AssetStreamHandle.serializedData()()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_18AFB7390();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

{
  return MEMORY[0x1F4111CB0]();
}

unint64_t sub_18AFB7390()
{
  unint64_t result = qword_1E9126AC8;
  if (!qword_1E9126AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126AC8);
  }
  return result;
}

uint64_t AssetStreamHandle.makeAVPlayerItem(with:options:)(uint64_t a1, uint64_t a2)
{
  return sub_18AFB74BC(a1, a2, *(void *)(v2 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal), *(void *)(v2 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 8), *(void *)(v2 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 16));
}

uint64_t sub_18AFB74BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v57 = a4;
  uint64_t v58 = a5;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_18AF22CB0();
  uint64_t v61 = v8;
  uint64_t v62 = v7;
  MEMORY[0x1F4188790](v7);
  sub_18AF33B98();
  uint64_t v60 = v9;
  uint64_t v59 = type metadata accessor for OS_dispatch_queue.Attributes();
  sub_18AF402B8();
  MEMORY[0x1F4188790](v10);
  sub_18AF33E24(v11, v54[0]);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = sub_18AF19284(v12);
  MEMORY[0x1F4188790](v13);
  sub_18AF19290();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for UUID();
  sub_18AF22CB0();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v20);
  sub_18AF2A53C();
  uint64_t v21 = sub_18AF161EC(&qword_1E9126560);
  uint64_t v22 = sub_18AF19284(v21);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)v54 - v26;
  uint64_t v28 = type metadata accessor for URL();
  sub_18AF22CB0();
  uint64_t v30 = v29;
  MEMORY[0x1F4188790](v31);
  sub_18AF19290();
  uint64_t v34 = v33 - v32;
  sub_18AFBB950(a1, (uint64_t)v27);
  if (sub_18AF436E0((uint64_t)v27, 1, v28) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v34, v27, v28);
    uint64_t v38 = v60;
    uint64_t v37 = v61;
    goto LABEL_5;
  }
  v54[1] = v16;
  sub_18AF340A8();
  UUID.init()();
  sub_18AFBBA98(&qword_1E9126BE0, MEMORY[0x1E4F27990]);
  v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v5, v17);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t result = sub_18AF436E0((uint64_t)v24, 1, v28);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v34, v24, v28);
    sub_18AFBB55C((uint64_t)v27, &qword_1E9126560);
    uint64_t v38 = v60;
    uint64_t v37 = v61;
LABEL_5:
    uint64_t v40 = v57;
    uint64_t v39 = v58;
    uint64_t v41 = v56;
    id v42 = objc_allocWithZone(MEMORY[0x1E4F166C8]);
    uint64_t v43 = v55;
    swift_bridgeObjectRetain();
    id v45 = sub_18AFBAFD0(v34, v43, v44);
    unint64_t v66 = &type metadata for AssetStreamHandleInternal;
    unint64_t v46 = sub_18AFB9F38();
    uint64_t v63 = v41;
    uint64_t v64 = v40;
    unint64_t v67 = v46;
    uint64_t v65 = v39;
    id v47 = objc_allocWithZone((Class)type metadata accessor for LoadingRequestHandler());
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v48 = (void *)LoadingRequestHandler.init(streamHandle:type:)();
    id v49 = objc_msgSend(v45, sel_resourceLoader);
    sub_18AFBB9B8();
    id v50 = v48;
    static DispatchQoS.unspecified.getter();
    uint64_t v63 = MEMORY[0x1E4FBC860];
    sub_18AFBBA98(&qword_1E9126BF0, MEMORY[0x1E4FBCC10]);
    sub_18AF161EC(&qword_1E9126BF8);
    sub_18AFBB9F8();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, void, uint64_t))(v37 + 104))(v38, *MEMORY[0x1E4FBCC58], v62);
    sub_18AF38284();
    uint64_t v51 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    objc_msgSend(v49, sel_setDelegate_queue_, v50, v51);

    type metadata accessor for PlayerItem();
    id v52 = v50;
    uint64_t v53 = dispatch thunk of static PlayerItem.makePlayerItem(with:delegate:)();

    return v53;
  }
  __break(1u);
  return result;
}

uint64_t AssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AFB7AFC(a1, a2, a3, a4, *(void *)(v4 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal), *(void *)(v4 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 8), *(void *)(v4 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 16));
}

uint64_t sub_18AFB7AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v53 = a6;
  uint64_t v54 = a7;
  uint64_t v51 = a2;
  uint64_t v52 = a5;
  uint64_t v61 = a3;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_18AF22CB0();
  uint64_t v59 = v12;
  uint64_t v60 = v11;
  MEMORY[0x1F4188790](v11);
  sub_18AF33E24(v13, v50[0]);
  uint64_t v56 = type metadata accessor for OS_dispatch_queue.Attributes();
  sub_18AF402B8();
  MEMORY[0x1F4188790](v14);
  sub_18AF33B98();
  uint64_t v57 = v15;
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v17 = sub_18AF19284(v16);
  MEMORY[0x1F4188790](v17);
  sub_18AF33B98();
  uint64_t v55 = v18;
  uint64_t v19 = type metadata accessor for UUID();
  sub_18AF22CB0();
  uint64_t v21 = v20;
  MEMORY[0x1F4188790](v22);
  sub_18AF38F60();
  uint64_t v23 = sub_18AF161EC(&qword_1E9126560);
  uint64_t v24 = sub_18AF19284(v23);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)v50 - v28;
  uint64_t v30 = type metadata accessor for URL();
  sub_18AF22CB0();
  uint64_t v32 = v31;
  MEMORY[0x1F4188790](v33);
  sub_18AF2A53C();
  sub_18AFBB950(a1, (uint64_t)v29);
  if (sub_18AF436E0((uint64_t)v29, 1, v30) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v7, v29, v30);
    goto LABEL_5;
  }
  v50[1] = a4;
  sub_18AF340A8();
  UUID.init()();
  sub_18AFBBA98(&qword_1E9126BE0, MEMORY[0x1E4F27990]);
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v8, v19);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t result = sub_18AF436E0((uint64_t)v26, 1, v30);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v7, v26, v30);
    sub_18AFBB55C((uint64_t)v29, &qword_1E9126560);
LABEL_5:
    uint64_t v37 = v53;
    uint64_t v36 = v54;
    uint64_t v38 = v52;
    id v39 = objc_allocWithZone(MEMORY[0x1E4F166C8]);
    uint64_t v40 = v51;
    swift_bridgeObjectRetain();
    id v42 = sub_18AFBAFD0(v7, v40, v41);
    uint64_t v65 = &type metadata for AssetStreamHandleInternal;
    unint64_t v43 = sub_18AFB9F38();
    uint64_t v62 = v38;
    uint64_t v63 = v37;
    unint64_t v66 = v43;
    uint64_t v64 = v36;
    id v44 = objc_allocWithZone((Class)type metadata accessor for LoadingRequestHandler());
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    id v45 = (void *)LoadingRequestHandler.init(streamHandle:type:)();
    id v46 = objc_msgSend(v42, sel_resourceLoader);
    sub_18AFBB9B8();
    id v47 = v45;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = MEMORY[0x1E4FBC860];
    sub_18AFBBA98(&qword_1E9126BF0, MEMORY[0x1E4FBCC10]);
    sub_18AF161EC(&qword_1E9126BF8);
    sub_18AFBB9F8();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))(v58, *MEMORY[0x1E4FBCC58], v60);
    sub_18AF38284();
    uint64_t v48 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    objc_msgSend(v46, sel_setDelegate_queue_, v47, v48);

    id v49 = objc_allocWithZone((Class)type metadata accessor for AssetExportSession());
    swift_bridgeObjectRetain();
    return AssetExportSession.init(avAsset:presetName:delegate:)();
  }
  __break(1u);
  return result;
}

id AssetStreamHandle.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void AssetStreamHandle.init()()
{
}

uint64_t sub_18AFB81B4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000019 && a2 == 0x800000018B1D3BC0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_18AFB823C()
{
  return 0xD000000000000019;
}

uint64_t sub_18AFB8260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18AFB81B4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_18AFB828C()
{
  return sub_18AF507A0();
}

uint64_t sub_18AFB82A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _sSo18CKDeviceCapabilityC8CloudKitE20supportsSecureCodingSbvgZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18AFB82D4(uint64_t a1)
{
  unint64_t v2 = sub_18AFB84F0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AFB8310(uint64_t a1)
{
  unint64_t v2 = sub_18AFB84F0();

  return MEMORY[0x1F41862B0](a1, v2);
}

id AssetStreamHandle.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t AssetStreamHandle.encode(to:)(void *a1)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E9126AD0);
  sub_18AF22CB0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_18AF38F60();
  sub_18AF25FCC(a1, a1[3]);
  sub_18AFB84F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_18AFB7390();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
}

unint64_t sub_18AFB84F0()
{
  unint64_t result = qword_1E9126AD8;
  if (!qword_1E9126AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126AD8);
  }
  return result;
}

void *AssetStreamHandle.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return AssetStreamHandle.init(from:)(a1);
}

void *AssetStreamHandle.init(from:)(void *a1)
{
  id v3 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_18AF161EC(&qword_1E9126AE0);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v5);
  sub_18AF19290();
  uint64_t v6 = sub_18AF25FCC(a1, a1[3]);
  sub_18AFB84F0();
  uint64_t v7 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    sub_18AF40A30((uint64_t)a1);
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_18AFB873C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v15;
    uint64_t v10 = &v7[OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal];
    *(_OWORD *)uint64_t v10 = v14;
    *((void *)v10 + 2) = v9;

    v13.id receiver = v7;
    v13.Class super_class = ObjectType;
    uint64_t v6 = objc_msgSendSuper2(&v13, sel_init);
    uint64_t v11 = sub_18AF3418C();
    v12(v11);
    sub_18AF40A30((uint64_t)a1);
  }
  return v6;
}

unint64_t sub_18AFB873C()
{
  unint64_t result = qword_1E9126AE8;
  if (!qword_1E9126AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126AE8);
  }
  return result;
}

void *sub_18AFB8788@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = AssetStreamHandle.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_18AFB87B4(void *a1)
{
  return AssetStreamHandle.encode(to:)(a1);
}

uint64_t AssetStreamHandle.size.getter()
{
  unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal);
  if (v6 >> 62) {
    goto LABEL_14;
  }
  uint64_t result = sub_18AF2A65C();
  if (v0)
  {
    while (v0 >= 1)
    {
      sub_18AFBBD20();
      while (1)
      {
        id v8 = v3 ? (id)MEMORY[0x18C1298C0](v2, v6) : *(id *)(v6 + 8 * v2 + 32);
        sub_18AF4102C(v8);
        uint64_t v9 = v5 - v4;
        if (__OFSUB__(v5, v4)) {
          break;
        }
        BOOL v10 = __OFADD__(v1, v9);
        v1 += v9;
        if (v10) {
          goto LABEL_13;
        }
        if (v0 == ++v2) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      sub_18AF16C38();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v0 = result;
      if (!result) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    uint64_t v1 = 0;
LABEL_16:
    sub_18AF307A4();
    return v1;
  }
  return result;
}

{
  return MEMORY[0x1F4111CD0]();
}

uint64_t sub_18AFB88E0(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t result = sub_18AF2A65C();
  if (v1)
  {
    while (v1 >= 1)
    {
      sub_18AFBBD20();
      while (1)
      {
        id v9 = v4 ? (id)MEMORY[0x18C1298C0](v3, a1) : *(id *)(a1 + 8 * v3 + 32);
        sub_18AF4102C(v9);
        uint64_t v10 = v6 - v5;
        if (__OFSUB__(v6, v5)) {
          break;
        }
        BOOL v11 = __OFADD__(v2, v10);
        v2 += v10;
        if (v11) {
          goto LABEL_13;
        }
        if (v1 == ++v3) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      sub_18AF16C38();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v1 = result;
      if (!result) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    uint64_t v2 = 0;
LABEL_16:
    sub_18AF307A4();
    return v2;
  }
  return result;
}

uint64_t AssetStreamHandle.range.getter()
{
  sub_18AFB89D4(*(void *)(v0 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal));
  return 0;
}

{
  return MEMORY[0x1F4111CD8]();
}

uint64_t sub_18AFB89D4(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t result = sub_18AF2A65C();
  if (v1)
  {
    while (v1 >= 1)
    {
      sub_18AFBBD20();
      while (1)
      {
        id v9 = v4 ? (id)MEMORY[0x18C1298C0](v3, a1) : *(id *)(a1 + 8 * v3 + 32);
        sub_18AF4102C(v9);
        uint64_t v10 = v6 - v5;
        if (__OFSUB__(v6, v5)) {
          break;
        }
        BOOL v11 = __OFADD__(v2, v10);
        v2 += v10;
        if (v11) {
          goto LABEL_14;
        }
        if (v1 == ++v3)
        {
          sub_18AF307A4();
          if ((v2 & 0x8000000000000000) == 0) {
            return 0;
          }
          __break(1u);
          break;
        }
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      sub_18AF16C38();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v1 = result;
      if (!result) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    sub_18AF307A4();
    return 0;
  }
  return result;
}

uint64_t AssetStreamHandle.inputStream(for:)()
{
  sub_18AF339B8();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = sub_18AF161EC(&qword_1E9126AF8);
  v1[6] = v5;
  sub_18AF16DF8(v5);
  v1[7] = v6;
  v1[8] = swift_task_alloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFB8B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF299CC();
  sub_18AF1A048();
  uint64_t v14 = v12[3];
  uint64_t v13 = v12[4];
  uint64_t v15 = v12[5] + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal;
  long long v30 = *(_OWORD *)v15;
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = swift_task_alloc();
  *(_OWORD *)(v17 + 16) = v30;
  *(void *)(v17 + 32) = v16;
  *(void *)(v17 + 40) = v14;
  *(void *)(v17 + 48) = v13;
  uint64_t v18 = sub_18AF37A1C();
  v19(v18);
  sub_18AF348A4(MEMORY[0x1E4F277C0], v20, (uint64_t)sub_18AFB9F34);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF384DC();
  sub_18AF33974();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, v30, *((void *)&v30 + 1), a11, a12);
}

uint64_t sub_18AFB8C28()
{
  sub_18AF339B8();
  v0[6] = v1;
  v0[7] = v2;
  v0[4] = v3;
  v0[5] = v4;
  v0[2] = v5;
  v0[3] = v6;
  uint64_t v7 = sub_18AF161EC(&qword_1E9126AF8);
  v0[8] = v7;
  sub_18AF16DF8(v7);
  v0[9] = v8;
  v0[10] = swift_task_alloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_18AFB8CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF299CC();
  sub_18AF1A048();
  uint64_t v13 = *(void *)(v12 + 56);
  long long v29 = *(_OWORD *)(v12 + 40);
  uint64_t v15 = *(void *)(v12 + 24);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v16 = swift_task_alloc();
  *(_OWORD *)(v16 + 16) = v29;
  *(void *)(v16 + 32) = v13;
  *(void *)(v16 + 40) = v15;
  *(void *)(v16 + 48) = v14;
  uint64_t v17 = sub_18AF37A1C();
  v18(v17);
  sub_18AF348A4(MEMORY[0x1E4F277C0], v19, (uint64_t)sub_18AFB9F34);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF384DC();
  sub_18AF33974();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, v29, *((void *)&v29 + 1), a11, a12);
}

uint64_t AssetStreamHandle.readAll(in:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_18AF18508((uint64_t)sub_18AFB8DB4);
}

uint64_t sub_18AFB8DB4()
{
  sub_18AF339B8();
  uint64_t v1 = *(void *)(v0 + 56) + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal;
  long long v2 = *(_OWORD *)v1;
  uint64_t v3 = *(void *)(v1 + 16);
  *(_OWORD *)(v0 + 16) = v2;
  *(void *)(v0 + 32) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  unint64_t v5 = sub_18AFB9F38();
  *uint64_t v4 = v0;
  v4[1] = sub_18AFB8E7C;
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  return MEMORY[0x1F4111C98](v6, v7, &type metadata for AssetStreamHandleInternal, v5);
}

uint64_t sub_18AFB8E7C()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v7 = v6;
  uint64_t v8 = *v1;
  sub_18AF16CB4();
  void *v9 = v8;
  *(void *)(v10 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v11, v12, v13);
  }
  else
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v14(v5, v3);
  }
}

uint64_t sub_18AFB8F94()
{
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFB8FB0(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URLRequest();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFB90CC, 0, 0);
}

uint64_t sub_18AFB90CC()
{
  sub_18AF339B8();
  (*(void (**)(void, void, void))(v0[6] + 16))(v0[7], v0[4], v0[5]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  id v1 = objc_msgSend(self, sel_sharedManager);
  v0[11] = v1;
  if (v1)
  {
    type metadata accessor for AssetStreamHandle();
    id v3 = sub_18AFB6258();
    v0[12] = v3;
    uint64_t v4 = (void *)swift_task_alloc();
    v0[13] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_18AFB91DC;
    id v1 = (id)v0[10];
    id v2 = v3;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F410D130](v1, v2);
}

uint64_t sub_18AFB91DC()
{
  sub_18AF2A56C();
  uint64_t v2 = *v1;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  *uint64_t v6 = v5;
  v9[14] = v7;
  v9[15] = v8;
  v9[16] = v10;
  v9[17] = v0;
  swift_task_dealloc();
  uint64_t v11 = *(void **)(v2 + 88);

  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v12, v13, v14);
}

void sub_18AFB9324()
{
  self;
  id v1 = (void *)swift_dynamicCastObjCClass();
  if (v1 && objc_msgSend(v1, sel_statusCode) == (id)200)
  {
    uint64_t v2 = (void *)v0[16];
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);

    swift_task_dealloc();
    swift_task_dealloc();
    sub_18AF2ACD0();
    __asm { BRAA            X3, X16 }
  }
  unint64_t v5 = v0[15];
  uint64_t v6 = (void *)v0[16];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[9];
  uint64_t v12 = v0[10];
  uint64_t v9 = v0[8];
  type metadata accessor for CKError(0);
  v0[3] = 4;
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AFBBA98((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  sub_18AF5AF68(v7, v5);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  sub_18AF2ACD0();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_18AFB9508()
{
  sub_18AF339B8();
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v1();
}

uint64_t sub_18AFB9588(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    for (uint64_t i = 32; ; i += 56)
    {
      long long v10 = *(_OWORD *)(a1 + i + 32);
      v13[1] = *(_OWORD *)(a1 + i + 16);
      v13[2] = v10;
      v13[0] = *(_OWORD *)(a1 + i);
      uint64_t v14 = *(void *)(a1 + i + 48);
      uint64_t v11 = v8 + v10;
      if (__OFADD__(v8, (void)v10)) {
        break;
      }
      if (v11 < v8) {
        goto LABEL_13;
      }
      objc_allocWithZone((Class)type metadata accessor for ChunkStreamHandle(0));
      sub_18AFBBAE0((uint64_t)v13);
      sub_18AFBBAE0((uint64_t)v13);
      sub_18AF5F6FC(a2, a3);
      sub_18AF8DA40((uint64_t)v13, a2, a3, v8, v11);
      if (v3)
      {
        sub_18AF8F1A8((uint64_t)v13);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      MEMORY[0x18C129220]();
      if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t result = sub_18AF8F1A8((uint64_t)v13);
      uint64_t v8 = v11;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t sub_18AFB9728(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E61486B6E756863 && a2 == 0xEC00000073656C64;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7079547465737361 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_18AFB983C(char a1)
{
  if (a1) {
    return 0x7079547465737361;
  }
  else {
    return 0x6E61486B6E756863;
  }
}

uint64_t sub_18AFB9880(void *a1)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9126B38);
  sub_18AF22CB0();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  sub_18AF38F60();
  sub_18AF25FCC(a1, a1[3]);
  sub_18AFBADE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_18AF161EC(&qword_1E9126B48);
  sub_18AFBAE34(&qword_1E9126B50, &qword_1E9126B58);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1) {
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t sub_18AFB9A14(void *a1)
{
  sub_18AF161EC(&qword_1E9126B60);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v3);
  sub_18AF38F60();
  uint64_t v4 = a1[3];
  sub_18AF25FCC(a1, v4);
  sub_18AFBADE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_18AF40A30((uint64_t)a1);
  }
  else
  {
    sub_18AF161EC(&qword_1E9126B48);
    sub_18AFBAE34(&qword_1E9126B68, &qword_1E9126B70);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v4 = v8;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = sub_18AF42CEC();
    v7(v6);
    swift_bridgeObjectRetain();
    sub_18AF40A30((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_18AFB9C14()
{
  return sub_18AFB983C(*v0);
}

uint64_t sub_18AFB9C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18AFB9728(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18AFB9C44@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18AF5F2B0();
  *a1 = result;
  return result;
}

uint64_t sub_18AFB9C6C(uint64_t a1)
{
  unint64_t v2 = sub_18AFBADE8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AFB9CA8(uint64_t a1)
{
  unint64_t v2 = sub_18AFBADE8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_18AFB9CE4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_18AFB9A14(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_18AFB9D14(void *a1)
{
  return sub_18AFB9880(a1);
}

uint64_t sub_18AFB9D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v10 = sub_18AF161EC(&qword_1E9126BC0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TaskPriority();
  sub_18AF43708((uint64_t)v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  *((void *)v19 + 4) = a2;
  *((void *)v19 + 5) = a3;
  uint64_t v20 = v22;
  *((void *)v19 + 6) = a4;
  *((void *)v19 + 7) = v20;
  *((void *)v19 + 8) = v23;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v19[v18], v13, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18AF42DB4((uint64_t)v16, (uint64_t)&unk_1E9126BD0, (uint64_t)v19);
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

unint64_t sub_18AFB9F38()
{
  unint64_t result = qword_1E9126B08;
  if (!qword_1E9126B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126B08);
  }
  return result;
}

uint64_t type metadata accessor for AssetStreamHandle()
{
  return self;
}

{
  return MEMORY[0x1F4111CE0]();
}

uint64_t method lookup function for AssetStreamHandle(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AssetStreamHandle);
}

uint64_t dispatch thunk of AssetStreamHandle.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

unsigned char *storeEnumTagSinglePayload for AssetStreamHandle.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18AFBA0ACLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.CodingKeys()
{
  return &type metadata for AssetStreamHandle.CodingKeys;
}

uint64_t destroy for AssetStreamHandleInternal()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8CloudKit25AssetStreamHandleInternalVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AssetStreamHandleInternal(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AssetStreamHandleInternal(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AssetStreamHandleInternal()
{
  return &type metadata for AssetStreamHandleInternal;
}

unint64_t sub_18AFBA228()
{
  unint64_t result = qword_1E9126B10[0];
  if (!qword_1E9126B10[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9126B10);
  }
  return result;
}

uint64_t sub_18AFBA274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a8;
  v8[9] = v12;
  v8[6] = a4;
  v8[7] = a7;
  uint64_t v9 = sub_18AF161EC(&qword_1E9126BD8);
  v8[10] = v9;
  v8[11] = *(void *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFBA344, 0, 0);
}

void sub_18AFBA344()
{
  unint64_t v1 = v0[6];
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_17;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    return;
  }
  uint64_t v3 = 0;
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[6] + 32;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      uint64_t v7 = (char *)MEMORY[0x18C1298C0](v3, v0[6]);
    }
    else {
      uint64_t v7 = (char *)*(id *)(v6 + 8 * v3);
    }
    uint64_t v8 = *(void *)&v7[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range + 8];
    if (v8 <= v0[7]
      || (uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range], v9 >= v0[8])
      || v5 == v4
      || v9 == v8)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  uint64_t v10 = v24;
LABEL_18:
  v0[13] = v10;
  if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v11 = *(void *)(v10 + 16);
  }
  v0[14] = v11;
  if (!v11)
  {
    swift_release();
    sub_18AF22DCC();
    sub_18AF161EC(&qword_1E9126BC0);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    swift_task_dealloc();
    sub_18AF16D48();
    sub_18AF2ACD0();
    __asm { BRAA            X1, X16 }
  }
  if (v11 < 1) {
    goto LABEL_36;
  }
  uint64_t v12 = sub_18AF41220(0);
  if (v14) {
    id v15 = *(id *)(v13 + 8 * v12 + 32);
  }
  else {
    id v15 = (id)MEMORY[0x18C1298C0](v12);
  }
  v0[16] = v15;
  static Task<>.checkCancellation()();
  sub_18AF39148();
  if (v18 != v19) {
    goto LABEL_37;
  }
  uint64_t v20 = (void *)swift_task_alloc();
  v0[17] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_18AFBA640;
  sub_18AF19F2C();
  sub_18AF2ACD0();
  sub_18AF8E84C(v21, v22);
}

uint64_t sub_18AFBA640()
{
  sub_18AF19FAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_18AF184F0();
  uint64_t v7 = v6;
  sub_18AF16D18();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_18AF16CB4();
  *uint64_t v10 = v9;
  v7[18] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[19] = v3;
    v7[20] = v5;
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

void sub_18AFBA73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF299CC();
  sub_18AF1A048();
  uint64_t v13 = v12[20];
  v12[2] = v13;
  unint64_t v14 = v12[19];
  uint64_t v15 = (void *)v12[16];
  uint64_t v17 = v12[11];
  uint64_t v16 = (void *)v12[12];
  uint64_t v18 = v12[10];
  v12[3] = v14;
  sub_18AF5F6FC(v13, v14);
  sub_18AF161EC(&qword_1E9126BC0);
  AsyncThrowingStream.Continuation.yield(_:)();

  sub_18AF5AF68(v13, v14);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v16, v18);
  uint64_t v19 = v12[15] + 1;
  if (v19 == v12[14])
  {
LABEL_9:
    swift_release();
    sub_18AF22DCC();
    sub_18AF161EC(&qword_1E9126BC0);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    swift_task_dealloc();
    sub_18AF16D48();
    sub_18AF33974();
    v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v20 = v12[18];
    while (1)
    {
      uint64_t v21 = sub_18AF41220(v19);
      id v24 = v23 ? *(id *)(v22 + 8 * v21 + 32) : (id)MEMORY[0x18C1298C0](v21);
      unsigned char v12[16] = v24;
      static Task<>.checkCancellation()();
      if (!v20) {
        break;
      }
      sub_18AF2AD54();
      AsyncThrowingStream.Continuation.finish(throwing:)();

      uint64_t v20 = 0;
      uint64_t v19 = sub_18AF3AA28();
      if (v23) {
        goto LABEL_9;
      }
    }
    sub_18AF39148();
    if (v33 != v34)
    {
      __break(1u);
    }
    else
    {
      Swift::String v35 = (void *)swift_task_alloc();
      v12[17] = v35;
      *Swift::String v35 = v12;
      v35[1] = sub_18AFBA640;
      sub_18AF19F2C();
      sub_18AF33974();
      sub_18AF8E84C(v36, v37);
    }
  }
}

void sub_18AFBA920()
{
  sub_18AF19FAC();
  sub_18AF2AD54();
  AsyncThrowingStream.Continuation.finish(throwing:)();

  uint64_t v2 = sub_18AF3AA28();
  if (v3)
  {
    swift_release();
    sub_18AF22DCC();
    sub_18AF161EC(&qword_1E9126BC0);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    swift_task_dealloc();
    sub_18AF16D48();
    v12();
  }
  else
  {
    uint64_t v4 = sub_18AF41220(v2);
    if (v3) {
      id v6 = *(id *)(v5 + 8 * v4 + 32);
    }
    else {
      id v6 = (id)MEMORY[0x18C1298C0](v4);
    }
    *(void *)(v0 + 128) = v6;
    static Task<>.checkCancellation()();
    sub_18AF39148();
    if (v7 != v8)
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v9;
      void *v9 = v0;
      v9[1] = sub_18AFBA640;
      uint64_t v10 = sub_18AF19F2C();
      sub_18AF8E84C(v10, v11);
    }
  }
}

void sub_18AFBAA90()
{
}

uint64_t sub_18AFBAAB4()
{
  return sub_18AFB88E0(*v0);
}

uint64_t sub_18AFBAABC()
{
  sub_18AFB89D4(*v0);
  return 0;
}

uint64_t sub_18AFBAADC()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_18AF38E00;
  return sub_18AFB8C28();
}

uint64_t sub_18AFBABA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_18AFBAC68;
  return MEMORY[0x1F4111C98](a1, a2, a3, a4);
}

uint64_t sub_18AFBAC68()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_18AF184F0();
  uint64_t v6 = *v1;
  sub_18AF16CB4();
  *char v7 = v6;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v3;
  }
  return v10(v8, v9);
}

unint64_t sub_18AFBAD4C()
{
  unint64_t result = qword_1E9126B28;
  if (!qword_1E9126B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126B28);
  }
  return result;
}

unint64_t sub_18AFBAD9C()
{
  unint64_t result = qword_1E9126B30;
  if (!qword_1E9126B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126B30);
  }
  return result;
}

unint64_t sub_18AFBADE8()
{
  unint64_t result = qword_1E9126B40;
  if (!qword_1E9126B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126B40);
  }
  return result;
}

uint64_t sub_18AFBAE34(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(&qword_1E9126B48);
    sub_18AFBBA98(a2, (void (*)(uint64_t))type metadata accessor for ChunkStreamHandle);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AFBAEC8()
{
  _Block_release(*(const void **)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_18AFBAF18()
{
  sub_18AF19FAC();
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_18AF38E00;
  uint64_t v2 = sub_18AF35648();
  return v3(v2);
}

id sub_18AFBAFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSURL *a3@<X8>)
{
  uint64_t v4 = v3;
  URL._bridgeToObjectiveC()(a3);
  uint64_t v8 = v7;
  if (a2)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v10 = objc_msgSend(v4, sel_initWithURL_options_, v8, v9.super.isa);

  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  return v10;
}

uint64_t sub_18AFBB0AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_18AF13048;
  return v6();
}

uint64_t sub_18AFBB17C()
{
  sub_18AF19FAC();
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_18AF13048;
  uint64_t v2 = sub_18AF35648();
  return v3(v2);
}

uint64_t sub_18AFBB22C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_18AF13048;
  return v7();
}

uint64_t sub_18AFBB2FC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18AFBB33C()
{
  sub_18AF19FAC();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_18AF16AE4(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF35530();
  return v4(v3);
}

uint64_t sub_18AFBB3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_18AF436E0(a1, 1, v6) == 1)
  {
    sub_18AFBB55C(a1, &qword_1E9125478);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_18AFBB55C(uint64_t a1, uint64_t *a2)
{
  sub_18AF161EC(a2);
  sub_18AF402B8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_18AFBB5B0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_18AF38CA8;
  return v6(a1);
}

uint64_t sub_18AFBB68C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AFBB6C4()
{
  sub_18AF2A56C();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_18AF16AE4(v4);
  void *v5 = v6;
  v5[1] = sub_18AF38E00;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1E9126BB0 + dword_1E9126BB0);
  return v7(v2, v3);
}

uint64_t sub_18AFBB770()
{
  uint64_t v1 = sub_18AF161EC(&qword_1E9126BC0);
  sub_18AF22CB0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 72) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return MEMORY[0x1F4186498](v0, v8, v9);
}

uint64_t sub_18AFBB828()
{
  sub_18AF1A048();
  sub_18AF161EC(&qword_1E9126BC0);
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_18AF16AE4(v5);
  *uint64_t v6 = v7;
  v6[1] = sub_18AF13048;
  uint64_t v8 = sub_18AF35530();
  return sub_18AFBA274(v8, v9, v10, v11, v1, v2, v3, v4);
}

void sub_18AFBB938()
{
}

uint64_t sub_18AFBB940(uint64_t a1)
{
  return sub_18AFB9D34(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_18AFBB950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9126560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_18AFBB9B8()
{
  unint64_t result = qword_1E9126BE8;
  if (!qword_1E9126BE8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9126BE8);
  }
  return result;
}

unint64_t sub_18AFBB9F8()
{
  unint64_t result = qword_1E9126C00;
  if (!qword_1E9126C00)
  {
    sub_18AF67604(&qword_1E9126BF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1E9126C00);
  }
  return result;
}

unint64_t sub_18AFBBA4C()
{
  unint64_t result = qword_1E9126C10;
  if (!qword_1E9126C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126C10);
  }
  return result;
}

uint64_t sub_18AFBBA98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AFBBAE0(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AssetStreamHandleInternal.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AFBBBF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandleInternal.CodingKeys()
{
  return &type metadata for AssetStreamHandleInternal.CodingKeys;
}

unint64_t sub_18AFBBC34()
{
  unint64_t result = qword_1E9126C18;
  if (!qword_1E9126C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126C18);
  }
  return result;
}

unint64_t sub_18AFBBC84()
{
  unint64_t result = qword_1E9126C20;
  if (!qword_1E9126C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126C20);
  }
  return result;
}

unint64_t sub_18AFBBCD4()
{
  unint64_t result = qword_1E9126C28;
  if (!qword_1E9126C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1E9126C28);
  }
  return result;
}

void CKScheduler.registerActivityIdentifier(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void CKScheduler.registerActivityIdentifier(_:replaceExistingHandler:handler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)MEMORY[0x18C128F60]();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  v12[4] = sub_18AFBBF90;
  v12[5] = v10;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  v12[2] = sub_18AFBC2C4;
  v12[3] = &unk_1ED7F1158;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_registerActivityIdentifier_replaceExistingHandler_handler_, v9, a3 & 1, v11);
  _Block_release(v11);
}

uint64_t sub_18AFBBE40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  sub_18AF43708((uint64_t)v12, 1, 1, v13);
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a1;
  v14[7] = a2;
  v14[8] = a3;
  swift_retain();
  id v15 = a1;
  swift_retain();
  sub_18AFBC1B4((uint64_t)v12, (uint64_t)&unk_1E9126C38, (uint64_t)v14);
  swift_release();
  return sub_18AFBC5AC((uint64_t)v12);
}

uint64_t sub_18AFBBF58()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AFBBF90(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFBBE40(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_18AFBBF98(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[2] = a7;
  v8[3] = a8;
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v10 = (void *)swift_task_alloc();
  v8[4] = v10;
  *uint64_t v10 = v8;
  v10[1] = sub_18AFBC078;
  return v12(a6);
}

uint64_t sub_18AFBC078()
{
  sub_18AF339B8();
  sub_18AF184F0();
  *(void *)(v1 + 40) = v0;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18AFBC150, 0, 0);
}

uint64_t sub_18AFBC150()
{
  sub_18AF339B8();
  (*(void (**)(void))(v0 + 16))(*(void *)(v0 + 40));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AFBC1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18AFBC60C(a1, 0, 0, 0, 1, 0, 0);
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  return swift_task_create();
}

void sub_18AFBC2C4(uint64_t a1, void *a2, void *aBlock)
{
  unsigned int v4 = *(void (**)(void))(a1 + 32);
  uint64_t v5 = _Block_copy(aBlock);
  *(void *)(swift_allocObject() + 16) = v5;
  swift_retain();
  id v6 = a2;
  v4();
  swift_release();
  swift_release();
}

uint64_t sub_18AFBC37C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18AFBC3B4()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_18AFBC404(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_18AFBC4E0;
  return sub_18AFBBF98(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFBC4E0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_18AFBC5AC(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9125478);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18AFBC60C(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18AFBC76C(a1, (uint64_t)v16);
  uint64_t v17 = type metadata accessor for TaskPriority();
  if (sub_18AF436E0((uint64_t)v16, 1, v17) == 1)
  {
    sub_18AFBC5AC((uint64_t)v16);
    uint64_t result = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned __int8 v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    uint64_t result = v19;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if (a3)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if (a5) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if (a6) {
    result |= 0x2000uLL;
  }
  if (a7) {
    return result | 0x4000;
  }
  return result;
}

uint64_t sub_18AFBC76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_18AFBC7D8(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = &v3[OBJC_IVAR____TtC8CloudKit28CloudAssetsAssetStreamHandle_assetStreamHandle];
  uint64_t v5 = type metadata accessor for AssetStreamHandle();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.id receiver = v3;
  v9.Class super_class = v1;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

id static CloudAssetsAssetStreamHandle.makeAssetStreamHandle(partition:owner:accessToken:requestorID:signature:referenceSignature:size:assetKey:filenameExtension:applicationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12)
{
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  v17[3] = a10;
  v17[4] = a9;
  v17[1] = a12;
  v17[2] = a11;
  uint64_t v12 = type metadata accessor for AssetStreamHandle();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v20;
  id result = (id)static AssetStreamHandle.makeAssetStreamHandle(partition:owner:accessToken:requestorID:signature:referenceSignature:size:assetKey:filenameExtension:applicationID:)();
  if (!v15) {
    return sub_18AFBC7D8((uint64_t)v14);
  }
  return result;
}

uint64_t CloudAssetsAssetStreamHandle.makeAVPlayerItem(with:options:)()
{
  return AssetStreamHandle.makeAVPlayerItem(with:options:)();
}

uint64_t CloudAssetsAssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)()
{
  return AssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)();
}

objc_class *CloudAssetsAssetStreamHandle.__allocating_init(from:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return CloudAssetsAssetStreamHandle.init(from:)(a1, a2);
}

objc_class *CloudAssetsAssetStreamHandle.init(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = type metadata accessor for AssetStreamHandle();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = v4;
  sub_18AF5F6FC(a1, a2);
  AssetStreamHandle.init(from:)();
  if (v3)
  {
    sub_18AF5AF68(a1, a2);

    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))((uint64_t)v12 + OBJC_IVAR____TtC8CloudKit28CloudAssetsAssetStreamHandle_assetStreamHandle, v11, v8);

    v14.id receiver = v12;
    v14.Class super_class = ObjectType;
    ObjectType = (objc_class *)objc_msgSendSuper2(&v14, sel_init);
    sub_18AF5AF68(a1, a2);
  }
  return ObjectType;
}

uint64_t CloudAssetsAssetStreamHandle.serializedData()()
{
  return AssetStreamHandle.serializedData()();
}

id CloudAssetsAssetStreamHandle.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CloudAssetsAssetStreamHandle.init()()
{
}

id CloudAssetsAssetStreamHandle.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CloudAssetsAssetStreamHandle.size.getter()
{
  return AssetStreamHandle.size.getter();
}

uint64_t CloudAssetsAssetStreamHandle.range.getter()
{
  return AssetStreamHandle.range.getter();
}

uint64_t CloudAssetsAssetStreamHandle.inputStream(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = sub_18AF55E40;
  return MEMORY[0x1F4111CA8](a1, a2, a3);
}

uint64_t CloudAssetsAssetStreamHandle.readAll(in:)(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = type metadata accessor for AssetStreamHandle();
  void *v5 = v2;
  v5[1] = sub_18AFBD6C4;
  uint64_t v7 = MEMORY[0x1E4F59200];
  return MEMORY[0x1F4111C98](a1, a2, v6, v7);
}

uint64_t sub_18AFBD6C4(uint64_t a1, uint64_t a2)
{
  sub_18AF184F0();
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_18AFBD7B0()
{
  return type metadata accessor for CloudAssetsAssetStreamHandle();
}

uint64_t type metadata accessor for CloudAssetsAssetStreamHandle()
{
  uint64_t result = qword_1E9126C58;
  if (!qword_1E9126C58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_18AFBD800()
{
  uint64_t result = type metadata accessor for AssetStreamHandle();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CloudAssetsAssetStreamHandle(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CloudAssetsAssetStreamHandle);
}

uint64_t dispatch thunk of CloudAssetsAssetStreamHandle.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

id CKSyncEngine.State.needsToFetchDatabaseChanges.setter(char a1)
{
  return sub_18AF38A28(a1, sel_setNeedsToFetchDatabaseChanges_, *(void **)(v1 + 16));
}

uint64_t CKSyncEngineFailedZoneSave.failedZoneSaveStruct()@<X0>(void *a1@<X8>)
{
  return sub_18AFBD8F8((SEL *)&selRef_recordZone, a1);
}

uint64_t CKSyncEngineFailedRecordSave.failedRecordSaveStruct()@<X0>(void *a1@<X8>)
{
  return sub_18AFBD8F8((SEL *)&selRef_record, a1);
}

uint64_t sub_18AFBD8F8@<X0>(SEL *a1@<X0>, void *a2@<X8>)
{
  id v4 = [v2 *a1];
  uint64_t result = related decl 'e' for CKErrorCode.init(_:)(objc_msgSend(v2, sel_error));
  *a2 = v4;
  a2[1] = result;
  return result;
}

id CKSyncEnginePendingRecordZoneChange.changeStruct()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(v2, sel_type);
  if (!v4)
  {
    char v5 = 0;
LABEL_5:
    id result = objc_msgSend(v2, sel_recordID);
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = v5;
    return result;
  }
  if (v4 == (id)1)
  {
    char v5 = 1;
    goto LABEL_5;
  }
  sub_18AF22DE0();
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_18AF30C1C();
  id v7 = objc_msgSend(v2, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18AF306EC(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  swift_bridgeObjectRelease();
  id result = (id)sub_18AF41230();
  __break(1u);
  return result;
}

id CKSyncEngine.State.stateObject.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t CKSyncEngine.State.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = objc_msgSend(self, sel_emptyState);
  return v0;
}

uint64_t CKSyncEngine.State.init()()
{
  *(void *)(v0 + 16) = objc_msgSend(self, sel_emptyState);
  return v0;
}

uint64_t CKSyncEngine.State.__allocating_init(_:)(uint64_t *a1)
{
  uint64_t v2 = swift_allocObject();
  CKSyncEngine.State.init(_:)(a1);
  return v2;
}

uint64_t CKSyncEngine.State.init(_:)(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  id v6 = objc_allocWithZone((Class)CKSyncEngineState);
  id v7 = sub_18AFBF498(v4, v5);
  if (v2) {
    swift_deallocPartialClassInstance();
  }
  else {
    *(void *)(v3 + 16) = v7;
  }
  return v3;
}

uint64_t CKSyncEngine.State.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t CKSyncEngine.State.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void CKSyncEngine.State.pendingRecordZoneChanges.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_pendingRecordZoneChanges);
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  sub_18AF34294();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_13;
  }
LABEL_3:
  sub_18AF382A4();
  sub_18AF5B618();
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v4 = (id)MEMORY[0x18C1298C0](0, v2);
      }
      else {
        id v4 = *(id *)(v2 + 32);
      }
      unint64_t v5 = v4;
      CKSyncEnginePendingRecordZoneChange.changeStruct()((uint64_t)v9);

      sub_18AF16C5C();
      if (v7)
      {
        sub_18AF33AB4(v6);
        sub_18AF5B618();
      }
      sub_18AF35244();
    }
    while (!v8);
    swift_bridgeObjectRelease();
  }
}

void sub_18AFBDD8C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_18AFBDDB8(v0, v1, v2, v3, v4, v5, v6, v7, v8);
}

void sub_18AFBDDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18AF33850();
  int v10 = *(void **)(v9 + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    sub_18AF41048();
    do
    {
      id v13 = sub_18AF33E44();
      sub_18AF33C14(v13);
      sub_18AF2AD74();
      sub_18AF3844C();
      sub_18AF35600();
      specialized ContiguousArray._endMutation()();
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  sub_18AF384EC();
  sub_18AF193C8();
  objc_msgSend(v10, sel_setPendingRecordZoneChanges_, a9);
  sub_18AF16CC4();
}

CKSyncEnginePendingRecordZoneChange __swiftcall CKSyncEngine.PendingRecordZoneChange.changeObject()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 8);
  id v3 = objc_allocWithZone((Class)CKSyncEnginePendingRecordZoneChange);

  uint64_t v4 = (objc_class *)objc_msgSend(v3, sel_initWithRecordID_type_, v1, v2);
  result._type = v6;
  result._recordID = v5;
  result.super.Class isa = v4;
  return result;
}

#error "18AFBDF08: call analysis failed (funcsize=11)"

void sub_18AFBDF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF33850();
  a21 = v23;
  a22 = v24;
  uint64_t v25 = (void *)v22[2];
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    a9 = (void *)v22[2];
    a10 = MEMORY[0x1E4FBC860];
    sub_18AF41048();
    do
    {
      sub_18AF42D88();
      if (v29) {
        uint64_t v30 = &selRef_initWithZone_;
      }
      else {
        uint64_t v30 = &selRef_initWithZoneID_;
      }
      objc_msgSend(objc_allocWithZone(*v28), *v30, v22);
      sub_18AF2AD74();
      sub_18AF3844C();
      sub_18AF35600();
      uint64_t v22 = &a10;
      specialized ContiguousArray._endMutation()();
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    uint64_t v25 = a9;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_18AF34EA0(0, &qword_1E9125230);
  sub_18AF384EC();
  sub_18AF193C8();
  objc_msgSend(v25, sel_setPendingDatabaseChanges_, a9);
  sub_18AF16CC4();
}

id CKSyncEnginePendingDatabaseChange.changeStruct()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(v2, sel_type);
  if (v4 == (id)1)
  {
    id v5 = objc_msgSend(v2, sel_zoneID);
    char v6 = 1;
LABEL_6:
    id result = v5;
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = v6;
    return result;
  }
  if (v4)
  {
    sub_18AF22DE0();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    sub_18AF30C1C();
    id v9 = objc_msgSend(v2, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18AF306EC(v10, v11, v12, v13, v14, v15, v16, v17, v27, v28, v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    self;
    uint64_t v7 = (void *)swift_dynamicCastObjCClass();
    if (v7)
    {
      id v5 = objc_msgSend(v7, sel_zone);
      char v6 = 0;
      goto LABEL_6;
    }
    sub_18AF22DE0();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    sub_18AF30C1C();
    id v18 = objc_msgSend(v2, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18AF306EC(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
    swift_bridgeObjectRelease();
  }
  id result = (id)sub_18AF41230();
  __break(1u);
  return result;
}

CKSyncEnginePendingDatabaseChange __swiftcall CKSyncEngine.PendingDatabaseChange.changeObject()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = off_1E545F0B8;
  if (*((unsigned char *)v0 + 8))
  {
    id v3 = &selRef_initWithZoneID_;
  }
  else
  {
    uint64_t v2 = off_1E545F0C0;
    id v3 = &selRef_initWithZone_;
  }
  id v4 = objc_allocWithZone((Class)*v2);
  id v5 = *v3;

  char v6 = (objc_class *)objc_msgSend(v4, v5, v1);
  result._type = v8;
  result._zoneID = v7;
  result.super.Class isa = v6;
  return result;
}

id CKSyncEngine.State.hasPendingUntrackedChanges.getter()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_hasPendingUntrackedChanges);
}

id CKSyncEngine.State.hasPendingUntrackedChanges.setter(char a1)
{
  return sub_18AF38A28(a1, sel_setHasPendingUntrackedChanges_, *(void **)(v1 + 16));
}

id (*CKSyncEngine.State.hasPendingUntrackedChanges.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(v1 + 8) = objc_msgSend((id)sub_18AF33990(a1), sel_hasPendingUntrackedChanges);
  return sub_18AFBE2BC;
}

id sub_18AFBE2BC(uint64_t a1, uint64_t a2)
{
  return sub_18AFBE7B0(a1, a2, (SEL *)&selRef_setHasPendingUntrackedChanges_);
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
  sub_18AFBE2E0((uint64_t)pendingRecordZoneChanges._rawValue, (uint64_t)&selRef_addPendingRecordZoneChanges_, v1, v2, v3, v4, v5, v6, v7);
}

Swift::Void __swiftcall CKSyncEngine.State.remove(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
  sub_18AFBE2E0((uint64_t)pendingRecordZoneChanges._rawValue, (uint64_t)&selRef_removePendingRecordZoneChanges_, v1, v2, v3, v4, v5, v6, v7);
}

void sub_18AFBE2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18AF33850();
  int v11 = v10;
  int v12 = *(void **)(v9 + 16);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    sub_18AF41048();
    do
    {
      id v15 = sub_18AF33E44();
      sub_18AF33C14(v15);
      sub_18AF2AD74();
      sub_18AF3844C();
      sub_18AF35600();
      specialized ContiguousArray._endMutation()();
      --v14;
    }
    while (v14);
  }
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  sub_18AF384EC();
  sub_18AF193C8();
  objc_msgSend(v12, *v11, a9);
  sub_18AF16CC4();
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
  sub_18AFBE3C0((uint64_t)pendingDatabaseChanges._rawValue, (uint64_t)&selRef_addPendingDatabaseChanges_, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17,
    v18,
    v19,
    v20);
}

Swift::Void __swiftcall CKSyncEngine.State.remove(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
  sub_18AFBE3C0((uint64_t)pendingDatabaseChanges._rawValue, (uint64_t)&selRef_removePendingDatabaseChanges_, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17,
    v18,
    v19,
    v20);
}

void sub_18AFBE3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, SEL *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF33850();
  a21 = v23;
  a22 = v25;
  int v26 = v24;
  uint64_t v27 = *(void **)(v22 + 16);
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v30 = (uint64_t *)MEMORY[0x1E4FBC860];
  if (v29)
  {
    a9 = v24;
    a10 = MEMORY[0x1E4FBC860];
    sub_18AF41048();
    do
    {
      sub_18AF42D88();
      if (v32) {
        char v33 = &selRef_initWithZone_;
      }
      else {
        char v33 = &selRef_initWithZoneID_;
      }
      objc_msgSend(objc_allocWithZone(*v31), *v33, v30);
      sub_18AF2AD74();
      sub_18AF3844C();
      sub_18AF35600();
      uint64_t v30 = &a10;
      specialized ContiguousArray._endMutation()();
      --v29;
    }
    while (v29);
    int v26 = a9;
  }
  sub_18AF34EA0(0, &qword_1E9125230);
  sub_18AF384EC();
  sub_18AF193C8();
  objc_msgSend(v27, *v26, a9);
  sub_18AF16CC4();
}

void sub_18AFBE4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18AF33850();
  char v11 = v10;
  uint64_t v12 = *(void **)(v9 + 16);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    sub_18AF41048();
    do
    {
      id v15 = sub_18AF33E44();
      sub_18AF33C14(v15);
      sub_18AF2AD74();
      sub_18AF3844C();
      sub_18AF35600();
      specialized ContiguousArray._endMutation()();
      --v14;
    }
    while (v14);
  }
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  sub_18AF384EC();
  sub_18AF193C8();
  objc_msgSend(v12, sel_markRecordZoneChanges_inFlight_, a9, v11 & 1);
  sub_18AF16CC4();
}

void sub_18AFBE584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id CKSyncEngine.State.needsToFetchDatabaseChanges.getter()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_needsToFetchDatabaseChanges);
}

id (*CKSyncEngine.State.needsToFetchDatabaseChanges.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(v1 + 8) = objc_msgSend((id)sub_18AF33990(a1), sel_needsToFetchDatabaseChanges);
  return sub_18AFBE600;
}

id sub_18AFBE600(uint64_t a1, uint64_t a2)
{
  return sub_18AFBE7B0(a1, a2, (SEL *)&selRef_setNeedsToFetchDatabaseChanges_);
}

id CKSyncEngine.State.serverChangeTokenForDatabase.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_serverChangeTokenForDatabase);

  return v1;
}

void sub_18AFBE644(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CKSyncEngine.State.serverChangeTokenForDatabase.setter(v1);
}

void CKSyncEngine.State.serverChangeTokenForDatabase.setter(void *a1)
{
  objc_msgSend(*(id *)(v1 + 16), sel_setServerChangeTokenForDatabase_, a1);
}

void (*CKSyncEngine.State.serverChangeTokenForDatabase.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, sel_serverChangeTokenForDatabase);
  return sub_18AFBE718;
}

void sub_18AFBE718(uint64_t a1, uint64_t a2)
{
}

id CKSyncEngine.State.needsToSaveDatabaseSubscription.getter()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_needsToSaveDatabaseSubscription);
}

id CKSyncEngine.State.needsToSaveDatabaseSubscription.setter(char a1)
{
  return sub_18AF38A28(a1, sel_setNeedsToSaveDatabaseSubscription_, *(void **)(v1 + 16));
}

id (*CKSyncEngine.State.needsToSaveDatabaseSubscription.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(v1 + 8) = objc_msgSend((id)sub_18AF33990(a1), sel_needsToSaveDatabaseSubscription);
  return sub_18AFBE7A4;
}

id sub_18AFBE7A4(uint64_t a1, uint64_t a2)
{
  return sub_18AFBE7B0(a1, a2, (SEL *)&selRef_setNeedsToSaveDatabaseSubscription_);
}

id sub_18AFBE7B0(uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(*(id *)a1, *a3, *(unsigned __int8 *)(a1 + 8));
}

uint64_t CKSyncEngine.State.existingDatabaseSubscriptionID.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_existingDatabaseSubscriptionID);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18AFBE830(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  CKSyncEngine.State.existingDatabaseSubscriptionID.setter(v1, v2);
}

void CKSyncEngine.State.existingDatabaseSubscriptionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  if (a2)
  {
    id v4 = (id)MEMORY[0x18C128F60]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = 0;
  }
  objc_msgSend(v3, sel_setExistingDatabaseSubscriptionID_, v4);
}

void (*CKSyncEngine.State.existingDatabaseSubscriptionID.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKSyncEngine.State.existingDatabaseSubscriptionID.getter();
  a1[1] = v3;
  return sub_18AFBE930;
}

void sub_18AFBE930(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    CKSyncEngine.State.existingDatabaseSubscriptionID.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKSyncEngine.State.existingDatabaseSubscriptionID.setter(*a1, v2);
  }
}

Swift::Void __swiftcall CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(Swift::Bool _, Swift::OpaquePointer a2)
{
  if ((unint64_t)a2._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(((unint64_t)a2._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void **)(v2 + 16);
  BOOL v8 = _;
  do
  {
    if (((unint64_t)a2._rawValue & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x18C1298C0](v6, a2._rawValue);
    }
    else {
      id v9 = *((id *)a2._rawValue + v6 + 4);
    }
    char v10 = v9;
    ++v6;
    objc_msgSend(v7, sel_setNeedsToFetchChanges_forRecordZoneID_, v8, v9);
  }
  while (v5 != v6);
LABEL_9:

  swift_bridgeObjectRelease();
}

CKServerChangeToken_optional __swiftcall CKSyncEngine.State.serverChangeToken(for:)(CKRecordZoneID *a1)
{
  id v2 = objc_msgSend(*(id *)(v1 + 16), sel_serverChangeTokenForZoneID_, a1);

  uint64_t v3 = (objc_class *)v2;
  result.value._data = v4;
  result.value.super.Class isa = v3;
  result.is_nil = v5;
  return result;
}

Swift::Void __swiftcall CKSyncEngine.State.setServerChangeToken(_:for:)(CKServerChangeToken_optional _, CKRecordZoneID *a2)
{
  objc_msgSend(*(id *)(v2 + 16), sel_setServerChangeToken_forZoneID_, _.value.super.isa, _.value._data);
}

id CKSyncEngine.State.lastKnownUserRecordID.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_lastKnownUserRecordID);

  return v1;
}

void sub_18AFBEB2C(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CKSyncEngine.State.lastKnownUserRecordID.setter(v1);
}

void CKSyncEngine.State.lastKnownUserRecordID.setter(void *a1)
{
  objc_msgSend(*(id *)(v1 + 16), sel_setLastKnownUserRecordID_, a1);
}

void (*CKSyncEngine.State.lastKnownUserRecordID.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, sel_lastKnownUserRecordID);
  return sub_18AFBEC00;
}

void sub_18AFBEC00(uint64_t a1, uint64_t a2)
{
}

void sub_18AFBEC0C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v3 = *(id *)a1;
  objc_msgSend(*(id *)(a1 + 8), *a3, *(void *)a1);
}

void sub_18AFBEC54()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = (id)MEMORY[0x18C128F60]();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setLoggingID_, v2);
}

uint64_t CKSyncEngine.State.Serialization.data.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_18AF5F6FC(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t CKSyncEngine.State.Serialization.init(deprecatedData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_18AFBECF4(uint64_t a1, uint64_t a2)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_18AFBED6C()
{
  return 1635017060;
}

uint64_t sub_18AFBED80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18AFBECF4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_18AFBEDAC(uint64_t a1)
{
  unint64_t v2 = sub_18AFBF82C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AFBEDE8(uint64_t a1)
{
  unint64_t v2 = sub_18AFBF82C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CKSyncEngine.State.Serialization.encode(to:)(void *a1)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E9124DB0);
  sub_18AF22CB0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_18AF38F60();
  sub_18AF25FCC(a1, a1[3]);
  sub_18AFBF82C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_18AF8E7D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
}

uint64_t CKSyncEngine.State.Serialization.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v6 = sub_18AF161EC((uint64_t *)&unk_1E9124E90);
  sub_18AF22CB0();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  sub_18AF38F60();
  sub_18AF25FCC(a1, a1[3]);
  sub_18AFBF82C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_18AF8F094();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
    *a2 = v11;
  }
  return sub_18AF40A30((uint64_t)a1);
}

uint64_t sub_18AFBF06C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return CKSyncEngine.State.Serialization.init(from:)(a1, a2);
}

uint64_t sub_18AFBF084(void *a1)
{
  return CKSyncEngine.State.Serialization.encode(to:)(a1);
}

uint64_t CKSyncEngine.State.deinit()
{
  return v0;
}

uint64_t CKSyncEngine.State.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t static CKSyncEngine.PendingRecordZoneChange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)a2;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    char v6 = 0;
    return v6 & 1;
  }
  if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  id v4 = v3;
  id v5 = v2;
  char v6 = static NSObject.== infix(_:_:)();

  return v6 & 1;
}

uint64_t static CKSyncEngine.PendingDatabaseChange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  int v4 = *(unsigned __int8 *)(a1 + 8);
  id v5 = *(void **)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  if (v4 != 1)
  {
    id v7 = objc_msgSend(v3, sel_zoneID);
    if (!v6) {
      goto LABEL_3;
    }
LABEL_5:
    id v8 = v5;
    goto LABEL_6;
  }
  id v7 = v3;
  if (v6) {
    goto LABEL_5;
  }
LABEL_3:
  id v8 = objc_msgSend(v5, sel_zoneID);
LABEL_6:
  uint64_t v9 = v8;
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  int v10 = static NSObject.== infix(_:_:)();

  return v10 & (v4 ^ v6 ^ 1u);
}

uint64_t _s8CloudKit12CKSyncEngineC23PendingRecordZoneChangeO11descriptionSSvg_0()
{
  if (*(unsigned char *)(v0 + 8)) {
    uint64_t v9 = 0x286574656C6564;
  }
  else {
    uint64_t v9 = 0x2865766173;
  }
  id v1 = *(id *)v0;
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);

  return v9;
}

void _s8CloudKit12CKSyncEngineC23PendingRecordZoneChangeO4hash4intoys6HasherVz_tF_0()
{
  id v1 = *(void **)v0;
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  id v2 = v1;
  NSObject.hash(into:)();
}

Swift::Int _s8CloudKit12CKSyncEngineC23PendingRecordZoneChangeO9hashValueSivg_0()
{
  id v1 = *(void **)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  id v3 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int sub_18AFBF430()
{
  id v1 = *(void **)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  id v3 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

id sub_18AFBF498(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v11[0] = 0;
  id v7 = objc_msgSend(v3, sel_initWithData_error_, isa, v11);

  if (v7)
  {
    id v8 = v11[0];
  }
  else
  {
    id v9 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_18AF5AF68(a1, a2);
  return v7;
}

void *sub_18AFBF578(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_18AF161EC(&qword_1E9124D50);
  id v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  void v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  uint64_t v5 = sub_18B0007CC((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_18AFBF634(uint64_t a1)
{
  return sub_18AF33EEC(a1, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))sub_18B000C88);
}

void sub_18AFBF64C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (a4 >> 1 != a3)
  {
    sub_18AF2A67C();
    if (!(v7 ^ v8 | v6))
    {
      sub_18AF161EC(&qword_1E91255D0);
      id v9 = (const void *)sub_18AF19FB8();
      size_t v10 = j__malloc_size(v9);
      sub_18AF3AA38(v10);
    }
    if (v5 != v4)
    {
      sub_18AF341F4();
      return;
    }
    goto LABEL_9;
  }
}

void sub_18AFBF6EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (a4 >> 1 != a3)
  {
    sub_18AF2A67C();
    if (!(v7 ^ v8 | v6))
    {
      sub_18AF161EC(&qword_1E9124EC0);
      id v9 = (const void *)sub_18AF19FB8();
      size_t v10 = j__malloc_size(v9);
      sub_18AF3AA38(v10);
    }
    if (v5 != v4)
    {
      sub_18AFA7EA4();
      return;
    }
    goto LABEL_9;
  }
}

void sub_18AFBF78C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v7)
  {
    sub_18AF2A67C();
    if (!(v9 ^ v10 | v8))
    {
      sub_18AF161EC(&qword_1E91255B8);
      long long v11 = (const void *)sub_18AF19FB8();
      size_t v12 = j__malloc_size(v11);
      sub_18AF340CC(v12);
    }
    if (v6 != v4)
    {
      sub_18AFA7990(v5 + 8 * v4, v7);
      return;
    }
    goto LABEL_9;
  }
}

unint64_t sub_18AFBF82C()
{
  unint64_t result = qword_1E9124E80;
  if (!qword_1E9124E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124E80);
  }
  return result;
}

unint64_t sub_18AFBF87C()
{
  unint64_t result = qword_1E9124F80;
  if (!qword_1E9124F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124F80);
  }
  return result;
}

unint64_t sub_18AFBF8CC()
{
  unint64_t result = qword_1E9126C68;
  if (!qword_1E9126C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126C68);
  }
  return result;
}

void sub_18AFBF918()
{
  sub_18AF16D80();
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  *uint64_t v0 = v1;
}

void sub_18AFBF944()
{
  sub_18AF16D80();
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  *uint64_t v0 = v1;
}

id sub_18AFBF970()
{
  sub_18AF16D80();
  id result = CKSyncEngine.State.hasPendingUntrackedChanges.getter();
  *uint64_t v0 = result & 1;
  return result;
}

id sub_18AFBF99C(char *a1)
{
  return CKSyncEngine.State.hasPendingUntrackedChanges.setter(*a1);
}

id sub_18AFBF9C4()
{
  sub_18AF16D80();
  id result = CKSyncEngine.State.needsToFetchDatabaseChanges.getter();
  *uint64_t v0 = result & 1;
  return result;
}

id sub_18AFBF9F0(char *a1)
{
  return CKSyncEngine.State.needsToFetchDatabaseChanges.setter(*a1);
}

id sub_18AFBFA18()
{
  sub_18AF16D80();
  id result = CKSyncEngine.State.serverChangeTokenForDatabase.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_18AFBFA44()
{
  sub_18AF16D80();
  id result = CKSyncEngine.State.needsToSaveDatabaseSubscription.getter();
  *uint64_t v0 = result & 1;
  return result;
}

id sub_18AFBFA70(char *a1)
{
  return CKSyncEngine.State.needsToSaveDatabaseSubscription.setter(*a1);
}

uint64_t sub_18AFBFA98()
{
  sub_18AF16D80();
  uint64_t result = CKSyncEngine.State.existingDatabaseSubscriptionID.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

id sub_18AFBFAC4()
{
  sub_18AF16D80();
  id result = CKSyncEngine.State.lastKnownUserRecordID.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t type metadata accessor for CKSyncEngine.State()
{
  return self;
}

uint64_t method lookup function for CKSyncEngine.State(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKSyncEngine.State);
}

uint64_t dispatch thunk of CKSyncEngine.State.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of CKSyncEngine.State.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for CKSyncEngine.State.Serialization()
{
}

void type metadata accessor for CKSyncEngine.PendingRecordZoneChange()
{
}

uint64_t _s21PendingDatabaseChangeOwCP(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

uint64_t _s21PendingDatabaseChangeOwca(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t _s21PendingDatabaseChangeOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t _s23PendingRecordZoneChangeOwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s23PendingRecordZoneChangeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)id result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_18AFBFCD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18AFBFCDC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

void type metadata accessor for CKSyncEngine.PendingDatabaseChange()
{
}

unsigned char *_s5StateC13SerializationV10CodingKeysOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *id result = a2;
        return result;
      case 2:
        *(_WORD *)id result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)id result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *id result = 0;
      break;
    case 2:
      *(_WORD *)id result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18AFBFD90);
    case 4:
      *(_DWORD *)id result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s5StateC13SerializationV10CodingKeysOMa()
{
  return &_s5StateC13SerializationV10CodingKeysON;
}

unint64_t sub_18AFBFDCC()
{
  unint64_t result = qword_1E9126C70;
  if (!qword_1E9126C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126C70);
  }
  return result;
}

unint64_t sub_18AFBFE1C()
{
  unint64_t result = qword_1E9124E70;
  if (!qword_1E9124E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124E70);
  }
  return result;
}

unint64_t sub_18AFBFE6C()
{
  unint64_t result = qword_1E9124E88;
  if (!qword_1E9124E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124E88);
  }
  return result;
}

void (*CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.getter())(uint64_t a1, void *a2, char a3)
{
  unint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_systemSharingUIDidSaveShareBlock);
  if (result)
  {
    int v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AFBFF68@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    id v6 = sub_18AFC083C;
  }
  else
  {
    id v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AFBFFD8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFC0840;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter((uint64_t)v4, v3);
}

id CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF61DC8;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF61DD0;
    uint64_t v9[3] = &unk_1ED7F1180;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setSystemSharingUIDidSaveShareBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setSystemSharingUIDidSaveShareBlock_, 0);
  }
}

uint64_t sub_18AFC0194()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t (*CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.getter();
  a1[1] = v3;
  return sub_18AFC0214;
}

uint64_t sub_18AFC0214(uint64_t *a1, char a2)
{
  return sub_18AFC0788(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_systemSharingUIDidStopSharingBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF55F48;
    *(void *)(v4 + 24) = v3;
    return sub_18AFC05D8;
  }
  return result;
}

uint64_t sub_18AFC02EC@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFC083C;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AFC035C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFC0888;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter((uint64_t)v4, v3);
}

id CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AFC066C;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AFC0674;
    uint64_t v9[3] = &unk_1ED7F1478;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setSystemSharingUIDidStopSharingBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setSystemSharingUIDidStopSharingBlock_, 0);
  }
}

void sub_18AFC0518(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id))
{
  if (a3)
  {
    id v7 = a2;
    a4(a1, a2);
    sub_18AF53C0C(a2, 1);
  }
  else
  {
    a4(a1, 0);
  }
}

uint64_t sub_18AFC05A0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AFC05D8(uint64_t a1, void *a2, char a3)
{
  sub_18AFC0518(a1, a2, a3 & 1, *(void (**)(uint64_t, id))(v3 + 16));
}

void sub_18AFC05E4(uint64_t a1, id a2, void (*a3)(uint64_t, id, uint64_t))
{
  if (a2)
  {
    id v6 = a2;
    a3(a1, a2, 1);
  }
  else
  {
    a3(a1, 0, 0);
  }
}

void sub_18AFC066C(uint64_t a1, void *a2)
{
  sub_18AFC05E4(a1, a2, *(void (**)(uint64_t, id, uint64_t))(v2 + 16));
}

void sub_18AFC0674(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t (*CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.getter();
  a1[1] = v3;
  return sub_18AFC0748;
}

uint64_t sub_18AFC0748(uint64_t *a1, char a2)
{
  return sub_18AFC0788(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

uint64_t sub_18AFC0788(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AFC0840(uint64_t a1, uint64_t a2, char a3)
{
  return sub_18AFB5D74(a1, a2, a3 & 1, *(uint64_t (**)(uint64_t *, uint64_t *))(v3 + 16));
}

void sub_18AFC088C()
{
  qword_1E9126C78 = 4;
}

uint64_t static CKShareParticipantAcceptanceStatus.unsubscribed.getter()
{
  return sub_18AF94FE0(&qword_1E9125700, (uint64_t)&qword_1E9126C78);
}

void sub_18AFC08C0()
{
  qword_1E9126C80 = 2;
}

uint64_t static CKShareParticipantRole.administrator.getter()
{
  return sub_18AF94FE0(&qword_1E9125708, (uint64_t)&qword_1E9126C80);
}

void sub_18AFC08F4()
{
  qword_1E9126C88 = 4;
}

uint64_t static CKShareParticipantPermission.derived.getter()
{
  return sub_18AF94FE0(qword_1E9125710, (uint64_t)&qword_1E9126C88);
}

uint64_t CKShareParticipant.participantID.getter()
{
  id v1 = objc_msgSend(v0, sel_participantID);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_18AFC0980()
{
}

void CKShareParticipant.participantID.setter()
{
  id v1 = (id)MEMORY[0x18C128F60]();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setParticipantID_, v1);
}

void (*CKShareParticipant.participantID.modify(uint64_t *a1))(void *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = objc_msgSend(v1, sel_participantID);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return sub_18AFC0A98;
}

void sub_18AFC0A98(void *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)a1[2];
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v5 = (id)MEMORY[0x18C128F60](v3, v2);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setParticipantID_, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = (id)MEMORY[0x18C128F60](*a1, v2);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setParticipantID_, v5);
  }
}

uint64_t sub_18AFC0B50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKShareParticipant.participantID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

CKSyncEngineSendChangesContext __swiftcall CKSyncEngine.SendChangesContext.contextObject()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)CKSyncEngine.SendChangesOptions.optionsObject()();
  uint64_t v3 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)CKSyncEngineSendChangesContext), sel_initWithReason_options_, v1, v2);

  uint64_t v6 = v3;
  result._options = v5;
  result._reason = v4;
  result.super.Class isa = v6;
  return result;
}

CKSyncEngineFetchChangesContext __swiftcall CKSyncEngine.FetchChangesContext.contextObject()()
{
  uint64_t v1 = *(unsigned __int8 *)v0;
  CKSyncEngine.FetchChangesOptions.optionsObject()(v0[1]);
  uint64_t v3 = v2;
  int64_t v4 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesContext), sel_initWithReason_options_, v1, v2);

  uint64_t v7 = v4;
  result._options = v6;
  result._reason = v5;
  result.super.Class isa = v7;
  return result;
}

uint64_t sub_18AFC0C90(unint64_t a1)
{
  return sub_18AF349A8(a1, (unint64_t *)&unk_1E9125560, (uint64_t)off_1E545E980, &qword_1E9125458, (void (*)(id *, id))sub_18AFF1ABC);
}

uint64_t sub_18AFC0CC0(uint64_t a1)
{
  type metadata accessor for Scope(0);
  sub_18AFC3BD8();
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v9 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      Swift::UInt v5 = *(void *)(a1 + 8 * i + 32);
      sub_18AFF19D4(&v8, v5);
    }
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    uint64_t v6 = v2;
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_18AFC0D64(unint64_t a1)
{
  return sub_18AF349A8(a1, &qword_1E91255F0, (uint64_t)off_1E545EEB0, (unint64_t *)&qword_1E91251C8, (void (*)(id *, id))sub_18AFF1C70);
}

uint64_t sub_18AFC0D94(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_18AFF1E24(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_18AFC0E48(uint64_t a1)
{
  sub_18AFC3B8C();
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v11 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int64_t v4 = (char *)(a1 + 40);
    do
    {
      uint64_t v5 = (void *)*((void *)v4 - 1);
      char v6 = *v4;
      v4 += 16;
      id v7 = v5;
      sub_18AFF1FB0((uint64_t)v10, v5, v6);

      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    uint64_t v8 = v2;
    swift_bridgeObjectRelease();
  }
  return v8;
}

void CKSyncEngineFetchChangesContext.contextStruct()(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_reason);
  if (!v3)
  {
    char v4 = 0;
LABEL_5:
    id v5 = objc_msgSend(v1, sel_options);
    CKSyncEngineFetchChangesOptions.optionsStruct()((uint64_t)&v13);

    uint64_t v6 = v13;
    char v7 = v14;
    uint64_t v8 = v16;
    char v9 = v17;
    uint64_t v10 = v18;
    char v11 = v19;
    *(unsigned char *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = v15;
    *(void *)(a1 + 40) = v8;
    *(unsigned char *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    *(unsigned char *)(a1 + 64) = v11;
    return;
  }
  if (v3 == (id)1)
  {
    char v4 = 1;
    goto LABEL_5;
  }
  _StringGuts.grow(_:)(23);
  v12._object = (void *)0x800000018B1D3E70;
  v12._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v12);
  type metadata accessor for CKSyncEngineSyncReason(0);
  _print_unlocked<A, B>(_:_:)();
  sub_18AF3096C();
  __break(1u);
}

void CKSyncEngineSendChangesContext.contextStruct()(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_reason);
  if (!v3)
  {
    char v4 = 0;
LABEL_5:
    id v5 = objc_msgSend(v1, sel_options);
    CKSyncEngineSendChangesOptions.optionsStruct()((uint64_t)&v10);

    uint64_t v6 = v10;
    char v7 = v11;
    uint64_t v8 = v12;
    *(unsigned char *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    return;
  }
  if (v3 == (id)1)
  {
    char v4 = 1;
    goto LABEL_5;
  }
  _StringGuts.grow(_:)(23);
  v9._object = (void *)0x800000018B1D3E70;
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  type metadata accessor for CKSyncEngineSyncReason(0);
  _print_unlocked<A, B>(_:_:)();
  sub_18AF3096C();
  __break(1u);
}

uint64_t sub_18AFC1180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (!v5) {
    return 0;
  }
  for (uint64_t i = (uint64_t *)(a5 + 56); ; i += 4)
  {
    uint64_t v11 = *(i - 1);
    uint64_t v12 = *i;
    BOOL v13 = *(i - 3) == a1 && *(i - 2) == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      BOOL v14 = v11 == a3 && v12 == a4;
      if (v14 || (sub_18AF3AA50() & 1) != 0) {
        break;
      }
    }
    if (!--v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_18AFC122C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v5 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v3 = v6;
    BOOL v6 = v6 || v5 == v2;
    if (v6) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_18AFC128C(uint64_t a1, unint64_t a2)
{
  return sub_18AFC12A0(a1, a2, (unint64_t *)&qword_1EB279460);
}

uint64_t sub_18AFC12A0(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (a2 >> 62) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v5)
  {
    while (1)
    {
      id v6 = (a2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C1298C0](0, a2) : *(id *)(a2 + 32);
      char v7 = v6;
      sub_18AF34EA0(0, a3);
      char v8 = sub_18AF3565C();

      if (v8) {
        break;
      }
      if (v5 != 1)
      {
        uint64_t v11 = 5;
        while (1)
        {
          a3 = (unint64_t *)(v11 - 4);
          if ((a2 & 0xC000000000000001) != 0) {
            sub_18AF343DC();
          }
          else {
            id v12 = *(id *)(a2 + 8 * v11);
          }
          BOOL v13 = v12;
          uint64_t v14 = v11 - 3;
          if (__OFADD__(a3, 1)) {
            break;
          }
          char v9 = sub_18AF3565C();

          if ((v9 & 1) == 0)
          {
            ++v11;
            if (v14 != v5) {
              continue;
            }
          }
          goto LABEL_9;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        if (v5) {
          continue;
        }
      }
      goto LABEL_8;
    }
    char v9 = 1;
  }
  else
  {
LABEL_8:
    char v9 = 0;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_18AFC13E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFC1400(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  swift_bridgeObjectRetain();
  return CKSyncEngine.FetchChangesOptions.scope.setter(&v3);
}

uint64_t CKSyncEngine.FetchChangesOptions.scope.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return sub_18AFC1520();
}

uint64_t (*CKSyncEngine.FetchChangesOptions.scope.modify(void *a1))()
{
  *a1 = v1;
  return sub_18AFC3C2C;
}

void sub_18AFC14B0(id *a1)
{
}

void CKSyncEngine.FetchChangesOptions.operationGroup.setter(id obj)
{
  objc_storeStrong((id *)(v1 + 16), obj);
  sub_18AFC1520();
}

uint64_t sub_18AFC1520()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[2];
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18AF35BFC(v3);
  if (v4 && (sub_18AF2A68C() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for SyncEngine();
    uint64_t v5 = swift_bridgeObjectRetain();
    BOOL v13 = sub_18AF37A34(v5, v6, v7, v8, v9, v10, v11, v12, v1);
    uint64_t v16 = sub_18AF36168((uint64_t)v13, v14, v15);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF36054(v16, v18, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t (*CKSyncEngine.FetchChangesOptions.operationGroup.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return sub_18AFC1664;
}

uint64_t sub_18AFC1664(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_18AFC1520();
  }
  return result;
}

uint64_t CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.FetchChangesOptions.zoneConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKSyncEngine.FetchChangesOptions.zoneConfigurations.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.zoneConfigurations.modify())()
{
  return nullsub_2;
}

void CKSyncEngine.FetchChangesOptions.ZoneConfiguration.init()(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0;
}

void CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 40);
  *(void *)(a1 + 8) = v2;
}

uint64_t CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.setter(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  *(unsigned char *)(v1 + 40) = *(unsigned char *)result;
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.getter()
{
  return *v0;
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.resultsLimit.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.resultsLimit.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.ZoneConfiguration.resultsLimit.modify())()
{
  return nullsub_2;
}

CKSyncEngineFetchChangesZoneConfiguration __swiftcall CKSyncEngine.FetchChangesOptions.ZoneConfiguration.configurationObject()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  id v3 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesZoneConfiguration), sel_init);
  objc_msgSend(v3, sel_setShouldFetchAssetContents_, v1);
  objc_msgSend(v3, sel_setResultsLimit_, v2);
  uint64_t v6 = (objc_class *)v3;
  result._resultsLimit = v5;
  result.super.Class isa = v6;
  result._shouldFetchAssetContents = v4;
  return result;
}

CKSyncEngineFetchChangesScope __swiftcall CKSyncEngine.FetchChangesOptions.Scope.scopeObject()()
{
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) == 1)
    {
      unint64_t v1 = swift_bridgeObjectRetain();
      uint64_t v2 = sub_18AF349A8(v1, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (void (*)(id *, id))sub_18AF34F50);
      id v3 = objc_allocWithZone((Class)CKSyncEngineFetchChangesScope);
      BOOL v4 = (objc_class *)sub_18AF34900(v2, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (SEL *)&selRef_initWithZoneIDs_);
    }
    else
    {
      id v8 = objc_allocWithZone((Class)CKSyncEngineFetchChangesScope);
      BOOL v4 = (objc_class *)objc_msgSend(v8, sel_init);
    }
  }
  else
  {
    sub_18AF34EA0(0, &qword_1E9126C90);
    unint64_t v7 = swift_bridgeObjectRetain();
    sub_18AF349A8(v7, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (void (*)(id *, id))sub_18AF34F50);
    BOOL v4 = (objc_class *)sub_18AFC2370();
  }
  result._excludedZoneIDs = v6;
  result._zoneIDs = v5;
  result.super.Class isa = v4;
  return result;
}

Swift::Bool __swiftcall CKSyncEngine.FetchChangesOptions.Scope.contains(_:)(CKRecordZoneID *a1)
{
  unint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 8))
  {
    if (*(unsigned char *)(v1 + 8) == 1) {
      char v3 = sub_18AFC12A0((uint64_t)a1, v2, (unint64_t *)&qword_1EB279460);
    }
    else {
      char v3 = 1;
    }
  }
  else
  {
    char v3 = sub_18AFC12A0((uint64_t)a1, v2, (unint64_t *)&qword_1EB279460) ^ 1;
  }
  return v3 & 1;
}

uint64_t CKSyncEngine.FetchChangesOptions.forceFetchChanges.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t CKSyncEngine.FetchChangesOptions.forceFetchChanges.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.forceFetchChanges.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.FetchChangesContext.options.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  BOOL v4 = *(void **)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  char v6 = *(unsigned char *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  char v8 = *(unsigned char *)(v1 + 64);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  id v9 = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFC1AC4(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  swift_bridgeObjectRetain();
  return CKSyncEngine.SendChangesOptions.scope.setter(&v3);
}

uint64_t CKSyncEngine.SendChangesOptions.scope.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return sub_18AFC1BE4();
}

uint64_t (*CKSyncEngine.SendChangesOptions.scope.modify(void *a1))()
{
  *a1 = v1;
  return sub_18AFC3C30;
}

void sub_18AFC1B74(id *a1)
{
}

void CKSyncEngine.SendChangesOptions.operationGroup.setter(id obj)
{
  objc_storeStrong((id *)(v1 + 16), obj);
  sub_18AFC1BE4();
}

uint64_t sub_18AFC1BE4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  id v2 = v1;
  sub_18AF35BFC(v2);
  if (v3 && (sub_18AF2AD8C(), (sub_18AF35EF4() & 1) == 0))
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for SyncEngine();
    swift_bridgeObjectRetain();
    sub_18AF362E8();
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF36054(v5, v7, v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t (*CKSyncEngine.SendChangesOptions.operationGroup.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return sub_18AFC1CFC;
}

uint64_t sub_18AFC1CFC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_18AFC1BE4();
  }
  return result;
}

Swift::Bool __swiftcall CKSyncEngine.SendChangesOptions.Scope.contains(_:)(CKRecordID a1)
{
  sub_18AF19F3C();
  char v3 = 1;
  switch(v4)
  {
    case 1:
      id v7 = objc_msgSend(v2, sel_zoneID);
      char v3 = sub_18AFC12A0((uint64_t)v7, v1, (unint64_t *)&qword_1EB279460);

      break;
    case 2:
      char v3 = sub_18AFC12A0((uint64_t)v2, v1, &qword_1E91255F0);
      break;
    case 3:
      return v3 & 1;
    default:
      id v5 = objc_msgSend(v2, sel_zoneID);
      char v6 = sub_18AFC12A0((uint64_t)v5, v1, (unint64_t *)&qword_1EB279460);

      char v3 = v6 ^ 1;
      break;
  }
  return v3 & 1;
}

uint64_t CKSyncEngine.SendChangesOptions.Scope.contains(_:)()
{
  sub_18AF19F3C();
  char v2 = 1;
  switch(v3)
  {
    case 1:
      id v7 = v1;
      id v8 = objc_msgSend(v7, sel_zoneID);
      char v2 = sub_18AFC12A0((uint64_t)v8, v0, (unint64_t *)&qword_1EB279460);

      break;
    case 2:
      id v9 = v1;
      char v2 = sub_18AFC12A0((uint64_t)v9, v0, &qword_1E91255F0);

      break;
    case 3:
      return v2 & 1;
    default:
      id v4 = v1;
      id v5 = objc_msgSend(v4, sel_zoneID);
      char v6 = sub_18AFC12A0((uint64_t)v5, v0, (unint64_t *)&qword_1EB279460);

      char v2 = v6 ^ 1;
      break;
  }
  return v2 & 1;
}

BOOL CKSyncEngine.SendChangesOptions.Scope.contains(_:)(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    id v4 = v3;
  }
  else
  {
    LOBYTE(v8) = *(unsigned char *)(v1 + 8);
    id v4 = (CKRecordZoneID *)objc_msgSend(v3, sel_zoneID, *(void *)v1, v8);
  }
  id v5 = v4;
  Swift::Bool v6 = CKSyncEngine.SendChangesOptions.Scope.contains(_:)(v4);

  return v6;
}

Swift::Bool __swiftcall CKSyncEngine.SendChangesOptions.Scope.contains(_:)(CKRecordZoneID *a1)
{
  sub_18AF33850();
  sub_18AF19F3C();
  uint64_t v3 = v2;
  switch(v4)
  {
    case 1:
      if (v1 >> 62)
      {
        sub_18AF39168();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11) {
          goto LABEL_45;
        }
      }
      unint64_t v12 = v1 & 0xC000000000000001;
      if ((v1 & 0xC000000000000001) != 0) {
        id v13 = (id)MEMORY[0x18C1298C0](0);
      }
      else {
        id v13 = *(id *)(v1 + 32);
      }
      uint64_t v14 = v13;
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      char v15 = static NSObject.== infix(_:_:)();

      if ((v15 & 1) != 0 || v11 == 1) {
        goto LABEL_45;
      }
      id v16 = v12 ? (id)MEMORY[0x18C1298C0](1) : *(id *)(v1 + 40);
      uint64_t v29 = v16;
      char v30 = static NSObject.== infix(_:_:)();

      if ((v30 & 1) != 0 || v11 == 2) {
        goto LABEL_45;
      }
      uint64_t v32 = 6;
      while (1)
      {
        if (v12) {
          sub_18AF343DC();
        }
        else {
          id v33 = *(id *)(v1 + 8 * v32);
        }
        char v34 = v33;
        uint64_t v35 = v32 - 3;
        if (__OFADD__(v32 - 4, 1)) {
          goto LABEL_56;
        }
        char v36 = sub_18AF3565C();

        if ((v36 & 1) == 0)
        {
          ++v32;
          if (v35 != v11) {
            continue;
          }
        }
        goto LABEL_45;
      }
    case 2:
      if (v1 >> 62)
      {
        sub_18AF39168();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v17 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v17)
      {
        unint64_t v37 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        if (v17 < 0)
        {
          __break(1u);
          JUMPOUT(0x18AFC2360);
        }
        uint64_t v18 = 0;
        do
        {
          if ((v1 & 0xC000000000000001) != 0) {
            sub_18AF343DC();
          }
          else {
            id v19 = sub_18AF33E60();
          }
          uint64_t v20 = v19;
          ++v18;
          objc_msgSend(v19, sel_zoneID);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v17 != v18);
        unint64_t v21 = v37;
      }
      else
      {
        unint64_t v21 = MEMORY[0x1E4FBC860];
      }
      sub_18AFC12A0(v3, v21, (unint64_t *)&qword_1EB279460);
      goto LABEL_45;
    case 3:
      goto LABEL_46;
    default:
      if (v1 >> 62) {
        goto LABEL_57;
      }
      uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v5) {
        goto LABEL_45;
      }
      break;
  }
  do
  {
    unint64_t v6 = v1 & 0xC000000000000001;
    if ((v1 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x18C1298C0](0);
    }
    else {
      id v7 = *(id *)(v1 + 32);
    }
    uint64_t v8 = v7;
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) != 0 || v5 == 1) {
      break;
    }
    id v10 = v6 ? (id)MEMORY[0x18C1298C0](1) : *(id *)(v1 + 40);
    uint64_t v22 = v10;
    char v23 = static NSObject.== infix(_:_:)();

    if ((v23 & 1) != 0 || v5 == 2) {
      break;
    }
    uint64_t v24 = 6;
    while (1)
    {
      if (v6) {
        sub_18AF343DC();
      }
      else {
        id v25 = *(id *)(v1 + 8 * v24);
      }
      int v26 = v25;
      uint64_t v27 = v24 - 3;
      if (__OFADD__(v24 - 4, 1)) {
        break;
      }
      char v28 = sub_18AF3565C();

      if ((v28 & 1) == 0)
      {
        ++v24;
        if (v27 != v5) {
          continue;
        }
      }
      goto LABEL_45;
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    sub_18AF39168();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (v5);
LABEL_45:
  swift_bridgeObjectRelease();
LABEL_46:
  sub_18AF16CC4();
  return result;
}

id sub_18AFC2370()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  Set._bridgeToObjectiveC()();
  sub_18AF22CF0();
  id v1 = objc_msgSend(v0, sel_initWithExcludedZoneIDs_, &qword_1EB279460);

  return v1;
}

id CKSyncEngine.SendChangesContext.options.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  id v4 = *(id *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();

  return v4;
}

unsigned char *CKSyncEngine.SendChangesContext.init(reason:options:)@<X0>(unsigned char *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = a2[2];
  *(unsigned char *)a3 = *result;
  *(void *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 16) = v4;
  *(void *)(a3 + 24) = v5;
  return result;
}

BOOL static CKSyncEngine.SyncReason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CKSyncEngine.SyncReason.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CKSyncEngine.SyncReason.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static CKSyncEngine.FetchChangesOptions.Scope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 8) != 1)
    {
      if (v3 != 2 || v2 != 0) {
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      char v12 = 1;
LABEL_13:
      swift_bridgeObjectRelease();
      return v12 & 1;
    }
    if (v3 != 1) {
      goto LABEL_11;
    }
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_18AF5AA10(v4, v2, v5, v6, v7, v8, v9, v10, v15, v16, v17, v18);
    char v12 = v11;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!*(unsigned char *)(a2 + 8)) {
    goto LABEL_6;
  }
LABEL_11:
  char v12 = 0;
  return v12 & 1;
}

unint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.description.getter()
{
  if (*v0) {
    unint64_t v1 = 0;
  }
  else {
    unint64_t v1 = 0xD000000000000014;
  }
  if (*v0) {
    unint64_t v2 = 0xE000000000000000;
  }
  else {
    unint64_t v2 = 0x800000018B1D3EB0;
  }
  unint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  sub_18AF38960();
  return 0xD000000000000012;
}

uint64_t static CKSyncEngine.SendChangesOptions.Scope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  switch(*(unsigned char *)(a1 + 8))
  {
    case 1:
      if (v3 != 1) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 2:
      if (v3 != 2) {
        goto LABEL_16;
      }
      swift_bridgeObjectRetain();
      uint64_t v4 = swift_bridgeObjectRetain();
      sub_18AF5AC60(v4, v2, v5, v6, v7, v8, v9, v10, v22, v23);
      goto LABEL_14;
    case 3:
      if (v3 != 3 || v2 != 0) {
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      char v13 = 1;
      goto LABEL_15;
    default:
      if (*(unsigned char *)(a2 + 8))
      {
LABEL_16:
        char v13 = 0;
      }
      else
      {
LABEL_13:
        swift_bridgeObjectRetain();
        uint64_t v14 = swift_bridgeObjectRetain();
        sub_18AF5AA10(v14, v2, v15, v16, v17, v18, v19, v20, v22, v23, v24, v25);
LABEL_14:
        char v13 = v11;
        swift_bridgeObjectRelease();
LABEL_15:
        swift_bridgeObjectRelease();
      }
      return v13 & 1;
  }
}

uint64_t CKSyncEngine.SyncReason.description.getter()
{
  if (*v0) {
    return 0x6C61756E616DLL;
  }
  else {
    return 0x656C756465686373;
  }
}

id CKSyncEngineFetchChangesZoneConfiguration.configurationStruct()@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v3 = objc_msgSend(v1, sel_shouldFetchAssetContents);
  id result = objc_msgSend(v1, sel_resultsLimit);
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL sub_18AFC281C(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

void sub_18AFC2858()
{
  sub_18AF33850();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v4 = *v0;
  sub_18AF161EC(v5);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    char v34 = v0;
    uint64_t v35 = v4 + 64;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 64);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 64;
    swift_retain();
    int64_t v13 = 0;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
    {
      uint64_t v20 = *(void **)(*(void *)(v4 + 48) + 8 * i);
      unint64_t v21 = *(void **)(*(void *)(v4 + 56) + 8 * i);
      if ((v3 & 1) == 0)
      {
        id v22 = v20;
        id v23 = v21;
      }
      Swift::Int v24 = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = v24 & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) == 0)
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          BOOL v31 = v27 == v30;
          if (v27 == v30) {
            unint64_t v27 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v27);
          if (v32 != -1)
          {
            unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      *(void *)(*(void *)(v7 + 48) + 8 * v28) = v20;
      *(void *)(*(void *)(v7 + 56) + 8 * v28) = v21;
      ++*(void *)(v7 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_41;
      }
      if (v16 >= v11) {
        break;
      }
      uint64_t v17 = (void *)(v4 + 64);
      unint64_t v18 = *(void *)(v35 + 8 * v16);
      ++v13;
      if (!v18)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        if (!v18)
        {
          int64_t v19 = v16 + 2;
          if (v19 >= v11)
          {
LABEL_32:
            swift_release();
            uint64_t v1 = v34;
            if ((v3 & 1) == 0) {
              goto LABEL_39;
            }
            goto LABEL_35;
          }
          unint64_t v18 = *(void *)(v35 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v13 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v13 >= v11) {
                goto LABEL_32;
              }
              unint64_t v18 = *(void *)(v35 + 8 * v13);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          int64_t v13 = v19;
        }
      }
LABEL_18:
      unint64_t v10 = (v18 - 1) & v18;
    }
    swift_release();
    uint64_t v1 = v34;
    uint64_t v17 = (void *)(v4 + 64);
    if ((v3 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v33 = 1 << *(unsigned char *)(v4 + 32);
    if (v33 >= 64) {
      sub_18AF6FC30(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *uint64_t v17 = -1 << v33;
    }
    *(void *)(v4 + 16) = 0;
  }
LABEL_39:
  swift_release();
  *uint64_t v1 = v7;
  sub_18AF16CC4();
}

void sub_18AFC2B00(uint64_t a1, uint64_t a2)
{
}

void sub_18AFC2B1C(uint64_t a1, uint64_t a2)
{
}

void sub_18AFC2B38(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_18AF161EC(a3);
    uint64_t v14 = static _DictionaryStorage.convert(_:capacity:)();
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      sub_18AF4375C();
      sub_18AF34EA0(0, a4);
      while (1)
      {
        swift_dynamicCast();
        sub_18AF34EA0(0, (unint64_t *)&unk_1E9125A70);
        swift_dynamicCast();
        uint64_t v5 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_18AF41250();
          uint64_t v5 = v14;
        }
        NSObject._rawHashValue(seed:)(*(void *)(v5 + 40));
        sub_18AF22DF0();
        if (v6) {
          break;
        }
        sub_18AF37AAC();
LABEL_15:
        sub_18AF35260(v7);
        __CocoaDictionary.Iterator.next()();
        sub_18AF4375C();
        if (!v13) {
          goto LABEL_16;
        }
      }
      sub_18AF1D768();
      while (++v10 != v11 || (v9 & 1) == 0)
      {
        BOOL v12 = v10 == v11;
        if (v10 == v11) {
          uint64_t v10 = 0;
        }
        v9 |= v12;
        if (*(void *)(v8 + 8 * v10) != -1)
        {
          sub_18AF3376C();
          goto LABEL_15;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_16:
      swift_release();
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
}

void sub_18AFC2D04(uint64_t a1, uint64_t a2)
{
}

void sub_18AFC2D20(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_18AF161EC(a3);
    uint64_t v14 = static _DictionaryStorage.convert(_:capacity:)();
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      sub_18AF4375C();
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      while (1)
      {
        swift_dynamicCast();
        sub_18AF34EA0(0, a4);
        swift_dynamicCast();
        uint64_t v5 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_18AF41250();
          uint64_t v5 = v14;
        }
        NSObject._rawHashValue(seed:)(*(void *)(v5 + 40));
        sub_18AF22DF0();
        if (v6) {
          break;
        }
        sub_18AF37AAC();
LABEL_15:
        sub_18AF35260(v7);
        __CocoaDictionary.Iterator.next()();
        sub_18AF4375C();
        if (!v13) {
          goto LABEL_16;
        }
      }
      sub_18AF1D768();
      while (++v10 != v11 || (v9 & 1) == 0)
      {
        BOOL v12 = v10 == v11;
        if (v10 == v11) {
          uint64_t v10 = 0;
        }
        v9 |= v12;
        if (*(void *)(v8 + 8 * v10) != -1)
        {
          sub_18AF3376C();
          goto LABEL_15;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_16:
      swift_release();
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
}

void sub_18AFC2EE4(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_18AFC2F08()
{
  unint64_t result = qword_1E9126CA8;
  if (!qword_1E9126CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126CA8);
  }
  return result;
}

uint64_t _s19FetchChangesOptionsVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s19FetchChangesOptionsVwcp(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s19FetchChangesOptionsVwca(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a2 + 16);
  id v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  id v7 = v5;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 _s19FetchChangesOptionsVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s19FetchChangesOptionsVwta(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t _s19FetchChangesOptionsVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesOptionsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s19FetchChangesOptionsV17ZoneConfigurationVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[16])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesOptionsV17ZoneConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.FetchChangesOptions.ZoneConfiguration()
{
}

uint64_t _s19FetchChangesOptionsV5ScopeOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesOptionsV5ScopeOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_18AFC332C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_18AFC3344(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t _s19FetchChangesContextVwcp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  uint64_t v5 = *(void **)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s19FetchChangesContextVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a2 + 24);
  id v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  id v7 = v5;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t _s19FetchChangesContextVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t _s19FetchChangesContextVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 65))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.FetchChangesContext()
{
}

void _s18SendChangesOptionsVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

uint64_t _s18SendChangesOptionsVwCP_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t _s18SendChangesOptionsVwca(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v5 = *(void **)(a2 + 16);
  id v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  id v7 = v5;

  return a1;
}

uint64_t _s18SendChangesOptionsVwta(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t _s18SendChangesOptionsVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SendChangesOptionsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.SendChangesOptions()
{
}

uint64_t _s18SendChangesOptionsV5ScopeOwCP(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s19FetchChangesOptionsV5ScopeOwca_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18SendChangesOptionsV5ScopeOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18SendChangesOptionsV5ScopeOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SendChangesOptionsV5ScopeOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_18AFC38B4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_18AFC38CC(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void type metadata accessor for CKSyncEngine.SendChangesOptions.Scope()
{
}

uint64_t _s18SendChangesContextVwcp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  char v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t _s18SendChangesContextVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v5 = *(void **)(a2 + 24);
  id v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  id v7 = v5;

  return a1;
}

uint64_t _s18SendChangesContextVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  id v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t _s18SendChangesContextVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SendChangesContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.SendChangesContext()
{
}

unsigned char *_s10SyncReasonOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AFC3B58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.SyncReason()
{
}

unint64_t sub_18AFC3B8C()
{
  unint64_t result = qword_1E9124F78;
  if (!qword_1E9124F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124F78);
  }
  return result;
}

unint64_t sub_18AFC3BD8()
{
  unint64_t result = qword_1E9125460;
  if (!qword_1E9125460)
  {
    type metadata accessor for Scope(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125460);
  }
  return result;
}

id CKAcceptSharesOperation.perShareResultBlock.setter(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AFC41D8;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF61DD0;
    uint64_t v9[3] = &unk_1ED7F11A8;
    id v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setPerShareCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setPerShareCompletionBlock_, 0);
  }
}

id CKAcceptSharesOperation.acceptSharesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF53A80;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_18AF53A88;
    uint64_t v9[3] = &unk_1ED7F1720;
    id v7 = _Block_copy(v9);
    sub_18AF42F30(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setAcceptSharesCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF1E758(a1);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setAcceptSharesCompletionBlock_, 0);
  }
}

void (*CKAcceptSharesOperation.perShareResultBlock.getter())(uint64_t a1, void *a2, char a3)
{
  unint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perShareCompletionBlock);
  if (result)
  {
    unint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AFC3F58@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKAcceptSharesOperation.perShareResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFB6194;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AFC3FC8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFB6188;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKAcceptSharesOperation.perShareResultBlock.setter((uint64_t)v4, v3);
}

void sub_18AFC4058(uint64_t a1, void *a2, id a3, void (*a4)(uint64_t, void *, uint64_t))
{
  if (a2)
  {
    id v10 = a2;
    a4(a1, a2, 0);
    id v7 = v10;
LABEL_4:

    return;
  }
  if (a3)
  {
    id v9 = a3;
    a4(a1, a3, 1);
    id v7 = a3;
    goto LABEL_4;
  }
  type metadata accessor for CKError(0);
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AF62B54();
  _BridgedStoredNSError.init(_:userInfo:)();
  a4(a1, v11, 1);
}

uint64_t sub_18AFC41A0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AFC41D8(uint64_t a1, void *a2, void *a3)
{
  sub_18AFC4058(a1, a2, a3, *(void (**)(uint64_t, void *, uint64_t))(v3 + 16));
}

uint64_t (*CKAcceptSharesOperation.perShareResultBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKAcceptSharesOperation.perShareResultBlock.getter();
  a1[1] = v3;
  return sub_18AFC4228;
}

uint64_t sub_18AFC4228(uint64_t *a1, char a2)
{
  return sub_18AFC44C0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKAcceptSharesOperation.perShareResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKAcceptSharesOperation.acceptSharesResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_acceptSharesCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF20008;
    *(void *)(v4 + 24) = v3;
    return sub_18AF539B8;
  }
  return result;
}

uint64_t sub_18AFC4300@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKAcceptSharesOperation.acceptSharesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AFC4370(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKAcceptSharesOperation.acceptSharesResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18AFC4400()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t (*CKAcceptSharesOperation.acceptSharesResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKAcceptSharesOperation.acceptSharesResultBlock.getter();
  a1[1] = v3;
  return sub_18AFC4480;
}

uint64_t sub_18AFC4480(uint64_t *a1, char a2)
{
  return sub_18AFC44C0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKAcceptSharesOperation.acceptSharesResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFC44C0(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

Swift::Int sub_18AFC459C(char a1)
{
  Hasher.init(_seed:)();
  sub_18AFA20B0((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_18AFC45E4(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_18AFC4630()
{
  return sub_18AFC46CC();
}

Swift::Int sub_18AFC463C(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_18AFC4684(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_18AFC46CC()
{
  return Hasher._finalize()();
}

Swift::Int sub_18AFC474C(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  sub_18AFA20B0((uint64_t)v4, a2);
  return Hasher._finalize()();
}

Swift::Int sub_18AFC4790(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

uint64_t sub_18AFC47D4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&unk_1ED7EE770, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_18AFC482C(char a1)
{
  if (a1) {
    return 0x4449656E6F7ALL;
  }
  else {
    return 0x614E64726F636572;
  }
}

uint64_t sub_18AFC4864(char *a1, char *a2)
{
  return sub_18AFA1FE4(*a1, *a2);
}

Swift::Int sub_18AFC4870()
{
  return sub_18AFC4630();
}

uint64_t sub_18AFC4878()
{
  return sub_18AFA2180();
}

Swift::Int sub_18AFC4880()
{
  return sub_18AFC46CC();
}

uint64_t sub_18AFC4888@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_18AFC47D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_18AFC48B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18AFC482C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_18AFC48E4()
{
  return sub_18AFC482C(*v0);
}

uint64_t sub_18AFC48EC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_18AFC4828(a1);
  *a2 = result;
  return result;
}

void sub_18AFC4914(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_18AFC4920(uint64_t a1)
{
  unint64_t v2 = sub_18AFC4B6C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AFC495C(uint64_t a1)
{
  unint64_t v2 = sub_18AFC4B6C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CKRecordID.encode(to:)(void *a1)
{
  Swift::Int v3 = v1;
  sub_18AF161EC(&qword_1E9126CD8);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v5);
  sub_18AF25FCC(a1, a1[3]);
  sub_18AFC4B6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v6 = objc_msgSend(v3, sel_recordName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    uint64_t v7 = sub_18AF1868C();
    v8(v7);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v3, sel_zoneID);
    sub_18AF56248();
    sub_18AFC4D80(&qword_1E9126CE8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();

    uint64_t v10 = sub_18AF1868C();
    return v11(v10);
  }
}

unint64_t sub_18AFC4B6C()
{
  unint64_t result = qword_1E9126CE0;
  if (!qword_1E9126CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126CE0);
  }
  return result;
}

void *CKRecordID.init(from:)(void *a1)
{
  sub_18AF161EC(&qword_1E9126CF0);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = sub_18AF25FCC(a1, a1[3]);
  sub_18AFC4B6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v5 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v7 = v6;
    sub_18AF56248();
    sub_18AFC4D80(&qword_1E9126CF8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9._uint64_t countAndFlagsBits = v5;
    v9._object = v7;
    uint64_t v4 = (void *)CKRecordID.init(recordName:zoneID:)(v9, v12);
    uint64_t v10 = sub_18AF38A58();
    v11(v10);
  }
  sub_18AF40A30((uint64_t)a1);
  return v4;
}

uint64_t sub_18AFC4D80(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF56248();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_18AFC4DC4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = CKRecordID.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_18AFC4DF0(void *a1)
{
  return CKRecordID.encode(to:)(a1);
}

unsigned char *_s10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AFC4EE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

unint64_t sub_18AFC4F1C()
{
  unint64_t result = qword_1E9126D00;
  if (!qword_1E9126D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126D00);
  }
  return result;
}

unint64_t sub_18AFC4F6C()
{
  unint64_t result = qword_1E9126D08;
  if (!qword_1E9126D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126D08);
  }
  return result;
}

unint64_t sub_18AFC4FBC()
{
  unint64_t result = qword_1E9126D10;
  if (!qword_1E9126D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126D10);
  }
  return result;
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID *zoneID)
{
  object = recordName._object;
  uint64_t countAndFlagsBits = recordName._countAndFlagsBits;
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  unsigned int v6 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  uint64_t v7 = (objc_class *)objc_msgSend(v5, sel_initWithRecordName_zoneID_, v6, zoneID);

  uint64_t v10 = v7;
  result._zoneID = v9;
  result._recordName = v8;
  result.super.Class isa = v10;
  return result;
}

uint64_t sub_18AFC5088(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*a1, *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

void __swiftcall CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(CKModifyRecordsOperation *__return_ptr retstr, Swift::OpaquePointer_optional recordsToSave, Swift::OpaquePointer_optional recordIDsToDelete)
{
  uint64_t v3 = *(void *)&recordsToSave.is_nil;
  rawValue = recordsToSave.value._rawValue;
  id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  unsigned int v6 = v5;
  if (rawValue)
  {
    sub_18AF34EA0(0, &qword_1E9125120);
    id v7 = v6;
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v5;
    v8.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setRecordsToSave_, v8.super.isa);

  if (v3)
  {
    sub_18AF34EA0(0, &qword_1E91255F0);
    v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setRecordIDsToDelete_, v10.super.isa);
}

void CKModifyRecordsOperation.perRecordSaveBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v1;
    v9[4] = sub_18AF61DC8;
    v9[5] = v4;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AF61DD0;
    uint64_t v9[3] = &unk_1ED7F11D0;
    _Block_copy(v9);
    sub_18AF18598();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setPerRecordSaveBlock_);
    _Block_release(v3);
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void CKModifyRecordsOperation.perRecordDeleteBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v1;
    v9[4] = sub_18AFC066C;
    v9[5] = v4;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AFC0674;
    uint64_t v9[3] = &unk_1ED7F1748;
    _Block_copy(v9);
    sub_18AF18598();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setPerRecordDeleteBlock_);
    _Block_release(v3);
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void CKModifyRecordsOperation.modifyRecordsResultBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v3 = sub_18AF19EAC();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    v9[4] = sub_18AFA085C;
    v9[5] = v3;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AFC5C64;
    uint64_t v9[3] = &unk_1ED7F1388;
    uint64_t v4 = _Block_copy(v9);
    sub_18AF42F30((uint64_t)v2);
    swift_retain();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setModifyRecordsCompletionBlock_);
    _Block_release(v4);
    objc_msgSend(v2, sel_setCanDropItemResultsEarly_, 1, v9[0]);
    sub_18AF30B4C();
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void (*CKModifyRecordsOperation.perRecordSaveBlock.getter())(uint64_t a1, void *a2, char a3)
{
  CKRecordID result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perRecordSaveBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AFC5590@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordsOperation.perRecordSaveBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unsigned int v6 = sub_18AFC083C;
  }
  else
  {
    unsigned int v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AFC5600(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFC0840;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifyRecordsOperation.perRecordSaveBlock.setter((uint64_t)v4);
}

uint64_t sub_18AFC5690()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*CKModifyRecordsOperation.perRecordSaveBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordsOperation.perRecordSaveBlock.getter();
  v1[1] = v2;
  return sub_18AFC570C;
}

uint64_t sub_18AFC570C(uint64_t *a1, char a2)
{
  return sub_18AFC6190(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordsOperation.perRecordSaveBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKModifyRecordsOperation.perRecordDeleteBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perRecordDeleteBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF55F48;
    *(void *)(v4 + 24) = v3;
    return sub_18AFC05D8;
  }
  return result;
}

uint64_t sub_18AFC57DC@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordsOperation.perRecordDeleteBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unsigned int v6 = sub_18AFC083C;
  }
  else
  {
    unsigned int v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AFC584C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFC0888;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifyRecordsOperation.perRecordDeleteBlock.setter((uint64_t)v4);
}

uint64_t (*CKModifyRecordsOperation.perRecordDeleteBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordsOperation.perRecordDeleteBlock.getter();
  v1[1] = v2;
  return sub_18AFC5920;
}

uint64_t sub_18AFC5920(uint64_t *a1, char a2)
{
  return sub_18AFC6190(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordsOperation.perRecordDeleteBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.getter())(objc_class *a1, objc_class *a2, uint64_t a3)
{
  uint64_t result = (void (*)(objc_class *, objc_class *, uint64_t))objc_msgSend(v0, sel_modifyRecordsCompletionBlock);
  if (result)
  {
    *(void *)(sub_18AF33890() + 16) = result;
    return sub_18AFC60F8;
  }
  return result;
}

uint64_t sub_18AFC59CC@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unsigned int v6 = sub_18AFA0A18;
  }
  else
  {
    unsigned int v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AFC5A3C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
  }
  sub_18AF42F30(v1);
  CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter();
}

void CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter()
{
  sub_18AF16EA8();
  if (v3)
  {
    v4[4] = v1;
    v4[5] = v0;
    v4[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v4[2] = sub_18AFC5C64;
    v4[3] = &unk_1ED7F1540;
    _Block_copy(v4);
    sub_18AF18598();
    uint64_t v3 = swift_release();
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_18AF342E0(v3, sel_setModifyRecordsCompletionBlock_);
  sub_18AF30B4C();
  _Block_release(v2);
  sub_18AF185B4();
}

void sub_18AFC5B80(objc_class *a1, Class a2, uint64_t a3, uint64_t a4)
{
  Class isa = a1;
  if (a1)
  {
    sub_18AF34EA0(0, &qword_1E9125120);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
  {
    sub_18AF34EA0(0, &qword_1E91255F0);
    a2 = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, isa, a2);
}

uint64_t sub_18AFC5C64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  id v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF34EA0(0, &qword_1E9125120);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    sub_18AF34EA0(0, &qword_1E91255F0);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t (*CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.getter();
  v1[1] = v2;
  return sub_18AFC5D88;
}

uint64_t sub_18AFC5D88(uint64_t *a1, char a2)
{
  return sub_18AFC6190(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKModifyRecordsOperation.modifyRecordsResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_modifyRecordsCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFC62AC;
    *(void *)(v4 + 24) = v3;
    return sub_18AFC6100;
  }
  return result;
}

uint64_t sub_18AFC5E58@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordsOperation.modifyRecordsResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void sub_18AFC5EC8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter((uint64_t)v4);
}

void sub_18AFC5F58(void *a1, char a2, void (*a3)(void, void, void *))
{
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1EB279440);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    MEMORY[0x18C12BB10](v9, -1, -1);
  }

  if (a2)
  {
    id v10 = a1;
    a3(0, 0, a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    a3(MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], 0);
  }
}

uint64_t sub_18AFC60C0()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AFC60F8(objc_class *a1, objc_class *a2, uint64_t a3)
{
  sub_18AFC5B80(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AFC6100(void *a1, char a2)
{
  sub_18AFC5F58(a1, a2 & 1, *(void (**)(void, void, void *))(v2 + 16));
}

uint64_t (*CKModifyRecordsOperation.modifyRecordsResultBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordsOperation.modifyRecordsResultBlock.getter();
  v1[1] = v2;
  return sub_18AFC6150;
}

uint64_t sub_18AFC6150(uint64_t *a1, char a2)
{
  return sub_18AFC6190(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordsOperation.modifyRecordsResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFC6190(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AFC62B0(uint64_t a1, uint64_t (*a2)(void, void))
{
  return a2(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_18AFC62E8(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  return a3(&v4);
}

void __swiftcall CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(CKModifyRecordZonesOperation *__return_ptr retstr, Swift::OpaquePointer_optional recordZonesToSave, Swift::OpaquePointer_optional recordZoneIDsToDelete)
{
  uint64_t v3 = *(void *)&recordZonesToSave.is_nil;
  rawValue = recordZonesToSave.value._rawValue;
  id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v6 = v5;
  if (rawValue)
  {
    sub_18AF34EA0(0, &qword_1E9125630);
    id v7 = v6;
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v5;
    v8.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setRecordZonesToSave_, v8.super.isa);

  if (v3)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setRecordZoneIDsToDelete_, v10.super.isa);
}

void CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v1;
    v9[4] = sub_18AF61DC8;
    v9[5] = v4;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AF61DD0;
    uint64_t v9[3] = &unk_1ED7F11F8;
    _Block_copy(v9);
    sub_18AF18598();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setPerRecordZoneSaveBlock_);
    _Block_release(v3);
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v1;
    v9[4] = sub_18AFC066C;
    v9[5] = v4;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AFC0674;
    uint64_t v9[3] = &unk_1ED7F1770;
    _Block_copy(v9);
    sub_18AF18598();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setPerRecordZoneDeleteBlock_);
    _Block_release(v3);
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(uint64_t a1)
{
  if (a1)
  {
    sub_18AF16EA8();
    uint64_t v3 = sub_18AF19EAC();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    v9[4] = sub_18AFA085C;
    v9[5] = v3;
    v9[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v9[2] = sub_18AFC6EC4;
    uint64_t v9[3] = &unk_1ED7F13B0;
    uint64_t v4 = _Block_copy(v9);
    sub_18AF42F30((uint64_t)v2);
    swift_retain();
    uint64_t v5 = swift_release();
    sub_18AF342E0(v5, sel_setModifyRecordZonesCompletionBlock_);
    _Block_release(v4);
    objc_msgSend(v2, sel_setCanDropItemResultsEarly_, 1, v9[0]);
    sub_18AF30B4C();
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v6 v7];
  }
}

void (*CKModifyRecordZonesOperation.perRecordZoneSaveBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perRecordZoneSaveBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AFC67F0@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordZonesOperation.perRecordZoneSaveBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFC083C;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AFC6860(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFC0840;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter((uint64_t)v4);
}

uint64_t sub_18AFC68F0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*CKModifyRecordZonesOperation.perRecordZoneSaveBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordZonesOperation.perRecordZoneSaveBlock.getter();
  v1[1] = v2;
  return sub_18AFC696C;
}

uint64_t sub_18AFC696C(uint64_t *a1, char a2)
{
  return sub_18AFC73F0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perRecordZoneDeleteBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF55F48;
    *(void *)(v4 + 24) = v3;
    return sub_18AFC05D8;
  }
  return result;
}

uint64_t sub_18AFC6A3C@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFC083C;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AFC6AAC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFC0888;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter((uint64_t)v4);
}

uint64_t (*CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.getter();
  v1[1] = v2;
  return sub_18AFC6B80;
}

uint64_t sub_18AFC6B80(uint64_t *a1, char a2)
{
  return sub_18AFC73F0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.getter())(objc_class *a1, objc_class *a2, uint64_t a3)
{
  uint64_t result = (void (*)(objc_class *, objc_class *, uint64_t))objc_msgSend(v0, sel_modifyRecordZonesCompletionBlock);
  if (result)
  {
    *(void *)(sub_18AF33890() + 16) = result;
    return sub_18AFC7358;
  }
  return result;
}

uint64_t sub_18AFC6C2C@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFA0A18;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AFC6C9C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
  }
  sub_18AF42F30(v1);
  CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter();
}

void CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter()
{
  sub_18AF16EA8();
  if (v3)
  {
    v4[4] = v1;
    v4[5] = v0;
    v4[0] = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    v4[2] = sub_18AFC6EC4;
    v4[3] = &unk_1ED7F1568;
    _Block_copy(v4);
    sub_18AF18598();
    uint64_t v3 = swift_release();
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_18AF342E0(v3, sel_setModifyRecordZonesCompletionBlock_);
  sub_18AF30B4C();
  _Block_release(v2);
  sub_18AF185B4();
}

void sub_18AFC6DE0(objc_class *a1, Class a2, uint64_t a3, uint64_t a4)
{
  Class isa = a1;
  if (a1)
  {
    sub_18AF34EA0(0, &qword_1E9125630);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    a2 = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, isa, a2);
}

uint64_t sub_18AFC6EC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  id v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF34EA0(0, &qword_1E9125630);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t (*CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.getter();
  v1[1] = v2;
  return sub_18AFC6FE8;
}

uint64_t sub_18AFC6FE8(uint64_t *a1, char a2)
{
  return sub_18AFC73F0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_modifyRecordZonesCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AFC750C;
    *(void *)(v4 + 24) = v3;
    return sub_18AFC7360;
  }
  return result;
}

uint64_t sub_18AFC70B8@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AFAC1CC;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void sub_18AFC7128(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AFAC18C;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_18AF42F30(v1);
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter((uint64_t)v4);
}

void sub_18AFC71B8(void *a1, char a2, void (*a3)(void, void, void *))
{
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1EB279440);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    MEMORY[0x18C12BB10](v9, -1, -1);
  }

  if (a2)
  {
    id v10 = a1;
    a3(0, 0, a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    a3(MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], 0);
  }
}

uint64_t sub_18AFC7320()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AFC7358(objc_class *a1, objc_class *a2, uint64_t a3)
{
  sub_18AFC6DE0(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AFC7360(void *a1, char a2)
{
  sub_18AFC71B8(a1, a2 & 1, *(void (**)(void, void, void *))(v2 + 16));
}

uint64_t (*CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.getter();
  v1[1] = v2;
  return sub_18AFC73B0;
}

uint64_t sub_18AFC73B0(uint64_t *a1, char a2)
{
  return sub_18AFC73F0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AFC73F0(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t CKSubscription.subscriptionID.getter()
{
  id v1 = objc_msgSend(v0, sel_subscriptionID);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_18AFC7568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 96) = a1;
  *(void *)(v5 + 104) = a5;
  uint64_t v6 = *(void *)(a4 + 8);
  char v7 = *(unsigned char *)(a4 + 16);
  *(unsigned char *)(v5 + 73) = v7;
  id v9 = *(void **)(a4 + 24);
  uint64_t v8 = *(void *)(a4 + 32);
  *(void *)(v5 + 112) = v6;
  *(void *)(v5 + 120) = v9;
  uint64_t v10 = *(void *)(a4 + 40);
  *(void *)(v5 + 128) = v8;
  *(void *)(v5 + 136) = v10;
  char v11 = *(unsigned char *)(a4 + 48);
  *(unsigned char *)(v5 + 74) = v11;
  uint64_t v12 = *(void *)(a4 + 56);
  *(void *)(v5 + 144) = v12;
  char v13 = *(unsigned char *)(a4 + 64);
  *(unsigned char *)(v5 + 75) = v13;
  *(void *)(v5 + 16) = v6;
  *(unsigned char *)(v5 + 24) = v7;
  *(void *)(v5 + 32) = v9;
  *(void *)(v5 + 40) = v8;
  *(void *)(v5 + 48) = v10;
  *(unsigned char *)(v5 + 56) = v11;
  *(void *)(v5 + 64) = v12;
  *(unsigned char *)(v5 + 72) = v13;
  swift_bridgeObjectRetain();
  id v14 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v5 + 152) = v15;
  *uint64_t v15 = v5;
  v15[1] = sub_18AFC767C;
  return CKSyncEngine.objcEngine.getter();
}

uint64_t sub_18AFC767C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  *(void *)(v1 + 160) = v0;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18AFC7754, 0, 0);
}

uint64_t sub_18AFC7754()
{
  uint64_t v40 = v0;
  if (*(void *)(v0 + 160))
  {
    CKSyncEngine.actor.getter();
    swift_retain();
    swift_release();
    unint64_t v4 = CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
    swift_release();
    unint64_t v5 = sub_18AF6DBA8(v4, (unint64_t *)(v0 + 16));
    *(void *)(v0 + 168) = v5;
    unint64_t v6 = MEMORY[0x1E4FBC860];
    *(void *)(v0 + 80) = MEMORY[0x1E4FBC860];
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    *(void *)(v0 + 176) = v7;
    if (v7)
    {
      uint64_t v8 = OBJC_IVAR___CKSyncEngine_delegateAdapter;
      uint64_t v9 = *(void *)(v0 + 48);
      *(void *)(v0 + 184) = OBJC_IVAR___CKSyncEngine_delegateAdapter;
      *(void *)(v0 + 192) = v9;
      uint64_t v10 = *(void *)(v0 + 168);
      if ((v10 & 0xC000000000000001) != 0)
      {
        id v11 = (id)MEMORY[0x18C1298C0](0);
        uint64_t v8 = *(void *)(v0 + 184);
      }
      else
      {
        id v11 = *(id *)(v10 + 32);
      }
      *(void *)(v0 + 200) = v11;
      *(void *)(v0 + 208) = 1;
      *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 160) + v8);
      swift_retain();
      uint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 224) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_18AFC7BC0;
      uint64_t v26 = sub_18AF382E4();
      return sub_18AF6D040(v26, v27);
    }
    swift_bridgeObjectRelease();
    if (v6 >> 62)
    {
      sub_18AF34294();
      int64_t v19 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_10;
      }
    }
    else
    {
      int64_t v19 = *(void **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v19)
      {
LABEL_10:
        unint64_t v20 = *(void *)(v0 + 16);
        if (!*(unsigned char *)(v0 + 24))
        {
          swift_bridgeObjectRetain();
          unint64_t v37 = (void *)sub_18AF48760(MEMORY[0x1E4FBC860]);
          uint64_t v29 = sub_18AF48760(v20);
          sub_18AFCE4EC(v29);
          int64_t v19 = v37;
          sub_18AF19D54((uint64_t)v37);
          sub_18AF19FE4();
          swift_bridgeObjectRelease();
          sub_18AF39184();
          id v30 = v37;
          sub_18AF16B08();
          swift_bridgeObjectRetain();
          sub_18AF35BFC(v1);
          sub_18AF1D714();
          if (!v31 || (sub_18AF3892C() & 1) != 0)
          {
            uint64_t v24 = sub_18AF30738();
            unint64_t v38 = v6;
            char v39 = 0;
            goto LABEL_22;
          }
LABEL_27:
          uint64_t v2 = *(void **)(v0 + 160);
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
        if (*(unsigned char *)(v0 + 24) == 1)
        {
          unint64_t v21 = swift_bridgeObjectRetain();
          char v36 = (void *)sub_18AF48760(v21);
          sub_18AF6FC4C();
          swift_bridgeObjectRelease();
          int64_t v19 = v36;
          sub_18AF19D54((uint64_t)v36);
          sub_18AF19FE4();
          swift_bridgeObjectRelease();
          sub_18AF30C40();
          id v22 = v36;
          sub_18AF16B08();
          swift_bridgeObjectRetain();
          sub_18AF35BFC(v1);
          sub_18AF1D714();
          if (!v23 || (sub_18AF3892C() & 1) != 0)
          {
            uint64_t v24 = sub_18AF30738();
            unint64_t v38 = v6;
            char v39 = v3;
LABEL_22:
            swift_bridgeObjectRetain();
            sub_18AF34114((uint64_t)&v38);
            sub_18AF30900();
            swift_release();
LABEL_26:
            sub_18AF36054((uint64_t)v19, v24, v1);
LABEL_28:
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

LABEL_34:
            sub_18AF39304();
            goto LABEL_35;
          }
          goto LABEL_27;
        }
        sub_18AF39184();
        id v32 = v19;
        sub_18AF16B08();
        swift_bridgeObjectRetain();
        sub_18AF35BFC(v1);
        sub_18AF1D714();
        if (!v33 || (sub_18AF3892C() & 1) != 0)
        {
          uint64_t v24 = sub_18AF30738();
          unint64_t v38 = v6;
          char v39 = 0;
          swift_bridgeObjectRetain();
          sub_18AF34114((uint64_t)&v38);
          sub_18AF30900();
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
        char v34 = *(void **)(v0 + 160);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
LABEL_33:
        swift_bridgeObjectRelease();

        goto LABEL_34;
      }
    }
    char v34 = *(void **)(v0 + 160);
    goto LABEL_33;
  }
  char v12 = *(unsigned char *)(v0 + 75);
  char v13 = *(unsigned char *)(v0 + 74);
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 144);
  char v16 = *(unsigned char *)(v0 + 73);
  uint64_t v17 = *(void *)(v0 + 96);
  long long v18 = *(_OWORD *)(v0 + 120);
  *(void *)uint64_t v17 = *(void *)(v0 + 112);
  *(unsigned char *)(v17 + 8) = v16;
  *(_OWORD *)(v17 + 16) = v18;
  *(void *)(v17 + 32) = v15;
  *(unsigned char *)(v17 + 40) = v13;
  *(void *)(v17 + 48) = v14;
  *(unsigned char *)(v17 + 56) = v12;
LABEL_35:
  sub_18AF16D48();
  return v35();
}

uint64_t sub_18AFC7BC0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  *(unsigned char *)(v4 + 76) = v3;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](sub_18AFC7CB0, 0, 0);
}

void sub_18AFC7CB0()
{
  uint64_t v55 = v0;
  if ((*(unsigned char *)(v0 + 76) & 1) == 0)
  {
    MEMORY[0x18C129220](*(id *)(v0 + 200));
    if (*(void *)((*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v4 = objc_msgSend(*(id *)(v0 + 160), sel_dataSource);
  unint64_t v5 = *(void **)(v0 + 200);
  if (!v4)
  {

    goto LABEL_9;
  }
  char AssetContents = CKSyncEngineDataSourceShouldFetchAssetContents(v4, *(void **)(v0 + 160), v5);
  uint64_t v7 = *(void **)(v0 + 200);
  if (AssetContents)
  {

    swift_unknownObjectRelease();
LABEL_9:
    uint64_t v8 = *(void **)(v0 + 192);
LABEL_22:
    uint64_t v29 = *(void *)(v0 + 208);
    if (v29 == *(void *)(v0 + 176))
    {
      swift_bridgeObjectRelease();
      unint64_t v30 = *(void *)(v0 + 80);
      if (v30 >> 62)
      {
        sub_18AF34294();
        uint64_t v31 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v31 = *(void **)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v31)
        {
LABEL_25:
          unint64_t v32 = *(void *)(v0 + 16);
          if (!*(unsigned char *)(v0 + 24))
          {
            swift_bridgeObjectRetain();
            uint64_t v52 = (void *)sub_18AF48760(v30);
            uint64_t v43 = sub_18AF48760(v32);
            sub_18AFCE4EC(v43);
            uint64_t v31 = v52;
            sub_18AF19D54((uint64_t)v52);
            sub_18AF19FE4();
            swift_bridgeObjectRelease();
            sub_18AF39184();
            id v44 = v52;
            sub_18AF16B08();
            swift_bridgeObjectRetain();
            sub_18AF35BFC(isUniquelyReferenced_nonNull_native);
            sub_18AF1D714();
            if (!v45 || (sub_18AF3892C() & 1) != 0)
            {
              uint64_t v36 = sub_18AF30738();
              unint64_t v53 = v30;
              char v54 = 0;
              goto LABEL_40;
            }
LABEL_45:
            uint64_t v2 = *(void **)(v0 + 160);
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
          if (*(unsigned char *)(v0 + 24) == 1)
          {
            unint64_t v33 = swift_bridgeObjectRetain();
            uint64_t v51 = (void *)sub_18AF48760(v33);
            sub_18AF6FC4C();
            swift_bridgeObjectRelease();
            uint64_t v31 = v51;
            sub_18AF19D54((uint64_t)v51);
            sub_18AF19FE4();
            swift_bridgeObjectRelease();
            sub_18AF30C40();
            id v34 = v51;
            sub_18AF16B08();
            swift_bridgeObjectRetain();
            sub_18AF35BFC(isUniquelyReferenced_nonNull_native);
            sub_18AF1D714();
            if (!v35 || (sub_18AF3892C() & 1) != 0)
            {
              uint64_t v36 = sub_18AF30738();
              unint64_t v53 = v30;
              char v54 = v3;
LABEL_40:
              swift_bridgeObjectRetain();
              sub_18AF34114((uint64_t)&v53);
              sub_18AF30900();
              swift_release();
LABEL_44:
              sub_18AF36054((uint64_t)v31, v36, isUniquelyReferenced_nonNull_native);
LABEL_46:
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              goto LABEL_51;
            }
            goto LABEL_45;
          }
          sub_18AF39184();
          id v46 = v31;
          sub_18AF16B08();
          swift_bridgeObjectRetain();
          sub_18AF35BFC(isUniquelyReferenced_nonNull_native);
          sub_18AF1D714();
          if (!v47 || (sub_18AF3892C() & 1) != 0)
          {
            uint64_t v36 = sub_18AF30738();
            unint64_t v53 = v30;
            char v54 = 0;
            swift_bridgeObjectRetain();
            sub_18AF34114((uint64_t)&v53);
            sub_18AF30900();
            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
          uint64_t v48 = *(void **)(v0 + 160);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
LABEL_50:
          swift_bridgeObjectRelease();

LABEL_51:
          sub_18AF39304();
          sub_18AF16D48();
          sub_18AF2ACD0();
          __asm { BRAA            X1, X16 }
        }
      }
      uint64_t v48 = *(void **)(v0 + 160);
      goto LABEL_50;
    }
    *(void *)(v0 + 192) = v8;
    uint64_t v37 = *(void *)(v0 + 168);
    if ((v37 & 0xC000000000000001) != 0) {
      id v38 = (id)MEMORY[0x18C1298C0](v29);
    }
    else {
      id v38 = *(id *)(v37 + 8 * v29 + 32);
    }
    *(void *)(v0 + 200) = v38;
    *(void *)(v0 + 208) = v29 + 1;
    if (!__OFADD__(v29, 1))
    {
      *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 160) + *(void *)(v0 + 184));
      swift_retain();
      char v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 224) = v39;
      *char v39 = v0;
      v39[1] = sub_18AFC7BC0;
      sub_18AF382E4();
      sub_18AF2ACD0();
      sub_18AF6D040(v40, v41);
      return;
    }
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v9 = *(void *)(v0 + 192);
  id v10 = v7;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 88) = v9;
  *(void *)(v0 + 48) = 0x8000000000000000;
  sub_18AF7D0BC();
  uint64_t v13 = *(void *)(v9 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_18AF161EC(&qword_1E9125F40);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, v15))
  {
    uint64_t v8 = *(void **)(v0 + 88);
LABEL_18:
    *(void *)(v0 + 48) = v8;
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v21 = *(void *)(v0 + 200);
      v8[(v16 >> 6) + 8] |= 1 << v16;
      *(void *)(v8[6] + 8 * v16) = v21;
      uint64_t v22 = v8[7] + 16 * v16;
      *(unsigned char *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = 0;
      uint64_t v23 = v8[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24)
      {
LABEL_56:
        __break(1u);
        return;
      }
      uint64_t v26 = *(void **)(v0 + 200);
      void v8[2] = v25;
      id v27 = v26;
    }
    unint64_t v28 = *(void **)(v0 + 200);
    *(unsigned char *)(v8[7] + 16 * v16) = 0;
    swift_unknownObjectRelease();

    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)sub_18AF56248();
  uint64_t v8 = *(void **)(v0 + 88);
  sub_18AF7D0BC();
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v16 = v18;
    goto LABEL_18;
  }
  sub_18AF2ACD0();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_18AFC821C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_18AF13048;
  return CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)(a1, a2, a3);
}

uint64_t CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(v3 + 16) = *(unsigned char *)a2;
  *(void *)(v3 + 24) = v6;
  *(unsigned char *)(v3 + 32) = v7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 24);
  *(void *)(v3 + 56) = v8;
  *(unsigned char *)(v3 + 64) = v9;
  *(void *)(v3 + 72) = v10;
  *(unsigned char *)(v3 + 80) = v11;
  BOOL v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 88) = v14;
  *BOOL v14 = v3;
  v14[1] = sub_18AFC83BC;
  return sub_18AFC7568(a1, v12, v13, v3 + 16, a3);
}

uint64_t sub_18AFC83BC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t dispatch thunk of CKSyncEngineDelegate.handleEvent(_:syncEngine:)()
{
  sub_18AF338B4();
  sub_18AF22E14();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF38E00;
  uint64_t v3 = sub_18AF2A6C0();
  return v4(v3);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.nextRecordZoneChangeBatch(_:syncEngine:)()
{
  sub_18AF33DF8();
  sub_18AF338B4();
  sub_18AF186A0();
  uint64_t v13 = *(void *)(v0 + 16) + **(int **)(v0 + 16);
  uint64_t v14 = v0 + 16;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF13048;
  sub_18AF38F8C();
  sub_18AF33C3C();
  return v10(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)()
{
  sub_18AF33DF8();
  sub_18AF338B4();
  sub_18AF186A0();
  uint64_t v13 = *(void *)(v0 + 24) + **(int **)(v0 + 24);
  uint64_t v14 = v0 + 24;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF13048;
  sub_18AF38F8C();
  sub_18AF33C3C();
  return v10(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)()
{
  sub_18AF338B4();
  sub_18AF22E14();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFC8CFC;
  uint64_t v3 = sub_18AF2A6C0();
  return v4(v3);
}

uint64_t sub_18AFC8804()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AFC88C4;
  return CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)();
}

uint64_t sub_18AFC88C4()
{
  sub_18AF339B8();
  uint64_t v2 = v1;
  sub_18AF184F0();
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)()
{
  sub_18AF33DF8();
  sub_18AF338B4();
  sub_18AF186A0();
  uint64_t v13 = *(void *)(v0 + 40) + **(int **)(v0 + 40);
  uint64_t v14 = v0 + 40;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AFC8CFC;
  sub_18AF38F8C();
  sub_18AF33C3C();
  return v10(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t sub_18AFC8A70()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AFC88C4;
  return CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)();
}

uint64_t dispatch thunk of CKSyncEngineDelegatePrivate.relatedBundleIDs(zoneIDs:recordIDs:syncEngine:)()
{
  sub_18AF33DF8();
  sub_18AF338B4();
  sub_18AF186A0();
  uint64_t v13 = *(void *)(v0 + 8) + **(int **)(v0 + 8);
  uint64_t v14 = v0 + 8;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AFC8CFC;
  sub_18AF38F8C();
  sub_18AF33C3C();
  return v10(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t dispatch thunk of CKSyncEngineDelegateInternal.didHandleSchedulerActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_18AFC8C2C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_18AFC8C88()
{
  sub_18AF71C2C(v0 + 112);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_18AFC8CB8()
{
  sub_18AFC8C88();

  return MEMORY[0x1F4188210](v0);
}

uint64_t type metadata accessor for DelegateContainer()
{
  return sub_18AF67C24();
}

uint64_t sub_18AFC8D00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      v4 += 2;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_18AFC8DB0(unint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      uint64_t v20 = MEMORY[0x1E4FBC860];
      uint64_t result = ((uint64_t (*)(void, uint64_t, void))a4)(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0) {
        break;
      }
      char v17 = (void (*)(BOOL, unint64_t, uint64_t))a4;
      uint64_t v8 = 0;
      uint64_t v9 = v20;
      unint64_t v18 = v5 & 0xC000000000000001;
      unint64_t v10 = v5;
      while (v6 != v8)
      {
        if (v18)
        {
          uint64_t v11 = sub_18AF3DDFC();
          id v12 = (id)MEMORY[0x18C1298C0](v11);
        }
        else
        {
          id v12 = *(id *)(v5 + 8 * v8 + 32);
        }
        id v13 = v12;
        a4 = *(void *)(v20 + 16);
        unint64_t v14 = *(void *)(v20 + 24);
        id v15 = a2;
        if (a4 >= v14 >> 1) {
          v17(v14 > 1, a4 + 1, 1);
        }
        ++v8;
        *(void *)(v20 + 16) = a4 + 1;
        uint64_t v16 = v20 + 16 * a4;
        *(void *)(v16 + 32) = v13;
        *(void *)(v16 + 40) = v15;
        unint64_t v5 = v10;
        if (v6 == v8)
        {

          return v9;
        }
      }
      __break(1u);
LABEL_14:
      sub_18AFFDB4C();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:

    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void static SyncEngine.unregisterActivities(database:activityNameSuffix:)()
{
  sub_18AFE5CF8();
  uint64_t v1 = v0;
  sub_18AFFDA64();
  sub_18AFE5CF8();
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_sharedScheduler);
  uint64_t v4 = sub_18AF474C4();
  MEMORY[0x18C128F60](v4);
  sub_18AFFD2F0();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_unregisterActivityIdentifier_, v1);

  id v5 = objc_msgSend(v2, sel_sharedScheduler);
  uint64_t v6 = sub_18AF3563C();
  id v7 = (id)MEMORY[0x18C128F60](v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_unregisterActivityIdentifier_, v7);
}

uint64_t sub_18AFC9068(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v34 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_53;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v25 = v3;
    unint64_t v5 = 0;
    uint64_t v29 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v30 = v3 & 0xC000000000000001;
    uint64_t v27 = a2;
    uint64_t v28 = v3 + 32;
    uint64_t v26 = i;
    while (1)
    {
      if (v30)
      {
        id v6 = (id)MEMORY[0x18C1298C0](v5, v25);
      }
      else
      {
        if (v5 >= *(void *)(v29 + 16))
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        id v6 = *(id *)(v28 + 8 * v5);
      }
      id v7 = v6;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_50;
      }
      sub_18AFFA5B8(a2, (uint64_t)v31);
      sub_18AFFA5B8((uint64_t)v31, (uint64_t)&v32);
      if (!v33) {
        break;
      }
      if (v33 != 1) {
        goto LABEL_39;
      }
      unint64_t v9 = v32;
      if (v32 >> 62)
      {
        sub_18AFFA614((uint64_t)v31);
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        if (!v10)
        {
LABEL_44:
          sub_18AFFA640((uint64_t)v31);
          sub_18AFFA640((uint64_t)v31);

          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
        sub_18AFFA614((uint64_t)v31);
        swift_bridgeObjectRetain();
        if (!v10) {
          goto LABEL_44;
        }
      }
      if ((v9 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x18C1298C0](0, v9);
      }
      else {
        id v11 = *(id *)(v9 + 32);
      }
      id v12 = v11;
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      uint64_t v3 = static NSObject.== infix(_:_:)();

      if (v3) {
        goto LABEL_38;
      }
      if (v10 != 1)
      {
        uint64_t v13 = 5;
        do
        {
          id v14 = (v9 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x18C1298C0](v13 - 4, v9)
              : *(id *)(v9 + 8 * v13);
          uint64_t v3 = (uint64_t)v14;
          a2 = v13 - 3;
          if (__OFADD__(v13 - 4, 1)) {
            goto LABEL_51;
          }
          char v15 = static NSObject.== infix(_:_:)();

          if (v15) {
            goto LABEL_38;
          }
          ++v13;
        }
        while (a2 != v10);
      }
LABEL_29:
      sub_18AFFA640((uint64_t)v31);
      sub_18AFFA640((uint64_t)v31);

      uint64_t i = v26;
      a2 = v27;
LABEL_40:
      if (v5 == i)
      {
        uint64_t v23 = v34;
        goto LABEL_55;
      }
    }
    unint64_t v16 = v32;
    if (v32 >> 62)
    {
      sub_18AFFA614((uint64_t)v31);
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      if (!v17) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      sub_18AFFA614((uint64_t)v31);
      swift_bridgeObjectRetain();
      if (!v17) {
        goto LABEL_38;
      }
    }
    if ((v16 & 0xC000000000000001) != 0) {
      id v18 = (id)MEMORY[0x18C1298C0](0, v16);
    }
    else {
      id v18 = *(id *)(v16 + 32);
    }
    char v19 = v18;
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    uint64_t v3 = static NSObject.== infix(_:_:)();

    if (v3) {
      goto LABEL_29;
    }
    if (v17 == 1)
    {
LABEL_38:
      sub_18AFFA640((uint64_t)v31);
      sub_18AFFA640((uint64_t)v31);
      uint64_t i = v26;
      a2 = v27;
LABEL_39:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_40;
    }
    uint64_t v20 = 5;
    while (1)
    {
      id v21 = (v16 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x18C1298C0](v20 - 4, v16)
          : *(id *)(v16 + 8 * v20);
      uint64_t v3 = (uint64_t)v21;
      a2 = v20 - 3;
      if (__OFADD__(v20 - 4, 1)) {
        break;
      }
      char v22 = static NSObject.== infix(_:_:)();

      if (v22) {
        goto LABEL_29;
      }
      ++v20;
      if (a2 == v17) {
        goto LABEL_38;
      }
    }
LABEL_52:
    __break(1u);
LABEL_53:
    ;
  }
  uint64_t v23 = MEMORY[0x1E4FBC860];
LABEL_55:
  swift_bridgeObjectRelease();
  sub_18AF29830(a2);
  return v23;
}

uint64_t sub_18AFC9458(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      uint64_t v18 = v3;
      unint64_t v5 = 0;
      uint64_t v21 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v22 = v3 & 0xC000000000000001;
      uint64_t v19 = v4;
      unint64_t v23 = a2 & 0xC000000000000001;
      uint64_t v20 = v3 + 32;
      while (1)
      {
        if (v22)
        {
          id v6 = (id)MEMORY[0x18C1298C0](v5, v18);
        }
        else
        {
          if (v5 >= *(void *)(v21 + 16)) {
            goto LABEL_31;
          }
          id v6 = *(id *)(v20 + 8 * v5);
        }
        id v7 = v6;
        if (__OFADD__(v5++, 1)) {
          goto LABEL_32;
        }
        if (a2 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
          if (!v9)
          {
LABEL_26:

            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v9) {
            goto LABEL_26;
          }
        }
        id v10 = v23 ? (id)MEMORY[0x18C1298C0](0, a2) : *(id *)(a2 + 32);
        uint64_t v3 = (uint64_t)v10;
        sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
        char v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) == 0) {
          break;
        }
LABEL_13:
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_23:
        uint64_t v4 = v19;
LABEL_27:
        if (v5 == v4)
        {
          uint64_t v16 = v24;
          goto LABEL_35;
        }
      }
      if (v9 == 1) {
        break;
      }
      uint64_t v12 = 5;
      while (1)
      {
        uint64_t v3 = v12 - 4;
        id v13 = v23 ? (id)MEMORY[0x18C1298C0](v12 - 4, a2) : *(id *)(a2 + 8 * v12);
        id v14 = v13;
        uint64_t v15 = v12 - 3;
        if (__OFADD__(v3, 1)) {
          break;
        }
        uint64_t v3 = static NSObject.== infix(_:_:)();

        if (v3) {
          goto LABEL_13;
        }
        ++v12;
        if (v15 == v9) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_34;
      }
    }
LABEL_22:

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_34:
  uint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_18AFC96E0(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v28 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_30;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  unint64_t v5 = (uint64_t *)(a2 + 208);
  swift_beginAccess();
  if (v4)
  {
    uint64_t v21 = v3;
    unint64_t v6 = 0;
    uint64_t v26 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v27 = v3 & 0xC000000000000001;
    uint64_t v24 = a2;
    uint64_t v25 = v3 + 32;
    unint64_t v22 = (uint64_t *)(a2 + 208);
    uint64_t v23 = v4;
    while (1)
    {
      if (v27)
      {
        id v7 = (id)MEMORY[0x18C1298C0](v6, v21);
      }
      else
      {
        if (v6 >= *(void *)(v26 + 16))
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_3;
        }
        id v7 = *(id *)(v25 + 8 * v6);
      }
      uint64_t v8 = v7;
      if (__OFADD__(v6++, 1)) {
        goto LABEL_29;
      }
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v10 = *v5;
      if ((*v5 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v11 = v8;
        uint64_t v3 = __CocoaSet.contains(_:)();
        swift_bridgeObjectRelease();

        if ((v3 & 1) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        if (!*(void *)(v10 + 16)) {
          goto LABEL_22;
        }
        Swift::Int v12 = *(void *)(v10 + 40);
        swift_bridgeObjectRetain();
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
        uint64_t v14 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v15 = v13 & ~v14;
        if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
          goto LABEL_21;
        }
        sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
        uint64_t v3 = (uint64_t)*(id *)(*(void *)(v10 + 48) + 8 * v15);
        char v16 = static NSObject.== infix(_:_:)();

        if ((v16 & 1) == 0)
        {
          uint64_t v17 = ~v14;
          while (1)
          {
            unint64_t v15 = (v15 + 1) & v17;
            if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
              break;
            }
            id v18 = *(id *)(*(void *)(v10 + 48) + 8 * v15);
            uint64_t v3 = static NSObject.== infix(_:_:)();

            if (v3) {
              goto LABEL_20;
            }
          }
LABEL_21:
          swift_bridgeObjectRelease();
          uint64_t v4 = v23;
          a2 = v24;
          unint64_t v5 = v22;
LABEL_22:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_23;
        }
LABEL_20:

        swift_bridgeObjectRelease();
        uint64_t v4 = v23;
        a2 = v24;
        unint64_t v5 = v22;
      }
LABEL_23:
      if (v6 == v4)
      {
        uint64_t v19 = v28;
        goto LABEL_27;
      }
    }
  }
  uint64_t v19 = MEMORY[0x1E4FBC860];
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_18AFC99B8(unint64_t a1, unint64_t a2, char a3)
{
  LOBYTE(v3) = a3;
  uint64_t v5 = a1;
  uint64_t v47 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_85;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v37 = i;
    if (!i)
    {
      uint64_t v34 = MEMORY[0x1E4FBC860];
      goto LABEL_79;
    }
    uint64_t v36 = v5;
    unint64_t v7 = 0;
    unint64_t v8 = v5 & 0xC000000000000001;
    uint64_t v42 = v5 + 32;
    uint64_t v43 = v5 & 0xFFFFFFFFFFFFFF8;
    uint64_t v39 = a2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v46 = a2 & 0xC000000000000001;
    unint64_t v40 = a2 >> 62;
    uint64_t v41 = v3;
    unint64_t v44 = a2;
    uint64_t v3 = i;
    unint64_t v38 = v5 & 0xC000000000000001;
LABEL_5:
    if (v8) {
      break;
    }
    if (v7 < *(void *)(v43 + 16))
    {
      id v9 = *(id *)(v42 + 8 * v7);
      goto LABEL_8;
    }
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    ;
  }
  id v9 = (id)MEMORY[0x18C1298C0](v7, v36);
LABEL_8:
  uint64_t v10 = v9;
  if (__OFADD__(v7++, 1)) {
    goto LABEL_81;
  }
  id v12 = objc_msgSend(v9, sel_recordID);
  Swift::Int v13 = v12;
  switch(v41)
  {
    case 1:
      id v14 = objc_msgSend(v12, sel_zoneID);
      if (v40)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v5 = *(void *)(v39 + 16);
        swift_bridgeObjectRetain();
      }
      uint64_t v45 = v10;
      if (!v5) {
        goto LABEL_61;
      }
      if (v46) {
        id v22 = (id)MEMORY[0x18C1298C0](0, a2);
      }
      else {
        id v22 = *(id *)(a2 + 32);
      }
      uint64_t v23 = v22;
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24) {
        goto LABEL_65;
      }
      if (v5 == 1) {
        goto LABEL_60;
      }
      uint64_t v3 = 5;
      while (1)
      {
        id v25 = v46 ? (id)MEMORY[0x18C1298C0](v3 - 4, a2) : *(id *)(a2 + 8 * v3);
        uint64_t v26 = v25;
        a2 = v3 - 3;
        if (__OFADD__(v3 - 4, 1)) {
          goto LABEL_83;
        }
        char v27 = static NSObject.== infix(_:_:)();

        if (v27)
        {
          a2 = v44;
          goto LABEL_64;
        }
        ++v3;
        BOOL v21 = a2 == v5;
        a2 = v44;
        if (v21) {
          goto LABEL_59;
        }
      }
    case 2:
      if (v40)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v28 = *(void *)(v39 + 16);
        swift_bridgeObjectRetain();
      }
      if (!v28) {
        goto LABEL_62;
      }
      if (v46) {
        id v29 = (id)MEMORY[0x18C1298C0](0, a2);
      }
      else {
        id v29 = *(id *)(a2 + 32);
      }
      uint64_t v5 = (uint64_t)v29;
      sub_18AF34EA0(0, &qword_1E91255F0);
      char v30 = static NSObject.== infix(_:_:)();

      if (v30)
      {

        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
      if (v28 == 1) {
        goto LABEL_62;
      }
      uint64_t v31 = 5;
      while (1)
      {
        uint64_t v5 = v31 - 4;
        if (v46) {
          id v32 = (id)MEMORY[0x18C1298C0](v31 - 4, a2);
        }
        else {
          id v32 = *(id *)(a2 + 8 * v31);
        }
        char v33 = v32;
        uint64_t v3 = v31 - 3;
        if (__OFADD__(v5, 1)) {
          goto LABEL_84;
        }
        uint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5) {
          break;
        }
        ++v31;
        if (v3 == v28)
        {
          uint64_t v3 = v37;
          unint64_t v8 = v38;
          goto LABEL_62;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v3 = v37;
      unint64_t v8 = v38;
      goto LABEL_67;
    case 3:

      goto LABEL_67;
    default:
      id v14 = objc_msgSend(v12, sel_zoneID);
      if (v40)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        if (!v5) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v5 = *(void *)(v39 + 16);
        swift_bridgeObjectRetain();
        if (!v5) {
          goto LABEL_66;
        }
      }
      uint64_t v45 = v10;
      if (v46) {
        id v15 = (id)MEMORY[0x18C1298C0](0, a2);
      }
      else {
        id v15 = *(id *)(a2 + 32);
      }
      char v16 = v15;
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      char v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) == 0)
      {
        if (v5 == 1) {
          goto LABEL_65;
        }
        uint64_t v3 = 5;
        while (1)
        {
          if (v46) {
            id v18 = (id)MEMORY[0x18C1298C0](v3 - 4, a2);
          }
          else {
            id v18 = *(id *)(a2 + 8 * v3);
          }
          uint64_t v19 = v18;
          a2 = v3 - 3;
          if (__OFADD__(v3 - 4, 1)) {
            goto LABEL_82;
          }
          char v20 = static NSObject.== infix(_:_:)();

          if (v20) {
            break;
          }
          ++v3;
          BOOL v21 = a2 == v5;
          a2 = v44;
          if (v21)
          {
LABEL_64:
            uint64_t v3 = v37;
LABEL_65:
            unint64_t v8 = v38;
            uint64_t v10 = v45;
LABEL_66:

            swift_bridgeObjectRelease();
            goto LABEL_67;
          }
        }
        a2 = v44;
LABEL_59:
        uint64_t v3 = v37;
      }
LABEL_60:
      unint64_t v8 = v38;
LABEL_61:

      Swift::Int v13 = v14;
LABEL_62:

      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v5 = *(void *)(v47 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_67:
      if (v7 != v3) {
        goto LABEL_5;
      }
      uint64_t v34 = v47;
      break;
  }
LABEL_79:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_18AFC9F3C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      unint64_t v9 = v6 & 0xC000000000000001;
      unint64_t v16 = v6;
      uint64_t v17 = v6 & 0xFFFFFFFFFFFFFF8;
      uint64_t v15 = v7;
      while (v9)
      {
        id v10 = (id)MEMORY[0x18C1298C0](v8, v6);
LABEL_7:
        id v11 = v10;
        unint64_t v12 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v10;
        char v13 = sub_18AFD6AC4(&v18, a2, a3);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
          return a3;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v7 = v15;
          unint64_t v6 = v16;
        }
        else
        {
        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v17 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_19:
  a3 = MEMORY[0x1E4FBC860];
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t sub_18AFCA0F4(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E91251B8, MEMORY[0x1E4FBCF38]);
}

uint64_t sub_18AFCA114(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E9126238, MEMORY[0x1E4FBCF38]);
}

uint64_t sub_18AFCA134(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E9127470, MEMORY[0x1E4FBCF38]);
}

uint64_t sub_18AFCA154(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E9126770, MEMORY[0x1E4FBCF38]);
}

uint64_t sub_18AFCA174(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E91251B0, MEMORY[0x1E4FBCF38]);
}

uint64_t sub_18AFCA194(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, (uint64_t *)&unk_1E9127430, MEMORY[0x1E4FBCF38]);
}

uint64_t sub_18AFCA1B4(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E91268D8, MEMORY[0x1E4FBCF38]);
}

uint64_t sub_18AFCA1D4()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_18AFCA208(uint64_t a1, uint64_t a2)
{
  return sub_18AFCA2E8(a1, a2, &qword_1E9126238);
}

uint64_t sub_18AFCA214()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_18AFCA258(uint64_t a1, uint64_t a2)
{
  return sub_18AFCA2E8(a1, a2, &qword_1E9126770);
}

uint64_t sub_18AFCA264(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E91251B0, MEMORY[0x1E4FBCF40]);
}

uint64_t sub_18AFCA284()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_18AFCA2C8(uint64_t a1, uint64_t a2)
{
  return sub_18AF26010(a1, a2, &qword_1E91268D8, MEMORY[0x1E4FBCF40]);
}

uint64_t sub_18AFCA2E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return CheckedContinuation.resume(returning:)();
}

void sub_18AFCA328(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_18AFCA334(uint64_t a1, unint64_t a2, void *a3, void (*a4)(unint64_t), uint64_t *a5, uint64_t isUniquelyReferenced_nonNull_native)
{
  unint64_t v7 = a2;
  if (a2 >> 62)
  {
LABEL_21:
    sub_18AFFDB4C();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();

    return a1;
  }
  uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_17;
  }
LABEL_3:
  id v29 = (unint64_t *)isUniquelyReferenced_nonNull_native;
  unint64_t v30 = v7;
  unint64_t v31 = v7 & 0xC000000000000001;
  uint64_t v10 = 4;
  while (1)
  {
    if (v31)
    {
      uint64_t v11 = sub_18AF36700();
      id v12 = (id)MEMORY[0x18C1298C0](v11);
    }
    else
    {
      id v12 = *(id *)(v7 + 8 * v10);
    }
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v35 = v10 - 3;
    unint64_t v7 = (unint64_t)v12;
    id v13 = a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a4(v7);
    sub_18AFFD014();
    Swift::Int v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      goto LABEL_19;
    }
    uint64_t v19 = v14;
    char v20 = v15;
    sub_18AF161EC(a5);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18)) {
      break;
    }
LABEL_12:
    if (v20)
    {
      char isUniquelyReferenced_nonNull_native = *(void *)(a1 + 56);

      *(void *)(isUniquelyReferenced_nonNull_native + 8 * v19) = v13;
    }
    else
    {
      sub_18AFFC414();
      *(void *)(v23 + 8 * v19) = v7;
      *(void *)(*(void *)(a1 + 56) + 8 * v19) = v13;
      uint64_t v24 = *(void *)(a1 + 16);
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_20;
      }
      *(void *)(a1 + 16) = v26;
      id v27 = (id)v7;
    }

    swift_bridgeObjectRelease();
    ++v10;
    unint64_t v7 = v30;
    if (v35 == v9) {
      goto LABEL_17;
    }
  }
  uint64_t v21 = ((uint64_t (*)(unint64_t))a4)(v7);
  if ((v20 & 1) == (v22 & 1))
  {
    uint64_t v19 = v21;
    goto LABEL_12;
  }
  sub_18AF34EA0(0, v29);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_18AFCA530(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void **)(a2 + 32);
  id v3 = v2;
  return v2;
}

uint64_t sub_18AFCA568(uint64_t a1)
{
  uint64_t result = sub_18AFF91B0(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return sub_18AFF9134(result, v3, 0, a1);
  }
}

uint64_t sub_18AFCA5D0(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = v3;
  *(void *)(v4 + 64) = a2;
  *(unsigned char *)(v4 + 176) = a1;
  *(void *)(v4 + 88) = *v3;
  return MEMORY[0x1F4188298](sub_18AFCA620, v3, 0);
}

uint64_t sub_18AFCA620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF18F44();
  uint64_t v13 = sub_18AF383B0();
  *(void *)(v12 + 96) = sub_18AF38368(&qword_1E9125160, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v14 = Identifiable<>.id.getter();
  sub_18AF385E8(v14, v13);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v17 = swift_task_alloc();
    Swift::Int v18 = (void *)sub_18AF22680(v17);
    *Swift::Int v18 = v19;
    v18[1] = sub_18AFCAA88;
    sub_18AFFD7C0();
    sub_18AFFBC54();
    __asm { BRAA            X1, X16 }
  }
  sub_18AF385B8();
  if (!v22)
  {
    char v39 = sub_18AF33AE8();
    if ((v39 & 1) == 0) {
      sub_18AFFBAFC();
    }
    uint64_t v40 = *(void *)(v12 + 80);
    sub_18AF18528();
    if (!*(void *)(*(void *)(v40 + 136) + 24))
    {
      if ((sub_18AF38598() & 1) == 0) {
        sub_18AF2AD34();
      }
      if (*(unsigned char *)(*(void *)(v12 + 80) + 128) == 1)
      {
        if (*(unsigned char *)(v12 + 176) == 1) {
          static Task<>.checkCancellation()();
        }
        *(void *)(v12 + 48) = sub_18AF383B0();
        uint64_t v41 = sub_18AFFBF44();
        sub_18AF38768(v41, v42, v43, v44, v45, v46, v47, v48, v54, v55);
        if (qword_1E9125240 == -1) {
          goto LABEL_20;
        }
        goto LABEL_26;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      swift_once();
LABEL_20:
      id v49 = (__n128 *)sub_18AFFD680();
      sub_18AFFD9F8(v49);
      sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      uint64_t v50 = (void *)swift_task_alloc();
      *(void *)(v12 + 160) = v50;
      sub_18AF161EC(&qword_1E9125048);
      sub_18AFFD7E4();
      *uint64_t v50 = v51;
      v50[1] = sub_18AFCAEA8;
      sub_18AFFC08C(v52);
      sub_18AFFBAE0();
      return MEMORY[0x1F41881B8]();
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_18AF3A8C4();
  if (v24)
  {
    __break(1u);
    goto LABEL_24;
  }
  char v25 = *(unsigned char *)(v12 + 176);
  *(void *)(v16 + 120) = v23;
  uint64_t v26 = swift_task_alloc();
  *(void *)(v12 + 120) = v26;
  *(unsigned char *)(v26 + 16) = v25;
  *(void *)(v26 + 24) = v13;
  *(void *)(v26 + 32) = v16;
  uint64_t v27 = swift_task_alloc();
  *(void *)(v12 + 128) = v27;
  *(unsigned char *)(v27 + 16) = v25;
  *(void *)(v27 + 24) = v16;
  *(void *)(v27 + 32) = v13;
  sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v28 = swift_task_alloc();
  id v29 = (void *)sub_18AF304A0(v28);
  *id v29 = v30;
  v29[1] = sub_18AFCABA4;
  sub_18AF309E8();
  sub_18AFFBC54();
  return MEMORY[0x1F4188148](v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12);
}

uint64_t sub_18AFCAA88()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  *int v3 = v2;
  *int v3 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  sub_18AF26B24();
  sub_18AF26B18();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFCAB80()
{
  return sub_18AF26340();
}

uint64_t sub_18AFCAB88()
{
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFCABA4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_18AFB1610;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 80);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = sub_18AFCACA0;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AFCACA0()
{
  sub_18AF1A048();
  uint64_t v1 = *(void *)(v0 + 144);
  if ((sub_18AF1FABC() & 1) == 0) {
    sub_18AF2AD34();
  }
  if (*(unsigned char *)(*(void *)(v0 + 80) + 128) != 1)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_10;
  }
  if (*(unsigned char *)(v0 + 176) == 1)
  {
    static Task<>.checkCancellation()();
    if (v1)
    {
      sub_18AF434E4();
      sub_18AF1D758();
      return v2();
    }
  }
  *(void *)(v0 + 48) = sub_18AF383B0();
  uint64_t v4 = sub_18AFFBF44();
  sub_18AF1FAA0(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17);
  if (qword_1E9125240 != -1) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v12 = (__n128 *)sub_18AFFD680();
  sub_18AFFD9F8(v12);
  sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v13;
  sub_18AF161EC(&qword_1E9125048);
  sub_18AFFD7E4();
  void *v13 = v14;
  v13[1] = sub_18AFCAEA8;
  sub_18AFFC08C(v15);
  sub_18AFFBAE0();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFCAEA8()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFCAFA4()
{
  sub_18AF339B8();
  sub_18AF434E4();
  sub_18AFFC840();
  return v0();
}

uint64_t sub_18AFCB000()
{
  sub_18AF339B8();
  sub_18AF434E4();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFCB05C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 168) = a2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 88) = *v4;
  return MEMORY[0x1F4188298](sub_18AF1D250, v4, 0);
}

uint64_t sub_18AFCB0AC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_18AFFBA2C;
  }
  else
  {
    sub_18AF1E010();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)())sub_18AFCB1A0;
    uint64_t v7 = v3;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

#error "18AFCB250: call analysis failed (funcsize=108)"

uint64_t sub_18AFCB368(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 168) = a2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 88) = *v4;
  return MEMORY[0x1F4188298](sub_18AF1CE6C, v4, 0);
}

uint64_t sub_18AFCB3B8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_18AFFBA2C;
  }
  else
  {
    sub_18AF1E010();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)())sub_18AFCB4AC;
    uint64_t v7 = v3;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

#error "18AFCB55C: call analysis failed (funcsize=108)"

uint64_t sub_18AFCB674()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_18AFFBA2C;
  }
  else
  {
    sub_18AF1E010();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)())sub_18AFCB768;
    uint64_t v7 = v3;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

#error "18AFCB818: call analysis failed (funcsize=108)"

uint64_t sub_18AFCB930(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 72) = v3;
  *(void *)(v4 + 56) = a2;
  *(unsigned char *)(v4 + 169) = a1;
  *(void *)(v4 + 80) = *v3;
  return MEMORY[0x1F4188298](sub_18AFCB980, v3, 0);
}

#error "18AFCBC7C: call analysis failed (funcsize=250)"

uint64_t sub_18AFCBD98()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  sub_18AF26B24();
  sub_18AF26B18();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFCBE90()
{
  return sub_18AF26340();
}

uint64_t sub_18AFCBE98(uint64_t a1)
{
  return sub_18AFFC4BC(a1, v1 + 8, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18AFCBEA8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = sub_18AFCC170;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 72);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)())sub_18AFCBFA4;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

#error "18AFCC05C: call analysis failed (funcsize=110)"

uint64_t sub_18AFCC170()
{
  sub_18AF339B8();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = sub_18AFFC850();
  return v1(v0);
}

uint64_t sub_18AFCC1D4()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFCC2D0()
{
  sub_18AF339B8();
  sub_18AF434E4();
  sub_18AFFC840();
  return v0();
}

uint64_t sub_18AFCC32C()
{
  sub_18AF339B8();
  sub_18AF434E4();
  uint64_t v0 = sub_18AFFC850();
  return v1(v0);
}

uint64_t sub_18AFCC388(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 168) = a2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 88) = *v4;
  return MEMORY[0x1F4188298](sub_18AFCC3D8, v4, 0);
}

uint64_t sub_18AFCC3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF1A048();
  uint64_t v13 = *(void *)(v12 + 88);
  uint64_t v14 = sub_18AF383B0();
  uint64_t v15 = sub_18AF38368(&qword_1E9125160, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v16 = sub_18AF385C8(v15);
  sub_18AF385E8(v16, v14);
  sub_18AF40F74();
  if (v13)
  {
    uint64_t v17 = swift_task_alloc();
    uint64_t v18 = (void *)sub_18AF22680(v17);
    *uint64_t v18 = v19;
    v18[1] = sub_18AFFBA5C;
    sub_18AFFD7C0();
    sub_18AF3A8AC();
    __asm { BRAA            X1, X16 }
  }
  sub_18AF385B8();
  if (!v22)
  {
    char v38 = sub_18AF33AE8();
    if ((v38 & 1) == 0) {
      sub_18AFFBAFC();
    }
    sub_18AF18528();
    sub_18AF3875C();
    if (!v39)
    {
      if ((sub_18AF38598() & 1) == 0) {
        sub_18AF2AD34();
      }
      sub_18AF386B0();
      if (v22)
      {
        sub_18AF38750();
        if (v22) {
          static Task<>.checkCancellation()();
        }
        uint64_t v40 = sub_18AF383B0();
        uint64_t v41 = sub_18AF1BC6C(v40);
        sub_18AF38768(v41, v42, v43, v44, v45, v46, v47, v48, v54, v55);
        if (qword_1E9125240 == -1) {
          goto LABEL_22;
        }
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      swift_once();
LABEL_22:
      id v49 = (__n128 *)sub_18AF3856C();
      sub_18AF38718(v49);
      sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      uint64_t v50 = swift_task_alloc();
      uint64_t v51 = (void *)sub_18AF38740(v50);
      *uint64_t v51 = v52;
      v51[1] = sub_18AF30810;
      sub_18AF3872C();
      sub_18AF382F8();
      return MEMORY[0x1F41881B8]();
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_18AF3A8C4();
  if (v24)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v25 = sub_18AF3A8DC(v23);
  uint64_t v26 = sub_18AF31280(v25);
  sub_18AF3A878(v26);
  sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)sub_18AF3A8D0(v27);
  *uint64_t v28 = v29;
  v28[1] = sub_18AFCC7D4;
  sub_18AF309E8();
  sub_18AF3A8AC();
  return MEMORY[0x1F4188148](v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
}

uint64_t sub_18AFCC7D4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_18AFFBA2C;
  }
  else
  {
    sub_18AF1E010();
    swift_task_dealloc();
    uint64_t v8 = sub_18AFCC8C8;
    uint64_t v7 = v3;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AFCC8C8()
{
  sub_18AF338B4();
  uint64_t v1 = *(void *)(v0 + 136);
  if ((sub_18AF1FABC() & 1) == 0) {
    sub_18AF2AD34();
  }
  sub_18AF386B0();
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_18AF38750();
  if (!v2 || (static Task<>.checkCancellation()(), !v1))
  {
    uint64_t v5 = sub_18AF383B0();
    uint64_t v6 = sub_18AF1BC6C(v5);
    sub_18AF1FAA0(v6, v7, v8, v9, v10, v11, v12, v13, v18, v19);
    if (qword_1E9125240 == -1)
    {
LABEL_12:
      uint64_t v14 = (__n128 *)sub_18AF3856C();
      sub_18AF38718(v14);
      sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      uint64_t v15 = swift_task_alloc();
      uint64_t v16 = (void *)sub_18AF38740(v15);
      void *v16 = v17;
      v16[1] = sub_18AF30810;
      sub_18AF3872C();
      sub_18AF382F8();
      return MEMORY[0x1F41881B8]();
    }
LABEL_15:
    swift_once();
    goto LABEL_12;
  }
  sub_18AF434E4();
  sub_18AF1D758();
  return v3();
}

uint64_t sub_18AFCCAA8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 168) = a2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 88) = *v4;
  return MEMORY[0x1F4188298](sub_18AFCCAF8, v4, 0);
}

#error "18AFCCDBC: call analysis failed (funcsize=236)"

uint64_t sub_18AFCCEDC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *char v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AFCCF9C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_18AFCD258;
  }
  else
  {
    sub_18AF1E010();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)())sub_18AFCD090;
    uint64_t v7 = v3;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

#error "18AFCD140: call analysis failed (funcsize=108)"

uint64_t sub_18AFCD258()
{
  sub_18AF339B8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFCD2BC()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  sub_18AF30A00();
  swift_task_dealloc();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFCD3AC()
{
  sub_18AF339B8();
  sub_18AF434E4();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFCD408(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 72) = v3;
  *(void *)(v4 + 56) = a2;
  *(unsigned char *)(v4 + 169) = a1;
  *(void *)(v4 + 80) = *v3;
  return MEMORY[0x1F4188298](sub_18AFCD458, v3, 0);
}

uint64_t sub_18AFCD458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF18F44();
  uint64_t v13 = sub_18AF383B0();
  uint64_t v14 = sub_18AF38368(&qword_1E9125160, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v15 = sub_18AFFD950(v14);
  sub_18AF385E8(v15, v13);
  char v17 = v16;
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v18 = swift_task_alloc();
    uint64_t v19 = (void *)sub_18AF47550(v18);
    *uint64_t v19 = v20;
    v19[1] = sub_18AFCD894;
    sub_18AFFD7C0();
    sub_18AFFBC54();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v23 = v12[9];
  if (*(unsigned char *)(v23 + 128) == 1)
  {
    sub_18AF3A8C4();
    if (!v25)
    {
      *(void *)(v23 + 120) = v24;
      uint64_t v26 = swift_task_alloc();
      uint64_t v27 = sub_18AF31280(v26);
      sub_18AF3A878(v27);
      sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      uint64_t v28 = swift_task_alloc();
      uint64_t v29 = (void *)sub_18AF3A8D0(v28);
      *uint64_t v29 = v30;
      v29[1] = sub_18AFCD9A8;
      sub_18AF309E8();
      sub_18AFFBC54();
      return MEMORY[0x1F4188148](v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12);
    }
    __break(1u);
    goto LABEL_25;
  }
  if ((sub_18AF33AE8() & 1) == 0) {
    sub_18AFFBAFC();
  }
  uint64_t v39 = v12[9];
  sub_18AF18528();
  if (*(void *)(*(void *)(v39 + 136) + 24))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(unsigned char *)(v23 + 128) = 1;
  if ((sub_18AFFD510() & 1) == 0) {
    sub_18AF2AD34();
  }
  sub_18AFFC604();
  if (v40)
  {
    sub_18AFFD504();
    if (v40) {
      static Task<>.checkCancellation()();
    }
    v12[5] = sub_18AF383B0();
    uint64_t v41 = sub_18AFFBF44();
    sub_18AF38768(v41, v42, v43, v44, v45, v46, v47, v48, v54, v55);
    if (qword_1E9125240 == -1) {
      goto LABEL_21;
    }
    goto LABEL_27;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  swift_once();
LABEL_21:
  id v49 = (__n128 *)sub_18AFFC0C0();
  sub_18AFFC10C(v49);
  sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v50 = (void *)swift_task_alloc();
  v12[19] = v50;
  sub_18AF161EC((uint64_t *)&unk_1E9127060);
  sub_18AFFD7E4();
  *uint64_t v50 = v51;
  v50[1] = sub_18AFCDCA0;
  sub_18AFFC08C(v52);
  sub_18AFFBAE0();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFCD894()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  sub_18AF26B24();
  sub_18AF26B18();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFCD98C()
{
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFCD9A8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = sub_18AFCD258;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 72);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = sub_18AFCDAA4;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AFCDAA4()
{
  sub_18AF1A048();
  uint64_t v1 = v0[17];
  if ((sub_18AFFD510() & 1) == 0) {
    sub_18AF2AD34();
  }
  sub_18AFFC604();
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_18AFFD504();
  if (!v2 || (static Task<>.checkCancellation()(), !v1))
  {
    v0[5] = sub_18AF383B0();
    uint64_t v5 = sub_18AFFBF44();
    sub_18AF1FAA0(v5, v6, v7, v8, v9, v10, v11, v12, v17, v18);
    if (qword_1E9125240 == -1)
    {
LABEL_12:
      uint64_t v13 = (__n128 *)sub_18AFFC0C0();
      sub_18AFFC10C(v13);
      sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      uint64_t v14 = (void *)swift_task_alloc();
      v0[19] = v14;
      sub_18AF161EC((uint64_t *)&unk_1E9127060);
      sub_18AFFD7E4();
      *uint64_t v14 = v15;
      v14[1] = sub_18AFCDCA0;
      sub_18AFFC08C(v16);
      sub_18AFFBAE0();
      return MEMORY[0x1F41881B8]();
    }
LABEL_15:
    swift_once();
    goto LABEL_12;
  }
  sub_18AF434E4();
  sub_18AF1D758();
  return v3();
}

uint64_t sub_18AFCDCA0()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFCDD9C()
{
  sub_18AF339B8();
  sub_18AF434E4();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFCDDF8(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t sub_18AFCDF58(int *a1)
{
  char v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_18AFCE034;
  return v4(v1 + 16);
}

uint64_t sub_18AFCE034()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *id v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  void *v5 = v4;
  *(void *)(v6 + 32) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFCE110()
{
  return sub_18AF26340();
}

uint64_t sub_18AFCE118()
{
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFCE134(int *a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_18AFCE210;
  return v4(v1 + 32);
}

uint64_t sub_18AFCE210()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *id v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  void *v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFCE2EC()
{
  return sub_18AF26340();
}

uint64_t sub_18AFCE2F4()
{
  sub_18AF149EC();
  return sub_18AFFC4BC(v0, v1, v2);
}

uint64_t sub_18AFCE308(int *a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_18AFCE3E4;
  return v4(v1 + 32);
}

uint64_t sub_18AFCE3E4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *id v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  void *v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFCE4C0()
{
  sub_18AF16D48();
  return v0();
}

void sub_18AFCE4EC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
    sub_18AF36700();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v34;
    uint64_t v31 = v35;
    uint64_t v2 = v36;
    uint64_t v3 = v37;
    unint64_t v4 = v38;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  uint64_t v29 = v2;
  uint64_t v30 = v1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v3 + 1 >= v8) {
      goto LABEL_32;
    }
    sub_18AFFD43C();
    uint64_t v11 = v20;
    if (!v21)
    {
      uint64_t v11 = v20 + 1;
      if (v20 + 1 >= v8) {
        goto LABEL_32;
      }
      if (!*(void *)(v31 + 8 * v11))
      {
        uint64_t v11 = v20 + 2;
        if (v20 + 2 >= v8) {
          goto LABEL_32;
        }
        if (!*(void *)(v31 + 8 * v11))
        {
          uint64_t v11 = v20 + 3;
          if (v20 + 3 >= v8) {
            goto LABEL_32;
          }
          if (!*(void *)(v31 + 8 * v11))
          {
            uint64_t v11 = v20 + 4;
            if (v20 + 4 >= v8) {
              goto LABEL_32;
            }
            if (!*(void *)(v31 + 8 * v11))
            {
              int64_t v22 = v3 + 6;
              while (v22 < v8)
              {
                sub_18AFFD43C();
                int64_t v22 = v23 + 1;
                if (v24)
                {
                  uint64_t v11 = v22 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_18AF341D0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    sub_18AF43730();
    uint64_t v9 = v26 & v25;
    unint64_t v10 = v27 + (v11 << 6);
LABEL_29:
    id v28 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    LODWORD(v13) = v28;
    if (!v28) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_18AF34F50((int)&v33, (int)v13, v14, v15, v16, v17, v18, v19, v29, v30, v31, v32, (uint64_t)v33, v34, v35, v36, v37, v38, v39,
        v40,
        v41,
        v42);

      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v12 = __CocoaSet.Iterator.next()();
      if (v12)
      {
        uint64_t v32 = v12;
        sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v33;
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v13) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_18AFCE790@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = MEMORY[0x18C12BC20](v1 + 112);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v8 = result;
    swift_unknownObjectRetain();
    sub_18AF161EC((uint64_t *)&unk_1E91250F0);
    if (swift_dynamicCast())
    {
      swift_unknownObjectRelease();
      return sub_18AF5C7B0(v6, a1);
    }
    else
    {
      uint64_t v7 = 0;
      memset(v6, 0, sizeof(v6));
      sub_18AF401EC((uint64_t)v6, &qword_1E9125530);
      *(void *)&v6[0] = 0;
      *((void *)&v6[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v5._object = (void *)0x800000018B1D4930;
      v5._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v5);
      swift_getObjectType();
      uint64_t v8 = v4;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_18AFCE8D8(uint64_t a1)
{
  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  v4[0] = 0;
  type metadata accessor for CKAsyncSerialQueue();
  swift_allocObject();
  *(void *)(v1 + 120) = CKAsyncSerialQueue.init(ordering:)(v4);
  sub_18AF5D058(a1, (uint64_t)v4);
  sub_18AF161EC((uint64_t *)&unk_1E91250F0);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  sub_18AF40A30(a1);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v1;
}

void sub_18AFCE994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_18AF366C4();
  a17 = v20;
  a18 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_18AF3144C();
  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  LOBYTE(a9) = 0;
  type metadata accessor for CKAsyncSerialQueue();
  sub_18AFFCBA0();
  *(void *)(v18 + 120) = CKAsyncSerialQueue.init(ordering:)((char *)&a9);
  a9 = v19;
  a10 = v25;
  sub_18AF161EC(v23);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  sub_18AF4040C();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  sub_18AF366D8();
}

uint64_t sub_18AFCEA34(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return MEMORY[0x1F4188298](sub_18AFCEA58, v2, 0);
}

uint64_t sub_18AFCEA58()
{
  sub_18AF19FAC();
  long long v7 = *(_OWORD *)(v1 + 64);
  uint64_t v2 = sub_18AF226EC();
  uint64_t v4 = sub_18AF226C8(v2, v3);
  *(void *)(v1 + 88) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(v4 + 32) = v0;
  Swift::String v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 96) = v5;
  void *v5 = v1;
  v5[1] = sub_18AFCEB34;
  return sub_18AFCA5D0(0, (uint64_t)&unk_1E9127298, v4);
}

uint64_t sub_18AFCEB34()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  sub_18AF184F0();
  Swift::String v5 = v4;
  sub_18AF16D18();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  v5[13] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = v5[10];
    unint64_t v10 = sub_18AFCEC98;
  }
  else
  {
    uint64_t v11 = v5[10];
    v5[14] = v3;
    swift_task_dealloc();
    unint64_t v10 = sub_18AFCEC3C;
    uint64_t v9 = v11;
  }
  return MEMORY[0x1F4188298](v10, v9, 0);
}

uint64_t sub_18AFCEC3C()
{
  sub_18AF339B8();
  swift_unknownObjectRelease();
  sub_18AF149EC();
  uint64_t v2 = *(void *)(v0 + 112);
  return v1(v2);
}

uint64_t sub_18AFCEC98()
{
  return sub_18AFFBF7C();
}

uint64_t sub_18AFCED30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return MEMORY[0x1F4188298](sub_18AF49750, v3, 0);
}

uint64_t sub_18AFCED54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return MEMORY[0x1F4188298](sub_18AFCED78, v3, 0);
}

uint64_t sub_18AFCED78()
{
  sub_18AF19FAC();
  sub_18AF226A0();
  uint64_t v0 = sub_18AF226EC();
  uint64_t v2 = (__n128 *)sub_18AF226C8(v0, v1);
  sub_18AF226B0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_18AF22680(v11);
  void *v12 = v13;
  v12[1] = sub_18AF2F5F0;
  sub_18AF22690();
  return sub_18AFCC388(v14, v15, v16, v17);
}

uint64_t sub_18AFCEE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return MEMORY[0x1F4188298](sub_18AFCEE58, v3, 0);
}

uint64_t sub_18AFCEE58()
{
  sub_18AF19FAC();
  sub_18AF226A0();
  uint64_t v0 = sub_18AF226EC();
  uint64_t v2 = (__n128 *)sub_18AF226C8(v0, v1);
  sub_18AF226B0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_18AF22680(v11);
  void *v12 = v13;
  v12[1] = sub_18AFCEF14;
  sub_18AF22690();
  return sub_18AFCCAA8(v14, v15, v16, v17);
}

uint64_t sub_18AFCEF14()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 88);
    uint64_t v8 = sub_18AFCF004;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 88);
    swift_task_dealloc();
    uint64_t v8 = sub_18AF263C0;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AFCF004()
{
  return sub_18AFFBF7C();
}

uint64_t sub_18AFCF09C(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return MEMORY[0x1F4188298](sub_18AFCF0C0, v2, 0);
}

uint64_t sub_18AFCF0C0()
{
  sub_18AF19FAC();
  long long v4 = *(_OWORD *)(v0 + 88);
  sub_18AFCE790(v0 + 16);
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  *(_OWORD *)(v1 + 16) = v4;
  *(void *)(v1 + 32) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_18AFCF1A4;
  return sub_18AFCD408(0, (uint64_t)&unk_1E9127038, v1);
}

uint64_t sub_18AFCF1A4()
{
  sub_18AF2A56C();
  char v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(void *)(v5 + 104);
    __n128 v10 = sub_18AFCF314;
  }
  else
  {
    uint64_t v11 = *(void *)(v5 + 104);
    *(unsigned char *)(v5 + 136) = v3;
    swift_task_dealloc();
    __n128 v10 = sub_18AFCF2AC;
    uint64_t v9 = v11;
  }
  return MEMORY[0x1F4188298](v10, v9, 0);
}

uint64_t sub_18AFCF2AC()
{
  sub_18AF339B8();
  sub_18AF401EC(v0 + 16, &qword_1E9125530);
  sub_18AF149EC();
  uint64_t v2 = *(unsigned char *)(v0 + 136) & 1;
  return v1(v2);
}

uint64_t sub_18AFCF314()
{
  return sub_18AFFBF7C();
}

uint64_t sub_18AFCF3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a1;
  void v4[6] = a2;
  v4[2] = a3;
  v4[3] = a4;
  return MEMORY[0x1F4188298](sub_18AFCF3D0, 0, 0);
}

uint64_t sub_18AFCF3D0()
{
  sub_18AF19FAC();
  if (qword_1E9125270 != -1) {
    swift_once();
  }
  *(unsigned char *)(v0 + 72) = 1;
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 32) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  sub_18AF161EC(&qword_1E9125048);
  *uint64_t v2 = v0;
  v2[1] = sub_18AFCF524;
  sub_18AF22A48();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFCF524()
{
  sub_18AF2A56C();
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  sub_18AF16CB4();
  *char v3 = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + 8);
  return v5(v4);
}

uint64_t sub_18AFCF64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a2;
  void v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  uint64_t v5[2] = a4;
  return MEMORY[0x1F4188298](sub_18AFCF674, 0, 0);
}

uint64_t sub_18AFCF674()
{
  sub_18AF2A56C();
  if (qword_1E9125270 != -1) {
    swift_once();
  }
  uint64_t v0 = (__n128 *)sub_18AF22A10();
  sub_18AF22A30(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF22A04(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF153DC;
  sub_18AF229F8();
  sub_18AF22A48();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFCF790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a2;
  void v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  uint64_t v5[2] = a4;
  return MEMORY[0x1F4188298](sub_18AFCF7B8, 0, 0);
}

uint64_t sub_18AFCF7B8()
{
  sub_18AF2A56C();
  if (qword_1E9125270 != -1) {
    swift_once();
  }
  uint64_t v1 = (__n128 *)sub_18AF22A10();
  sub_18AF22A30(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  sub_18AF161EC(&qword_1E9125010);
  *uint64_t v2 = v0;
  v2[1] = sub_18AF38B08;
  sub_18AF229F8();
  sub_18AF22A48();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFCF8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x1F4188298](sub_18AFCF904, 0, 0);
}

uint64_t sub_18AFCF904()
{
  sub_18AF19FAC();
  if (qword_1E9125270 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  *(unsigned char *)(v0 + 57) = 1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  sub_18AF161EC((uint64_t *)&unk_1E9127060);
  *uint64_t v3 = v0;
  v3[1] = sub_18AFCFA58;
  sub_18AF22A48();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AFCFA58()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v2 = v1;
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v0;
  sub_18AF16CB4();
  void *v5 = v4;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AFFC840();
  return v6();
}

uint64_t sub_18AFCFB34(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a3;
  v4[3] = a4;
  uint64_t v7 = (int *)((char *)a1 + *a1);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  void *v5 = v4;
  v5[1] = sub_18AFCFC24;
  return ((uint64_t (*)(void *, void *))v7)(v4 + 4, v4 + 2);
}

uint64_t sub_18AFCFC24()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFCFCEC()
{
  return sub_18AF26340();
}

uint64_t sub_18AFCFCF4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  uint64_t v9 = (int *)((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  v5[4] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_18AFCFDE4;
  return ((uint64_t (*)(uint64_t, void *))v9)(a1, v5 + 2);
}

uint64_t sub_18AFCFDE4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFCFEAC(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a1 + *a1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  void *v5 = v3;
  v5[1] = sub_18AFCFF98;
  return v7(v3 + 24, a3);
}

uint64_t sub_18AFCFF98()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFD0060()
{
  return sub_18AF26340();
}

uint64_t sub_18AFD0068()
{
  sub_18AF161EC(&qword_1E9125450);
  uint64_t result = swift_allocObject();
  uint64_t v1 = result;
  *(_OWORD *)(result + 16) = xmmword_18B1F33D0;
  *(_OWORD *)(result + 32) = xmmword_18B1F33E0;
  if (qword_1E9125570 != -1) {
    uint64_t result = swift_once();
  }
  *(void *)(v1 + 48) = qword_1E9125390;
  qword_1E912FE78 = v1;
  return result;
}

void sub_18AFD00F8()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_18AF299F4();
  uint64_t v4 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v5 = sub_18AF19284(v4);
  MEMORY[0x1F4188790](v5);
  sub_18AF19290();
  uint64_t v8 = v7 - v6;
  swift_defaultActor_initialize();
  swift_weakInit();
  swift_unknownObjectWeakInit();
  type metadata accessor for CKAsyncSerialQueue();
  sub_18AFFCBA0();
  *(void *)(v0 + 176) = sub_18AFFDC7C();
  *(void *)(v0 + 184) = 1;
  sub_18AFFCBA0();
  uint64_t v9 = sub_18AFFDC7C();
  uint64_t v10 = MEMORY[0x1E4FBC870];
  *(void *)(v0 + 200) = v9;
  *(void *)(v0 + 208) = v10;
  *(void *)(v0 + 216) = 10;
  *(void *)(v0 + 232) = MEMORY[0x1E4FBC868];
  sub_18AFFCBA0();
  *(void *)(v0 + 240) = sub_18AFFDC7C();
  *(void *)(v0 + 248) = 0;
  uint64_t v118 = sub_18AF161EC(&qword_1E91255C0);
  uint64_t v11 = sub_18AF33890();
  *(_DWORD *)(v11 + 20) = 0;
  *(unsigned char *)(v11 + 16) = 0;
  *(void *)(v0 + 256) = v11;
  *(_WORD *)(v0 + 264) = 0;
  *(unsigned char *)(v0 + 266) = 0;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(void *)(v0 + 320) = 0;
  LOBYTE(v131) = 1;
  sub_18AFFCBA0();
  *(void *)(v0 + 328) = sub_18AFFDC7C();
  *(void *)(v0 + 360) = 0;
  *(void *)(v0 + 384) = 0;
  uint64_t v12 = v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_lastForegroundTriggeredFetchDate;
  uint64_t v13 = type metadata accessor for Date();
  sub_18AF43708(v12, 1, 1, v13);
  sub_18AF43708(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_earliestStartDateForSchedulerActivities, 1, 1, v13);
  *(void *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_priority) = 2;
  *(void *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_scheduleSyncTask) = 0;
  static Date.distantPast.getter();
  uint64_t v14 = OBJC_IVAR____TtC8CloudKit10SyncEngine_loggingIDLock;
  sub_18AF161EC(&qword_1E9125598);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 32) = 0;
  *(void *)(v15 + 16) = 0x6E776F6E6B6E5520;
  *(void *)(v15 + 24) = 0xE800000000000000;
  *(void *)(v1 + v14) = v15;
  uint64_t v16 = OBJC_IVAR____TtC8CloudKit10SyncEngine_notificationObserverTasks;
  sub_18AF161EC(&qword_1E91255A0);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(void *)(v17 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v1 + v16) = v17;
  swift_weakAssign();
  swift_unknownObjectWeakAssign();
  uint64_t v18 = *(void **)v3;
  *(void *)(v1 + 136) = *(void *)v3;
  id v19 = v18;
  id v20 = objc_msgSend(v19, sel_container);
  if (!v20)
  {
    *(void *)&long long v131 = 0;
    *((void *)&v131 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(192);
    sub_18AFFC468(0xD0000000000000BELL, (uint64_t)"BUG IN CLIENT OF CLOUDKIT: Trying to initialize a CKSyncEngine for a CKDatabase with a nil container. This usually means that you don't have a strong reference to your CKContainer. database=");
    id v94 = objc_msgSend(v19, sel_description);
    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v97 = v96;

    v98._uint64_t countAndFlagsBits = v95;
    v98._object = v97;
    String.append(_:)(v98);
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  *(void *)(v1 + 144) = v20;
  uint64_t v21 = qword_1E91252A8;
  id v22 = v20;
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1E912FE78;
  swift_bridgeObjectRetain();
  char v24 = sub_18AFC122C((uint64_t)objc_msgSend(v19, sel_databaseScope), v23);
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
    *(void *)&long long v131 = 0;
    *((void *)&v131 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(73);
    v99._object = (void *)0x800000018B1D4E90;
    v99._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
    String.append(_:)(v99);
    uint64_t v100 = CKDatabaseScopeString((unint64_t)objc_msgSend(v19, sel_databaseScope));
    uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v103 = v102;

    v104._uint64_t countAndFlagsBits = v101;
    v104._object = v103;
    String.append(_:)(v104);
    swift_bridgeObjectRelease();
    v105._uint64_t countAndFlagsBits = 0x7361626174616420;
    v105._object = (void *)0xE900000000000065;
    String.append(_:)(v105);
LABEL_32:
    sub_18AFFCBD0();
    _assertionFailure(_:_:file:line:flags:)();
    sub_18AFFD87C();
  }
  uint64_t v25 = *(void *)(v3 + 32);
  sub_18AF161EC(&qword_1E9125518);
  swift_allocObject();
  uint64_t v26 = swift_unknownObjectRetain();
  sub_18AFCE994(v26, v25, (uint64_t)&unk_1E91252E0, v27, v28, v29, v30, v31, v106, v108, v110, v112, v114, v116, v118, v120, v123, v126);
  *(void *)(v1 + 152) = v32;
  if (*(void *)(v3 + 64))
  {
    uint64_t v33 = *(void *)(v3 + 72);
    sub_18AF161EC(&qword_1E91250E0);
    swift_allocObject();
    uint64_t v34 = swift_unknownObjectRetain();
    sub_18AFCE994(v34, v33, (uint64_t)&unk_1E91250E8, v35, v36, v37, v38, v39, v107, v109, v111, v113, v115, v117, v119, v121, v124, v127);
  }
  else
  {
    uint64_t v40 = 0;
  }
  *(void *)(v1 + 160) = v40;
  sub_18AF402EC(v3 + 128, (uint64_t)&v131, &qword_1E9125530);
  if (v133)
  {
    sub_18AF5C7B0(&v131, (uint64_t)v130);
    sub_18AF5D058((uint64_t)v130, (uint64_t)v129);
    sub_18AF161EC(&qword_1E91274D8);
    swift_allocObject();
    uint64_t v41 = sub_18AFCE8D8((uint64_t)v129);
    sub_18AF40A30((uint64_t)v130);
  }
  else
  {
    uint64_t v41 = 0;
  }
  *(void *)(v1 + 168) = v41;
  if (*(unsigned char *)(v3 + 120) == 1)
  {
    *(void *)&long long v131 = sub_18AFF4BCC(0x51615uLL);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  uint64_t v44 = (uint64_t *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_activityNameSuffix);
  *uint64_t v44 = v42;
  v44[1] = v43;
  uint64_t v45 = *(void *)(v3 + 96);
  sub_18AF18528();
  uint64_t v46 = *(void **)(v45 + 16);
  uint64_t v125 = v22;
  uint64_t v128 = v8;
  v122 = v19;
  if (v46) {
    xpc_object_t v47 = xpc_copy(v46);
  }
  else {
    xpc_object_t v47 = 0;
  }
  sub_18AF161EC((uint64_t *)&unk_1E9125520);
  uint64_t v48 = sub_18AF33890();
  *(void *)(v48 + 16) = v47;
  *(void *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_xpcActivityCriteriaWrapper) = v48;
  uint64_t v49 = *(void *)(v3 + 56);
  *(void *)(v1 + 368) = *(void *)(v3 + 48);
  *(void *)(v1 + 376) = v49;
  uint64_t v50 = *(void *)(v3 + 88);
  *(void *)(v1 + 336) = *(void *)(v3 + 80);
  *(void *)(v1 + 344) = v50;
  *(unsigned char *)(v1 + 192) = *(unsigned char *)(v3 + 121);
  uint64_t v51 = *(void **)(v3 + 112);
  *(unsigned char *)(v1 + 392) = *(unsigned char *)(v3 + 122);
  *(unsigned char *)(v1 + 193) = *(unsigned char *)(v3 + 168);
  *(unsigned char *)(v1 + 352) = *(unsigned char *)(v3 + 104);
  unint64_t v52 = *(void *)(v3 + 16);
  *(void *)(v1 + 224) = v51;
  if (v52 >> 60 == 15)
  {
    type metadata accessor for CKSyncEngine.State();
    uint64_t v53 = sub_18AF33890();
    uint64_t v54 = self;
    id v55 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v53 + 16) = objc_msgSend(v54, sel_emptyState);
  }
  else
  {
    *(void *)&long long v131 = *(void *)(v3 + 8);
    uint64_t v56 = v131;
    *((void *)&v131 + 1) = v52;
    type metadata accessor for CKSyncEngine.State();
    sub_18AF33890();
    sub_18AF5F6E8(v56, v52);
    id v57 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18AF5F6E8(v56, v52);
    uint64_t v53 = CKSyncEngine.State.init(_:)((uint64_t *)&v131);
    sub_18AF5B00C(v56, v52);
  }
  *(void *)(v1 + 128) = v53;
  char v58 = *(unsigned char *)(v3 + 40);
  uint64_t v59 = sub_18AF33890();
  *(_DWORD *)(v59 + 20) = 0;
  *(unsigned char *)(v59 + 16) = v58;
  *(void *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_isAutomaticSyncEnabledLock) = v59;
  objc_msgSend(*(id *)(v53 + 16), sel_moveInFlightChangesToPending);
  sub_18AFD0E64(v1);
  sub_18AF33890();
  sub_18AFFC450();
  uint64_t v60 = swift_retain();
  sub_18AFFDBF0(v60, v61, (uint64_t)&unk_1E9127480);
  sub_18AFFBC0C();
  uint64_t v62 = sub_18AFD119C();
  if (v62)
  {
    uint64_t v63 = (void *)v62;
    uint64_t v64 = sub_18AF33890();
    sub_18AFFC450();
    swift_retain();
    sub_18AFF07DC((uint64_t)v63, 0, (uint64_t)&unk_1E91274D0, v64);

    swift_release_n();
  }
  if (objc_msgSend(v122, sel_scope) == (id)3)
  {
    sub_18AF33890();
    sub_18AFFC450();
    uint64_t v65 = swift_retain();
    sub_18AFFDBF0(v65, v66, (uint64_t)&unk_1E91274C0);
    sub_18AFFBC0C();
  }
  unint64_t v67 = *(void **)(*(void *)(v1 + 128) + 16);
  uint64_t v68 = sub_18AF33890();
  sub_18AFFC450();
  uint64_t v134 = sub_18AF42AB8;
  uint64_t v135 = v68;
  *(void *)&long long v131 = MEMORY[0x1E4F143A8];
  *((void *)&v131 + 1) = 1107296256;
  uint64_t v132 = sub_18AF42A58;
  unint64_t v133 = &unk_1ED7F5280;
  uint64_t v69 = _Block_copy(&v131);
  id v70 = v67;
  swift_release();
  objc_msgSend(v70, sel_setChangeHandler_, v69);
  _Block_release(v69);

  uint64_t v71 = self;
  id v72 = objc_msgSend(v71, sel_sharedScheduler);
  sub_18AFE5CC0();
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v77 = sub_18AF33890();
  sub_18AFFC450();
  swift_retain();
  CKScheduler.registerActivityIdentifier(_:replaceExistingHandler:handler:)(v74, v76, 1, (uint64_t)&unk_1E9127490, v77);

  swift_bridgeObjectRelease();
  sub_18AFFDAD0();
  id v78 = objc_msgSend(v71, sel_sharedScheduler);
  sub_18AFE6118();
  uint64_t v80 = v79;
  uint64_t v82 = v81;
  uint64_t v83 = sub_18AF33890();
  sub_18AFFC450();
  swift_retain();
  CKScheduler.registerActivityIdentifier(_:replaceExistingHandler:handler:)(v80, v82, 1, (uint64_t)&unk_1E91274A0, v83);

  swift_bridgeObjectRelease();
  sub_18AFFBC0C();
  uint64_t v84 = type metadata accessor for TaskPriority();
  sub_18AF1826C(v128, v85, v86, v84);
  BOOL v87 = (void *)sub_18AF3488C();
  sub_18AFFDC94(v87);
  sub_18AF42DB4(v128, (uint64_t)&unk_1E91274B0, (uint64_t)v78);
  swift_release();
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v88 = type metadata accessor for Logger();
  sub_18AF35568(v88, (uint64_t)qword_1E91253B0);
  char v89 = Logger.logObject.getter();
  os_log_type_t v90 = static os_log_type_t.default.getter();
  if (sub_18AFFC7AC(v90))
  {
    uint64_t v91 = (_DWORD *)sub_18AF2A5F0();
    *(void *)&long long v131 = sub_18AF16B9C();
    *uint64_t v91 = 136315138;
    swift_retain();
    sub_18AF40CEC();
    uint64_t v92 = swift_release();
    v129[0] = sub_18AFFDC10(v92, v93, (uint64_t *)&v131);
    sub_18AFFC438();
    sub_18AF35674();
    swift_bridgeObjectRelease();
    sub_18AFFBB1C(&dword_18AF10000, v89, (os_log_type_t)v82, "%s initialized sync engine");
    sub_18AF351C4();
    sub_18AF388F8();
    sub_18AF388F8();

    swift_release();
  }
  else
  {

    swift_release();
    sub_18AF35674();
  }
  sub_18AF5225C(v3);
  sub_18AF32064();
}

void sub_18AFD0E64(uint64_t a1)
{
  if (qword_1E91253A8 != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(qword_1E912FE70 + 16));
  if (qword_1E9125490 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_1E912FE88;
  objc_msgSend((id)qword_1E912FE88, sel_addObject_, a1);
  id v3 = objc_msgSend(v2, sel_allObjects);
  type metadata accessor for SyncEngine();
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  static SyncEngine.populateLoggingIDs(for:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = (os_unfair_lock_s *)(qword_1E912FE70 + 16);

  os_unfair_lock_unlock(v4);
}

uint64_t sub_18AFD0F78(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x1F4188298](sub_18AFD0F98, 0, 0);
}

#error "18AFD1064: call analysis failed (funcsize=103)"

uint64_t sub_18AFD113C()
{
  sub_18AF339B8();
  sub_18AFE0B30();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v0, v1, v2);
}

uint64_t sub_18AFD119C()
{
  if (CKCurrentProcessIsDaemon()) {
    return 0;
  }
  else {
    return MEMORY[0x18C128F60](0xD00000000000002CLL, 0x800000018B1D4EE0);
  }
}

uint64_t sub_18AFD11DC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x1F4188298](sub_18AFD11FC, 0, 0);
}

#error "18AFD12C8: call analysis failed (funcsize=111)"

uint64_t sub_18AFD13D0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFD1498()
{
  sub_18AF339B8();
  swift_release();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFD14F0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return MEMORY[0x1F4188298](sub_18AFD1510, 0, 0);
}

uint64_t sub_18AFD1510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v23;
  a22 = v24;
  sub_18AF18F44();
  a20 = v22;
  Notification.object.getter();
  if (v22[5])
  {
    sub_18AF34EA0(0, &qword_1E91274E0);
    if (swift_dynamicCast())
    {
      uint64_t v25 = (void *)v22[6];
      v22[9] = v25;
      sub_18AF18528();
      uint64_t Strong = swift_weakLoadStrong();
      v22[10] = Strong;
      if (Strong)
      {
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_18AF35568(v27, (uint64_t)qword_1E91253B0);
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)sub_18AF2A5F0();
          a11 = sub_18AF16B9C();
          *(_DWORD *)uint64_t v30 = 136315138;
          swift_retain();
          sub_18AF40CEC();
          uint64_t v31 = sub_18AFFBF60();
          v22[6] = sub_18AF3F444(v31, v32, &a11);
          sub_18AFFC7C8();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_18AF35674();
          _os_log_impl(&dword_18AF10000, v28, v29, "%s received CKAcceptSharesOperationDidAcceptShare notification", v30, 0xCu);
          sub_18AF3F7A8();
          sub_18AF388F8();
          sub_18AF388F8();
        }
        else
        {
          sub_18AF35674();
        }

        sub_18AF309A4();
        sub_18AF2ACD0();
        return MEMORY[0x1F4188298](v42, v43, v44);
      }
    }
  }
  else
  {
    sub_18AF401EC((uint64_t)(v22 + 2), &qword_1E91250B8);
  }
  sub_18AF16D48();
  sub_18AF2ACD0();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_18AFD1764()
{
  sub_18AF339B8();
  sub_18AFECC10(*(void **)(v0 + 72));
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_18AFD17C4()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 72);
  swift_release();

  sub_18AF16D48();
  return v2();
}

uint64_t sub_18AFD1820(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x1F4188298](sub_18AFD1840, 0, 0);
}

uint64_t sub_18AFD1840()
{
  sub_18AF339B8();
  sub_18AF18528();
  uint64_t Strong = swift_weakLoadStrong();
  v0[7] = Strong;
  if (Strong)
  {
    uint64_t v2 = swift_task_alloc();
    uint64_t v3 = (void *)sub_18AF22A04(v2);
    *uint64_t v3 = v4;
    v3[1] = sub_18AFD1924;
    uint64_t v5 = sub_18AF41784(v0[5]);
    return sub_18AFE64C4(v5);
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
    return v7(1);
  }
}

uint64_t sub_18AFD1924()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 72) = v3;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFD19F4()
{
  sub_18AF339B8();
  swift_release();
  sub_18AF149EC();
  return v0();
}

uint64_t sub_18AFD1A50(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x1F4188298](sub_18AFD1A70, 0, 0);
}

uint64_t sub_18AFD1A70()
{
  sub_18AF339B8();
  sub_18AF18528();
  uint64_t Strong = swift_weakLoadStrong();
  v0[7] = Strong;
  if (Strong)
  {
    uint64_t v2 = swift_task_alloc();
    uint64_t v3 = (void *)sub_18AF22A04(v2);
    *uint64_t v3 = v4;
    v3[1] = sub_18AFD1B54;
    uint64_t v5 = sub_18AF41784(v0[5]);
    return sub_18AFE827C(v5);
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
    return v7(1);
  }
}

uint64_t sub_18AFD1B54()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 72) = v3;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFD1C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  sub_18AF161EC(&qword_1E9125470);
  *(void *)(v4 + 40) = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFD1CBC, a4, 0);
}

uint64_t sub_18AFD1CBC()
{
  sub_18AF339B8();
  sub_18AFE2AC0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF22D78(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFD1D4C;
  return sub_18AFEF960();
}

uint64_t sub_18AFD1D4C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFD1E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  if (sub_18AF38A9C())
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_18AF412A0(v26, (uint64_t)qword_1E91253B0);
    sub_18AF3098C();
    uint64_t v27 = (void *)Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (sub_18AFFCFDC(v28))
    {
      os_log_type_t v29 = (_DWORD *)sub_18AF2A5F0();
      a11 = sub_18AF16B9C();
      *os_log_type_t v29 = 136315138;
      swift_retain();
      uint64_t v30 = sub_18AF40CEC();
      sub_18AF30464();
      *(void *)(v22 + 24) = sub_18AF4095C(v30, v23, &a11);
      sub_18AFFDB00();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFC7F0(&dword_18AF10000, v31, v32, "%s automatic syncing is enabled. Preparing and scheduling initial sync.");
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }

    uint64_t v39 = swift_task_alloc();
    uint64_t v40 = (void *)sub_18AF3F79C(v39);
    *uint64_t v40 = v41;
    v40[1] = sub_18AFD2128;
    sub_18AF2ACD0();
    return sub_18AF1B5E8();
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_18AF41270(v33, (uint64_t)qword_1E91253B0);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (_DWORD *)sub_18AF2A5F0();
      a10 = v22 + 24;
      a11 = sub_18AF16B9C();
      *uint64_t v36 = 136315138;
      a9 = v36 + 1;
      swift_retain();
      sub_18AF40CEC();
      uint64_t v37 = sub_18AF41328();
      *(void *)(v22 + 16) = sub_18AF41370(v37, v38, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB50(&dword_18AF10000, v34, v35, "%s automatic syncing is disabled.");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }

    swift_task_dealloc();
    sub_18AF16D48();
    sub_18AF2ACD0();
    return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AFD2128()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFD21F0()
{
  sub_18AF339B8();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for Date();
  sub_18AF1826C(v1, v3, v4, v2);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_18AF22A04(v5);
  *uint64_t v6 = v7;
  v6[1] = sub_18AFD2290;
  sub_18AF41784(*(void *)(v0 + 40));
  return sub_18AF2932C();
}

uint64_t sub_18AFD2290()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v2 = v1;
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = *v0;
  sub_18AF16CB4();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  sub_18AF401EC(v5, &qword_1E9125470);
  swift_task_dealloc();
  sub_18AF16D48();
  return v8();
}

void SyncEngine.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF33850();
  a21 = v23;
  a22 = v24;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_18AF35568(v25, (uint64_t)qword_1E91253B0);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    os_log_type_t v28 = (uint8_t *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFD130();
    *(_DWORD *)os_log_type_t v28 = 136315138;
    swift_retain();
    sub_18AF40CEC();
    uint64_t v29 = sub_18AFFBF60();
    sub_18AF3F444(v29, v30, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF35674();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18AF10000, v26, v27, "%s deallocating sync engine actor", v28, 0xCu);
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF35674();
  }
  sub_18AFF1098();
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_18AF401EC((uint64_t)(v22 + 34), &qword_1E91250B8);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  sub_18AF401EC((uint64_t)v22 + OBJC_IVAR____TtC8CloudKit10SyncEngine_lastForegroundTriggeredFetchDate, &qword_1E9125470);
  sub_18AF401EC((uint64_t)v22 + OBJC_IVAR____TtC8CloudKit10SyncEngine_earliestStartDateForSchedulerActivities, &qword_1E9125470);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for Date();
  sub_18AF402B8();
  sub_18AF402E0();
  v31();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  sub_18AF16CC4();
}

#error "18AFD267C: call analysis failed (funcsize=15)"

uint64_t sub_18AFD269C()
{
  sub_18AF18528();
  return *(void *)(v0 + 184);
}

uint64_t sub_18AFD26C8(uint64_t a1)
{
  uint64_t result = sub_18AF3F37C();
  *(void *)(v1 + 184) = a1;
  return result;
}

uint64_t (*sub_18AFD26FC())()
{
  return j_j__swift_endAccess_0;
}

uint64_t SyncEngine.repeatZoneModificationsUntilNoneLeft.getter()
{
  return *(unsigned __int8 *)(v0 + 193);
}

uint64_t sub_18AFD2748()
{
  sub_18AF37C20();
  sub_18AF19FAC();

  uint64_t v2 = *(void **)(v0 + 312);
  sub_18AF232C4();
  uint64_t v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(v2);
  *(void *)(v0 + 368) = v3;
  id v4 = v3;
  sub_18AF42F68(v3);
  if (v1 == 1)
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v5;
    void *v5 = v0;
    v5[1] = sub_18AF1F6D4;
    sub_18AF30494();
    sub_18AF37AC0();
    return sub_18AF2926C();
  }
  else
  {

    *(void *)(v0 + 336) = v3;
    uint64_t v8 = swift_task_alloc();
    uint64_t v9 = (void *)sub_18AF1EBF8(v8);
    void *v9 = v10;
    v9[1] = sub_18AF1F1AC;
    sub_18AF1EC9C();
    sub_18AF37AC0();
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AFD2888()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v2 = (void *)v0[41];
  sub_18AF232C4();
  uint64_t v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(v2);
  v0[46] = v3;
  id v4 = v3;
  sub_18AF42F68(v3);
  if (v1 == 1)
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[47] = v5;
    void *v5 = v0;
    v5[1] = sub_18AF1F6D4;
    sub_18AF30494();
    sub_18AF37AC0();
    return sub_18AF2926C();
  }
  else
  {

    v0[42] = v3;
    uint64_t v8 = swift_task_alloc();
    uint64_t v9 = (void *)sub_18AF1EBF8(v8);
    void *v9 = v10;
    v9[1] = sub_18AF1F1AC;
    sub_18AF1EC9C();
    sub_18AF37AC0();
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AFD29C0()
{
  sub_18AF339B8();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFD2A28()
{
  sub_18AF339B8();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFD2A90(void *a1)
{
  uint64_t v2 = type metadata accessor for CancellationError();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[0] = a1;
  type metadata accessor for CKError(0);
  uint64_t v7 = v6;
  uint64_t v8 = sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.code.getter();
  uint64_t v9 = 1;
  if (v55 > 0x24) {
    goto LABEL_33;
  }
  if (((1 << v55) & 0x1000A002DALL) != 0) {
    return v9;
  }
  if (v55 != 2)
  {
LABEL_33:
    if (v55 - 110 > 5 || ((1 << (v55 - 110)) & 0x23) == 0) {
      return 0;
    }
    return v9;
  }
  uint64_t v10 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)a1);
  if (!v10)
  {
    if (qword_1E91252D0 != -1) {
LABEL_44:
    }
      swift_once();
    uint64_t v31 = type metadata accessor for Logger();
    sub_18AF412A0(v31, (uint64_t)qword_1E91253B0);
    id v32 = a1;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v35 = 138412290;
      id v37 = v32;
      uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
      v56[0] = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v38;

      _os_log_impl(&dword_18AF10000, v33, v34, "BUG IN CLOUDKIT: Could not get partial errors from CKError.partialFailure: %@", v35, 0xCu);
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      uint64_t v9 = 1;
      swift_arrayDestroy();
      MEMORY[0x18C12BB10](v36, -1, -1);
      MEMORY[0x18C12BB10](v35, -1, -1);
    }
    else
    {

      return 1;
    }
    return v9;
  }
  uint64_t v11 = v10;
  uint64_t v42 = v2;
  uint64_t v45 = v8;
  sub_18AFC2F00(v10, v56);
  uint64_t v12 = v56[0];
  uint64_t v48 = v56[1];
  int64_t v13 = v56[3];
  unint64_t v14 = v56[4];
  int64_t v49 = (unint64_t)(v56[2] + 64) >> 6;
  uint64_t v47 = *MEMORY[0x1E4F28568];
  uint64_t v46 = (void (**)(char *, uint64_t))(v3 + 8);
  v41[1] = v11;
  swift_bridgeObjectRetain();
  long long v44 = xmmword_18B1F16B0;
  unint64_t v43 = 0x800000018B1D49C0;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      int64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_44;
      }
      if (v17 >= v49) {
        goto LABEL_38;
      }
      unint64_t v18 = *(void *)(v48 + 8 * v17);
      int64_t v19 = v13 + 1;
      if (!v18)
      {
        int64_t v19 = v13 + 2;
        if (v13 + 2 >= v49) {
          goto LABEL_38;
        }
        unint64_t v18 = *(void *)(v48 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v13 + 3;
          if (v13 + 3 >= v49) {
            goto LABEL_38;
          }
          unint64_t v18 = *(void *)(v48 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v13 + 4;
            if (v13 + 4 >= v49) {
              goto LABEL_38;
            }
            unint64_t v18 = *(void *)(v48 + 8 * v19);
            if (!v18)
            {
              int64_t v19 = v13 + 5;
              if (v13 + 5 >= v49) {
                goto LABEL_38;
              }
              unint64_t v18 = *(void *)(v48 + 8 * v19);
              if (!v18)
              {
                int64_t v19 = v13 + 6;
                if (v13 + 6 >= v49) {
                  goto LABEL_38;
                }
                unint64_t v18 = *(void *)(v48 + 8 * v19);
                if (!v18)
                {
                  int64_t v20 = v13 + 7;
                  while (v20 < v49)
                  {
                    unint64_t v18 = *(void *)(v48 + 8 * v20++);
                    if (v18)
                    {
                      int64_t v19 = v20 - 1;
                      goto LABEL_25;
                    }
                  }
LABEL_38:
                  swift_bridgeObjectRelease();
                  swift_release();
                  return 0;
                }
              }
            }
          }
        }
      }
LABEL_25:
      unint64_t v14 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
      int64_t v13 = v19;
    }
    uint64_t v21 = *(void **)(*(void *)(v12 + 56) + 8 * v16);
    id v52 = v21;
    id v22 = v21;
    id v23 = v21;
    sub_18AF161EC(&qword_1E9125660);
    if (!swift_dynamicCast()) {
      break;
    }

    uint64_t v24 = v54;
LABEL_30:
    char v30 = sub_18AFD2A90(v24);

    if (v30)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return 1;
    }
  }
  unint64_t v50 = v14;
  a1 = v7;

  id v52 = v21;
  id v25 = v21;
  uint64_t v26 = v5;
  uint64_t v27 = v42;
  if (swift_dynamicCast())
  {
    sub_18AF161EC(&qword_1E9126AA0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v44;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v29;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = v43;
    Dictionary.init(dictionaryLiteral:)();
    uint64_t v51 = 20;
    sub_18AFFE090();
    swift_bridgeObjectRelease();
    _BridgedStoredNSError.init(_:userInfo:)();

    uint64_t v24 = v54;
    (*v46)(v26, v27);

    uint64_t v5 = v26;
    uint64_t v7 = a1;
    unint64_t v14 = v50;
    goto LABEL_30;
  }

  id v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  v40._uint64_t countAndFlagsBits = 0xD000000000000024;
  v40._object = (void *)0x800000018B1D4990;
  String.append(_:)(v40);
  swift_getErrorValue();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18AFD31F4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  *(void *)(v6 + 408) = v5;
  swift_task_dealloc();
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFD32F0()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v1 = *(void **)(v0 + 408);
  if (v1)
  {
    if (v1[2])
    {
      uint64_t v2 = *(void **)(v0 + 384);
      sub_18AF5F37C(0, 1, *(void *)(v0 + 408));
      uint64_t v3 = v1[4];
      uint64_t v4 = v1[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_18AFF8FEC(v3, v4, v2);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v5 = *(void **)(v0 + 384);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 248) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 256) = v6;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 416) = v7;
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v0 + 368);
  sub_18AF2066C((uint64_t)&dword_1E9126878);
  id v8 = v5;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v9;
  void *v9 = v0;
  v9[1] = sub_18AFD3430;
  sub_18AFFD2D8();
  sub_18AF37AC0();
  return v15(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_18AFD3430()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[54] = v5;
  v3[55] = v6;
  v3[56] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[39];
    id v8 = sub_18AFD4630;
  }
  else
  {
    uint64_t v9 = (void *)v3[48];
    uint64_t v10 = v3[39];

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    id v8 = sub_18AFD354C;
    uint64_t v7 = v10;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

void sub_18AFD354C()
{
  uint64_t v4 = v0;
  uint64_t v5 = 0;
  unint64_t v133 = (id *)(v4 + 27);
  uint64_t v132 = (void **)(v4 + 28);
  Swift::Int v137 = (id *)(v4 + 29);
  uint64_t v6 = v4 + 31;
  uint64_t v7 = v4 + 32;
  uint64_t v8 = v4[54];
  uint64_t v145 = v8 + 64;
  sub_18AFFBE54();
  uint64_t v139 = v10 & v9;
  sub_18AFFD7AC();
  uint64_t v134 = v11 & 0xFFFFFFFFFFFFFF8;
  unint64_t v143 = v11 & 0xC000000000000001;
  unint64_t v141 = v11 + 32;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  unint64_t v136 = v11 >> 62;
  v149 = v4;
  uint64_t v138 = v4 + 31;
LABEL_2:
  uint64_t v140 = v12;
  if (v139)
  {
LABEL_3:
    sub_18AFFD78C();
    uint64_t v14 = v13 | (v5 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    if (__OFADD__(v5, 1)) {
      goto LABEL_97;
    }
    sub_18AFFC98C();
    if (v15 == v16) {
      break;
    }
    sub_18AFFD780();
    uint64_t v5 = v17;
    if (v18) {
      goto LABEL_19;
    }
    uint64_t v5 = v17 + 1;
    if (v17 + 1 >= (uint64_t)v148) {
      break;
    }
    if (*(void *)(v145 + 8 * v5)) {
      goto LABEL_19;
    }
    uint64_t v5 = v17 + 2;
    if (v17 + 2 >= (uint64_t)v148) {
      break;
    }
    if (*(void *)(v145 + 8 * v5)) {
      goto LABEL_19;
    }
    sub_18AFFC98C();
    if (v15 == v16) {
      break;
    }
    sub_18AFFD780();
    if (!v20)
    {
      while (1)
      {
        uint64_t v5 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_99;
        }
        if (v5 >= (uint64_t)v148) {
          goto LABEL_43;
        }
        ++v19;
        if (*(void *)(v145 + 8 * v5)) {
          goto LABEL_19;
        }
      }
    }
    uint64_t v5 = v19;
LABEL_19:
    sub_18AFFD414();
    uint64_t v14 = v21 + (v5 << 6);
LABEL_20:
    unint64_t v1 = *(void *)(*(void *)(v8 + 48) + 8 * v14);
    uint64_t v22 = *(void *)(v8 + 56) + 16 * v14;
    uint64_t v3 = *(char **)v22;
    if (*(unsigned char *)(v22 + 8))
    {
      if (!v136)
      {
        uint64_t v25 = *(void *)(v134 + 16);
        sub_18AF84C94(v3);
        sub_18AF84C94(v3);
        uint64_t v26 = (id *)(id)v1;
        swift_bridgeObjectRetain();
        if (v25) {
          goto LABEL_27;
        }
LABEL_90:
        swift_bridgeObjectRelease();
        _StringGuts.grow(_:)(67);
        sub_18AFFD6B8();
        sub_18AFFC468(v80 + 47, (uint64_t)"BUG IN CLOUDKIT: Couldn't find zone to save in batch for zone ID ");
        id v81 = objc_msgSend((id)v1, sel_description);
        uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v84 = v83;

        v85._uint64_t countAndFlagsBits = v82;
        v85._object = v84;
        String.append(_:)(v85);
        swift_bridgeObjectRelease();
        sub_18AFFCBD0();
LABEL_91:
        _assertionFailure(_:_:file:line:flags:)();
        sub_18AFFCE0C();
        return;
      }
      sub_18AF84C94(v3);
      swift_bridgeObjectRetain();
      sub_18AF84C94(v3);
      uint64_t v47 = (id *)(id)v1;
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v25) {
        goto LABEL_90;
      }
LABEL_27:
      uint64_t v27 = (void *)sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
      uint64_t v28 = 0;
      uint64_t v131 = v5;
      uint64_t v142 = v25;
      while (1)
      {
        uint64_t v29 = v143 ? (void *)MEMORY[0x18C1298C0](v28, v4[46]) : *(id *)(v141 + 8 * v28);
        uint64_t v6 = v29;
        uint64_t v30 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          break;
        }
        uint64_t v31 = v8;
        id v32 = v7;
        id v33 = objc_msgSend(v29, sel_zoneID);
        char v34 = static NSObject.== infix(_:_:)();

        if (v34)
        {
          swift_bridgeObjectRelease();
          sub_18AF84C94(v3);
          uint64_t v36 = v6;
          id v37 = (void *)sub_18AFFDCB4();
          uint64_t v38 = (void *)related decl 'e' for CKErrorCode.init(_:)(v37);
          id v39 = v27;
          id v40 = v38;
          uint64_t v41 = v140;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_18AFFCED4();
            sub_18AF65B20();
            uint64_t v41 = v48;
          }
          uint64_t v6 = v138;
          uint64_t v42 = v41;
          unint64_t v43 = *(void *)(v41 + 16);
          uint64_t v44 = v42;
          unint64_t v45 = *(void *)(v42 + 24);
          unint64_t v2 = v43 + 1;
          if (v43 >= v45 >> 1)
          {
            sub_18AF34080(v45);
            sub_18AF65B20();
            uint64_t v44 = v49;
          }
          *(void *)(v44 + 16) = v2;
          uint64_t v46 = v44 + 16 * v43;
          uint64_t v12 = v44;
          *(void *)(v46 + 32) = v39;
          *(void *)(v46 + 40) = v40;

          sub_18AF62BA4(v3);
          sub_18AF62BA4(v3);
          uint64_t v4 = v149;
          uint64_t v7 = v32;
          uint64_t v8 = v31;
          uint64_t v5 = v131;
          goto LABEL_2;
        }

        ++v28;
        BOOL v35 = v30 == v142;
        uint64_t v4 = v149;
        uint64_t v7 = v32;
        uint64_t v8 = v31;
        if (v35) {
          goto LABEL_90;
        }
      }
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      sub_18AFFC630();
      unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_103;
      }
LABEL_80:
      v150 = (void *)MEMORY[0x1E4FBC860];
      sub_18AF5B678();
      if ((v2 & 0x8000000000000000) == 0)
      {
        uint64_t v3 = 0;
        id v78 = v150;
        uint64_t v7 = (void *)(v1 & 0xC000000000000001);
        do
        {
          if (v7) {
            MEMORY[0x18C1298C0](0, v1);
          }
          else {
            id v79 = *(id *)(v1 + 32);
          }
          sub_18AFFD528();
          if (v24)
          {
            sub_18AFFCD18();
            id v78 = v150;
          }
          sub_18AFFCA58();
        }
        while (!v35);
        swift_bridgeObjectRelease();
        uint64_t v6 = v138;
        goto LABEL_104;
      }
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
      return;
    }
    sub_18AF84C94(v3);
    sub_18AF84C94(v3);
    unint64_t v1 = (unint64_t)(id)v1;
    MEMORY[0x18C129220]();
    sub_18AFFD024();
    if (v24)
    {
      sub_18AFFC680(v23);
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    sub_18AF29B74();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    sub_18AF62BA4(v3);
    if (v139) {
      goto LABEL_3;
    }
  }
LABEL_43:
  unint64_t v50 = (id *)v4[46];
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v51 = 0;
  uint64_t v3 = (char *)v4[55];
  uint64_t v7 = v3 + 64;
  sub_18AFFBE54();
  uint64_t v54 = v53 & v52;
  int64_t v56 = (unint64_t)(63 - v55) >> 6;
  v148 = (id *)MEMORY[0x1E4FBC868];
  sub_18AFFBDF0();
  uint64_t v135 = v57;
  char v58 = v137;
  int64_t v144 = v56;
  while (v54)
  {
    sub_18AFFCEBC();
LABEL_60:
    sub_18AFFD6D8();
    if (v35)
    {
      unint64_t v1 = (unint64_t)*v61;
      uint64_t v63 = v133;
      id v64 = sub_18AFFCE80();
      sub_18AF9E5A8((id)v1, 1);
      uint64_t v6 = v64;
      sub_18AF9E5A8((id)v1, 1);
      sub_18AF161EC(&qword_1E9125660);
      type metadata accessor for CKError(0);
      if (sub_18AFFD7F0())
      {
        sub_18AFFCB2C();
        v146 = *v132;
      }
      else
      {

        v149[29] = v1;
        uint64_t v65 = (id *)(id)v1;
        if (!swift_dynamicCast())
        {

          _StringGuts.grow(_:)(38);
          unint64_t v86 = sub_18AFFBD0C();
          sub_18AFFC468(v86, (uint64_t)"Unable to convert error to CKError: ");
          swift_getErrorValue();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          sub_18AFFBCB4();
          goto LABEL_91;
        }
        sub_18AF161EC(&qword_1E9126AA0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18B1F16B0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v67;
        sub_18AFFD6B8();
        *(void *)(inited + 48) = v68;
        *(void *)(inited + 56) = v135;
        Dictionary.init(dictionaryLiteral:)();
        v149[34] = 20;
        sub_18AFFE090();
        swift_bridgeObjectRelease();
        sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
        _BridgedStoredNSError.init(_:userInfo:)();
        sub_18AFFCB2C();
        v146 = (void *)v149[33];
        sub_18AF402E0();
        v69();
        uint64_t v63 = v58;
      }

      unint64_t v50 = v148;
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v6;
      sub_18AF7D0BC();
      sub_18AFFD868();
      if (v16) {
        goto LABEL_101;
      }
      unint64_t v2 = v70;
      char v72 = v71;
      sub_18AF161EC(&qword_1E9124EB8);
      char v58 = v137;
      int64_t v56 = v144;
      if (sub_18AFFD848())
      {
        unint64_t v50 = v148;
        sub_18AF7D0BC();
        sub_18AF2AD04();
        if (!v35)
        {
          sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
          sub_18AFFCE0C();
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          return;
        }
        unint64_t v2 = v73;
      }
      if (v72)
      {
        unint64_t v50 = (id *)v148[7];

        v50[v2] = v146;
      }
      else
      {
        sub_18AFFCFA0((uint64_t)&v148[v2 >> 6]);
        *(void *)(v74[6] + 8 * v2) = v7;
        *(void *)(v74[7] + 8 * v2) = v146;
        uint64_t v75 = v74[2];
        BOOL v16 = __OFADD__(v75, 1);
        uint64_t v76 = v75 + 1;
        if (v16)
        {
LABEL_168:
          __break(1u);
          goto LABEL_169;
        }
        v74[2] = v76;
        id v77 = v7;
      }

      swift_bridgeObjectRelease();
      sub_18AF53C0C((id)v1, 1);
      sub_18AFFCB2C();
      uint64_t v6 = v138;
      uint64_t v7 = v3 + 64;
    }
    else
    {
      unint64_t v1 = v50;
      MEMORY[0x18C129220]();
      sub_18AFFD024();
      if (v24)
      {
        sub_18AFFC680(v62);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      unint64_t v50 = (id *)v6;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  int64_t v59 = v51 + 1;
  if (__OFADD__(v51, 1)) {
    goto LABEL_98;
  }
  if (v59 < v56)
  {
    ++v51;
    if (!*((void *)v7 + v59))
    {
      int64_t v51 = v59 + 1;
      if (v59 + 1 >= v56) {
        goto LABEL_78;
      }
      if (!*((void *)v7 + v51))
      {
        int64_t v51 = v59 + 2;
        if (v59 + 2 >= v56) {
          goto LABEL_78;
        }
        if (!*((void *)v7 + v51))
        {
          int64_t v60 = v59 + 3;
          if (v60 >= v56) {
            goto LABEL_78;
          }
          if (!*((void *)v7 + v60))
          {
            while (1)
            {
              int64_t v51 = v60 + 1;
              if (__OFADD__(v60, 1)) {
                goto LABEL_100;
              }
              if (v51 >= v56) {
                goto LABEL_78;
              }
              ++v60;
              if (*((void *)v7 + v51)) {
                goto LABEL_59;
              }
            }
          }
          int64_t v51 = v60;
        }
      }
    }
LABEL_59:
    sub_18AFFCC20();
    goto LABEL_60;
  }
LABEL_78:
  swift_release();
  v149[58] = 0;
  v149[59] = v140;
  v149[57] = v148;
  unint64_t v1 = v149[32];
  if (v1 >> 62) {
    goto LABEL_102;
  }
  sub_18AFFC614();
  if (v2) {
    goto LABEL_80;
  }
LABEL_103:
  swift_bridgeObjectRelease();
  id v78 = (void *)MEMORY[0x1E4FBC860];
LABEL_104:
  if (*v6 >> 62)
  {
    sub_18AF31228();
    unint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    if (!v1) {
      goto LABEL_117;
    }
LABEL_106:
    sub_18AF5B678();
    if ((v1 & 0x8000000000000000) == 0)
    {
      sub_18AFFDB38();
      do
      {
        if (v7) {
          sub_18AFFD214();
        }
        else {
          uint64_t v88 = sub_18AFFD1FC();
        }
        uint64_t v6 = v88;
        sub_18AFFC24C();
        if (v24) {
          sub_18AFFCD18();
        }
        sub_18AFFBEEC();
      }
      while (!v35);
      swift_bridgeObjectRelease();
      goto LABEL_118;
    }
    goto LABEL_170;
  }
  sub_18AFFC7D4();
  if (v1) {
    goto LABEL_106;
  }
LABEL_117:
  swift_bridgeObjectRelease();
  unint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_118:
  sub_18AFA3344(v2);
  v89._rawValue = v78;
  uint64_t v90 = *(void *)(v140 + 16);
  if (v90)
  {
    uint64_t v6 = (void *)(swift_bridgeObjectRetain() + 40);
    v91._rawValue = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v92 = (void *)*v6;
      id v93 = (id)*(v6 - 1);
      id v94 = v92;
      sub_18AF41AD0();
      LOBYTE(v92) = v95;

      id v96 = v93;
      if (v92)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_18AFFBDB4();
          v91._rawValue = v102;
        }
        uint64_t v99 = *((void *)v91._rawValue + 2);
        sub_18AFFC920();
        if (v24)
        {
          sub_18AFFBCC4();
          v91._rawValue = v103;
        }
        *((void *)v91._rawValue + 2) = v3;
        Swift::String v98 = (char *)v91._rawValue + 16 * v99;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_18AFFBD1C();
          v89._rawValue = v100;
        }
        uint64_t v97 = *((void *)v89._rawValue + 2);
        sub_18AFFC920();
        if (v24)
        {
          sub_18AFFBCE8();
          v89._rawValue = v101;
        }
        *((void *)v89._rawValue + 2) = v3;
        Swift::String v98 = (char *)v89._rawValue + 16 * v97;
      }
      *((void *)v98 + 4) = v96;
      v98[40] = 0;

      v6 += 2;
      --v90;
    }
    while (v90);
    swift_bridgeObjectRelease();
  }
  else
  {
    v91._rawValue = (void *)MEMORY[0x1E4FBC860];
  }
  sub_18AFFD4D8();
  uint64_t v147 = v104;
  sub_18AFFC224();
  int64_t v106 = v105 >> 6;
  swift_bridgeObjectRetain();
  uint64_t v107 = 0;
  if (!v6) {
    goto LABEL_136;
  }
  while (2)
  {
    sub_18AFFCB6C();
LABEL_150:
    uint64_t v116 = (void *)*((void *)v148[7] + v108);
    id v117 = *((id *)v148[6] + v108);
    id v118 = v116;
    sub_18AF41AD0();
    LOBYTE(v116) = v119;
    v117;
    if (v116)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AFFBDB4();
        v91._rawValue = v125;
      }
      uint64_t v122 = *((void *)v91._rawValue + 2);
      sub_18AFFC920();
      if (v24)
      {
        sub_18AFFBCC4();
        v91._rawValue = v126;
      }
      *((void *)v91._rawValue + 2) = v3;
      uint64_t v121 = (uint64_t)v91._rawValue + 16 * v122;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AFFBD1C();
        v89._rawValue = v123;
      }
      uint64_t v120 = *((void *)v89._rawValue + 2);
      sub_18AFFC920();
      if (v24)
      {
        sub_18AFFBCE8();
        v89._rawValue = v124;
      }
      *((void *)v89._rawValue + 2) = v3;
      uint64_t v121 = (uint64_t)v89._rawValue + 16 * v120;
    }
    sub_18AFFC59C(v121);

    if (v6) {
      continue;
    }
    break;
  }
LABEL_136:
  uint64_t v109 = v107 + 1;
  if (__OFADD__(v107, 1))
  {
    __break(1u);
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
  if (v109 >= v106) {
    goto LABEL_163;
  }
  ++v107;
  if (*(void *)(v147 + 8 * v109)) {
    goto LABEL_149;
  }
  uint64_t v107 = v109 + 1;
  if (v109 + 1 >= v106) {
    goto LABEL_163;
  }
  sub_18AFFD774();
  if (v111) {
    goto LABEL_149;
  }
  uint64_t v107 = v110 + 2;
  if (v110 + 2 >= v106) {
    goto LABEL_163;
  }
  sub_18AFFD774();
  if (v113)
  {
LABEL_149:
    sub_18AFFCC38();
    goto LABEL_150;
  }
  if (v112 + 3 < v106)
  {
    sub_18AFFD780();
    if (!v115)
    {
      while (1)
      {
        uint64_t v107 = v114 + 1;
        if (__OFADD__(v114, 1)) {
          goto LABEL_167;
        }
        if (v107 >= v106) {
          goto LABEL_163;
        }
        ++v114;
        if (*(void *)(v147 + 8 * v107)) {
          goto LABEL_149;
        }
      }
    }
    uint64_t v107 = v114;
    goto LABEL_149;
  }
LABEL_163:
  swift_release();
  CKSyncEngine.State.add(pendingDatabaseChanges:)(v91);
  swift_bridgeObjectRelease();
  CKSyncEngine.State.remove(pendingDatabaseChanges:)(v89);
  swift_bridgeObjectRelease();
  uint64_t v128 = v149[31];
  uint64_t v127 = v149[32];
  v149[60] = v127;
  v149[61] = v128;
  v149[2] = v127;
  v149[3] = v140;
  v149[4] = v128;
  v149[5] = v148;
  *((_OWORD *)v149 + 3) = 0u;
  *((_OWORD *)v149 + 4) = 0u;
  *((unsigned char *)v149 + 80) = 64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::Int v129 = (void *)swift_task_alloc();
  v149[62] = v129;
  *Swift::Int v129 = v149;
  v129[1] = sub_18AFD4408;
  sub_18AF30494();
  sub_18AFFCE0C();
  sub_18AF295AC();
}

uint64_t sub_18AFD4408()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF37AC0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFD4560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF31148();
  sub_18AF338B4();
  uint64_t v12 = v10[60];
  uint64_t v11 = v10[61];
  uint64_t v13 = (void *)v10[58];
  uint64_t v14 = v10[59];
  uint64_t v15 = v10[57];
  BOOL v16 = (void *)v10[48];
  if (v13)
  {
    id v17 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    swift_task_dealloc();
    sub_18AFFD26C();
  }
  else
  {
    uint64_t v18 = (void *)v10[38];

    *uint64_t v18 = v12;
    v18[1] = v14;
    v18[2] = v11;
    v18[3] = v15;
    swift_task_dealloc();
    sub_18AF384DC();
  }
  sub_18AF311B0();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

void sub_18AFD4630()
{
  sub_18AF410EC();
  sub_18AF41388();
  uint64_t v1 = *(void **)(v0 + 448);
  unint64_t v2 = *(void *)(v0 + 376);

  swift_task_dealloc();
  id v3 = v1;
  id v4 = (id)related decl 'e' for CKErrorCode.init(_:)(v1);
  unint64_t v5 = sub_18AF42884();
  uint64_t v64 = sub_18AFC8DB0(v5, v6, v0 + 208, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t)v4;
  uint64_t v9 = MEMORY[0x1E4FBC868];
  uint64_t v10 = sub_18AFCA334(MEMORY[0x1E4FBC868], v2, (void *)v8, (void (*)(unint64_t))sub_18AF7D0BC, &qword_1E9124EB8, (uint64_t)&qword_1EB279460);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 464) = v8;
  *(void *)(v0 + 472) = v64;
  uint64_t v66 = v10;
  uint64_t v67 = v0;
  *(void *)(v0 + 456) = v10;
  unint64_t v11 = *(void *)(v0 + 256);
  if (v11 >> 62)
  {
    sub_18AF31228();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    sub_18AFFC7D4();
  }
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    uint64_t v68 = (unint64_t *)MEMORY[0x1E4FBC860];
    sub_18AFFBFC8();
    if (v8 < 0)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    uint64_t v9 = 0;
    uint64_t v13 = v68;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v14 = (id)MEMORY[0x18C1298C0](v9, v11);
      }
      else {
        id v14 = *(id *)(v11 + 8 * v9 + 32);
      }
      unint64_t v15 = (unint64_t)v14;
      unint64_t v17 = v68[2];
      unint64_t v16 = v68[3];
      if (v17 >= v16 >> 1)
      {
        sub_18AFFCC84(v16);
        sub_18AF5B678();
      }
      ++v9;
      v68[2] = v17 + 1;
      uint64_t v18 = &v68[2 * v17];
      v18[4] = v15;
      *((unsigned char *)v18 + 40) = 0;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = (unint64_t *)MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v67 + 248) >> 62)
  {
    sub_18AF31228();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
    {
LABEL_16:
      sub_18AFFBFC8();
      if ((v8 & 0x8000000000000000) == 0)
      {
        sub_18AFFD244();
        do
        {
          if (v12) {
            sub_18AFFD214();
          }
          else {
            sub_18AFFD1FC();
          }
          sub_18AFFC24C();
          if (v19) {
            sub_18AFFC200();
          }
          sub_18AFFBEEC();
        }
        while (!v20);
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
LABEL_77:
      __break(1u);
      return;
    }
  }
  else
  {
    sub_18AFFC7D4();
    if (v8) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_29:
  sub_18AFA3344(v9);
  v21._rawValue = v13;
  uint64_t v22 = *(void *)(v64 + 16);
  if (v22)
  {
    uint64_t v23 = (void **)(swift_bridgeObjectRetain() + 40);
    v24._rawValue = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v25 = *v23;
      id v26 = *(v23 - 1);
      id v27 = v25;
      sub_18AF41AD0();
      uint64_t v29 = v28;

      id v30 = v26;
      if (v29)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_18AFFBDB4();
          v24._rawValue = v36;
        }
        uint64_t v33 = *((void *)v24._rawValue + 2);
        sub_18AFFD47C();
        if (v19)
        {
          sub_18AFFBCC4();
          v24._rawValue = v37;
        }
        *((void *)v24._rawValue + 2) = v29;
        id v32 = (char *)v24._rawValue + 16 * v33;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_18AFFBD1C();
          v21._rawValue = v34;
        }
        uint64_t v31 = *((void *)v21._rawValue + 2);
        sub_18AFFD47C();
        if (v19)
        {
          sub_18AFFBCE8();
          v21._rawValue = v35;
        }
        *((void *)v21._rawValue + 2) = v29;
        id v32 = (char *)v21._rawValue + 16 * v31;
      }
      *((void *)v32 + 4) = v30;
      v32[40] = 0;

      v23 += 2;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24._rawValue = (void *)MEMORY[0x1E4FBC860];
  }
  sub_18AFFD4D8();
  uint64_t v65 = v38;
  sub_18AFFBF9C();
  int64_t v40 = v39 >> 6;
  swift_bridgeObjectRetain();
  uint64_t v41 = 0;
  while (1)
  {
    if (__OFADD__(v41, 1))
    {
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v41 + 1 >= v40) {
      goto LABEL_71;
    }
    sub_18AFFD43C();
    uint64_t v41 = v42;
    if (!v43)
    {
      uint64_t v41 = v42 + 1;
      if (v42 + 1 >= v40) {
        goto LABEL_71;
      }
      if (!*(void *)(v65 + 8 * v41))
      {
        uint64_t v41 = v42 + 2;
        if (v42 + 2 >= v40) {
          goto LABEL_71;
        }
        if (!*(void *)(v65 + 8 * v41)) {
          break;
        }
      }
    }
LABEL_59:
    sub_18AFFD400();
    uint64_t v47 = v46 + (v41 << 6);
    uint64_t v48 = *(void **)(*(void *)(v66 + 56) + 8 * v47);
    id v49 = *(id *)(*(void *)(v66 + 48) + 8 * v47);
    id v50 = v48;
    sub_18AF41AD0();
    uint64_t v52 = v51;
    v49;
    if (v52)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AFFBDB4();
        v24._rawValue = v58;
      }
      uint64_t v55 = *((void *)v24._rawValue + 2);
      sub_18AFFD47C();
      if (v19)
      {
        sub_18AFFBCC4();
        v24._rawValue = v59;
      }
      *((void *)v24._rawValue + 2) = v52;
      uint64_t v54 = (uint64_t)v24._rawValue + 16 * v55;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AFFBD1C();
        v21._rawValue = v56;
      }
      uint64_t v53 = *((void *)v21._rawValue + 2);
      sub_18AFFD47C();
      if (v19)
      {
        sub_18AFFBCE8();
        v21._rawValue = v57;
      }
      *((void *)v21._rawValue + 2) = v52;
      uint64_t v54 = (uint64_t)v21._rawValue + 16 * v53;
    }
    sub_18AFFC59C(v54);
  }
  if (v42 + 3 < v40)
  {
    sub_18AFFD43C();
    if (!v45)
    {
      while (1)
      {
        uint64_t v41 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          goto LABEL_75;
        }
        if (v41 >= v40) {
          goto LABEL_71;
        }
        ++v44;
        if (*(void *)(v65 + 8 * v41)) {
          goto LABEL_59;
        }
      }
    }
    uint64_t v41 = v44;
    goto LABEL_59;
  }
LABEL_71:
  swift_release();
  CKSyncEngine.State.add(pendingDatabaseChanges:)(v24);
  swift_bridgeObjectRelease();
  CKSyncEngine.State.remove(pendingDatabaseChanges:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v61 = *(void *)(v67 + 248);
  uint64_t v60 = *(void *)(v67 + 256);
  *(void *)(v67 + 480) = v60;
  *(void *)(v67 + 488) = v61;
  *(void *)(v67 + 16) = v60;
  sub_18AFFD454();
  *(unsigned char *)(v67 + 80) = 64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v62 = (void *)swift_task_alloc();
  *(void *)(v67 + 496) = v62;
  *unint64_t v62 = v67;
  v62[1] = sub_18AFD4408;
  sub_18AFFD2F0();
  sub_18AF41060();
  sub_18AF295AC();
}

uint64_t sub_18AFD4C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_18AFD4CD4;
  return CKDatabase.modifyRecordZones(saving:deleting:)(a2, a3);
}

uint64_t sub_18AFD4CD4()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  uint64_t v4 = swift_task_dealloc();
  unint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + 8);
  if (!v0) {
    uint64_t v4 = sub_18AF311C8();
  }
  return v5(v4);
}

uint64_t sub_18AFD4DB0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  *(void *)(v6 + 464) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFD4EAC()
{
  sub_18AF33DF8();
  uint64_t v17 = v1;
  sub_18AF338B4();
  uint64_t v2 = *(void *)(v0 + 464);
  id v3 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), sel_init);
  *(void *)(v0 + 472) = v3;
  if (v2)
  {
    if (*(void *)(*(void *)(v0 + 464) + 16))
    {
      sub_18AF5F37C(0, 1, *(void *)(v0 + 464));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_18AFFDBA4();
      sub_18AFF8FEC(v4, v5, v6);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  char v7 = *(unsigned char *)(v0 + 84) & 1;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 232) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 240) = v8;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 480) = v9;
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v0 + 424);
  *(unsigned char *)(v9 + 32) = v7;
  unint64_t v16 = (uint64_t (*)(uint64_t))((char *)&dword_1E9126870 + dword_1E9126870);
  id v10 = v3;
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_18AF43480(v11);
  void *v12 = v13;
  v12[1] = sub_18AFD501C;
  uint64_t v14 = sub_18AFFD2D8();
  return v16(v14);
}

uint64_t sub_18AFD501C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  id v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[62] = v5;
  v3[63] = v6;
  v3[64] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[44];
    uint64_t v8 = (void (*)())sub_18AFD62D4;
  }
  else
  {
    uint64_t v9 = (void *)v3[59];
    uint64_t v10 = v3[44];

    swift_task_dealloc();
    uint64_t v8 = sub_18AFD5124;
    uint64_t v7 = v10;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

void sub_18AFD5124()
{
  int64_t v4 = 0;
  uint64_t v5 = v0 + 29;
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)(v0 + 30);
  v146 = v0 + 34;
  uint64_t v147 = (id *)(v0 + 33);
  uint64_t v145 = (id *)(v0 + 35);
  unint64_t v7 = v0[62];
  unint64_t v8 = v7 + 64;
  sub_18AFFBE54();
  uint64_t v11 = v10 & v9;
  sub_18AFFD7AC();
  unint64_t v148 = v12 & 0xC000000000000001;
  v151 = (void *)(v12 + 32);
  uint64_t v150 = MEMORY[0x1E4FBC860];
  v158 = v0;
  v152 = v0 + 30;
  while (v11)
  {
    sub_18AFFC364();
LABEL_20:
    Swift::OpaquePointer v21 = *(void **)(*(void *)(v7 + 48) + 8 * v13);
    uint64_t v22 = *(void *)(v7 + 56) + 16 * v13;
    unint64_t v1 = *(void *)v22;
    if (*(unsigned char *)(v22 + 8))
    {
      if (!v0[55])
      {
        sub_18AF84C94((id)v1);
        sub_18AF84C94((id)v1);
        id v73 = v21;
LABEL_87:
        sub_18AF5AF20(71);
        sub_18AFFD6B8();
        v67._uint64_t countAndFlagsBits = v66 + 51;
        v67._object = (void *)0x800000018B1D4BA0;
        String.append(_:)(v67);
        id v68 = objc_msgSend(v21, sel_description);
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        char v71 = v70;

        v72._uint64_t countAndFlagsBits = v69;
        v72._object = v71;
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        sub_18AFFCBD0();
LABEL_88:
        _assertionFailure(_:_:file:line:flags:)();
        sub_18AFFD088();
        return;
      }
      int64_t v140 = v4;
      unint64_t v142 = v8;
      unint64_t v143 = v7;
      int64_t v144 = v5;
      uint64_t v3 = v0[53];
      sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
      sub_18AFFDCB4();
      swift_bridgeObjectRetain();
      sub_18AF84C94((id)v1);
      swift_bridgeObjectRetain();
      sub_18AF84C94((id)v1);
      id v153 = v21;
      uint64_t isUniquelyReferenced_nonNull_native = 0;
      while (1)
      {
        if (v148) {
          id v23 = (id)MEMORY[0x18C1298C0](isUniquelyReferenced_nonNull_native, v158[53]);
        }
        else {
          id v23 = (id)v151[isUniquelyReferenced_nonNull_native];
        }
        int64_t v4 = (int64_t)v23;
        uint64_t v24 = isUniquelyReferenced_nonNull_native + 1;
        if (__OFADD__(isUniquelyReferenced_nonNull_native, 1))
        {
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
        id v25 = objc_msgSend(v23, sel_recordID);
        uint64_t v3 = static NSObject.== infix(_:_:)();

        if (v3) {
          break;
        }
        unint64_t v7 = v158[55];

        ++isUniquelyReferenced_nonNull_native;
        if (v24 == v7)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_87;
        }
      }
      swift_bridgeObjectRelease_n();
      sub_18AF84C94((id)v1);
      id v26 = (id)v4;
      id v27 = (void *)sub_18AF41340();
      uint64_t v28 = (void *)related decl 'e' for CKErrorCode.init(_:)(v27);
      uint64_t v29 = v5;
      uint64_t v2 = v28;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v30 = v150;
      }
      else {
        sub_18AF65B98();
      }
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v152;
      unint64_t v31 = *(void *)(v30 + 16);
      if (v31 >= *(void *)(v30 + 24) >> 1)
      {
        sub_18AFFC58C();
        sub_18AF65B98();
      }
      *(void *)(v30 + 16) = v31 + 1;
      uint64_t v150 = v30;
      uint64_t v32 = v30 + 16 * v31;
      *(void *)(v32 + 32) = v29;
      *(void *)(v32 + 40) = v2;

      sub_18AF62BA4((id)v1);
      sub_18AF62BA4((id)v1);
      uint64_t v0 = v158;
      unint64_t v7 = v143;
      uint64_t v5 = v144;
      int64_t v4 = v140;
      unint64_t v8 = v142;
    }
    else
    {
      sub_18AF84C94((id)v1);
      sub_18AF84C94((id)v1);
      uint64_t v2 = v21;
      MEMORY[0x18C129220]();
      uint64_t v3 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v3 >= *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      sub_18AF62BA4((id)v1);
    }
  }
  if (__OFADD__(v4, 1)) {
    goto LABEL_95;
  }
  sub_18AFFC98C();
  if (v15 != v16)
  {
    int64_t v4 = v14;
    if (!*(void *)(v8 + 8 * v14))
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v155) {
        goto LABEL_39;
      }
      if (!*(void *)(v8 + 8 * v4))
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v155) {
          goto LABEL_39;
        }
        if (!*(void *)(v8 + 8 * v4))
        {
          sub_18AFFC98C();
          if (v15 == v16) {
            goto LABEL_39;
          }
          if (!*(void *)(v8 + 8 * v17))
          {
            while (1)
            {
              int64_t v4 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_97;
              }
              if (v4 >= v155) {
                goto LABEL_39;
              }
              ++v17;
              if (*(void *)(v8 + 8 * v4)) {
                goto LABEL_19;
              }
            }
          }
          int64_t v4 = v17;
        }
      }
    }
LABEL_19:
    sub_18AF43730();
    uint64_t v11 = v19 & v18;
    uint64_t v13 = v20 + (v4 << 6);
    goto LABEL_20;
  }
LABEL_39:
  swift_release();
  unint64_t v7 = v0[63];
  uint64_t v33 = (void *)v0[46];
  sub_18AF94D4C(v0[53]);
  uint64_t v3 = 0;
  unint64_t v34 = v7 + 64;
  sub_18AFFC904();
  uint64_t v37 = v36 & v35;
  int64_t v4 = (unint64_t)(63 - v38) >> 6;
  unint64_t v39 = (void *)MEMORY[0x1E4FBC868];
  sub_18AFFBDF0();
  uint64_t v141 = v40;
  int64_t v149 = v4;
  while (2)
  {
    v151 = v39;
    if (v37)
    {
LABEL_41:
      sub_18AFFD78C();
      goto LABEL_56;
    }
    while (1)
    {
      int64_t v41 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_96;
      }
      if (v41 >= v4) {
        goto LABEL_75;
      }
      ++v3;
      if (!*(void *)(v34 + 8 * v41))
      {
        uint64_t v3 = v41 + 1;
        if (v41 + 1 >= v4) {
          goto LABEL_75;
        }
        if (!*(void *)(v34 + 8 * v3))
        {
          uint64_t v3 = v41 + 2;
          if (v41 + 2 >= v4) {
            goto LABEL_75;
          }
          if (!*(void *)(v34 + 8 * v3))
          {
            int64_t v42 = v41 + 3;
            if (v42 >= v4)
            {
LABEL_75:
              swift_release();
              v158[67] = v150;
              v158[66] = 0;
              v158[65] = v39;
              unint64_t v1 = v158[29];
              if (!(v1 >> 62))
              {
                sub_18AFFC614();
                if (!v2)
                {
LABEL_101:
                  swift_bridgeObjectRelease();
                  uint64_t v63 = MEMORY[0x1E4FBC860];
                  goto LABEL_102;
                }
LABEL_77:
                uint64_t v159 = MEMORY[0x1E4FBC860];
                sub_18AFFCB14();
                if (v2 < 0) {
                  goto LABEL_172;
                }
                uint64_t v3 = 0;
                uint64_t v63 = v159;
                unint64_t v7 = v1 & 0xC000000000000001;
                do
                {
                  if (v7) {
                    id v64 = (id)MEMORY[0x18C1298C0](0, v1);
                  }
                  else {
                    id v64 = *(id *)(v1 + 32);
                  }
                  uint64_t v65 = v64;
                  int64_t v4 = (int64_t)objc_msgSend(v64, sel_recordID);

                  sub_18AFFD528();
                  if (v46)
                  {
                    sub_18AFFCCF4();
                    uint64_t v63 = v159;
                  }
                  sub_18AFFCA58();
                  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v152;
                }
                while (!v44);
                swift_bridgeObjectRelease();
LABEL_102:
                if (*(void *)isUniquelyReferenced_nonNull_native >> 62)
                {
                  sub_18AF31228();
                  unint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
                  if (v1) {
                    goto LABEL_104;
                  }
                }
                else
                {
                  sub_18AFFC7D4();
                  if (v1)
                  {
LABEL_104:
                    sub_18AFFCB14();
                    if ((v1 & 0x8000000000000000) != 0) {
                      goto LABEL_173;
                    }
                    sub_18AFFDB38();
                    do
                    {
                      if (v7) {
                        sub_18AFFD214();
                      }
                      else {
                        id v76 = sub_18AFFD1FC();
                      }
                      int64_t v4 = (int64_t)v76;
                      sub_18AFFC24C();
                      if (v46) {
                        sub_18AFFCCF4();
                      }
                      sub_18AFFBEEC();
                    }
                    while (!v44);
                    swift_bridgeObjectRelease();
LABEL_116:
                    sub_18AFA3364(v2);
                    uint64_t v77 = v63;
                    uint64_t v78 = *(void *)(v150 + 16);
                    if (v78)
                    {
                      id v79 = (void **)(swift_bridgeObjectRetain() + 40);
                      uint64_t v80 = MEMORY[0x1E4FBC860];
                      do
                      {
                        id v81 = *v79;
                        id v82 = *(v79 - 1);
                        uint64_t v3 = v81;
                        sub_18AF41AD0();
                        LOBYTE(v81) = v83;

                        id v84 = objc_msgSend(v82, sel_recordID);
                        if (v81)
                        {
                          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          {
                            sub_18AFFBD90();
                            uint64_t v80 = v90;
                          }
                          unint64_t v87 = *(void *)(v80 + 16);
                          int64_t v4 = v87 + 1;
                          if (v87 >= *(void *)(v80 + 24) >> 1)
                          {
                            sub_18AFFC48C();
                            uint64_t v80 = v91;
                          }
                          *(void *)(v80 + 16) = v4;
                          uint64_t v86 = v80 + 16 * v87;
                        }
                        else
                        {
                          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          {
                            sub_18AFFCEEC();
                            uint64_t v77 = v88;
                          }
                          unint64_t v85 = *(void *)(v77 + 16);
                          int64_t v4 = v85 + 1;
                          if (v85 >= *(void *)(v77 + 24) >> 1)
                          {
                            sub_18AFFC58C();
                            sub_18AF65B5C();
                            uint64_t v77 = v89;
                          }
                          *(void *)(v77 + 16) = v4;
                          uint64_t v86 = v77 + 16 * v85;
                        }
                        *(void *)(v86 + 32) = v84;
                        *(unsigned char *)(v86 + 40) = 0;

                        v79 += 2;
                        --v78;
                      }
                      while (v78);
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v80 = MEMORY[0x1E4FBC860];
                    }
                    uint64_t v92 = v151;
                    v154 = v151 + 8;
                    sub_18AFFC224();
                    int64_t v157 = v93 >> 6;
                    swift_bridgeObjectRetain();
                    uint64_t v94 = 0;
                    char v95 = v158;
                    if (!v4) {
                      goto LABEL_134;
                    }
LABEL_133:
                    sub_18AFFCB6C();
                    while (1)
                    {
                      uint64_t v103 = v92;
                      uint64_t v104 = *(void **)(v92[6] + 8 * v96);
                      unint64_t v105 = *(void **)(v92[7] + 8 * v96);
                      id v106 = v104;
                      id v107 = v105;
                      sub_18AF41AD0();
                      LOBYTE(v105) = v108;
                      v106;
                      if (v105)
                      {
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        {
                          sub_18AFFBD90();
                          uint64_t v80 = v113;
                        }
                        char v95 = v158;
                        uint64_t v109 = *(void *)(v80 + 16);
                        sub_18AFFC920();
                        if (v46)
                        {
                          sub_18AFFC48C();
                          uint64_t v80 = v114;
                        }
                        *(void *)(v80 + 16) = v3;
                        uint64_t v110 = v80 + 16 * v109;
                      }
                      else
                      {
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        {
                          sub_18AFFCEEC();
                          uint64_t v77 = v115;
                        }
                        char v95 = v158;
                        uint64_t v111 = *(void *)(v77 + 16);
                        sub_18AFFC920();
                        if (v46)
                        {
                          sub_18AFFCCB8(v112);
                          sub_18AF65B5C();
                          uint64_t v77 = v116;
                        }
                        *(void *)(v77 + 16) = v3;
                        uint64_t v110 = v77 + 16 * v111;
                      }
                      sub_18AFFC59C(v110);

                      uint64_t v92 = v103;
                      if (v4) {
                        goto LABEL_133;
                      }
LABEL_134:
                      if (__OFADD__(v94, 1))
                      {
                        __break(1u);
LABEL_170:
                        __break(1u);
                        goto LABEL_171;
                      }
                      sub_18AFFC98C();
                      if (v15 == v16) {
                        goto LABEL_163;
                      }
                      uint64_t v94 = v97;
                      if (!v154[v97])
                      {
                        uint64_t v94 = v97 + 1;
                        if (v97 + 1 >= v157) {
                          goto LABEL_163;
                        }
                        sub_18AFFD774();
                        if (!v99)
                        {
                          uint64_t v94 = v98 + 2;
                          if (v98 + 2 >= v157) {
                            goto LABEL_163;
                          }
                          sub_18AFFD774();
                          if (!v100)
                          {
                            sub_18AFFC98C();
                            if (v15 == v16)
                            {
LABEL_163:
                              uint64_t v117 = v95[50];
                              swift_release();
                              sub_18AFBE4B4(v80, 0, v118, v119, v120, v121, v122, v123, v138);
                              swift_bridgeObjectRelease();
                              sub_18AFBE584(v77, v124, v125, v126, v127, v128, v129, v130, v139);
                              swift_bridgeObjectRelease();
                              uint64_t v131 = *(void **)(v117 + 16);
                              if (objc_msgSend(v131, sel_hasInFlightUntrackedChanges))
                              {
                                sub_18AF41AD0();
                                char v133 = v132;
                                objc_msgSend(v131, sel_setHasInFlightUntrackedChanges_, 0);
                                if (v133) {
                                  objc_msgSend(v131, sel_setHasPendingUntrackedChanges_, 1);
                                }
                              }
                              uint64_t v134 = v95[29];
                              uint64_t v135 = v95[30];
                              v95[68] = v134;
                              v95[69] = v135;
                              v95[2] = v134;
                              v95[3] = v150;
                              v95[4] = v135;
                              v95[5] = v92;
                              *((_OWORD *)v95 + 3) = 0u;
                              *((_OWORD *)v95 + 4) = 0u;
                              *((unsigned char *)v95 + 80) = 80;
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              unint64_t v136 = (void *)swift_task_alloc();
                              v95[70] = v136;
                              *unint64_t v136 = v95;
                              v136[1] = sub_18AFD6050;
                              sub_18AF30494();
                              sub_18AFFD088();
                              sub_18AF295AC();
                              return;
                            }
                            sub_18AFFD780();
                            if (!v102)
                            {
                              while (1)
                              {
                                uint64_t v94 = v101 + 1;
                                if (__OFADD__(v101, 1)) {
                                  goto LABEL_170;
                                }
                                if (v94 >= v157) {
                                  goto LABEL_163;
                                }
                                ++v101;
                                if (v154[v94]) {
                                  goto LABEL_149;
                                }
                              }
                            }
                            uint64_t v94 = v101;
                          }
                        }
                      }
LABEL_149:
                      sub_18AFFCC38();
                    }
                  }
                }
                swift_bridgeObjectRelease();
                uint64_t v2 = MEMORY[0x1E4FBC860];
                goto LABEL_116;
              }
LABEL_100:
              sub_18AFFC630();
              uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
              if (!v2) {
                goto LABEL_101;
              }
              goto LABEL_77;
            }
            if (!*(void *)(v34 + 8 * v42))
            {
              while (1)
              {
                uint64_t v3 = v42 + 1;
                if (__OFADD__(v42, 1)) {
                  break;
                }
                if (v3 >= v4) {
                  goto LABEL_75;
                }
                ++v42;
                if (*(void *)(v34 + 8 * v3)) {
                  goto LABEL_55;
                }
              }
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }
            uint64_t v3 = v42;
          }
        }
      }
LABEL_55:
      sub_18AFFD414();
LABEL_56:
      sub_18AFFD6D8();
      if (v44) {
        break;
      }
      unint64_t v1 = v33;
      MEMORY[0x18C129220]();
      sub_18AFFD024();
      if (v46)
      {
        sub_18AFFC680(v45);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      uint64_t v33 = (void *)isUniquelyReferenced_nonNull_native;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      if (v37) {
        goto LABEL_41;
      }
    }
    unint64_t v1 = (unint64_t)*v43;
    uint64_t v47 = v147;
    id v48 = sub_18AFFCE80();
    sub_18AF9E5A8((id)v1, 1);
    int64_t v4 = (int64_t)v48;
    sub_18AF9E5A8((id)v1, 1);
    sub_18AF161EC(&qword_1E9125660);
    type metadata accessor for CKError(0);
    if (sub_18AFFD7F0())
    {
      sub_18AFFCB2C();
      uint64_t v156 = *v146;
      goto LABEL_65;
    }

    v158[35] = v1;
    id v49 = (id *)(id)v1;
    if (!swift_dynamicCast())
    {

      sub_18AF5AF20(38);
      v74._uint64_t countAndFlagsBits = sub_18AFFBD0C();
      v74._object = (void *)0x800000018B1D4990;
      String.append(_:)(v74);
      swift_getErrorValue();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      sub_18AFFBCB4();
      goto LABEL_88;
    }
    sub_18AF161EC(&qword_1E9126AA0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18B1F16B0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v51;
    sub_18AFFD6B8();
    *(void *)(inited + 48) = v52;
    *(void *)(inited + 56) = v141;
    Dictionary.init(dictionaryLiteral:)();
    v158[40] = 20;
    sub_18AFFE090();
    swift_bridgeObjectRelease();
    sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    _BridgedStoredNSError.init(_:userInfo:)();
    sub_18AFFCB2C();
    uint64_t v156 = v158[39];
    sub_18AF402E0();
    v53();
    uint64_t v47 = v145;
LABEL_65:

    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v54 = (void *)v4;
    sub_18AF7D0F8();
    sub_18AFFD868();
    if (v16) {
      goto LABEL_99;
    }
    unint64_t v57 = v55;
    char v58 = v56;
    sub_18AF161EC(&qword_1E9124CF0);
    uint64_t v33 = v151;
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v152;
    if (!sub_18AFFD848())
    {
LABEL_70:
      if (v58)
      {
        uint64_t v33 = (void *)v151[7];

        *((void *)v33 + v57) = v156;
        uint64_t v2 = (uint64_t)v151;
      }
      else
      {
        sub_18AFFCFA0((uint64_t)&v151[v57 >> 6]);
        *(void *)(v151[6] + 8 * v57) = v54;
        *(void *)(v151[7] + 8 * v57) = v156;
        uint64_t v60 = v151[2];
        BOOL v16 = __OFADD__(v60, 1);
        uint64_t v61 = v60 + 1;
        if (v16)
        {
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
          return;
        }
        uint64_t v2 = (uint64_t)v151;
        v151[2] = v61;
        id v62 = v54;
      }

      swift_bridgeObjectRelease();
      sub_18AF53C0C((id)v1, 1);
      sub_18AFFCB2C();
      unint64_t v34 = v7 + 64;
      int64_t v4 = v149;
      unint64_t v39 = (void *)v2;
      continue;
    }
    break;
  }
  sub_18AF7D0F8();
  sub_18AF2AD04();
  if (v44)
  {
    unint64_t v57 = v59;
    goto LABEL_70;
  }
  sub_18AF34EA0(0, &qword_1E91255F0);
  sub_18AFFD088();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_18AFD6050()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF37AC0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFD61A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF33DF8();
  sub_18AF338B4();
  uint64_t v12 = (void *)v10[66];
  uint64_t v13 = v10[69];
  uint64_t v14 = v10[68];
  uint64_t v15 = v10[67];
  uint64_t v16 = v10[65];
  int64_t v17 = (void *)v10[59];
  if (v12)
  {
    id v18 = v12;
    sub_18AFFDA0C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    swift_task_dealloc();
    sub_18AF16D48();
  }
  else
  {
    uint64_t v19 = (void *)v10[43];

    *uint64_t v19 = v14;
    v19[1] = v15;
    v19[2] = v13;
    v19[3] = v16;
    swift_task_dealloc();
    sub_18AF384DC();
  }
  sub_18AF33C3C();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

uint64_t sub_18AFD6278()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

#error "18AFD68D8: call analysis failed (funcsize=455)"

uint64_t sub_18AFD6A08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *unint64_t v8 = v4;
  v8[1] = sub_18AFFBA40;
  return CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)(a2, a3, 0, a4);
}

uint64_t sub_18AFD6AC4(id *a1, unint64_t a2, char a3)
{
  char v4 = 0;
  switch(a3)
  {
    case 1:
      id v8 = objc_msgSend(*a1, sel_zoneID);
      char v9 = sub_18AFC128C((uint64_t)v8, a2);

      char v4 = v9 ^ 1;
      return v4 & 1;
    case 2:
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        if (!v10) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v10)
        {
LABEL_10:
          swift_bridgeObjectRelease();
          char v4 = 1;
          return v4 & 1;
        }
      }
      unint64_t v11 = a2 & 0xC000000000000001;
      if ((a2 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x18C1298C0](0, a2);
      }
      else {
        id v12 = *(id *)(a2 + 32);
      }
      uint64_t v13 = v12;
      sub_18AF34EA0(0, &qword_1E91255F0);
      char v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) == 0)
      {
        if (v10 == 1) {
          goto LABEL_10;
        }
        if (v11) {
          id v15 = (id)MEMORY[0x18C1298C0](1, a2);
        }
        else {
          id v15 = *(id *)(a2 + 40);
        }
        uint64_t v16 = v15;
        char v17 = static NSObject.== infix(_:_:)();

        if ((v17 & 1) == 0)
        {
          if (v10 == 2) {
            goto LABEL_10;
          }
          uint64_t v18 = 6;
          while (1)
          {
            id v19 = v11 ? (id)MEMORY[0x18C1298C0](v18 - 4, a2) : *(id *)(a2 + 8 * v18);
            uint64_t v20 = v19;
            uint64_t v21 = v18 - 3;
            if (__OFADD__(v18 - 4, 1))
            {
              __break(1u);
              JUMPOUT(0x18AFD6D00);
            }
            char v22 = static NSObject.== infix(_:_:)();

            if (v22) {
              break;
            }
            ++v18;
            BOOL v23 = v21 == v10;
            unint64_t v11 = a2 & 0xC000000000000001;
            if (v23) {
              goto LABEL_10;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      char v4 = 0;
      return v4 & 1;
    case 3:
      return v4 & 1;
    default:
      id v5 = objc_msgSend(*a1, sel_zoneID);
      char v6 = sub_18AFC128C((uint64_t)v5, a2);

      return v6 & 1;
  }
}

BOOL sub_18AFD6D10(void *a1)
{
  return objc_msgSend(a1, sel_specialContainerType) == (id)29;
}

uint64_t sub_18AFD6D38()
{
  sub_18AF18528();
  return *(void *)(v0 + 216);
}

uint64_t sub_18AFD6D64(uint64_t a1)
{
  uint64_t result = sub_18AF3F37C();
  *(void *)(v1 + 216) = a1;
  return result;
}

uint64_t (*sub_18AFD6D98())()
{
  return j_j__swift_endAccess_0;
}

void sub_18AFD6DDC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 88);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_18AFFA92C(v2);
  os_unfair_lock_unlock(v3);
}

void sub_18AFD6E38(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    id v4 = a2;
    sub_18AFF38C8(a3, v4, sub_18AFF49E4);
  }
  else
  {
    id v5 = a2;
    id v4 = (id)sub_18AFF32E4();
  }
}

void *sub_18AFD6EB4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 96);
  uint64_t v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_18AFD6F14(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

id sub_18AFD6F14@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = *a1;
  return v2;
}

void sub_18AFD6F44(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 96);
  id v4 = (id *)&v3[4];
  id v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_18AFFA948(v4);
  os_unfair_lock_unlock(v5);
}

id sub_18AFD6FA8(id *a1, void *a2)
{
  *a1 = a2;
  return a2;
}

void *sub_18AFD6FEC()
{
  uint64_t result = sub_18AFD6EB4();
  if (!result)
  {
    uint64_t v2 = *(os_unfair_lock_s **)(v0 + 88);
    uint64_t v3 = v2 + 4;
    id v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    sub_18AFD70A0(v3, &v7);
    os_unfair_lock_unlock(v4);
    if (*(void *)(v7 + 16))
    {
      sub_18AFFEC0C(v7);
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      return (void *)related decl 'e' for CKErrorCode.init(partialErrors:description:)(v6, 0xD000000000000023, 0x800000018B1D4B70);
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t sub_18AFD70A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

void *sub_18AFD70C0()
{
  uint64_t result = sub_18AFD6EB4();
  if (!result)
  {
    MEMORY[0x1F4188790](0);
    uint64_t v2 = (uint64_t *)&v1[4];
    uint64_t v3 = v1 + 6;
    os_unfair_lock_lock(v1 + 6);
    sub_18AFFA59C(v2, &v4);
    os_unfair_lock_unlock(v3);
    return (void *)v4;
  }
  return result;
}

void sub_18AFD715C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 16))
  {
    id v5 = a2;
    sub_18AF7D0BC();
    if (v7)
    {
      id v8 = *(void **)(*(void *)(v4 + 56) + 8 * v6);
      id v9 = v8;
    }
    else
    {
      id v8 = 0;
    }
  }
  else
  {
    id v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_18AFD71CC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 320);
    id v8 = sub_18AFD7BD4;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 320);

    id v8 = sub_18AFD72C0;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AFD72C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v23;
  uint64_t v26 = *(void *)(*(void *)(v23 + 320) + 128);
  if (*(unsigned char *)(v23 + 84)) {
    goto LABEL_8;
  }
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    sub_18AFFD640();
  }
  if ((sub_18AF38A9C() & 1) == 0) {
    goto LABEL_8;
  }
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    sub_18AFFD640();
  }
  if (sub_18AF43C44())
  {
LABEL_8:
    swift_retain_n();
    char v22 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04(v27))
    {
      uint64_t v53 = v26;
      uint64_t v28 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC4CC();
      *uint64_t v28 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFC0F4();
      sub_18AF40CEC();
      uint64_t v29 = sub_18AFFD1E0();
      *(void *)(v23 + 280) = sub_18AFFD8D8(v29, v30, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB1C(&dword_18AF10000, v22, v27, "%s fetching database changes at least once");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();

      uint64_t v26 = v53;
    }
    else
    {

      sub_18AF38FA4();
    }
    objc_msgSend(*(id *)(v26 + 16), sel_setNeedsToFetchDatabaseChanges_, 1);
  }
  char v31 = *(unsigned char *)(v23 + 84);
  char v32 = *(unsigned char *)(v23 + 83);
  uint64_t v34 = *(void *)(v23 + 352);
  uint64_t v33 = *(void *)(v23 + 360);
  char v35 = *(unsigned char *)(v23 + 82);
  *(void *)(v23 + 160) = *(void *)(v23 + 328);
  *(unsigned char *)(v23 + 168) = v35;
  *(_OWORD *)(v23 + 176) = *(_OWORD *)(v23 + 336);
  *(void *)(v23 + 192) = v34;
  *(unsigned char *)(v23 + 200) = v32;
  *(void *)(v23 + 208) = v33;
  *(unsigned char *)(v23 + 216) = v31;
  sub_18AF32670();
  uint64_t v36 = *(void *)(v23 + 376);
  if (v37)
  {
    uint64_t v38 = *(void *)(v23 + 320);
    *(void *)(v23 + 424) = *(void *)(v38 + 200);
    uint64_t v39 = swift_task_alloc();
    *(void *)(v23 + 432) = v39;
    *(void *)(v39 + 16) = v38;
    *(void *)(v39 + 24) = v36;
    uint64_t v40 = (void *)swift_task_alloc();
    *(void *)(v23 + 440) = v40;
    *uint64_t v40 = v23;
    v40[1] = sub_18AFD75DC;
    sub_18AF2ACD0();
    return sub_18AFCB930(v41, v42, v43);
  }
  else
  {
    char v46 = sub_18AFD6FEC();
    uint64_t v47 = v46;
    if (v46)
    {
      id v48 = v46;
      sub_18AF43468();
    }
    *(void *)(v23 + 480) = v47;
    uint64_t v49 = swift_task_alloc();
    id v50 = (void *)sub_18AF43480(v49);
    *id v50 = v51;
    v50[1] = sub_18AF1F51C;
    sub_18AF41AC4();
    sub_18AF2ACD0();
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AFD75DC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(unsigned char *)(v3 + 85) = v5;
  *(void *)(v3 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 320);
    uint64_t v7 = sub_18AFD78B8;
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 320);
    swift_task_dealloc();
    uint64_t v7 = sub_18AFD76DC;
    uint64_t v6 = v8;
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

uint64_t sub_18AFD76DC()
{
  sub_18AF2A56C();
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[40];
  uint64_t v3 = swift_task_alloc();
  v0[57] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[58] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_18AFD77A8;
  return sub_18AFCB930(1, (uint64_t)&unk_1E9127188, v3);
}

uint64_t sub_18AFD77A8()
{
  sub_18AF2A56C();
  char v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 472) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(void *)(v5 + 320);
    uint64_t v10 = sub_18AFD7B20;
  }
  else
  {
    uint64_t v11 = *(void *)(v5 + 320);
    *(unsigned char *)(v5 + 86) = v3 & 1;
    swift_task_dealloc();
    uint64_t v10 = sub_18AFD796C;
    uint64_t v9 = v11;
  }
  return MEMORY[0x1F4188298](v10, v9, 0);
}

uint64_t sub_18AFD78B8()
{
  sub_18AF2A56C();
  swift_task_dealloc();
  char v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 448));
  id v4 = sub_18AF43450(v3);
  sub_18AF43468();

  *(void *)(v2 + 480) = v0;
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_18AF43480(v5);
  *uint64_t v6 = v7;
  v6[1] = sub_18AF1F51C;
  sub_18AF41AC4();
  return sub_18AF14BC0();
}

uint64_t sub_18AFD796C()
{
  sub_18AF2A56C();
  if ((*(unsigned char *)(v1 + 85) & 1) == 0 && !*(unsigned char *)(v1 + 86)) {
    goto LABEL_7;
  }
  *(void *)(v1 + 160) = *(void *)(v1 + 328);
  char v2 = *(unsigned char *)(v1 + 84);
  char v3 = *(unsigned char *)(v1 + 83);
  uint64_t v5 = *(void *)(v1 + 352);
  uint64_t v4 = *(void *)(v1 + 360);
  *(unsigned char *)(v1 + 168) = *(unsigned char *)(v1 + 82);
  *(_OWORD *)(v1 + 176) = *(_OWORD *)(v1 + 336);
  *(void *)(v1 + 192) = v5;
  *(unsigned char *)(v1 + 200) = v3;
  *(void *)(v1 + 208) = v4;
  *(unsigned char *)(v1 + 216) = v2;
  sub_18AF32670();
  if (v6)
  {
    uint64_t v7 = *(void *)(v1 + 376);
    uint64_t v8 = *(void *)(v1 + 320);
    *(void *)(v1 + 424) = *(void *)(v8 + 200);
    uint64_t v9 = swift_task_alloc();
    *(void *)(v1 + 432) = v9;
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v7;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v1 + 440) = v10;
    *uint64_t v10 = v1;
    v10[1] = sub_18AFD75DC;
    return sub_18AFCB930(1, (uint64_t)&unk_1E9127170, v9);
  }
  else
  {
LABEL_7:
    id v12 = sub_18AFD6FEC();
    uint64_t v13 = v12;
    if (v12)
    {
      id v14 = v12;
      sub_18AF43468();
    }
    *(void *)(v1 + 480) = v13;
    uint64_t v15 = swift_task_alloc();
    uint64_t v16 = (void *)sub_18AF43480(v15);
    void *v16 = v17;
    v16[1] = sub_18AF1F51C;
    sub_18AF41AC4();
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AFD7B20()
{
  sub_18AF2A56C();
  swift_task_dealloc();
  char v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 472));
  id v4 = sub_18AF43450(v3);
  sub_18AF43468();

  *(void *)(v2 + 480) = v0;
  uint64_t v5 = swift_task_alloc();
  char v6 = (void *)sub_18AF43480(v5);
  *char v6 = v7;
  v6[1] = sub_18AF1F51C;
  sub_18AF41AC4();
  return sub_18AF14BC0();
}

uint64_t sub_18AFD7BD4()
{
  sub_18AF2A56C();

  char v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 416));
  id v4 = sub_18AF43450(v3);
  sub_18AF43468();

  *(void *)(v2 + 480) = v0;
  uint64_t v5 = swift_task_alloc();
  char v6 = (void *)sub_18AF43480(v5);
  *char v6 = v7;
  v6[1] = sub_18AF1F51C;
  sub_18AF41AC4();
  return sub_18AF14BC0();
}

uint64_t sub_18AFD7C88(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_18AFD7D28;
  return sub_18AFD7FF8();
}

uint64_t sub_18AFD7D28()
{
  sub_18AF2A56C();
  char v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  *char v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AFFC354();
    return v9();
  }
  else
  {
    *(unsigned char *)(v5 + 32) = v3 & 1;
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v11, v12, v13);
  }
}

uint64_t sub_18AFD7E38(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  char v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *char v2 = v1;
  v2[1] = sub_18AFD7ED8;
  return sub_18AFD9500();
}

uint64_t sub_18AFD7ED8()
{
  sub_18AF2A56C();
  char v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  *char v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AFFC354();
    return v9();
  }
  else
  {
    *(unsigned char *)(v5 + 32) = v3 & 1;
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v11, v12, v13);
  }
}

uint64_t sub_18AFD7FE8()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 32);
  return sub_18AF14D94();
}

uint64_t sub_18AFD7FF8()
{
  sub_18AF339B8();
  v1[30] = v2;
  v1[31] = v0;
  uint64_t v3 = type metadata accessor for Date();
  v1[32] = v3;
  sub_18AF16DF8(v3);
  v1[33] = v4;
  v1[34] = sub_18AF2F1C8();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AFD8084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_18AF410EC();
  sub_18AF41388();
  uint64_t v19 = *(void *)(*(void *)(v18 + 248) + 128);
  *(void *)(v18 + 280) = v19;
  unsigned int v20 = objc_msgSend(*(id *)(v19 + 16), sel_needsToFetchDatabaseChanges);
  *(unsigned char *)(v18 + 81) = v20;
  if (v20)
  {
    uint64_t v21 = *(void *)(v18 + 240);
    *(void *)(v18 + 288) = *(void *)(*(void *)(v18 + 248) + 136);
    *(void *)(v18 + 296) = *(void *)(v21 + 40);
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    *(void *)(v18 + 304) = sub_18AF412A0(v22, (uint64_t)qword_1E91253B0);
    sub_18AF3207C();
    sub_18AF3098C();
    uint64_t v23 = Logger.logObject.getter();
    unint64_t v24 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04((os_log_type_t)v24))
    {
      a11 = v18 + 216;
      a12 = v18 + 88;
      a13 = v18 + 232;
      a10 = v18 + 224;
      uint64_t v25 = sub_18AF402C8();
      a14 = sub_18AF182D8();
      *(void *)(v18 + 208) = a14;
      *(_DWORD *)uint64_t v25 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFC650();
      }
      a9 = *(void *)(v18 + 296);
      uint64_t v26 = *(void *)(v18 + 240);
      swift_retain();
      uint64_t v27 = sub_18AF40CEC();
      sub_18AF3F510();
      *(void *)(v18 + 216) = sub_18AF4095C(v27, v24, (uint64_t *)(v18 + 208));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      uint64_t v28 = *(void *)(v26 + 24);
      char v29 = *(unsigned char *)(v26 + 32);
      char v30 = *(unsigned char *)(v26 + 64);
      uint64_t v31 = *(void *)(v26 + 72);
      char v32 = *(unsigned char *)(v26 + 80);
      long long v33 = *(_OWORD *)(v26 + 48);
      *(unsigned char *)(v18 + 88) = *(unsigned char *)(v26 + 16);
      *(void *)(v18 + 96) = v28;
      *(unsigned char *)(v18 + 104) = v29;
      *(void *)(v18 + 112) = a9;
      *(_OWORD *)(v18 + 120) = v33;
      *(unsigned char *)(v18 + 136) = v30;
      *(void *)(v18 + 144) = v31;
      *(unsigned char *)(v18 + 152) = v32;
      unint64_t Changes = CKSyncEngine.FetchChangesContext.description.getter();
      *(void *)(v18 + 232) = sub_18AF4095C(Changes, v35, (uint64_t *)(v18 + 208));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AFFDAD0();
      swift_bridgeObjectRelease();
      sub_18AF2F014(&dword_18AF10000, v23, (os_log_type_t)v24, "%s will fetch next database changes for context %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF35674();
      sub_18AF38FA4();
    }
    uint64_t v54 = (char *)&dword_1E9126868 + dword_1E9126868;
    *(id *)(v18 + 296);
    unint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v18 + 312) = v45;
    *unint64_t v45 = v18;
    v45[1] = sub_18AFD83D4;
    sub_18AF41060();
    return v51(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, v54, a16, a17, a18);
  }
  else
  {
    swift_task_dealloc();
    sub_18AFFC860();
    sub_18AF41060();
    return v38(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_18AFD83D4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 320) = v5;
  *(void *)(v3 + 328) = v6;
  *(unsigned char *)(v3 + 82) = v7;
  *(void *)(v3 + 336) = v8;
  *(void *)(v3 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(void *)(v3 + 248);
    uint64_t v10 = sub_18AFD8F0C;
  }
  else
  {
    uint64_t v11 = *(void *)(v3 + 248);

    uint64_t v10 = (uint64_t (*)())sub_18AFD84D8;
    uint64_t v9 = v11;
  }
  return MEMORY[0x1F4188298](v10, v9, 0);
}

#error "18AFD8784: call analysis failed (funcsize=327)"

uint64_t sub_18AFD8A28()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 248);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18AFD8B48, v2, 0);
}

#error "18AFD8C68: call analysis failed (funcsize=229)"

uint64_t sub_18AFD8F0C()
{
  uint64_t v39 = v0;
  uint64_t v2 = (void *)(v0 + 192);
  uint64_t v3 = (void *)(v0 + 224);
  uint64_t v4 = *(void **)(v0 + 344);

  id v5 = v4;
  uint64_t v6 = (void *)related decl 'e' for CKErrorCode.init(_:)(v4);
  sub_18AF3207C();
  swift_retain_n();
  id v7 = v6;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (sub_18AF42D04(v9))
  {
    os_log_type_t v29 = v9;
    log = v8;
    uint64_t v10 = sub_18AF16B9C();
    uint64_t v28 = (void *)sub_18AF3F3B4();
    uint64_t v30 = sub_18AF182D8();
    *(_DWORD *)uint64_t v10 = 136315650;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 240);
    swift_retain();
    uint64_t v13 = sub_18AF40CEC();
    sub_18AF30464();
    *(void *)(v0 + 160) = sub_18AF4095C(v13, v1, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v14 = *(void *)(v12 + 24);
    char v15 = *(unsigned char *)(v12 + 32);
    char v16 = *(unsigned char *)(v12 + 64);
    uint64_t v17 = *(void *)(v12 + 72);
    char v18 = *(unsigned char *)(v12 + 80);
    char v31 = *(unsigned char *)(v12 + 16);
    uint64_t v32 = v14;
    char v33 = v15;
    uint64_t v34 = v11;
    long long v35 = *(_OWORD *)(v12 + 48);
    char v36 = v16;
    uint64_t v37 = v17;
    char v38 = v18;
    unint64_t Changes = CKSyncEngine.FetchChangesContext.description.getter();
    *(void *)(v0 + 168) = sub_18AF4095C(Changes, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AFFBC0C();
    *(_WORD *)(v10 + 22) = 2112;
    id v21 = v7;
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 176) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v28 = v22;

    _os_log_impl(&dword_18AF10000, log, v29, "%s failed to fetch database changes for context %s: %@", (uint8_t *)v10, 0x20u);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF41310();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v3 = (void *)(v0 + 224);
    uint64_t v2 = (void *)(v0 + 192);
  }
  else
  {
    sub_18AF38FA4();
    sub_18AF35674();
  }
  *uint64_t v3 = v7;
  type metadata accessor for CKError(0);
  sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.code.getter();
  if (*v2 == 21) {
    objc_msgSend(*(id *)(*(void *)(v0 + 280) + 16), sel_setServerChangeTokenForDatabase_, 0);
  }
  uint64_t v23 = *(void **)(v0 + 344);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v24 = sub_18AFFC850();
  return v25(v24);
}

uint64_t sub_18AFD9298(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](sub_18AFD92B8, 0, 0);
}

uint64_t sub_18AFD92B8()
{
  sub_18AF339B8();
  *(void *)(v0 + 32) = objc_msgSend(*(id *)(*(void *)(v0 + 24) + 16), sel_serverChangeTokenForDatabase);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF1D998(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AFD9370;
  uint64_t v4 = sub_18AF30494();
  return CKDatabase.databaseChanges(since:resultsLimit:)(v4, 0, 1);
}

uint64_t sub_18AFD9370()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    sub_18AF2FCE4();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {

    sub_18AF311C8();
    sub_18AF2FCE4();
    return v16(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t sub_18AFD949C()
{
  sub_18AF339B8();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AFD9500()
{
  sub_18AF2A56C();
  v1[94] = v0;
  v1[93] = v2;
  uint64_t v3 = type metadata accessor for CancellationError();
  v1[95] = v3;
  sub_18AF16DF8(v3);
  v1[96] = v4;
  v1[97] = sub_18AF2F1C8();
  swift_task_alloc();
  sub_18AF475A0();
  v1[98] = v5;
  void *v5 = v6;
  v5[1] = sub_18AFD95D0;
  uint64_t v7 = sub_18AF475C4();
  return sub_18AFDF128(v7, v8);
}

uint64_t sub_18AFD95D0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

#error "18AFD9A1C: call analysis failed (funcsize=399)"

uint64_t sub_18AFD9D20()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

#error "18AFD9F50: call analysis failed (funcsize=119)"

uint64_t sub_18AFD9FE0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  *(void *)(v6 + 912) = v5;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFDA0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF31148();
  sub_18AF338B4();
  uint64_t v11 = (void *)v10[114];
  if (v11)
  {
    if (v11[2])
    {
      uint64_t v12 = (void *)v10[112];
      sub_18AF5F37C(0, 1, v10[114]);
      uint64_t v13 = v11[4];
      uint64_t v14 = v11[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_18AFF8FEC(v13, v14, v12);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0) {
    uint64_t v15 = sub_18AF33074(MEMORY[0x1E4FBC860]);
  }
  char v16 = (void *)v10[112];
  uint64_t v17 = (void *)v10[100];
  v10[70] = 0;
  v10[71] = v15;
  sub_18AF2066C((uint64_t)&dword_1E9126860);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v16;
  id v19 = v17;
  unint64_t v20 = (void *)swift_task_alloc();
  v10[115] = v20;
  *unint64_t v20 = v10;
  v20[1] = sub_18AFDA220;
  sub_18AF311B0();
  return v27(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t sub_18AFDA220()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 928) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v9 = *(void **)(v5 + 800);

    swift_bridgeObjectRelease();
    *(void *)(v5 + 936) = v3;
  }
  sub_18AF37AC0();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

void sub_18AFDA340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *(*v152)(uint64_t *__return_ptr, uint64_t, void);
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t (*v160)();
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  id v171;
  char v172;
  NSObject *v173;
  NSObject *v174;
  os_log_type_t v175;
  void *v176;
  NSObject *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  NSObject *v182;
  id v183;
  void *v184;
  void *v185;
  id v186;
  NSObject *v187;
  os_log_type_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  os_log_type_t v194;
  _DWORD *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  id *v226;
  void *v227;
  uint64_t *v228;
  id v229;
  uint64_t *v230;
  int v231;
  uint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  int64_t v236;
  uint64_t v237;
  uint64_t v238;
  id v239;
  id v240;
  id v241;
  void *v242;
  uint64_t *v243;
  void *v244;
  void *v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  void *v253;
  void *v254;
  uint64_t v255;
  int64_t v256;
  uint64_t v257[3];

  sub_18AF30E30();
  sub_18AF1A048();
  uint64_t v17 = v14;
  uint64_t v18 = 0;
  v219 = (uint64_t)(v14 + 53);
  v216 = (uint64_t)(v14 + 67);
  v217 = (uint64_t)(v14 + 58);
  v232 = v14 + 74;
  v228 = v14 + 75;
  v215 = (uint64_t)(v14 + 77);
  v244 = v14 + 79;
  uint64_t v19 = v14[117];
  unint64_t v20 = (void *)v14[116];
  v14[118] = 0;
  unint64_t v21 = MEMORY[0x1E4FBC860];
  v14[85] = MEMORY[0x1E4FBC860];
  v14[84] = v21;
  uint64_t v22 = *(void *)(v19 + 64);
  v235 = v19 + 64;
  uint64_t v23 = -1 << *(unsigned char *)(v19 + 32);
  if (-v23 < 64) {
    uint64_t v24 = ~(-1 << -(char)v23);
  }
  else {
    uint64_t v24 = -1;
  }
  uint64_t v25 = v24 & v22;
  v236 = (unint64_t)(63 - v23) >> 6;
  v227 = v20;
  v224 = 0x800000018B1D4B70;
  v225 = 0x800000018B1D49C0;
  v243 = v14 + 82;
  v218 = (uint64_t)(v14 + 83);
  v230 = v14 + 84;
  v214 = (uint64_t)(v14 + 87);
  v212 = (uint64_t)(v14 + 86);
  v213 = (uint64_t)(v14 + 88);
  v237 = v14[111];
  BOOL v26 = v20 != 0;
  v253 = v14;
  v226 = (id *)(v14 + 76);
LABEL_5:
  v17[119] = v21;
  v233 = v21;
LABEL_6:
  v231 = v26;
  *((unsigned char *)v17 + 98) = v26;
  if (v25)
  {
LABEL_7:
    sub_18AFFD0D0();
    goto LABEL_19;
  }
  while (1)
  {
    BOOL v28 = __OFADD__(v18++, 1);
    if (v28)
    {
      __break(1u);
      goto LABEL_155;
    }
    if (v18 >= v236) {
      break;
    }
    if (!*(void *)(v235 + 8 * v18))
    {
      uint64_t v29 = v18 + 1;
      if (v18 + 1 >= v236) {
        break;
      }
      if (!*(void *)(v235 + 8 * v29))
      {
        uint64_t v29 = v18 + 2;
        if (v18 + 2 >= v236) {
          break;
        }
        if (!*(void *)(v235 + 8 * v29))
        {
          uint64_t v29 = v18 + 3;
          if (v18 + 3 >= v236) {
            break;
          }
          if (!*(void *)(v235 + 8 * v29))
          {
            while (1)
            {
              uint64_t v18 = v29 + 1;
              if (__OFADD__(v29, 1)) {
                goto LABEL_156;
              }
              if (v18 >= v236) {
                goto LABEL_113;
              }
              ++v29;
              if (*(void *)(v235 + 8 * v18)) {
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v18 = v29;
    }
LABEL_18:
    sub_18AFFD070();
LABEL_19:
    v247 = v27;
    v248 = v18;
    sub_18AFFD4C4();
    uint64_t v16 = *(void *)v30;
    unint64_t v15 = *(void *)(v30 + 8);
    char v31 = *(void **)(v30 + 24);
    v250 = *(void *)(v30 + 16);
    v252 = v15;
    v249 = *(unsigned __int8 *)(v30 + 32);
    v245 = v31;
    if ((*(unsigned char *)(v30 + 33) & 1) == 0)
    {
      unint64_t v85 = (uint64_t *)(v16 + 64);
      v255 = -1 << *(unsigned char *)(v16 + 32);
      sub_18AFFD810();
      uint64_t v87 = v86;
      swift_bridgeObjectRetain_n();
      uint64_t v88 = v12;
      uint64_t v89 = v16 + 64;
      v239 = v88;
      uint64_t v90 = (void *)sub_18AFFD8C4();
      sub_18AFFA834(v90, v91, v92, v93, v87, 0);
      v256 = (unint64_t)(63 - v255) >> 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v94 = v31;
      int64_t v95 = 0;
      v242 = (void *)MEMORY[0x1E4FBC868];
      v229 = v94;
      while (1)
      {
        if (v13)
        {
          sub_18AFFC364();
        }
        else
        {
          BOOL v28 = __OFADD__(v95++, 1);
          if (v28)
          {
            __break(1u);
LABEL_148:
            v199 = (void *)v17[112];
            v200 = (void *)v17[100];

            swift_release();
            swift_release_n();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
LABEL_151:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_task_dealloc();
            sub_18AFFC168();
            sub_18AF37A90();
            v204(v202, v203, v204, v205, v206, v207, v208, v209, a9, a10, a11, a12);
            return;
          }
          if (v95 >= v256) {
            goto LABEL_102;
          }
          if (!*(void *)(v89 + 8 * v95))
          {
            int64_t v96 = v95 + 1;
            if (v95 + 1 >= v256) {
              goto LABEL_102;
            }
            if (!*(void *)(v89 + 8 * v96))
            {
              int64_t v96 = v95 + 2;
              if (v95 + 2 >= v256) {
                goto LABEL_102;
              }
              if (!*(void *)(v89 + 8 * v96))
              {
                int64_t v96 = v95 + 3;
                if (v95 + 3 >= v256)
                {
LABEL_102:
                  uint64_t v18 = v248;
                  swift_release();
                  swift_bridgeObjectRetain();
                  sub_18AFA362C();
                  swift_bridgeObjectRetain();
                  sub_18AFA3704();
                  uint64_t v12 = v242;
                  uint64_t v17 = v253;
                  if (v242[2])
                  {
                    sub_18AFFEC20((uint64_t)v242);
                    sub_18AF30494();
                    uint64_t v131 = swift_bridgeObjectRelease();
                    uint64_t v139 = (void *)sub_18AFFCE5C(v131, v132, v133, v134, v135, v136, v137, v138, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220,
                                     v222,
                                     v224);
                    sub_18AFD6DDC();

                    if ((v249 & 1) == 0)
                    {
                      v231 = 1;
                      goto LABEL_106;
                    }
                    sub_18AFFC9F0(v140, v141, v142, v143, v249);

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    BOOL v26 = 1;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    id v144 = objc_msgSend(*(id *)(v237 + 16), sel_setServerChangeToken_forZoneID_, v94, v239);
                    if (v249)
                    {
                      sub_18AFFC9F0((uint64_t)v144, v145, v146, v147, v249);

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
LABEL_106:
                      sub_18AF161EC(&qword_1E91255B8);
                      uint64_t inited = swift_initStackObject();
                      *(_OWORD *)(inited + 16) = xmmword_18B1F1B30;
                      *(void *)(inited + 32) = v239;
                      sub_18AFFD888(inited);
                      id v149 = v239;
                      sub_18AFFDC3C();
                      swift_bridgeObjectRelease();
                      uint64_t v150 = v253[70];
                      uint64_t v151 = v253[71];
                      v253[83] = v239;
                      uint64_t v12 = (void *)swift_task_alloc();
                      v12[2] = v150;
                      v12[3] = v151;
                      v12[4] = v218;
                      sub_18AF4045C();
                      id v13 = v227;
                      sub_18AFF5F54(v152, v153, v154);
                      unint64_t v15 = v155;
                      swift_task_dealloc();
                      if (v15) {
                        sub_18AFF5E2C(v239);
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();

                      swift_bridgeObjectRelease();
                      sub_18AFFA8A0((void *)v16, v252, v250, v245, v249, 0);
                    }
                    BOOL v26 = v231;
                  }

                  uint64_t v25 = v247;
                  goto LABEL_5;
                }
                if (!*(void *)(v89 + 8 * v96))
                {
                  while (1)
                  {
                    int64_t v95 = v96 + 1;
                    if (__OFADD__(v96, 1)) {
                      break;
                    }
                    if (v95 >= v256) {
                      goto LABEL_102;
                    }
                    ++v96;
                    if (*(void *)(v89 + 8 * v95)) {
                      goto LABEL_78;
                    }
                  }
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:

                  __break(1u);
                  return;
                }
              }
            }
            int64_t v95 = v96;
          }
LABEL_78:
          sub_18AFFD058();
        }
        uint64_t v17 = (void *)v16;
        sub_18AFFD6C4();
        if (v97)
        {
          v234 = v21;
          uint64_t v99 = (id *)v232;
          *v232 = v16;
          id v100 = sub_18AFFC768();
          sub_18AF84C94((id)v16);
          id v101 = v100;
          sub_18AF161EC(&qword_1E9125660);
          type metadata accessor for CKError(0);
          sub_18AFFBAD4();
          if (swift_dynamicCast())
          {
            sub_18AFFC9B0();
            v238 = *v228;
          }
          else
          {
            uint64_t v102 = (const char *)v253;

            v253[76] = v16;
            id v103 = (id)v16;
            if (!swift_dynamicCast()) {
              goto LABEL_131;
            }
            v221 = v253[95];
            v223 = v253[97];
            sub_18AF161EC(&qword_1E9126AA0);
            *(_OWORD *)(swift_initStackObject() + 16) = xmmword_18B1F16B0;
            uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            sub_18AFFC694(v104, v105, v106, v107, v108, v109, v110, v111, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v221,
              v223,
              v224,
              v225);
            Dictionary.init(dictionaryLiteral:)();
            v253[81] = 20;
            sub_18AFFE090();
            swift_bridgeObjectRelease();
            sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
            sub_18AFFDBA4();
            _BridgedStoredNSError.init(_:userInfo:)();
            sub_18AFFC9B0();
            v238 = v253[80];
            sub_18AF402E0();
            v112();
            uint64_t v99 = v226;
          }

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v257[0] = (uint64_t)v242;
          sub_18AF7D0F8();
          sub_18AFFD014();
          Swift::Int v118 = v116 + v117;
          if (__OFADD__(v116, v117)) {
            goto LABEL_157;
          }
          unint64_t v15 = v114;
          char v119 = v115;
          sub_18AF161EC(&qword_1E9124CF0);
          unint64_t v85 = v257;
          Swift::Bool v120 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v118);
          v242 = (void *)v257[0];
          unint64_t v21 = v234;
          uint64_t v89 = v16 + 64;
          if (v120)
          {
            unint64_t v85 = (uint64_t *)v257[0];
            sub_18AF7D0F8();
            if ((v119 & 1) != (v122 & 1))
            {
              sub_18AF34EA0(0, &qword_1E91255F0);
              sub_18AF37A90();
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              return;
            }
            unint64_t v15 = v121;
          }
          if (v119)
          {
            unint64_t v85 = (uint64_t *)v242[7];

            v85[v15] = v238;
          }
          else
          {
            v242[(v15 >> 6) + 8] |= 1 << v15;
            *(void *)(v242[6] + 8 * v15) = v101;
            *(void *)(v242[7] + 8 * v15) = v238;
            uint64_t v123 = v242[2];
            BOOL v28 = __OFADD__(v123, 1);
            uint64_t v124 = v123 + 1;
            if (v28) {
              goto LABEL_158;
            }
            v242[2] = v124;
            id v125 = v101;
          }

          swift_bridgeObjectRelease();
          sub_18AF62BA4((id)v16);
          sub_18AFFC9B0();
          id v94 = v229;
        }
        else
        {
          sub_18AFFD8F0();
          sub_18AFFDCB4();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_18AF65BD4(0, *(void *)(v21 + 16) + 1, 1, v21);
            unint64_t v21 = v126;
          }
          unint64_t v15 = *(void *)(v21 + 16);
          unint64_t v98 = *(void *)(v21 + 24);
          if (v15 >= v98 >> 1)
          {
            char v127 = sub_18AFFD49C(v98);
            sub_18AF65BD4(v127, v128, v129, v21);
            unint64_t v21 = v130;
          }
          *(void *)(v21 + 16) = v15 + 1;
          *(void *)(v21 + 8 * v15 + 32) = v16;

          sub_18AF62BA4((id)v16);
        }
      }
    }
    uint64_t v32 = (void *)sub_18AFFD8C4();
    sub_18AFFA834(v32, v33, v34, v35, v36, 1);
    sub_18AFFC9C8();
    uint64_t v37 = v12;
    sub_18AFFC9C8();
    char v38 = (void *)related decl 'e' for CKErrorCode.init(_:)((void *)v16);
    sub_18AFFD254();
    uint64_t v39 = v37;
    id v40 = v38;
    uint64_t v41 = v39;
    id v13 = v40;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    v254 = v41;
    if (sub_18AF3F328(v43))
    {
      v240 = v13;
      uint64_t v44 = sub_18AF16B9C();
      unint64_t v45 = (void *)swift_slowAlloc();
      v257[0] = sub_18AF16B9C();
      *(_DWORD *)uint64_t v44 = 136315650;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFD660();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v46 = sub_18AF3DDC4();
      v253[78] = sub_18AF3DDAC(v46, v47, v257);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2112;
      v253[72] = v41;
      uint64_t v48 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v45 = v41;

      *(_WORD *)(v44 + 22) = 2112;
      id v49 = v13;
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
      v253[73] = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v45[1] = v50;
      uint64_t v17 = v253;

      id v13 = v240;
      sub_18AF3F4D8(&dword_18AF10000, v42, v43, "%s error fetching changes for zone %@: %@");
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      swift_arrayDestroy();
      sub_18AF388F8();
      swift_arrayDestroy();
      sub_18AF388F8();
      uint64_t v12 = v244;
      sub_18AF388F8();

      unint64_t v21 = v233;
    }
    else
    {

      sub_18AF38FA4();
      uint64_t v12 = v244;
    }
    void *v12 = v13;
    type metadata accessor for CKError(0);
    sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    uint64_t v51 = v243;
    _BridgedStoredNSError.code.getter();
    uint64_t v52 = *v243;
    BOOL v53 = *v243 == 28 || v52 == 26;
    uint64_t v18 = v248;
    if (v53)
    {
      unint64_t v15 = (unint64_t)v254;
      objc_msgSend(*(id *)(v237 + 16), sel_setServerChangeToken_forZoneID_, 0, v254);
    }
    else
    {
      unint64_t v15 = (unint64_t)v254;
      if (v52 == 21)
      {
        objc_msgSend(*(id *)(v237 + 16), sel_setServerChangeToken_forZoneID_, 0, v254);
        char v54 = 1;
        goto LABEL_34;
      }
    }
    char v54 = 0;
LABEL_34:
    id v55 = v13;
    sub_18AF2EFEC();
    sub_18AF41AD0();
    char v57 = v56;

    if ((v57 & 1) == 0)
    {
      sub_18AF161EC(&qword_1E91255B8);
      uint64_t v58 = swift_initStackObject();
      *(_OWORD *)(v58 + 16) = xmmword_18B1F1B30;
      *(void *)(v58 + 32) = v15;
      sub_18AFFD888(v58);
      uint64_t v12 = (void *)v16;
      unint64_t v59 = (void *)v15;
      v60._rawValue = (void *)v257[0];
      id v61 = v59;
      uint64_t v18 = v248;
      uint64_t v51 = v243;
      CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(0, v60);
      unint64_t v15 = (unint64_t)v59;
      uint64_t v16 = (uint64_t)v12;
      swift_bridgeObjectRelease();
    }
    if ((v54 & 1) == 0)
    {
      uint64_t v62 = v17[70];
      uint64_t v63 = v17[71];
      unint64_t v15 = *(void *)(v63 + 16);
      if (v62)
      {
        id v64 = v13;
        swift_retain();
        sub_18AFFBAD4();
        sub_18AFF64A4(v65, v66, v67, v68);
        char v70 = v69;
        swift_release();
        if ((v70 & 1) == 0)
        {
          unint64_t v21 = v233;
          id v13 = v64;
          goto LABEL_58;
        }
        unint64_t v21 = v233;
        id v13 = v64;
LABEL_56:
        uint64_t v12 = v254;
        uint64_t v77 = (void *)sub_18AF40F8C();
        sub_18AFF5E2C(v77);
      }
      else
      {
        if (!v15)
        {
          unint64_t v21 = v233;
          goto LABEL_56;
        }
        v241 = v13;
        sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
        id v71 = *(id *)(v63 + 32);
        char v72 = sub_18AFFDA78();

        unint64_t v21 = v233;
        if ((v72 & 1) == 0)
        {
          if (v15 == 1) {
            goto LABEL_56;
          }
          id v73 = *(id *)(v63 + 40);
          char v74 = sub_18AFFDA78();

          if ((v74 & 1) == 0)
          {
            if (v15 == 2) {
              goto LABEL_56;
            }
            id v75 = *(id *)(v63 + 48);
            char v76 = sub_18AFFDA78();

            if ((v76 & 1) == 0)
            {
              if (v15 == 3) {
                goto LABEL_56;
              }
              id v78 = *(id *)(v63 + 56);
              char v79 = sub_18AFFDA78();

              if ((v79 & 1) == 0)
              {
                id v81 = (void **)(v63 + 64);
                unint64_t v82 = v15 - 4;
                while (v82)
                {
                  char v83 = *v81++;
                  id v84 = v83;
                  uint64_t v12 = v254;
                  unint64_t v15 = static NSObject.== infix(_:_:)();

                  id v13 = v241;
                  --v82;
                  if (v15) {
                    goto LABEL_59;
                  }
                }
                goto LABEL_56;
              }
            }
          }
        }
LABEL_58:
        uint64_t v12 = v254;
      }
LABEL_59:
      uint64_t v17 = v253;
      uint64_t v80 = v51;
      sub_18AF311C8();
      sub_18AFD6DDC();

      sub_18AFFC2C8();
      BOOL v26 = 1;
      sub_18AFFC1DC((void *)v16);

      uint64_t v25 = v247;
      goto LABEL_6;
    }

    sub_18AFFC2C8();
    sub_18AFFC1DC((void *)v16);
    if (v247) {
      goto LABEL_7;
    }
  }
LABEL_113:
  swift_release();
  uint64_t v156 = *(void *)(v21 + 16);
  int64_t v157 = v17[85];
  v17[120] = v157;
  if (!v156)
  {
    v158 = *v230;
    if (*(void *)(v157 + 16) || *(void *)(v158 + 16)) {
      goto LABEL_117;
    }
    sub_18AFDEB40(v17[101]);
    swift_retain();
    swift_retain();
    v162 = sub_18AFFD9CC();
    v164 = v163;
    swift_release();
    swift_release();
    v17[123] = v162;
    v17[124] = v164;
    v165 = *(void *)(v164 + 16);
    v17[125] = v165;
    if (v165)
    {
      uint64_t v102 = (const char *)(v17[94] + 208);
      swift_retain();
      swift_retain();
      sub_18AF18528();
      v17[126] = 0;
      v166 = v17[124];
      if (!*(void *)(v166 + 16))
      {
LABEL_130:
        __break(1u);
LABEL_131:

        sub_18AFFD3B4();
        v179 = sub_18AFFBD0C();
        sub_18AFFC468(v179, (uint64_t)"Unable to convert error to CKError: ");
        swift_getErrorValue();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        sub_18AFFBCB4();
        sub_18AFFBC94();
        sub_18AF37A90();
        return;
      }
      v167 = 0;
      uint64_t v102 = "BUG IN CLOUDKIT: CKSyncEngine finished fetching changes for a zone that it never started: %@";
      while (1)
      {
        v168 = v17[94];
        v169 = *(void **)(v166 + 8 * v167 + 32);
        v17[127] = v169;
        v170 = *(void *)(v168 + 208);
        v171 = v169;
        swift_bridgeObjectRetain();
        v172 = sub_18AFCDDF8(v171, v170);
        swift_bridgeObjectRelease();
        v173 = v171;
        if (v172)
        {
          v181 = sub_18AFD70C0();
          v17[128] = v181;
          v17[22] = v173;
          v17[23] = v181;
          *((_OWORD *)v17 + 12) = 0u;
          *((_OWORD *)v17 + 13) = 0u;
          *((_OWORD *)v17 + 14) = 0u;
          *((unsigned char *)v17 + 240) = 0x80;
          v182 = v173;
          v183 = v181;
          uint64_t v159 = (void *)swift_task_alloc();
          v17[129] = v159;
          *uint64_t v159 = v17;
          v160 = sub_18AFDC114;
          goto LABEL_118;
        }
        v174 = Logger.logObject.getter();
        v175 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v174, v175))
        {
          sub_18AF2A5F0();
          v176 = (void *)sub_18AF3F3B4();
          sub_18AFFBE80(v176);
          sub_18AF161EC((uint64_t *)&unk_1E9125610);
          sub_18AF40468();
          sub_18AF388F8();
          uint64_t v17 = v253;
          sub_18AF388F8();
          v177 = v173;
        }
        else
        {

          v177 = v174;
          v174 = v173;
        }

        unint64_t v15 = v17[126];
        v178 = v17[125];

        if (v15 + 1 == v178) {
          break;
        }
        v167 = v17[126] + 1;
        v17[126] = v167;
        v166 = v17[124];
        if (v167 >= *(void *)(v166 + 16)) {
          goto LABEL_130;
        }
      }
      swift_release();
      swift_release();
    }
    if (*((unsigned char *)v17 + 98) == 1)
    {
      v184 = sub_18AFD6FEC();
      if (!v184) {
        goto LABEL_159;
      }
      v185 = v184;
      swift_bridgeObjectRelease();
      sub_18AF36AC4();
      v186 = v185;
      v187 = Logger.logObject.getter();
      v188 = static os_log_type_t.error.getter();
      if (sub_18AF42D04(v188))
      {
        unint64_t v15 = sub_18AF402C8();
        v189 = (void *)sub_18AF3F3B4();
        v257[0] = sub_18AF16B9C();
        *(_DWORD *)unint64_t v15 = 136315394;
        if ((sub_18AF33AE8() & 1) == 0) {
          sub_18AFFC06C();
        }
        sub_18AFFC0F4();
        sub_18AF40CEC();
        v190 = sub_18AFFBD74();
        v253[87] = sub_18AFFC750(v190, v191, v257);
        uint64_t v16 = v213;
        sub_18AF3F4C0();
        sub_18AF38FA4();
        swift_bridgeObjectRelease();
        v192 = sub_18AFFCD7C();
        v193 = _swift_stdlib_bridgeErrorToNSError();
        sub_18AFFCA74(v193);
        *v189 = v18;

        sub_18AF403B4(&dword_18AF10000, v187, v188, "%s error fetching record zone changes: %@");
        sub_18AF161EC((uint64_t *)&unk_1E9125610);
        sub_18AF40468();
        sub_18AF388F8();
        sub_18AF3F7A8();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {

        sub_18AF38FA4();
      }
      v201 = sub_18AFFC014();
      sub_18AF42F68(v185);

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_18AFFD254();
      uint64_t v16 = Logger.logObject.getter();
      v194 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled((os_log_t)v16, v194)) {
        goto LABEL_148;
      }
      v195 = (_DWORD *)sub_18AF2A5F0();
      v257[0] = sub_18AF16B9C();
      *v195 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFC04C();
      }
      v196 = (void *)v17[118];
      v246 = (void *)v17[112];
      v251 = (void *)v17[100];
      swift_retain();
      v197 = sub_18AF40CEC();
      sub_18AF47718();
      v198 = sub_18AF4095C(v197, v21, v257);
      sub_18AFFCC60(v198);
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AF40444(&dword_18AF10000, v16, v194, "%s finished fetch record zone changes request");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    goto LABEL_151;
  }
  v158 = *v230;
LABEL_117:
  v17[121] = v158;
  v17[13] = v21;
  v17[14] = v157;
  v17[15] = v158;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  v17[20] = 0;
  *((unsigned char *)v17 + 168) = 48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v159 = (void *)swift_task_alloc();
  v17[122] = v159;
  *uint64_t v159 = v17;
  v160 = sub_18AFDB970;
LABEL_118:
  v159[1] = v160;
  sub_18AF30494();
  sub_18AF37A90();
  sub_18AF295AC();
}

uint64_t sub_18AFDB970()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 752);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18AFDBAAC, v2, 0);
}

#error "18AFDBC08: call analysis failed (funcsize=399)"

uint64_t sub_18AFDC114()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v2 = *(void **)(v1 + 1024);
  uint64_t v3 = *(void **)(v1 + 1016);
  uint64_t v4 = *v0;
  sub_18AF16CB4();
  void *v5 = v4;
  swift_task_dealloc();

  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

#error "18AFDC358: call analysis failed (funcsize=375)"

void sub_18AFDC830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *(*v162)(uint64_t *__return_ptr, uint64_t, void);
  uint64_t v163;
  uint64_t v164;
  char v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t (*v171)();
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  id v182;
  char v183;
  NSObject *v184;
  NSObject *v185;
  os_log_type_t v186;
  void *v187;
  NSObject *v188;
  char *v189;
  unint64_t v190;
  uint64_t v191;
  void *v192;
  NSObject *v193;
  id v194;
  void *v195;
  void *v196;
  id v197;
  NSObject *v198;
  os_log_type_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  os_log_type_t v205;
  _DWORD *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  id *v236;
  uint64_t *v237;
  uint64_t *v238;
  unsigned int v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  int64_t v243;
  uint64_t v244;
  id *v245;
  void *v246;
  uint64_t v247;
  os_log_type_t v248;
  id v249;
  uint64_t v250;
  uint64_t *v251;
  id *v252;
  void **v253;
  id v254;
  unsigned char *v255;
  unsigned char *v256;
  uint64_t v257;
  void *v258;
  void *v259;
  void *v260;
  id *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  void *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269[3];

  sub_18AF30E30();
  sub_18AF1A048();
  v231 = v12 + 424;
  v227 = v12 + 536;
  v228 = v12 + 464;
  p_Class isa = (id *)(v12 + 560);
  v240 = (uint64_t *)(v12 + 592);
  v237 = (uint64_t *)(v12 + 600);
  v236 = (id *)(v12 + 608);
  v226 = v12 + 616;
  uint64_t v14 = *(unsigned char **)(v12 + 928);
  v251 = (uint64_t *)(v12 + 656);
  v230 = v12 + 664;
  v267 = *(void *)(v12 + 808);
  v238 = (uint64_t *)(v12 + 672);
  unint64_t v15 = *(void **)(v12 + 800);
  v225 = v12 + 696;
  v223 = v12 + 688;
  v224 = v12 + 704;

  swift_bridgeObjectRelease();
  uint64_t v16 = sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF161EC((uint64_t *)&unk_1E91250A8);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  v229 = v16;
  uint64_t v18 = v12 + 632;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  unint64_t v20 = v14;
  unint64_t v21 = (void *)related decl 'e' for CKErrorCode.init(_:)(v14);
  id v22 = v21;
  sub_18AFD6F44(v21);
  sub_18AFDE5E4(v267);

  uint64_t v23 = 0;
  *(void *)(v12 + 944) = v22;
  uint64_t v24 = v17;
  uint64_t v25 = v12;
  *(void *)(v12 + 680) = v24;
  *(void *)(v12 + 672) = v24;
  v242 = v19 + 64;
  v243 = (unint64_t)(63 - (-1 << *(unsigned char *)(v19 + 32))) >> 6;
  uint64_t v26 = *(void *)(v12 + 928) != 0;
  v244 = *(void *)(v12 + 888);
  sub_18AFFBDF0();
  v234 = v27;
  sub_18AFFBDF0();
  v235 = v29;
  v241 = v12;
  v257 = v12 + 632;
LABEL_2:
  *(void *)(v25 + 952) = v24;
  v258 = v24;
LABEL_3:
  v239 = v26;
  *(unsigned char *)(v25 + 98) = v26 & 1;
  if (v28)
  {
LABEL_4:
    sub_18AFFD0D0();
    goto LABEL_16;
  }
  while (1)
  {
    BOOL v31 = __OFADD__(v23++, 1);
    if (v31)
    {
      __break(1u);
      goto LABEL_156;
    }
    if (v23 >= v243) {
      break;
    }
    if (!*(void *)(v242 + 8 * v23))
    {
      uint64_t v32 = v23 + 1;
      if (v23 + 1 >= v243) {
        break;
      }
      if (!*(void *)(v242 + 8 * v32))
      {
        uint64_t v32 = v23 + 2;
        if (v23 + 2 >= v243) {
          break;
        }
        if (!*(void *)(v242 + 8 * v32))
        {
          uint64_t v32 = v23 + 3;
          if (v23 + 3 >= v243) {
            break;
          }
          if (!*(void *)(v242 + 8 * v32))
          {
            while (1)
            {
              uint64_t v23 = v32 + 1;
              if (__OFADD__(v32, 1)) {
                goto LABEL_157;
              }
              if (v23 >= v243) {
                goto LABEL_114;
              }
              ++v32;
              if (*(void *)(v242 + 8 * v23)) {
                goto LABEL_15;
              }
            }
          }
        }
      }
      uint64_t v23 = v32;
    }
LABEL_15:
    sub_18AFFD070();
LABEL_16:
    v262 = v30;
    v263 = v23;
    sub_18AFFD4C4();
    uint64_t v14 = *(unsigned char **)v33;
    uint64_t v34 = *(void *)(v33 + 8);
    uint64_t v35 = *(void *)(v33 + 16);
    p_Class isa = *(id **)(v33 + 24);
    v266 = v35;
    v268 = v34;
    v264 = *(unsigned __int8 *)(v33 + 32);
    v261 = p_isa;
    if ((*(unsigned char *)(v33 + 33) & 1) == 0)
    {
      v255 = v14 + 64;
      uint64_t v93 = -1 << v14[32];
      sub_18AFFD810();
      uint64_t v95 = v94;
      uint64_t v25 = (uint64_t)p_isa;
      swift_bridgeObjectRetain_n();
      p_Class isa = (id *)(id)v19;
      sub_18AFFA834(v14, v34, v35, (void *)v25, v95, 0);
      int64_t v96 = (unint64_t)(63 - v93) >> 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v254 = (id)v25;
      int64_t v97 = 0;
      v250 = MEMORY[0x1E4FBC868];
      uint64_t v24 = v258;
      v256 = v14;
      v245 = p_isa;
      while (1)
      {
        if (v26)
        {
          sub_18AFFC364();
        }
        else
        {
          BOOL v31 = __OFADD__(v97++, 1);
          if (v31)
          {
            __break(1u);
LABEL_149:
            v210 = *(void **)(v95 + 896);
            v211 = *(void **)(v95 + 800);

            swift_release();
            swift_release_n();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
LABEL_152:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_task_dealloc();
            sub_18AFFC168();
            sub_18AF37A90();
            v215(v213, v214, v215, v216, v217, v218, v219, v220, a9, a10, a11, a12);
            return;
          }
          if (v97 >= v96)
          {
            uint64_t v23 = v263;
            uint64_t v19 = (uint64_t)v254;
            goto LABEL_102;
          }
          uint64_t v19 = (uint64_t)v254;
          if (!*(void *)&v255[8 * v97])
          {
            int64_t v98 = v97 + 1;
            if (v97 + 1 >= v96) {
              goto LABEL_101;
            }
            if (!*(void *)&v255[8 * v98])
            {
              int64_t v98 = v97 + 2;
              if (v97 + 2 >= v96) {
                goto LABEL_101;
              }
              if (!*(void *)&v255[8 * v98])
              {
                int64_t v98 = v97 + 3;
                if (v97 + 3 >= v96)
                {
LABEL_101:
                  uint64_t v23 = v263;
LABEL_102:
                  swift_release();
                  swift_bridgeObjectRetain();
                  sub_18AFA362C();
                  swift_bridgeObjectRetain();
                  sub_18AFA3704();
                  uint64_t v18 = v257;
                  if (*(void *)(v250 + 16))
                  {
                    sub_18AFFEC20(v250);
                    sub_18AF2EFEC();
                    uint64_t v141 = swift_bridgeObjectRelease();
                    uint64_t v95 = sub_18AFFCE5C(v141, v142, v143, v144, v145, v146, v147, v148, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231,
                            v232,
                            v234);
                    sub_18AFD6DDC();

                    if ((v264 & 1) == 0)
                    {
                      id v153 = v24;
                      v239 = 1;
                      goto LABEL_107;
                    }
                    sub_18AFFCAEC(v149, v150, v151, v152, v264);

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v26 = 1;
                    uint64_t v25 = v241;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    id v154 = objc_msgSend(*(id *)(v244 + 16), sel_setServerChangeToken_forZoneID_, v19, p_isa);
                    if (v264)
                    {
                      sub_18AFFCAEC((uint64_t)v154, v155, v156, v157, v264);

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v25 = v241;
                    }
                    else
                    {
                      id v153 = v24;
LABEL_107:
                      uint64_t v25 = v241;
                      sub_18AF161EC(&qword_1E91255B8);
                      uint64_t inited = swift_initStackObject();
                      *(_OWORD *)(inited + 16) = xmmword_18B1F1B30;
                      *(void *)(inited + 32) = p_isa;
                      sub_18AFFD888(inited);
                      uint64_t v159 = p_isa;
                      sub_18AFFDC3C();
                      swift_bridgeObjectRelease();
                      uint64_t v160 = *(void *)(v241 + 560);
                      uint64_t v161 = *(void *)(v241 + 568);
                      *(void *)(v241 + 664) = v95;
                      uint64_t v19 = swift_task_alloc();
                      *(void *)(v19 + 16) = v160;
                      *(void *)(v19 + 24) = v161;
                      *(void *)(v19 + 32) = v230;
                      sub_18AF4045C();
                      sub_18AFF5F54(v162, v163, v164);
                      v166 = v165;
                      swift_task_dealloc();
                      if (v166) {
                        sub_18AFF5E2C((void *)v95);
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();

                      swift_bridgeObjectRelease();
                      sub_18AFFA8A0(v14, v268, v266, v261, v264, 0);
                      uint64_t v24 = v153;
                      uint64_t v18 = v257;
                    }
                    uint64_t v26 = v239;
                  }

                  uint64_t v28 = v262;
                  goto LABEL_2;
                }
                if (!*(void *)&v255[8 * v98])
                {
                  while (1)
                  {
                    int64_t v97 = v98 + 1;
                    if (__OFADD__(v98, 1)) {
                      break;
                    }
                    if (v97 >= v96) {
                      goto LABEL_101;
                    }
                    ++v98;
                    if (*(void *)&v255[8 * v97]) {
                      goto LABEL_76;
                    }
                  }
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:

                  __break(1u);
                  return;
                }
              }
            }
            int64_t v97 = v98;
          }
LABEL_76:
          sub_18AFFD058();
        }
        sub_18AFFD6C4();
        if (v99)
        {
          v259 = v24;
          *v240 = v25;
          id v103 = sub_18AFFC768();
          sub_18AF84C94((id)v25);
          v249 = v103;
          sub_18AF161EC(&qword_1E9125660);
          type metadata accessor for CKError(0);
          sub_18AFFC480();
          if (swift_dynamicCast())
          {
            sub_18AFFC9B0();
            v247 = *v237;
            uint64_t v104 = (id *)v240;
          }
          else
          {
            p_Class isa = (id *)v241;

            *(void *)(v241 + 608) = v25;
            id v105 = (id)v25;
            if (!swift_dynamicCast()) {
              goto LABEL_132;
            }
            v233 = *(void *)(v241 + 776);
            sub_18AF161EC(&qword_1E9126AA0);
            *(_OWORD *)(swift_initStackObject() + 16) = xmmword_18B1F16B0;
            uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            sub_18AFFC694(v106, v107, v108, v109, v110, v111, v112, v113, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231,
              v233,
              v234,
              v235);
            Dictionary.init(dictionaryLiteral:)();
            *(void *)(v241 + 648) = 20;
            sub_18AFFE090();
            swift_bridgeObjectRelease();
            sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
            sub_18AF4045C();
            _BridgedStoredNSError.init(_:userInfo:)();
            sub_18AFFC9B0();
            v247 = *(void *)(v241 + 640);
            sub_18AF402E0();
            v114();
            uint64_t v104 = v236;
          }

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v269[0] = v250;
          uint64_t v95 = (uint64_t)v249;
          sub_18AF7D0F8();
          sub_18AFFD014();
          Swift::Int v120 = v118 + v119;
          if (__OFADD__(v118, v119)) {
            goto LABEL_158;
          }
          uint64_t v121 = v116;
          char v122 = v117;
          sub_18AF161EC(&qword_1E9124CF0);
          Swift::Bool v123 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v120);
          uint64_t v124 = v269[0];
          uint64_t v14 = v256;
          if (v123)
          {
            sub_18AF7D0F8();
            if ((v122 & 1) != (v126 & 1))
            {
              sub_18AF34EA0(0, &qword_1E91255F0);
              sub_18AF37A90();
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              return;
            }
            uint64_t v121 = v125;
            uint64_t v95 = (uint64_t)v249;
          }
          v250 = v124;
          if (v122)
          {
            uint64_t v127 = *(void *)(v124 + 56);

            p_Class isa = v245;
            *(void *)(v127 + 8 * v121) = v247;
          }
          else
          {
            sub_18AFFC414();
            *(void *)(v128 + 8 * v121) = v95;
            p_Class isa = v245;
            *(void *)(*(void *)(v124 + 56) + 8 * v121) = v247;
            uint64_t v129 = *(void *)(v124 + 16);
            BOOL v31 = __OFADD__(v129, 1);
            uint64_t v130 = v129 + 1;
            if (v31) {
              goto LABEL_159;
            }
            *(void *)(v124 + 16) = v130;
            id v131 = (id)v95;
          }

          swift_bridgeObjectRelease();
          sub_18AF62BA4((id)v25);
          sub_18AFFC9B0();
          uint64_t v24 = v259;
        }
        else
        {
          id v100 = sub_18AFFD8F0();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            char v132 = sub_18AFFCED4();
            sub_18AF65BD4(v132, v133, v134, v135);
            uint64_t v24 = v136;
          }
          unint64_t v102 = v24[2];
          unint64_t v101 = v24[3];
          uint64_t v95 = v102 + 1;
          if (v102 >= v101 >> 1)
          {
            char v137 = sub_18AFFD49C(v101);
            sub_18AF65BD4(v137, v138, v139, (uint64_t)v24);
            uint64_t v24 = v140;
          }
          v24[2] = v95;
          v24[v102 + 4] = v25;

          sub_18AF62BA4((id)v25);
        }
      }
    }
    sub_18AFFA834(v14, v34, v35, p_isa, *(unsigned __int8 *)(v33 + 32), 1);
    sub_18AFFCAC4();
    id v36 = (id)v19;
    sub_18AFFCAC4();
    uint64_t v37 = (void *)related decl 'e' for CKErrorCode.init(_:)(v14);
    sub_18AFFD254();
    id v38 = v36;
    id v39 = v37;
    id v40 = (id *)v38;
    id v41 = v39;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (sub_18AF3F328(v43))
    {
      v248 = v43;
      v252 = v40;
      uint64_t v44 = sub_18AF16B9C();
      v246 = (void *)swift_slowAlloc();
      v269[0] = sub_18AF16B9C();
      *(_DWORD *)uint64_t v44 = 136315650;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFD660();
      }
      swift_retain();
      uint64_t v45 = sub_18AF40CEC();
      unint64_t v47 = v46;
      swift_release();
      uint64_t v25 = v241;
      *(void *)(v241 + 624) = sub_18AF4095C(v45, v47, v269);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2112;
      *(void *)(v241 + 576) = v252;
      uint64_t v48 = v252;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v246 = v252;

      *(_WORD *)(v44 + 22) = 2112;
      id v49 = v41;
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v241 + 584) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v246[1] = v50;
      uint64_t v18 = v257;

      id v40 = v252;
      p_Class isa = (id *)&v42->isa;
      _os_log_impl(&dword_18AF10000, v42, v248, "%s error fetching changes for zone %@: %@", (uint8_t *)v44, 0x20u);
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      swift_arrayDestroy();
      sub_18AF388F8();
      swift_arrayDestroy();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    *(void *)uint64_t v18 = v41;
    type metadata accessor for CKError(0);
    sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();
    uint64_t v51 = *v251;
    BOOL v52 = *v251 == 28 || v51 == 26;
    uint64_t v23 = v263;
    if (v52)
    {
      objc_msgSend(*(id *)(v244 + 16), sel_setServerChangeToken_forZoneID_, 0, v40);
    }
    else if (v51 == 21)
    {
      objc_msgSend(*(id *)(v244 + 16), sel_setServerChangeToken_forZoneID_, 0, v40);
      char v53 = 1;
      goto LABEL_31;
    }
    char v53 = 0;
LABEL_31:
    id v54 = v41;
    sub_18AF30494();
    sub_18AF41AD0();
    char v56 = v55;

    if ((v56 & 1) == 0)
    {
      sub_18AF161EC(&qword_1E91255B8);
      uint64_t v57 = swift_initStackObject();
      *(_OWORD *)(v57 + 16) = xmmword_18B1F1B30;
      *(void *)(v57 + 32) = v40;
      sub_18AFFD888(v57);
      p_Class isa = v40;
      v58._rawValue = (void *)v269[0];
      unint64_t v59 = p_isa;
      uint64_t v18 = v257;
      CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(0, v58);
      id v40 = p_isa;
      swift_bridgeObjectRelease();
    }
    if ((v53 & 1) == 0)
    {
      uint64_t v63 = *(void *)(v25 + 560);
      uint64_t v18 = *(void *)(v25 + 568);
      uint64_t v64 = *(void *)(v18 + 16);
      if (v63)
      {
        swift_retain();
        sub_18AFFC8F8();
        sub_18AFF64A4(v65, v66, v67, (Swift::Int *)(v63 + 16));
        char v69 = v68;
        swift_release();
        if ((v69 & 1) == 0)
        {
          uint64_t v18 = v257;
LABEL_57:
          unint64_t v82 = v251;
          sub_18AF40DB4();
          sub_18AFD6DDC();

          uint64_t v19 = v266;
          sub_18AFFC8F8();
          p_Class isa = v261;
          sub_18AFFA8A0(v83, v84, v85, v261, v264, 1);

          uint64_t v26 = 1;
          sub_18AFFC8F8();
          sub_18AFFA8A0(v86, v87, v88, v261, v264, 1);

          uint64_t v24 = v258;
          uint64_t v28 = v262;
          goto LABEL_3;
        }
        uint64_t v18 = v257;
LABEL_54:
        char v79 = (void *)sub_18AF3858C();
        sub_18AFF5E2C(v79);
        goto LABEL_57;
      }
      if (!v64)
      {
        sub_18AFFD3F4();
        goto LABEL_54;
      }
      id v70 = *(id *)(v18 + 32);
      id v71 = v40;
      id v72 = v70;
      id v73 = v71;
      char v74 = static NSObject.== infix(_:_:)();

      if ((v74 & 1) == 0)
      {
        if (v64 == 1) {
          goto LABEL_50;
        }
        id v75 = *(id *)(v18 + 40);
        char v76 = sub_18AFFD190();

        if ((v76 & 1) == 0)
        {
          if (v64 == 2) {
            goto LABEL_50;
          }
          id v77 = *(id *)(v18 + 48);
          char v78 = sub_18AFFD190();

          if ((v78 & 1) == 0)
          {
            if (v64 == 3)
            {
LABEL_50:
              sub_18AFFD3F4();
LABEL_51:
              id v40 = v73;
              goto LABEL_54;
            }
            id v80 = *(id *)(v18 + 56);
            char v81 = sub_18AFFD190();

            if ((v81 & 1) == 0)
            {
              v253 = (void **)(v18 + 64);
              uint64_t v89 = v64 - 4;
              sub_18AFFD3F4();
              while (v89)
              {
                uint64_t v90 = *v253++;
                id v91 = v90;
                id v40 = v73;
                char v92 = static NSObject.== infix(_:_:)();

                --v89;
                if (v92) {
                  goto LABEL_57;
                }
              }
              goto LABEL_51;
            }
          }
        }
      }
      sub_18AFFD3F4();
      id v40 = v73;
      goto LABEL_57;
    }

    uint64_t v19 = v266;
    sub_18AFFC8F8();
    uint64_t v26 = v264;
    sub_18AFFA8A0(v60, v61, v62, v261, v264, 1);

    sub_18AFFC1DC(v14);
    uint64_t v24 = v258;
    if (v262) {
      goto LABEL_4;
    }
  }
LABEL_114:
  swift_release();
  v167 = v24[2];
  v168 = *(void *)(v25 + 680);
  *(void *)(v25 + 960) = v168;
  if (!v167)
  {
    v169 = *v238;
    if (*(void *)(v168 + 16) || *(void *)(v169 + 16)) {
      goto LABEL_118;
    }
    sub_18AFDEB40(*(void *)(v25 + 808));
    swift_retain();
    swift_retain();
    v173 = sub_18AFFD9CC();
    v175 = v174;
    swift_release();
    swift_release();
    *(void *)(v25 + 984) = v173;
    *(void *)(v25 + 992) = v175;
    v176 = *(void *)(v175 + 16);
    *(void *)(v25 + 1000) = v176;
    if (v176)
    {
      swift_retain();
      swift_retain();
      sub_18AF18528();
      *(void *)(v25 + 1008) = 0;
      v177 = *(void *)(v25 + 992);
      if (!*(void *)(v177 + 16))
      {
LABEL_131:
        __break(1u);
LABEL_132:

        sub_18AFFD3B4();
        v190 = sub_18AFFBD0C();
        sub_18AFFC468(v190, (uint64_t)"Unable to convert error to CKError: ");
        swift_getErrorValue();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        sub_18AFFBCB4();
        sub_18AFFBC94();
        sub_18AF37A90();
        return;
      }
      v178 = 0;
      while (1)
      {
        v179 = *(void *)(v25 + 752);
        v180 = *(void **)(v177 + 8 * v178 + 32);
        *(void *)(v25 + 1016) = v180;
        v181 = *(void *)(v179 + 208);
        v182 = v180;
        swift_bridgeObjectRetain();
        v183 = sub_18AFCDDF8(v182, v181);
        swift_bridgeObjectRelease();
        v184 = v182;
        if (v183)
        {
          v192 = sub_18AFD70C0();
          *(void *)(v25 + 1024) = v192;
          *(void *)(v25 + 176) = v184;
          *(void *)(v25 + 184) = v192;
          *(_OWORD *)(v25 + 192) = 0u;
          *(_OWORD *)(v25 + 208) = 0u;
          *(_OWORD *)(v25 + 224) = 0u;
          *(unsigned char *)(v25 + 240) = 0x80;
          v193 = v184;
          v194 = v192;
          v170 = (void *)swift_task_alloc();
          *(void *)(v25 + 1032) = v170;
          *v170 = v25;
          v171 = sub_18AFDC114;
          goto LABEL_119;
        }
        v185 = Logger.logObject.getter();
        v186 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v185, v186))
        {
          p_Class isa = (id *)sub_18AF2A5F0();
          v187 = (void *)sub_18AF3F3B4();
          sub_18AFFBE80(v187);
          sub_18AF161EC((uint64_t *)&unk_1E9125610);
          sub_18AF40468();
          sub_18AF388F8();
          uint64_t v25 = v241;
          sub_18AF388F8();
          v188 = v184;
        }
        else
        {

          v188 = v185;
          v185 = v184;
        }

        uint64_t v24 = *(void **)(v25 + 1008);
        v189 = *(char **)(v25 + 1000);

        if ((char *)v24 + 1 == v189) {
          break;
        }
        v178 = *(void *)(v25 + 1008) + 1;
        *(void *)(v25 + 1008) = v178;
        v177 = *(void *)(v25 + 992);
        if (v178 >= *(void *)(v177 + 16)) {
          goto LABEL_131;
        }
      }
      swift_release();
      swift_release();
    }
    if (*(unsigned char *)(v25 + 98) == 1)
    {
      v195 = sub_18AFD6FEC();
      if (!v195) {
        goto LABEL_160;
      }
      v196 = v195;
      swift_bridgeObjectRelease();
      sub_18AF36AC4();
      v197 = v196;
      v198 = Logger.logObject.getter();
      v199 = static os_log_type_t.error.getter();
      if (sub_18AF42D04(v199))
      {
        uint64_t v24 = (void *)sub_18AF402C8();
        v200 = (void *)sub_18AF3F3B4();
        v269[0] = sub_18AF16B9C();
        *(_DWORD *)uint64_t v24 = 136315394;
        if ((sub_18AF33AE8() & 1) == 0) {
          sub_18AFFC06C();
        }
        sub_18AFFC0F4();
        sub_18AF40CEC();
        v201 = sub_18AFFBD74();
        *(void *)(v241 + 696) = sub_18AFFC750(v201, v202, v269);
        uint64_t v25 = v224;
        sub_18AF3F4C0();
        sub_18AF38FA4();
        swift_bridgeObjectRelease();
        v203 = sub_18AFFCD7C();
        v204 = _swift_stdlib_bridgeErrorToNSError();
        sub_18AFFCA74(v204);
        *v200 = v23;

        sub_18AF403B4(&dword_18AF10000, v198, v199, "%s error fetching record zone changes: %@");
        sub_18AF161EC((uint64_t *)&unk_1E9125610);
        sub_18AF40468();
        sub_18AF388F8();
        sub_18AF3F7A8();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {

        sub_18AF38FA4();
      }
      v212 = sub_18AFFC014();
      sub_18AF42F68(v196);

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_18AFFD254();
      uint64_t v95 = v25;
      uint64_t v25 = Logger.logObject.getter();
      v205 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled((os_log_t)v25, v205)) {
        goto LABEL_149;
      }
      v206 = (_DWORD *)sub_18AF2A5F0();
      v269[0] = sub_18AF16B9C();
      *v206 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFC04C();
      }
      v207 = *(void **)(v95 + 944);
      v260 = *(void **)(v95 + 896);
      v265 = *(void **)(v95 + 800);
      swift_retain();
      v208 = sub_18AF40CEC();
      sub_18AF47718();
      v209 = sub_18AF4095C(v208, (unint64_t)v14, v269);
      sub_18AFFCC60(v209);
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AF40444(&dword_18AF10000, v25, v205, "%s finished fetch record zone changes request");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    goto LABEL_152;
  }
  v169 = *v238;
LABEL_118:
  *(void *)(v25 + 968) = v169;
  *(void *)(v25 + 104) = v24;
  *(void *)(v25 + 112) = v168;
  *(void *)(v25 + 120) = v169;
  *(_OWORD *)(v25 + 128) = 0u;
  *(_OWORD *)(v25 + 144) = 0u;
  *(void *)(v25 + 160) = 0;
  *(unsigned char *)(v25 + 168) = 48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v170 = (void *)swift_task_alloc();
  *(void *)(v25 + 976) = v170;
  *v170 = v25;
  v171 = sub_18AFDB970;
LABEL_119:
  v170[1] = v171;
  sub_18AF30494();
  sub_18AF37A90();
  sub_18AF295AC();
}

uint64_t sub_18AFDDF94(uint64_t a1)
{
  uint64_t v27 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v28 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
LABEL_4:
  while (v4)
  {
    unint64_t v7 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v8 = v7 | (v6 << 6);
LABEL_22:
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    uint64_t v15 = *v1;
    uint64_t v16 = (void *)v1[1];
    uint64_t v17 = v16[2];
    if (*v1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      sub_18AFF6340(v14, v13, (uint64_t)(v16 + 4), v17, (void *)(v15 + 16));
      char v19 = v18;
      swift_release();
      if (v19) {
        goto LABEL_33;
      }
LABEL_34:
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      if (!v17) {
        goto LABEL_32;
      }
      uint64_t result = v16[4];
      if (result != v14 || v16[5] != v13)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v17 == 1) {
            goto LABEL_32;
          }
          uint64_t result = v16[6];
          if (result != v14 || v16[7] != v13)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
            {
              if (v17 == 2) {
                goto LABEL_32;
              }
              uint64_t result = v16[8];
              if (result != v14 || v16[9] != v13)
              {
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) == 0)
                {
                  uint64_t v23 = v17 - 3;
                  if (!v23) {
                    goto LABEL_32;
                  }
                  uint64_t result = v16[10];
                  if (result != v14 || v16[11] != v13)
                  {
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) == 0)
                    {
                      uint64_t v25 = v16 + 13;
                      while (--v23)
                      {
                        uint64_t result = *(v25 - 1);
                        if (result != v14 || *v25 != v13)
                        {
                          v25 += 2;
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) == 0) {
                            continue;
                          }
                        }
                        goto LABEL_4;
                      }
LABEL_32:
                      swift_bridgeObjectRetain();
LABEL_33:
                      sub_18AFF5CB4(v14, v13);
                      goto LABEL_34;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int64_t v9 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
LABEL_64:
    __break(1u);
    return result;
  }
  if (v9 >= v28) {
    goto LABEL_60;
  }
  unint64_t v10 = *(void *)(v27 + 8 * v9);
  ++v6;
  if (v10) {
    goto LABEL_21;
  }
  int64_t v6 = v9 + 1;
  if (v9 + 1 >= v28) {
    goto LABEL_60;
  }
  unint64_t v10 = *(void *)(v27 + 8 * v6);
  if (v10) {
    goto LABEL_21;
  }
  int64_t v6 = v9 + 2;
  if (v9 + 2 >= v28) {
    goto LABEL_60;
  }
  unint64_t v10 = *(void *)(v27 + 8 * v6);
  if (v10) {
    goto LABEL_21;
  }
  int64_t v6 = v9 + 3;
  if (v9 + 3 >= v28) {
    goto LABEL_60;
  }
  unint64_t v10 = *(void *)(v27 + 8 * v6);
  if (v10)
  {
LABEL_21:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
    goto LABEL_22;
  }
  int64_t v11 = v9 + 4;
  if (v11 < v28)
  {
    unint64_t v10 = *(void *)(v27 + 8 * v11);
    if (!v10)
    {
      while (1)
      {
        int64_t v6 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_64;
        }
        if (v6 >= v28) {
          goto LABEL_60;
        }
        unint64_t v10 = *(void *)(v27 + 8 * v6);
        ++v11;
        if (v10) {
          goto LABEL_21;
        }
      }
    }
    int64_t v6 = v11;
    goto LABEL_21;
  }
LABEL_60:

  return swift_release();
}

void sub_18AFDE29C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  int64_t v6 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return;
  }
  uint64_t v7 = a3;
  swift_unknownObjectRetain();
  uint64_t v43 = v6;
  while (v7 < v6)
  {
    unint64_t v8 = *(void **)(a2 + 8 * v7);
    uint64_t v9 = *v5;
    uint64_t v10 = v5[1];
    int64_t v11 = (void **)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 16);
    if (*v5)
    {
      id v13 = v8;
      swift_retain();
      sub_18AFF64A4((uint64_t)v13, (uint64_t)v11, v12, (Swift::Int *)(v9 + 16));
      char v15 = v14;
      swift_release();
      if ((v15 & 1) == 0) {
        goto LABEL_35;
      }
    }
    else if (v12)
    {
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      uint64_t v16 = *v11;
      id v17 = v8;
      id v18 = v16;
      char v19 = static NSObject.== infix(_:_:)();

      if (v19) {
        goto LABEL_35;
      }
      if (v12 != 1)
      {
        id v20 = *(id *)(v10 + 40);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          goto LABEL_35;
        }
        if (v12 != 2)
        {
          id v22 = *(id *)(v10 + 48);
          char v23 = static NSObject.== infix(_:_:)();

          if (v23) {
            goto LABEL_35;
          }
          if (v12 != 3)
          {
            id v36 = *(id *)(v10 + 56);
            char v37 = static NSObject.== infix(_:_:)();

            if (v37) {
              goto LABEL_35;
            }
            uint64_t v38 = v12 - 4;
            id v39 = (void **)(v10 + 64);
            while (v38)
            {
              id v40 = *v39++;
              id v41 = v40;
              char v42 = static NSObject.== infix(_:_:)();

              --v38;
              if (v42) {
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
    else
    {
      id v24 = v8;
    }
    id v25 = v8;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v27 = *v5;
    uint64_t v26 = v5[1];
    unint64_t v28 = *(void *)(v26 + 16);
    if (*v5)
    {
      swift_beginAccess();
      if (MEMORY[0x18C128C50](*(void *)(v27 + 16) & 0x3FLL) >= (uint64_t)v28)
      {
        int isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
        uint64_t v35 = *v5;
        if (!isUniquelyReferenced_native)
        {
          if (!v35) {
            goto LABEL_45;
          }
          uint64_t v35 = _HashTable.copy()();
          swift_release();
          uint64_t *v5 = v35;
        }
        if (!v35) {
          goto LABEL_44;
        }
        _HashTable.UnsafeHandle.subscript.setter();
      }
      else
      {
        uint64_t v29 = *(void *)(v27 + 24) & 0x3FLL;
        if (v28 > 0xF || v29 != 0) {
          goto LABEL_26;
        }
        swift_release();
        uint64_t *v5 = 0;
      }
    }
    else if (v28 > 0xF)
    {
      uint64_t v29 = 0;
LABEL_26:
      uint64_t v31 = MEMORY[0x18C128C80](v28);
      if (v29 <= v31) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = v29;
      }
      uint64_t v33 = sub_18AFF60A8(v26, v32, 0, v29, (void (*)(uint64_t, uint64_t, uint64_t))sub_18AFF624C);
      swift_release();
      uint64_t *v5 = v33;
    }
LABEL_35:
    ++v7;

    int64_t v6 = v43;
    if (v7 == v43)
    {
      swift_unknownObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_18AFDE5E4(unint64_t a1)
{
  uint64_t v2 = v1;
  if (a1 >> 62) {
    goto LABEL_29;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)MEMORY[0x18C1298C0](v4, a1);
      }
      else
      {
        if (v4 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_28;
        }
        id v5 = *(id *)(a1 + 32 + 8 * v4);
      }
      int64_t v6 = v5;
      if (__OFADD__(v4++, 1)) {
        break;
      }
      uint64_t v9 = *v2;
      uint64_t v8 = v2[1];
      uint64_t v10 = *(void *)(v8 + 16);
      if (*v2)
      {
        swift_retain();
        sub_18AFF64A4((uint64_t)v6, v8 + 32, v10, (Swift::Int *)(v9 + 16));
        char v12 = v11;
        swift_release();
        if ((v12 & 1) == 0) {
          goto LABEL_16;
        }
LABEL_15:
        sub_18AFF5E2C(v6);
        goto LABEL_16;
      }
      if (!v10) {
        goto LABEL_15;
      }
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      id v13 = *(id *)(v8 + 32);
      char v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) == 0)
      {
        if (v10 != 1)
        {
          id v15 = *(id *)(v8 + 40);
          char v16 = static NSObject.== infix(_:_:)();

          if (v16) {
            goto LABEL_16;
          }
          if (v10 != 2)
          {
            id v17 = *(id *)(v8 + 48);
            char v18 = static NSObject.== infix(_:_:)();

            if (v18) {
              goto LABEL_16;
            }
            if (v10 != 3)
            {
              id v19 = *(id *)(v8 + 56);
              char v20 = static NSObject.== infix(_:_:)();

              if (v20) {
                goto LABEL_16;
              }
              uint64_t v21 = v10 - 4;
              id v22 = (void **)(v8 + 64);
              while (v21)
              {
                char v23 = *v22++;
                id v24 = v23;
                char v25 = static NSObject.== infix(_:_:)();

                --v21;
                if (v25) {
                  goto LABEL_16;
                }
              }
            }
          }
        }
        goto LABEL_15;
      }
LABEL_16:

      if (v4 == v3) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
  }
LABEL_30:

  return swift_bridgeObjectRelease();
}

void sub_18AFDE840(uint64_t a1)
{
  uint64_t v2 = sub_18AFF5484();
  sub_18AFF548C(&v30, a1, 0, 1, v2);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v30;
  if (v30 != v5)
  {
    if ((v30 & 0x8000000000000000) != 0) {
      goto LABEL_55;
    }
    if (v5 >= v30)
    {
      uint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = (void *)sub_18AF489E4(v7, a1 + 32, 0, (2 * v6) | 1, (uint64_t (*)(uint64_t))sub_18AFBF64C);
      uint64_t v31 = v4;
      uint64_t v32 = v8;
      sub_18AFF5AB8(v6, a1);
      uint64_t v29 = v11;
      if (v9 == v10 >> 1)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v12 = v9;
      int64_t v13 = v10 >> 1;
      swift_retain();
      while (1)
      {
        if (v12 >= v13)
        {
          __break(1u);
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        char v14 = (uint64_t *)(v29 + 16 * v12);
        uint64_t v16 = *v14;
        uint64_t v15 = v14[1];
        uint64_t v17 = v31;
        uint64_t v18 = v8[2];
        if (!v31) {
          break;
        }
        swift_bridgeObjectRetain();
        swift_retain();
        sub_18AFF6340(v16, v15, (uint64_t)(v8 + 4), v18, (void *)(v17 + 16));
        char v20 = v19;
        swift_release();
        if (v20) {
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
LABEL_20:
        if (++v12 == v13)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return;
        }
      }
      if (v18)
      {
        BOOL v21 = v8[4] == v16 && v8[5] == v15;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_20;
        }
        if (v18 != 1)
        {
          BOOL v22 = v8[6] == v16 && v8[7] == v15;
          if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_20;
          }
          if (v18 != 2)
          {
            BOOL v23 = v8[8] == v16 && v8[9] == v15;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_20;
            }
            if (v18 != 3)
            {
              BOOL v24 = v8[10] == v16 && v8[11] == v15;
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_20;
              }
              uint64_t v25 = v18 - 4;
              if (v18 != 4)
              {
                BOOL v26 = v8[12] == v16 && v8[13] == v15;
                if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_20;
                }
                uint64_t v27 = v8 + 15;
                while (--v25)
                {
                  if (*(v27 - 1) != v16 || *v27 != v15)
                  {
                    v27 += 2;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                      continue;
                    }
                  }
                  goto LABEL_20;
                }
              }
            }
          }
        }
      }
      swift_bridgeObjectRetain();
LABEL_19:
      sub_18AFF5CB4(v16, v15);
      swift_bridgeObjectRelease();
      uint64_t v8 = v32;
      goto LABEL_20;
    }
LABEL_56:
    __break(1u);
  }
}

void sub_18AFDEB40(unint64_t a1)
{
  uint64_t v2 = (unint64_t *)sub_18AFF5484();
  sub_18AFF56C4(v30, a1, 0, 1, v2);
  uint64_t v4 = v3;
  unint64_t v5 = a1 >> 62;
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v30[0];
    if (v30[0] == v6)
    {
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v30[0] & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v30[0];
  if (v30[0] == v6)
  {
    unint64_t v28 = swift_bridgeObjectRetain();
    sub_18AF33074(v28);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  if (v30[0] < 0) {
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v29 < 0)
  {
LABEL_37:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_6:
  if (v8 < v7)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((a1 & 0xC000000000000001) != 0 && v7)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    Swift::Int v9 = 0;
    do
    {
      Swift::Int v10 = v9 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v9);
      Swift::Int v9 = v10;
    }
    while (v7 != v10);
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v12 = v15;
    uint64_t v14 = v16;
    unint64_t v13 = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v12 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v13 = (2 * v7) | 1;
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
  }
  uint64_t v18 = sub_18AF489E4(v11, v12, v14, v13, (uint64_t (*)(uint64_t))sub_18AFBF78C);
  v30[1] = v4;
  void v30[2] = v18;
  if (v6 < v7) {
    goto LABEL_34;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (v19 < v6) {
    goto LABEL_35;
  }
  if ((a1 & 0xC000000000000001) == 0) {
    goto LABEL_23;
  }
  if (v7 >= v6) {
    goto LABEL_36;
  }
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  Swift::Int v20 = v7;
  do
  {
    Swift::Int v21 = v20 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v20);
    Swift::Int v20 = v21;
  }
  while (v6 != v21);
LABEL_23:
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v23 = v25;
    uint64_t v7 = v26;
    unint64_t v24 = v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v23 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v24 = (2 * v6) | 1;
    swift_bridgeObjectRetain();
  }
  sub_18AFDE29C(v22, v23, v7, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t sub_18AFDEE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0) {
LABEL_26:
  }
    sub_18AF33074(MEMORY[0x1E4FBC860]);
  uint64_t v7 = *(void *)(a4 + 16);
  if (v7)
  {
    uint64_t v8 = a4 + 32;
    unint64_t v30 = (void **)(a2 + 32);
    swift_retain();
    swift_retain();
    unint64_t v9 = 0;
    while (1)
    {
      if (v9 >= *(void *)(a4 + 16))
      {
        __break(1u);
        goto LABEL_26;
      }
      Swift::Int v10 = *(void **)(v8 + 8 * v9);
      uint64_t v11 = *(void *)(a2 + 16);
      if (a1)
      {
        uint64_t v12 = v10;
        swift_retain();
        sub_18AFF64A4(v12, (uint64_t)v30, v11, (Swift::Int *)(a1 + 16));
        LOBYTE(v12) = v13;
        swift_release();
        if (v12) {
          goto LABEL_13;
        }
      }
      else
      {
        if (!v11)
        {
          id v17 = v10;
          goto LABEL_13;
        }
        sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
        uint64_t v14 = *v30;
        v10;
        id v15 = v14;
        char v16 = static NSObject.== infix(_:_:)();

        uint64_t v8 = a4 + 32;
        if ((v16 & 1) == 0)
        {
          if (v11 == 1) {
            goto LABEL_13;
          }
          id v18 = *(id *)(a2 + 40);
          char v19 = static NSObject.== infix(_:_:)();

          uint64_t v8 = a4 + 32;
          if ((v19 & 1) == 0)
          {
            if (v11 == 2) {
              goto LABEL_13;
            }
            id v20 = *(id *)(a2 + 48);
            char v21 = static NSObject.== infix(_:_:)();

            uint64_t v8 = a4 + 32;
            if ((v21 & 1) == 0)
            {
              if (v11 == 3) {
                goto LABEL_13;
              }
              id v22 = *(id *)(a2 + 56);
              char v23 = static NSObject.== infix(_:_:)();

              uint64_t v8 = a4 + 32;
              if ((v23 & 1) == 0)
              {
                uint64_t v24 = v11 - 4;
                uint64_t v25 = (void **)(a2 + 64);
                while (v24)
                {
                  uint64_t v26 = *v25++;
                  id v27 = v26;
                  char v29 = static NSObject.== infix(_:_:)();

                  uint64_t v8 = a4 + 32;
                  --v24;
                  if (v29) {
                    goto LABEL_10;
                  }
                }
                goto LABEL_13;
              }
            }
          }
        }
      }
LABEL_10:
      sub_18AFF5B78(v10);
LABEL_13:

      if (++v9 == v7)
      {
        swift_release_n();
        swift_release_n();
        return 0;
      }
    }
  }
  swift_release();
  swift_release();
  return 0;
}

uint64_t sub_18AFDF128(uint64_t a1, uint64_t a2)
{
  v3[55] = a2;
  v3[56] = v2;
  v3[54] = a1;
  return sub_18AF18660((uint64_t)sub_18AFDF148, v2);
}

uint64_t sub_18AFDF148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  uint64_t Strong = swift_weakLoadStrong();
  v22[57] = Strong;
  if (Strong)
  {
    uint64_t v27 = Strong;
    sub_18AFFD6A0(v22 + 2);
    uint64_t v28 = swift_allocObject();
    v22[58] = v28;
    sub_18AFFD6A0((void *)(v28 + 16));
    *(void *)(v28 + 88) = v27;
    sub_18AF1D870((uint64_t)(v22 + 2));
    sub_18AF474F0();
    swift_task_alloc();
    sub_18AF475A0();
    v22[59] = v29;
    *char v29 = v30;
    v29[1] = sub_18AFDF3C8;
    sub_18AF29CD8();
    sub_18AF2ACD0();
    return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_18AF41270(v40, (uint64_t)qword_1E91253B0);
    id v41 = (void *)Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (sub_18AF3A2EC(v42))
    {
      uint64_t v43 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC120();
      *uint64_t v43 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFBDD8();
      sub_18AF40CEC();
      uint64_t v44 = sub_18AF37A48();
      v22[50] = sub_18AF403F4(v44, v45, &a11);
      sub_18AFFD27C();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB34(&dword_18AF10000, v46, v23, "%s not fetching changes for deallocated engine");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }

    uint64_t v47 = v22[54];
    *(unsigned char *)(v47 + 80) = 0;
    *(_OWORD *)(v47 + 48) = 0u;
    *(_OWORD *)(v47 + 64) = 0u;
    *(_OWORD *)(v47 + 16) = 0u;
    *(_OWORD *)(v47 + 32) = 0u;
    *(_OWORD *)uint64_t v47 = 0u;
    sub_18AF16D48();
    sub_18AF2ACD0();
    return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AFDF3C8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

void sub_18AFDF4C0()
{
  uint64_t v143 = v0;
  uint64_t v1 = (const void *)(v0 + 16);
  uint64_t v2 = (_OWORD *)(v0 + 88);
  *(_OWORD *)(v0 + 88) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 129) = *(_OWORD *)(v0 + 193);
  uint64_t v129 = *(unsigned __int8 *)(v0 + 160);
  long long v128 = *(_OWORD *)(v0 + 168);
  uint64_t v124 = *(void *)(v0 + 184);
  uint64_t v125 = *(void *)(v0 + 152);
  uint64_t v127 = *(unsigned __int8 *)(v0 + 192);
  uint64_t v123 = *(void *)(v0 + 200);
  uint64_t v126 = *(unsigned __int8 *)(v0 + 208);
  if (qword_1E91252D0 != -1) {
    goto LABEL_122;
  }
LABEL_2:
  uint64_t v3 = type metadata accessor for Logger();
  sub_18AF412A0(v3, (uint64_t)qword_1E91253B0);
  sub_18AF1D870((uint64_t)v1);
  swift_retain();
  sub_18AF20AC4((uint64_t)v2);
  sub_18AF1D870((uint64_t)v1);
  swift_retain();
  sub_18AF20AC4((uint64_t)v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (sub_18AF42D04(v5))
  {
    os_log_type_t v139 = v5;
    uint64_t v6 = sub_18AF16B9C();
    uint64_t v141 = sub_18AF3DE24();
    *(_DWORD *)uint64_t v6 = 136315650;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    swift_retain();
    sub_18AF40CEC();
    uint64_t v7 = sub_18AF30464();
    *(void *)(v0 + 408) = sub_18AFFDAE8(v7, v8, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    *(_WORD *)(v6 + 12) = 2080;
    memcpy(v142, v1, 0x41uLL);
    unint64_t Changes = CKSyncEngine.FetchChangesContext.description.getter();
    *(void *)(v0 + 416) = sub_18AF4095C(Changes, v10, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AFFA54C((uint64_t)v1);
    sub_18AFFA54C((uint64_t)v1);
    *(_WORD *)(v6 + 22) = 2080;
    long long v11 = v2[1];
    v142[0] = *v2;
    v142[1] = v11;
    v142[2] = v2[2];
    *(_OWORD *)((char *)&v142[2] + 9) = *(_OWORD *)((char *)v2 + 41);
    uint64_t v12 = CKSyncEngine.FetchChangesOptions.description.getter();
    *(void *)(v0 + 424) = sub_18AF4095C(v12, v13, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF29830((uint64_t)v2);
    sub_18AF29830((uint64_t)v2);
    sub_18AF3F4D8(&dword_18AF10000, v4, v139, "%s next fetch changes options for context %s: %s");
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF38FA4();
    sub_18AFFA54C((uint64_t)v1);
    sub_18AFFA54C((uint64_t)v1);
    sub_18AF29830((uint64_t)v2);
    sub_18AF29830((uint64_t)v2);
  }

  uint64_t v120 = *(void *)(*(void *)(v0 + 448) + 128);
  CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
  sub_18AF20AC4((uint64_t)v2);
  unint64_t v14 = sub_18AF3563C();
  uint64_t v16 = sub_18AFC9068(v14, v15);
  swift_bridgeObjectRetain();
  unint64_t v17 = swift_bridgeObjectRetain();
  *(void *)&v142[0] = sub_18AFC9458(v17, v16);
  sub_18AFA3470(v16);
  sub_18AFDEB40(*(unint64_t *)&v142[0]);
  uint64_t v19 = v18;
  uint64_t v140 = v20;
  id v131 = sub_18AFCA530(v18, v20);
  if (!v131)
  {
    uint64_t v115 = *(void *)(v0 + 432);
    swift_release();
    sub_18AF29830((uint64_t)v2);
    swift_release();
    swift_release();
    *(unsigned char *)(v115 + 80) = 0;
    *(_OWORD *)(v115 + 48) = 0u;
    *(_OWORD *)(v115 + 64) = 0u;
    *(_OWORD *)(v115 + 16) = 0u;
    *(_OWORD *)(v115 + 32) = 0u;
    *(_OWORD *)uint64_t v115 = 0u;
LABEL_107:
    sub_18AF16D48();
    v118();
    return;
  }
  uint64_t v1 = (const void *)(v0 + 216);
  uint64_t v2 = (_OWORD *)(v0 + 328);
  int v21 = *(unsigned __int8 *)(v0 + 128);
  uint64_t v119 = *(void *)(v0 + 136);
  uint64_t v130 = *(void *)(v0 + 120);
  int v122 = v21;
  if (*(void *)(v130 + 16))
  {
    id v22 = v131;
    sub_18AF7D0BC();
    if (v24) {
      int v21 = *(unsigned __int8 *)(*(void *)(v130 + 56) + 16 * v23);
    }
  }
  int v121 = v21;
  uint64_t v25 = *(void *)(v0 + 448);
  uint64_t v141 = MEMORY[0x1E4FBC860];
  uint64_t v135 = (uint64_t *)(v25 + 216);
  sub_18AF18528();
  uint64_t v26 = MEMORY[0x1E4FBC868];
  while (2)
  {
    unint64_t v136 = v26 & 0xC000000000000001;
    if (v26 < 0) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = v26 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v133 = v26;
    uint64_t v134 = v27;
    while (1)
    {
      if (v136)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = *(void *)(v26 + 16);
      }
      if (v28 >= *v135 || (uint64_t v29 = *(void *)(v140 + 16)) == 0)
      {

        swift_release();
        swift_release();
LABEL_106:
        uint64_t v116 = *(void *)(v0 + 432);
        swift_release();
        uint64_t v117 = v141;
        *(void *)uint64_t v116 = v125;
        *(void *)(v116 + 8) = v129;
        *(_OWORD *)(v116 + 16) = v128;
        *(void *)(v116 + 32) = v124;
        *(void *)(v116 + 40) = v127;
        *(void *)(v116 + 48) = v123;
        *(void *)(v116 + 56) = v126;
        *(void *)(v116 + 64) = v117;
        *(void *)(v116 + 72) = v26;
        *(unsigned char *)(v116 + 80) = v121;
        goto LABEL_107;
      }
      if (v19)
      {
        uint64_t v31 = v19 + 16;
        Swift::Int v30 = *(void *)(v19 + 16);
        uint64_t v2 = *(_OWORD **)(v140 + 32);
        swift_retain();
        uint64_t v32 = v2;
        NSObject._rawHashValue(seed:)(v30);
        sub_18AFFD83C();
        BOOL v35 = __OFSUB__(v34, 1);
        uint64_t v36 = v34 - 1;
        if (v35)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          swift_once();
          goto LABEL_2;
        }
        uint64_t v137 = v29;
        uint64_t v37 = v19;
        uint64_t v38 = v19 + 32;
        uint64_t v39 = v36 & v33;
        uint64_t v2 = (_OWORD *)_HashTable.UnsafeHandle._startIterator(bucket:)();
        uint64_t v41 = v40;
        uint64_t v43 = v42;

        *(void *)&v142[0] = v31;
        *((void *)&v142[0] + 1) = v38;
        *(void *)&v142[1] = v39;
        *((void *)&v142[1] + 1) = v2;
        *(void *)&v142[2] = v41;
        *((void *)&v142[2] + 1) = v43;
        LOBYTE(v142[3]) = 0;
        if (!v2)
        {
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
          __break(1u);
          return;
        }
        char v44 = 0;
        uint64_t v45 = v31;
        while (1)
        {
          *(void *)(v0 + 216) = v45;
          *(void *)(v0 + 224) = v38;
          *(void *)(v0 + 232) = v39;
          *(void *)(v0 + 240) = v2;
          *(void *)(v0 + 248) = v41;
          *(void *)(v0 + 256) = v43;
          *(unsigned char *)(v0 + 264) = v44 & 1;
          uint64_t v46 = _HashTable.BucketIterator.currentValue.getter();
          if ((v47 & 1) == 0 && !v46) {
            break;
          }
          _HashTable.BucketIterator.advance()();
          uint64_t v38 = *((void *)&v142[0] + 1);
          uint64_t v45 = *(void *)&v142[0];
          uint64_t v2 = (_OWORD *)*((void *)&v142[1] + 1);
          uint64_t v39 = *(void *)&v142[1];
          uint64_t v43 = *((void *)&v142[2] + 1);
          uint64_t v41 = *(void *)&v142[2];
          char v44 = v142[3];
          if (!*((void *)&v142[1] + 1)) {
            goto LABEL_123;
          }
        }
        swift_release();
        sub_18AF18528();
        if ((*(void *)(v37 + 16) & 0x3FLL) == (*(void *)(v37 + 24) & 0x3FLL)
          || v137 > static _HashTable.minimumCapacity(forScale:)())
        {
          if ((swift_isUniquelyReferenced_native() & 1) == 0)
          {
            _HashTable.copy()();
            sub_18AF41340();
            swift_release();
          }
          uint64_t v48 = (Swift::Int *)(v37 + 16);
          uint64_t v2 = (_OWORD *)(v37 + 32);
          uint64_t v49 = _HashTable.UnsafeHandle._startIterator(bucket:)();
          *(void *)&v142[0] = v37 + 16;
          *((void *)&v142[0] + 1) = v37 + 32;
          *(void *)&v142[1] = v39;
          *((void *)&v142[1] + 1) = v49;
          *(void *)&v142[2] = v50;
          *((void *)&v142[2] + 1) = v51;
          LOBYTE(v142[3]) = 0;
          _HashTable.BucketIterator.advance()();
          uint64_t v52 = *((void *)&v142[1] + 1);
          if (*((void *)&v142[1] + 1))
          {
            char v53 = v142[3];
            uint64_t v138 = v37;
            uint64_t v55 = *((void *)&v142[2] + 1);
            uint64_t v54 = *(void *)&v142[2];
            uint64_t v26 = *(void *)&v142[1];
            long long v132 = v142[0];
            uint64_t v56 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
            swift_retain();
            long long v57 = v132;
            while (1)
            {
              *(_OWORD *)(v0 + 272) = v57;
              *(void *)(v0 + 288) = v26;
              *(void *)(v0 + 296) = v52;
              *(void *)(v0 + 304) = v54;
              *(void *)(v0 + 312) = v55;
              *(unsigned char *)(v0 + 320) = v53 & 1;
              unint64_t v58 = _HashTable.BucketIterator.currentValue.getter();
              if (v59) {
                goto LABEL_126;
              }
              if ((v58 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_111:
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
                goto LABEL_114;
              }
              if (v58 >= *(void *)(v140 + 16)) {
                goto LABEL_111;
              }
              Swift::Int v60 = *v48;
              id v61 = *(id *)(v140 + 32 + 8 * v58);
              Swift::Int v62 = NSObject._rawHashValue(seed:)(v60);

              Swift::Int v63 = *v48;
              uint64_t v64 = 1 << *v48;
              uint64_t v65 = v64 - 1;
              if (__OFSUB__(v64, 1)) {
                goto LABEL_112;
              }
              Swift::Int v66 = v65 & v62;
              if (v39 >= v56)
              {
                if (v66 < v56 || v39 < v66) {
                  goto LABEL_61;
                }
              }
              else if (v66 < v56 && v39 < v66)
              {
                goto LABEL_61;
              }
              uint64_t v69 = _HashTable.BucketIterator.currentValue.getter();
              if (v70) {
                unint64_t v71 = 0;
              }
              else {
                unint64_t v71 = ((v65 & ((v69 - (*(uint64_t *)(v138 + 24) >> 6)) >> 63)) + v69 - (*(uint64_t *)(v138 + 24) >> 6)) ^ v65;
              }
              uint64_t v72 = (v63 & 0x3F) * v39;
              uint64_t v73 = v72 >> 6;
              *((void *)v2 + (v72 >> 6)) = *((void *)v2 + (v72 >> 6)) & (((1 - v64) << v72) - 1) | (v71 << v72);
              unint64_t v74 = 64 - (v72 & 0x3F);
              unint64_t v75 = *v48 & 0x3F;
              if (v74 < v75)
              {
                unint64_t v76 = v75 << v75;
                BOOL v35 = __OFADD__(v76, 64);
                unint64_t v77 = v76 + 64;
                if (v35) {
                  goto LABEL_113;
                }
                if (v73 + 1 == (uint64_t)(v77 - 1) / 64) {
                  uint64_t v78 = 0;
                }
                else {
                  uint64_t v78 = v73 + 1;
                }
                *((void *)v2 + v78) = *((void *)v2 + v78) & (-1 << (*v48 - v74)) | (v71 >> v74);
              }
              uint64_t v39 = v26;
LABEL_61:
              _HashTable.BucketIterator.advance()();
              long long v57 = v142[0];
              uint64_t v52 = *((void *)&v142[1] + 1);
              uint64_t v26 = *(void *)&v142[1];
              uint64_t v55 = *((void *)&v142[2] + 1);
              uint64_t v54 = *(void *)&v142[2];
              char v53 = v142[3];
              if (!*((void *)&v142[1] + 1))
              {
                sub_18AFFDC5C();
                uint64_t v19 = v138;
                uint64_t v1 = (const void *)(v0 + 216);
                goto LABEL_68;
              }
            }
          }
          sub_18AFFDC5C();
          swift_retain();
          uint64_t v19 = v37;
LABEL_68:
          swift_retain();
          sub_18AFF6AF4(0, 1, v140, v48);
          swift_release();
          swift_release();
          uint64_t v27 = v134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_18AFB54E4();
          }
          uint64_t v26 = v133;
          uint64_t v80 = *(void *)(v140 + 16);
          if (!v80) {
            goto LABEL_119;
          }
          sub_18AFFC2A4(v80);
          *(void *)(v140 - 16) = 0;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_18AFB54E4();
          }
          uint64_t v27 = v134;
          uint64_t v81 = *(void *)(v140 + 16);
          if (!v81) {
            goto LABEL_121;
          }
          sub_18AFFC2A4(v81);
          *(void *)(v140 - 16) = v37;
          specialized ContiguousArray._endMutation()();
          sub_18AF18528();
          uint64_t v82 = *(void *)(v37 + 24) & 0x3FLL;
          if (*(void *)(v140 + 16) > 0xFuLL || v82)
          {
            uint64_t v83 = MEMORY[0x18C128C80]();
            uint64_t v84 = v82 <= v83 ? v83 : v82;
            uint64_t v19 = sub_18AFF60A8(v140, v84, 0, v82, (void (*)(uint64_t, uint64_t, uint64_t))sub_18AFF624C);
            swift_release();
          }
          else
          {
            swift_release();
            uint64_t v19 = 0;
          }
          uint64_t v26 = v133;
        }
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_18AFB54E4();
        }
        uint64_t v79 = *(void *)(v140 + 16);
        if (!v79) {
          goto LABEL_120;
        }
        sub_18AFFC2A4(v79);
        *(void *)(v140 - 16) = v28;
        specialized ContiguousArray._endMutation()();
        uint64_t v19 = 0;
      }
      uint64_t v85 = sub_18AFD70C0();

      if (!v85) {
        break;
      }
    }
    int v86 = v122;
    uint64_t v87 = v119;
    if (*(void *)(v130 + 16))
    {
      uint64_t v88 = v2;
      sub_18AF7D0BC();
      int v86 = v122;
      uint64_t v87 = v119;
      if (v90)
      {
        id v91 = (unsigned __int8 *)(*(void *)(v130 + 56) + 16 * v89);
        int v86 = *v91;
        uint64_t v87 = *((void *)v91 + 1);
      }
    }
    if (v121 != v86)
    {
LABEL_114:
      swift_release();

      swift_release();
      goto LABEL_106;
    }
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125638);
    v147.value.super.Class isa = (Class)objc_msgSend(*(id *)(v120 + 16), sel_serverChangeTokenForZoneID_, v2);
    v147.value._data = 0;
    v147.is_nil = 1;
    v145.value = 0;
    CKFetchRecordZoneChangesConfiguration.init(previousServerChangeToken:resultsLimit:desiredKeys:)(v92, v147, v145, v146);
    uint64_t v94 = v93;
    objc_msgSend(v93, sel_setResultsLimit_, v87);
    uint64_t v2 = v2;
    id v95 = v94;
    if (v136)
    {
      uint64_t v96 = __CocoaSet.count.getter();
      if (__OFADD__(v96, 1)) {
        goto LABEL_125;
      }
      sub_18AFC2EE4(v27, v96 + 1);
      uint64_t v26 = v97;
    }
    uint64_t v98 = v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v142[0] = v26;
    sub_18AF7D0BC();
    uint64_t v102 = *(void *)(v26 + 16);
    BOOL v103 = (v101 & 1) == 0;
    Swift::Int v104 = v102 + v103;
    if (__OFADD__(v102, v103)) {
      goto LABEL_124;
    }
    unint64_t v105 = v100;
    char v106 = v101;
    sub_18AF161EC((uint64_t *)&unk_1E9125080);
    Swift::Bool v107 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v104);
    uint64_t v26 = *(void *)&v142[0];
    uint64_t v19 = v98;
    if (!v107)
    {
LABEL_97:
      if (v106)
      {
        uint64_t v110 = *(void *)(v26 + 56);

        *(void *)(v110 + 8 * v105) = v95;
      }
      else
      {
        sub_18AFFC294(v26 + 8 * (v105 >> 6));
        *(void *)(*(void *)(v26 + 48) + 8 * v105) = v2;
        *(void *)(*(void *)(v26 + 56) + 8 * v105) = v95;
        uint64_t v111 = *(void *)(v26 + 16);
        BOOL v35 = __OFADD__(v111, 1);
        uint64_t v112 = v111 + 1;
        if (v35) {
          goto LABEL_127;
        }
        *(void *)(v26 + 16) = v112;
        uint64_t v113 = v2;
      }
      uint64_t v114 = swift_bridgeObjectRelease();
      MEMORY[0x18C129220](v114);
      if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      sub_18AF311C8();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v1 = (const void *)(v0 + 216);
      continue;
    }
    break;
  }
  sub_18AF7D0BC();
  if ((v106 & 1) == (v109 & 1))
  {
    unint64_t v105 = v108;
    goto LABEL_97;
  }
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_18AFE01B8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 160) = a3;
  *(void *)(v4 + 168) = a4;
  *(void *)(v4 + 152) = a1;
  *(_OWORD *)(v4 + 176) = *a2;
  return MEMORY[0x1F4188298](sub_18AFE01E4, 0, 0);
}

uint64_t sub_18AFE01E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF33DF8();
  sub_18AF338B4();
  if (v11[22])
  {
    sub_18AFFCF1C();
    sub_18AFFD6A0(v10);
    uint64_t v36 = *(void *)(v12 + 24) + **(int **)(v12 + 24);
    unint64_t v13 = (void *)swift_task_alloc();
    v11[24] = v13;
    void *v13 = v11;
    v13[1] = sub_18AFE0330;
    sub_18AFFC710();
    sub_18AF33C3C();
    return v20(v14, v15, v16, v17, v18, v19, v20, v21, v36, v12 + 24);
  }
  else
  {
    char v24 = (_OWORD *)v11[19];
    uint64_t v23 = v11[20];
    long long v25 = *(_OWORD *)(v23 + 8);
    long long v26 = *(_OWORD *)(v23 + 24);
    long long v27 = *(_OWORD *)(v23 + 40);
    *(_OWORD *)((char *)v24 + 41) = *(_OWORD *)(v23 + 49);
    v24[1] = v26;
    v24[2] = v27;
    _OWORD *v24 = v25;
    sub_18AF1D870(v23);
    sub_18AF16D48();
    sub_18AF33C3C();
    return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
  }
}

uint64_t sub_18AFE0330()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFE03F8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  char v2 = *(unsigned char *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 120);
  char v4 = *(unsigned char *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  char v6 = *(unsigned char *)(v0 + 144);
  long long v7 = *(_OWORD *)(v0 + 104);
  *(void *)uint64_t v1 = *(void *)(v0 + 88);
  *(unsigned char *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = v7;
  *(void *)(v1 + 32) = v3;
  *(unsigned char *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v5;
  *(unsigned char *)(v1 + 56) = v6;
  return sub_18AF18514();
}

uint64_t sub_18AFE0438()
{
  *(void *)(v1 + 40) = v0;
  return sub_18AF18660((uint64_t)sub_18AFE0454, v0);
}

uint64_t sub_18AFE0454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF30E30();
  sub_18AF1A048();
  uint64_t v13 = *(void *)(v12 + 40);
  sub_18AF18528();
  uint64_t v14 = *(void *)(v13 + 232);
  uint64_t v15 = v14 + 64;
  sub_18AFFC904();
  uint64_t v18 = v17 & v16;
  int64_t v20 = (unint64_t)(63 - v19) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v24 = MEMORY[0x1E4FBC0F0];
  if (!v18) {
    goto LABEL_3;
  }
LABEL_2:
  sub_18AFFC154();
  for (int64_t i = v25 | (v22 << 6); ; int64_t i = v29 + (v22 << 6))
  {
    uint64_t v30 = *(void *)(*(void *)(v14 + 56) + 8 * i);
    swift_retain();
    uint64_t v31 = sub_18AF161EC(&qword_1E9125660);
    MEMORY[0x18C129450](v30, v23, v31, v24);
    uint64_t result = swift_release();
    if (v18) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    if (v27 >= v20) {
      goto LABEL_21;
    }
    ++v22;
    if (!*(void *)(v15 + 8 * v27))
    {
      int64_t v22 = v27 + 1;
      if (v27 + 1 >= v20) {
        goto LABEL_21;
      }
      if (!*(void *)(v15 + 8 * v22))
      {
        int64_t v22 = v27 + 2;
        if (v27 + 2 >= v20) {
          goto LABEL_21;
        }
        if (!*(void *)(v15 + 8 * v22))
        {
          int64_t v22 = v27 + 3;
          if (v27 + 3 >= v20) {
            goto LABEL_21;
          }
          if (!*(void *)(v15 + 8 * v22)) {
            break;
          }
        }
      }
    }
LABEL_18:
    sub_18AFFD428();
  }
  int64_t v28 = v27 + 4;
  if (v28 < v20)
  {
    if (!*(void *)(v15 + 8 * v28))
    {
      while (1)
      {
        int64_t v22 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_25;
        }
        if (v22 >= v20) {
          goto LABEL_21;
        }
        ++v28;
        if (*(void *)(v15 + 8 * v22)) {
          goto LABEL_18;
        }
      }
    }
    int64_t v22 = v28;
    goto LABEL_18;
  }
LABEL_21:
  swift_release();
  sub_18AF16D48();
  sub_18AF37A90();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

uint64_t sub_18AFE05FC(uint64_t a1)
{
  *(void *)(v1 + 248) = a1;
  return sub_18AF2FCF8();
}

void sub_18AFE0608()
{
  char v2 = *(os_unfair_lock_s **)(v0 + 256);
  uint64_t v3 = v2 + 4;
  char v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_18AFFBA14(v3);
  os_unfair_lock_unlock(v4);
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_18AF412A0(v5, (uint64_t)qword_1E91253B0);
  sub_18AFFD254();
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (sub_18AFFC7AC(v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = sub_18AF16B9C();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_retain();
    sub_18AF40CEC();
    uint64_t v9 = swift_release();
    sub_18AF3F444(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_18AF10000, v6, v1, "%s setting needsToReloadAccount=%{BOOL}d", (uint8_t *)v8, 0x12u);
    sub_18AF351C4();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    swift_release_n();
  }
}

void (*sub_18AFE07E4(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_18AF3A69C() & 1;
  return sub_18AFE0830;
}

void sub_18AFE0830()
{
}

uint64_t sub_18AFE0858()
{
  sub_18AF18528();
  return *(unsigned __int8 *)(v0 + 264);
}

uint64_t sub_18AFE0884(char a1)
{
  uint64_t result = sub_18AF3F37C();
  *(unsigned char *)(v1 + 264) = a1;
  return result;
}

uint64_t (*sub_18AFE08B8())()
{
  return j__swift_endAccess_0;
}

uint64_t sub_18AFE0900()
{
  sub_18AF18528();
  return *(unsigned __int8 *)(v0 + 265);
}

uint64_t sub_18AFE092C(char a1)
{
  uint64_t result = sub_18AF3F37C();
  *(unsigned char *)(v1 + 265) = a1;
  return result;
}

uint64_t (*sub_18AFE0960())()
{
  return j_j__swift_endAccess_0;
}

uint64_t sub_18AFE09A4()
{
  sub_18AF18528();
  return *(unsigned __int8 *)(v0 + 266);
}

uint64_t sub_18AFE09D0(char a1)
{
  uint64_t result = sub_18AF3F37C();
  *(unsigned char *)(v1 + 266) = a1;
  return result;
}

uint64_t (*sub_18AFE0A04())()
{
  return j_j__swift_endAccess_0;
}

void sub_18AFE0A48(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_18AF3F340((uint64_t)v1);
}

void *sub_18AFE0A78()
{
  sub_18AF18528();
  id v1 = *(void **)(v0 + 304);
  id v2 = v1;
  return v1;
}

uint64_t (*sub_18AFE0AB4())()
{
  return j_j__swift_endAccess_0;
}

void sub_18AFE0AF8(void *a1)
{
  id v2 = a1;

  sub_18AF3F340((uint64_t)a1);
}

void sub_18AFE0B30()
{
  uint64_t v1 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v2 = sub_18AF19284(v1);
  MEMORY[0x1F4188790](v2);
  sub_18AF19290();
  uint64_t v5 = v4 - v3;
  if (!*(void *)(v0 + 248))
  {
    uint64_t v6 = type metadata accessor for TaskPriority();
    sub_18AF1826C(v5, v7, v8, v6);
    uint64_t v9 = sub_18AF38368(&qword_1E9125250, (void (*)(uint64_t))type metadata accessor for SyncEngine);
    uint64_t v10 = (void *)sub_18AF3488C();
    id v10[2] = v0;
    v10[3] = v9;
    v10[4] = v0;
    sub_18AF3098C();
    sub_18AF42DB4(v5, (uint64_t)&unk_1E91270D0, (uint64_t)v10);
    sub_18AFE05FC(v11);
  }
}

uint64_t sub_18AFE0C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[3] = v6;
  v4[4] = *(void *)(v6 - 8);
  v4[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFE0CEC, a4, 0);
}

uint64_t sub_18AFE0CEC()
{
  sub_18AF2A56C();
  static Duration.seconds(_:)();
  sub_18AFFD0B4();
  uint64_t v0 = sub_18AF22E4C();
  uint64_t v1 = (void *)sub_18AF22D78(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFE0D98;
  sub_18AF22E38();
  return v3();
}

uint64_t sub_18AFE0D98()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  sub_18AF23168();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_18AF23180();
  if (v0) {

  }
  uint64_t v4 = sub_18AF311F8();
  v5(v4);
  sub_18AF309A4();
  sub_18AF2FCE4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AFE0EE4()
{
  sub_18AF339B8();
  sub_18AFE05FC(0);
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF3F79C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF23948;
  sub_18AFFD740();
  return sub_18AF1B5E8();
}

uint64_t sub_18AFE0F78()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 528) = *(void *)(v3 + 112);
  sub_18AF26744();
  uint64_t v5 = *(void *)(v4 + 440);
  if (v6) {
    uint64_t v7 = sub_18AFE13B0;
  }
  else {
    uint64_t v7 = sub_18AFE1068;
  }
  return MEMORY[0x1F4188298](v7, v5, 0);
}

uint64_t sub_18AFE1068()
{
  sub_18AF30E30();
  sub_18AF1A048();
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[57];
  v0[2] = v0;
  v0[7] = v0 + 53;
  v0[3] = sub_18AF26538;
  sub_18AF3A644();
  v0[33] = v2;
  sub_18AF3A5E0(v0 + 30);
  sub_18AF34EA0(0, &qword_1E9125180);
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF3A5D4();
  sub_18AF3A65C();
  uint64_t v3 = sub_18AF3A680();
  v4(v3);
  v0[26] = MEMORY[0x1E4F143A8];
  v0[27] = 1107296256;
  v0[28] = sub_18AF2606C;
  v0[29] = &unk_1ED7F50A0;
  objc_msgSend(v1, sel_accountInfoWithCompletionHandler_, v0 + 26);
  sub_18AF37A90();
  return MEMORY[0x1F41881E8](v5);
}

uint64_t sub_18AFE11C0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 448);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_18AF401EC(v2, &qword_1E9125470);
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AFE12C0()
{
  sub_18AF339B8();

  if (__sTestOverridesAvailable)
  {
    id v1 = objc_msgSend(self, sel_defaultCenter);
    if (qword_1E9125730 != -1) {
      swift_once();
    }
    objc_msgSend(v1, sel_postNotificationName_object_, qword_1E9126D78, *(void *)(v0 + 440));
  }
  sub_18AF3DDE0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v2();
}

uint64_t sub_18AFE13B0()
{
  sub_18AF30E30();
  sub_18AF1A048();
  id v1 = (void *)v0[66];
  swift_willThrow();

  uint64_t v2 = (void *)v0[64];
  uint64_t v3 = v0[57];
  v0[2] = v0;
  v0[7] = v0 + 53;
  v0[3] = sub_18AF26538;
  sub_18AF3A644();
  v0[33] = v3;
  sub_18AF3A5E0(v0 + 30);
  sub_18AF34EA0(0, &qword_1E9125180);
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF3A5D4();
  sub_18AF3A65C();
  uint64_t v4 = sub_18AF3A680();
  v5(v4);
  v0[26] = MEMORY[0x1E4F143A8];
  v0[27] = 1107296256;
  v0[28] = sub_18AF2606C;
  v0[29] = &unk_1ED7F50A0;
  objc_msgSend(v2, sel_accountInfoWithCompletionHandler_, v0 + 26);
  sub_18AF37A90();
  return MEMORY[0x1F41881E8](v6);
}

uint64_t sub_18AFE151C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v27;
  a26 = v28;
  sub_18AF41388();
  a24 = v26;
  uint64_t v29 = (void *)v26[67];
  uint64_t v30 = v26[55];
  swift_willThrow();
  swift_retain();
  id v31 = v29;
  swift_retain();
  id v32 = v29;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (sub_18AF3A2EC(v34))
  {
    a11 = v26 + 52;
    a12 = v26 + 43;
    a10 = v26 + 53;
    uint64_t v35 = sub_18AF402C8();
    uint64_t v36 = (void *)sub_18AF3F3B4();
    a13 = sub_18AF16B9C();
    a14 = a13;
    *(_DWORD *)uint64_t v35 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v37 = (void *)v26[67];
    swift_retain();
    uint64_t v38 = sub_18AF40CEC();
    unint64_t v40 = v39;
    swift_release();
    v26[52] = sub_18AF4095C(v38, v40, &a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    *(_WORD *)(v35 + 12) = 2112;
    id v41 = v37;
    uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
    v26[43] = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v42;

    _os_log_impl(&dword_18AF10000, v33, (os_log_type_t)v30, "%s error checking account info: %@", (uint8_t *)v35, 0x16u);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    uint64_t v43 = (void *)v26[67];

    sub_18AFFBC0C();
  }
  if (__sTestOverridesAvailable)
  {
    id v44 = objc_msgSend(self, sel_defaultCenter);
    if (qword_1E9125730 != -1) {
      swift_once();
    }
    objc_msgSend(v44, sel_postNotificationName_object_, qword_1E9126D78, v26[55]);
  }
  sub_18AF3DDE0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  sub_18AF41060();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_18AFE17FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_18AFFC3F8();
  a29 = v31;
  a30 = v32;
  sub_18AFFD4F8();
  a28 = v30;
  a19 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = *(void **)(v30 + 360);
  id v34 = *(id *)(v30 + 536);
  sub_18AF36AC4();
  id v35 = v33;
  id v36 = v34;
  id v37 = v35;
  uint64_t v38 = Logger.logObject.getter();
  int v39 = static os_log_type_t.debug.getter();
  if (sub_18AF32640((os_log_type_t)v39))
  {
    HIDWORD(a11) = v39;
    a15 = v30 + 440;
    a17 = (void *)(v30 + 456);
    a12 = v30 + 464;
    uint64_t v40 = sub_18AF16B9C();
    a13 = (void *)sub_18AF3F3B4();
    a14 = sub_18AF182D8();
    a18 = a14;
    *(_DWORD *)uint64_t v40 = 136315650;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    a16 = *(void *)(v30 + 536);
    swift_retain();
    sub_18AF40CEC();
    uint64_t v41 = sub_18AF37A48();
    *(void *)(v30 + 440) = sub_18AF403F4(v41, v42, &a18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    id v43 = objc_msgSend(v37, sel_recordName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)(v30 + 448) = sub_18AF403F4(v44, v45, &a18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 22) = 2112;
    if (a16)
    {
      *(void *)(v30 + 464) = v36;
      id v46 = v36;
    }
    else
    {
      *a17 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a13 = *(void *)(v30 + 536);

    sub_18AF3F4D8(&dword_18AF10000, v38, BYTE4(a11), "%s received a user record ID: %s. Existing lastKnownUserRecordID: %@");
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AFFCFF8();
    sub_18AF388F8();
    sub_18AF41310();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF38FA4();
  }
  id v47 = v37;
  if (__sTestOverridesAvailable)
  {
    uint64_t v48 = *(void **)(*(void *)(v30 + 528) + 16);
    id v47 = v37;
    if (objc_msgSend(v48, sel_useMockNextKnownUserRecordID))
    {
      id v47 = objc_msgSend(v48, sel_mockNextKnownUserRecordID);
    }
  }

  *(void *)(v30 + 568) = v47;
  uint64_t v49 = *(void **)(v30 + 536);
  if (v49)
  {
    if (!v47)
    {
      uint64_t v55 = 0;
      goto LABEL_19;
    }
    id v50 = v49;
    id v51 = v47;
    sub_18AF31160();
    char v52 = static NSObject.== infix(_:_:)();

    if (v52) {
      goto LABEL_42;
    }
  }
  else if (!v47)
  {
    id v50 = 0;
LABEL_42:
    objc_msgSend((id)sub_18AF42890(), sel_setDidPerformInitialUserRecordIDFetch_, 1);

    swift_task_dealloc();
    swift_task_dealloc();
    sub_18AF47438();
    v78(v77, v78, v79, v80, v81, v82, v83, v84, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    return;
  }
  objc_msgSend(v47, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  char v53 = (_OWORD *)sub_18AF36520();
  sub_18AF5F658(v53, v54);
  sub_18AFFC7C8();
  swift_dynamicCast();
  uint64_t v55 = *(void **)(v30 + 368);
LABEL_19:
  *(void *)(v30 + 576) = v55;
  unsigned int v56 = objc_msgSend(*(id *)(*(void *)(v30 + 528) + 16), sel_didPerformInitialUserRecordIDFetch);
  sub_18AF3207C();
  long long v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  BOOL v59 = sub_18AF42D04(v58);
  if (v56)
  {
    if (v59)
    {
      Swift::Int v60 = (uint8_t *)sub_18AF2A5F0();
      a18 = sub_18AF16B9C();
      *(_DWORD *)Swift::Int v60 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFD600();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v61 = sub_18AFFBD74();
      *(void *)(v30 + 400) = sub_18AFFC750(v61, v62, &a18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_18AF10000, v57, v58, "%s user record ID change detected, resetting sync engine state to prevent any pending syncs for a different user", v60, 0xCu);
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    objc_msgSend((id)sub_18AF42890(), sel_reset);
  }
  else if (v59)
  {
    Swift::Int v63 = (uint8_t *)sub_18AF2A5F0();
    a18 = sub_18AF16B9C();
    *(_DWORD *)Swift::Int v63 = 136315138;
    if ((sub_18AF33AE8() & 1) == 0) {
      sub_18AFFD5C0();
    }
    swift_retain();
    sub_18AF40CEC();
    uint64_t v64 = sub_18AF41328();
    *(void *)(v30 + 392) = sub_18AF41370(v64, v65, &a18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18AF10000, v57, v58, "%s initial user record ID fetched", v63, 0xCu);
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF38FA4();
  }
  Swift::Int v66 = *(void **)(*(void *)(v30 + 528) + 16);
  objc_msgSend(v66, sel_setDidPerformInitialUserRecordIDFetch_, 1);
  objc_msgSend(v66, sel_setLastKnownUserRecordID_, v47);
  if (v49)
  {
    if (v55) {
      unsigned __int8 v67 = 2;
    }
    else {
      unsigned __int8 v67 = 1;
    }
    char v68 = *(void **)(v30 + 536);
    uint64_t v69 = v68;
    char v70 = v55;
  }
  else
  {
    if (!v55)
    {
      _assertionFailure(_:_:file:line:flags:)();
      sub_18AF47438();
      return;
    }
    char v70 = 0;
    unsigned __int8 v67 = 0;
    char v68 = *(void **)(v30 + 536);
    uint64_t v69 = v55;
  }
  *(unsigned char *)(v30 + 145) = v67;
  *(void *)(v30 + 592) = v70;
  *(void *)(v30 + 584) = v69;
  *(void *)(v30 + 80) = v69;
  *(void *)(v30 + 88) = v70;
  *(void *)(v30 + 96) = v67;
  sub_18AFFDBDC();
  *(unsigned char *)(v30 + 144) = 16;
  id v71 = v55;
  id v72 = v68;
  uint64_t v73 = (void *)sub_18AFFC7C8();
  sub_18AF755E8(v73, v74, v67);
  unint64_t v75 = (void *)swift_task_alloc();
  *(void *)(v30 + 600) = v75;
  *unint64_t v75 = v30;
  v75[1] = sub_18AFE1FCC;
  sub_18AF47438();
  sub_18AF295AC();
}

uint64_t sub_18AFE1FCC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFE20D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  a11 = *MEMORY[0x1E4F143B8];
  swift_retain_n();
  long long v26 = (void *)Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (sub_18AF3A2EC(v27))
  {
    uint64_t v28 = (_DWORD *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFD130();
    *uint64_t v28 = 136315138;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    sub_18AFFBDD8();
    sub_18AF40CEC();
    uint64_t v29 = sub_18AF37A48();
    v22[48] = sub_18AF403F4(v29, v30, &a10);
    sub_18AFFD27C();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB34(&dword_18AF10000, v31, v23, "%s scheduling sync after receiving updated userRecordID");
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF38FA4();
  }

  uint64_t v32 = v22[61];
  uint64_t v33 = type metadata accessor for Date();
  sub_18AF1826C(v32, v34, v35, v33);
  id v36 = (void *)swift_task_alloc();
  v22[76] = v36;
  *id v36 = v22;
  v36[1] = sub_18AFE228C;
  sub_18AF41784(v22[61]);
  sub_18AF2ACD0();
  return sub_18AF2932C();
}

uint64_t sub_18AFE228C()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 488);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_18AF401EC(v2, &qword_1E9125470);
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AFE23C0()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v1 = *(void **)(v0 + 592);
  uint64_t v2 = *(void **)(v0 + 584);
  uint64_t v3 = *(void **)(v0 + 576);
  uint64_t v4 = *(void **)(v0 + 536);
  unsigned __int8 v5 = *(unsigned char *)(v0 + 145);
  sub_18AF74A88(v2, v1, v5);

  sub_18AF74A88(v2, v1, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF1F19C();
  sub_18AF37AC0();
  return v7(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_18AFE249C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFE2578()
{
  sub_18AF339B8();
  if (*(unsigned char *)(v0 + 33) == 1) {
    sub_18AFE8EA0();
  }
  sub_18AF16D48();
  return v1();
}

uint64_t sub_18AFE25DC()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF3F79C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF23948;
  sub_18AFFD740();
  return sub_18AF14BC0();
}

uint64_t sub_18AFE2660()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

void sub_18AFE273C()
{
  sub_18AF2A56C();
  if (*(void *)(v0 + 144) >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = Data.count.getter();
    sub_18AFEEF20(v1);
    uint64_t v2 = sub_18AF311C8();
    sub_18AF5B00C(v2, v3);
    sub_18AF5B00C(*(void *)(v0 + 136), *(void *)(v0 + 144));
    swift_release();
    sub_18AF16D48();
    v4();
  }
}

uint64_t sub_18AFE27D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = *a4;
  unint64_t v8 = a4[1];
  *a4 = a1;
  a4[1] = a2;
  sub_18AF5F6FC(a1, a2);
  uint64_t result = sub_18AF5B00C(v7, v8);
  *(void *)a5 = a3;
  *(unsigned char *)(a5 + 8) = 0;
  return result;
}

uint64_t sub_18AFE2824(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t, unint64_t, uint64_t))(a1 + 32);
  id v5 = a2;
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  v4(v6, v8, a3);

  return sub_18AF5AF68(v6, v8);
}

uint64_t SyncEngine.useOpportunisticPushTopic.getter()
{
  return *(unsigned __int8 *)(v0 + 352);
}

void sub_18AFE28AC(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_18AFE2918((uint64_t)v1);
}

void *sub_18AFE28DC()
{
  sub_18AF18528();
  id v1 = *(void **)(v0 + 360);
  id v2 = v1;
  return v1;
}

void sub_18AFE2918(uint64_t a1)
{
  sub_18AF3F37C();
  unint64_t v3 = *(void **)(v1 + 360);
  *(void *)(v1 + 360) = a1;
}

uint64_t (*sub_18AFE2954())()
{
  return j_j__swift_endAccess_0;
}

uint64_t sub_18AFE2998(uint64_t a1)
{
  *(void *)(v1 + 384) = a1;
  return sub_18AF2FCF8();
}

uint64_t sub_18AFE29A4()
{
  if (!*(void *)(v0 + 376))
  {
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    sub_18AFE2A0C();
    sub_18AFFD984();
  }
  swift_bridgeObjectRetain();
  return sub_18AF40F8C();
}

unint64_t sub_18AFE2A0C()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  uint64_t v1 = CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v0 + 136), sel_databaseScope));
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

void sub_18AFE2AC0()
{
  uint64_t v1 = v0;
  if (sub_18AF38A9C())
  {
    uint64_t v2 = *(void *)(v0 + 336);
    uint64_t v3 = *(void *)(v1 + 344);
    swift_bridgeObjectRetain();
    uint64_t v4 = v3;
    if (CKCurrentProcessIsDaemon())
    {
      if (!v3)
      {
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v5 = type metadata accessor for Logger();
        sub_18AF412A0(v5, (uint64_t)qword_1E91253B0);
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v6, v7))
        {
          *(_WORD *)sub_18AF389E0() = 0;
          sub_18AF16E74(&dword_18AF10000, v8, v9, "BUG IN CLIENT OF CLOUDKIT: When using CKSyncEngine in a daemon, you must set apsMachServiceName in your configuration. Otherwise, your process won't be launched for push notifications.");
          sub_18AF388F8();
        }

        uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v4 = v10;
        swift_bridgeObjectRetain();
      }
    }
    else if (!v3)
    {
      id v11 = objc_msgSend(objc_allocWithZone((Class)CKNotificationListener), sel_init);
      goto LABEL_14;
    }
    sub_18AF34EA0(0, &qword_1E9125210);
    swift_bridgeObjectRetain();
    id v11 = sub_18AFE2FA4(v2, v4);
    objc_msgSend(v11, sel_setUseOpportunisticPushTopics_, *(unsigned __int8 *)(v1 + 352));
LABEL_14:
    id v48 = v11;
    sub_18AFE2918((uint64_t)v11);
    sub_18AF161EC(&qword_1E9125220);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18B1F33D0;
    int64_t v13 = sub_18AFE2A0C();
    uint64_t v15 = v14;
    *(void *)(inited + 32) = v13;
    *(void *)(inited + 40) = v14;
    uint64_t v16 = *(void *)(v1 + 368);
    uint64_t v17 = *(void *)(v1 + 376);
    *(void *)(inited + 48) = v16;
    *(void *)(inited + 56) = v17;
    swift_bridgeObjectRetain();
    uint64_t v18 = CKSyncEngine.State.existingDatabaseSubscriptionID.getter();
    uint64_t v20 = v19;
    uint64_t v47 = v18;
    *(void *)(inited + 64) = v18;
    *(void *)(inited + 72) = v19;
    swift_bridgeObjectRetain();
    sub_18AF33790(0, 1, 1, MEMORY[0x1E4FBC860]);
    uint64_t v22 = v21;
    unint64_t v24 = *(void *)(v21 + 16);
    unint64_t v23 = *(void *)(v21 + 24);
    unint64_t v25 = v24 + 1;
    if (v24 < v23 >> 1) {
      goto LABEL_15;
    }
LABEL_45:
    sub_18AFFCA40(v23 > 1, v25);
    uint64_t v22 = v41;
LABEL_15:
    *(void *)(v22 + 16) = v25;
    unint64_t v26 = v22 + 16 * v24;
    *(void *)(v26 + 32) = v13;
    *(void *)(v26 + 40) = v15;
    if (v17)
    {
      unint64_t v27 = *(void *)(v22 + 24);
      swift_bridgeObjectRetain();
      if (v25 >= v27 >> 1)
      {
        char v42 = sub_18AFFC58C();
        sub_18AF33790(v42, v43, v44, v22);
        uint64_t v22 = v45;
      }
      *(void *)(v22 + 16) = v24 + 2;
      unint64_t v28 = v22 + 16 * v25;
      *(void *)(v28 + 32) = v16;
      *(void *)(v28 + 40) = v17;
    }
    if (v20)
    {
      unint64_t v29 = *(void *)(v22 + 16);
      unint64_t v24 = *(void *)(v22 + 24);
      unint64_t v25 = v29 + 1;
      swift_bridgeObjectRetain();
      if (v29 >= v24 >> 1)
      {
        sub_18AFFCA40(v24 > 1, v29 + 1);
        uint64_t v22 = v46;
      }
      *(void *)(v22 + 16) = v25;
      uint64_t v30 = v22 + 16 * v29;
      *(void *)(v30 + 32) = v47;
      *(void *)(v30 + 40) = v20;
    }
    swift_release();
    uint64_t v20 = sub_18AFC0D94(v22);
    int64_t v31 = 0;
    uint64_t v17 = v20 + 56;
    sub_18AF3093C();
    uint64_t v16 = v33 & v32;
    int64_t v13 = (unint64_t)(v34 + 63) >> 6;
    uint64_t v15 = v50;
    if ((v33 & v32) != 0)
    {
LABEL_24:
      sub_18AFFCEBC();
      goto LABEL_39;
    }
    while (1)
    {
      unint64_t v23 = v31 + 1;
      if (__OFADD__(v31, 1))
      {
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if ((uint64_t)v23 >= v13) {
        goto LABEL_41;
      }
      ++v31;
      if (!*(void *)(v17 + 8 * v23))
      {
        int64_t v31 = v23 + 1;
        if ((uint64_t)(v23 + 1) >= v13) {
          goto LABEL_41;
        }
        if (!*(void *)(v17 + 8 * v31))
        {
          int64_t v31 = v23 + 2;
          if ((uint64_t)(v23 + 2) >= v13) {
            goto LABEL_41;
          }
          if (!*(void *)(v17 + 8 * v31))
          {
            v23 += 3;
            if ((uint64_t)v23 >= v13)
            {
LABEL_41:

              swift_release();
              swift_bridgeObjectRelease();
              return;
            }
            if (!*(void *)(v17 + 8 * v23))
            {
              while (1)
              {
                int64_t v31 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_44;
                }
                if (v31 >= v13) {
                  goto LABEL_41;
                }
                ++v23;
                if (*(void *)(v17 + 8 * v31)) {
                  goto LABEL_38;
                }
              }
            }
            int64_t v31 = v23;
          }
        }
      }
LABEL_38:
      sub_18AFFCC20();
LABEL_39:
      id v36 = (uint64_t *)(*(void *)(v20 + 48) + 16 * v35);
      uint64_t v37 = *v36;
      uint64_t v38 = v36[1];
      swift_bridgeObjectRetain();
      unint64_t v25 = MEMORY[0x18C128F60](v37, v38);
      swift_bridgeObjectRelease();
      unint64_t v24 = *(void *)(v1 + 136);
      uint64_t v39 = sub_18AF33890();
      sub_18AFFC450();
      uint64_t v50[2] = sub_18AFFA2A8;
      v50[3] = v39;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      v50[0] = sub_18AF68494;
      v50[1] = &unk_1ED7F4F88;
      uint64_t v40 = _Block_copy(aBlock);
      swift_release();
      objc_msgSend(v48, sel_registerForSubscriptionWithID_inDatabase_handler_, v25, v24, v40);
      _Block_release(v40);

      if (v16) {
        goto LABEL_24;
      }
    }
  }

  sub_18AFE2918(0);
}

id sub_18AFE2FA4(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x18C128F60](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

  return v6;
}

void sub_18AFE3018(void *a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = Strong;
    self;
    uint64_t v7 = swift_dynamicCastObjCClass();
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = type metadata accessor for TaskPriority();
      sub_18AF43708((uint64_t)v4, 1, 1, v9);
      uint64_t v10 = (void *)swift_allocObject();
      id v10[2] = 0;
      v10[3] = 0;
      v10[4] = v6;
      v10[5] = v8;
      id v11 = a1;
      sub_18AF42DB4((uint64_t)v4, (uint64_t)&unk_1E91270B0, (uint64_t)v10);
    }
    else
    {
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_18AF412A0(v12, (uint64_t)qword_1E91253B0);
      id v13 = a1;
      swift_retain_n();
      id v14 = v13;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v15, v16))
      {
        swift_release_n();

        return;
      }
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v26 = v24;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_retain();
      uint64_t v19 = sub_18AF40CEC();
      unint64_t v21 = v20;
      swift_release();
      uint64_t v25 = sub_18AF4095C(v19, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v17 + 12) = 2112;
      uint64_t v25 = (uint64_t)v14;
      id v22 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v14;

      _os_log_impl(&dword_18AF10000, v15, v16, "%s received notification in sync engine that is not a database notification: %@", (uint8_t *)v17, 0x16u);
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      swift_arrayDestroy();
      MEMORY[0x18C12BB10](v18, -1, -1);
      uint64_t v23 = v24;
      swift_arrayDestroy();
      MEMORY[0x18C12BB10](v23, -1, -1);
      MEMORY[0x18C12BB10](v17, -1, -1);
    }
    swift_release();
  }
}

uint64_t sub_18AFE3378()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF13048;
  return sub_18AFE3414();
}

uint64_t sub_18AFE3414()
{
  sub_18AF339B8();
  v1[22] = v2;
  v1[23] = v0;
  uint64_t v3 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v3);
  v1[24] = sub_18AF2F1C8();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFE34C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_18AFFC3F8();
  a29 = v32;
  a30 = v33;
  sub_18AFFD4F8();
  a28 = v30;
  a19 = *MEMORY[0x1E4F143B8];
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v30 + 200) = Strong;
  if (Strong)
  {
    uint64_t v98 = Strong;
    id v35 = objc_msgSend(*(id *)(v30 + 176), sel_recordZoneID);
    *(void *)(v30 + 208) = v35;
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    *(void *)(v30 + 216) = sub_18AF412A0(v36, (uint64_t)qword_1E91253B0);
    sub_18AF3098C();
    id v37 = v35;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      a14 = (void *)(v30 + 144);
      a15 = v30 + 128;
      a13 = v30 + 136;
      a10 = v30 + 152;
      uint64_t v40 = sub_18AF402C8();
      a11 = (void *)sub_18AF3F3B4();
      a12 = sub_18AF16B9C();
      a17 = (void *)a12;
      *(_DWORD *)uint64_t v40 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      uint64_t v41 = sub_18AF40CEC();
      unint64_t v43 = v42;
      swift_release();
      *(void *)(v30 + 152) = sub_18AF4095C(v41, v43, (uint64_t *)&a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2112;
      if (v37)
      {
        *(void *)(v30 + 120) = v37;
        id v44 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        *a14 = 0;
        sub_18AF4045C();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v35 = 0;
      }
      *a11 = v35;

      _os_log_impl(&dword_18AF10000, v38, v39, "%s received database notification (zone=%@", (uint8_t *)v40, 0x16u);
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    objc_msgSend(*(id *)(*(void *)(*(void *)(v30 + 184) + 128) + 16), sel_setNeedsToFetchDatabaseChanges_, 1);
    if (v37)
    {
      sub_18AF161EC(&qword_1E91255B8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18B1F1B30;
      *(void *)(inited + 32) = v37;
      a17 = (void *)inited;
      specialized Array._endMutation()();
      v62._rawValue = a17;
      id v63 = v37;
      CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(1, v62);
      swift_bridgeObjectRelease();
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
      uint64_t v64 = MEMORY[0x1E4FBC860];
      uint64_t v65 = Dictionary.init(dictionaryLiteral:)();
      *(void *)(v30 + 224) = v65;
      type metadata accessor for SyncEngine();
      id v66 = static SyncEngine.defaultOperationGroup()();
      *(void *)(v30 + 232) = v66;
      id v67 = v66;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_18AF35BFC(v67);
      uint64_t v70 = v69;
      if (v69 && (sub_18AF3A88C(), (sub_18AF35EF4() & 1) == 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        a17 = 0;
        LOBYTE(a18) = 2;
        uint64_t v71 = sub_18AF36168((uint64_t)&a17, v68, v70);
        uint64_t v73 = v72;
        swift_bridgeObjectRelease();
        sub_18AF36054(v71, v73, v67);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v80 = swift_allocObject();
      *(void *)(v30 + 240) = v80;
      *(unsigned char *)(v80 + 16) = 0;
      *(_DWORD *)(v80 + 17) = *(_DWORD *)(v30 + 271);
      *(_DWORD *)(v80 + 20) = *(_DWORD *)(v30 + 274);
      *(void *)(v80 + 24) = 0;
      *(unsigned char *)(v80 + 32) = 2;
      *(_DWORD *)(v80 + 33) = *(_DWORD *)(v30 + 264);
      *(_DWORD *)(v80 + 36) = *(_DWORD *)(v30 + 267);
      *(void *)(v80 + 40) = v67;
      *(void *)(v80 + 48) = v64;
      *(void *)(v80 + 56) = v65;
      *(unsigned char *)(v80 + 64) = 1;
      int v81 = *(_DWORD *)(v30 + 73);
      *(_DWORD *)(v80 + 68) = *(_DWORD *)(v30 + 76);
      *(_DWORD *)(v80 + 65) = v81;
      *(void *)(v80 + 72) = 0;
      *(unsigned char *)(v80 + 80) = 0;
      *(void *)(v80 + 88) = v98;
      id v82 = v67;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v83 = (void *)swift_task_alloc();
      *(void *)(v30 + 248) = v83;
      *uint64_t v83 = v30;
      v83[1] = sub_18AFE3D68;
      sub_18AF47438();
      return v87(v84, v85, v86, v87, v88, v89, v90, v91, a9, a10, a11, a12, a13, a14, a15, v98, a17, a18, a19,
               a20,
               a21,
               a22);
    }
    else
    {
      swift_retain_n();
      unint64_t v74 = (void *)Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.info.getter();
      if (sub_18AF3A2EC(v75))
      {
        uint64_t v76 = (_DWORD *)sub_18AF2A5F0();
        a17 = (void *)sub_18AF16B9C();
        *uint64_t v76 = 136315138;
        if ((sub_18AF33AE8() & 1) == 0) {
          sub_18AFFD5A0();
        }
        swift_retain();
        sub_18AF40CEC();
        uint64_t v77 = sub_18AF41328();
        *(void *)(v30 + 136) = sub_18AFFC4A4(v77, v78, (uint64_t *)&a17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_18AF38FA4();
        swift_bridgeObjectRelease();
        sub_18AFFBB34(&dword_18AF10000, v79, v39, "%s scheduling sync after push notification");
        sub_18AF19F48();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {

        sub_18AF38FA4();
      }
      uint64_t v92 = *(void *)(v30 + 192);
      uint64_t v93 = type metadata accessor for Date();
      sub_18AF1826C(v92, v94, v95, v93);
      uint64_t v96 = (void *)swift_task_alloc();
      *(void *)(v30 + 256) = v96;
      *uint64_t v96 = v30;
      v96[1] = sub_18AFE4388;
      sub_18AF41784(*(void *)(v30 + 192));
      sub_18AF47438();
      return sub_18AF2932C();
    }
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_18AF41270(v45, (uint64_t)qword_1E91253B0);
    uint64_t v46 = (void *)Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (sub_18AF3A2EC(v47))
    {
      a15 = v30 + 128;
      id v48 = (_DWORD *)sub_18AF2A5F0();
      a17 = (void *)sub_18AF16B9C();
      *id v48 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v49 = sub_18AF41328();
      *(void *)(v30 + 128) = sub_18AFFC4A4(v49, v50, (uint64_t *)&a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB34(&dword_18AF10000, v51, v31, "%s not processing database notification for deallocated engine");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    swift_task_dealloc();
    sub_18AF47438();
    return v53(v52, v53, v54, v55, v56, v57, v58, v59, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
}

uint64_t sub_18AFE3D68()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFE3E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v29;
  a26 = v30;
  sub_18AF41388();
  a24 = v26;
  a15 = *MEMORY[0x1E4F143B8];
  if (!v26[4])
  {
    uint64_t v32 = (void *)v26[29];
    uint64_t v33 = (void *)v26[26];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  unint64_t v31 = v26[2];
  uint64_t v27 = v26[8];
  if (!v26[3])
  {
    sub_18AFFCB44();
    LODWORD(a12) = sub_18AFC128C((uint64_t)v28, v31);
    sub_18AFFBC24();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (a12) {
      goto LABEL_8;
    }
LABEL_13:
    swift_retain_n();
    id v44 = (void *)Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (sub_18AF3A2EC(v45))
    {
      uint64_t v46 = (_DWORD *)sub_18AF2A5F0();
      a14 = sub_18AF16B9C();
      *uint64_t v46 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFD5A0();
      }
      sub_18AFFBDD8();
      sub_18AF40CEC();
      uint64_t v47 = sub_18AF37A48();
      v26[17] = sub_18AF403F4(v47, v48, &a14);
      sub_18AFFD27C();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB34(&dword_18AF10000, v49, (os_log_type_t)v27, "%s scheduling sync after push notification");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    uint64_t v50 = v26[24];
    uint64_t v51 = type metadata accessor for Date();
    sub_18AF1826C(v50, v52, v53, v51);
    uint64_t v54 = (void *)swift_task_alloc();
    v26[32] = v54;
    *uint64_t v54 = v26;
    v54[1] = sub_18AFE4388;
    sub_18AF41784(v26[24]);
    sub_18AF41060();
    return sub_18AF2932C();
  }
  if (v26[3] != 1)
  {
    id v66 = (void *)v26[29];
    unint64_t v43 = (void *)v26[26];
    sub_18AFFBC24();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_18AFFCB44();
  LODWORD(a12) = sub_18AFC128C((uint64_t)v28, v31);
  sub_18AFFBC24();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (a12) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v34 = (void *)v26[26];
  swift_retain_n();
  id v35 = v34;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (sub_18AF32640(v37))
  {
    a10 = v26 + 20;
    uint64_t v38 = sub_18AF402C8();
    a11 = (void *)sub_18AF3F3B4();
    a13 = (void *)sub_18AF16B9C();
    a14 = (uint64_t)a13;
    *(_DWORD *)uint64_t v38 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    os_log_type_t v39 = (void *)v26[26];
    a12 = v26[25];
    swift_retain();
    sub_18AF40CEC();
    uint64_t v40 = sub_18AF41328();
    v26[20] = sub_18AF41370(v40, v41, &a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2112;
    v26[21] = v39;
    id v42 = v39;
    sub_18AFFDBB0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a11 = v39;

    _os_log_impl(&dword_18AF10000, v36, v37, "%s not scheduling sync after push notification because we were told not to for zone %@", (uint8_t *)v38, 0x16u);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF3F3CC();
    sub_18AF388F8();
    sub_18AF388F8();

    swift_release();
  }
  else
  {
    uint64_t v57 = (void *)v26[26];

    sub_18AFFBC0C();
    swift_release();
  }
  swift_task_dealloc();
  sub_18AF16D48();
  sub_18AF41060();
  return v59(v58, v59, v60, v61, v62, v63, v64, v65, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_18AFE4388()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_18AF401EC(v2, &qword_1E9125470);
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AFE44BC()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 208);
  sub_18AFECE5C();
  swift_release();

  swift_task_dealloc();
  sub_18AF1F19C();
  return v2();
}

uint64_t sub_18AFE455C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 160) = a3;
  *(void *)(v4 + 168) = a4;
  *(void *)(v4 + 152) = a1;
  *(_OWORD *)(v4 + 176) = *a2;
  return MEMORY[0x1F4188298](sub_18AFE4588, 0, 0);
}

uint64_t sub_18AFE4588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF33DF8();
  sub_18AF338B4();
  if (v11[22])
  {
    sub_18AFFCF1C();
    sub_18AFFD6A0(v10);
    uint64_t v33 = *(void *)(v12 + 24) + **(int **)(v12 + 24);
    id v13 = (void *)swift_task_alloc();
    v11[24] = v13;
    void *v13 = v11;
    v13[1] = sub_18AFE46CC;
    sub_18AFFC710();
    sub_18AF33C3C();
    return v20(v14, v15, v16, v17, v18, v19, v20, v21, v33, v12 + 24);
  }
  else
  {
    uint64_t v23 = (_OWORD *)v11[19];
    v23[1] = 0u;
    v23[2] = 0u;
    *uint64_t v23 = 0u;
    uint64_t v24 = v11[19];
    *(void *)(v24 + 48) = 0;
    *(unsigned char *)(v24 + 56) = 0;
    sub_18AF16D48();
    sub_18AF33C3C();
    return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
  }
}

uint64_t sub_18AFE46CC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFE4794()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  char v6 = *(unsigned char *)(v0 + 144);
  long long v7 = *(_OWORD *)(v0 + 104);
  *(void *)uint64_t v1 = *(void *)(v0 + 88);
  *(void *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = v7;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v4;
  uint64_t v8 = *(void *)(v0 + 152);
  *(void *)(v8 + 48) = v5;
  *(unsigned char *)(v8 + 56) = v6;
  return sub_18AF18514();
}

uint64_t sub_18AFE47D0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18660((uint64_t)sub_18AF4D1D0, v1);
}

uint64_t sub_18AFE47EC()
{
  sub_18AF339B8();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AFE484C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x1F4188298](sub_18AF4CFD0, 0, 0);
}

uint64_t sub_18AFE4870()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 528) = *(void *)(v3 + 48);
  sub_18AF26744();
  uint64_t v5 = *(void *)(v4 + 432);
  if (v6) {
    long long v7 = sub_18AFE54E8;
  }
  else {
    long long v7 = sub_18AFE4960;
  }
  return MEMORY[0x1F4188298](v7, v5, 0);
}

uint64_t sub_18AFE4960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v23;
  a22 = v24;
  sub_18AF18F44();
  a20 = v22;

  sub_18AF3207C();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  uint64_t v27 = &unk_18B1F0000;
  if (sub_18AF42D04(v26))
  {
    uint64_t v28 = (_DWORD *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFC4CC();
    *uint64_t v28 = 136315138;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    swift_retain();
    sub_18AF40CEC();
    uint64_t v29 = sub_18AF37A48();
    *(void *)(v22 + 408) = sub_18AF403F4(v29, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    sub_18AFFBB1C(&dword_18AF10000, v25, v26, "%s saved subscription");
    sub_18AF351C4();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v27 = (void *)&unk_18B1F0000;
  }
  else
  {

    sub_18AF38FA4();
  }
  uint64_t v31 = *(void **)(*(void *)(v22 + 488) + 16);
  objc_msgSend(v31, sel_setNeedsToSaveDatabaseSubscription_, 0);
  if ((objc_msgSend(v31, sel_needsToFetchDatabaseChanges) & 1) == 0)
  {
    sub_18AFFCD60();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04(v33))
    {
      uint64_t v34 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC4CC();
      *uint64_t v34 = v27[62];
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFC0F4();
      sub_18AF40CEC();
      uint64_t v35 = sub_18AF1FFE8();
      *(void *)(v22 + 400) = sub_18AF476A0(v35, v36, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB1C(&dword_18AF10000, v32, v33, "%s scheduling fetch changes after saving subscription");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    objc_msgSend(*(id *)(*(void *)(v22 + 488) + 16), sel_setNeedsToFetchDatabaseChanges_, 1);
    sub_18AFE8EA0();
  }
  uint64_t v38 = *(void *)(v22 + 448);
  uint64_t v37 = *(void *)(v22 + 456);
  uint64_t v39 = *(void *)(v22 + 440);
  uint64_t v40 = *(void **)(v22 + 424);
  *(void *)(v22 + 80) = v22;
  *(void *)(v22 + 120) = v22 + 336;
  *(void *)(v22 + 88) = sub_18AFE4CF4;
  sub_18AF3A644();
  *(void *)(v22 + 328) = v39;
  uint64_t v41 = sub_18AF3A5E0((uint64_t *)(v22 + 304));
  sub_18AF161EC(&qword_1E9125058);
  sub_18AF3A5D4();
  sub_18AF9ED18();
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v38 + 32))(v41, v37, v39);
  *(void *)(v22 + 272) = MEMORY[0x1E4F143A8];
  *(void *)(v22 + 280) = 1107296256;
  *(void *)(v22 + 288) = sub_18AFE5928;
  *(void *)(v22 + 296) = &unk_1ED7F4F60;
  objc_msgSend(v40, sel_fetchAllSubscriptionsWithCompletionHandler_, v22 + 272);
  sub_18AF2ACD0();
  return MEMORY[0x1F41881E8](v42);
}

uint64_t sub_18AFE4CF4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 536) = *(void *)(v3 + 112);
  sub_18AF26744();
  uint64_t v5 = *(void *)(v4 + 432);
  if (v6) {
    long long v7 = sub_18AFE570C;
  }
  else {
    long long v7 = sub_18AFE4DE4;
  }
  return MEMORY[0x1F4188298](v7, v5, 0);
}

uint64_t sub_18AFE4DE4()
{
  uint64_t v66 = v2;
  uint64_t v7 = *(void *)(v2 + 336);
  unint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v65 = MEMORY[0x1E4FBC860];
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v0 = (uint64_t *)v7;
    }
    else {
      uint64_t v0 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AF42FE8();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      if (v1 < 1)
      {
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v9 = 0;
      unint64_t v6 = v7 & 0xC000000000000001;
      do
      {
        if (v6) {
          id v10 = (id)MEMORY[0x18C1298C0](v9, v7);
        }
        else {
          id v10 = *(id *)(v7 + 8 * v9 + 32);
        }
        uint64_t v4 = v10;
        if (objc_msgSend(v10, sel_subscriptionType) == (id)3)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v5 = *(void *)(v65 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v9;
      }
      while (v1 != v9);
      swift_bridgeObjectRelease();
      uint64_t v11 = v65;
      if (v65 < 0) {
        goto LABEL_30;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v1 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v1) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0) {
    goto LABEL_30;
  }
LABEL_19:
  if ((v11 & 0x4000000000000000) != 0)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v3) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)(v11 + 16);
  if (!v3)
  {
LABEL_31:
    swift_release();
    uint64_t v7 = MEMORY[0x1E4FBC860];
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v65 = v8;
  uint64_t v0 = &v65;
  sub_18AF26470();
  if (v3 < 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v64 = v2;
  uint64_t v12 = 0;
  uint64_t v7 = v65;
  do
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v13 = (id)MEMORY[0x18C1298C0](v12, v11);
    }
    else {
      id v13 = *(id *)(v11 + 8 * v12 + 32);
    }
    uint64_t v14 = v13;
    id v15 = objc_msgSend(v13, sel_subscriptionID);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    uint64_t v65 = v7;
    unint64_t v20 = *(void *)(v7 + 16);
    unint64_t v19 = *(void *)(v7 + 24);
    if (v20 >= v19 >> 1)
    {
      sub_18AF34080(v19);
      sub_18AF26470();
      uint64_t v7 = v65;
    }
    ++v12;
    *(void *)(v7 + 16) = v20 + 1;
    uint64_t v21 = v7 + 16 * v20;
    *(void *)(v21 + 32) = v16;
    *(void *)(v21 + 40) = v18;
  }
  while (v3 != v12);
  swift_release();
  uint64_t v2 = v64;
LABEL_32:
  uint64_t v22 = *(void *)(v2 + 432);
  sub_18AF161EC(&qword_1E9125220);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18B1F33C0;
  unint64_t v24 = sub_18AFE2A0C();
  uint64_t v26 = v25;
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v25;
  unint64_t v6 = *(void *)(v22 + 368);
  uint64_t v0 = *(uint64_t **)(v22 + 376);
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18AF33790(0, 1, 1, MEMORY[0x1E4FBC860]);
  uint64_t v3 = v27;
  unint64_t v29 = *(void *)(v27 + 16);
  unint64_t v28 = *(void *)(v27 + 24);
  unint64_t v8 = v29 + 1;
  if (v29 >= v28 >> 1)
  {
    char v57 = sub_18AFFCCB8(v28);
    sub_18AF33790(v57, v58, v59, v60);
    uint64_t v3 = v61;
  }
  *(void *)(v3 + 16) = v8;
  uint64_t v30 = v3 + 16 * v29;
  *(void *)(v30 + 32) = v24;
  *(void *)(v30 + 40) = v26;
  if (v0)
  {
    unint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = (void *)(v29 + 2);
    swift_bridgeObjectRetain();
    if (v8 < v5 >> 1)
    {
LABEL_36:
      *(void *)(v3 + 16) = v4;
      unint64_t v31 = v3 + 16 * v8;
      *(void *)(v31 + 32) = v6;
      *(void *)(v31 + 40) = v0;
      goto LABEL_37;
    }
LABEL_57:
    sub_18AF33790(v5 > 1, (uint64_t)v4, 1, v3);
    uint64_t v3 = v62;
    goto LABEL_36;
  }
LABEL_37:
  swift_release();
  uint64_t v32 = sub_18AFC0D94(v7);
  uint64_t v33 = sub_18AFC0D94(v3);
  uint64_t v34 = sub_18AFE5A08(v33, v32);
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_18AFCA568(v34);
  if (v36)
  {
    uint64_t v37 = v35;
    uint64_t v38 = v36;
    uint64_t v39 = &property descriptor for CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration;
    if (*(void *)(v34 + 16) <= 1uLL)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_18AFFCD60();
      swift_bridgeObjectRetain();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.fault.getter();
      if (sub_18AF41108(v41))
      {
        uint64_t v42 = sub_18AF402C8();
        uint64_t v65 = sub_18AF182D8();
        *(_DWORD *)uint64_t v42 = 136315394;
        if ((sub_18AF33AE8() & 1) == 0)
        {
          sub_18AF30C68();
          swift_task_reportUnexpectedExecutor();
        }
        swift_retain();
        sub_18AF40CEC();
        uint64_t v43 = sub_18AF3DDC4();
        *(void *)(v2 + 384) = sub_18AF3DDAC(v43, v44, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_18AF38FA4();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v45 = Set.description.getter();
        uint64_t v3 = v46;
        swift_bridgeObjectRelease();
        *(void *)(v2 + 392) = sub_18AF4095C(v45, v3, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_18AF474AC();
        swift_bridgeObjectRelease();
        sub_18AF41358(&dword_18AF10000, v40, v41, "%s found more than one existing database subscription: %s");
        sub_18AF41310();
        sub_18AF388F8();
        sub_18AF388F8();

        uint64_t v39 = (void *)&property descriptor for CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration;
      }
      else
      {

        sub_18AF474AC();
        sub_18AF38FA4();
      }
    }
    sub_18AFFCD60();
    sub_18AF3E5E4();
    uint64_t v48 = (void *)Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (sub_18AF3DD94(v49))
    {
      uint64_t v63 = v37;
      uint64_t v50 = (_DWORD *)sub_18AF402C8();
      uint64_t v65 = sub_18AF182D8();
      *uint64_t v50 = v39[130];
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      uint64_t v51 = sub_18AF40CEC();
      sub_18AF3F510();
      *(void *)(v2 + 368) = sub_18AF4095C(v51, v3, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AF31C08();
      uint64_t v52 = swift_bridgeObjectRetain();
      uint64_t v37 = v63;
      *(void *)(v2 + 376) = sub_18AFFD8D8(v52, v53, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_18AFFC25C(&dword_18AF10000, v54, v49, "%s found an untracked existing database subscription: %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF307A4();
      sub_18AF38FA4();
    }
    uint64_t v47 = *(void **)(v2 + 496);
    CKSyncEngine.State.existingDatabaseSubscriptionID.setter(v37, v38);
    sub_18AFE2AC0();
  }
  else
  {
    uint64_t v47 = *(void **)(v2 + 496);
    swift_bridgeObjectRelease();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF384DC();
  return v55();
}

uint64_t sub_18AFE54E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v29;
  a26 = v30;
  sub_18AF41388();
  a24 = v26;
  swift_willThrow();
  unint64_t v31 = *(void **)(v26 + 528);
  id v32 = v31;
  uint64_t v33 = (void *)related decl 'e' for CKErrorCode.init(_:)(v31);
  sub_18AF3207C();
  id v34 = v33;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (sub_18AF4179C(v36))
  {
    a10 = v31;
    a11 = v26 + 344;
    a9 = v26 + 360;
    uint64_t v37 = sub_18AF402C8();
    a12 = (void *)sub_18AF3F3B4();
    a13 = sub_18AF16B9C();
    a14 = a13;
    *(_DWORD *)uint64_t v37 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0) {
      sub_18AFFD5E0();
    }
    swift_retain();
    sub_18AF40CEC();
    uint64_t v38 = sub_18AF41328();
    *(void *)(v26 + 352) = sub_18AFFC4A4(v38, v39, &a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2112;
    id v27 = v34;
    uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
    sub_18AFFCA9C(v40);
    *a12 = v28;

    sub_18AF2F014(&dword_18AF10000, v35, v36, "%s error saving subscriptions: %@");
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF38FA4();
  }
  id v41 = sub_18AFFDA90();
  sub_18AF42F68(v34);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AFFD26C();
  sub_18AF41060();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_18AFE570C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v29;
  a26 = v30;
  sub_18AF41388();
  a24 = v26;
  swift_willThrow();
  unint64_t v31 = *(void **)(v26 + 536);
  id v32 = v31;
  uint64_t v33 = (void *)related decl 'e' for CKErrorCode.init(_:)(v31);
  sub_18AF3207C();
  id v34 = v33;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (sub_18AF4179C(v36))
  {
    a10 = v31;
    a11 = v26 + 344;
    uint64_t v37 = sub_18AF402C8();
    a12 = (void *)sub_18AF3F3B4();
    a13 = sub_18AF16B9C();
    a14 = a13;
    *(_DWORD *)uint64_t v37 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0) {
      sub_18AFFD5E0();
    }
    swift_retain();
    sub_18AF40CEC();
    uint64_t v38 = sub_18AF41328();
    *(void *)(v26 + 352) = sub_18AFFC4A4(v38, v39, &a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2112;
    id v27 = v34;
    uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
    sub_18AFFCA9C(v40);
    *a12 = v28;

    sub_18AF2F014(&dword_18AF10000, v35, v36, "%s error saving subscriptions: %@");
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF38FA4();
  }
  id v41 = sub_18AFFDA90();
  sub_18AF42F68(v34);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AFFD26C();
  sub_18AF41060();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_18AFE5928(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v6 = a3;
    sub_18AF26010((uint64_t)v4, (uint64_t)v6, &qword_1E9125168, MEMORY[0x1E4FBCF38]);
  }
  else
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1E9125620);
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AFCA2E8((uint64_t)v4, v5, &qword_1E9125168);
  }
}

uint64_t sub_18AFE5A08(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_18AF6FD40();
    return a2;
  }
  else
  {
    return sub_18AFF6F5C(a1, a2);
  }
}

uint64_t sub_18AFE5A6C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if ((a1 & 0xC000000000000001) == 0) {
    return *(void *)(a1 + 16);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return a2(a1);
}

uint64_t sub_18AFE5A90()
{
  return sub_18AFE5B90();
}

uint64_t sub_18AFE5A9C()
{
  return sub_18AFE5BE8();
}

uint64_t (*sub_18AFE5AA8())()
{
  return j_j__swift_endAccess_0;
}

uint64_t sub_18AFE5AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v8 = sub_18AF19284(v7);
  MEMORY[0x1F4188790](v8);
  sub_18AF38FBC();
  uint64_t v9 = sub_18AF31160();
  sub_18AF402EC(v9, v10, &qword_1E9125470);
  return a5(v5);
}

uint64_t sub_18AFE5B84()
{
  return sub_18AFE5B90();
}

uint64_t sub_18AFE5B90()
{
  sub_18AF18528();
  uint64_t v0 = sub_18AF3563C();
  return sub_18AF402EC(v0, v1, v2);
}

uint64_t sub_18AFE5BDC()
{
  return sub_18AFE5BE8();
}

uint64_t sub_18AFE5BE8()
{
  sub_18AF41158();
  uint64_t v0 = sub_18AF40F8C();
  sub_18AFFB674(v0, v1, v2);
  return swift_endAccess();
}

uint64_t (*sub_18AFE5C3C())()
{
  return j_j__swift_endAccess_0;
}

uint64_t SyncEngine.activityNameSuffix.getter()
{
  return sub_18AF40F8C();
}

void sub_18AFE5CC0()
{
}

void sub_18AFE5CF8()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for UUID();
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v4);
  sub_18AF19290();
  id v5 = objc_msgSend(v3, sel_container);
  if (v5)
  {
    id v6 = v5;
    id v7 = objc_msgSend(v5, sel_containerID);
    id v8 = objc_msgSend(v7, sel_containerIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v9._uint64_t countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    uint64_t v10 = CKContainerEnvironmentString((uint64_t)objc_msgSend(v7, sel_environment));
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v13 = v12;

    v14._uint64_t countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 46;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    uint64_t v16 = CKDatabaseScopeString((unint64_t)objc_msgSend(v3, sel_databaseScope));
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 46;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = sub_18AFFDB0C();
    String.append(_:)(v22);
    id v23 = objc_msgSend(v6, sel_options);
    id v24 = objc_msgSend(v23, sel_accountOverrideInfo);

    if (v24)
    {
      v25._uint64_t countAndFlagsBits = sub_18AFF76C8(v24, (SEL *)&selRef_email);
      if (v25._object)
      {
        sub_18AFFC2FC(v25);
        swift_bridgeObjectRelease();
        sub_18AFFD0E8();
        swift_bridgeObjectRelease();
      }
      v26._uint64_t countAndFlagsBits = sub_18AFF76C8(v24, (SEL *)&selRef_accountID);
      if (v26._object)
      {
        sub_18AFFC2FC(v26);
        swift_bridgeObjectRelease();
        sub_18AFFD0E8();
        swift_bridgeObjectRelease();
      }
      v27._uint64_t countAndFlagsBits = sub_18AFF76C8(v24, (SEL *)&selRef_altDSID);
      if (v27._object)
      {
        sub_18AFFC2FC(v27);
        swift_bridgeObjectRelease();
        sub_18AFFD0E8();
        swift_bridgeObjectRelease();
      }
    }
    if (v1)
    {
      v28._uint64_t countAndFlagsBits = sub_18AF311C8();
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = 46;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_18AF412A0(v30, (uint64_t)qword_1E91253B0);
    id v31 = v3;
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = (_DWORD *)sub_18AF2A5F0();
      uint64_t v38 = (void *)sub_18AF3F3B4();
      *id v34 = 138412290;
      id v35 = v31;
      sub_18AFFC438();
      *uint64_t v38 = v31;

      sub_18AFFBB50(&dword_18AF10000, v32, v33, "No container when trying to get activity identifier for database %@");
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
    }
    UUID.init()();
    UUID.uuidString.getter();
    sub_18AFFD984();
    uint64_t v36 = sub_18AF41790();
    v37(v36);
  }
  sub_18AF40F8C();
  sub_18AF32064();
}

void sub_18AFE6118()
{
}

void sub_18AFE6150()
{
  sub_18AF1855C();
  char v3 = v2;
  uint64_t v4 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v5 = sub_18AF19284(v4);
  MEMORY[0x1F4188790](v5);
  sub_18AF2A53C();
  id v6 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_isAutomaticSyncEnabledLock);
  v20[16] = v3;
  id v7 = v6 + 4;
  id v8 = v6 + 5;
  os_unfair_lock_lock(v6 + 5);
  Swift::String v9 = (uint64_t *)v20;
  sub_18AFF7820(v7);
  os_unfair_lock_unlock(v8);
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_18AF35568(v10, (uint64_t)qword_1E91253B0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = sub_18AF16B9C();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_retain();
    sub_18AF40CEC();
    uint64_t v14 = swift_release();
    uint64_t v21 = sub_18AFFDC10(v14, v15, &v22);
    Swift::String v9 = &v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF35674();
    *(_WORD *)(v13 + 12) = 1024;
    LODWORD(v21) = v3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_18AF10000, v11, v12, "%s setting automaticallySync=%{BOOL}d", (uint8_t *)v13, 0x12u);
    sub_18AF40468();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF35674();
  }

  uint64_t v16 = type metadata accessor for TaskPriority();
  sub_18AF1826C(v1, v17, v18, v16);
  unint64_t v19 = (void *)sub_18AF3488C();
  sub_18AFFDC94(v19);
  sub_18AF42DB4(v1, (uint64_t)&unk_1E9126E38, (uint64_t)v9);
  swift_release();
  sub_18AF32064();
}

uint64_t sub_18AFE6394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](sub_18AFE63B4, a4, 0);
}

uint64_t sub_18AFE63B4()
{
  sub_18AF339B8();
  sub_18AFE2AC0();
  sub_18AF16D48();
  return v0();
}

void (*sub_18AFE640C(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_18AF38A9C() & 1;
  return sub_18AFE6458;
}

void sub_18AFE6458()
{
}

uint64_t sub_18AFE6480()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_18AFE64C4(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_18AF299F4();
  v2[4] = v3;
  return sub_18AF18660((uint64_t)sub_18AFE64F0, v4);
}

uint64_t sub_18AFE64F0()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 16);
  sub_18AFFD720();
  id v2 = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_18AF1D998(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_18AFE65AC;
  uint64_t v6 = sub_18AF41784((uint64_t)"engine/sync");
  return v8(v6, 11, 2);
}

uint64_t sub_18AFE65AC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_18AFFD2C8();
  return v4(v3);
}

uint64_t sub_18AFE6670()
{
  sub_18AF339B8();
  v0[21] = v1;
  v0[22] = v2;
  v0[19] = v3;
  v0[20] = v4;
  uint64_t v5 = sub_18AF161EC(&qword_1E9125478);
  sub_18AF19284(v5);
  v0[23] = sub_18AF2F1C8();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v0[24] = v6;
  sub_18AF16DF8(v6);
  v0[25] = v7;
  v0[26] = sub_18AF2F1C8();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

uint64_t sub_18AFE6724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_18AF30750();
  sub_18AF18F44();
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  v14[27] = sub_18AF412A0(v16, (uint64_t)qword_1E91253B0);
  sub_18AF3098C();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (sub_18AFFBD40(v18))
  {
    a10 = v14 + 18;
    sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFC120();
    sub_18AFFC6B4(4.8149e-34);
    sub_18AF40CEC();
    uint64_t v19 = sub_18AF404A0();
    v14[18] = sub_18AFFC278(v19, v20);
    sub_18AFFC438();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB50(&dword_18AF10000, v17, v15, "%s will perform scheduled sync");
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF38FA4();
  }

  ContinuousClock.init()();
  uint64_t v21 = (void *)sub_18AFFD6EC();
  v14[28] = v21;
  *uint64_t v21 = v14;
  v21[1] = sub_18AFE68DC;
  sub_18AFFD760();
  sub_18AF2ACD0();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_18AFE68DC()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33DE0();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_18AF26B24();
  if (v0) {

  }
  uint64_t v4 = sub_18AFFBD5C();
  v5(v4);
  sub_18AF16AA0();
  sub_18AF37AC0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AFE6A14()
{
  sub_18AF339B8();
  id v1 = static SyncEngine.defaultOperationGroup()();
  *(void *)(v0 + 232) = v1;
  sub_18AF36054(0xD00000000000001BLL, 0x800000018B1D4D00, v1);
  id v2 = objc_msgSend(v1, sel_defaultConfiguration);
  if (v2)
  {
    uint64_t v5 = v2;
    objc_msgSend(v2, sel_setSchedulerActivity_, *(void *)(v0 + 168));

    sub_18AF309A4();
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F4188298](v2, v3, v4);
}

uint64_t sub_18AFE6AD0()
{
  sub_18AF339B8();
  sub_18AF36AF4(*(void **)(v0 + 232));
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_18AFE6B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  sub_18AFFC508();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (sub_18AFFBD40(v27))
  {
    uint64_t v28 = (_DWORD *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFD130();
    *uint64_t v28 = 136315138;
    sub_18AFFBDD8();
    sub_18AF40CEC();
    uint64_t v29 = sub_18AF37A48();
    *(void *)(v22 + 136) = sub_18AF403F4(v29, v30, &a10);
    sub_18AFFC134();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB50(&dword_18AF10000, v26, v23, "%s performing scheduled sync");
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    swift_release_n();
  }

  id v31 = *(void **)(v22 + 232);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  id v32 = v31;
  uint64_t v33 = MEMORY[0x1E4FBC860];
  sub_18AF36520();
  uint64_t v34 = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v22 + 240) = v34;
  id v35 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_18AF35BFC(v35);
  uint64_t v38 = v37;
  if (v37 && (sub_18AFFBB68() & 1) == 0)
  {
    uint64_t v39 = *(void **)(v22 + 232);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void **)(v22 + 232);
    type metadata accessor for SyncEngine();
    a10 = 0;
    a11 = 2;
    sub_18AF36168((uint64_t)&a10, v36, v38);
    sub_18AFFD114();
    sub_18AFFD2AC();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void **)(v22 + 232);
  *(unsigned char *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(unsigned char *)(v22 + 32) = 2;
  *(void *)(v22 + 40) = v40;
  *(void *)(v22 + 48) = v33;
  *(void *)(v22 + 56) = v34;
  *(unsigned char *)(v22 + 64) = 1;
  *(void *)(v22 + 72) = 0;
  *(unsigned char *)(v22 + 80) = 0;
  id v41 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v22 + 248) = v42;
  *uint64_t v42 = v22;
  v42[1] = sub_18AFE6DCC;
  sub_18AF2EFEC();
  sub_18AF2ACD0();
  return sub_18AF1E814();
}

uint64_t sub_18AFE6DCC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  void *v5 = v4;
  *(void *)(v6 + 256) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFE6EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  uint64_t v26 = *(void **)(v22 + 232);
  sub_18AFFC4E4();

  swift_bridgeObjectRelease_n();
  sub_18AF32614();
  sub_18AFFC508();
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (sub_18AFFBD40(v28))
  {
    uint64_t v29 = (_DWORD *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFD130();
    *uint64_t v29 = 136315138;
    sub_18AFFBDD8();
    sub_18AF40CEC();
    uint64_t v30 = sub_18AF37A48();
    *(void *)(v22 + 128) = sub_18AF403F4(v30, v31, &a10);
    sub_18AFFC134();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB50(&dword_18AF10000, v27, v23, "%s finished fetching changes during sync, now sending changes");
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    swift_release_n();
  }

  sub_18AF35BFC(*(id *)(v22 + 232));
  if (v32 && (sub_18AFFC1A8() & 1) == 0)
  {
    uint64_t v33 = *(void **)(v22 + 232);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = *(void **)(v22 + 232);
    type metadata accessor for SyncEngine();
    a10 = 0;
    a11 = 3;
    sub_18AF362E8();
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    sub_18AF36054(v35, v37, v33);
  }

  swift_bridgeObjectRelease();
  sub_18AFFC894();
  id v39 = v38;
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v22 + 264) = v40;
  *uint64_t v40 = v22;
  v40[1] = sub_18AFE70B4;
  sub_18AF2EFEC();
  sub_18AF2ACD0();
  return sub_18AF1B74C(v41);
}

uint64_t sub_18AFE70B4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  void *v5 = v4;
  *(void *)(v6 + 272) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFE7190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_18AF30750();
  sub_18AF18F44();
  uint64_t v16 = *(void **)(v15 + 232);
  sub_18AFFC4E4();

  sub_18AFFCC50(1);
  if (v16)
  {
    uint64_t v17 = sub_18AF33890();
    sub_18AFFD0A4(v17);
    sub_18AFFC0A0();
    os_log_type_t v18 = (void *)swift_task_alloc();
    *(void *)(v15 + 296) = v18;
    *os_log_type_t v18 = v15;
    v18[1] = sub_18AFE7384;
    sub_18AFFD9EC();
    sub_18AF2ACD0();
    return v21(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    swift_retain_n();
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (sub_18AFFCBE0(v29))
    {
      a9 = v15 + 120;
      a10 = *(void **)(v15 + 232);
      uint64_t v30 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC120();
      *uint64_t v30 = 136315138;
      sub_18AFFC0F4();
      sub_18AF40CEC();
      uint64_t v31 = sub_18AF404A0();
      *(void *)(v15 + 120) = sub_18AFFC278(v31, v32);
      sub_18AFFC438();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB1C(&dword_18AF10000, v28, v14, "%s finished performing scheduled sync");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    sub_18AFFBC70();
    swift_task_dealloc();
    sub_18AF384DC();
    sub_18AF2ACD0();
    return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AFE7384()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFE7468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  sub_18AFFC508();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (sub_18AFFBD40(v27))
  {
    a10 = *(void **)(v22 + 232);
    os_log_type_t v28 = (_DWORD *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFC120();
    *os_log_type_t v28 = 136315138;
    sub_18AFFBDD8();
    sub_18AF40CEC();
    uint64_t v29 = sub_18AF37A48();
    *(void *)(v22 + 120) = sub_18AF403F4(v29, v30, &a11);
    sub_18AFFC134();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB50(&dword_18AF10000, v26, v23, "%s finished performing scheduled sync");
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF38FA4();
  }
  sub_18AFFBC70();
  swift_task_dealloc();
  sub_18AF384DC();
  sub_18AF2ACD0();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_18AFE759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v28;
  a26 = v29;
  sub_18AF41388();
  a24 = v26;
  uint64_t v30 = *(void **)(v26 + 232);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  sub_18AFFC4E4();
  uint64_t v31 = (void *)_convertErrorToNSError(_:)();
  char ShouldDefer = CKErrorShouldDefer(v31);

  if (ShouldDefer)
  {
    swift_willThrow();
    uint64_t v33 = *(void **)(v26 + 256);
    uint64_t v34 = *(void *)(v26 + 184);
    id v35 = v33;
    id v36 = v33;
    uint64_t v37 = (void *)related decl 'e' for CKErrorCode.init(_:)(v33);
    uint64_t v38 = type metadata accessor for TaskPriority();
    sub_18AF1826C(v34, v39, v40, v38);
    uint64_t v41 = (void *)sub_18AF31268();
    sub_18AFFDA24(v41);
    id v42 = v37;
    sub_18AF42DB4(v34, (uint64_t)&unk_1E9127300, v27);
    swift_release();
    id v43 = v42;
    uint64_t v44 = (void *)_convertErrorToNSError(_:)();

    LODWORD(v37) = CKErrorShouldDefer(v44);
    if (v37) {
      uint64_t v45 = 2;
    }
    else {
      uint64_t v45 = 1;
    }
    sub_18AFFCC50(v45);
    if (v33)
    {
      uint64_t v46 = *(void **)(v26 + 168);
      uint64_t v47 = sub_18AF33890();
      sub_18AFFD0A4(v47);
      uint64_t v90 = (char *)&dword_1E9127028 + dword_1E9127028;
      id v48 = v46;
      uint64_t v49 = (void *)swift_task_alloc();
      *(void *)(v26 + 296) = v49;
      *uint64_t v49 = v26;
      v49[1] = sub_18AFE7384;
      sub_18AF41060();
      return v52(v50, v51, v52, v53, v54, v55, v56, v57, a9, a10, a11, v90, a13, a14, a15, a16, a17, a18);
    }
    else
    {
      swift_retain_n();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      BOOL v72 = sub_18AFFC7AC(v71);
      uint64_t v73 = *(void **)(v26 + 232);
      if (v72)
      {
        a11 = *(void **)(v26 + 232);
        unint64_t v74 = (_DWORD *)sub_18AF2A5F0();
        a12 = v26 + 128;
        a13 = sub_18AF16B9C();
        *unint64_t v74 = 136315138;
        a10 = v74 + 1;
        swift_retain();
        sub_18AF40CEC();
        uint64_t v75 = sub_18AF41328();
        *(void *)(v26 + 120) = sub_18AF41370(v75, v76, &a13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_18AF38FA4();
        swift_bridgeObjectRelease();
        sub_18AFFBB1C(&dword_18AF10000, v70, (os_log_type_t)v27, "%s finished performing scheduled sync");
        sub_18AF351C4();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {

        sub_18AF38FA4();
      }
      sub_18AFFBC70();
      swift_task_dealloc();
      sub_18AF384DC();
      sub_18AF41060();
      return v83(v82, v83, v84, v85, v86, v87, v88, v89, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    }
  }
  else
  {

    sub_18AFFC508();
    char v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (sub_18AFFC7AC(v60))
    {
      uint64_t v61 = (_DWORD *)sub_18AF2A5F0();
      a13 = sub_18AF16B9C();
      *uint64_t v61 = 136315138;
      sub_18AFFC0F4();
      sub_18AF40CEC();
      uint64_t v62 = sub_18AFFD1E0();
      *(void *)(v26 + 128) = sub_18AFFD8D8(v62, v63, &a13);
      sub_18AFFC438();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB1C(&dword_18AF10000, v59, (os_log_type_t)v27, "%s finished fetching changes during sync, now sending changes");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    sub_18AF35BFC(*(id *)(v26 + 232));
    if (v64 && (sub_18AFFC1A8() & 1) == 0)
    {
      uint64_t v65 = *(void **)(v26 + 232);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = *(void **)(v26 + 232);
      type metadata accessor for SyncEngine();
      a13 = 0;
      LOBYTE(a14) = 3;
      sub_18AF362E8();
      uint64_t v67 = v66;
      uint64_t v69 = v68;
      swift_bridgeObjectRelease();
      sub_18AF36054(v67, v69, v65);
    }
    swift_bridgeObjectRelease();

    sub_18AFFC894();
    id v78 = v77;
    uint64_t v79 = (void *)swift_task_alloc();
    *(void *)(v26 + 264) = v79;
    *uint64_t v79 = v26;
    v79[1] = sub_18AFE70B4;
    sub_18AF2EFEC();
    sub_18AF41060();
    return sub_18AF1B74C(v80);
  }
}

uint64_t sub_18AFE7A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_18AF30750();
  sub_18AF18F44();
  uint64_t v16 = (void *)v14[29];

  sub_18AFFC4E4();
  uint64_t v17 = (void *)v14[34];
  uint64_t v18 = v14[23];
  id v19 = v17;
  id v20 = v17;
  uint64_t v21 = (void *)related decl 'e' for CKErrorCode.init(_:)(v17);
  uint64_t v22 = type metadata accessor for TaskPriority();
  sub_18AF1826C(v18, v23, v24, v22);
  uint64_t v25 = (void *)sub_18AF31268();
  sub_18AFFDA24(v25);
  id v26 = v21;
  sub_18AF42DB4(v18, (uint64_t)&unk_1E9127300, v15);
  swift_release();
  id v27 = v26;
  uint64_t v28 = (void *)_convertErrorToNSError(_:)();

  LODWORD(v21) = CKErrorShouldDefer(v28);
  if (v21) {
    uint64_t v29 = 2;
  }
  else {
    uint64_t v29 = 1;
  }
  sub_18AFFCC50(v29);
  if (v17)
  {
    uint64_t v30 = sub_18AF33890();
    sub_18AFFD0A4(v30);
    sub_18AFFC0A0();
    uint64_t v31 = (void *)swift_task_alloc();
    v14[37] = v31;
    *uint64_t v31 = v14;
    v31[1] = sub_18AFE7384;
    sub_18AFFD9EC();
    sub_18AF2ACD0();
    return v34(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    swift_retain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    BOOL v43 = sub_18AFFCBE0(v42);
    uint64_t v44 = (void *)v14[29];
    if (v43)
    {
      a9 = v14 + 15;
      a10 = (void *)v14[29];
      uint64_t v45 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC120();
      *uint64_t v45 = 136315138;
      sub_18AFFC0F4();
      sub_18AF40CEC();
      uint64_t v46 = sub_18AF404A0();
      v14[15] = sub_18AFFC278(v46, v47);
      sub_18AFFC438();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB1C(&dword_18AF10000, v41, (os_log_type_t)v28, "%s finished performing scheduled sync");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    sub_18AFFBC70();
    swift_task_dealloc();
    sub_18AF384DC();
    sub_18AF2ACD0();
    return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AFE7D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  void v5[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFE7DF8, 0, 0);
}

uint64_t sub_18AFE7DF8()
{
  sub_18AF339B8();
  ContinuousClock.init()();
  uint64_t v0 = sub_18AF22E4C();
  uint64_t v1 = (void *)sub_18AF3F79C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFE7E9C;
  sub_18AF22E38();
  return v3();
}

uint64_t sub_18AFE7E9C()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v7 = sub_18AF311C8();
    v8(v7);
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v9, v10, v11);
  }
  else
  {
    sub_18AFFC4D8();
    v12();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v3 + 64) = v13;
    void *v13 = v5;
    v13[1] = sub_18AFE80A0;
    sub_18AF2EFEC();
    return sub_18AF2926C();
  }
}

uint64_t sub_18AFE8014()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF22A04(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFE80A0;
  sub_18AF30494();
  return sub_18AF2926C();
}

uint64_t sub_18AFE80A0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AFE817C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  return MEMORY[0x1F4188298](sub_18AFE81A0, 0, 0);
}

uint64_t sub_18AFE81A0()
{
  sub_18AF2A56C();
  sub_18AF402EC(*(void *)(v0 + 64), v0 + 16, &qword_1E9125530);
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = (void *)sub_18AF40DB4();
    sub_18AF25FCC(v4, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v2, v1, v3);
    sub_18AF40A30(v0 + 16);
  }
  else
  {
    sub_18AF401EC(v0 + 16, &qword_1E9125530);
  }
  **(unsigned char **)(v0 + 56) = v1 == 0;
  sub_18AF16D48();
  return v6();
}

uint64_t sub_18AFE827C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_18AF299F4();
  v2[4] = v3;
  return sub_18AF18660((uint64_t)sub_18AFE82A8, v4);
}

uint64_t sub_18AFE82A8()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 16);
  sub_18AFFD720();
  id v2 = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_18AF1D998(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_18AFFBA88;
  uint64_t v6 = sub_18AF41784((uint64_t)"engine/user-requested-backup");
  return v8(v6, 28, 2);
}

uint64_t sub_18AFE8364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  return sub_18AF18660((uint64_t)sub_18AFE8384, 0);
}

id sub_18AFE8384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v28;
  a26 = v29;
  sub_18AF41388();
  a24 = v26;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  *(void *)(v26 + 104) = sub_18AF412A0(v30, (uint64_t)qword_1E91253B0);
  sub_18AF3098C();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (sub_18AFFBD40(v32))
  {
    sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFC120();
    sub_18AFFC6B4(4.8149e-34);
    sub_18AF40CEC();
    uint64_t v33 = sub_18AF404A0();
    *(void *)(v26 + 72) = sub_18AFFC278(v33, v34);
    sub_18AFFC438();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB50(&dword_18AF10000, v31, v27, "%s performing user-requested-backup activity");
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF38FA4();
  }

  a14 = 0;
  a15 = 3;
  CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)((uint64_t)&a14, 0, (uint64_t)&a11);
  uint64_t v35 = a11;
  char v36 = a12;
  uint64_t v37 = a13;
  *(void *)(v26 + 112) = a11;
  *(void *)(v26 + 120) = v37;
  a11 = 0;
  a12 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v38 = sub_18AFFD160();
  sub_18AF36054(v38, v39, v37);
  id result = objc_msgSend(v37, sel_defaultConfiguration);
  if (result)
  {
    uint64_t v41 = result;
    objc_msgSend(result, sel_setSchedulerActivity_, *(void *)(v26 + 96));

    *(unsigned char *)(v26 + 16) = 0;
    *(void *)(v26 + 24) = v35;
    *(unsigned char *)(v26 + 32) = v36;
    *(void *)(v26 + 40) = v37;
    swift_bridgeObjectRetain();
    id v42 = v37;
    uint64_t v43 = swift_task_alloc();
    uint64_t v44 = (void *)sub_18AF3A8D0(v43);
    *uint64_t v44 = v45;
    v44[1] = sub_18AFE85D8;
    sub_18AF41060();
    return (id)sub_18AF1B74C(v46);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AFE85D8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  void *v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFE86B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (sub_18AFFBD40(v27))
  {
    uint64_t v28 = (_DWORD *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFC120();
    *uint64_t v28 = 136315138;
    sub_18AFFBDD8();
    sub_18AF40CEC();
    uint64_t v29 = sub_18AF37A48();
    *(void *)(v22 + 64) = sub_18AF403F4(v29, v30, &a11);
    sub_18AFFC134();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB50(&dword_18AF10000, v26, v23, "%s finished sending changes for user-requested-backup activity");
    sub_18AF19F48();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    swift_release_n();
  }

  *(void *)(v22 + 144) = 1;
  if (*(void *)(*(void *)(v22 + 88) + 168))
  {
    uint64_t v31 = *(void *)(v22 + 96);
    uint64_t v32 = sub_18AF33890();
    *(void *)(v22 + 152) = v32;
    *(void *)(v32 + 16) = v31;
    sub_18AFFC0A0();
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v22 + 160) = v33;
    *uint64_t v33 = v22;
    v33[1] = sub_18AFE88A4;
    sub_18AFFD9EC();
    sub_18AF2ACD0();
    return v36(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v43 = *(void **)(v22 + 120);

    sub_18AF32614();
    **(void **)(v22 + 80) = *(void *)(v22 + 144);
    sub_18AF384DC();
    sub_18AF2ACD0();
    return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AFE88A4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFE8988()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 120);

  sub_18AF32614();
  **(void **)(v0 + 80) = *(void *)(v0 + 144);
  sub_18AF384DC();
  return v2();
}

uint64_t sub_18AFE89F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v23;
  a22 = v24;
  sub_18AF18F44();
  a20 = v22;
  uint64_t v25 = *(void **)(v22 + 136);
  id v26 = v25;
  os_log_type_t v27 = (void *)related decl 'e' for CKErrorCode.init(_:)(v25);
  sub_18AF3207C();
  id v28 = v27;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (_DWORD *)sub_18AF402C8();
    a9 = (void *)sub_18AF3F3B4();
    a10 = sub_18AF16B9C();
    a11 = a10;
    *uint64_t v31 = 136315394;
    swift_retain();
    sub_18AF40CEC();
    uint64_t v32 = sub_18AF37A48();
    *(void *)(v22 + 48) = sub_18AF403F4(v32, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    id v34 = sub_18AFFCD7C();
    uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v22 + 56) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a9 = v35;

    sub_18AF403B4(&dword_18AF10000, v29, v30, "%s error sending changes for user-requested-backup activity: %@");
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF38FA4();
  }
  char v36 = *(void **)(v22 + 136);
  id v37 = v28;
  uint64_t v38 = (void *)_convertErrorToNSError(_:)();

  int ShouldDefer = CKErrorShouldDefer(v38);
  uint64_t v40 = 1;
  if (ShouldDefer) {
    uint64_t v40 = 2;
  }
  *(void *)(v22 + 144) = v40;
  if (*(void *)(*(void *)(v22 + 88) + 168))
  {
    uint64_t v41 = *(void *)(v22 + 96);
    uint64_t v42 = sub_18AF33890();
    *(void *)(v22 + 152) = v42;
    *(void *)(v42 + 16) = v41;
    sub_18AFFC0A0();
    uint64_t v43 = (void *)swift_task_alloc();
    *(void *)(v22 + 160) = v43;
    *uint64_t v43 = v22;
    v43[1] = sub_18AFE88A4;
    sub_18AFFD9EC();
    sub_18AF2ACD0();
    return v46(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v53 = *(void **)(v22 + 120);

    sub_18AF32614();
    **(void **)(v22 + 80) = *(void *)(v22 + 144);
    sub_18AF384DC();
    sub_18AF2ACD0();
    return v55(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AFE8CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  return MEMORY[0x1F4188298](sub_18AFFBA90, 0, 0);
}

void sub_18AFE8CEC()
{
}

uint64_t sub_18AFE8D28()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if (objc_msgSend(*(id *)(v1 + 16), sel_needsToFetchDatabaseChanges)) {
    return 1;
  }
  unint64_t v2 = CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
  uint64_t v3 = v2 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (v3) {
    return 1;
  }
  if ((sub_18AFFD1AC() & 1) == 0)
  {
    sub_18AF30C68();
    sub_18AFFCF40();
  }
  if (sub_18AF43C44()) {
    return 1;
  }
  if ((sub_18AFFD1AC() & 1) == 0)
  {
    sub_18AF30C68();
    sub_18AFFCF40();
  }
  if (sub_18AFE8E2C()) {
    return 1;
  }
  if ((sub_18AFFD1AC() & 1) == 0)
  {
    sub_18AF30C68();
    sub_18AFFCF40();
  }
  return (uint64_t)objc_msgSend(*(id *)(v1 + 16), sel_needsToSaveDatabaseSubscription);
}

BOOL sub_18AFE8E2C()
{
  if (objc_msgSend(*(id *)(*(void *)(v0 + 128) + 16), sel_hasPendingUntrackedChanges)) {
    return 1;
  }
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  if (v2) {
    return 1;
  }
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  return v5 != 0;
}

uint64_t sub_18AFE8E8C(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_scheduleSyncTask) = a1;
  return sub_18AF2FCF8();
}

void sub_18AFE8EA0()
{
  sub_18AF1855C();
  uint64_t v2 = v0;
  uint64_t v3 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v4 = sub_18AF19284(v3);
  MEMORY[0x1F4188790](v4);
  sub_18AF36ADC();
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_18AF412A0(v5, (uint64_t)qword_1E91253B0);
  sub_18AF36AC4();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  uint64_t v8 = &unk_18B1F0000;
  if (sub_18AF4179C(v7))
  {
    uint64_t v9 = (uint8_t *)sub_18AF2A5F0();
    uint64_t v24 = sub_18AF16B9C();
    *(_DWORD *)uint64_t v9 = 136315138;
    if ((sub_18AFFBEBC() & 1) == 0)
    {
      sub_18AF30C68();
      sub_18AFFBED4();
    }
    swift_retain();
    sub_18AF40CEC();
    uint64_t v10 = swift_release();
    sub_18AFFDC10(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF35674();
    _os_log_impl(&dword_18AF10000, v6, v7, "%s will schedule sync", v9, 0xCu);
    sub_18AF40468();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v8 = (void *)&unk_18B1F0000;
  }
  else
  {
    sub_18AF35674();
  }
  if (!*(void *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_scheduleSyncTask))
  {
    sub_18AF36AC4();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (sub_18AF3F328(v13))
    {
      os_log_type_t v14 = (_DWORD *)sub_18AF2A5F0();
      uint64_t v24 = sub_18AF16B9C();
      *os_log_type_t v14 = v8[62];
      if ((sub_18AFFBEBC() & 1) == 0)
      {
        sub_18AF30C68();
        sub_18AFFBED4();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v15 = sub_18AFFBF60();
      uint64_t v17 = sub_18AF3F444(v15, v16, &v24);
      sub_18AFFCA18(v17);
      swift_bridgeObjectRelease();
      sub_18AF35674();
      sub_18AFFBB1C(&dword_18AF10000, v12, v13, "%s self.scheduleSyncTask is nil. Creating a new Task");
      swift_arrayDestroy();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF35674();
    }

    uint64_t v18 = type metadata accessor for TaskPriority();
    sub_18AF1826C(v1, v19, v20, v18);
    uint64_t v21 = sub_18AF38368(&qword_1E9125250, (void (*)(uint64_t))type metadata accessor for SyncEngine);
    uint64_t v22 = (void *)sub_18AF3488C();
    v22[2] = v2;
    v22[3] = v21;
    v22[4] = v2;
    sub_18AF36AC4();
    sub_18AF42DB4(v1, (uint64_t)&unk_1E9127008, (uint64_t)v22);
    sub_18AFE8E8C(v23);
  }
  sub_18AF32064();
}

uint64_t sub_18AFE91D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  sub_18AF161EC(&qword_1E9125470);
  void v4[6] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFE92C8, a4, 0);
}

uint64_t sub_18AFE92C8()
{
  sub_18AF339B8();
  ContinuousClock.init()();
  uint64_t v1 = (void *)sub_18AF22E4C();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AFE9370;
  sub_18AF22E38();
  return v2();
}

uint64_t sub_18AFE9370()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  sub_18AF23168();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_18AF23180();
  if (v0) {

  }
  uint64_t v4 = sub_18AF311F8();
  v5(v4);
  sub_18AF309A4();
  sub_18AF2FCE4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AFE94BC()
{
  sub_18AF2A56C();
  sub_18AFE8E8C(0);
  sub_18AF18528();
  uint64_t v1 = sub_18AF36520();
  sub_18AF402EC(v1, v2, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_18AFE9588;
  sub_18AF41784(*(void *)(v0 + 48));
  return sub_18AF2932C();
}

uint64_t sub_18AFE9588()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_18AF401EC(v2, &qword_1E9125470);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v5();
}

uint64_t sub_18AFE9690()
{
  sub_18AF339B8();
  *(void *)(v1 + 392) = v2;
  *(void *)(v1 + 400) = v0;
  *(unsigned char *)(v1 + 584) = v3;
  *(void *)(v1 + 376) = v4;
  *(void *)(v1 + 384) = v5;
  *(void *)(v1 + 360) = v6;
  *(void *)(v1 + 368) = v7;
  uint64_t v8 = sub_18AF161EC(&qword_1E9125190);
  *(void *)(v1 + 408) = v8;
  sub_18AF16DF8(v8);
  *(void *)(v1 + 416) = v9;
  *(void *)(v1 + 424) = sub_18AF2F1C8();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v1 + 432) = v10;
  sub_18AF16DF8(v10);
  *(void *)(v1 + 440) = v11;
  *(void *)(v1 + 448) = sub_18AF29400();
  *(void *)(v1 + 456) = swift_task_alloc();
  *(void *)(v1 + 464) = swift_task_alloc();
  *(void *)(v1 + 472) = swift_task_alloc();
  *(void *)(v1 + 480) = swift_task_alloc();
  *(void *)(v1 + 488) = swift_task_alloc();
  *(void *)(v1 + 496) = swift_task_alloc();
  uint64_t v12 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v12);
  *(void *)(v1 + 504) = sub_18AF29400();
  *(void *)(v1 + 512) = swift_task_alloc();
  *(void *)(v1 + 520) = swift_task_alloc();
  *(void *)(v1 + 528) = swift_task_alloc();
  *(void *)(v1 + 536) = swift_task_alloc();
  *(void *)(v1 + 544) = swift_task_alloc();
  *(void *)(v1 + 552) = swift_task_alloc();
  *(void *)(v1 + 560) = swift_task_alloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v13, v14, v15);
}

uint64_t sub_18AFE981C()
{
  uint64_t v224 = v0;
  uint64_t v1 = v0 + 352;
  if (__sTestOverridesAvailable)
  {
    if ((swift_task_isCurrentExecutor() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v3 = *(void *)(v0 + 360);
    uint64_t v2 = *(void *)(v0 + 368);
    sub_18AFE5CC0();
    BOOL v6 = v5 == v3 && v4 == v2;
    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0) {
        goto LABEL_14;
      }
    }
    id v8 = objc_msgSend(self, sel_defaultCenter);
    if (qword_1E9125738 != -1) {
      swift_once();
    }
    objc_msgSend(v8, sel_postNotificationName_object_, qword_1E9126D80, *(void *)(v0 + 400));
  }
LABEL_14:
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v10 = *(void *)(v0 + 432);
  sub_18AF402EC(*(void *)(v0 + 376), *(void *)(v0 + 560), &qword_1E9125470);
  uint64_t v11 = sub_18AF3563C();
  sub_18AF402EC(v11, v12, &qword_1E9125470);
  int v13 = sub_18AF436E0(v9, 1, v10);
  uint64_t v14 = sub_18AF36700();
  sub_18AF401EC(v14, v15);
  if (v13 == 1)
  {
    sub_18AF18528();
    uint64_t v16 = sub_18AF3858C();
    sub_18AF402EC(v16, v17, v18);
    if (sub_18AF40428() == 1)
    {
      sub_18AF401EC(*(void *)(v0 + 544), &qword_1E9125470);
    }
    else
    {
      uint64_t v19 = *(void (**)(void))(*(void *)(v0 + 440) + 32);
      sub_18AFFD7A0();
      v19();
      Date.timeIntervalSinceNow.getter();
      if (v20 <= 0.0)
      {
        sub_18AFFC4D8();
        v28();
      }
      else
      {
        sub_18AF476B8();
        if (!v6) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_18AF41270(v21, (uint64_t)qword_1E91253B0);
        uint64_t v22 = (void *)Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.debug.getter();
        if (sub_18AF3A2EC(v23))
        {
          uint64_t v24 = (_DWORD *)sub_18AF2A5F0();
          v223[0] = sub_18AF16B9C();
          _DWORD *v24 = 136315138;
          if ((sub_18AF33AE8() & 1) == 0)
          {
            sub_18AF30C68();
            swift_task_reportUnexpectedExecutor();
          }
          uint64_t v216 = *(void *)(v0 + 560);
          sub_18AFFBDD8();
          sub_18AF40CEC();
          uint64_t v25 = sub_18AFFBD74();
          *(void *)(v0 + 352) = sub_18AFFC750(v25, v26, v223);
          uint64_t v1 = v0 + 352;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_18AF38FA4();
          sub_18AFFBB34(&dword_18AF10000, v27, (os_log_type_t)&qword_1E9125470, "%s setting earliestStartDate based on the last provided earliestStartDate");
          sub_18AF3F7A8();
          sub_18AF388F8();
          sub_18AF388F8();

          sub_18AF401EC(v216, &qword_1E9125470);
        }
        else
        {
          uint64_t v29 = *(void *)(v0 + 560);

          sub_18AFFBC0C();
          sub_18AF401EC(v29, &qword_1E9125470);
        }
        uint64_t v30 = *(void *)(v0 + 560);
        sub_18AFFD7A0();
        v19();
        sub_18AF47560(v30);
      }
    }
  }
  uint64_t v31 = *(void *)(v0 + 360);
  uint64_t v32 = *(void *)(v0 + 368);
  uint64_t v33 = *(void **)(*(void *)(v0 + 400) + 144);
  id v34 = self;
  uint64_t v35 = &selRef_setUnavailablePackages_;
  id v36 = objc_msgSend(v34, sel_sharedScheduler);
  id v37 = (void *)MEMORY[0x18C128F60](v31, v32);
  id v38 = objc_msgSend(v36, sel_activityForActivityIdentifier_, v37);

  v217 = v34;
  if (!v38)
  {
    sub_18AF476B8();
    if (!v6) {
      swift_once();
    }
    uint64_t v47 = sub_18AFFBBF0();
    sub_18AF412A0(v47, (uint64_t)qword_1E91253B0);
    sub_18AF3098C();
    sub_18AF3E5E4();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04(v49))
    {
      v218 = v33;
      uint64_t v50 = (_DWORD *)sub_18AF402C8();
      uint64_t v51 = sub_18AF182D8();
      sub_18AFFD448(v51);
      *uint64_t v50 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      uint64_t v52 = sub_18AF40CEC();
      sub_18AF404A0();
      *(void *)(v0 + 216) = sub_18AF4095C(v52, (unint64_t)&selRef_setUnavailablePackages_, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AF40418();
      uint64_t v53 = swift_bridgeObjectRetain();
      *(void *)(v0 + 224) = sub_18AF476A0(v53, v54, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_18AF403B4(&dword_18AF10000, v48, v49, "%s creating new activity %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();

      uint64_t v35 = &selRef_setUnavailablePackages_;
      uint64_t v33 = v218;
    }
    else
    {
      sub_18AF38FA4();
      sub_18AF307A4();
    }
    uint64_t v64 = *(void *)(v0 + 384);
    objc_allocWithZone((Class)CKSchedulerActivity);
    swift_bridgeObjectRetain();
    id v65 = v33;
    uint64_t v66 = sub_18AF311C8();
    id v69 = sub_18AFF12F4(v66, v67, v68, v64);
    if (!v69)
    {
      sub_18AF476B8();
      if (!v6) {
        swift_once();
      }
      sub_18AF412A0(v47, (uint64_t)qword_1E91253B0);
      uint64_t v96 = Logger.logObject.getter();
      os_log_type_t v97 = static os_log_type_t.fault.getter();
      BOOL v98 = os_log_type_enabled(v96, v97);
      uint64_t v99 = *(void *)(v0 + 560);
      if (v98)
      {
        *(_WORD *)sub_18AF389E0() = 0;
        sub_18AF16E74(&dword_18AF10000, v100, v101, "BUG IN CLOUDKIT: No activity to submit in engine");
        sub_18AF388F8();
      }

      uint64_t v102 = v99;
      goto LABEL_95;
    }
    id v39 = v69;
    goto LABEL_60;
  }
  id v39 = v38;
  id v40 = objc_msgSend(v39, sel_nullableContainer);

  if (!v40) {
    objc_msgSend(v39, sel_setContainer_, v33);
  }
  uint64_t v41 = *(void *)(v0 + 360);
  uint64_t v42 = *(void *)(v0 + 368);
  id v43 = objc_msgSend(v34, sel_sharedScheduler);
  uint64_t v44 = (void *)MEMORY[0x18C128F60](v41, v42);
  LOBYTE(v41) = objc_msgSend(v43, sel_hasPendingActivityWithActivityIdentifier_, v44);

  if ((v41 & 1) == 0)
  {
    sub_18AF476B8();
    if (!v6) {
      swift_once();
    }
    uint64_t v55 = sub_18AFFBBF0();
    sub_18AF412A0(v55, (uint64_t)qword_1E91253B0);
    sub_18AF3098C();
    sub_18AF3E5E4();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (sub_18AF4179C(v57))
    {
      v219 = v39;
      uint64_t v58 = (_DWORD *)sub_18AF402C8();
      uint64_t v59 = sub_18AF182D8();
      sub_18AFFD448(v59);
      *uint64_t v58 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v60 = sub_18AF41328();
      *(void *)(v0 + 232) = sub_18AF41370(v60, v61, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      uint64_t v62 = sub_18AFFD580();
      *(void *)(v0 + 240) = sub_18AFFD22C(v62, v63, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF228C0();
      sub_18AF2F014(&dword_18AF10000, v56, v57, "%s asked to submit an activity which the scheduler knows about, but which is not pending. Gonna submit that activity %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
      goto LABEL_47;
    }
    sub_18AF38FA4();
    sub_18AF307A4();

LABEL_60:
    int v46 = 1;
    goto LABEL_79;
  }
  uint64_t v45 = v0 + 296;
  sub_18AF402EC(*(void *)(v0 + 560), *(void *)(v0 + 536), &qword_1E9125470);
  if (sub_18AF40428() == 1)
  {
    sub_18AF401EC(*(void *)(v0 + 536), &qword_1E9125470);
    goto LABEL_33;
  }
  uint64_t v70 = *(void (**)(void))(*(void *)(v0 + 440) + 32);
  ((void (*)(void, void, void))v70)(*(void *)(v0 + 488), *(void *)(v0 + 536), *(void *)(v0 + 432));
  id v71 = objc_msgSend(v39, sel_earliestStartDate);
  uint64_t v74 = *(void *)(v0 + 528);
  if (!v71)
  {
    sub_18AF1826C(*(void *)(v0 + 528), v72, v73, *(void *)(v0 + 432));
    goto LABEL_71;
  }
  uint64_t v75 = v71;
  uint64_t v45 = *(void *)(v0 + 472);
  uint64_t v76 = *(void *)(v0 + 432);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v77 = sub_18AF36520();
  v70(v77);
  sub_18AF43708(v74, 0, 1, v76);
  if (sub_18AF436E0(v74, 1, v76) == 1)
  {
LABEL_71:
    sub_18AF401EC(*(void *)(v0 + 528), &qword_1E9125470);
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    sub_18AFFD488();
    uint64_t v106 = type metadata accessor for Logger();
    sub_18AF412A0(v106, (uint64_t)qword_1E91253B0);
    uint64_t v107 = sub_18AFFC820();
    v108(v107);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    char v109 = Logger.logObject.getter();
    uint64_t v110 = static os_log_type_t.debug.getter();
    if (sub_18AF3DD94((os_log_type_t)v110))
    {
      os_log_type_t v214 = v110;
      uint64_t v111 = sub_18AF16B9C();
      v223[0] = sub_18AF3DE24();
      *(_DWORD *)uint64_t v111 = 136315650;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v112 = *(void *)(v0 + 440);
      uint64_t v113 = *(void *)(v0 + 360);
      unint64_t v114 = *(void *)(v0 + 368);
      swift_retain();
      sub_18AF40CEC();
      uint64_t v115 = sub_18AF41328();
      *(void *)(v0 + 296) = sub_18AF41370(v115, v116, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      *(_WORD *)(v111 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 304) = sub_18AF4095C(v113, v114, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v111 + 22) = 2080;
      sub_18AF38368(&qword_1E9125008, MEMORY[0x1E4F27928]);
      uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 312) = sub_18AF4095C(v117, v118, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v119 = *(void (**)(void))(v112 + 8);
      sub_18AFFDB00();
      sub_18AFFBDFC();
      v119();
      _os_log_impl(&dword_18AF10000, v109, v214, "%s re-submitting activity %s and overwriting nil earliest start date to new date (%s)", (uint8_t *)v111, 0x20u);
      swift_arrayDestroy();
      sub_18AF388F8();
      sub_18AF388F8();

      sub_18AFFBDFC();
      v119();
    }
    else
    {
      sub_18AFFD488();

      uint64_t v120 = *(void (**)(void))(v1 + 8);
      sub_18AFFC700();
      v120();
      sub_18AF3F474();
      swift_release_n();
      ((void (*)(uint64_t, uint64_t))v120)(v110, v45);
    }
    goto LABEL_78;
  }
  v220 = v39;
  ((void (*)(void, void, void))v70)(*(void *)(v0 + 480), *(void *)(v0 + 528), *(void *)(v0 + 432));
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  unint64_t v78 = *(void *)(v0 + 456);
  uint64_t v79 = *(void *)(v0 + 440);
  uint64_t v80 = type metadata accessor for Logger();
  sub_18AF412A0(v80, (uint64_t)qword_1E91253B0);
  uint64_t v81 = *(void (**)(uint64_t))(v79 + 16);
  uint64_t v82 = sub_18AF311C8();
  v81(v82);
  uint64_t v83 = sub_18AF4134C();
  v81(v83);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v86 = swift_slowAlloc();
    v223[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v86 = 136315906;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v210 = *(void *)(v0 + 440);
    swift_retain();
    uint64_t v87 = sub_18AF40CEC();
    sub_18AF3F510();
    *(void *)(v0 + 320) = sub_18AF4095C(v87, v78, v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    *(_WORD *)(v86 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_18AF42884();
    *(void *)(v0 + 328) = sub_18AF4095C(v88, v89, v90);
    sub_18AFFDBA4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF228C0();
    *(_WORD *)(v86 + 22) = 2080;
    sub_18AF38368(&qword_1E9125008, MEMORY[0x1E4F27928]);
    uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 336) = sub_18AF4095C(v91, v92, v223);
    sub_18AF3F48C();
    swift_bridgeObjectRelease();
    uint64_t v93 = *(void (**)(void))(v210 + 8);
    sub_18AFFD8B8();
    sub_18AFFC4D8();
    v93();
    *(_WORD *)(v86 + 32) = 2080;
    uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 344) = sub_18AF4095C(v94, v95, v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AFFD8B8();
    sub_18AFFC4D8();
    v93();
    _os_log_impl(&dword_18AF10000, v84, v85, "%s re-submitting activity %s and overwriting earliestStartDate (%s to new date (%s)", (uint8_t *)v86, 0x2Au);
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    uint64_t v190 = *(void *)(v0 + 440);
    swift_release_n();
    sub_18AF32658();
    uint64_t v93 = *(void (**)(void))(v190 + 8);
    sub_18AFFC700();
    v93();
    sub_18AFFC700();
    v93();
  }
  sub_18AF3563C();
  char v191 = static Date.< infix(_:_:)();
  uint64_t v192 = sub_18AF40DB4();
  ((void (*)(uint64_t))v93)(v192);
  uint64_t v193 = sub_18AF36520();
  ((void (*)(uint64_t))v93)(v193);
  uint64_t v35 = &selRef_setUnavailablePackages_;
  id v39 = v220;
  if (v191)
  {

    goto LABEL_60;
  }
LABEL_33:
  if (*(unsigned char *)(v0 + 584) != 1)
  {
    BOOL v103 = (void *)sub_18AFE6480();
    id v104 = objc_msgSend(v39, sel_xpcActivityCriteriaOverrides);
    unint64_t v105 = v104;
    if (v103)
    {
      if (v104)
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if (xpc_equal(v103, v105))
        {
          sub_18AFFD294();
          swift_unknownObjectRelease_n();
          goto LABEL_34;
        }
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v202 = sub_18AFFBBF0();
        sub_18AF412A0(v202, (uint64_t)qword_1E91253B0);
        sub_18AF3098C();
        sub_18AF3E5E4();
        v203 = Logger.logObject.getter();
        os_log_type_t v204 = static os_log_type_t.debug.getter();
        if (sub_18AF42D04(v204))
        {
          v222 = v39;
          v205 = (_DWORD *)sub_18AF402C8();
          v223[0] = sub_18AF182D8();
          _DWORD *v205 = 136315394;
          if ((sub_18AF33AE8() & 1) == 0)
          {
            sub_18AF30C68();
            swift_task_reportUnexpectedExecutor();
          }
          unint64_t v206 = *(void *)(v0 + 368);
          os_log_t log = *(os_log_t *)(v0 + 360);
          swift_retain();
          uint64_t v207 = sub_18AF40CEC();
          sub_18AF3F510();
          *(void *)(v0 + 280) = sub_18AF4095C(v207, v0 + 280, v223);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_18AF38FA4();
          sub_18AFFD560();
          *(void *)(v0 + 288) = sub_18AF4095C((uint64_t)log, v206, v223);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_18AF228C0();
          sub_18AF41358(&dword_18AF10000, v203, v204, "%s re-submitting activity %s and overwriting criteria overrides");
          sub_18AF40360();
          sub_18AF388F8();
          sub_18AF388F8();
          swift_unknownObjectRelease_n();
          sub_18AFFD294();
          id v39 = v222;

          goto LABEL_78;
        }
        sub_18AFFD294();
        swift_unknownObjectRelease_n();
        sub_18AF38FA4();
        sub_18AF307A4();

LABEL_151:
        int v46 = 1;
        goto LABEL_79;
      }
      uint64_t v194 = qword_1E91252D0;
      swift_unknownObjectRetain();
      if (v194 != -1) {
        swift_once();
      }
      uint64_t v195 = sub_18AFFBBF0();
      sub_18AF412A0(v195, (uint64_t)qword_1E91253B0);
      sub_18AF3098C();
      sub_18AF3E5E4();
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v196 = static os_log_type_t.debug.getter();
      if (!sub_18AF4179C(v196))
      {
        sub_18AFFD294();

        sub_18AF38FA4();
        sub_18AF307A4();

        goto LABEL_151;
      }
      v219 = v39;
      v197 = (_DWORD *)sub_18AF402C8();
      uint64_t v198 = sub_18AF182D8();
      sub_18AFFD448(v198);
      _DWORD *v197 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      unint64_t v199 = *(void *)(v0 + 368);
      uint64_t v212 = *(void *)(v0 + 360);
      swift_retain();
      sub_18AF40CEC();
      uint64_t v200 = sub_18AF37A48();
      *(void *)(v0 + 264) = sub_18AF403F4(v200, v201, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFD560();
      *(void *)(v0 + 272) = sub_18AF4095C(v212, v199, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF228C0();
      sub_18AF41358(&dword_18AF10000, v56, v196, "%s re-submitting activity %s with criteria overrides");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
      sub_18AFFD294();
LABEL_47:
      id v39 = v219;

LABEL_78:
      int v46 = 1;
      uint64_t v35 = &selRef_setUnavailablePackages_;
      goto LABEL_79;
    }
    if (!v104) {
      goto LABEL_34;
    }
    sub_18AF476B8();
    if (!v6) {
      swift_once();
    }
    uint64_t v182 = sub_18AFFBBF0();
    sub_18AF412A0(v182, (uint64_t)qword_1E91253B0);
    sub_18AF3098C();
    sub_18AF3E5E4();
    v183 = Logger.logObject.getter();
    os_log_type_t v184 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04(v184))
    {
      v185 = (_DWORD *)sub_18AF402C8();
      uint64_t v186 = sub_18AF182D8();
      sub_18AFFD448(v186);
      _DWORD *v185 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      unint64_t v187 = *(void *)(v0 + 368);
      uint64_t v211 = *(void *)(v0 + 360);
      swift_retain();
      sub_18AF40CEC();
      uint64_t v188 = sub_18AF30464();
      *(void *)(v0 + 248) = sub_18AFFDAE8(v188, v189, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFD580();
      *(void *)(v0 + 256) = sub_18AF4095C(v211, v187, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF228C0();
      sub_18AF2F014(&dword_18AF10000, v183, v184, "%s re-submitting activity %s and removing criteria overrides");
      sub_18AF40360();
      sub_18AF388F8();
      sub_18AF388F8();

      swift_unknownObjectRelease();
      goto LABEL_78;
    }
    swift_unknownObjectRelease();

    sub_18AF38FA4();
    sub_18AF307A4();

    goto LABEL_60;
  }
LABEL_34:

  int v46 = 0;
LABEL_79:
  *(void *)(v0 + 568) = v39;
  uint64_t v121 = *(void *)(v0 + 392);
  if (v121)
  {
    uint64_t v122 = *(void *)(v121 + 16);
    id v123 = v39;
    if (v122)
    {
      uint64_t v124 = v123;
      id v221 = v39;
      swift_bridgeObjectRetain();
      uint64_t v125 = sub_18AFF78C0(v124);
      if (!v125) {
        uint64_t v125 = MEMORY[0x1E4FBC860];
      }
      uint64_t v126 = sub_18AFC0D94(v125);
      uint64_t v127 = swift_bridgeObjectRetain();
      uint64_t v128 = sub_18AFC0D94(v127);
      uint64_t v129 = swift_bridgeObjectRetain();
      uint64_t v130 = sub_18AFEBB7C(v129, v128);
      char v131 = sub_18AFF1368(v130, v126);
      swift_bridgeObjectRelease();
      if ((v131 & 1) == 0)
      {
        sub_18AF476B8();
        if (!v6) {
          swift_once();
        }
        uint64_t v144 = sub_18AFFBBF0();
        sub_18AF412A0(v144, (uint64_t)qword_1E91253B0);
        sub_18AF3098C();
        sub_18AF3E5E4();
        Swift::Int_optional v145 = Logger.logObject.getter();
        os_log_type_t v146 = static os_log_type_t.debug.getter();
        if (sub_18AF42D04(v146))
        {
          os_log_type_t v213 = v146;
          uint64_t v147 = sub_18AF402C8();
          v223[0] = sub_18AF182D8();
          *(_DWORD *)uint64_t v147 = 136315394;
          if ((sub_18AF33AE8() & 1) == 0)
          {
            sub_18AF30C68();
            swift_task_reportUnexpectedExecutor();
          }
          unint64_t v148 = *(void *)(v0 + 368);
          uint64_t v208 = *(void *)(v0 + 360);
          swift_retain();
          sub_18AF40CEC();
          sub_18AF3F510();
          uint64_t v149 = sub_18AF41790();
          *(void *)(v0 + 200) = sub_18AF4095C(v149, v150, v151);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_18AF38FA4();
          *(_WORD *)(v147 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 208) = sub_18AF4095C(v208, v148, v223);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_18AF228C0();
          sub_18AF3F42C(&dword_18AF10000, v145, v213, "%s re-submitting activity %s to add related application bundle identifiers");
          swift_arrayDestroy();
          sub_18AF388F8();
          sub_18AF388F8();

          uint64_t v35 = &selRef_setUnavailablePackages_;
        }
        else
        {
          sub_18AF38FA4();
          sub_18AF307A4();
        }
        sub_18AFDE840(v121);
        v223[0] = v152;
        v223[1] = v153;
        sub_18AFDDF94(v126);
        swift_bridgeObjectRelease();
        uint64_t v154 = swift_retain();
        sub_18AFF7918(v154, v124);
        swift_release();
        swift_release();
        id v39 = v221;
LABEL_106:
        sub_18AF476B8();
        if (!v6) {
          swift_once();
        }
        uint64_t v155 = sub_18AFFBBF0();
        sub_18AF412A0(v155, (uint64_t)qword_1E91253B0);
        sub_18AF3098C();
        sub_18AF3E5E4();
        uint64_t v156 = Logger.logObject.getter();
        os_log_type_t v157 = static os_log_type_t.default.getter();
        if (sub_18AF4179C(v157))
        {
          uint64_t v158 = sub_18AF402C8();
          v223[0] = sub_18AF182D8();
          *(_DWORD *)uint64_t v158 = 136315394;
          if ((sub_18AF33AE8() & 1) == 0)
          {
            sub_18AF30C68();
            swift_task_reportUnexpectedExecutor();
          }
          swift_retain();
          sub_18AF40CEC();
          uint64_t v159 = sub_18AF404A0();
          *(void *)(v0 + 184) = sub_18AFFD22C(v159, v160, v223);
          sub_18AFFD7CC();
          swift_bridgeObjectRelease();
          sub_18AF38FA4();
          *(_WORD *)(v158 + 12) = 2080;
          uint64_t v161 = swift_bridgeObjectRetain();
          *(void *)(v0 + 192) = sub_18AF3DDAC(v161, v162, v223);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          sub_18AF3F42C(&dword_18AF10000, v156, v157, "%s submitting scheduler activity %s");
          sub_18AF41310();
          sub_18AF388F8();
          sub_18AF388F8();

          uint64_t v35 = &selRef_setUnavailablePackages_;
        }
        else
        {
          sub_18AF38FA4();
          sub_18AF307A4();
        }
        sub_18AF402EC(*(void *)(v0 + 560), *(void *)(v0 + 520), &qword_1E9125470);
        int v163 = sub_18AF40428();
        uint64_t v164 = sub_18AF36520();
        sub_18AF401EC(v164, v165);
        if (v163 != 1)
        {
          uint64_t v166 = *(void *)(v0 + 512);
          sub_18AF402EC(*(void *)(v0 + 560), v166, &qword_1E9125470);
          sub_18AF40480(v166);
          if (v6)
          {

            __break(1u);
            return MEMORY[0x1F41881E8](v181);
          }
          Date.timeIntervalSinceNow.getter();
          double v168 = v167;
          uint64_t v169 = sub_18AF3563C();
          v170(v169);
          if (v168 <= 0.0)
          {
            uint64_t v171 = *(void *)(v0 + 560);
            uint64_t v172 = *(void *)(v0 + 432);
            sub_18AF401EC(v171, &qword_1E9125470);
            sub_18AF43708(v171, 1, 1, v172);
          }
        }
        uint64_t v173 = *(void *)(v0 + 504);
        sub_18AF402EC(*(void *)(v0 + 560), v173, &qword_1E9125470);
        sub_18AF40480(v173);
        if (v6)
        {
          v174.super.Class isa = 0;
        }
        else
        {
          v174.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
          uint64_t v175 = sub_18AF40DB4();
          v176(v175);
        }
        uint64_t v177 = *(unsigned __int8 *)(v0 + 584);
        objc_msgSend(v39, sel_setEarliestStartDate_, v174.super.isa);

        objc_msgSend(v39, sel_setUserRequestedBackupTask_, v177);
        if ((v177 & 1) == 0)
        {
          objc_msgSend(v39, sel_setXpcActivityCriteriaOverrides_, sub_18AFE6480());
          swift_unknownObjectRelease();
        }
        uint64_t v178 = *(void *)(v0 + 408);
        id v179 = [v217 v35[101]];
        *(void *)(v0 + 576) = v179;
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = sub_18AFEB8BC;
        swift_continuation_init();
        *(void *)(v0 + 136) = v178;
        sub_18AF3A5E0((uint64_t *)(v0 + 112));
        sub_18AF3A5D4();
        CheckedContinuation.init(continuation:function:)();
        sub_18AFFDB00();
        sub_18AFFD7A0();
        v180();
        *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
        *(void *)(v0 + 88) = 1107296256;
        *(void *)(v0 + 96) = sub_18AFEBD00;
        *(void *)(v0 + 104) = &unk_1ED7F1220;
        objc_msgSend(v179, sel_submitActivity_completionHandler_, v39, v0 + 80);
        uint64_t v181 = v0 + 16;
        return MEMORY[0x1F41881E8](v181);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v39 = v221;
    }
    if (v46) {
      goto LABEL_106;
    }
  }
  else
  {
    id v132 = v39;
    if (v46) {
      goto LABEL_106;
    }
  }
  sub_18AF476B8();
  if (!v6) {
    swift_once();
  }
  uint64_t v133 = sub_18AFFBBF0();
  sub_18AF412A0(v133, (uint64_t)qword_1E91253B0);
  sub_18AF3098C();
  sub_18AF3E5E4();
  uint64_t v134 = Logger.logObject.getter();
  os_log_type_t v135 = static os_log_type_t.debug.getter();
  if (sub_18AF32640(v135))
  {
    unint64_t v136 = (_DWORD *)sub_18AF402C8();
    v223[0] = sub_18AF182D8();
    *unint64_t v136 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v215 = *(void *)(v0 + 560);
    uint64_t v138 = *(void *)(v0 + 360);
    unint64_t v137 = *(void *)(v0 + 368);
    swift_retain();
    sub_18AF40CEC();
    uint64_t v139 = sub_18AFFBD74();
    *(void *)(v0 + 176) = sub_18AFFC750(v139, v140, v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AF40418();
    swift_bridgeObjectRetain();
    *(void *)(v0 + 168) = sub_18AF4095C(v138, v137, v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_18AF403B4(&dword_18AF10000, v134, v135, "%s already have a scheduler activity for %s");
    sub_18AF41310();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v102 = v215;
  }
  else
  {
    uint64_t v141 = *(void *)(v0 + 560);

    sub_18AF32658();
    sub_18AFFBC0C();
    uint64_t v102 = v141;
  }
LABEL_95:
  sub_18AF401EC(v102, &qword_1E9125470);
  sub_18AFFBFE8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v142();
}

uint64_t sub_18AFEB8BC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v3 = v1;
  return MEMORY[0x1F4188298](sub_18AFEB980, v2, 0);
}

uint64_t sub_18AFEB980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_18AF410EC();
  sub_18AF41388();
  uint64_t v19 = (void *)v18[72];
  double v20 = (void *)v18[71];
  uint64_t v21 = v18[70];

  sub_18AF401EC(v21, &qword_1E9125470);
  sub_18AFFBFE8();
  uint64_t v33 = v23;
  uint64_t v34 = v22;
  uint64_t v35 = v18[58];
  uint64_t v36 = v18[57];
  uint64_t v37 = v18[56];
  uint64_t v38 = v18[53];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  sub_18AF41060();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, v33, v34, v35, v36, v37, v38, a16, a17, a18);
}

#error "18AFEBB18: call analysis failed (funcsize=56)"

uint64_t sub_18AFEBB7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_18AFF1E24(&v17, v15, v16);
    id result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_18AFEBD00(uint64_t a1)
{
  sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));

  return sub_18AFEBD34();
}

uint64_t sub_18AFEBD34()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_18AFEBD68()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  *(void *)(v6 + 176) = v5;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFEBE48()
{
  sub_18AF2A56C();
  sub_18AFE5CC0();
  *(void *)(v0 + 184) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_18AFEBF10;
  sub_18AF40DB4();
  return sub_18AFE9690();
}

uint64_t sub_18AFEBF10()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_18AFEC030, v2, 0);
}

uint64_t sub_18AFEC030()
{
  sub_18AF2A56C();
  sub_18AF401EC(*(void *)(v0 + 160), &qword_1E9125470);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v1();
}

uint64_t sub_18AFEC0C8()
{
  sub_18AF339B8();
  v1[8] = v0;
  sub_18AF299F4();
  v1[9] = v2;
  uint64_t v3 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v3);
  v1[10] = sub_18AF29400();
  v1[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v1[12] = v4;
  sub_18AF16DF8(v4);
  v1[13] = v5;
  v1[14] = sub_18AF29400();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AFEC1A4()
{
  sub_18AF299CC();
  uint64_t v21 = v1;
  sub_18AF1A048();
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8] + OBJC_IVAR____TtC8CloudKit10SyncEngine_lastForegroundTriggeredFetchDate;
  sub_18AF18528();
  uint64_t v4 = sub_18AFFDB00();
  sub_18AF402EC(v4, v5, v6);
  sub_18AF40480(v2);
  if (v7)
  {
    sub_18AF401EC(v0[11], &qword_1E9125470);
  }
  else
  {
    uint64_t v8 = v0[13];
    uint64_t v9 = (*(uint64_t (**)(void, void, void))(v8 + 32))(v0[16], v0[11], v0[12]);
    sub_18AF48B24(v9, 55.0, 77.0);
    static Date.+ infix(_:_:)();
    static Date.now.getter();
    sub_18AFFC7C8();
    char v10 = static Date.< infix(_:_:)();
    uint64_t v11 = *(void (**)(void))(v8 + 8);
    sub_18AFFCE4C();
    v11();
    sub_18AFFCE4C();
    v11();
    sub_18AFFCE4C();
    v11();
    if (v10)
    {
LABEL_9:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_18AF16D48();
      sub_18AF33974();
      __asm { BRAA            X1, X16 }
    }
  }
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[10];
  objc_msgSend(*(id *)(*(void *)(v0[8] + 128) + 16), sel_setNeedsToFetchDatabaseChanges_, 1);
  static Date.now.getter();
  sub_18AF43708(v13, 0, 1, v12);
  sub_18AF31300();
  sub_18AFFB674(v13, v3, &qword_1E9125470);
  swift_endAccess();
  if ((sub_18AF38A9C() & 1) == 0) {
    goto LABEL_9;
  }
  sub_18AF474D0();
  uint64_t v14 = swift_task_alloc();
  uint64_t v15 = (void *)sub_18AF304A0(v14);
  *uint64_t v15 = v16;
  v15[1] = sub_18AFEC408;
  return v20();
}

uint64_t sub_18AFEC408()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFEC4E4()
{
  sub_18AF2A56C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFEC56C()
{
  sub_18AF339B8();
  v0[12] = v1;
  v0[13] = v2;
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v0[14] = v3;
  sub_18AF16DF8(v3);
  v0[15] = v4;
  v0[16] = sub_18AF2F1C8();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AFEC5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_18AF41270(v26, (uint64_t)qword_1E91253B0);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (sub_18AF2FF8C(v28))
  {
    a10 = v22 + 88;
    sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFC4CC();
    sub_18AFFCF58(4.8149e-34);
    sub_18AF40CEC();
    uint64_t v29 = sub_18AF1FFE8();
    uint64_t v31 = sub_18AF476A0(v29, v30, &a11);
    sub_18AFFC730(v31, (void *)(v22 + 88));
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB1C(&dword_18AF10000, v27, v23, "%s will perform opportunistic fetch on application foreground");
    sub_18AF351C4();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF38FA4();
  }

  static Duration.seconds(_:)();
  sub_18AFFD0B4();
  uint64_t v32 = sub_18AFFD6EC();
  uint64_t v33 = (void *)sub_18AF304A0(v32);
  *uint64_t v33 = v34;
  v33[1] = sub_18AFEC79C;
  sub_18AFFD760();
  sub_18AF2ACD0();
  return v40(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_18AFEC79C()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33DE0();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_18AF26B24();
  if (v0) {

  }
  uint64_t v4 = sub_18AFFBD5C();
  v5(v4);
  sub_18AF16AA0();
  sub_18AF37AC0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AFEC8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  sub_18AF33DF8();
  a17 = v19;
  a18 = v20;
  sub_18AF338B4();
  a16 = v18;
  id v21 = static SyncEngine.defaultOperationGroup()();
  v18[18] = v21;
  sub_18AF36054(0xD000000000000026, 0x800000018B1D4A20, v21);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  id v22 = v21;
  v18[19] = Dictionary.init(dictionaryLiteral:)();
  id v23 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_18AF35BFC(v23);
  uint64_t v26 = v25;
  if (v25 && (sub_18AFFBB68() & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for SyncEngine();
    a9 = 0;
    a10 = 2;
    sub_18AF36168((uint64_t)&a9, v24, v26);
    sub_18AFFD114();
    sub_18AFFD2AC();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AFFBE24();
  id v27 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_log_type_t v28 = (void *)swift_task_alloc();
  v18[20] = v28;
  *os_log_type_t v28 = v18;
  v28[1] = sub_18AFECAAC;
  sub_18AFFD2F0();
  sub_18AF33C3C();
  return sub_18AF1E814();
}

uint64_t sub_18AFECAAC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {

  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFECB90()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 144);

  sub_18AFFC4E4();
  swift_bridgeObjectRelease_n();
  sub_18AF32614();
  swift_task_dealloc();
  sub_18AF384DC();
  return v2();
}

void sub_18AFECC10(void *a1)
{
  uint64_t v3 = v1;
  id v4 = objc_msgSend(a1, sel_resolvedConfiguration);
  id v5 = objc_msgSend(v4, sel_container);

  if (!v5 || (id v14 = objc_msgSend(v5, sel_containerID), v5, !v14))
  {
LABEL_15:
    sub_18AF42F18();
    return;
  }
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  id v6 = objc_msgSend(*(id *)(v3 + 144), sel_containerID);
  char v7 = static NSObject.== infix(_:_:)();

  if (v7)
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_18AF35568(v8, (uint64_t)qword_1E91253B0);
    uint64_t v9 = (void *)Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (sub_18AF42D04(v10))
    {
      sub_18AF2A5F0();
      uint64_t v15 = sub_18AF16B9C();
      if ((sub_18AF476C4(4.8149e-34) & 1) == 0)
      {
        sub_18AF30C68();
        sub_18AFFBED4();
      }
      sub_18AF4765C();
      sub_18AF40CEC();
      sub_18AF476FC();
      sub_18AF4095C(v3, v2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF35674();
      swift_bridgeObjectRelease();
      sub_18AF475D4(&dword_18AF10000, v11, v10, "%s notified that a share was accepted for our container");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF35674();
    }
    objc_msgSend(*(id *)(*(void *)(v3 + 128) + 16), sel_setNeedsToFetchDatabaseChanges_, 1);

    goto LABEL_15;
  }
  sub_18AF42F18();
}

void sub_18AFECE5C()
{
  sub_18AF299F4();
  uint64_t v3 = v2;
  uint64_t v4 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v5 = sub_18AF19284(v4);
  MEMORY[0x1F4188790](v5);
  sub_18AF36ADC();
  if (*(unsigned char *)(v0 + 392) == 1 && !*(void *)(v0 + 384))
  {
    uint64_t v6 = type metadata accessor for TaskPriority();
    sub_18AF1826C(v1, v7, v8, v6);
    uint64_t v9 = sub_18AF38368(&qword_1E9125250, (void (*)(uint64_t))type metadata accessor for SyncEngine);
    os_log_type_t v10 = (void *)sub_18AF31268();
    id v10[2] = v0;
    v10[3] = v9;
    v10[4] = v0;
    v10[5] = v3;
    sub_18AF3098C();
    sub_18AF42DB4(v1, (uint64_t)&unk_1E9127388, (uint64_t)v10);
    sub_18AFE2998(v11);
  }
}

uint64_t sub_18AFECF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v5[4] = v7;
  v5[5] = *(void *)(v7 - 8);
  void v5[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFED02C, a4, 0);
}

uint64_t sub_18AFED02C()
{
  sub_18AF2A56C();
  static Duration.seconds(_:)();
  sub_18AFFD0B4();
  uint64_t v0 = sub_18AF22E4C();
  uint64_t v1 = (void *)sub_18AF3F79C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFED0DC;
  sub_18AF22E38();
  return v3();
}

uint64_t sub_18AFED0DC()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  sub_18AF23168();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_18AF23180();
  if (v0) {

  }
  uint64_t v4 = sub_18AF311F8();
  v5(v4);
  sub_18AF309A4();
  sub_18AF2FCE4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AFED228()
{
  sub_18AF2A56C();
  sub_18AFE2998(0);
  uint64_t v1 = self;
  v0[8] = v1;
  id v2 = objc_msgSend(v1, sel_processInfo);
  uint64_t v3 = (void *)MEMORY[0x18C128F60](0xD000000000000016, 0x800000018B1D4D20);
  v0[9] = objc_msgSend(v2, sel_beginActivityWithOptions_reason_, 0xFFFFFFLL, v3);

  sub_18AF2066C((uint64_t)&dword_1E9125E78);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_18AFED364;
  return v6();
}

uint64_t sub_18AFED364()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFED440()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void *)(v0 + 72);
  id v2 = objc_msgSend(*(id *)(v0 + 64), sel_processInfo);
  objc_msgSend(v2, sel_endActivity_, v1);

  swift_unknownObjectRelease();
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AFED4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 96) = a2;
  *(void *)(v3 + 104) = a3;
  return sub_18AF18660((uint64_t)sub_18AFED4F8, 0);
}

uint64_t sub_18AFED4F8()
{
  uint64_t v24 = v0;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_18AF41270(v2, (uint64_t)qword_1E91253B0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (sub_18AF2FF8C(v4))
  {
    uint64_t v5 = (_DWORD *)sub_18AF2A5F0();
    uint64_t v22 = sub_18AF16B9C();
    _DWORD *v5 = 136315138;
    swift_retain();
    sub_18AF40CEC();
    uint64_t v6 = sub_18AF1FFE8();
    uint64_t v8 = sub_18AF476A0(v6, v7, &v22);
    sub_18AFFC730(v8, v0 + 11);
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB1C(&dword_18AF10000, v3, v1, "%s performing push sync");
    sub_18AF351C4();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF38FA4();
  }

  id v9 = static SyncEngine.defaultOperationGroup()();
  v0[14] = v9;
  unint64_t v10 = sub_18AFFD160();
  sub_18AF36054(v10, v11, v9);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  id v12 = v9;
  v0[15] = Dictionary.init(dictionaryLiteral:)();
  id v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_18AF35BFC(v13);
  uint64_t v16 = v15;
  if (v15 && (sub_18AFFBB68() & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for SyncEngine();
    uint64_t v22 = 0;
    char v23 = 2;
    sub_18AF36168((uint64_t)&v22, v14, v16);
    sub_18AFFD114();
    sub_18AFFD2AC();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AFFBE24();
  id v17 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_task_alloc();
  uint64_t v19 = (void *)sub_18AF3A8D0(v18);
  *uint64_t v19 = v20;
  v19[1] = sub_18AFED7EC;
  sub_18AFFD2F0();
  return sub_18AF1E814();
}

uint64_t sub_18AFED7EC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {

  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFED8D0()
{
  sub_18AF339B8();
  os_log_type_t v1 = *(void **)(v0 + 112);

  sub_18AFFC4E4();
  swift_bridgeObjectRelease_n();
  sub_18AF32614();
  sub_18AF384DC();
  return v2();
}

uint64_t sub_18AFED948()
{
  *(void *)(v1 + 24) = v0;
  return sub_18AF18660((uint64_t)sub_18AFED964, v0);
}

uint64_t sub_18AFED964()
{
  sub_18AF30750();
  sub_18AF18F44();
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    unint64_t v26 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = 32;
    do
    {
      id v6 = *(id *)(v2 + v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_18AFFDB18();
      sub_18AFFDB0C();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += 16;
      --v3;
    }
    while (v3);
    unint64_t v7 = v26;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v7 = MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = sub_18AFC0D64(v7);
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 + 16);
  if (v11)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    id v12 = (unsigned char *)(v10 + 40);
    do
    {
      id v13 = (void *)*((void *)v12 - 1);
      if (*v12 == 1) {
        id v14 = v13;
      }
      else {
        id v15 = objc_msgSend(v13, sel_zoneID);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v12 += 16;
      --v11;
    }
    while (v11);
    unint64_t v16 = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v16 = MEMORY[0x1E4FBC860];
  }
  v0[2] = sub_18AF48760(v16);
  unint64_t v17 = CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
  uint64_t v18 = sub_18AF48760(v17);
  sub_18AFCE4EC(v18);
  v0[4] = sub_18AF19D54(v0[2]);
  swift_bridgeObjectRelease();
  v0[5] = sub_18AFBF634(v8);
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_task_alloc();
  uint64_t v20 = (void *)sub_18AF22D78(v19);
  *uint64_t v20 = v21;
  v20[1] = sub_18AFEDBA8;
  sub_18AF40DB4();
  sub_18AF2ACD0();
  return sub_18AFEDCE8(v22, v23);
}

uint64_t sub_18AFEDBA8()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *v0;
  sub_18AF16CB4();
  *id v6 = v5;
  *(void *)(v8 + 56) = v7;
  swift_task_dealloc();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](sub_18AFEDCCC, v4, 0);
}

uint64_t sub_18AFEDCCC()
{
  sub_18AF149EC();
  return v1(*(void *)(v0 + 56));
}

uint64_t sub_18AFEDCE8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  void v3[3] = a1;
  return sub_18AF18660((uint64_t)sub_18AFEDD08, v2);
}

uint64_t sub_18AFEDD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  uint64_t Strong = swift_weakLoadStrong();
  v22[6] = Strong;
  if (Strong)
  {
    uint64_t v27 = Strong;
    unint64_t v28 = v22[4];
    unint64_t v29 = v28 >> 62;
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v62) {
        goto LABEL_6;
      }
    }
    else if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    unint64_t v30 = v22[3];
    if (v30 >> 62) {
      goto LABEL_33;
    }
    if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      while (1)
      {
LABEL_6:
        unint64_t v31 = swift_bridgeObjectRetain();
        uint64_t v32 = sub_18AF48760(v31);
        if (v29)
        {
          swift_bridgeObjectRetain();
          unint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v40 = MEMORY[0x1E4FBC860];
        if (!v29) {
          break;
        }
        a11 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v29 & 0x8000000000000000) == 0)
        {
          a10 = (char *)v32;
          uint64_t v41 = 0;
          uint64_t v42 = v22[4] + 32;
          do
          {
            if ((v28 & 0xC000000000000001) != 0) {
              id v43 = (id)MEMORY[0x18C1298C0](v41, v22[4]);
            }
            else {
              id v43 = *(id *)(v42 + 8 * v41);
            }
            uint64_t v44 = v43;
            ++v41;
            id v45 = objc_msgSend(v43, sel_zoneID);

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            sub_18AFFDB18();
            sub_18AF3DDFC();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v29 != v41);
          uint64_t v40 = a11;
          break;
        }
        __break(1u);
LABEL_33:
        swift_bridgeObjectRetain();
        uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v63) {
          goto LABEL_34;
        }
      }
      uint64_t v46 = v22[5];
      uint64_t v47 = sub_18AFEBA9C(v40, v32);
      uint64_t v48 = sub_18AF19D54(v47);
      swift_bridgeObjectRelease();
      if (*(void *)(v46 + 160))
      {
        uint64_t v49 = v22[4];
        uint64_t v50 = (void *)sub_18AF3488C();
        v22[7] = v50;
        uint64_t v50[2] = v48;
        v50[3] = v49;
        void v50[4] = v27;
        a10 = (char *)&dword_1E9127288 + dword_1E9127288;
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v51 = swift_task_alloc();
        uint64_t v52 = (void *)sub_18AF22A04(v51);
        *uint64_t v52 = v53;
        v52[1] = sub_18AFEE118;
        sub_18AF2ACD0();
        return v56(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14);
      }
      swift_release();
    }
LABEL_34:
    swift_release();
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_18AF41270(v33, (uint64_t)qword_1E91253B0);
    uint64_t v34 = (void *)Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (sub_18AF3A2EC(v35))
    {
      uint64_t v36 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC120();
      *uint64_t v36 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFBDD8();
      sub_18AF40CEC();
      uint64_t v37 = sub_18AF37A48();
      v22[2] = sub_18AF403F4(v37, v38, &a11);
      sub_18AFFD27C();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB34(&dword_18AF10000, v39, v23, "%s not getting related bundle IDs for deallocated engine");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }
  }
  sub_18AF149EC();
  sub_18AF2ACD0();
  return v56(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_18AFEE118()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  *(void *)(v6 + 72) = v5;
  swift_task_dealloc();
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFEE214()
{
  sub_18AF339B8();
  swift_release();
  sub_18AF149EC();
  return v0();
}

uint64_t sub_18AFEE270(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  *(_OWORD *)(v5 + 48) = *a2;
  return MEMORY[0x1F4188298](sub_18AFEE29C, 0, 0);
}

uint64_t sub_18AFEE29C()
{
  sub_18AF19FAC();
  if (*(void *)(v0 + 48))
  {
    swift_getObjectType();
    uint64_t v8 = (void *)(sub_18AF42FE8() + 8);
    uint64_t v7 = (uint64_t (*)(uint64_t))(*v8 + *(int *)*v8);
    swift_unknownObjectRetain();
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = (void *)sub_18AF22A04(v1);
    *uint64_t v2 = v3;
    v2[1] = sub_18AFEE3EC;
    uint64_t v4 = sub_18AF41784(*(void *)(v0 + 24));
    return v7(v4);
  }
  else
  {
    **(void **)(v0 + 16) = 0;
    sub_18AF16D48();
    return v6();
  }
}

uint64_t sub_18AFEE3EC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 72) = v3;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AFEE4BC()
{
  sub_18AF339B8();
  swift_unknownObjectRelease();
  **(void **)(v0 + 16) = *(void *)(v0 + 72);
  sub_18AF16D48();
  return v1();
}

uint64_t sub_18AFEE520()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 272;
  sub_18AF18528();
  sub_18AF402EC(v0 + 272, (uint64_t)aBlock, &qword_1E91250B8);
  uint64_t v3 = ObjectType;
  uint64_t result = sub_18AF401EC((uint64_t)aBlock, &qword_1E91250B8);
  if (!v3)
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_18AF412A0(v5, (uint64_t)qword_1E91253B0);
    sub_18AF3207C();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (sub_18AF3F328(v7))
    {
      uint64_t v8 = (_DWORD *)sub_18AF2A5F0();
      aBlock[0] = sub_18AF16B9C();
      *uint64_t v8 = 136315138;
      if ((sub_18AFFD1AC() & 1) == 0)
      {
        sub_18AF30C68();
        sub_18AFFCF40();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v9 = swift_release();
      uint64_t v18 = sub_18AF3F444(v9, v10, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AFFBC0C();
      sub_18AFFBB1C(&dword_18AF10000, v6, v7, "%s starting to listen for identity updates");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AFFBC0C();
    }

    sub_18AF393BC();
    *(unsigned char *)(v0 + 266) = 1;
    id v11 = objc_msgSend(self, sel_defaultCenter);
    unint64_t v16 = sub_18AFF937C;
    uint64_t v17 = v1;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_18AFEEAFC;
    ObjectType = &unk_1ED7F4E98;
    id v12 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v13 = objc_msgSend(v11, sel_addObserverForName_object_queue_usingBlock_, @"CKIdentityUpdateNotification", 0, 0, v12);
    _Block_release(v12);

    ObjectType = (void *)swift_getObjectType();
    aBlock[0] = (uint64_t)v13;
    sub_18AF41158();
    sub_18AFFB674((uint64_t)aBlock, v2, &qword_1E91250B8);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_18AFEE808(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1E91253B0);
  swift_retain_n();
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v18 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_retain();
    uint64_t v11 = sub_18AF40CEC();
    unint64_t v13 = v12;
    swift_release();
    uint64_t v17 = sub_18AF4095C(v11, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_18AF10000, v7, v8, "%s received identity update while waiting", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C12BB10](v10, -1, -1);
    MEMORY[0x18C12BB10](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v14 = type metadata accessor for TaskPriority();
  sub_18AF43708((uint64_t)v5, 1, 1, v14);
  id v15 = (void *)swift_allocObject();
  uint64_t v15[2] = 0;
  v15[3] = 0;
  v15[4] = a2;
  swift_retain();
  sub_18AF42DB4((uint64_t)v5, (uint64_t)&unk_1E9126FE0, (uint64_t)v15);
  return swift_release();
}

uint64_t sub_18AFEEA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](sub_18AFEEAA0, a4, 0);
}

uint64_t sub_18AFEEAA0()
{
  sub_18AF339B8();
  sub_18AFEEBF0();
  sub_18AFE8EA0();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AFEEAFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_18AFEEBF0()
{
  sub_18AF18528();
  sub_18AF402EC(v0 + 272, (uint64_t)&v4, &qword_1E91250B8);
  if (!*((void *)&v5 + 1)) {
    return sub_18AF401EC((uint64_t)&v4, &qword_1E91250B8);
  }
  sub_18AF5F658(&v4, &v6);
  sub_18AF393BC();
  *(unsigned char *)(v0 + 266) = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  sub_18AF41158();
  sub_18AFFB674((uint64_t)&v4, v0 + 272, &qword_1E91250B8);
  swift_endAccess();
  id v1 = objc_msgSend(self, sel_defaultCenter);
  sub_18AF25FCC(&v6, v7);
  uint64_t v2 = _bridgeAnythingToObjectiveC<A>(_:)();
  sub_18AF45F24(v2, sel_removeObserver_);

  swift_unknownObjectRelease();
  return sub_18AF40A30((uint64_t)&v6);
}

unint64_t static SyncEngine.coreAnalyticsEventNameState.getter()
{
  return sub_18AFFC12C(35);
}

unint64_t static SyncEngine.coreAnalyticsEventNameConfiguration.getter()
{
  return sub_18AFFC12C(43);
}

unint64_t static SyncEngine.coreAnalyticsKeyContainerIdentifier.getter()
{
  return sub_18AFFC12C(19);
}

uint64_t static SyncEngine.coreAnalyticsKeyEnvironment.getter()
{
  return 0x6D6E6F7269766E65;
}

uint64_t static SyncEngine.coreAnalyticsKeyDatabaseScope.getter()
{
  return 0x6573616261746164;
}

uint64_t static SyncEngine.coreAnalyticsKeySizeBytes.getter()
{
  return 0x65747942657A6973;
}

unint64_t static SyncEngine.coreAnalyticsKeyPendingDatabaseChangesCount.getter()
{
  return sub_18AFFC12C(22);
}

unint64_t static SyncEngine.coreAnalyticsKeyPendingRecordZoneChangesCount.getter()
{
  return sub_18AFFC12C(24);
}

unint64_t static SyncEngine.coreAnalyticsKeyZoneChangeTokenCount.getter()
{
  return sub_18AFFC12C(16);
}

unint64_t static SyncEngine.coreAnalyticsKeySecondsSinceFetchDatabaseChanges.getter()
{
  return sub_18AFFC12C(32);
}

uint64_t static SyncEngine.coreAnalyticsKeyAPIType.getter()
{
  return 0x65707954697061;
}

unint64_t static SyncEngine.coreAnalyticsKeyHasSubscriptionID.getter()
{
  return sub_18AFFC12C(17);
}

unint64_t static SyncEngine.coreAnalyticsKeyAutomaticallySync.getter()
{
  return sub_18AFFC12C(17);
}

unint64_t sub_18AFEEE50()
{
  unint64_t result = sub_18AFF4BCC(0x3E8uLL);
  byte_1E912FEC8 = result == 13;
  return result;
}

uint64_t sub_18AFEEE7C()
{
  id v1 = *(void **)(v0 + 144);
  id v2 = objc_msgSend(v1, sel_deviceContext);
  id v3 = objc_msgSend(v2, sel_testDeviceReferenceProtocol);
  swift_unknownObjectRelease();

  if (v3) {
    return 0;
  }
  id v5 = objc_msgSend(v1, sel_containerID);
  unsigned int v6 = objc_msgSend(v5, sel_isTestContainer);

  return v6 ^ 1;
}

void sub_18AFEEF20(uint64_t a1)
{
  type metadata accessor for Date();
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v2);
  sub_18AF38FBC();
  if (sub_18AFEEE7C())
  {
    sub_18AF18528();
    sub_18AF475F0();
    v3();
    Date.timeIntervalSinceNow.getter();
    double v5 = v4;
    sub_18AFFC480();
    sub_18AFFC4D8();
    v6();
    if (fabs(v5) > 60.0)
    {
      static Date.now.getter();
      sub_18AF41158();
      uint64_t v7 = sub_18AF41790();
      v8(v7);
      swift_endAccess();
      uint64_t v9 = sub_18AFEF4B8(a1);
      sub_18AFEF188(v9);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      if (v11)
      {
        unint64_t v12 = (void *)MEMORY[0x18C128F60](0xD000000000000023, 0x800000018B1D41D0);
        sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
        v13.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        sub_18AF311C8();
        AnalyticsSendEvent();
      }
      else
      {
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_18AF412A0(v14, (uint64_t)qword_1E91253B0);
        v13.super.Class isa = (Class)Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled((os_log_t)v13.super.isa, v15))
        {
          unint64_t v16 = (uint8_t *)sub_18AF389E0();
          *(_WORD *)unint64_t v16 = 0;
          _os_log_impl(&dword_18AF10000, (os_log_t)v13.super.isa, v15, "BUG IN CLOUDKIT: Unable to convert state telemetry payload to NSObjects", v16, 2u);
          sub_18AF388F8();
        }
      }
    }
  }
}

void sub_18AFEF188(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_18AF161EC(&qword_1E9125370);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  sub_18AFC2F00(a1, v30);
  uint64_t v3 = v30[0];
  int64_t v4 = v30[3];
  unint64_t v5 = v30[4];
  int64_t v24 = (unint64_t)(v30[2] + 64) >> 6;
  uint64_t v25 = v30[1];
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v6 = (v5 - 1) & v5;
  unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v7 = __clz(__rbit64(v10)) + (i << 6))
  {
    unint64_t v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v7);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    sub_18AF40A80(*(void *)(v3 + 56) + 32 * v7, (uint64_t)v29);
    v28[0] = v14;
    v28[1] = v13;
    sub_18AF40A80((uint64_t)v29, (uint64_t)v27);
    swift_bridgeObjectRetain_n();
    sub_18AF401EC((uint64_t)v28, &qword_1E9125448);
    sub_18AF161EC(&qword_1E9125468);
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();

      sub_18AF341D0();
      swift_release();
      return;
    }
    unint64_t v15 = sub_18AF7CF60(v14, v13);
    unint64_t v16 = v15;
    if (v17)
    {
      uint64_t v18 = (uint64_t *)(v2[6] + 16 * v15);
      swift_bridgeObjectRelease();
      *uint64_t v18 = v14;
      v18[1] = v13;
      uint64_t v19 = v2[7];

      *(void *)(v19 + 8 * v16) = v26;
      goto LABEL_28;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v15;
    uint64_t v20 = (uint64_t *)(v2[6] + 16 * v15);
    *uint64_t v20 = v14;
    v20[1] = v13;
    *(void *)(v2[7] + 8 * v15) = v26;
    uint64_t v21 = v2[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_33;
    }
    v2[2] = v23;
LABEL_28:
    int64_t v4 = i;
    unint64_t v5 = v6;
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_34;
    }
    if (v9 >= v24) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v25 + 8 * v9);
    int64_t i = v4 + 1;
    if (!v10)
    {
      int64_t i = v4 + 2;
      if (v4 + 2 >= v24) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v25 + 8 * i);
      if (!v10)
      {
        int64_t i = v4 + 3;
        if (v4 + 3 >= v24) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v25 + 8 * i);
        if (!v10)
        {
          int64_t i = v4 + 4;
          if (v4 + 4 >= v24) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v25 + 8 * i);
          if (!v10)
          {
            int64_t i = v4 + 5;
            if (v4 + 5 >= v24) {
              goto LABEL_31;
            }
            unint64_t v10 = *(void *)(v25 + 8 * i);
            if (!v10)
            {
              int64_t v11 = v4 + 6;
              while (v11 < v24)
              {
                unint64_t v10 = *(void *)(v25 + 8 * v11++);
                if (v10)
                {
                  int64_t i = v11 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              sub_18AF341D0();
              return;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v6 = (v10 - 1) & v10;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t sub_18AFEF4B8(uint64_t a1)
{
  uint64_t v2 = v1;
  v59[1] = a1;
  uint64_t v3 = type metadata accessor for Date();
  sub_18AF22CB0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_18AF19290();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v11 = sub_18AF19284(v10);
  MEMORY[0x1F4188790](v11);
  sub_18AF30B3C();
  uint64_t v14 = v12 - v13;
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)v59 - v16;
  id v60 = objc_msgSend(*(id *)(v2 + 144), sel_containerID);
  v59[0] = sub_18AFEFF64(v60);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v2 + 128);
  id v21 = objc_msgSend(*(id *)(v20 + 16), sel_lastFetchDatabaseChangesDate);
  if (v21)
  {
    BOOL v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  sub_18AF3F414(v14, v23);
  sub_18AF417B4(v14, (uint64_t)v17, &qword_1E9125470);
  if (sub_18AF436E0((uint64_t)v17, 1, v3))
  {
    sub_18AF401EC((uint64_t)v17, &qword_1E9125470);
    double v24 = 0.0;
  }
  else
  {
    sub_18AF475F0();
    v25();
    sub_18AF401EC((uint64_t)v17, &qword_1E9125470);
    Date.timeIntervalSinceNow.getter();
    double v24 = v26;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  }
  sub_18AF161EC(&qword_1E91255B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18B1F33F0;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x800000018B1D4230;
  *(void *)(inited + 48) = v59[0];
  *(void *)(inited + 56) = v19;
  sub_18AFFD9B8();
  *(void *)(v28 + 72) = v30;
  *(void *)(v28 + 80) = v29;
  uint64_t v31 = v30;
  sub_18AFFD9A4(v28);
  uint64_t v32 = v60;
  uint64_t v33 = CKContainerEnvironmentString((uint64_t)objc_msgSend(v60, sel_environment));
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  *(void *)(inited + 96) = v34;
  *(void *)(inited + 104) = v36;
  sub_18AFFD990();
  *(void *)(inited + 120) = v31;
  *(void *)(inited + 128) = v37;
  sub_18AFFD970();
  *(void *)(inited + 136) = v38;
  uint64_t v39 = CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v2 + 136), sel_databaseScope));
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  *(void *)(inited + 144) = v40;
  *(void *)(inited + 152) = v42;
  *(void *)(inited + 168) = v31;
  *(void *)(inited + 176) = 0x65747942657A6973;
  *(void *)(inited + 184) = 0xE900000000000073;
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  uint64_t v44 = sub_18AF34EA0(0, &qword_1E9125138);
  *(void *)(inited + 192) = isa;
  *(void *)(inited + 216) = v44;
  *(void *)(inited + 224) = 0xD000000000000016;
  sub_18AFFBDF0();
  *(void *)(inited + 232) = v45;
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  uint64_t v47 = *(void *)(v46 + 16);
  swift_bridgeObjectRelease();
  uint64_t v48 = MEMORY[0x1E4FBB550];
  *(void *)(inited + 240) = v47;
  *(void *)(inited + 264) = v48;
  *(void *)(inited + 272) = 0xD000000000000018;
  sub_18AFFBDF0();
  *(void *)(inited + 280) = v49;
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  uint64_t v51 = *(void *)(v50 + 16);
  swift_bridgeObjectRelease();
  *(void *)(inited + 288) = v51;
  *(void *)(inited + 312) = v48;
  *(void *)(inited + 320) = 0xD000000000000010;
  sub_18AFFBDF0();
  *(void *)(inited + 328) = v52;
  id v53 = objc_msgSend(*(id *)(v20 + 16), sel_serverChangeTokensByZoneID);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF34EA0(0, &qword_1E9125130);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  uint64_t v54 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v55 = sub_18AFE5A6C(v54, MEMORY[0x1E4FBBCC0]);
  swift_bridgeObjectRelease();
  *(void *)(inited + 336) = v55;
  *(void *)(inited + 360) = v48;
  *(void *)(inited + 368) = 0xD000000000000020;
  sub_18AFFBDF0();
  *(void *)(inited + 376) = v56;
  *(void *)(inited + 408) = MEMORY[0x1E4FBB3D0];
  *(double *)(inited + 384) = -v24;
  sub_18AF161EC(&qword_1E9125468);
  uint64_t v57 = Dictionary.init(dictionaryLiteral:)();

  return v57;
}

uint64_t sub_18AFEF960()
{
  *(void *)(v1 + 16) = v0;
  return sub_18AF18660((uint64_t)sub_18AFEF97C, v0);
}

uint64_t sub_18AFEF97C()
{
  sub_18AF339B8();
  if (sub_18AFEEE7C())
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 24) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_18AFEFA3C;
    sub_18AFFD740();
    return sub_18AFEFCA4();
  }
  else
  {
    sub_18AF16D48();
    return v3();
  }
}

uint64_t sub_18AFEFA3C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  *uint64_t v4 = v3;
  *(void *)(v6 + 32) = v5;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFEFB1C()
{
  sub_18AF2A56C();
  sub_18AFEF188(*(void *)(v0 + 32));
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v3 = (void *)MEMORY[0x18C128F60](0xD00000000000002BLL, 0x800000018B1D4200);
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_18AF3858C();
    AnalyticsSendEvent();
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_18AF412A0(v5, (uint64_t)qword_1E91253B0);
    v4.super.Class isa = (Class)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled((os_log_t)v4.super.isa, v6))
    {
      uint64_t v7 = (uint8_t *)sub_18AF389E0();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_18AF10000, (os_log_t)v4.super.isa, v6, "BUG IN CLOUDKIT: Unable to convert configuration telemetry payload to NSObjects", v7, 2u);
      sub_18AF388F8();
    }
  }

  sub_18AF16D48();
  return v8();
}

uint64_t sub_18AFEFCA4()
{
  *(void *)(v1 + 336) = v0;
  return sub_18AF18660((uint64_t)sub_18AFEFCC0, v0);
}

uint64_t sub_18AFEFCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF30E30();
  sub_18AF1A048();
  uint64_t v13 = *(void *)(v12 + 336);
  id v14 = objc_msgSend(*(id *)(v13 + 144), sel_containerID);
  uint64_t v15 = sub_18AFEFF64(v14);
  uint64_t v17 = v16;
  uint64_t v18 = v13 + 120;
  uint64_t v19 = (void *)MEMORY[0x18C12BC20](v18);

  if (!v19)
  {
    unint64_t v23 = 0xE500000000000000;
    uint64_t v24 = 0x7466697753;
    goto LABEL_6;
  }
  uint64_t v20 = (void *)MEMORY[0x18C12BC20](v18);
  if (v20)
  {
    id v21 = v20;
    id v22 = objc_msgSend(v20, sel_dataSource);

    if (v22)
    {
      swift_unknownObjectRelease();
      unint64_t v23 = 0xEA00000000006563;
      uint64_t v24 = 0x72756F5361746144;
LABEL_6:
      uint64_t v52 = v24;
      goto LABEL_8;
    }
  }
  uint64_t v52 = 0x76697463656A624FLL;
  unint64_t v23 = 0xEB00000000432D65;
LABEL_8:
  uint64_t v25 = *(void *)(v12 + 336);
  sub_18AF161EC(&qword_1E91255B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18B1F3400;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x800000018B1D4230;
  uint64_t v27 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v15;
  *(void *)(inited + 56) = v17;
  sub_18AFFD9B8();
  *(void *)(v28 + 72) = v27;
  *(void *)(v28 + 80) = v29;
  sub_18AFFD9A4(v28);
  uint64_t v30 = CKContainerEnvironmentString((uint64_t)objc_msgSend(v14, sel_environment));
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  *(void *)(inited + 96) = v31;
  *(void *)(inited + 104) = v33;
  sub_18AFFD990();
  *(void *)(inited + 120) = v27;
  *(void *)(inited + 128) = v34;
  sub_18AFFD970();
  *(void *)(inited + 136) = v35;
  uint64_t v36 = CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v25 + 136), sel_databaseScope));
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  *(void *)(inited + 144) = v37;
  *(void *)(inited + 152) = v39;
  *(void *)(inited + 168) = v27;
  *(void *)(inited + 176) = 0xD000000000000011;
  sub_18AFFBDF0();
  *(void *)(inited + 184) = v40;
  char v41 = sub_18AF38A9C();
  uint64_t v42 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 192) = v41 & 1;
  *(void *)(inited + 216) = v42;
  *(void *)(inited + 224) = 0xD000000000000011;
  *(void *)(inited + 232) = 0x800000018B1D42E0;
  *(unsigned char *)(inited + 240) = *(void *)(v25 + 376) != 0;
  *(void *)(inited + 264) = v42;
  *(void *)(inited + 272) = 0x65707954697061;
  *(void *)(inited + 312) = v27;
  *(void *)(inited + 280) = 0xE700000000000000;
  *(void *)(inited + 288) = v52;
  *(void *)(inited + 296) = v23;
  sub_18AF161EC(&qword_1E9125468);
  sub_18AF31160();
  Dictionary.init(dictionaryLiteral:)();

  sub_18AFFD2C8();
  sub_18AF37A90();
  return v45(v43, v44, v45, v46, v47, v48, v49, v50, v52, a10, a11, a12);
}

uint64_t sub_18AFEFF64(void *a1)
{
  if (objc_msgSend(a1, sel_isAppleInternal)) {
    goto LABEL_5;
  }
  if (qword_1E9125720 != -1) {
    swift_once();
  }
  if (byte_1E912FEC8 == 1)
  {
LABEL_5:
    id v2 = objc_msgSend(a1, sel_containerIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_18AF3563C();
}

uint64_t sub_18AFF0028()
{
  sub_18AF161EC(&qword_1E91255A8);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_1E912FE70 = result;
  return result;
}

id sub_18AFF0060()
{
  id result = objc_msgSend(self, sel_weakObjectsHashTable);
  qword_1E912FE88 = (uint64_t)result;
  return result;
}

void static SyncEngine.populateLoggingIDs(for:)()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  unint64_t v2 = v0 >> 62;
  if (v0 >> 62) {
    goto LABEL_48;
  }
  uint64_t v3 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  unint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    unint64_t v52 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v3 < 0)
    {
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v5 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x18C1298C0](v5, v1);
      }
      else
      {
        uint64_t v6 = *(void *)(v1 + 8 * v5 + 32);
        swift_retain();
      }
      ++v5;
      id v7 = objc_msgSend(*(id *)(v6 + 144), sel_containerID, v44);
      sub_18AF3144C();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      sub_18AF41790();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v3 != v5);
    unint64_t v4 = v52;
  }
  uint64_t v8 = sub_18AFC0C90(v4);
  uint64_t v50 = sub_18AFE5A6C(v8, MEMORY[0x1E4FBB958]);
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v53 = MEMORY[0x1E4FBC860];
    sub_18AF5B188();
    if ((v3 & 0x8000000000000000) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v9 = v53;
      do
      {
        if ((v1 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = MEMORY[0x18C1298C0](v10, v1);
        }
        else
        {
          uint64_t v11 = *(void *)(v1 + 8 * v10 + 32);
          swift_retain();
        }
        id v12 = objc_msgSend(*(id *)(v11 + 136), sel_databaseScope, v44);
        swift_release();
        unint64_t v14 = *(void *)(v53 + 16);
        unint64_t v13 = *(void *)(v53 + 24);
        if (v14 >= v13 >> 1)
        {
          sub_18AF34080(v13);
          sub_18AF5B188();
        }
        ++v10;
        *(void *)(v53 + 16) = v14 + 1;
        *(void *)(v53 + 8 * v14 + 32) = v12;
      }
      while (v3 != v10);
      goto LABEL_20;
    }
LABEL_50:
    __break(1u);
    __break(1u);
    return;
  }
LABEL_20:
  unint64_t v49 = *(void *)(sub_18AFC0CC0(v9) + 16);
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15)
    {
LABEL_22:
      unint64_t v16 = 0;
      uint64_t v47 = v15;
      unint64_t v48 = v1 & 0xC000000000000001;
      uint64_t v45 = v1 + 32;
      uint64_t v46 = v1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v44 = v1;
      while (1)
      {
        if (v48)
        {
          uint64_t v17 = MEMORY[0x18C1298C0](v16, v1);
        }
        else
        {
          if (v16 >= *(void *)(v46 + 16)) {
            goto LABEL_47;
          }
          uint64_t v17 = *(void *)(v45 + 8 * v16);
          swift_retain();
        }
        BOOL v18 = __OFADD__(v16, 1);
        unint64_t v19 = v16 + 1;
        if (v18)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          swift_bridgeObjectRetain();
          uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        unint64_t v51 = v19;
        unint64_t v2 = MEMORY[0x1E4FBC860];
        if (v50 >= 2)
        {
          id v20 = objc_msgSend(*(id *)(v17 + 144), sel_containerID);
          id v21 = objc_msgSend(v20, sel_containerIdentifier);

          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;

          sub_18AF33790(0, 1, 1, MEMORY[0x1E4FBC860]);
          unint64_t v2 = v25;
          unint64_t v27 = *(void *)(v25 + 16);
          unint64_t v26 = *(void *)(v25 + 24);
          if (v27 >= v26 >> 1)
          {
            sub_18AFFCA40(v26 > 1, v27 + 1);
            unint64_t v2 = v42;
          }
          *(void *)(v2 + 16) = v27 + 1;
          unint64_t v28 = v2 + 16 * v27;
          *(void *)(v28 + 32) = v22;
          *(void *)(v28 + 40) = v24;
        }
        if (v49 >= 2) {
          break;
        }
        if (!*(void *)(v2 + 16))
        {
          _print_unlocked<A, B>(_:_:)();
          uint64_t v30 = 0;
          unint64_t v32 = 0xE000000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v1 = v44;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
LABEL_41:
            sub_18AFFCA40(0, *(void *)(v2 + 16) + 1);
            unint64_t v2 = v40;
          }
LABEL_34:
          unint64_t v34 = *(void *)(v2 + 16);
          unint64_t v33 = *(void *)(v2 + 24);
          if (v34 >= v33 >> 1)
          {
            sub_18AFFCA40(v33 > 1, v34 + 1);
            unint64_t v2 = v41;
          }
          *(void *)(v2 + 16) = v34 + 1;
          unint64_t v35 = v2 + 16 * v34;
          *(void *)(v35 + 32) = v30;
          *(void *)(v35 + 40) = v32;
        }
        swift_bridgeObjectRetain();
        sub_18AF161EC((uint64_t *)&unk_1E9125540);
        sub_18AF36488();
        BidirectionalCollection<>.joined(separator:)();
        uint64_t v36 = swift_bridgeObjectRelease();
        MEMORY[0x1F4188790](v36);
        uint64_t v38 = v37 + 4;
        uint64_t v39 = v37 + 8;
        os_unfair_lock_lock(v37 + 8);
        sub_18AFF7984(v38);
        os_unfair_lock_unlock(v39);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_18AF474C4();
        sub_18AFBEC54();
        swift_release();
        swift_release();
        unint64_t v16 = v51;
        if (v51 == v47)
        {
          swift_bridgeObjectRelease();
          sub_18AF32064();
          return;
        }
      }
      uint64_t v29 = CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v17 + 136), sel_databaseScope));
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_41;
      }
      goto LABEL_34;
    }
  }
  sub_18AF32064();
  swift_bridgeObjectRelease();
}

uint64_t sub_18AFF0790(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFF07DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v10 = sub_18AF19284(v9);
  MEMORY[0x1F4188790](v10);
  sub_18AF38FBC();
  id v11 = objc_msgSend(self, sel_defaultCenter);
  sub_18AF4040C();
  uint64_t v12 = NSNotificationCenter.notifications(named:object:)();

  uint64_t v13 = type metadata accessor for TaskPriority();
  sub_18AF1826C(v5, v14, v15, v13);
  uint64_t v16 = sub_18AF33890();
  sub_18AFFC450();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v12;
  _OWORD v17[5] = v16;
  v17[6] = a3;
  v17[7] = a4;
  swift_retain();
  swift_retain();
  sub_18AF42DB4(v5, (uint64_t)&unk_1E9126FC8, (uint64_t)v17);
  BOOL v18 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC8CloudKit10SyncEngine_notificationObserverTasks);
  unint64_t v19 = (uint64_t *)&v18[4];
  id v20 = v18 + 6;
  os_unfair_lock_lock(v18 + 6);
  sub_18AFF9360(v19);
  os_unfair_lock_unlock(v20);
  swift_release();
  return swift_release();
}

uint64_t sub_18AFF0958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  uint64_t v8 = type metadata accessor for Notification();
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  sub_18AF161EC(&qword_1E9125480);
  v7[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v7[14] = v9;
  v7[15] = *(void *)(v9 - 8);
  v7[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AFF0AA8, 0, 0);
}

uint64_t sub_18AFF0AA8()
{
  sub_18AF2A56C();
  swift_retain();
  NSNotificationCenter.Notifications.makeAsyncIterator()();
  sub_18AF311C8();
  sub_18AF18528();
  sub_18AF38368(&qword_1E9125368, MEMORY[0x1E4F27FA0]);
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF304A0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFF0B9C;
  uint64_t v3 = sub_18AFFD468();
  return MEMORY[0x1F4187C78](v3);
}

uint64_t sub_18AFF0B9C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  void *v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AFF0C78()
{
  sub_18AF2A56C();
  sub_18AF40480(v0[13]);
  if (!v1)
  {
    sub_18AFFC8F8();
    v2();
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      uint64_t v10 = (uint64_t (*)(uint64_t))(v0[8] + *(int *)v0[8]);
      uint64_t v4 = (void *)swift_task_alloc();
      v0[19] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_18AFF0E90;
      uint64_t v5 = sub_18AF41784(v0[12]);
      return v10(v5);
    }
    sub_18AFFC4D8();
    v7();
  }
  sub_18AFFC4D8();
  v8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v9();
}

uint64_t sub_18AFF0E10()
{
  sub_18AF339B8();
  *(void *)(v0 + 40) = *(void *)(v0 + 144);
  sub_18AF161EC(&qword_1E9125660);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t sub_18AFF0E90()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AFF0F58()
{
  sub_18AF339B8();
  sub_18AFFC4D8();
  v0();
  sub_18AF38368(&qword_1E9125368, MEMORY[0x1E4F27FA0]);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF304A0(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AFF0B9C;
  uint64_t v4 = sub_18AFFD468();
  return MEMORY[0x1F4187C78](v4);
}

uint64_t sub_18AFF1030(uint64_t *a1, uint64_t a2)
{
  swift_retain();
  sub_18AFA75E4();
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t result = sub_18AFA7714(v4);
  uint64_t v6 = *a1;
  *(void *)(v6 + 16) = v4 + 1;
  *(void *)(v6 + 8 * v4 + 32) = a2;
  *a1 = v6;
  return result;
}

uint64_t sub_18AFF1098()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_notificationObserverTasks) + 24);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (void *)sub_18AF40DC0();
  sub_18AFFBAAC(v2, v3);
  os_unfair_lock_unlock(v1);
  uint64_t v4 = *(void *)(v11 + 16);
  if (v4)
  {
    uint64_t v5 = v11 + 32;
    uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v7 = MEMORY[0x1E4FBC248];
    uint64_t v8 = MEMORY[0x1E4FBC278];
    do
    {
      v5 += 8;
      uint64_t v9 = swift_retain();
      MEMORY[0x18C129450](v9, v6, v7, v8);
      swift_release();
      --v4;
    }
    while (v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFF1170()
{
  return sub_18AF40CEC();
}

uint64_t sub_18AFF1194()
{
  uint64_t result = MEMORY[0x18C128F60](0xD000000000000021, 0x800000018B1D4C90);
  qword_1E9126D70 = result;
  return result;
}

id static NSNotificationName.CKSyncEngineWillUpdateAccountInfo.getter()
{
  return sub_18AFF12A8(&qword_1E9125728, (void **)&qword_1E9126D70);
}

uint64_t sub_18AFF11F0()
{
  uint64_t result = MEMORY[0x18C128F60](0xD000000000000020, 0x800000018B1D4C60);
  qword_1E9126D78 = result;
  return result;
}

id static NSNotificationName.CKSyncEngineDidUpdateAccountInfo.getter()
{
  return sub_18AFF12A8(&qword_1E9125730, (void **)&qword_1E9126D78);
}

uint64_t sub_18AFF124C()
{
  uint64_t result = MEMORY[0x18C128F60](0xD00000000000001CLL, 0x800000018B1D4CE0);
  qword_1E9126D80 = result;
  return result;
}

id static NSNotificationName.CKSyncEngineWillScheduleSync.getter()
{
  return sub_18AFF12A8(&qword_1E9125738, (void **)&qword_1E9126D80);
}

id sub_18AFF12A8(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

id sub_18AFF12F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = (void *)MEMORY[0x18C128F60]();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v4, sel_initWithIdentifier_container_priority_, v7, a3, a4);

  return v8;
}

uint64_t sub_18AFF1368(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v30 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & v4;
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = a2 + 56;
  if ((v6 & v4) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v32 = v3;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = result;
    uint64_t v16 = (uint64_t *)(*(void *)(result + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v22 = *(void *)(a2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v25 = ~v20;
      for (unint64_t j = v21 + 1; ; unint64_t j = v27 + 1)
      {
        uint64_t v27 = j & v25;
        if (((*(void *)(v8 + (((j & v25) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v25)) & 1) == 0) {
          break;
        }
        unint64_t v28 = (void *)(v22 + 16 * v27);
        BOOL v29 = *v28 == v18 && v28[1] == v17;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_30;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t result = v15;
    int64_t v3 = v32;
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v11 >= v31) {
      return 1;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v11);
    int64_t v13 = v3 + 1;
    if (!v12)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v31) {
        return 1;
      }
      unint64_t v12 = *(void *)(v30 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v31) {
          return 1;
        }
        unint64_t v12 = *(void *)(v30 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v3 + 4;
          if (v3 + 4 >= v31) {
            return 1;
          }
          unint64_t v12 = *(void *)(v30 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v12 - 1) & v12;
    int64_t v32 = v13;
  }
  uint64_t v14 = v3 + 5;
  if (v3 + 5 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v3 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v31) {
      return 1;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_18AFF1610()
{
  sub_18AF339B8();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AFF1678()
{
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_18AFF16C0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_18AFF1704(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_18AFFD53C(a1, a2, a3, a4, a5);
  uint64_t v8 = (void *)(v7 + 16 * result);
  *uint64_t v8 = v9;
  v8[1] = v10;
  *(void *)(*(void *)(v6 + 56) + 8 * result) = v11;
  uint64_t v12 = *(void *)(v6 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v14;
  }
  return result;
}

uint64_t sub_18AFF1738(unint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = a5[7] + 16 * a1;
  *(void *)uint64_t v13 = a3;
  *(unsigned char *)(v13 + 8) = a4 & 1;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

void sub_18AFF1800(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_18AFFC294(a6 + 8 * (a1 >> 6));
  uint64_t v8 = (void *)(v6[6] + 16 * v7);
  *uint64_t v8 = v9;
  v8[1] = v10;
  uint64_t v11 = v6[7] + 16 * v7;
  *(void *)uint64_t v11 = v12;
  *(unsigned char *)(v11 + 8) = v13 & 1;
  uint64_t v14 = v6[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    long long v6[2] = v16;
  }
}

unint64_t sub_18AFF1854(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_18AFFD53C(a1, a2, a3, a4, a5);
  *(void *)(v8 + 8 * result) = v7;
  uint64_t v9 = *(void *)(v6 + 56) + 16 * result;
  *(void *)uint64_t v9 = v10;
  *(unsigned char *)(v9 + 8) = v11 & 1;
  uint64_t v12 = *(void *)(v6 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v14;
  }
  return result;
}

unint64_t sub_18AFF1890(unint64_t result, uint64_t a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

void sub_18AFF18D4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18AFFC294(a4 + 8 * (a1 >> 6));
  *(void *)(v4[6] + 8 * v5) = v6;
  *(void *)(v4[7] + 8 * v5) = v7;
  uint64_t v8 = v4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    v4[2] = v10;
  }
}

uint64_t sub_18AFF1918(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_18AF417B4(a3, a4[7] + 40 * a1, (uint64_t *)&unk_1E91250A8);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_18AFF1990(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_18AFF19D4(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
  sub_18AF366EC();
  if ((v7 & 1) == 0)
  {
LABEL_6:
    swift_isUniquelyReferenced_nonNull_native();
    sub_18AF3670C();
    Swift::UInt v11 = sub_18AF31160();
    sub_18AFF2AE0(v11, v12, v13);
    *uint64_t v2 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_7;
  }
  if (*(void *)(*(void *)(v5 + 48) + 8 * v6) != a2)
  {
    do
    {
      sub_18AFFC948();
      if ((v9 & 1) == 0) {
        goto LABEL_6;
      }
    }
    while (*(void *)(v8 + 8 * v6) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v6);
LABEL_7:
  *a1 = a2;
  return result;
}

#error "18AFF1C1C: call analysis failed (funcsize=105)"

#error "18AFF1DD0: call analysis failed (funcsize=105)"

uint64_t sub_18AFF1E24(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_18AFFD4E4();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    char v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v15 = (void *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_18AFFD4E4();
      if ((v19 & 1) == 0) {
        break;
      }
      uint64_t v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_18AFFC480();
  sub_18AFF2F60(v23, v24, v10, isUniquelyReferenced_nonNull_native);
  sub_18AF352F8(v25, v26, v27, v28, v29, v30, v31, v32, v33, v34);
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_18AFF1FB0(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  int v8 = a3 & 1;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  swift_bridgeObjectRetain();
  id v10 = a2;
  NSObject.hash(into:)();

  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v28 = v4;
  uint64_t v29 = a1;
  uint64_t v27 = a2;
  if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v28;
    *uint64_t v28 = 0x8000000000000000;
    id v22 = v10;
    sub_18AFF30FC(v27, v8, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v28 = v30;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v29 = v27;
    *(unsigned char *)(v29 + 8) = v8 != 0;
    return 1;
  }
  uint64_t v14 = ~v12;
  while (1)
  {
    uint64_t v15 = *(void *)(v9 + 48) + 16 * v13;
    uint64_t v16 = *(void **)v15;
    if (*(unsigned char *)(v15 + 8)) {
      break;
    }
    if (!v8) {
      goto LABEL_7;
    }
LABEL_8:
    unint64_t v13 = (v13 + 1) & v14;
    if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_9;
    }
  }
  if (!v8) {
    goto LABEL_8;
  }
LABEL_7:
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  id v17 = v16;
  id v18 = v10;
  id v19 = v17;
  char v20 = static NSObject.== infix(_:_:)();

  if ((v20 & 1) == 0) {
    goto LABEL_8;
  }

  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(*v28 + 48) + 16 * v13;
  uint64_t v25 = *(void **)v24;
  LOBYTE(v24) = *(unsigned char *)(v24 + 8);
  *(void *)uint64_t v29 = v25;
  *(unsigned char *)(v29 + 8) = v24;
  id v26 = v25;
  return 0;
}

uint64_t sub_18AFF21BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_18AF161EC(&qword_1E9126060);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    Swift::UInt v17 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v17;
    ++*(void *)(v4 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_18AFF2434()
{
  sub_18AF33850();
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  sub_18AF161EC(v3);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)();
  if (!v2[2])
  {
    swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    sub_18AF16CC4();
    return;
  }
  uint64_t v30 = v0;
  sub_18AFFD83C();
  uint64_t v6 = v2 + 7;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & v2[7];
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v4 + 56;
  swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = v18 + (v11 << 6))
  {
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(v2[6] + 8 * i);
    Swift::Int v21 = NSObject._rawHashValue(seed:)(v19);
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v10 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v10 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(void *)(*(void *)(v4 + 48) + 8 * v25) = v20;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    ++v11;
    if (!v6[v14])
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_32;
      }
      if (!v6[v11])
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_32;
        }
        if (!v6[v11]) {
          break;
        }
      }
    }
LABEL_20:
    sub_18AF43730();
    unint64_t v8 = v17 & v16;
  }
  int64_t v15 = v14 + 3;
  if (v15 >= v9)
  {
LABEL_32:
    swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_34;
  }
  if (v6[v15])
  {
    int64_t v11 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_32;
    }
    ++v15;
    if (v6[v11]) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_18AFF2684()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_18AF161EC((uint64_t *)&unk_1E9124C40);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    BOOL v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *BOOL v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_18AFF2930()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_18AF161EC(&qword_1E9124CE8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    unint64_t result = swift_release();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(v2 + 48) + 16 * i;
    id v17 = *(id *)v16;
    char v18 = *(unsigned char *)(v16 + 8);
    id v19 = *(id *)v16;
    unint64_t result = sub_18AF71928(v17, v18, v3);
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_18AFF2AE0(Swift::UInt a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_18AF70908();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18AF703C8();
      goto LABEL_14;
    }
    sub_18AFF21BC();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = *(void *)(v8 + 48);
    if (*(void *)(v11 + 8 * a2) == a1)
    {
LABEL_13:
      type metadata accessor for Scope(0);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == a1) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = a1;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
}

void sub_18AFF2C30(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_18AF70B30();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18AF704C8();
      goto LABEL_14;
    }
    sub_18AFF2434();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125560);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void sub_18AFF2DC8(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_18AF70B48();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18AF704E0();
      goto LABEL_14;
    }
    sub_18AFF2434();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_18AF34EA0(0, &qword_1E91255F0);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void sub_18AFF2F60(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_18AF70F64();
  }
  else
  {
    if (v10 > v9)
    {
      sub_18AF706E8();
      goto LABEL_22;
    }
    sub_18AFF2684();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a3 = v12 & ~v13;
  uint64_t v14 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v15 = *(void *)(v11 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v19 = (void *)(v15 + 16 * a3);
        BOOL v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v22 = (void *)(*(void *)(v21 + 48) + 16 * a3);
  *unint64_t v22 = a1;
  v22[1] = a2;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
}

void sub_18AFF30FC(void *a1, char a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::UInt v8 = a2 & 1;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_18AF711C8();
    }
    else
    {
      if (v10 > v9)
      {
        sub_18AF707F4();
        goto LABEL_16;
      }
      sub_18AFF2930();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v8);
    id v12 = a1;
    NSObject.hash(into:)();

    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v11 + 32);
    a3 = v13 & ~v14;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v15 = ~v14;
      do
      {
        uint64_t v16 = *(void *)(v11 + 48) + 16 * a3;
        BOOL v17 = *(void **)v16;
        if (*(unsigned char *)(v16 + 8))
        {
          if (v8) {
            goto LABEL_14;
          }
        }
        else if (!v8)
        {
LABEL_14:
          sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
          id v18 = v17;
          id v19 = v12;
          id v20 = v18;
          char v21 = static NSObject.== infix(_:_:)();

          if (v21) {
            goto LABEL_19;
          }
        }
        a3 = (a3 + 1) & v15;
      }
      while (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_16:
  uint64_t v22 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v23 = *(void *)(v22 + 48) + 16 * a3;
  *(void *)uint64_t v23 = a1;
  *(unsigned char *)(v23 + 8) = v8 != 0;
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
LABEL_19:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v22 + 16) = v26;
  }
}

uint64_t sub_18AFF32E4()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  sub_18AF7D0BC();
  uint64_t v3 = v2;
  char v5 = v4;
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v1;
  uint64_t v7 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_18AF161EC(&qword_1E9124EB8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);

  uint64_t v9 = *(void *)(*(void *)(v11 + 56) + 8 * v3);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  type metadata accessor for CKError(0);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  _NativeDictionary._delete(at:)();
  *uint64_t v1 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_18AFF3420()
{
  sub_18AFFCBB8();
  if (!v2)
  {
    uint64_t result = sub_18AFFDB84();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    sub_18AFC2B00(v1, result + 1);
    *uint64_t v0 = v4;
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_18AFFCDF4();
  sub_18AFF4790();
  sub_18AFFC344(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFF34C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF3564(a1, a2, a3, sub_18AFF3930);
}

#error "18AFF3524: call analysis failed (funcsize=27)"

uint64_t sub_18AFF354C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF3564(a1, a2, a3, sub_18AFF3C38);
}

#error "18AFF35B0: call analysis failed (funcsize=29)"

uint64_t sub_18AFF35D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF3564(a1, a2, a3, sub_18AFF3D88);
}

uint64_t sub_18AFF35F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF3564(a1, a2, a3, sub_18AFF3ED8);
}

uint64_t sub_18AFF3608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF3564(a1, a2, a3, sub_18AFF4028);
}

uint64_t sub_18AFF3620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF3564(a1, a2, a3, sub_18AFF4178);
}

uint64_t sub_18AFF3638()
{
  return sub_18AFF3678();
}

uint64_t sub_18AFF3658()
{
  return sub_18AFF3678();
}

uint64_t sub_18AFF3678()
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  sub_18AFF42C8();
  *uint64_t v0 = v2;

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFF3728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF3564(a1, a2, a3, sub_18AFF43F4);
}

uint64_t sub_18AFF3740(uint64_t a1, uint64_t a2)
{
  return sub_18AFF38C8(a1, a2, sub_18AFF4544);
}

uint64_t sub_18AFF3758(char a1, void *a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_18AFFBE08();
  sub_18AFF466C(a1, a2, v4);
  sub_18AFFC344(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFF37BC()
{
  sub_18AFFCBB8();
  if (!v2)
  {
    uint64_t result = sub_18AFFDB84();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    sub_18AFC2D04(v1, result + 1);
    *uint64_t v0 = v4;
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_18AFFCDF4();
  sub_18AFF4790();
  sub_18AFFC344(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFF3864(uint64_t a1, void *a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_18AFFBE08();
  id v5 = sub_18AFF48B0(a1, a2, v4);
  sub_18AFFC344((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

#error "18AFF3908: call analysis failed (funcsize=26)"

void sub_18AFF3930(uint64_t a1, char a2, void *a3, char a4)
{
  id v5 = v4;
  uint64_t v9 = *v4;
  sub_18AF7D134();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_18AF161EC(&qword_1E9127458);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_18AF7D134();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, &qword_1E9127460);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v16)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = *(void *)(v20 + 56) + 16 * v15;
    sub_18AF62BA4(*(id *)v22);
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_18AFF1854(v15, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_18AFF3A80(uint64_t a1, char a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  uint64_t v27 = a1;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v13 = (void *)*v4;
  sub_18AF7D170();
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_18AF161EC(&qword_1E9127450);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18)) {
    goto LABEL_5;
  }
  sub_18AF7D170();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v19 = v21;
LABEL_5:
  int v23 = a2 & 1;
  uint64_t v24 = *v5;
  if (v20)
  {
    uint64_t v25 = v24[7] + 16 * v19;
    sub_18AF62BA4(*(id *)v25);
    *(void *)uint64_t v25 = v27;
    *(unsigned char *)(v25 + 8) = v23 != 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    sub_18AFF1738(v19, (uint64_t)v12, v27, v23, v24);
  }
}

void sub_18AFF3C38(uint64_t a1, char a2, void *a3, char a4)
{
  id v5 = v4;
  uint64_t v9 = *v4;
  sub_18AF7D238();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_18AF161EC((uint64_t *)&unk_1E9127440);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_18AF7D238();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, &qword_1E91261F8);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v16)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = *(void *)(v20 + 56) + 16 * v15;
    sub_18AF62BA4(*(id *)v22);
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_18AFF1854(v15, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_18AFF3D88(uint64_t a1, char a2, void *a3, char a4)
{
  id v5 = v4;
  uint64_t v9 = *v4;
  sub_18AF7D0F8();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_18AF161EC(&qword_1E9124F18);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_18AF7D0F8();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, &qword_1E91255F0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v16)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = *(void *)(v20 + 56) + 16 * v15;
    sub_18AF62BA4(*(id *)v22);
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_18AFF1854(v15, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_18AFF3ED8(uint64_t a1, char a2, void *a3, char a4)
{
  id v5 = v4;
  uint64_t v9 = *v4;
  sub_18AF7D0F8();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_18AF161EC(&qword_1E9124DA0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_18AF7D0F8();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, &qword_1E91255F0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v16)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = *(void *)(v20 + 56) + 16 * v15;
    sub_18AF53C0C(*(id *)v22, *(unsigned char *)(v22 + 8));
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_18AFF1854(v15, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_18AFF4028(uint64_t a1, char a2, void *a3, char a4)
{
  id v5 = v4;
  uint64_t v9 = *v4;
  sub_18AF7D0BC();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_18AF161EC(&qword_1E9124FD8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_18AF7D0BC();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v16)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = *(void *)(v20 + 56) + 16 * v15;
    sub_18AF62BA4(*(id *)v22);
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_18AFF1854(v15, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_18AFF4178(uint64_t a1, char a2, void *a3, char a4)
{
  id v5 = v4;
  uint64_t v9 = *v4;
  sub_18AF7D0BC();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_18AF161EC((uint64_t *)&unk_1E9127420);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_18AF7D0BC();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v16)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = *(void *)(v20 + 56) + 16 * v15;
    sub_18AF53C0C(*(id *)v22, *(unsigned char *)(v22 + 8));
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_18AFF1854(v15, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_18AFF42C8()
{
  sub_18AF33850();
  uint64_t v30 = v1;
  uint64_t v3 = v2;
  char v4 = v0;
  char v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  Swift::Int v13 = *v0;
  sub_18AF7CF60(v14, v7);
  sub_18AFFBE70();
  if (v17)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v18 = v15;
  char v19 = v16;
  sub_18AF161EC(v3);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v6 & 1, v13))
  {
    uint64_t v20 = sub_18AFFC480();
    sub_18AF7CF60(v20, v21);
    sub_18AF2AD04();
    if (!v23) {
      goto LABEL_12;
    }
    uint64_t v18 = v22;
  }
  if (v19)
  {
    uint64_t v24 = *(void *)(*v4 + 56) + 16 * v18;
    v30(*(void *)v24, *(unsigned __int8 *)(v24 + 8));
    *(void *)uint64_t v24 = v12;
    *(unsigned char *)(v24 + 8) = (v10 & 1) != 0;
    sub_18AF16CC4();
  }
  else
  {
    unint64_t v25 = sub_18AF3DDFC();
    sub_18AFF1800(v25, v26, v8, v12, v27, v28);
    sub_18AF16CC4();
    swift_bridgeObjectRetain();
  }
}

void sub_18AFF43F4(uint64_t a1, char a2, void *a3, char a4)
{
  char v5 = v4;
  uint64_t v9 = *v4;
  sub_18AF7D0F8();
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  sub_18AF161EC(&qword_1E9124FF0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14)) {
    goto LABEL_5;
  }
  sub_18AF7D0F8();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, &qword_1E91255F0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = a2 & 1;
  uint64_t v20 = *v5;
  if (v16)
  {
    BOOL v21 = v19 != 0;
    uint64_t v22 = *(void *)(v20 + 56) + 16 * v15;
    sub_18AF62BA4(*(id *)v22);
    *(void *)uint64_t v22 = a1;
    *(unsigned char *)(v22 + 8) = v21;
  }
  else
  {
    sub_18AFF1854(v15, (uint64_t)a3, a1, v19, v20);
    id v23 = a3;
  }
}

void sub_18AFF4544(uint64_t a1, void *a2, char a3)
{
  char v4 = v3;
  uint64_t v7 = *v3;
  sub_18AF7D0BC();
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_18AF161EC(&qword_1E9124DC8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  sub_18AF7D0BC();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = *v4;
  if (v14)
  {
    uint64_t v18 = *(void *)(v17 + 56);

    *(void *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_18AFF18D4(v13, (uint64_t)a2, a1, v17);
    id v19 = a2;
  }
}

void sub_18AFF466C(char a1, void *a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  sub_18AF7D0BC();
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_18AF161EC(&qword_1E9125078);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  sub_18AF7D0BC();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = *v4;
  if (v14)
  {
    *(unsigned char *)(v17[7] + v13) = a1 & 1;
  }
  else
  {
    sub_18AFF1890(v13, (uint64_t)a2, a1 & 1, v17);
    id v18 = a2;
  }
}

void sub_18AFF4790()
{
  sub_18AF33850();
  char v2 = v1;
  char v4 = v3;
  char v6 = v5;
  uint64_t v7 = v0;
  char v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  uint64_t v26 = v13;
  v5(v13);
  sub_18AFFBE70();
  if (v16)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v17 = v14;
  char v18 = v15;
  sub_18AF161EC(v4);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v9 & 1, v12)) {
    goto LABEL_5;
  }
  uint64_t v19 = v6(v26);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, v2);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v7;
  if (v18)
  {
    uint64_t v22 = *(void *)(v21 + 56);

    *(void *)(v22 + 8 * v17) = v11;
    sub_18AF16CC4();
  }
  else
  {
    sub_18AFF18D4(v17, v26, v11, v21);
    sub_18AF16CC4();
    id v25 = v23;
  }
}

id sub_18AFF48B0(uint64_t a1, void *a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  sub_18AF7D0BC();
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_18AF161EC(&qword_1E91250A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  sub_18AF7D0BC();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v4;
  if (v14) {
    return (id)sub_18AFFB674(a1, v17[7] + 40 * v13, (uint64_t *)&unk_1E91250A8);
  }
  sub_18AFF1918(v13, (uint64_t)a2, a1, v17);

  return a2;
}

void sub_18AFF49E4(uint64_t a1, void *a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  sub_18AF7D0BC();
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_18AF161EC(&qword_1E9124EB8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  sub_18AF7D0BC();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v4;
  if (v14)
  {
    uint64_t v18 = v17[7];

    *(void *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_18AFF1990(v13, (uint64_t)a2, a1, v17);
    id v19 = a2;
  }
}

uint64_t sub_18AFF4B0C(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *char v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x18C1298D0](v7, v9, a2 & 1, v5);
  *char v2 = result;
  return result;
}

unint64_t sub_18AFF4BCC(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    uint64_t result = (__buf * (unsigned __int128)v1) >> 64;
    if (__buf * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > __buf * v1)
      {
        do
        {
          unint64_t __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v2 > __buf * v1);
        return (__buf * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_18AFF4C58(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    char v6 = (void *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_18AF6FC30(0, v5, v6);
    unint64_t v7 = sub_18AFF4DEC(v6, v5, v3, a2);
    swift_release();
  }
  else
  {
    uint64_t v8 = (unint64_t *)swift_slowAlloc();
    sub_18AF6FC30(0, v5, v8);
    unint64_t v7 = sub_18AFF4DEC(v8, v5, v3, a2);
    swift_release();
    MEMORY[0x18C12BB10](v8, -1, -1);
  }
  return v7;
}

unint64_t sub_18AFF4DEC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v36 = *(void *)(a3 + 16);
  if (!v36)
  {
    uint64_t v30 = 0;
    goto LABEL_22;
  }
  uint64_t v6 = a4 + 56;
  uint64_t v35 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v33 = 0;
  for (uint64_t i = 0; i != v36; uint64_t i = v26 + 1)
  {
    uint64_t v37 = i;
    uint64_t v8 = v35 + 16 * i;
    uint64_t v9 = *(void **)v8;
    Swift::UInt v10 = *(unsigned __int8 *)(v8 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v10);
    id v11 = v9;
    NSObject.hash(into:)();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v14 = v12 & ~v13;
    if (((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
    {
LABEL_12:

LABEL_13:
      uint64_t v26 = v37;
      continue;
    }
    uint64_t v15 = ~v13;
    while (1)
    {
      uint64_t v16 = *(void *)(a4 + 48) + 16 * v14;
      unint64_t v17 = *(void **)v16;
      if ((*(unsigned char *)(v16 + 8) & 1) == 0) {
        break;
      }
      if (v10)
      {
        sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
        id v18 = v17;
        id v19 = v11;
        id v20 = v18;
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          goto LABEL_16;
        }
      }
LABEL_11:
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_12;
      }
    }
    if (v10) {
      goto LABEL_11;
    }
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
    id v22 = v17;
    id v23 = v11;
    id v24 = v22;
    char v25 = static NSObject.== infix(_:_:)();

    if ((v25 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_16:

    uint64_t v27 = (v14 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v28 = *(unint64_t *)((char *)a1 + v27);
    *(unint64_t *)((char *)a1 + v27) = v28 | (1 << v14);
    if ((v28 & (1 << v14)) != 0) {
      goto LABEL_13;
    }
    BOOL v29 = __OFADD__(v33++, 1);
    uint64_t v26 = v37;
    if (v29)
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a2;
  uint64_t v30 = v33;
LABEL_22:
  swift_retain();
  return sub_18AFF5054(a1, v5, v30, a4);
}

unint64_t sub_18AFF5054(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_18AF161EC(&qword_1E9124CE8);
  unint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v6 = result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v11 << 6);
    }
    else
    {
      uint64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_30;
      }
      if (v14 >= a2)
      {
LABEL_27:
        swift_release();
        return v6;
      }
      unint64_t v15 = a1[v14];
      ++v11;
      if (!v15)
      {
        uint64_t v11 = v14 + 1;
        if (v14 + 1 >= a2) {
          goto LABEL_27;
        }
        unint64_t v15 = a1[v11];
        if (!v15)
        {
          uint64_t v11 = v14 + 2;
          if (v14 + 2 >= a2) {
            goto LABEL_27;
          }
          unint64_t v15 = a1[v11];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= a2) {
              goto LABEL_27;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_31;
                }
                if (v11 >= a2) {
                  goto LABEL_27;
                }
                unint64_t v15 = a1[v11];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    }
    uint64_t v17 = *(void *)(a4 + 48) + 16 * v13;
    id v18 = *(id *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    id v20 = *(id *)v17;
    unint64_t result = sub_18AF71928(v18, v19, v6);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_18AFF51F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_35:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_18AF161EC((uint64_t *)&unk_1E9124C40);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_18AFF5484()
{
  return 0;
}

void sub_18AFF548C(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = MEMORY[0x18C128C80](v10);
  if (a4) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a3;
  }
  if (v12 <= v11) {
    uint64_t v12 = v11;
  }
  if (v12 <= a5) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 4)
  {
    uint64_t v14 = MEMORY[0x18C128C90]();
    sub_18AFF66B4(&v34, a2, (void *)(v14 + 16));
    *a1 = v34;
  }
  else if (v10 >= 2)
  {
    uint64_t v33 = a1;
    sub_18AF33790(0, v10, 0, MEMORY[0x1E4FBC860]);
    uint64_t v16 = v15;
    unint64_t v17 = 0;
    uint64_t v18 = a2 + 32;
    while (v17 != v10)
    {
      uint64_t v19 = (uint64_t *)(v18 + 16 * v17);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      uint64_t v22 = v16[2];
      if (v22)
      {
        BOOL v23 = v16[4] == v21 && v16[5] == v20;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          *uint64_t v33 = v17;
          return;
        }
        if (v22 != 1)
        {
          BOOL v24 = v16[6] == v21 && v16[7] == v20;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_40;
          }
          if (v22 != 2)
          {
            unint64_t v25 = v16 + 9;
            uint64_t v26 = 2;
            while (1)
            {
              uint64_t v27 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                break;
              }
              BOOL v28 = *(v25 - 1) == v21 && *v25 == v20;
              if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_40;
              }
              v25 += 2;
              ++v26;
              if (v27 == v22) {
                goto LABEL_36;
              }
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_36:
      unint64_t v30 = v16[2];
      unint64_t v29 = v16[3];
      swift_bridgeObjectRetain_n();
      if (v30 >= v29 >> 1)
      {
        sub_18AF33790(v29 > 1, v30 + 1, 1, (uint64_t)v16);
        uint64_t v16 = v32;
      }
      ++v17;
      void v16[2] = v30 + 1;
      uint64_t v31 = &v16[2 * v30];
      v31[4] = v21;
      v31[5] = v20;
      swift_bridgeObjectRelease();
      if (v17 == v10)
      {
        swift_bridgeObjectRelease();
        *uint64_t v33 = v10;
        return;
      }
    }
    __break(1u);
  }
  else
  {
    *a1 = v10;
  }
}

void sub_18AFF56C4(uint64_t *a1, unint64_t a2, unint64_t a3, char a4, unint64_t *a5)
{
  LOBYTE(v6) = a4;
  int64_t v8 = a2;
  uint64_t v9 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_60:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v11 = MEMORY[0x18C128C80](v10);
  if (v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a3;
  }
  if (v12 <= v11) {
    uint64_t v12 = v11;
  }
  if (v12 <= (uint64_t)a5) {
    uint64_t v13 = (uint64_t)a5;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 4)
  {
    uint64_t v15 = MEMORY[0x18C128C90]();
    sub_18AFF6864(&v37, v8, (Swift::Int *)(v15 + 16));
    *a1 = v37;
    return;
  }
  if (v10 >= 2)
  {
    unint64_t v37 = MEMORY[0x1E4FBC860];
    sub_18AFF4B0C(v10, 0);
    a5 = &v37;
    specialized Array._endMutation()();
    if (v9)
    {
      if (v8 < 0) {
        a5 = (unint64_t *)v8;
      }
      else {
        a5 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 < 0)
      {
LABEL_62:
        __break(1u);
        return;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v9)
    {
LABEL_56:
      swift_bridgeObjectRelease();
      *a1 = v9;
      return;
    }
    a3 = 0;
    int64_t v34 = v8;
    unint64_t v35 = v8 & 0xC000000000000001;
    int64_t v31 = v8 + 32;
    uint64_t v32 = v8 & 0xFFFFFFFFFFFFFF8;
    uint64_t v33 = v9;
    while (1)
    {
      if (a3 == v9) {
        goto LABEL_59;
      }
      if (v35)
      {
        id v16 = (id)MEMORY[0x18C1298C0](a3, v8);
      }
      else
      {
        if (a3 >= *(void *)(v32 + 16))
        {
          __break(1u);
          goto LABEL_62;
        }
        id v16 = *(id *)(v31 + 8 * a3);
      }
      unint64_t v17 = v16;
      unint64_t v18 = v37;
      if (v37 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v19) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v19 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v19) {
          goto LABEL_49;
        }
      }
      uint64_t v9 = v18 & 0xC000000000000001;
      if ((v18 & 0xC000000000000001) != 0) {
        id v20 = (id)MEMORY[0x18C1298C0](0, v18);
      }
      else {
        id v20 = *(id *)(v18 + 32);
      }
      uint64_t v21 = v20;
      a5 = (unint64_t *)sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      char v22 = static NSObject.== infix(_:_:)();

      if (v22)
      {
LABEL_57:

        swift_bridgeObjectRelease_n();
        *a1 = a3;
        return;
      }
      if (v19 != 1)
      {
        if (v9) {
          id v23 = (id)MEMORY[0x18C1298C0](1, v18);
        }
        else {
          id v23 = *(id *)(v18 + 40);
        }
        BOOL v24 = v23;
        char v25 = static NSObject.== infix(_:_:)();

        if (v25) {
          goto LABEL_57;
        }
        if (v19 != 2)
        {
          uint64_t v26 = 6;
          while (1)
          {
            unint64_t v6 = v26 - 4;
            id v27 = v9 ? (id)MEMORY[0x18C1298C0](v26 - 4, v18) : *(id *)(v18 + 8 * v26);
            BOOL v28 = v27;
            int64_t v8 = v26 - 3;
            if (__OFADD__(v6, 1)) {
              break;
            }
            char v29 = static NSObject.== infix(_:_:)();

            if (v29) {
              goto LABEL_57;
            }
            ++v26;
            if (v8 == v19) {
              goto LABEL_49;
            }
          }
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
      }
LABEL_49:
      swift_bridgeObjectRelease();
      id v30 = v17;
      MEMORY[0x18C129220]();
      unint64_t v6 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6 >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++a3;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      a5 = &v37;
      specialized Array._endMutation()();

      uint64_t v9 = v33;
      int64_t v8 = v34;
      if (a3 == v33) {
        goto LABEL_56;
      }
    }
  }
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *a1 = v14;
}

uint64_t sub_18AFF5AB8(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_18AFF5B18(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t sub_18AFF5B78(void *a1)
{
  unint64_t v2 = v1;
  id v3 = a1;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t result = specialized ContiguousArray._endMutation()();
  uint64_t v5 = *v1;
  unint64_t v6 = *(void *)(v1[1] + 16);
  if (*v2)
  {
    swift_beginAccess();
    if (MEMORY[0x18C128C50](*(void *)(v5 + 16) & 0x3FLL) < (uint64_t)v6)
    {
      uint64_t v7 = *(void *)(v5 + 24) & 0x3FLL;
      if (v6 <= 0xF && v7 == 0)
      {
        uint64_t result = swift_release();
        *unint64_t v2 = 0;
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = sub_18AFF5FA8();
    uint64_t v10 = *v2;
    if (*v2)
    {
      swift_retain();
      sub_18AFF65F8((Swift::Int *)(v10 + 16));
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else if (v6 > 0xF)
  {
    uint64_t v7 = 0;
LABEL_11:
    uint64_t v9 = MEMORY[0x18C128C80](v6);
    return sub_18AFF605C(v9, v7, (void (*)(uint64_t, uint64_t, uint64_t))sub_18AFF624C);
  }
  return result;
}

void sub_18AFF5CB4(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v8 = v2[1];
  unint64_t v6 = v2 + 1;
  uint64_t v7 = v8;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v6 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_18AF26470();
    uint64_t v7 = *v6;
  }
  unint64_t v10 = *(void *)(v7 + 16);
  if (v10 >= *(void *)(v7 + 24) >> 1)
  {
    sub_18AF26470();
    uint64_t v7 = *v6;
  }
  *(void *)(v7 + 16) = v10 + 1;
  uint64_t v11 = v7 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  v3[1] = v7;
  unint64_t v12 = *(void *)(v7 + 16);
  uint64_t v13 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (MEMORY[0x18C128C50](*(void *)(v13 + 16) & 0x3FLL) < (uint64_t)v12)
    {
      uint64_t v14 = *(void *)(v13 + 24) & 0x3FLL;
      if (v12 <= 0xF && v14 == 0)
      {
        swift_release();
        *id v3 = 0;
        return;
      }
      goto LABEL_15;
    }
    sub_18AFF5FA8();
    if (*v3) {
      sub_18AFF5FF4();
    }
    else {
      __break(1u);
    }
  }
  else if (v12 > 0xF)
  {
    uint64_t v14 = 0;
LABEL_15:
    uint64_t v16 = MEMORY[0x18C128C80](v12);
    sub_18AFF605C(v16, v14, (void (*)(uint64_t, uint64_t, uint64_t))sub_18AFF6138);
  }
}

uint64_t sub_18AFF5E2C(void *a1)
{
  unint64_t v2 = v1;
  id v3 = a1;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t result = specialized ContiguousArray._endMutation()();
  uint64_t v5 = *v1;
  unint64_t v6 = *(void *)(v1[1] + 16);
  if (*v2)
  {
    swift_beginAccess();
    if (MEMORY[0x18C128C50](*(void *)(v5 + 16) & 0x3FLL) < (uint64_t)v6)
    {
      uint64_t v7 = *(void *)(v5 + 24) & 0x3FLL;
      if (v6 <= 0xF && v7 == 0)
      {
        uint64_t result = swift_release();
        *unint64_t v2 = 0;
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = sub_18AFF5FA8();
    if (*v2) {
      return sub_18AFF5FF4();
    }
    else {
      __break(1u);
    }
  }
  else if (v6 > 0xF)
  {
    uint64_t v7 = 0;
LABEL_11:
    uint64_t v9 = MEMORY[0x18C128C80](v6);
    return sub_18AFF605C(v9, v7, (void (*)(uint64_t, uint64_t, uint64_t))sub_18AFF624C);
  }
  return result;
}

void *sub_18AFF5F54(void *(*a1)(uint64_t *__return_ptr, uint64_t, void), uint64_t a2, uint64_t a3)
{
  uint64_t result = a1(&v5, a3 + 32, *(void *)(a3 + 16));
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

uint64_t sub_18AFF5FA8()
{
  uint64_t result = *v0;
  if (*v0)
  {
    uint64_t result = swift_isUniquelyReferenced_native();
    if (!result)
    {
      uint64_t result = *v0;
      if (*v0)
      {
        uint64_t v2 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v0 = v2;
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_18AFF5FF4()
{
  return _HashTable.UnsafeHandle.subscript.setter();
}

uint64_t sub_18AFF605C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  if (a2 <= a1) {
    a2 = a1;
  }
  uint64_t v5 = sub_18AFF60A8(v3[1], a2, 0, v4, a3);
  uint64_t result = swift_release();
  *uint64_t v3 = v5;
  return result;
}

uint64_t sub_18AFF60A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = MEMORY[0x18C128C80](*(void *)(a1 + 16));
  uint64_t v11 = 0;
  if (a3) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a2;
  }
  if (v12 <= v10) {
    uint64_t v12 = v10;
  }
  if (v12 <= a4) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 >= 5)
  {
    uint64_t v11 = MEMORY[0x18C128C90]();
    a5(a1, v11 + 16, v11 + 32);
  }
  return v11;
}

Swift::Int sub_18AFF6138(Swift::Int result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      if (__OFSUB__(1 << *a2, 1)) {
        break;
      }
      uint64_t v5 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Int sub_18AFF624C(Swift::Int result, Swift::Int *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    Swift::Int v5 = result + 32;
    while (1)
    {
      Swift::Int v6 = *a2;
      id v7 = *(id *)(v5 + 8 * v4);
      uint64_t result = NSObject._rawHashValue(seed:)(v6);
      if (__OFSUB__(1 << *a2, 1)) {
        break;
      }
      uint64_t v8 = _HashTable.UnsafeHandle._startIterator(bucket:)();

      if (v8)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Int sub_18AFF6340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int result = Hasher._finalize()();
  if (__OFSUB__(1 << *a5, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    uint64_t v10 = _HashTable.BucketIterator.currentValue.getter();
    uint64_t v11 = v10;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (void *)(a3 + 16 * v10);
      if (*v13 != a1 || v13[1] != a2)
      {
        do
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            break;
          }
          _HashTable.BucketIterator.advance()();
          uint64_t v15 = _HashTable.BucketIterator.currentValue.getter();
          uint64_t v11 = v15;
          if (v16) {
            break;
          }
          unint64_t v17 = (void *)(a3 + 16 * v15);
        }
        while (*v17 != a1 || v17[1] != a2);
      }
    }
    return v11;
  }
  return result;
}

Swift::Int sub_18AFF64A4(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4)
{
  Swift::Int result = NSObject._rawHashValue(seed:)(*a4);
  if (__OFSUB__(1 << *a4, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    uint64_t v7 = _HashTable.BucketIterator.currentValue.getter();
    if ((v8 & 1) == 0)
    {
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      do
      {
        id v9 = *(id *)(a2 + 8 * v7);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v7 = _HashTable.BucketIterator.currentValue.getter();
      }
      while ((v11 & 1) == 0);
    }
    return v7;
  }
  return result;
}

Swift::Int sub_18AFF65F8(Swift::Int *a1)
{
  Swift::Int result = NSObject._rawHashValue(seed:)(*a1);
  if (__OFSUB__(1 << *a1, 1))
  {
    __break(1u);
  }
  else
  {
    if (_HashTable.UnsafeHandle._startIterator(bucket:)())
    {
      while (1)
        _HashTable.BucketIterator.advance()();
    }
    return _HashTable.BucketIterator.currentValue.setter();
  }
  return result;
}

unint64_t sub_18AFF66B4(unint64_t *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
LABEL_14:
    *a1 = v3;
    return 1;
  }
  unint64_t v5 = 0;
  uint64_t v6 = a2 + 32;
  while (2)
  {
    unint64_t v13 = v5;
    uint64_t v7 = (void *)(v6 + 16 * v5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    unint64_t result = Hasher._finalize()();
    if (!__OFSUB__(1 << *a3, 1))
    {
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_bridgeObjectRelease();
      while (1)
      {
        unint64_t result = _HashTable.BucketIterator.currentValue.getter();
        if (v9) {
          break;
        }
        if (result >= v3)
        {
          __break(1u);
          goto LABEL_18;
        }
        char v10 = (void *)(v6 + 16 * result);
        BOOL v11 = *v10 == *v7 && v10[1] == v7[1];
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          unint64_t result = 0;
          *a1 = v13;
          return result;
        }
        _HashTable.BucketIterator.advance()();
      }
      _HashTable.BucketIterator.currentValue.setter();
      unint64_t v5 = v13 + 1;
      if (v13 + 1 != v3) {
        continue;
      }
      goto LABEL_14;
    }
    break;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_18AFF6864(void *a1, unint64_t a2, Swift::Int *a3)
{
  uint64_t v4 = a2;
  if (a2 >> 62) {
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  do
  {
    if (!v5)
    {
LABEL_19:
      *a1 = v5;
      return 1;
    }
    unint64_t v6 = 0;
    unint64_t v7 = v4 & 0xC000000000000001;
    uint64_t v8 = v4 + 32;
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFFF8;
    uint64_t v21 = v5;
    char v22 = a3;
    uint64_t v23 = v4;
    while (1)
    {
      if (v6 == v5) {
        goto LABEL_24;
      }
      sub_18AF33404(v6, v7 == 0, v4);
      id v10 = v7 ? (id)MEMORY[0x18C1298C0](v6, v4) : *(id *)(v8 + 8 * v6);
      BOOL v24 = v10;
      NSObject._rawHashValue(seed:)(*a3);
      if (__OFSUB__(1 << *a3, 1)) {
        break;
      }
      _HashTable.UnsafeHandle._startIterator(bucket:)();

      uint64_t v4 = v23;
      unint64_t v11 = _HashTable.BucketIterator.currentValue.getter();
      a3 = &qword_1EB279460;
      if ((v12 & 1) == 0)
      {
        do
        {
          if (v7)
          {
            id v13 = (id)MEMORY[0x18C1298C0](v11, v23);
            id v14 = (id)MEMORY[0x18C1298C0](v6, v23);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_23:
              __break(1u);
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
            if (v11 >= *(void *)(v9 + 16)) {
              goto LABEL_23;
            }
            uint64_t v15 = *(void **)(v8 + 8 * v6);
            id v13 = *(id *)(v8 + 8 * v11);
            id v14 = v15;
          }
          char v16 = v14;
          sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
          char v17 = static NSObject.== infix(_:_:)();

          if (v17)
          {
            uint64_t result = 0;
            *a1 = v6;
            return result;
          }
          _HashTable.BucketIterator.advance()();
          unint64_t v11 = _HashTable.BucketIterator.currentValue.getter();
        }
        while ((v18 & 1) == 0);
      }
      _HashTable.BucketIterator.currentValue.setter();
      ++v6;
      uint64_t v5 = v21;
      a3 = v22;
      if (v6 == v21) {
        goto LABEL_19;
      }
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  while ((v5 & 0x8000000000000000) == 0);
  __break(1u);
  return result;
}

void sub_18AFF6AF4(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v4 >= 1)
  {
    unint64_t v8 = *(void *)(a3 + 16);
    if ((uint64_t)(v8 - v4) / 2 <= a1)
    {
      uint64_t v14 = a2;
      BOOL v15 = __OFSUB__(v8, a2);
      uint64_t v16 = v8 - a2;
      if (v15)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      if (v16 >= MEMORY[0x18C128C50](*a4 & 0x3F) / 3)
      {
        _HashTable.UnsafeHandle._startIterator(bucket:)();
        uint64_t v33 = _HashTable.BucketIterator.currentValue.getter();
        if ((v34 & 1) == 0 && v33 >= v14)
        {
          if (__OFSUB__(v33, v4))
          {
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          _HashTable.BucketIterator.currentValue.setter();
        }
        _HashTable.BucketIterator.advance()();
      }
      else
      {
        sub_18AFF5B18(v14, a3);
        if (v18 != v19 >> 1)
        {
          uint64_t v20 = v18;
          unint64_t v21 = v19 >> 1;
          if (v18 >= (uint64_t)(v19 >> 1))
          {
LABEL_62:
            __break(1u);
            return;
          }
          uint64_t v22 = v17;
          do
          {
            Swift::Int v23 = *a4;
            id v24 = *(id *)(v22 + 8 * v20);
            NSObject._rawHashValue(seed:)(v23);
            if (__OFSUB__(1 << *a4, 1)) {
              goto LABEL_53;
            }
            if (_HashTable.UnsafeHandle._startIterator(bucket:)())
            {
              while (1)
              {
                uint64_t v25 = _HashTable.BucketIterator.currentValue.getter();
                if ((v26 & 1) == 0 && v25 == v14) {
                  break;
                }
                _HashTable.BucketIterator.advance()();
              }
            }
            if (__OFSUB__(v14, v4)) {
              goto LABEL_54;
            }
            _HashTable.BucketIterator.currentValue.setter();

            BOOL v15 = __OFADD__(v14++, 1);
            if (v15) {
              goto LABEL_55;
            }
          }
          while (++v20 != v21);
        }
        swift_unknownObjectRelease();
      }
    }
    else
    {
      if (MEMORY[0x18C128C50](*a4 & 0x3F) / 3 <= a1)
      {
        _HashTable.UnsafeHandle._startIterator(bucket:)();
        uint64_t v27 = _HashTable.BucketIterator.currentValue.getter();
        if ((v28 & 1) == 0 && v27 < a1)
        {
          if (__OFADD__(v27, v4))
          {
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
          _HashTable.BucketIterator.currentValue.setter();
        }
        _HashTable.BucketIterator.advance()();
      }
      else
      {
        if (a1 < 0)
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if (v8 < a1)
        {
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        if (a1)
        {
          swift_retain();
          uint64_t v9 = 0;
          while (1)
          {
            Swift::Int v10 = *a4;
            id v11 = *(id *)(a3 + 32 + 8 * v9);
            NSObject._rawHashValue(seed:)(v10);
            if (__OFSUB__(1 << *a4, 1)) {
              break;
            }
            if (_HashTable.UnsafeHandle._startIterator(bucket:)())
            {
              while (1)
              {
                uint64_t v12 = _HashTable.BucketIterator.currentValue.getter();
                if ((v13 & 1) == 0 && v12 == v9) {
                  break;
                }
                _HashTable.BucketIterator.advance()();
              }
            }
            if (__OFADD__(v9, v4)) {
              goto LABEL_50;
            }
            ++v9;
            _HashTable.BucketIterator.currentValue.setter();

            if (v9 == a1)
            {
              swift_release();
              goto LABEL_38;
            }
          }
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
      }
LABEL_38:
      uint64_t v29 = a4[1];
      if (__OFSUB__(v29 >> 6, v4))
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v30 = 1 << *a4;
      BOOL v15 = __OFSUB__(v30, 1);
      uint64_t v31 = v30 - 1;
      if (v15)
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v32 = (v31 & (((v29 >> 6) - v4) >> 63)) + (v29 >> 6) - v4;
      if (v32 < v31) {
        uint64_t v31 = 0;
      }
      a4[1] = a4[1] & 0x3F | ((v32 - v31) << 6);
    }
  }
}

uint64_t sub_18AFF6F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v36) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v37 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v36) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v36) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v36) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v36)
              {
LABEL_48:
                sub_18AF341D0();
                return v2;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v14 >= v36) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v37 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }
LABEL_50:
                __break(1u);
              }
              int64_t v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      unint64_t v7 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      int64_t v9 = v14;
    }
    uint64_t v22 = *(void *)(v2 + 48);
    Swift::Int v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        char v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x1F4188790](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_18AFF73D4((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      sub_18AF341D0();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_18AFF73D4((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      sub_18AF341D0();
      MEMORY[0x18C12BB10](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t sub_18AFF73D4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v36 = v9 + 6;
                while (v36 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_14;
                  }
                }
                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return sub_18AFF51F4(v39, a2, v38, a3);
              }
              goto LABEL_14;
            }
          }
          int64_t v13 = v18;
        }
LABEL_14:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_15:
        Swift::Int v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        char v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          char v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_22;
          }
        }
LABEL_32:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_22:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t sub_18AFF76C8(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    unint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AFFD984();
  }
  return sub_18AF40F8C();
}

uint64_t sub_18AFF7724()
{
  sub_18AF2A56C();
  sub_18AFFDA44();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_18AF16AE4(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AFFBAD4();
  return sub_18AFE455C(v3, v4, v5, v6);
}

uint64_t sub_18AFF77C0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *sub_18AFF7820(unsigned char *result)
{
  *uint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t sub_18AFF7830()
{
  sub_18AF2A56C();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF38E00;
  uint64_t v3 = sub_18AF33C54();
  return sub_18AFE6394(v3, v4, v5, v6);
}

uint64_t sub_18AFF78C0(void *a1)
{
  id v1 = objc_msgSend(a1, sel_relatedApplicationBundleIdentifiers);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18AFF7918(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setRelatedApplicationBundleIdentifiers_, isa);
}

uint64_t sub_18AFF7984(void *a1)
{
  return sub_18AFF0790(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_18AFF79A0()
{
  sub_18AF16D80();
  uint64_t result = sub_18AFD269C();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_18AFF79C8(uint64_t *a1)
{
  return sub_18AFD26C8(*a1);
}

uint64_t sub_18AFF79F0()
{
  sub_18AF16D80();
  uint64_t result = sub_18AFD6D38();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_18AFF7A18(uint64_t *a1)
{
  return sub_18AFD6D64(*a1);
}

uint64_t sub_18AFF7A40()
{
  sub_18AF16D80();
  uint64_t v0 = sub_18AF3A69C();
  return sub_18AFFCF10(v0);
}

void sub_18AFF7A68(unsigned __int8 *a1)
{
}

uint64_t sub_18AFF7A8C()
{
  sub_18AF16D80();
  uint64_t v0 = sub_18AFE0858();
  return sub_18AFFCF10(v0);
}

uint64_t sub_18AFF7AB4(unsigned __int8 *a1)
{
  char v1 = sub_18AFFCB94(a1);
  return sub_18AFE0884(v1);
}

uint64_t sub_18AFF7AD8()
{
  sub_18AF16D80();
  uint64_t v0 = sub_18AFE0900();
  return sub_18AFFCF10(v0);
}

uint64_t sub_18AFF7B00(unsigned __int8 *a1)
{
  char v1 = sub_18AFFCB94(a1);
  return sub_18AFE092C(v1);
}

uint64_t sub_18AFF7B24()
{
  sub_18AF16D80();
  uint64_t v0 = sub_18AFE09A4();
  return sub_18AFFCF10(v0);
}

uint64_t sub_18AFF7B4C(unsigned __int8 *a1)
{
  char v1 = sub_18AFFCB94(a1);
  return sub_18AFE09D0(v1);
}

void *sub_18AFF7B70()
{
  sub_18AF16D80();
  uint64_t result = sub_18AFE0A78();
  *uint64_t v0 = result;
  return result;
}

void *sub_18AFF7B9C()
{
  sub_18AF16D80();
  uint64_t result = sub_18AFE28DC();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_18AFF7BC8()
{
  return sub_18AFE5A90();
}

uint64_t sub_18AFF7BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AFE5AF4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_18AFE5A9C);
}

uint64_t sub_18AFF7C18()
{
  return sub_18AFE5B84();
}

uint64_t sub_18AFF7C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AFE5AF4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_18AFE5BDC);
}

uint64_t sub_18AFF7C68()
{
  sub_18AF16D80();
  uint64_t v0 = sub_18AF38A9C();
  return sub_18AFFCF10(v0);
}

void sub_18AFF7C90(unsigned __int8 *a1)
{
}

uint64_t sub_18AFF7CB4()
{
  return type metadata accessor for SyncEngine();
}

void sub_18AFF7CBC()
{
  sub_18AFF8F30();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SyncEngine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SyncEngine);
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerSendDatabaseChangesBatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerSendDatabaseChangesBatch.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerSendDatabaseChangesBatch.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of SyncEngine.setMaxZonesPerSendDatabaseChangesBatch(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of SyncEngine.nextRecordZoneChangeBatch(_:)()
{
  sub_18AF19FAC();
  sub_18AF305FC();
  sub_18AFFC4FC();
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 584) + **(int **)(v0 + 584));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF16AE4(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF13048;
  uint64_t v4 = sub_18AF475C4();
  return v6(v4);
}

uint64_t dispatch thunk of SyncEngine.allowFetchAndModifyConcurrently(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerFetchChangesRequest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerFetchChangesRequest.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerFetchChangesRequest.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of SyncEngine.setMaxZonesPerFetchChangesRequest(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of SyncEngine.needsToReloadAccount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of SyncEngine.needsToReloadAccount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of SyncEngine.needsToReloadAccount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForDeviceToDeviceEncryption.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForDeviceToDeviceEncryption.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForDeviceToDeviceEncryption.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForAccountToVerifyTerms.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForAccountToVerifyTerms.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForAccountToVerifyTerms.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForIdentityUpdate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForIdentityUpdate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForIdentityUpdate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of SyncEngine.lastKnownAccountInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of SyncEngine.lastKnownAccountInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of SyncEngine.lastKnownAccountInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of SyncEngine.setLastKnownAccountInfo(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of SyncEngine.updateAccountInfo()()
{
  sub_18AF2A56C();
  sub_18AFFC4FC();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 928) + **(int **)(v0 + 928));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF13048;
  return v5();
}

uint64_t dispatch thunk of SyncEngine.notificationListener.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1032))();
}

uint64_t dispatch thunk of SyncEngine.notificationListener.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1040))();
}

uint64_t dispatch thunk of SyncEngine.notificationListener.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1048))();
}

uint64_t dispatch thunk of SyncEngine.subscriptionID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1080))();
}

uint64_t dispatch thunk of SyncEngine.defaultSubscriptionID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1088))();
}

uint64_t dispatch thunk of SyncEngine.didReceive(_:)()
{
  sub_18AF2A56C();
  sub_18AFFC4FC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AFFD2FC();
  return v4(v3);
}

uint64_t dispatch thunk of SyncEngine.saveSubscriptionIfNecessary(operationGroup:)()
{
  sub_18AF2A56C();
  sub_18AFFC4FC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AFFD2FC();
  return v4(v3);
}

uint64_t dispatch thunk of SyncEngine.lastForegroundTriggeredFetchDate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1128))();
}

uint64_t dispatch thunk of SyncEngine.lastForegroundTriggeredFetchDate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1136))();
}

uint64_t dispatch thunk of SyncEngine.lastForegroundTriggeredFetchDate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1144))();
}

uint64_t dispatch thunk of SyncEngine.earliestStartDateForSchedulerActivities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1152))();
}

uint64_t dispatch thunk of SyncEngine.earliestStartDateForSchedulerActivities.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1160))();
}

uint64_t dispatch thunk of SyncEngine.earliestStartDateForSchedulerActivities.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1168))();
}

uint64_t dispatch thunk of SyncEngine.syncActivityIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1176))();
}

uint64_t dispatch thunk of SyncEngine.userRequestedBackupActivityIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1184))();
}

uint64_t dispatch thunk of SyncEngine.isAutomaticSyncEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1192))();
}

uint64_t dispatch thunk of SyncEngine.isAutomaticSyncEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1200))();
}

uint64_t dispatch thunk of SyncEngine.isAutomaticSyncEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1208))();
}

uint64_t dispatch thunk of SyncEngine.performScheduledSyncActivity(_:)()
{
  sub_18AF2A56C();
  sub_18AFFC4FC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFF8A50;
  uint64_t v3 = sub_18AFFD2FC();
  return v4(v3);
}

uint64_t sub_18AFF8A50()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_18AFFD2C8();
  return v4(v3);
}

uint64_t dispatch thunk of SyncEngine.unregisterActivities()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1240))();
}

uint64_t dispatch thunk of SyncEngine.shouldScheduleSyncActivity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1248))();
}

uint64_t dispatch thunk of SyncEngine.shouldFetchChanges(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1256))();
}

uint64_t dispatch thunk of SyncEngine.submitActivityIfNecessary(identifier:earliestStartDate:priority:userRequestedBackupTask:relatedBundleIDs:)()
{
  sub_18AF1A048();
  sub_18AFFC4FC();
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 1312) + **(int **)(v0 + 1312));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF13048;
  uint64_t v4 = sub_18AFFDB0C();
  return v6(v4);
}

uint64_t dispatch thunk of SyncEngine.relatedBundleIDsForPendingWork()()
{
  sub_18AF2A56C();
  sub_18AFFC4FC();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 1360) + **(int **)(v0 + 1360));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AFFBA50;
  return v5();
}

uint64_t dispatch thunk of SyncEngine.schedulerReadiness()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1424))();
}

uint64_t dispatch thunk of SyncEngine.stateTelemetryPayload(byteCount:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1480))();
}

uint64_t dispatch thunk of SyncEngine.configurationTelemetryPayload()()
{
  sub_18AF2A56C();
  sub_18AFFC4FC();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v0 + 1496) + **(int **)(v0 + 1496));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF19364(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AFFBA50;
  return v5();
}

uint64_t dispatch thunk of SyncEngine.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1512))();
}

void sub_18AFF8F30()
{
  if (!qword_1E9125488)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9125488);
    }
  }
}

uint64_t sub_18AFF8F88()
{
  sub_18AF17DC8(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 104, 7);
}

void sub_18AFF8FEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x18C128F60]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setApplicationBundleIdentifierOverrideForNetworkAttribution_, v4);
}

int64_t sub_18AFF9050(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_18AFF9134(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a4 + 48) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_18AFF91B0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_18AFF9230()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18AFF9268()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_18AFF92B8()
{
  sub_18AF31148();
  sub_18AF338B4();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_18AF16AE4(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF35530();
  sub_18AF311B0();
  return sub_18AFF0958(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_18AFF9360(uint64_t *a1)
{
  return sub_18AFF1030(a1, v1);
}

uint64_t sub_18AFF937C(uint64_t a1)
{
  return sub_18AFEE808(a1, v1);
}

uint64_t sub_18AFF9384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AFF9394()
{
  return swift_release();
}

uint64_t sub_18AFF93A0()
{
  sub_18AF2A56C();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF33C54();
  return sub_18AFEEA80(v3, v4, v5, v6);
}

uint64_t sub_18AFF9434()
{
  sub_18AF2A56C();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF33C54();
  return sub_18AFE91D4(v3, v4, v5, v6);
}

uint64_t sub_18AFF94C4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18AFF94FC()
{
  sub_18AF2A56C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF4045C();
  return sub_18AFE8CC8(v3, v4, v5);
}

uint64_t sub_18AFF959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v9;
  void *v9 = v4;
  v9[1] = sub_18AFF9650;
  return sub_18AFCF3AC(a2, a3, v7, v8);
}

uint64_t sub_18AFF9650()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  sub_18AFFC354();
  return v9();
}

uint64_t sub_18AFF9724(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_18AFFBA38;
  return sub_18AFCDF58(a2);
}

uint64_t sub_18AFF97C4(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v9;
  void *v9 = v4;
  v9[1] = sub_18AFFBA38;
  return sub_18AFCFB34(a2, a3, v7, v8);
}

uint64_t sub_18AFF9878(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_18AFF9918;
  return sub_18AFCE134(a2);
}

uint64_t sub_18AFF9918()
{
  sub_18AF2A56C();
  char v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(unsigned char **)(v5 + 16) = v3 & 1;
  }
  sub_18AFFC354();
  return v9();
}

void sub_18AFF99F0(id *a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  Swift::Int v5 = a2;
  uint64_t v8 = *a4;
  if (a3)
  {
    uint64_t v9 = (Swift::Int *)(a3 + 16);
    swift_retain();
    Swift::Int v5 = sub_18AFF64A4(v8, (uint64_t)a1, v5, v9);
    char v11 = v10;
    uint64_t v13 = v12;
    swift_release();
    char v14 = v11 & 1;
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v13 = 0;
LABEL_9:
    char v14 = 1;
    goto LABEL_10;
  }
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  id v15 = *a1;
  char v16 = static NSObject.== infix(_:_:)();

  if (v16)
  {
    uint64_t v13 = 0;
    Swift::Int v5 = 0;
    char v14 = 0;
    goto LABEL_10;
  }
  if (v5 == 1) {
    goto LABEL_8;
  }
  id v17 = a1[1];
  char v18 = static NSObject.== infix(_:_:)();

  if (v18)
  {
    uint64_t v13 = 0;
    char v14 = 0;
    Swift::Int v5 = 1;
    goto LABEL_10;
  }
  if (v5 == 2)
  {
LABEL_8:
    uint64_t v13 = 0;
    Swift::Int v5 = 0;
    goto LABEL_9;
  }
  id v19 = a1[2];
  char v20 = static NSObject.== infix(_:_:)();

  if (v20)
  {
    uint64_t v13 = 0;
    char v14 = 0;
    Swift::Int v5 = 2;
  }
  else
  {
    uint64_t v21 = 3;
    while (1)
    {
      char v14 = v5 == v21;
      if (v5 == v21) {
        break;
      }
      id v22 = a1[v21];
      char v23 = static NSObject.== infix(_:_:)();

      ++v21;
      if (v23)
      {
        uint64_t v13 = 0;
        Swift::Int v5 = v21 - 1;
        goto LABEL_10;
      }
    }
    uint64_t v13 = 0;
    Swift::Int v5 = 0;
  }
LABEL_10:
  *(void *)a5 = v5;
  *(unsigned char *)(a5 + 8) = v14;
  *(void *)(a5 + 16) = v13;
}

uint64_t sub_18AFF9BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *char v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AFCF64C(a1, a2, a3, v8, v9);
}

uint64_t sub_18AFF9C88(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *char v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AF14A7C(a1, a2, a3, v8, v9);
}

uint64_t sub_18AFF9D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *char v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AFCF790(a1, a2, a3, v8, v9);
}

uint64_t sub_18AFF9E10(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *char v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AFCFCF4(a1, a2, a3, v8, v9);
}

uint64_t sub_18AFF9ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_18AFF9918;
  return sub_18AFCF8E0(a2, a3, a4);
}

uint64_t sub_18AFF9F84()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFFA020(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_18AFFBA84;
  return sub_18AFCE308(a2);
}

uint64_t sub_18AFFA0C0()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return v4(v3);
}

uint64_t sub_18AFFA15C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_18AFFBA84;
  return sub_18AFCFEAC(a2, a3, a4);
}

uint64_t sub_18AFFA20C()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_18AFFA2A8(void *a1)
{
}

uint64_t sub_18AFFA2B4()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF26358();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF262F8();
  sub_18AF37AC0();
  return sub_18AFE3378();
}

uint64_t sub_18AFFA348(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_18AFE27D8(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_18AFFA354()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_18AFFA384()
{
  sub_18AF2A56C();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF33C54();
  return sub_18AFE0C28(v3, v4, v5, v6);
}

uint64_t sub_18AFFA414()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18AFFA458()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 96, 7);
}

uint64_t sub_18AFFA4B0()
{
  sub_18AF2A56C();
  sub_18AFFDA44();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AFFBAD4();
  return sub_18AFE01B8(v3, v4, v5, v6);
}

uint64_t sub_18AFFA54C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

void sub_18AFFA59C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_18AFD715C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_18AFFA5B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_18AFFA614(uint64_t a1)
{
  return a1;
}

uint64_t sub_18AFFA640(uint64_t a1)
{
  return a1;
}

uint64_t sub_18AFFA66C()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFFA708()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AF14514(v3, v4);
}

uint64_t sub_18AFFA798()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

id sub_18AFFA834(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6)
{
  if (a6)
  {
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1 = a4;
  }
  return a1;
}

void sub_18AFFA8A0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6)
{
  if (a6)
  {
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = a4;
  }
}

void sub_18AFFA90C(id *a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X8>)
{
  sub_18AFF99F0(a1, a2, *(void *)(v3 + 16), *(uint64_t **)(v3 + 32), a3);
}

void sub_18AFFA92C(uint64_t a1)
{
  sub_18AFD6E38(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

id sub_18AFFA948(id *a1)
{
  return sub_18AFD6FA8(a1, *(void **)(v1 + 16));
}

uint64_t sub_18AFFA964()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFFA9F0;
  uint64_t v3 = sub_18AF40F8C();
  return sub_18AFD9298(v3, v4);
}

uint64_t sub_18AFFA9F0()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF41790();
  sub_18AF37AC0();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFFAAD8()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AFD7C88(v3);
}

uint64_t sub_18AFFAB68()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AFD7E38(v3);
}

uint64_t sub_18AFFABF8()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return v4(v3);
}

uint64_t sub_18AFFAC94()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 89, 7);
}

uint64_t sub_18AFFACEC()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_18AF19364(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_18AFFBACC;
  uint64_t v6 = sub_18AF40DB4();
  return sub_18AFD6A08(v6, v7, v1, v2);
}

uint64_t sub_18AFFAD90()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_18AF19364(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_18AFFAE2C;
  return sub_18AFD4C24(v0, v2, v1);
}

uint64_t sub_18AFFAE2C()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_18AF311C8();
  return v4(v3);
}

uint64_t sub_18AFFAF04(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18AFFAF64()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_18AFFAFAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18AFFAFF4()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF305FC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF37AD4();
  sub_18AF37AC0();
  return sub_18AFEE270(v3, v4, v5, v6, v7);
}

uint64_t sub_18AFFB08C()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFFB128()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return v4(v3);
}

uint64_t sub_18AFFB1C4()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFFB264()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18AFFB2AC()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF26358();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF262F8();
  sub_18AF37AC0();
  return sub_18AFE7D38(v3, v4, v5, v6, v7);
}

uint64_t sub_18AFFB33C()
{
  sub_18AF2A56C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF4045C();
  return sub_18AFE817C(v3, v4, v5);
}

uint64_t sub_18AFFB3DC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AFFB414()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFFB4B0()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AF14514(v3, v4);
}

uint64_t sub_18AFFB540()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AFFB5DC()
{
  return sub_18AF35598();
}

uint64_t sub_18AFFB5E4()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF26358();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF262F8();
  sub_18AF37AC0();
  return sub_18AFECF68(v3, v4, v5, v6, v7);
}

uint64_t sub_18AFFB674(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_18AF40334(a1, a2, a3);
  sub_18AF402B8();
  uint64_t v4 = sub_18AF40350();
  v5(v4);
  return v3;
}

uint64_t sub_18AFFB6BC()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF40F8C();
  return sub_18AFD0F78(v3, v4);
}

uint64_t sub_18AFFB748()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFFBA50;
  uint64_t v3 = sub_18AF40F8C();
  return sub_18AFD1820(v3, v4);
}

uint64_t sub_18AFFB7D4()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AFFBA50;
  uint64_t v3 = sub_18AF40F8C();
  return sub_18AFD1A50(v3, v4);
}

uint64_t sub_18AFFB864()
{
  sub_18AF2A56C();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF33C54();
  return sub_18AFD1C24(v3, v4, v5, v6);
}

uint64_t sub_18AFFB8F4()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF40F8C();
  return sub_18AFD14F0(v3, v4);
}

uint64_t sub_18AFFB980()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF40F8C();
  return sub_18AFD11DC(v3, v4);
}

uint64_t sub_18AFFBA0C()
{
  return sub_18AF35598();
}

unsigned char *sub_18AFFBA14(unsigned char *a1)
{
  return sub_18AFF7820(a1);
}

uint64_t sub_18AFFBAAC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_18AFD70A0(a1, a2);
}

uint64_t sub_18AFFBAFC()
{
  return swift_task_reportUnexpectedExecutor();
}

void sub_18AFFBB1C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void sub_18AFFBB34(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, v4, a3, a4, v5, 0xCu);
}

void sub_18AFFBB50(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_18AFFBB68()
{
  return sub_18AF35EF4();
}

unint64_t sub_18AFFBB9C()
{
  return CKSyncEngine.FetchChangesContext.description.getter();
}

uint64_t sub_18AFFBBF0()
{
  return type metadata accessor for Logger();
}

uint64_t sub_18AFFBC0C()
{
  return swift_release_n();
}

uint64_t sub_18AFFBC24()
{
  return sub_18AFF77C0(v1, v2, v0);
}

uint64_t sub_18AFFBC70()
{
  **(void **)(v0 + 152) = *(void *)(v0 + 280);
  return swift_task_dealloc();
}

uint64_t sub_18AFFBC94()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void sub_18AFFBCC4()
{
  sub_18AF65AE4();
}

void sub_18AFFBCE8()
{
  sub_18AF65AE4();
}

unint64_t sub_18AFFBD0C()
{
  return 0xD000000000000024;
}

void sub_18AFFBD1C()
{
  sub_18AF65AE4();
}

BOOL sub_18AFFBD40(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AFFBD5C()
{
  return v0;
}

uint64_t sub_18AFFBD74()
{
  return swift_release();
}

void sub_18AFFBD90()
{
  sub_18AF65B5C();
}

void sub_18AFFBDB4()
{
  sub_18AF65AE4();
}

uint64_t sub_18AFFBDD8()
{
  return swift_retain();
}

void sub_18AFFBE08()
{
  *uint64_t v0 = 0x8000000000000000;
}

void sub_18AFFBE24()
{
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(unsigned char *)(v3 + 32) = 2;
  *(void *)(v3 + 40) = v2;
  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 56) = v0;
  *(unsigned char *)(v3 + 64) = 1;
  *(void *)(v3 + 72) = 0;
  *(unsigned char *)(v3 + 80) = 0;
}

void sub_18AFFBE80(void *a1)
{
  *(_DWORD *)uint64_t v6 = *(_OWORD *)(v7 - 128);
  *(void *)(v6 + 4) = v4;
  *a1 = v4;
  _os_log_impl(v3, v2, v5, v1, (uint8_t *)v6, 0xCu);
}

uint64_t sub_18AFFBEBC()
{
  return swift_task_isCurrentExecutor();
}

uint64_t sub_18AFFBED4()
{
  return swift_task_reportUnexpectedExecutor();
}

void sub_18AFFBEEC()
{
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = v2 + 16 * v1;
  *(void *)(v5 + 32) = v3;
  *(unsigned char *)(v5 + 40) = v0;
}

void sub_18AFFBF08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17)
{
  *(_DWORD *)uint64_t v22 = a17;
  *(void *)(v22 + 4) = v20;
  *a1 = v20;
  _os_log_impl(v17, v18, v21, v19, (uint8_t *)v22, 0xCu);
}

uint64_t sub_18AFFBF44()
{
  return Identifiable<>.id.getter();
}

uint64_t sub_18AFFBF60()
{
  return swift_release();
}

uint64_t sub_18AFFBF7C()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void sub_18AFFBFC8()
{
  sub_18AF5B678();
}

uint64_t sub_18AFFBFE8()
{
  return *(void *)(v0 + 560);
}

id sub_18AFFC014()
{
  *(void *)(v2 - 136) = *(void *)(v1 + 984);
  return v0;
}

uint64_t sub_18AFFC04C()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFC06C()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFC08C(uint64_t result)
{
  *(void *)(v1 + 16) = 167;
  *(void *)(v1 + 24) = result;
  return result;
}

id sub_18AFFC0A0()
{
  return v0;
}

uint64_t sub_18AFFC0C0()
{
  *(void *)(v0 + 48) = *(void *)(v0 + 40);
  return swift_task_alloc();
}

uint64_t sub_18AFFC0E0()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_18AFFC0F4()
{
  return swift_retain();
}

__n128 sub_18AFFC10C(__n128 *a1)
{
  *(void *)(v1 + 144) = a1;
  __n128 result = *(__n128 *)(v1 + 56);
  a1[1] = result;
  return result;
}

unint64_t sub_18AFFC12C(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_18AFFC134()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFC168()
{
  return 1;
}

double sub_18AFFC17C(uint64_t a1)
{
  *(void *)(v1 + 1024) = a1;
  *(void *)(v1 + 176) = v2;
  *(void *)(v1 + 184) = a1;
  double result = 0.0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(unsigned char *)(v1 + 240) = 0x80;
  return result;
}

uint64_t sub_18AFFC1A8()
{
  return sub_18AF35EF4();
}

void sub_18AFFC1DC(void *a1)
{
  sub_18AFFA8A0(a1, v2, v1, v4, v3, 1);
}

void sub_18AFFC200()
{
  sub_18AF5B678();
}

void sub_18AFFC25C(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, v4, a3, a4, v5, 0x16u);
}

uint64_t sub_18AFFC278(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_18AF4095C(v3, v2, (uint64_t *)va);
}

void sub_18AFFC294(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

void *sub_18AFFC2A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 32;
  return memmove((void *)v3, (const void *)(v3 + 8), 8 * (a1 - 1));
}

void sub_18AFFC2C8()
{
  uint64_t v3 = *(void *)(v1 - 144);
  uint64_t v4 = *(void *)(v1 - 152);
  uint64_t v5 = *(void **)(v1 - 184);
  uint64_t v6 = *(unsigned int *)(v1 - 160);
  sub_18AFFA8A0(v0, v3, v4, v5, v6, 1);
}

void sub_18AFFC2FC(Swift::String a1)
{
  *(void *)(v1 - 112) = 46;
  *(void *)(v1 - 104) = 0xE100000000000000;
  String.append(_:)(a1);
}

void sub_18AFFC320(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD00000000000003FLL;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t sub_18AFFC344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

uint64_t sub_18AFFC354()
{
  return v0 + 8;
}

uint64_t sub_18AFFC37C()
{
  return swift_dynamicCast();
}

uint64_t sub_18AFFC3A0()
{
  return swift_retain();
}

double sub_18AFFC3D4()
{
  *(void *)(v0 + 248) = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 112;
  return result;
}

void sub_18AFFC414()
{
  *(void *)(v1 + 8 * (v0 >> 6) + 64) |= 1 << v0;
}

uint64_t sub_18AFFC438()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFC450()
{
  return swift_weakInit();
}

void sub_18AFFC468(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_18AFFC480()
{
  return v0;
}

void sub_18AFFC48C()
{
  sub_18AF65B5C();
}

uint64_t sub_18AFFC4A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v3, v4, a3);
}

uint64_t sub_18AFFC4BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0);
}

uint64_t sub_18AFFC4E4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18AFFC508()
{
  return swift_retain_n();
}

uint64_t sub_18AFFC524(uint64_t result, uint64_t a2)
{
  v2[4] = result;
  v2[5] = a2;
  v2[6] = 0xD000000000000012;
  return result;
}

uint64_t sub_18AFFC54C()
{
  return swift_bridgeObjectRetain();
}

void sub_18AFFC56C()
{
  _StringGuts.grow(_:)(65);
}

BOOL sub_18AFFC58C()
{
  return (!v1 & v0) != 0;
}

void sub_18AFFC59C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = v1;
  *(unsigned char *)(a1 + 40) = 1;
}

void sub_18AFFC5B8()
{
  uint64_t v2 = *(void **)(v0 + 944);
}

id sub_18AFFC5E4()
{
  unint64_t v4 = *(void **)(*(void *)(*(void *)v1 + 48) + 8 * v2);
  *uint64_t v0 = v4;
  return v4;
}

uint64_t sub_18AFFC614()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFFC630()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFFC650()
{
  return swift_task_reportUnexpectedExecutor();
}

BOOL sub_18AFFC680@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void *sub_18AFFC694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = 0xD000000000000012;
  v22[7] = a22;
  return v22;
}

uint64_t sub_18AFFC6B4(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_18AFFC6D4(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFC710()
{
  return v0;
}

uint64_t sub_18AFFC730@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFC750(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v4, v3, a3);
}

id sub_18AFFC768()
{
  sub_18AF84C94(v1);
  sub_18AF84C94(v1);
  sub_18AF84C94(v1);
  return v0;
}

BOOL sub_18AFFC7AC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AFFC7C8()
{
  return v0;
}

uint64_t sub_18AFFC7D4()
{
  return swift_bridgeObjectRetain();
}

void sub_18AFFC7F0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_18AFFC820()
{
  return v0;
}

uint64_t sub_18AFFC850()
{
  return 0;
}

uint64_t sub_18AFFC860()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t sub_18AFFC874()
{
  return v0;
}

void sub_18AFFC894()
{
  uint64_t v1 = *(void *)(v0 + 232);
  *(unsigned char *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 104) = 3;
  *(void *)(v0 + 112) = v1;
}

uint64_t sub_18AFFC8B4()
{
  return swift_retain();
}

void sub_18AFFC8DC()
{
  *uint64_t v0 = 0x8000000000000000;
}

void sub_18AFFC964()
{
  *(_WORD *)(v0 + 12) = 2080;
  CKSyncEngine.FetchChangesOptions.Scope.description.getter();
}

uint64_t sub_18AFFC998()
{
  return swift_retain();
}

void sub_18AFFC9B0()
{
  sub_18AF62BA4(v0);
}

id sub_18AFFC9C8()
{
  return sub_18AFFA834(v4, v1, v3, v2, v0, 1);
}

void sub_18AFFC9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(v6 - 144);
  uint64_t v9 = *(void *)(v6 - 152);
  uint64_t v10 = *(void **)(v6 - 184);
  sub_18AFFA8A0(v5, v8, v9, v10, a5, 0);
}

uint64_t sub_18AFFCA18(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18AFFCA40(char a1, uint64_t a2)
{
  sub_18AF33790(a1, a2, 1, v2);
}

void sub_18AFFCA58()
{
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = v1 + 16 * v0;
  *(void *)(v4 + 32) = v2;
  *(unsigned char *)(v4 + 40) = 0;
}

uint64_t sub_18AFFCA74(uint64_t a1)
{
  *(void *)(v1 + 704) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFCA9C(uint64_t a1)
{
  *(void *)(v1 + 344) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_18AFFCAC4()
{
  return sub_18AFFA834(v3, v4, v1, v2, v0, 1);
}

void sub_18AFFCAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(v6 - 128);
  uint64_t v9 = *(void *)(v6 - 136);
  uint64_t v10 = *(void **)(v6 - 168);
  sub_18AFFA8A0(v5, v8, v9, v10, a5, 0);
}

void sub_18AFFCB14()
{
  sub_18AF5B618();
}

void sub_18AFFCB2C()
{
  sub_18AF53C0C(v0, 1);
}

uint64_t sub_18AFFCB44()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFFCB84@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 56) = *(void *)(a1 - 256);
  return v1;
}

uint64_t sub_18AFFCB94(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_18AFFCBA0()
{
  return swift_allocObject();
}

uint64_t sub_18AFFCBB8()
{
  return *(void *)v0;
}

BOOL sub_18AFFCBE0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_18AFFCBFC()
{
  sub_18AF65B5C();
}

uint64_t sub_18AFFCC50@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 280) = a1;
  return *(void *)(v1 + 160);
}

uint64_t sub_18AFFCC60(uint64_t a1)
{
  *(void *)(v1 + 688) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL sub_18AFFCC84@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_18AFFCC94()
{
  sub_18AF5B618();
}

BOOL sub_18AFFCCB8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_18AFFCCD0(unint64_t a1@<X8>)
{
  sub_18AF33790(a1 > 1, v2, 1, v1);
}

void sub_18AFFCCF4()
{
  sub_18AF5B618();
}

void sub_18AFFCD18()
{
  sub_18AF5B678();
}

void sub_18AFFCD3C()
{
  sub_18AF65B5C();
}

uint64_t sub_18AFFCD60()
{
  return swift_retain_n();
}

id sub_18AFFCD7C()
{
  *(_WORD *)(v1 + 12) = 2112;
  return v0;
}

id sub_18AFFCD98()
{
  return v0;
}

uint64_t sub_18AFFCDBC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFFCDD8()
{
  return swift_dynamicCast();
}

void sub_18AFFCDF4()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_18AFFCE28(uint64_t a1)
{
  *(void *)(v1 + 216) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFCE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return related decl 'e' for CKErrorCode.init(partialErrors:description:)(v21, 0xD000000000000023, a21);
}

id sub_18AFFCE80()
{
  *uint64_t v1 = v2;
  sub_18AF9E5A8(v2, 1);
  sub_18AF9E5A8(v2, 1);
  return v0;
}

uint64_t sub_18AFFCED4()
{
  return 0;
}

void sub_18AFFCEEC()
{
  sub_18AF65B5C();
}

uint64_t sub_18AFFCF10(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

uint64_t sub_18AFFCF1C()
{
  return swift_getObjectType();
}

uint64_t sub_18AFFCF40()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFCF58(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_18AFFCF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18AFFCFA0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1 << v1;
}

uint64_t sub_18AFFCFB8(float a1)
{
  *char v1 = a1;
  return swift_retain();
}

BOOL sub_18AFFCFDC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AFFCFF8()
{
  return swift_arrayDestroy();
}

uint64_t sub_18AFFD034(uint64_t a1)
{
  *(void *)(v1 + 200) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFD0A4(uint64_t result)
{
  *(void *)(v1 + 288) = result;
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t sub_18AFFD0B4()
{
  return ContinuousClock.init()();
}

void sub_18AFFD0E8()
{
  uint64_t v2 = *(void *)(v0 - 112);
  uint64_t v3 = *(void *)(v0 - 104);
  String.append(_:)(*(Swift::String *)&v2);
}

uint64_t sub_18AFFD114()
{
  return swift_bridgeObjectRelease();
}

void sub_18AFFD13C(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000019;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

unint64_t sub_18AFFD160()
{
  return 0xD000000000000020;
}

uint64_t sub_18AFFD174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *uint64_t v10 = a10;
  return swift_unknownObjectRelease();
}

uint64_t sub_18AFFD190()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18AFFD1AC()
{
  return swift_task_isCurrentExecutor();
}

uint64_t sub_18AFFD1C4()
{
  return swift_getErrorValue();
}

uint64_t sub_18AFFD1E0()
{
  return swift_release();
}

id sub_18AFFD1FC()
{
  unint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

void sub_18AFFD214()
{
  JUMPOUT(0x18C1298C0);
}

uint64_t sub_18AFFD22C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v4, v3, a3);
}

uint64_t sub_18AFFD254()
{
  return swift_retain_n();
}

uint64_t sub_18AFFD26C()
{
  return v0 + 8;
}

uint64_t sub_18AFFD27C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFD294()
{
  return swift_unknownObjectRelease_n();
}

void sub_18AFFD2AC()
{
  sub_18AF36054(v1, v2, v0);
}

uint64_t sub_18AFFD2C8()
{
  return v0;
}

uint64_t sub_18AFFD2D8()
{
  return v0;
}

uint64_t sub_18AFFD2F0()
{
  return v0;
}

uint64_t sub_18AFFD2FC()
{
  return v0;
}

void sub_18AFFD350(uint64_t a1@<X8>)
{
  *(void *)(v1 - 312) = a1;
}

id sub_18AFFD394@<X0>(void *a1@<X8>)
{
  return a1;
}

void sub_18AFFD3B4()
{
  *(void *)(v0 - 104) = 0;
  *(void *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
}

void sub_18AFFD3D4()
{
  *(void *)(v0 - 120) = 0;
  *(void *)(v0 - 112) = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
}

uint64_t sub_18AFFD448(uint64_t result)
{
  *(void *)(v1 - 96) = result;
  return result;
}

double sub_18AFFD454()
{
  *(void *)(v3 + 24) = v0;
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v2;
  double result = 0.0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  return result;
}

uint64_t sub_18AFFD468()
{
  return *(void *)(v0 + 104);
}

BOOL sub_18AFFD49C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_18AFFD510()
{
  return swift_task_isCurrentExecutor();
}

void sub_18AFFD528()
{
  *(void *)(v1 - 96) = v0;
}

unint64_t sub_18AFFD53C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

uint64_t sub_18AFFD560()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFFD580()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFFD5A0()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFD5C0()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFD5E0()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFD600()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFD620()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFD640()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFD660()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AFFD680()
{
  *(void *)(v0 + 56) = *(void *)(v0 + 48);
  return swift_task_alloc();
}

void *sub_18AFFD6A0(void *a1)
{
  return memcpy(a1, v1, 0x41uLL);
}

uint64_t sub_18AFFD6EC()
{
  return swift_task_alloc();
}

uint64_t sub_18AFFD720()
{
  return swift_retain();
}

void sub_18AFFD74C()
{
  *(void *)(v1 + 16) = 167;
  *(void *)(v1 + 24) = v0;
}

void sub_18AFFD7AC()
{
  *(void *)(v1 - 112) = (unint64_t)(63 - v0) >> 6;
}

uint64_t sub_18AFFD7CC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AFFD7F0()
{
  return swift_dynamicCast();
}

uint64_t sub_18AFFD824()
{
  return swift_task_reportUnexpectedExecutor();
}

BOOL sub_18AFFD848()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

void sub_18AFFD87C()
{
}

uint64_t sub_18AFFD888(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return specialized Array._endMutation()();
}

uint64_t sub_18AFFD8A0()
{
  return swift_release_n();
}

uint64_t sub_18AFFD8B8()
{
  return v0;
}

uint64_t sub_18AFFD8C4()
{
  return v0;
}

uint64_t sub_18AFFD8D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v4, v3, a3);
}

id sub_18AFFD8F0()
{
  sub_18AF84C94(v1);
  sub_18AF84C94(v1);
  return v0;
}

void *sub_18AFFD928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = a1;
  return a10;
}

uint64_t sub_18AFFD93C(uint64_t result)
{
  *(void *)(v1 + 704) = result;
  return result;
}

uint64_t sub_18AFFD950(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return Identifiable<>.id.getter();
}

uint64_t sub_18AFFD9A4(uint64_t result)
{
  *(void *)(result + 88) = 0xEB00000000746E65;
  return result;
}

uint64_t sub_18AFFD9CC()
{
  return sub_18AFDEE9C(v0, v2, v1, v3);
}

__n128 sub_18AFFD9F8(__n128 *a1)
{
  v1[9].n128_u64[1] = (unint64_t)a1;
  __n128 result = v1[4];
  a1[1] = result;
  return result;
}

uint64_t sub_18AFFDA0C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AFFDA24(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v1;
  a1[5] = v2;
  return swift_retain();
}

unint64_t sub_18AFFDA64()
{
  return 0xD000000000000015;
}

uint64_t sub_18AFFDA78()
{
  return static NSObject.== infix(_:_:)();
}

id sub_18AFFDA90()
{
  return v0;
}

void sub_18AFFDABC()
{
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 16 * v0 + 32) = v2;
}

uint64_t sub_18AFFDAD0()
{
  return swift_release_n();
}

uint64_t sub_18AFFDAE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v3, v4, a3);
}

uint64_t sub_18AFFDB00()
{
  return v0;
}

uint64_t sub_18AFFDB0C()
{
  return v0;
}

uint64_t sub_18AFFDB18()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18AFFDB4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AFFDB84()
{
  return __CocoaSet.count.getter();
}

uint64_t sub_18AFFDBB0()
{
  return v0;
}

uint64_t sub_18AFFDBC8()
{
  return 0;
}

double sub_18AFFDBDC()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 136) = 0;
  return result;
}

uint64_t sub_18AFFDBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AFF07DC(v3, 0, a3, v4);
}

uint64_t sub_18AFFDC10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v3, v4, a3);
}

uint64_t sub_18AFFDC28()
{
  return 0;
}

void sub_18AFFDC3C()
{
  CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(0, v0);
}

uint64_t sub_18AFFDC5C()
{
  return _HashTable.UnsafeHandle.subscript.setter();
}

uint64_t sub_18AFFDC7C()
{
  return CKAsyncSerialQueue.init(ordering:)((char *)(v0 - 136));
}

uint64_t sub_18AFFDC94(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v1;
  return swift_retain();
}

uint64_t sub_18AFFDCB4()
{
  return v0;
}

uint64_t related decl 'e' for CKErrorCode.init(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18AF161EC(&qword_1E9126AA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18B1F16B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for CKError(0);
  sub_18AFFE090();
  swift_bridgeObjectRelease();
  sub_18AFFF588((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v8;
}

uint64_t related decl 'e' for CKErrorCode.partialErrorsByItemID.getter(uint64_t a1)
{
  type metadata accessor for CKError(0);
  sub_18AFFF588((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.userInfo.getter();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AF3528C(v1, v2, v3, v4, v5, v6, v7, v8, v11, a1, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v15)
  {
    sub_18AF551C4((uint64_t)&v14);
    return 0;
  }
  sub_18AF161EC(&qword_1E9125030);
  if ((sub_18AF394E0() & 1) == 0) {
    return 0;
  }
  uint64_t v9 = sub_18AFFE3C0(v13);
  swift_bridgeObjectRelease();
  return v9;
}

double sub_18AFFDEBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_18AF7CF60(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_18AF40A80(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

void *sub_18AFFDF20(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_18AF7D078(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v3);
  id v6 = v5;
  return v5;
}

void *sub_18AFFDF6C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  sub_18AF7D0BC();
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v3);
  id v6 = v5;
  return v5;
}

void *sub_18AFFDFB8(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      sub_18AF7D0BC();
      if (v7)
      {
        uint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  sub_18AF34EA0(0, &qword_1E9125130);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

void sub_18AFFE090()
{
  sub_18AF33E78();
  if (v1)
  {
    sub_18AF161EC(&qword_1E9126528);
    uint64_t v2 = (void *)sub_18AF39344();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v40 = v0 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v0 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v0 + 64);
  int64_t v39 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v45;
  char v7 = &v47;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v9 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        uint64_t v42 = (v5 - 1) & v5;
        unint64_t v11 = __clz(__rbit64(v5)) | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8, 1)) {
          goto LABEL_37;
        }
        if (v8 + 1 >= v39)
        {
LABEL_34:
          sub_18AF341D0();
          return;
        }
        sub_18AF22E2C();
        if (!v12)
        {
          sub_18AF3076C();
          if (v14 == v15) {
            goto LABEL_34;
          }
          if (!*(void *)(v40 + 8 * v13))
          {
            sub_18AF3076C();
            if (v14 == v15) {
              goto LABEL_34;
            }
            if (!*(void *)(v40 + 8 * v16))
            {
              sub_18AF3076C();
              if (v14 == v15) {
                goto LABEL_34;
              }
              if (!*(void *)(v40 + 8 * v17))
              {
                int64_t v19 = v18 + 4;
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                if (!*(void *)(v40 + 8 * v19))
                {
                  while (!__OFADD__(v19, 1))
                  {
                    sub_18AF3076C();
                    if (v14 == v15) {
                      goto LABEL_34;
                    }
                    sub_18AF193F0();
                    if (v20) {
                      goto LABEL_28;
                    }
                  }
                  goto LABEL_38;
                }
              }
            }
          }
        }
LABEL_28:
        sub_18AF34104();
        uint64_t v42 = v22 & v21;
        unint64_t v11 = v24 + (v23 << 6);
        uint64_t v8 = v23;
      }
      unint64_t v25 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v11);
      uint64_t v43 = *v25;
      uint64_t v44 = v25[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      sub_18AF5F658(v6, v7);
      sub_18AF5F658(v7, v48);
      sub_18AF5F658(v48, &v46);
      unint64_t v26 = sub_18AF7CF60(v43, v44);
      unint64_t v27 = v26;
      if ((v28 & 1) == 0) {
        break;
      }
      uint64_t v41 = v8;
      BOOL v29 = v7;
      unint64_t v30 = v6;
      uint64_t v31 = v0;
      uint64_t v32 = v10;
      uint64_t v33 = v9;
      char v34 = (uint64_t *)(v2[6] + 16 * v26);
      swift_bridgeObjectRelease();
      *char v34 = v43;
      v34[1] = v44;
      uint64_t v9 = v33;
      uint64_t v10 = v32;
      uint64_t v0 = v31;
      uint64_t v6 = v30;
      char v7 = v29;
      uint64_t v8 = v41;
      BOOL v35 = (_OWORD *)(v2[7] + 32 * v27);
      sub_18AF40A30((uint64_t)v35);
      sub_18AF5F658(&v46, v35);
      unint64_t v5 = v42;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v26;
    int64_t v36 = (uint64_t *)(v2[6] + 16 * v26);
    *int64_t v36 = v43;
    v36[1] = v44;
    sub_18AF5F658(&v46, (_OWORD *)(v2[7] + 32 * v26));
    uint64_t v37 = v2[2];
    BOOL v15 = __OFADD__(v37, 1);
    uint64_t v38 = v37 + 1;
    if (v15) {
      goto LABEL_36;
    }
    v2[2] = v38;
    unint64_t v5 = v42;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_18AFFE3C0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_18AF161EC(&qword_1E9125040);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    sub_18AF7E1AC(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v31);
    id v33 = *(id *)(*(void *)(a1 + 56) + 8 * v10);
    long long v28 = v31[0];
    long long v29 = v31[1];
    uint64_t v30 = v32;
    Swift::Int v15 = *(void *)(v2 + 40);
    id v16 = v33;
    uint64_t result = AnyHashable._rawHashValue(seed:)(v15);
    uint64_t v17 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v6 + 8 * (v18 >> 6))) == 0)
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        BOOL v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v6 + 8 * v19);
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v6 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v6 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t v25 = *(void *)(v2 + 48) + 40 * v20;
    *(_OWORD *)uint64_t v25 = v28;
    *(_OWORD *)(v25 + 16) = v29;
    *(void *)(v25 + 32) = v30;
    *(void *)(*(void *)(v2 + 56) + 8 * v20) = v16;
    ++*(void *)(v2 + 16);
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_36:
    swift_release();
    sub_18AF341D0();
    return v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_18AFFE6D4()
{
}

void sub_18AFFE6E0()
{
}

void sub_18AFFE6EC()
{
  sub_18AF33E78();
  if (v1)
  {
    sub_18AF161EC(v2);
    uint64_t v3 = sub_18AF39344();
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4FBC868];
  }
  sub_18AF38A70();
  unint64_t v6 = v5 & v4;
  sub_18AF33C6C();
  uint64_t v7 = v3 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    BOOL v23 = *(void **)(*(void *)(v0 + 48) + 8 * v10);
    uint64_t v24 = *(void **)(*(void *)(v0 + 56) + 8 * v10);
    type metadata accessor for CKError(0);
    sub_18AFFF588(&qword_1EB2794A0, type metadata accessor for CKError);
    sub_18AF391A8();
    *uint64_t v25 = v24;
    Swift::Int v26 = *(void *)(v3 + 40);
    id v27 = v23;
    id v28 = v24;
    NSObject._rawHashValue(seed:)(v26);
    sub_18AF2A6DC();
    if (((v31 << v30) & ~*(void *)(v7 + 8 * v29)) == 0)
    {
      sub_18AF19FD0();
      while (++v34 != v35 || (v33 & 1) == 0)
      {
        BOOL v36 = v34 == v35;
        if (v34 == v35) {
          uint64_t v34 = 0;
        }
        v33 |= v36;
        if (*(void *)(v7 + 8 * v34) != -1)
        {
          sub_18AF16D54();
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_18AF16AF4();
LABEL_36:
    *(void *)(v7 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    *(void *)(*(void *)(v3 + 48) + 8 * v32) = v27;
    sub_18AF339A0(v32);
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v8, 1)) {
      goto LABEL_40;
    }
    sub_18AF2ADB0();
    if (v11 == v12) {
      goto LABEL_38;
    }
    sub_18AF22E2C();
    if (!v13)
    {
      sub_18AF186BC();
      if (v11 == v12) {
        goto LABEL_38;
      }
      sub_18AF33B00();
      if (!v14)
      {
        sub_18AF186BC();
        if (v11 == v12) {
          goto LABEL_38;
        }
        sub_18AF33B00();
        if (!v15)
        {
          sub_18AF186BC();
          if (v11 == v12) {
            goto LABEL_38;
          }
          sub_18AF33B00();
          if (!v16)
          {
            sub_18AF2ADB0();
            if (v11 == v12)
            {
LABEL_38:
              swift_release();
              sub_18AF341D0();
              return;
            }
            if (!*(void *)(v37 + 8 * v17)) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    sub_18AF34104();
    unint64_t v6 = v20 & v19;
    unint64_t v10 = v22 + (v21 << 6);
    uint64_t v8 = v21;
  }
  while (!__OFADD__(v17, 1))
  {
    sub_18AF186BC();
    if (v11 == v12) {
      goto LABEL_38;
    }
    sub_18AF193F0();
    if (v18) {
      goto LABEL_26;
    }
  }
LABEL_41:
  __break(1u);
}

void sub_18AFFE960()
{
  sub_18AF33E78();
  if (v1)
  {
    sub_18AF161EC(&qword_1E9125040);
    uint64_t v2 = sub_18AF39344();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  sub_18AF38A70();
  unint64_t v5 = v4 & v3;
  sub_18AF33C6C();
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = 0;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    sub_18AF7E1AC(*(void *)(v0 + 48) + 40 * v9, (uint64_t)v40);
    uint64_t v42 = *(void **)(*(void *)(v0 + 56) + 8 * v9);
    uint64_t v22 = v42;
    long long v37 = v40[0];
    long long v38 = v40[1];
    uint64_t v39 = v41;
    type metadata accessor for CKError(0);
    sub_18AFFF588(&qword_1EB2794A0, type metadata accessor for CKError);
    sub_18AF391A8();
    *BOOL v23 = v22;
    Swift::Int v24 = *(void *)(v2 + 40);
    id v25 = v22;
    AnyHashable._rawHashValue(seed:)(v24);
    sub_18AF2A6DC();
    if (((v28 << v27) & ~*(void *)(v6 + 8 * v26)) == 0)
    {
      sub_18AF19FD0();
      while (++v31 != v32 || (v30 & 1) == 0)
      {
        BOOL v33 = v31 == v32;
        if (v31 == v32) {
          uint64_t v31 = 0;
        }
        v30 |= v33;
        if (*(void *)(v6 + 8 * v31) != -1)
        {
          sub_18AF16D54();
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_18AF16AF4();
LABEL_36:
    sub_18AF38FD4(v29);
    uint64_t v35 = *(void *)(v2 + 48) + 40 * v34;
    *(_OWORD *)uint64_t v35 = v37;
    *(_OWORD *)(v35 + 16) = v38;
    *(void *)(v35 + 32) = v39;
    sub_18AF339A0(v34);
    if (v5) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v7, 1)) {
      goto LABEL_40;
    }
    sub_18AF2ADB0();
    if (v10 == v11) {
      goto LABEL_38;
    }
    sub_18AF22E2C();
    if (!v12)
    {
      sub_18AF186BC();
      if (v10 == v11) {
        goto LABEL_38;
      }
      sub_18AF33B00();
      if (!v13)
      {
        sub_18AF186BC();
        if (v10 == v11) {
          goto LABEL_38;
        }
        sub_18AF33B00();
        if (!v14)
        {
          sub_18AF186BC();
          if (v10 == v11) {
            goto LABEL_38;
          }
          sub_18AF33B00();
          if (!v15)
          {
            sub_18AF2ADB0();
            if (v10 == v11)
            {
LABEL_38:
              swift_release();
              sub_18AF341D0();
              return;
            }
            if (!*(void *)(v36 + 8 * v16)) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    sub_18AF34104();
    unint64_t v5 = v19 & v18;
    unint64_t v9 = v21 + (v20 << 6);
    uint64_t v7 = v20;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_18AF186BC();
    if (v10 == v11) {
      goto LABEL_38;
    }
    sub_18AF193F0();
    if (v17) {
      goto LABEL_26;
    }
  }
LABEL_41:
  __break(1u);
}

void sub_18AFFEC0C(uint64_t a1)
{
}

void sub_18AFFEC20(uint64_t a1)
{
}

void sub_18AFFEC34(uint64_t a1, unint64_t *a2)
{
  sub_18AF33E78();
  if (v3)
  {
    sub_18AF161EC(&qword_1E9125040);
    uint64_t v5 = sub_18AF39344();
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC868];
  }
  uint64_t v41 = v2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 64);
  int64_t v40 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v10 = 0;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v10 << 6);
  while (1)
  {
    uint64_t v26 = *(void **)(*(void *)(v2 + 48) + 8 * v12);
    char v27 = *(void **)(*(void *)(v2 + 56) + 8 * v12);
    sub_18AF34EA0(0, a2);
    id v28 = v26;
    id v29 = v27;
    swift_dynamicCast();
    type metadata accessor for CKError(0);
    sub_18AFFF588(&qword_1EB2794A0, type metadata accessor for CKError);
    uint64_t v30 = sub_18AF391A8();
    *uint64_t v31 = v29;
    unint64_t v32 = AnyHashable._rawHashValue(seed:)(*(void *)(v5 + 40)) & ~(-1 << *(unsigned char *)(v5 + 32));
    if (((-1 << v32) & ~*(void *)(v9 + 8 * (v32 >> 6))) == 0)
    {
      sub_18AF19FD0();
      while (++v35 != v36 || (v34 & 1) == 0)
      {
        BOOL v37 = v35 == v36;
        if (v35 == v36) {
          uint64_t v35 = 0;
        }
        v34 |= v37;
        if (*(void *)(v9 + 8 * v35) != -1)
        {
          sub_18AF16D54();
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    sub_18AF16AF4();
LABEL_37:
    sub_18AF38FD4(v33);
    uint64_t v39 = *(void *)(v5 + 48) + 40 * v38;
    *(_OWORD *)uint64_t v39 = v42;
    *(_OWORD *)(v39 + 16) = v43;
    *(void *)(v39 + 32) = v44;
    *(void *)(*(void *)(v5 + 56) + 8 * v38) = v30;
    ++*(void *)(v5 + 16);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v10, 1)) {
      goto LABEL_41;
    }
    if (v10 + 1 >= v40) {
      goto LABEL_39;
    }
    sub_18AF22E2C();
    if (!v13)
    {
      sub_18AF38314();
      if (v15 == v16) {
        goto LABEL_39;
      }
      if (!*(void *)(v41 + 8 * v14))
      {
        sub_18AF38314();
        if (v15 == v16) {
          goto LABEL_39;
        }
        if (!*(void *)(v41 + 8 * v17))
        {
          sub_18AF38314();
          if (v15 == v16) {
            goto LABEL_39;
          }
          if (!*(void *)(v41 + 8 * v18))
          {
            int64_t v20 = v19 + 4;
            if (v20 >= v40)
            {
LABEL_39:
              swift_release();
              sub_18AF341D0();
              return;
            }
            if (!*(void *)(v41 + 8 * v20)) {
              break;
            }
          }
        }
      }
    }
LABEL_27:
    sub_18AF34104();
    unint64_t v8 = v23 & v22;
    unint64_t v12 = v25 + (v24 << 6);
    uint64_t v10 = v24;
  }
  while (!__OFADD__(v20, 1))
  {
    sub_18AF38314();
    if (v15 == v16) {
      goto LABEL_39;
    }
    sub_18AF193F0();
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t related decl 'e' for CKErrorCode.init(partialErrors:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18AF161EC(&qword_1E9125118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18B1F33C0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v8;
  *(void *)(inited + 120) = sub_18AF161EC(&qword_1E9124F90);
  *(void *)(inited + 96) = a1;
  Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for CKError(0);
  sub_18AFFF588((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v10;
}

uint64_t related decl 'e' for CKErrorCode.ancestorRecord.getter(uint64_t a1)
{
  return sub_18AFFF0D8(a1, (uint64_t)&CKRecordChangedErrorAncestorRecordKey, &qword_1E9125120);
}

uint64_t related decl 'e' for CKErrorCode.serverRecord.getter(uint64_t a1)
{
  return sub_18AFFF0D8(a1, (uint64_t)&CKRecordChangedErrorServerRecordKey, &qword_1E9125120);
}

uint64_t sub_18AFFF0D8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  *(void *)&long long v18 = a1;
  type metadata accessor for CKError(0);
  sub_18AFFF588((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  uint64_t v4 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AFFDEBC(v5, v6, v4, &v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
    sub_18AF34EA0(0, a3);
    int v7 = sub_18AF394E0();
    return sub_18AF30C74(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
  }
  else
  {
    sub_18AF551C4((uint64_t)&v18);
    return 0;
  }
}

uint64_t related decl 'e' for CKErrorCode.clientRecord.getter(uint64_t a1)
{
  return sub_18AFFF0D8(a1, (uint64_t)&CKRecordChangedErrorClientRecordKey, &qword_1E9125120);
}

uint64_t related decl 'e' for CKErrorCode.retryAfterSeconds.getter(uint64_t a1)
{
  *(void *)&long long v13 = a1;
  type metadata accessor for CKError(0);
  sub_18AFFF588((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.userInfo.getter();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AF3528C(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    if (sub_18AF394E0()) {
      return v12;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_18AF551C4((uint64_t)&v13);
    return 0;
  }
}

uint64_t related decl 'e' for CKErrorCode.movedDestinationID.getter(uint64_t a1)
{
  return sub_18AFFF0D8(a1, (uint64_t)CKRecordMovedDestinationIDKey, &qword_1E91255F0);
}

uint64_t related decl 'e' for CKErrorCode.underlyingError.getter(uint64_t a1)
{
  *(void *)&long long v22 = a1;
  type metadata accessor for CKError(0);
  sub_18AFFF588((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.userInfo.getter();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AF3528C(v1, v2, v3, v4, v5, v6, v7, v8, v18, v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23)
  {
    type metadata accessor for CKUnderlyingError(0);
    int v9 = sub_18AF394E0();
    return sub_18AF30C74(v9, v10, v11, v12, v13, v14, v15, v16, v19, v21);
  }
  else
  {
    sub_18AF551C4((uint64_t)&v22);
    return 0;
  }
}

uint64_t related decl 'e' for CKErrorCode.underlyingFunctionError.getter(uint64_t a1)
{
  return sub_18AFFF4BC(a1, type metadata accessor for CKError, (unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
}

uint64_t related decl 'e' for CKErrorCode.description.getter()
{
  uint64_t v0 = (void *)_convertErrorToNSError(_:)();
  id v1 = objc_msgSend(v0, sel_description);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_18AFFF46C()
{
  return related decl 'e' for CKErrorCode.description.getter();
}

uint64_t related decl 'e' for CKUnderlyingErrorCode.underlyingFunctionError.getter(uint64_t a1)
{
  return sub_18AFFF4BC(a1, type metadata accessor for CKUnderlyingError, &qword_1E9124E38, type metadata accessor for CKUnderlyingError);
}

uint64_t sub_18AFFF4BC(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  *(void *)&long long v27 = a1;
  a2(0);
  sub_18AFFF588(a3, a4);
  _BridgedStoredNSError.userInfo.getter();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AF3528C(v6, v7, v8, v9, v10, v11, v12, v13, v23, v25, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28)
  {
    sub_18AF161EC(&qword_1E9125660);
    int v14 = sub_18AF394E0();
    return sub_18AF30C74(v14, v15, v16, v17, v18, v19, v20, v21, v24, v26);
  }
  else
  {
    sub_18AF551C4((uint64_t)&v27);
    return 0;
  }
}

uint64_t sub_18AFFF588(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AFFF5D0()
{
  sub_18B0002AC(v0);
  uint64_t v2 = v1;

  return v2;
}

uint64_t sub_18AFFF600()
{
  sub_18B000518(v0);
  uint64_t v2 = v1;

  return v2;
}

uint64_t CKRecord.allKeys()()
{
  return sub_18AFFFFA4((SEL *)&selRef_allKeys);
}

void CKRecordKeyValueIterator.next()(void *a1@<X8>)
{
  int64_t v2 = v1[2];
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  if (v2 >= v4)
  {
LABEL_7:
    a1[6] = 0;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    uint64_t v11 = a1;
    uint64_t v5 = (void *)v1[1];
    uint64_t v6 = (uint64_t *)(v3 + 16 * v2 + 40);
    while (v2 < (unint64_t)v4)
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      swift_bridgeObjectRetain_n();
      uint64_t v9 = (void *)MEMORY[0x18C128F60](v8, v7);
      id v10 = objc_msgSend(v5, sel_objectForKey_, v9);
      swift_bridgeObjectRelease();

      ++v2;
      if (v10)
      {
        v1[2] = v2;
        swift_getObjectType();
        swift_unknownObjectRetain();
        CKRecordValue.CKToSwiftNativeValue()((uint64_t)(v11 + 2));
        swift_unknownObjectRelease_n();
        *uint64_t v11 = v8;
        v11[1] = v7;
        return;
      }
      swift_bridgeObjectRelease();
      int64_t v4 = *(void *)(v3 + 16);
      v6 += 2;
      if (v2 >= v4)
      {
        v1[2] = v2;
        a1 = v11;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
}

void CKRecord.makeIterator()(uint64_t *a1@<X8>)
{
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_allKeys);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v5;
  a1[1] = (uint64_t)v3;
  a1[2] = 0;
}

void sub_18AFFF7F4(uint64_t *a1@<X8>)
{
  id v2 = *v1;
  CKRecord.makeIterator()(a1);
}

uint64_t sub_18AFFF83C()
{
  return sub_18AFFF600();
}

uint64_t sub_18AFFF860()
{
  return sub_18AFFF638();
}

uint64_t sub_18AFFF884()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t sub_18AFFF900()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9127500 = result;
  *(void *)algn_1E9127508 = v1;
  return result;
}

uint64_t static CKRecord.SystemType.userRecord.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AFFF958()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9124D08 = result;
  unk_1E9124D10 = v1;
  return result;
}

uint64_t static CKRecord.SystemType.share.getter()
{
  return sub_18AF56390();
}

uint64_t static CKRecord.SystemFieldKey.recordID.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.creatorUserRecordID.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.creationDate.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.lastModifiedUserRecordID.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.modificationDate.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18AFFFA00()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9127510 = result;
  *(void *)algn_1E9127518 = v1;
  return result;
}

uint64_t static CKRecord.SystemFieldKey.parent.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AFFFA58()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9127520 = result;
  *(void *)algn_1E9127528 = v1;
  return result;
}

uint64_t static CKRecord.SystemFieldKey.share.getter()
{
  return sub_18AF56390();
}

void __swiftcall CKRecord.init(recordType:zoneID:)(CKRecord *__return_ptr retstr, Swift::String recordType, CKRecordZoneID *zoneID)
{
  object = recordType._object;
  uint64_t countAndFlagsBits = recordType._countAndFlagsBits;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18AF34EA0(0, &qword_1E91255F0);
  id v10 = zoneID;
  UUID.init()();
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  v18.super.Class isa = (Class)CKRecordID.init(recordName:zoneID:)(v14, v10);
  v15._uint64_t countAndFlagsBits = countAndFlagsBits;
  v15._object = object;
  CKRecord.init(recordType:recordID:)(v16, v15, v18);
}

void __swiftcall CKRecord.init(recordType:recordID:)(CKRecord *__return_ptr retstr, Swift::String recordType, CKRecordID recordID)
{
  Class isa = recordID.super.isa;
  object = recordType._object;
  uint64_t countAndFlagsBits = recordType._countAndFlagsBits;
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v7 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_initWithRecordType_recordID_, v7, isa);
}

uint64_t CKRecord.recordType.getter()
{
  id v1 = objc_msgSend(v0, sel_recordType);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CKRecord.object(forKey:)()
{
  id v1 = (void *)MEMORY[0x18C128F60]();
  id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  return v2;
}

void CKRecord.setObject(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = (id)MEMORY[0x18C128F60](a2, a3);
  objc_msgSend(v3, sel_setObject_forKey_, a1, v5);
}

id sub_18AFFFD88@<X0>(void *a1@<X8>)
{
  id result = CKRecord.subscript.getter();
  *a1 = result;
  return result;
}

void sub_18AFFFDB8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = *a1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  CKRecord.subscript.setter(v5, v3, v4);
}

void CKRecord.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = (id)MEMORY[0x18C128F60](a2, a3);
  objc_msgSend(v3, sel_setObject_forKey_, a1, v5);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

void (*CKRecord.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  id v5 = (void *)MEMORY[0x18C128F60](a2, a3);
  id v6 = objc_msgSend(v3, sel_objectForKey_, v5);

  *a1 = v6;
  return sub_18AFFFF0C;
}

void sub_18AFFFF0C(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    CKRecord.subscript.setter(v3, v4, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    CKRecord.subscript.setter(v3, v4, v2);
  }
}

uint64_t CKRecord.changedKeys()()
{
  return sub_18AFFFFA4((SEL *)&selRef_changedKeys);
}

uint64_t sub_18AFFFFA4(SEL *a1)
{
  id v2 = [v1 *a1];
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AFFFFF0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9127530 = result;
  *(void *)algn_1E9127538 = v1;
  return result;
}

uint64_t CKRecordTypeUserRecord.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18B000048()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9127540 = result;
  *(void *)algn_1E9127548 = v1;
  return result;
}

uint64_t CKRecordParentKey.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18B0000A0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9127550 = result;
  *(void *)algn_1E9127558 = v1;
  return result;
}

uint64_t CKRecordShareKey.getter()
{
  return sub_18AF56390();
}

unint64_t sub_18B0000FC()
{
  unint64_t result = qword_1E9127560;
  if (!qword_1E9127560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9127560);
  }
  return result;
}

uint64_t sub_18B000150()
{
  return 0;
}

void destroy for CKRecordKeyValueIterator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  id v2 = *(void **)(a1 + 8);
}

void *_s8CloudKit24CKRecordKeyValueIteratorVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

void *assignWithCopy for CKRecordKeyValueIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for CKRecordKeyValueIterator(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

void type metadata accessor for CKRecordKeyValueIterator()
{
}

void type metadata accessor for CKRecord.SystemType()
{
}

void type metadata accessor for CKRecord.SystemFieldKey()
{
}

void sub_18B0002AC(void *a1)
{
  id v28 = a1;
  id v1 = objc_msgSend(v28, sel_allKeys);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  if (*(void *)(v2 + 16))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x1E4FBC860] + 32;
    uint64_t v7 = (uint64_t *)(v2 + 40);
    while (1)
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      swift_bridgeObjectRetain();
      id v10 = (void *)MEMORY[0x18C128F60](v8, v9);
      id v11 = objc_msgSend(v28, sel_objectForKey_, v10);

      if (!v11) {
        goto LABEL_29;
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      CKRecordValue.CKToSwiftNativeValue()((uint64_t)v29);
      swift_unknownObjectRelease_n();
      *(void *)&long long v30 = v8;
      *((void *)&v30 + 1) = v9;
      sub_18AF5C7B0(v29, (uint64_t)v31);
      long long v33 = v30;
      long long v34 = v31[0];
      long long v35 = v31[1];
      uint64_t v36 = v32;
      if (!v5)
      {
        unint64_t v12 = v3[3];
        if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_27;
        }
        int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v13 <= 1) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = v13;
        }
        sub_18AF161EC(&qword_1E9127568);
        Swift::String v15 = (void *)swift_allocObject();
        uint64_t v16 = (uint64_t)(j__malloc_size(v15) - 32) / 56;
        uint64_t v15[2] = v14;
        v15[3] = 2 * v16;
        unint64_t v17 = (unint64_t)(v15 + 4);
        unint64_t v18 = v3[3];
        unint64_t v19 = v18 >> 1;
        if (v3[2])
        {
          if (v15 != v3 || v17 >= (unint64_t)&v3[7 * v19 + 4]) {
            memmove(v15 + 4, v3 + 4, 56 * v19);
          }
          v3[2] = 0;
        }
        uint64_t v6 = v17 + 56 * v19;
        uint64_t v5 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - (v18 >> 1);
        swift_release();
        uint64_t v3 = v15;
      }
      BOOL v21 = __OFSUB__(v5--, 1);
      if (v21)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v7 += 2;
      ++v4;
      long long v22 = v33;
      long long v23 = v34;
      long long v24 = v35;
      *(void *)(v6 + 48) = v36;
      *(_OWORD *)(v6 + 16) = v23;
      *(_OWORD *)(v6 + 32) = v24;
      *(_OWORD *)uint64_t v6 = v22;
      v6 += 56;
      if (v4 >= *(void *)(v2 + 16)) {
        goto LABEL_22;
      }
    }
  }
  uint64_t v5 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v25 = v3[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    BOOL v21 = __OFSUB__(v26, v5);
    unint64_t v27 = v26 - v5;
    if (v21)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    v3[2] = v27;
  }
}

void sub_18B000518(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_allKeys);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  int64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = MEMORY[0x1E4FBC860] + 32;
  uint64_t v9 = v3 + 40;
  while (2)
  {
    uint64_t v31 = v7;
    uint64_t v32 = v5;
    id v10 = (uint64_t *)(v9 + 16 * v6);
    while (1)
    {
      if (v6 >= (unint64_t)v4)
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v12 = *(v10 - 1);
      uint64_t v11 = *v10;
      swift_bridgeObjectRetain_n();
      int64_t v13 = (void *)MEMORY[0x18C128F60](v12, v11);
      id v14 = objc_msgSend(v1, sel_objectForKey_, v13);
      swift_bridgeObjectRelease();

      ++v6;
      if (v14) {
        break;
      }
      swift_bridgeObjectRelease();
      int64_t v4 = *(void *)(v3 + 16);
      v10 += 2;
      if (v6 >= v4)
      {
        uint64_t v7 = v31;
        uint64_t v5 = v32;
        goto LABEL_27;
      }
    }
    swift_getObjectType();
    swift_unknownObjectRetain();
    CKRecordValue.CKToSwiftNativeValue()((uint64_t)v34);
    swift_unknownObjectRelease_n();
    *(void *)&long long v33 = v12;
    *((void *)&v33 + 1) = v11;
    uint64_t v39 = v35;
    long long v37 = v34[0];
    long long v38 = v34[1];
    long long v36 = v33;
    uint64_t v15 = v31;
    if (v31)
    {
      uint64_t v5 = v32;
    }
    else
    {
      unint64_t v16 = v32[3];
      if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_34;
      }
      int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      sub_18AF161EC(&qword_1E9127568);
      uint64_t v5 = (void *)swift_allocObject();
      uint64_t v19 = (uint64_t)(j__malloc_size(v5) - 32) / 56;
      uint64_t v5[2] = v18;
      v5[3] = 2 * v19;
      unint64_t v20 = (unint64_t)(v5 + 4);
      unint64_t v21 = v32[3];
      unint64_t v22 = v21 >> 1;
      if (v32[2])
      {
        if (v5 != v32 || v20 >= (unint64_t)&v32[7 * v22 + 4]) {
          memmove(v5 + 4, v32 + 4, 56 * v22);
        }
        v32[2] = 0;
      }
      uint64_t v8 = v20 + 56 * v22;
      uint64_t v15 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - (v21 >> 1);
      swift_release();
    }
    BOOL v24 = __OFSUB__(v15, 1);
    uint64_t v7 = v15 - 1;
    uint64_t v9 = v3 + 40;
    if (v24) {
      goto LABEL_32;
    }
    long long v25 = v36;
    long long v26 = v37;
    long long v27 = v38;
    *(void *)(v8 + 48) = v39;
    *(_OWORD *)(v8 + 16) = v26;
    *(_OWORD *)(v8 + 32) = v27;
    *(_OWORD *)uint64_t v8 = v25;
    v8 += 56;
    int64_t v4 = *(void *)(v3 + 16);
    if (v6 < v4) {
      continue;
    }
    break;
  }
LABEL_27:

  swift_bridgeObjectRelease();
  unint64_t v28 = v5[3];
  if (v28 >= 2)
  {
    unint64_t v29 = v28 >> 1;
    BOOL v24 = __OFSUB__(v29, v7);
    unint64_t v30 = v29 - v7;
    if (v24)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    else
    {
      uint64_t v5[2] = v30;
    }
  }
}

uint64_t sub_18B0007CC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  if (!a2)
  {
LABEL_11:
    unint64_t v6 = 0;
    goto LABEL_14;
  }
  unint64_t v6 = a3;
  if (!a3)
  {
LABEL_14:
    void *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      unint64_t v11 = a3 - 1;
      while (v7 != v10)
      {
        uint64_t v12 = a2 + v9;
        uint64_t v13 = *(void *)(a4 + v9 + 56);
        uint64_t v14 = *(void *)(a4 + v9 + 64);
        uint64_t v16 = *(void *)(a4 + v9 + 40);
        uint64_t v15 = *(void *)(a4 + v9 + 48);
        *(unsigned char *)uint64_t v12 = *(unsigned char *)(a4 + v9 + 32);
        *(void *)(v12 + 8) = v16;
        *(void *)(v12 + 16) = v15;
        *(void *)(v12 + 24) = v13;
        *(void *)(v12 + 32) = v14;
        if (v11 == v10) {
          goto LABEL_13;
        }
        unint64_t v17 = v10 + 1;
        unint64_t v18 = *(void *)(a4 + 16);
        if (v10 + 1 == v18)
        {
          unint64_t v6 = v10 + 1;
LABEL_13:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_14;
        }
        swift_bridgeObjectRetain();
        unint64_t result = swift_bridgeObjectRetain();
        v9 += 40;
        unint64_t v10 = v17;
        if (v17 >= v18)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
  return result;
}

void sub_18B0008C0(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = v3;
  id v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_allKeys);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = v4;
    a1[1] = v9;
    a1[2] = a3;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v21 = a1;
    if (*(void *)(v9 + 16))
    {
      uint64_t v10 = 0;
      unint64_t v11 = (uint64_t *)(v9 + 40);
      uint64_t v20 = a3;
      uint64_t v12 = a3 - 1;
      while (1)
      {
        uint64_t v13 = *(v11 - 1);
        uint64_t v14 = *v11;
        swift_bridgeObjectRetain();
        uint64_t v15 = (void *)MEMORY[0x18C128F60](v13, v14);
        id v16 = objc_msgSend(v4, sel_objectForKey_, v15);

        if (!v16) {
          goto LABEL_16;
        }
        swift_getObjectType();
        swift_unknownObjectRetain();
        CKRecordValue.CKToSwiftNativeValue()((uint64_t)v22);
        swift_unknownObjectRelease_n();
        *(void *)&long long v23 = v13;
        *((void *)&v23 + 1) = v14;
        sub_18AF5C7B0(v22, (uint64_t)&v24);
        uint64_t v17 = v26;
        uint64_t v30 = v26;
        long long v18 = v25;
        long long v19 = v24;
        long long v28 = v24;
        long long v29 = v25;
        long long v27 = v23;
        *(_OWORD *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 32) = v18;
        *(void *)(a2 + 48) = v17;
        if (v12 == v10)
        {
          a3 = v20;
          a1 = v21;
          goto LABEL_14;
        }
        v11 += 2;
        a2 += 56;
        if ((unint64_t)++v10 >= *(void *)(v9 + 16)) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v10 = 0;
LABEL_12:
    a3 = v10;
    a1 = v21;
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
}

void sub_18B000A7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  id v7 = v3;
  id v8 = objc_msgSend(v7, sel_allKeys);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!a2)
  {
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
    uint64_t v10 = 0;
LABEL_17:
    *a1 = v9;
    a1[1] = (uint64_t)v7;
    a1[2] = v10;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v25 = a2;
      uint64_t v22 = a3;
      long long v23 = a1;
      uint64_t v11 = 0;
      uint64_t v12 = 1;
      while (2)
      {
        uint64_t v24 = v12;
        uint64_t v13 = (uint64_t *)(v9 + 40 + 16 * v11);
        while (1)
        {
          if (v11 >= (unint64_t)v10)
          {
            __break(1u);
            goto LABEL_21;
          }
          uint64_t v14 = v11;
          uint64_t v16 = *(v13 - 1);
          uint64_t v15 = *v13;
          swift_bridgeObjectRetain_n();
          uint64_t v17 = (void *)MEMORY[0x18C128F60](v16, v15);
          id v18 = objc_msgSend(v7, sel_objectForKey_, v17);
          swift_bridgeObjectRelease();

          ++v11;
          if (v18) {
            break;
          }
          swift_bridgeObjectRelease();
          uint64_t v10 = *(void *)(v9 + 16);
          v13 += 2;
          if (v11 >= v10)
          {
            uint64_t v10 = v14 + 1;
            a1 = v23;
            goto LABEL_17;
          }
        }
        swift_getObjectType();
        swift_unknownObjectRetain();
        CKRecordValue.CKToSwiftNativeValue()((uint64_t)&v27);
        swift_unknownObjectRelease_n();
        *(void *)&long long v26 = v16;
        *((void *)&v26 + 1) = v15;
        uint64_t v19 = v29;
        uint64_t v33 = v29;
        long long v20 = v28;
        long long v21 = v27;
        long long v31 = v27;
        long long v32 = v28;
        long long v30 = v26;
        *(_OWORD *)uint64_t v25 = v26;
        *(_OWORD *)(v25 + 16) = v21;
        *(_OWORD *)(v25 + 32) = v20;
        *(void *)(v25 + 48) = v19;
        if (v24 == v22)
        {
          uint64_t v10 = v14 + 1;
        }
        else
        {
          v25 += 56;
          uint64_t v12 = v24 + 1;
          uint64_t v10 = *(void *)(v9 + 16);
          if (v11 < v10) {
            continue;
          }
          uint64_t v10 = v14 + 1;
        }
        break;
      }
      a1 = v23;
    }
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
}

void *sub_18B000C88(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF34B0C(a1, a2, a3, a4, &qword_1E91255F0, (uint64_t)off_1E545EEB0, (unint64_t *)&qword_1E91251C8);
}

uint64_t sub_18B000CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1E9127588 + dword_1E9127588);
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = sub_18B000D68;
  return v9(a1, a2, a3);
}

uint64_t sub_18B000D68(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_18B000E64()
{
  return sub_18B000EB4(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)()
{
  sub_18AF39500();
  return sub_18B000EB4(v1, v0, 0);
}

uint64_t sub_18B000EB4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)()
{
  sub_18AF39500();
  return sub_18B000EB4(v1, v0, 1);
}

uint64_t CKNotification.subscriptionID.getter()
{
  return sub_18B000EE4(v0);
}

uint64_t sub_18B000EE4(void *a1)
{
  id v1 = objc_msgSend(a1, sel_subscriptionID);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t CKOperation.operationID.getter()
{
  id v1 = objc_msgSend(v0, sel_operationID);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_18B000FA0()
{
  type metadata accessor for TaskPriority();
  sub_18AF22CB0();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  static Task<>.currentPriority.getter();
  unsigned __int8 v4 = TaskPriority.rawValue.getter();
  uint64_t v5 = *(void (**)(void))(v2 + 8);
  sub_18AF16D24();
  v5();
  if (__ROR8__(v4 - 9, 3) > 3uLL)
  {
    TaskPriority.init(rawValue:)();
    unsigned __int8 v6 = TaskPriority.rawValue.getter();
    sub_18AF16D24();
    v5();
    if (v4 == v6)
    {
      if (qword_1EB279458 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_18AF412A0(v7, (uint64_t)qword_1EB279440);
      id v8 = v0;
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315138;
        id v12 = objc_msgSend(v8, sel_operationID);
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        sub_18AF4095C(v13, v15, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_18AF10000, v9, v10, "Not setting QoS on %s to TaskPriority.medium and instead relying on default NSOperation QoS behavior", v11, 0xCu);
        swift_arrayDestroy();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {
      }
    }
    else
    {
      if (qword_1EB279458 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_18AF412A0(v16, (uint64_t)qword_1EB279440);
      id v17 = v0;
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315394;
        id v21 = objc_msgSend(v17, sel_operationID);
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v24 = v23;

        sub_18AF4095C(v22, v24, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 256;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_18AF10000, v18, v19, "Not setting QoS on %s for unknown task priority %hhu", (uint8_t *)v20, 0xFu);
        swift_arrayDestroy();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {
      }
    }
  }
  else
  {
    objc_msgSend(v0, sel_setQualityOfService_);
  }
}

void sub_18B001400()
{
}

id sub_18B001454()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for SignpostIntervalStateWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18B00149C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSSignposter();
  sub_18AF8F144(v4, qword_1E9124F28);
  sub_18AF412A0(v4, (uint64_t)qword_1E9124F28);
  if (qword_1E9124F70 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_18AF412A0(v0, (uint64_t)qword_1E9124F50);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

void CKOperationSignpostBegin(_:_:)(void *a1, const char *a2, uint64_t a3, char a4)
{
  uint64_t v83 = (char *)a2;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  sub_18AF22CB0();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  sub_18AF391C8();
  MEMORY[0x1F4188790](v12);
  uint64_t v81 = (char *)&v71 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v71 - v15;
  uint64_t v17 = type metadata accessor for OSSignposter();
  sub_18AF22CB0();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v20);
  sub_18AF38FBC();
  if (qword_1E9124F48 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_18AF412A0(v17, (uint64_t)qword_1E9124F28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v5, v21, v17);
  id v22 = a1;
  static OSSignpostID.exclusive.getter();
  unint64_t v23 = OSSignposter.logHandle.getter();
  int v80 = static os_signpost_type_t.begin.getter();
  char v24 = OS_os_log.signpostsEnabled.getter();
  uint64_t v82 = v5;
  if ((v24 & 1) == 0) {
    goto LABEL_7;
  }
  os_log_t v76 = v23;
  uint64_t v77 = v19;
  uint64_t v78 = v17;
  uint64_t v79 = v4;
  if ((a4 & 1) == 0)
  {
    if (!v83)
    {

      __break(1u);
LABEL_7:

      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v4, v16, v8);
LABEL_20:
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      uint64_t v66 = OSSignpostIntervalState.init(id:isOpen:)();
      sub_18AF16D24();
      v67();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v82, v17);
      uint64_t v68 = (objc_class *)type metadata accessor for SignpostIntervalStateWrapper();
      id v69 = (char *)objc_allocWithZone(v68);
      *(void *)&v69[OBJC_IVAR____TtC8CloudKitP33_D874BC29987C0F9F89EC9BDAEEBD096F28SignpostIntervalStateWrapper_wrapped] = v66;
      v86.id receiver = v69;
      v86.Class super_class = v68;
      swift_retain();
      id v70 = objc_msgSendSuper2(&v86, sel_init);
      sub_18B0E2B74((uint64_t)v22, v70);
      swift_release();

      return;
    }
LABEL_12:
    uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
    uint64_t v75 = v8;
    uint64_t v73 = v25;
    v25((uint64_t)v81, v16, v8);
    uint64_t v26 = swift_slowAlloc();
    long long v27 = (void *)swift_slowAlloc();
    uint64_t v72 = swift_slowAlloc();
    uint64_t v84 = v72;
    *(_DWORD *)uint64_t v26 = 136316418;
    id v28 = objc_msgSend(v22, sel_operationID);
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    uint64_t v32 = sub_18AF4095C(v29, v31, &v84);
    sub_18AF39360(v32);

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2112;
    id v33 = objc_msgSend(v22, sel_containerID);
    sub_18AF186C8((uint64_t)v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v71 = v27;
    *long long v27 = v33;

    *(_WORD *)(v26 + 22) = 2080;
    id v34 = objc_msgSend(v22, sel_group);
    if (v34)
    {
      uint64_t v35 = v34;
      id v36 = objc_msgSend(v34, sel_operationGroupID);

      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;
    }
    else
    {
      unint64_t v39 = 0xE400000000000000;
      uint64_t v37 = 1701736270;
    }
    uint64_t v40 = sub_18AF4095C(v37, v39, &v84);
    sub_18AF186C8(v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2082;
    id v41 = objc_msgSend(v22, sel_group);
    uint64_t v74 = v10;
    if (v41 && (uint64_t v42 = sub_18AF35E24(v41), v43))
    {
      unint64_t v44 = v43;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v44 = 0xE400000000000000;
      uint64_t v42 = 1701736270;
    }
    uint64_t v45 = sub_18AF4095C(v42, v44, &v84);
    sub_18AF39360(v45);

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 42) = 2082;
    id v46 = objc_msgSend(v22, sel_operationInfo);
    id v47 = objc_msgSend(v46, sel_discretionaryNetworkBehavior);

    unint64_t v48 = CKStringForDiscretionaryNetworkBehavior((unint64_t)v47);
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v51 = v50;

    uint64_t v52 = sub_18AF4095C(v49, v51, &v84);
    sub_18AF186C8(v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 52) = 2082;
    id v53 = objc_msgSend(v22, sel_qualityOfService);
    uint64_t v57 = CKStringForQOS((uint64_t)v53, v54, v55, v56);
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v60 = v59;

    uint64_t v61 = sub_18AF4095C(v58, v60, &v84);
    sub_18AF186C8(v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v62 = v81;
    os_signpost_id_t v63 = OSSignpostID.rawValue.getter();
    os_log_t v64 = v76;
    _os_signpost_emit_with_name_impl(&dword_18AF10000, v76, (os_signpost_type_t)v80, v63, v83, "ID: %{name=ID}s, Container: %{name=Container}@, GroupID: %{name=GroupID}s, GroupName: %{name=GroupName,public}s, Behavior: %{name=Behavior,public}s, QoS: %{name=QoS,public}s", (uint8_t *)v26, 0x3Eu);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    sub_18AF388F8();
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v65 = v75;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v62, v75);
    uint64_t v17 = v78;
    uint64_t v19 = v77;
    v73(v79, v16, v65);
    goto LABEL_20;
  }
  if ((unint64_t)v83 >> 32)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v83 >> 11 != 27)
  {
    if (v83 >> 16 <= 0x10)
    {
      uint64_t v83 = &v85;
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
}

void CKOperationSignpostEnd(_:_:error:)(uint64_t a1, const char *a2, uint64_t a3, unsigned __int8 a4, void *a5)
{
  os_signpost_id_t v63 = (char *)a2;
  type metadata accessor for OSSignpostError();
  sub_18AF22CB0();
  uint64_t v59 = v11;
  unint64_t v60 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v55 - v15;
  type metadata accessor for OSSignpostID();
  sub_18AF22CB0();
  uint64_t v64 = v18;
  uint64_t v65 = v17;
  MEMORY[0x1F4188790](v17);
  sub_18AF391C8();
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = ((char *)&v55 - v20);
  MEMORY[0x1F4188790](v22);
  char v24 = (char *)&v55 - v23;
  uint64_t v25 = type metadata accessor for OSSignposter();
  sub_18AF22CB0();
  uint64_t v61 = v26;
  MEMORY[0x1F4188790](v27);
  sub_18AF38FBC();
  uint64_t v62 = a1;
  if ((id)sub_18B0E2B60(a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v69, 0, sizeof(v69));
  }
  sub_18AF5515C((uint64_t)v69, (uint64_t)v70);
  if (!v70[3]) {
    goto LABEL_13;
  }
  type metadata accessor for SignpostIntervalStateWrapper();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    if (qword_1EB279458 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_18AF412A0(v34, (uint64_t)qword_1EB279440);
    id v28 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v36 = 0;
      _os_log_impl(&dword_18AF10000, v28, v35, "Tried to end a signpost, but none was in effect", v36, 2u);
      sub_18AF388F8();
    }
    goto LABEL_43;
  }
  id v28 = v68;
  if (a5)
  {
    int v58 = a4;
    uint64_t v57 = v21;
    id v29 = a5;
    if (qword_1E9124F48 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_18AF412A0(v25, (uint64_t)qword_1E9124F28);
    uint64_t v5 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v6, v30, v25);
    id v31 = a5;
    id v32 = a5;
    uint64_t v21 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    int v56 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      os_log_t v55 = v21;
      if ((v58 & 1) == 0)
      {
        id v33 = v60;
        if (!v63)
        {

          __break(1u);
LABEL_13:
          sub_18AF551C4((uint64_t)v70);
          goto LABEL_14;
        }
        goto LABEL_29;
      }
      id v33 = v60;
      if ((unint64_t)v63 >> 32)
      {
        __break(1u);
      }
      else
      {
        if (v63 >> 11 == 27)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (v63 >> 16 <= 0x10)
        {
          os_signpost_id_t v63 = &v66;
LABEL_29:
          swift_retain();
          checkForErrorAndConsumeState(state:)();
          swift_release();
          uint64_t v39 = v59;
          if ((*(unsigned int (**)(char *, const char *))(v59 + 88))(v16, v33) == *MEMORY[0x1E4FBD340])
          {
            char v40 = 0;
            char v41 = 0;
            unint64_t v60 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, const char *))(v39 + 8))(v16, v33);
            unint64_t v60 = "Error: %{name=Error}@";
            char v41 = 2;
            char v40 = 1;
          }
          uint64_t v42 = v57;
          (*(void (**)(NSObject *, char *, uint64_t))(v64 + 16))(v57, v24, v65);
          uint64_t v43 = swift_slowAlloc();
          unint64_t v44 = (void *)swift_slowAlloc();
          *(unsigned char *)uint64_t v43 = v41;
          *(unsigned char *)(v43 + 1) = v40;
          *(_WORD *)(v43 + 2) = 2112;
          id v45 = a5;
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          v70[0] = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v44 = v46;

          os_signpost_id_t v47 = OSSignpostID.rawValue.getter();
          os_log_t v48 = v55;
          _os_signpost_emit_with_name_impl(&dword_18AF10000, v55, (os_signpost_type_t)v56, v47, v63, v60, (uint8_t *)v43, 0xCu);
          sub_18AF161EC((uint64_t *)&unk_1E9125610);
          swift_arrayDestroy();
          sub_18AF388F8();
          sub_18AF388F8();

          uint64_t v49 = v65;
          unint64_t v50 = *(void (**)(char *, uint64_t))(v64 + 8);
          v50(v24, v65);
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v6, v25);
          v50((char *)v42, v49);
          goto LABEL_42;
        }
      }
      __break(1u);
      goto LABEL_46;
    }
    goto LABEL_24;
  }
  char v24 = (char *)a4;
  if (qword_1E9124F48 != -1) {
    swift_once();
  }
  sub_18AF412A0(v25, (uint64_t)qword_1E9124F28);
  a5 = *(Class *)((char *)&v28->isa
                + OBJC_IVAR____TtC8CloudKitP33_D874BC29987C0F9F89EC9BDAEEBD096F28SignpostIntervalStateWrapper_wrapped);
  uint64_t v37 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  uint64_t v6 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_41:

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v5, v65);
    goto LABEL_42;
  }
  if ((a4 & 1) == 0)
  {
    unint64_t v38 = v60;
    if (!v63)
    {
      __break(1u);
LABEL_24:

      (*(void (**)(char *, uint64_t))(v64 + 8))(v24, v65);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v25);
LABEL_42:
      sub_18B0E2B74(v62, 0);
LABEL_43:

      return;
    }
    goto LABEL_37;
  }
  unint64_t v38 = v60;
  if ((unint64_t)v63 >> 32)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v63 >> 11 != 27)
  {
    if (v63 >> 16 > 0x10)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    os_signpost_id_t v63 = &v67;
LABEL_37:
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(char *, const char *))(v59 + 88))(v13, v38) == *MEMORY[0x1E4FBD340])
    {
      unint64_t v51 = "[Error] Interval already ended";
    }
    else
    {
      sub_18AF16D24();
      v52();
      unint64_t v51 = "";
    }
    id v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v53 = 0;
    os_signpost_id_t v54 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_18AF10000, v37, (os_signpost_type_t)v6, v54, v63, v51, v53, 2u);
    sub_18AF388F8();
    goto LABEL_41;
  }
LABEL_49:
  __break(1u);
}

uint64_t type metadata accessor for SignpostIntervalStateWrapper()
{
  return self;
}

uint64_t sub_18B0024EC()
{
  uint64_t result = CKUseSystemInstalledBinariesFuncForSwift();
  BOOL v1 = __sTestOverridesAvailable == 0;
  BOOL v2 = (result & v1) == 0;
  if ((result & v1) != 0) {
    unint64_t v3 = 0xD000000000000012;
  }
  else {
    unint64_t v3 = 0xD000000000000017;
  }
  unint64_t v4 = 0x800000018B1D5020;
  if (!v2) {
    unint64_t v4 = 0x800000018B1D5040;
  }
  qword_1EB2794A8 = v3;
  unk_1EB2794B0 = v4;
  return result;
}

uint64_t static __CKLogSubsystem.name.getter()
{
  if (qword_1EB2794C0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1EB2794A8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_18B0025C8(uint64_t a1)
{
  return sub_18AF3951C(a1, qword_1EB279440);
}

uint64_t CKLog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1EB279458, (uint64_t)qword_1EB279440, a1);
}

uint64_t sub_18B0025FC(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9127598);
}

uint64_t CKLogPCS.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E9125780, (uint64_t)qword_1E9127598, a1);
}

uint64_t sub_18B002638(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91275B0);
}

uint64_t CKLogSQL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E9125788, (uint64_t)qword_1E91275B0, a1);
}

uint64_t sub_18B002674(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91275C8);
}

uint64_t CKLogStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E9125790, (uint64_t)qword_1E91275C8, a1);
}

uint64_t sub_18B0026B0(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91275E0);
}

uint64_t CKLogRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E9125798, (uint64_t)qword_1E91275E0, a1);
}

uint64_t sub_18B0026F4(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91275F8);
}

uint64_t CKLogMMCS.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91257A0, (uint64_t)qword_1E91275F8, a1);
}

uint64_t sub_18B002730(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9127610);
}

uint64_t CKLogAsset.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91257A8, (uint64_t)qword_1E9127610, a1);
}

uint64_t sub_18B002770(uint64_t a1)
{
  return sub_18AF3951C(a1, qword_1E9124F50);
}

uint64_t CKLogOp.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E9124F70, (uint64_t)qword_1E9124F50, a1);
}

uint64_t sub_18B0027A4(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9127628);
}

uint64_t CKLogTrafficBinary.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(qword_1E91257B8, (uint64_t)qword_1E9127628, a1);
}

uint64_t sub_18B0027F4(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9124BF0);
}

uint64_t CKLogTrafficCompressed.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(qword_1E9124C10, (uint64_t)qword_1E9124BF0, a1);
}

uint64_t sub_18B00283C(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9127640);
}

uint64_t CKLogLogStats.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91257C8, (uint64_t)qword_1E9127640, a1);
}

uint64_t sub_18B002880(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9127658);
}

uint64_t CKLogScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91257D0, (uint64_t)qword_1E9127658, a1);
}

uint64_t sub_18B0028C8(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9127670);
}

uint64_t CKLogNotificationListener.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(qword_1E91257D8, (uint64_t)qword_1E9127670, a1);
}

uint64_t sub_18B002910(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91253B0);
}

uint64_t CKLogEngine.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91252D0, (uint64_t)qword_1E91253B0, a1);
}

uint64_t sub_18B002950(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E9127688);
}

uint64_t CKLogDataRepair.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91257E8, (uint64_t)qword_1E9127688, a1);
}

uint64_t sub_18B002998(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91276A0);
}

uint64_t CKLogDistributedSync.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91257F0, (uint64_t)qword_1E91276A0, a1);
}

uint64_t sub_18B0029E8(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91276B8);
}

uint64_t CKLogDiscretionaryDaemon.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E91257F8, (uint64_t)qword_1E91276B8, a1);
}

uint64_t sub_18B002A30(uint64_t a1)
{
  return sub_18B002A54(a1, qword_1E91276D0);
}

uint64_t sub_18B002A54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_18AF8F144(v3, a2);
  sub_18AF412A0(v3, (uint64_t)a2);
  if (qword_1EB2794C0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t CKLogMockServer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18B002B30(&qword_1E9125800, (uint64_t)qword_1E91276D0, a1);
}

uint64_t sub_18B002B30@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = sub_18AF412A0(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

ValueMetadata *type metadata accessor for __CKLogSubsystem()
{
  return &type metadata for __CKLogSubsystem;
}

__CFString *CKStringFromPartition(uint64_t a1)
{
  BOOL v1 = @"Unknown Partition Type";
  if (a1 == 1) {
    BOOL v1 = @"Prod";
  }
  if (a1 == 2) {
    return @"Carry";
  }
  else {
    return v1;
  }
}

__CFString *CKStringFromDeviceToDeviceDataPrivacyStatus(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E545FFC8[a1];
  }
}

void sub_18B002CB8(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  unint64_t v4 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v4;
    int v7 = 134218240;
    uint64_t v8 = v5;
    __int16 v9 = 1024;
    uid_t v10 = geteuid();
    _os_log_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEFAULT, "Setting the in-memory account info validation counter to %ld for uid %u", (uint8_t *)&v7, 0x12u);
  }
  qword_1EB279A48 = *(void *)(a1 + 32);
}

uint64_t sub_18B002DCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_invalidateCachedAccountInfo(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18B002DD4()
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v0 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)BOOL v1 = 0;
    _os_log_fault_impl(&dword_18AF10000, v0, OS_LOG_TYPE_FAULT, "Could not validate account info cache. (This is a potential performance issue.)", v1, 2u);
  }
}

void sub_18B003034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_18B003060(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = sub_18B00329C;
  v16[3] = &unk_1E545FF40;
  v16[4] = &v17;
  CKOncePerBoot(@"AccountInfoValidationCounterReset", v16);
  if (*((unsigned char *)v18 + 24))
  {
    uint64_t v4 = 1;
  }
  else
  {
    if (__sTestOverridesAvailable) {
      uint64_t v5 = @"TEST_AccountInfoValidationCounter";
    }
    else {
      uint64_t v5 = @"AccountInfoValidationCounter";
    }
    uint64_t v6 = v5;
    uint64_t v9 = objc_msgSend_integerForKey_(v3, v7, (uint64_t)v6, v8);

    uint64_t v4 = v9 + 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (__sTestOverridesAvailable) {
    uint64_t v11 = @"TEST_AccountInfoValidationCounter";
  }
  else {
    uint64_t v11 = @"AccountInfoValidationCounter";
  }
  uint64_t v12 = v11;
  objc_msgSend_setInteger_forKey_(v3, v13, v10, (uint64_t)v12);

  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v14 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    *(_DWORD *)buf = 134217984;
    uint64_t v22 = v15;
    _os_log_impl(&dword_18AF10000, v14, OS_LOG_TYPE_INFO, "Invalidated adopter account info caches. validationCounter: %zu", buf, 0xCu);
  }
  _Block_object_dispose(&v17, 8);
}

void sub_18B003278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B00329C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_18B0037D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_strongToWeakObjectsMapTable(MEMORY[0x1E4F28E10], a2, a3, a4);
  uint64_t v5 = qword_1EB279A88;
  qword_1EB279A88 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

void *sub_18B0042A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B004488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0044A0(uint64_t a1)
{
  BOOL v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B004E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

id sub_18B004E70(void *a1, objc_class *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = a1;
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v16, (uint64_t)v20, 16);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v3);
        }
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v11 = NSStringFromClass(a2);
          uint64_t v12 = (objc_class *)objc_opt_class();
          uint64_t v13 = NSStringFromClass(v12);
          uint64_t v10 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v14, @"CKInternalErrorDomain", 1017, @"Wrong class for %@: %@", v11, v13, v16);

          goto LABEL_11;
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v9, (uint64_t)&v16, (uint64_t)v20, 16);
      if (v6) {
        continue;
      }
      break;
    }
  }
  uint64_t v10 = 0;
LABEL_11:

  return v10;
}

id sub_18B004FF8(uint64_t a1, void *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  id v3 = a2;
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v73, (uint64_t)v77, 16);
  if (!v5)
  {
    unint64_t v60 = 0;
    goto LABEL_33;
  }
  uint64_t v9 = v5;
  uint64_t v10 = *(void *)v74;
  unint64_t v11 = 0x1E545E000uLL;
  uint64_t v71 = a1;
  while (2)
  {
    uint64_t v12 = 0;
    uint64_t v72 = v9;
    do
    {
      if (*(void *)v74 != v10) {
        objc_enumerationMutation(v3);
      }
      uint64_t v13 = *(void **)(*((void *)&v73 + 1) + 8 * v12);
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = objc_msgSend_recordID(v13, v6, v7, v8);
      long long v18 = objc_msgSend_objectForKeyedSubscript_(v14, v16, (uint64_t)v15, v17);

      uint64_t v22 = objc_msgSend_fieldName(v13, v19, v20, v21);
      uint64_t v25 = objc_msgSend_objectForKeyedSubscript_(v18, v23, (uint64_t)v22, v24);

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v26 = v13;
      }
      else {
        uint64_t v26 = 0;
      }
      id v27 = v26;
      id v31 = v27;
      if (v25)
      {
        if (v27)
        {
          if ((objc_msgSend_listIndex(v27, v28, v29, v30) & 0x8000000000000000) == 0)
          {
            if (objc_msgSend_count(v25, v28, v29, v30))
            {
              uint64_t v35 = objc_msgSend_listIndex(v31, v32, v33, v34);
              if (!objc_msgSend_containsIndex_(v25, v36, v35, v37)) {
                goto LABEL_14;
              }
              uint64_t v62 = objc_msgSend_fieldName(v31, v28, v29, v30);
              uint64_t v70 = objc_msgSend_listIndex(v31, v65, v66, v67);
              objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v68, @"CKInternalErrorDomain", 1017, @"Duplicate metadata for field %@ and index %ld", v62, v70);
            }
            else
            {
              uint64_t v62 = objc_msgSend_fieldName(v31, v32, v33, v34);
              objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v64, @"CKInternalErrorDomain", 1017, @"Duplicate metadata for field %@", v62);
            unint64_t v60 = };
LABEL_32:

            goto LABEL_33;
          }
          uint64_t v61 = v13;
        }
        else
        {
          uint64_t v61 = 0;
        }
        uint64_t v62 = objc_msgSend_fieldName(v13, v28, v29, v30);
        unint64_t v60 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v63, @"CKInternalErrorDomain", 1017, @"Duplicate metadata for field %@", v62);
        uint64_t v13 = v61;
        goto LABEL_32;
      }
LABEL_14:
      if (v18)
      {
        if (v25) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v38 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v28, v29, v30);
        unint64_t v39 = v11;
        uint64_t v40 = v10;
        char v41 = *(void **)(a1 + 32);
        objc_msgSend_recordID(v13, v42, v43, v44);
        v46 = id v45 = v3;
        os_signpost_id_t v47 = v41;
        uint64_t v10 = v40;
        unint64_t v11 = v39;
        long long v18 = (void *)v38;
        uint64_t v9 = v72;
        objc_msgSend_setObject_forKeyedSubscript_(v47, v48, (uint64_t)v18, (uint64_t)v46);

        id v3 = v45;
        a1 = v71;
        if (v25)
        {
LABEL_16:
          if (!v31) {
            goto LABEL_22;
          }
          goto LABEL_20;
        }
      }
      uint64_t v25 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v28, v29, v30);
      uint64_t v52 = objc_msgSend_fieldName(v13, v49, v50, v51);
      objc_msgSend_setObject_forKeyedSubscript_(v18, v53, (uint64_t)v25, (uint64_t)v52);

      if (!v31) {
        goto LABEL_22;
      }
LABEL_20:
      if ((objc_msgSend_listIndex(v31, v28, v29, v30) & 0x8000000000000000) == 0)
      {
        uint64_t v57 = objc_msgSend_listIndex(v31, v54, v55, v56);
        objc_msgSend_addIndex_(v25, v58, v57, v59);
      }
LABEL_22:

      ++v12;
    }
    while (v9 != v12);
    uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v73, (uint64_t)v77, 16);
    unint64_t v60 = 0;
    if (v9) {
      continue;
    }
    break;
  }
LABEL_33:

  return v60;
}

BOOL sub_18B0053A4(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v14 = 0;
  uint64_t v3 = *MEMORY[0x1E4F1C5F8];
  id v13 = 0;
  objc_msgSend_getResourceValue_forKey_error_(v2, v4, (uint64_t)&v14, v3, &v13);
  id v5 = v14;
  id v9 = v13;
  if (v5)
  {
    BOOL v10 = objc_msgSend_unsignedIntegerValue(v5, v6, v7, v8) == 0;
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    unint64_t v11 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v16 = v2;
      __int16 v17 = 2112;
      id v18 = v9;
      _os_log_error_impl(&dword_18AF10000, v11, OS_LOG_TYPE_ERROR, "Could not get size for file %@: %@", buf, 0x16u);
    }
    BOOL v10 = 1;
  }

  return v10;
}

void sub_18B0054F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v7 + 24))
  {
    *(unsigned char *)(v7 + 24) = 1;
  }
  else
  {
    id v14 = v3;
    unint64_t v11 = objc_msgSend_fileURL(v3, v4, v5, v6);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = objc_msgSend_fileURL(v14, v8, v9, v10);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(uint64_t, void *))(v12 + 16))(v12, v13);
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_size(v14, v8, v9, v10) == 0;
    }

    id v3 = v14;
  }
}

id sub_18B008908(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_18B008CA4(a1, a2, a3, a4);
  uint64_t v8 = objc_msgSend_objectForKey_(v5, v6, a1, v7);

  return v8;
}

void sub_18B00895C(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFUserNotificationRef *)(a1 + 40), (CFUserNotificationCallBack)sub_18B008B64, 0);
  if (RunLoopSource)
  {
    id v3 = RunLoopSource;
    Current = CFRunLoopGetCurrent();
    CFStringRef v5 = CFRunLoopCopyCurrentMode(Current);
    if (!v5) {
      CFStringRef v5 = (const __CFString *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1D410]);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = *(id *)(a1 + 32);
    unint64_t v11 = sub_18B008CA4((uint64_t)v7, v8, v9, v10);
    uint64_t v12 = _Block_copy(v7);

    objc_msgSend_setObject_forKey_(v11, v13, (uint64_t)v12, v6);
    CFRunLoopAddSource(Current, v3, v5);
    CFRelease(v5);
    CFRelease(v3);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v14 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      int v16 = 138412290;
      uint64_t v17 = v15;
      _os_log_error_impl(&dword_18AF10000, v14, OS_LOG_TYPE_ERROR, "Couldn't schedule response for notification %@", (uint8_t *)&v16, 0xCu);
    }
    CFUserNotificationCancel(*(CFUserNotificationRef *)(a1 + 40));
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_18B008B64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_18B008908(a1, a2, a3, a4);
  id v7 = (void *)v6;
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(v6 + 16))(v6, a1, a2);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v12 = ck_log_facility_ck;
    uint64_t v8 = os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      int v16 = 138412290;
      uint64_t v17 = a1;
      _os_log_error_impl(&dword_18AF10000, v12, OS_LOG_TYPE_ERROR, "No completion block for notification %@", (uint8_t *)&v16, 0xCu);
    }
  }
  id v13 = sub_18B008CA4(v8, v9, v10, v11);
  objc_msgSend_removeObjectForKey_(v13, v14, a1, v15);
}

uint64_t sub_18B008C90(uint64_t a1, const char *a2)
{
  return objc_msgSend_showUserNotification_withCompletionBlock_(CKUserNotificationUtilities, a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_18B008CA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)qword_1E912FDC0;
  if (!qword_1E912FDC0)
  {
    uint64_t v5 = objc_msgSend_strongToStrongObjectsMapTable(MEMORY[0x1E4F28E10], a2, a3, a4);
    uint64_t v6 = (void *)qword_1E912FDC0;
    qword_1E912FDC0 = v5;

    uint64_t v4 = (void *)qword_1E912FDC0;
  }

  return v4;
}

__CFString *CKSharingSummaryStringFromOptionsGroups(void *a1)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    id v123 = [CKException alloc];
    id v125 = (id)objc_msgSend_initWithName_format_(v123, v124, *MEMORY[0x1E4F1C3C8], @"Must specify non-nil optionsGroups");
    objc_exception_throw(v125);
  }
  id v3 = v1;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v131, (uint64_t)v135, 16);
  if (!v4)
  {
    uint64_t v121 = &stru_1ED7F5C98;
    goto LABEL_45;
  }
  uint64_t v8 = v4;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v9 = 0;
  char isSelected = 0;
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)v132;
  uint64_t v127 = v3;
  do
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v132 != v11) {
        objc_enumerationMutation(v3);
      }
      id v13 = *(void **)(*((void *)&v131 + 1) + 8 * i);
      id v14 = objc_msgSend_identifier(v13, v5, v6, v7);
      int isEqualToString = objc_msgSend_isEqualToString_(v14, v15, @"CKSharingPermissionGroupID", v16);

      if (isEqualToString)
      {
        id v21 = v13;
        uint64_t v25 = objc_msgSend_options(v21, v22, v23, v24);
        uint64_t v9 = objc_msgSend_count(v25, v26, v27, v28);

        id v32 = objc_msgSend_selectedOptionIdentifier(v21, v29, v30, v31);
        char v35 = objc_msgSend_isEqualToString_(v32, v33, @"CKSharingPermissionViewOnlyOptionID", v34);

        if (v35)
        {
          uint64_t v10 = @"RO";
        }
        else
        {
          uint64_t v64 = objc_msgSend_selectedOptionIdentifier(v21, v36, v37, v38);
          char v67 = objc_msgSend_isEqualToString_(v64, v65, @"CKSharingPermissionCanMakeChangesOptionID", v66);

          if (v67)
          {
            uint64_t v10 = @"RW";
          }
          else
          {
            unint64_t v92 = objc_msgSend_selectedOptionIdentifier(v21, v68, v69, v70);
            int v95 = objc_msgSend_isEqualToString_(v92, v93, @"CKSharingPermissionMixedOptionID", v94);

            if (v95) {
              uint64_t v10 = @"RO";
            }
          }
        }
      }
      else
      {
        unint64_t v39 = objc_msgSend_identifier(v13, v18, v19, v20);
        int v42 = objc_msgSend_isEqualToString_(v39, v40, @"CKSharingWhoCanAccessGroupID", v41);

        if (v42)
        {
          id v21 = v13;
          uint64_t v49 = objc_msgSend_options(v21, v46, v47, v48);
          uint64_t v129 = objc_msgSend_count(v49, v50, v51, v52);

          uint64_t v56 = objc_msgSend_selectedOptionIdentifier(v21, v53, v54, v55);
          char v59 = objc_msgSend_isEqualToString_(v56, v57, @"CKSharingAccessAnyoneWithLinkOptionID", v58);

          if (v59)
          {
            os_signpost_id_t v63 = @"anyone";
          }
          else
          {
            uint64_t v88 = objc_msgSend_selectedOptionIdentifier(v21, v60, v61, v62);
            int v91 = objc_msgSend_isEqualToString_(v88, v89, @"CKSharingAccessSpecifiedRecipientsOnlyOptionID", v90);

            os_signpost_id_t v63 = v130;
            if (v91) {
              os_signpost_id_t v63 = @"invited";
            }
          }
          uint64_t v130 = v63;
        }
        else
        {
          uint64_t v71 = objc_msgSend_identifier(v13, v43, v44, v45);
          int v74 = objc_msgSend_isEqualToString_(v71, v72, @"CKSharingAllowOthersToInviteGroupID", v73);

          if (!v74) {
            continue;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v21 = v13;
            uint64_t v81 = objc_msgSend_selectedOptionIdentifier(v21, v78, v79, v80);
            if (objc_msgSend_isEqualToString_(v81, v82, @"CKSharingAllowOthersToInviteOptionID", v83))
            {
              char v87 = 1;
            }
            else
            {
              uint64_t v110 = objc_msgSend_selectedOptionIdentifier(v21, v84, v85, v86);
              char v87 = objc_msgSend_isEqualToString_(v110, v111, @"CKSharingAllowOthersToInviteMixedOptionID", v112);

              id v3 = v127;
            }

            isSelected |= v87;
          }
          else
          {
            uint64_t v96 = objc_msgSend_options(v13, v75, v76, v77);
            objc_msgSend_firstObject(v96, v97, v98, v99);
            id v21 = (id)objc_claimAutoreleasedReturnValue();

            BOOL v103 = objc_msgSend_identifier(v21, v100, v101, v102);
            int v106 = objc_msgSend_isEqualToString_(v103, v104, @"CKSharingAllowOthersToInviteOptionID", v105);

            if (v106) {
              char isSelected = objc_msgSend_isSelected(v21, v107, v108, v109);
            }
            id v3 = v127;
          }
        }
      }
    }
    uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v131, (uint64_t)v135, 16);
  }
  while (v8);
  if (v9 == 1
    && v129 == 1
    && objc_msgSend_isEqualToString_(v10, v5, @"RW", v7)
    && objc_msgSend_isEqualToString_(v130, v5, @"invited", v7))
  {
    uint64_t v113 = @"COLLABORATION_OPTIONS_SUMMARY_invited_RW_no_invite";
    if (isSelected) {
      uint64_t v113 = @"COLLABORATION_OPTIONS_SUMMARY_invited_RW_allow_invite";
    }
    uint64_t v120 = v113;
LABEL_43:
    CKLocalizedString(v120, &stru_1ED7F5C98, v114, v115, v116, v117, v118, v119, v126);
    uint64_t v121 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v121 = &stru_1ED7F5C98;
    if (v130)
    {
      if (v10)
      {
        uint64_t v126 = (uint64_t)v130;
        objc_msgSend_stringWithFormat_(NSString, v5, @"COLLABORATION_OPTIONS_SUMMARY_%@_%@", v7);
        uint64_t v120 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (v120) {
          goto LABEL_43;
        }
      }
    }
  }
LABEL_45:

  return v121;
}

void sub_18B0093AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B009A9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKSharingAccessTypeFromOptionsGroups(void *a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    uint64_t v50 = [CKException alloc];
    uint64_t v52 = objc_msgSend_initWithName_format_(v50, v51, *MEMORY[0x1E4F1C3C8], @"Must specify non-nil optionsGroups");
    goto LABEL_26;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  obunint64_t j = v1;
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v66, (uint64_t)v70, 16);
  if (!v3)
  {

    goto LABEL_24;
  }
  uint64_t v7 = v3;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)v67;
  do
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (*(void *)v67 != v10) {
        objc_enumerationMutation(obj);
      }
      uint64_t v12 = *(void **)(*((void *)&v66 + 1) + 8 * i);
      id v13 = objc_msgSend_identifier(v12, v4, v5, v6);
      char isEqualToString = objc_msgSend_isEqualToString_(v13, v14, @"CKSharingWhoCanAccessGroupID", v15);

      if (isEqualToString)
      {
        uint64_t v20 = v8;
        uint64_t v8 = v12;
        id v21 = v9;
      }
      else
      {
        uint64_t v22 = objc_msgSend_identifier(v12, v17, v18, v19);
        int v25 = objc_msgSend_isEqualToString_(v22, v23, @"CKSharingPermissionGroupID", v24);

        uint64_t v20 = v9;
        id v21 = v12;
        if (!v25) {
          continue;
        }
      }
      id v26 = v12;

      uint64_t v9 = v21;
    }
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v66, (uint64_t)v70, 16);
  }
  while (v7);

  if (!v8)
  {
LABEL_24:
    id v53 = [CKException alloc];
    uint64_t v52 = objc_msgSend_initWithName_format_(v53, v54, *MEMORY[0x1E4F1C3C8], @"Could not find any access picker group in optionsGroups: %@", obj);
    goto LABEL_26;
  }
  uint64_t v30 = objc_msgSend_selectedOptionIdentifier(v8, v27, v28, v29);
  int v33 = objc_msgSend_isEqualToString_(v30, v31, @"CKSharingAccessAnyoneWithLinkOptionID", v32);

  if (!v33)
  {
    uint64_t v44 = 1;
    goto LABEL_21;
  }
  if (!v9)
  {
    uint64_t v55 = [CKException alloc];
    uint64_t v52 = objc_msgSend_initWithName_format_(v55, v56, *MEMORY[0x1E4F1C3C8], @"Could not find any permission picker group for anyone-with-link case optionsGroups: %@", obj);
LABEL_26:
    objc_exception_throw(v52);
  }
  uint64_t v37 = objc_msgSend_selectedOptionIdentifier(v9, v34, v35, v36);
  char v40 = objc_msgSend_isEqualToString_(v37, v38, @"CKSharingPermissionViewOnlyOptionID", v39);

  if (v40)
  {
    uint64_t v44 = 2;
  }
  else
  {
    uint64_t v45 = objc_msgSend_selectedOptionIdentifier(v9, v41, v42, v43);
    char v48 = objc_msgSend_isEqualToString_(v45, v46, @"CKSharingPermissionCanMakeChangesOptionID", v47);

    if ((v48 & 1) == 0)
    {
      uint64_t v57 = [CKException alloc];
      uint64_t v58 = *MEMORY[0x1E4F1C3C8];
      uint64_t v62 = objc_msgSend_selectedOptionIdentifier(v9, v59, v60, v61);
      id v64 = (id)objc_msgSend_initWithName_format_(v57, v63, v58, @"Unknown permission group selected option %@ for anyone-with-link case optionsGroups: %@", v62, obj);

      objc_exception_throw(v64);
    }
    uint64_t v44 = 3;
  }
LABEL_21:

  return v44;
}

uint64_t CKSharingPermissionTypeFromOptionsGroups(void *a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    uint64_t v43 = [CKException alloc];
    uint64_t v42 = objc_msgSend_initWithName_format_(v43, v44, *MEMORY[0x1E4F1C3C8], @"Must specify non-nil optionsGroups");
LABEL_20:
    objc_exception_throw(v42);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v2 = v1;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v53, (uint64_t)v57, 16);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v8 = v4;
  uint64_t v9 = *(void *)v54;
LABEL_4:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v54 != v9) {
      objc_enumerationMutation(v2);
    }
    uint64_t v11 = *(void **)(*((void *)&v53 + 1) + 8 * v10);
    uint64_t v12 = objc_msgSend_identifier(v11, v5, v6, v7);
    char isEqualToString = objc_msgSend_isEqualToString_(v12, v13, @"CKSharingPermissionGroupID", v14);

    if (isEqualToString) {
      break;
    }
    if (v8 == ++v10)
    {
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v53, (uint64_t)v57, 16);
      if (!v8)
      {
LABEL_10:

        goto LABEL_18;
      }
      goto LABEL_4;
    }
  }
  id v16 = v11;

  if (!v16)
  {
LABEL_18:
    char v40 = [CKException alloc];
    uint64_t v42 = objc_msgSend_initWithName_format_(v40, v41, *MEMORY[0x1E4F1C3C8], @"Could not find any permission picker group in optionsGroups: %@", v2);
    goto LABEL_20;
  }
  uint64_t v20 = objc_msgSend_selectedOptionIdentifier(v16, v17, v18, v19);
  char v23 = objc_msgSend_isEqualToString_(v20, v21, @"CKSharingPermissionViewOnlyOptionID", v22);

  if (v23)
  {
LABEL_16:
    uint64_t v34 = 2;
    goto LABEL_17;
  }
  uint64_t v27 = objc_msgSend_selectedOptionIdentifier(v16, v24, v25, v26);
  char v30 = objc_msgSend_isEqualToString_(v27, v28, @"CKSharingPermissionCanMakeChangesOptionID", v29);

  if ((v30 & 1) == 0)
  {
    uint64_t v35 = objc_msgSend_selectedOptionIdentifier(v16, v31, v32, v33);
    char v38 = objc_msgSend_isEqualToString_(v35, v36, @"CKSharingPermissionMixedOptionID", v37);

    if ((v38 & 1) == 0)
    {
      uint64_t v45 = [CKException alloc];
      uint64_t v46 = *MEMORY[0x1E4F1C3C8];
      uint64_t v50 = objc_msgSend_selectedOptionIdentifier(v16, v47, v48, v49);
      id v52 = (id)objc_msgSend_initWithName_format_(v45, v51, v46, @"Unknown permission group selected option %@ for optionsGroups: %@", v50, v2, (void)v53);

      objc_exception_throw(v52);
    }
    goto LABEL_16;
  }
  uint64_t v34 = 3;
LABEL_17:

  return v34;
}

uint64_t CKSharingAllowOthersToInviteFromOptionsGroups(void *a1)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    id v64 = [CKException alloc];
    id v66 = (id)objc_msgSend_initWithName_format_(v64, v65, *MEMORY[0x1E4F1C3C8], @"Must specify non-nil optionsGroups");
    objc_exception_throw(v66);
  }
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id v2 = v1;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v79, (uint64_t)v83, 16);
  if (v4)
  {
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)v80;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v80 != v9) {
          objc_enumerationMutation(v2);
        }
        uint64_t v11 = *(void **)(*((void *)&v79 + 1) + 8 * i);
        uint64_t v12 = objc_msgSend_identifier(v11, v5, v6, v7);
        int isEqualToString = objc_msgSend_isEqualToString_(v12, v13, @"CKSharingAllowOthersToInviteGroupID", v14);

        if (isEqualToString)
        {
          id v16 = v11;
          goto LABEL_12;
        }
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v79, (uint64_t)v83, 16);
      if (v8) {
        continue;
      }
      break;
    }
  }
  id v16 = 0;
LABEL_12:

  uint64_t v20 = objc_msgSend_options(v16, v17, v18, v19);
  uint64_t isSelected = objc_msgSend_count(v20, v21, v22, v23);

  if (isSelected)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v28 = v16;
      uint64_t v32 = objc_msgSend_selectedOptionIdentifier(v28, v29, v30, v31);
      if (objc_msgSend_isEqualToString_(v32, v33, @"CKSharingAllowOthersToInviteOptionID", v34))
      {

LABEL_19:
        uint64_t isSelected = 1;
        goto LABEL_22;
      }
      id v52 = objc_msgSend_selectedOptionIdentifier(v28, v35, v36, v37);
      char v55 = objc_msgSend_isEqualToString_(v52, v53, @"CKSharingAllowOthersToInviteMixedOptionID", v54);

      if (v55) {
        goto LABEL_19;
      }
      char v59 = objc_msgSend_selectedOptionIdentifier(v28, v56, v57, v58);
      char v62 = objc_msgSend_isEqualToString_(v59, v60, @"CKSharingOnlyYouCanInviteOthersOptionID", v61);

      if (v62)
      {
        uint64_t isSelected = 0;
        goto LABEL_22;
      }
      long long v67 = [CKException alloc];
      uint64_t v68 = *MEMORY[0x1E4F1C3C8];
      uint64_t v72 = objc_msgSend_selectedOptionIdentifier(v28, v76, v77, v78);
    }
    else
    {
      char v38 = objc_msgSend_options(v16, v25, v26, v27);
      objc_msgSend_firstObject(v38, v39, v40, v41);
      id v28 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v45 = objc_msgSend_identifier(v28, v42, v43, v44);
      int v48 = objc_msgSend_isEqualToString_(v45, v46, @"CKSharingAllowOthersToInviteOptionID", v47);

      if (v48)
      {
        uint64_t isSelected = objc_msgSend_isSelected(v28, v49, v50, v51);
LABEL_22:

        goto LABEL_23;
      }
      long long v67 = [CKException alloc];
      uint64_t v68 = *MEMORY[0x1E4F1C3C8];
      uint64_t v72 = objc_msgSend_identifier(v28, v69, v70, v71);
    }
    int v74 = (void *)v72;
    id v75 = (id)objc_msgSend_initWithName_format_(v67, v73, v68, @"Unknown admin group selection option %@ for optionsGroups: %@", v72, v2, (void)v79);

    objc_exception_throw(v75);
  }
LABEL_23:

  return isSelected;
}

void sub_18B00B754(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)MEMORY[0x1E4F28D60];
  id v4 = a2;
  uint64_t v8 = objc_msgSend_clockValue(v4, v5, v6, v7);
  objc_msgSend_indexSetWithIndex_(v3, v9, v8, v10);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = objc_msgSend_siteIdentifierObject(v4, v11, v12, v13);

  objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v2, v15, (uint64_t)v16, 1, v14);
}

void sub_18B00BA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00BAA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if ((a6 - 1) <= 1)
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = a2;
    uint64_t v15 = objc_msgSend_vector(v10, v12, v13, v14);
    uint64_t v17 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v16, a3, a4);
    objc_msgSend_addClockValuesInIndexSet_withClockType_atomState_forSiteIdentifier_(v15, v18, (uint64_t)v17, a5, *(unsigned __int8 *)(a1 + 48), v11);

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a4;
  }
}

void sub_18B00C078(uint64_t a1, void *a2)
{
  id v12 = a2;
  uint64_t v6 = objc_msgSend_vector(*(void **)(a1 + 32), v3, v4, v5);
  int v9 = objc_msgSend_atomStateForTimestamp_(v6, v7, (uint64_t)v12, v8);

  if (v9 == 3) {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v10, (uint64_t)v12, v11);
  }
}

void sub_18B00C0F8(uint64_t a1, void *a2)
{
  id v24 = a2;
  uint64_t v6 = objc_msgSend_vector(*(void **)(a1 + 32), v3, v4, v5);
  int v9 = objc_msgSend_atomStateForTimestamp_(v6, v7, (uint64_t)v24, v8);

  if (v9 == 2)
  {
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = (void *)MEMORY[0x1E4F28D60];
    uint64_t v15 = objc_msgSend_clockValue(v24, v10, v11, v12);
    uint64_t v18 = objc_msgSend_indexSetWithIndex_(v14, v16, v15, v17);
    uint64_t v22 = objc_msgSend_siteIdentifierObject(v24, v19, v20, v21);
    objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v13, v23, (uint64_t)v18, 1, v22);
  }
}

void sub_18B00C6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B00C714(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, @"LastFetchedDate", a4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return MEMORY[0x1F41817F8](v5, v7);
}

void sub_18B00C768(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error getting next fetch date: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00C940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00C958(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, @"CurrentUser", a4);
  if (v5)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = objc_opt_class();
    id v12 = 0;
    int v9 = objc_msgSend_unarchivedObjectOfClass_fromData_error_(v6, v8, v7, (uint64_t)v5, &v12);
    id v10 = v12;
    if (v10)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v11 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v14 = v10;
        _os_log_error_impl(&dword_18AF10000, v11, OS_LOG_TYPE_ERROR, "Error unarchiving current user: %@", buf, 0xCu);
      }
    }
    else
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v9);
    }
  }
}

void sub_18B00CAB4(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error getting current user: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00CD40(uint64_t a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v51 = a2;
  int v48 = objc_msgSend_objectForKeyedSubscript_(v51, v3, @"MissingAsset", v4);
  uint64_t v8 = objc_msgSend_allValues(v48, v5, v6, v7);
  uint64_t v49 = objc_opt_new();
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v9 = v8;
  uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v54, (uint64_t)v60, 16);
  if (v52)
  {
    uint64_t v11 = *(void *)v55;
    id v12 = &ck_log_initialization_predicate;
    uint64_t v50 = *(void *)v55;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v55 != v11) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v54 + 1) + 8 * v13);
        uint64_t v15 = *(void **)(a1 + 32);
        uint64_t v16 = objc_opt_class();
        id v53 = 0;
        uint64_t v18 = objc_msgSend_unarchivedObjectOfClass_fromData_error_(v15, v17, v16, v14, &v53);
        id v21 = v53;
        if (v21)
        {
          if (*v12 != -1) {
            dispatch_once(v12, ck_log_initialization_block);
          }
          uint64_t v22 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v59 = v21;
            uint64_t v42 = v22;
            uint64_t v43 = "Asset metadata decoding error: %@";
            uint32_t v44 = 12;
            goto LABEL_20;
          }
        }
        else if (v18)
        {
          id v24 = objc_msgSend_objectForKeyedSubscript_(v51, v19, @"Unrecoverable", v20);
          objc_msgSend_repairZoneRecordID(v18, v25, v26, v27);
          uint64_t v28 = a1;
          v30 = id v29 = v9;
          objc_msgSend_recordName(v30, v31, v32, v33);
          v35 = uint64_t v34 = v12;
          char v38 = objc_msgSend_objectForKey_(v24, v36, (uint64_t)v35, v37);

          id v12 = v34;
          id v9 = v29;
          a1 = v28;
          uint64_t v11 = v50;

          if (!v38) {
            objc_msgSend_addObject_(v49, v39, (uint64_t)v18, v40);
          }
        }
        else
        {
          if (*v12 != -1) {
            dispatch_once(v12, ck_log_initialization_block);
          }
          uint64_t v41 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            uint64_t v42 = v41;
            uint64_t v43 = "Asset metadata is nil";
            uint32_t v44 = 2;
LABEL_20:
            _os_log_error_impl(&dword_18AF10000, v42, OS_LOG_TYPE_ERROR, v43, buf, v44);
          }
        }

        ++v13;
      }
      while (v52 != v13);
      uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v23, (uint64_t)&v54, (uint64_t)v60, 16);
      uint64_t v52 = v45;
    }
    while (v45);
  }

  uint64_t v46 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v47 = *(void **)(v46 + 40);
  *(void *)(v46 + 40) = v49;
}

void sub_18B00D074(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading asset repair metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00D2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00D300(uint64_t a1, void *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v46 = a2;
  uint64_t v43 = objc_msgSend_objectForKeyedSubscript_(v46, v3, @"MissingPackage", v4);
  uint64_t v8 = objc_msgSend_allValues(v43, v5, v6, v7);
  uint32_t v44 = objc_opt_new();
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  obunint64_t j = v8;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v49, (uint64_t)v55, 16);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v50;
    unint64_t v13 = 0x1E545E000uLL;
    uint64_t v45 = a1;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v50 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void *)(*((void *)&v49 + 1) + 8 * v14);
        uint64_t v16 = *(void **)(a1 + 32);
        uint64_t v17 = objc_opt_class();
        id v48 = 0;
        uint64_t v19 = objc_msgSend_unarchivedObjectOfClass_fromData_error_(v16, v18, v17, v15, &v48);
        id v22 = v48;
        if (v22)
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v23 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v54 = v22;
            _os_log_error_impl(&dword_18AF10000, v23, OS_LOG_TYPE_ERROR, "Package metadata decoding error: %@", buf, 0xCu);
          }
        }
        else
        {
          id v24 = objc_msgSend_objectForKeyedSubscript_(v46, v20, @"Unrecoverable", v21);
          objc_msgSend_repairZoneRecordID(v19, v25, v26, v27);
          v29 = unint64_t v28 = v13;
          objc_msgSend_recordName(v29, v30, v31, v32);
          v34 = uint64_t v33 = v12;
          uint64_t v37 = objc_msgSend_objectForKey_(v24, v35, (uint64_t)v34, v36);

          uint64_t v12 = v33;
          unint64_t v13 = v28;
          a1 = v45;

          if (!v37) {
            objc_msgSend_addObject_(v44, v38, (uint64_t)v19, v39);
          }
        }

        ++v14;
      }
      while (v11 != v14);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v49, (uint64_t)v55, 16);
    }
    while (v11);
  }

  uint64_t v41 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v42 = *(void **)(v41 + 40);
  *(void *)(v41 + 40) = v44;
}

void sub_18B00D5BC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading package repair metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00D808(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18B00D820(uint64_t *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v3, v4, @"Unrecoverable", v5);
  id v9 = objc_msgSend_objectForKey_(v6, v7, a1[4], v8);

  if (!v9)
  {
    uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v3, v10, @"MissingAsset", v11);
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v3, v13, @"MissingPackage", v14);
    uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v12, v16, a1[4], v17);

    uint64_t v21 = a1[4];
    if (v18)
    {
      id v22 = objc_msgSend_objectForKeyedSubscript_(v12, v19, v21, v20);
      uint64_t v23 = (void *)a1[5];
      uint64_t v24 = objc_opt_class();
      uint64_t v25 = (id *)&v36;
      objc_msgSend_unarchivedObjectOfClass_fromData_error_(v23, v26, v24, (uint64_t)v22, &v36, v35, 0);
    }
    else
    {
      uint64_t v27 = objc_msgSend_objectForKeyedSubscript_(v15, v19, v21, v20);

      if (!v27) {
        goto LABEL_11;
      }
      id v22 = objc_msgSend_objectForKeyedSubscript_(v15, v28, a1[4], v29);
      uint64_t v30 = (void *)a1[5];
      uint64_t v31 = objc_opt_class();
      uint64_t v25 = (id *)&v35;
      objc_msgSend_unarchivedObjectOfClass_fromData_error_(v30, v32, v31, (uint64_t)v22, &v35, 0, v36);
    uint64_t v27 = };
    id v33 = *v25;

    if (v33)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v34 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v38 = v33;
        _os_log_error_impl(&dword_18AF10000, v34, OS_LOG_TYPE_ERROR, "Metadata decoding error: %@", buf, 0xCu);
      }
      goto LABEL_12;
    }
LABEL_11:
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v27);
    id v33 = 0;
LABEL_12:
  }
}

void sub_18B00DA74(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error reading metadata for record %{public}@: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

BOOL sub_18B00DCF4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  int v6 = objc_msgSend_objectForKeyedSubscript_(v2, v4, @"Unrecoverable", v5);
  id v9 = objc_msgSend_objectForKey_(v6, v7, (uint64_t)v3, v8);

  return v9 == 0;
}

uint64_t sub_18B00DD64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v9 = objc_msgSend_objectForKeyedSubscript_(v5, v7, a2, v8);
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v6, v11);

  uint64_t v15 = objc_msgSend_compare_(v9, v13, (uint64_t)v12, v14);
  return v15;
}

void sub_18B00DFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00DFB8(uint64_t a1, void *a2)
{
  id v27 = a2;
  uint64_t v5 = objc_msgSend_objectForKeyedSubscript_(v27, v3, @"Scheduler", v4);
  uint64_t v8 = objc_msgSend_sortedDelayedSyncRecordsForDatabase_(*(void **)(a1 + 32), v6, (uint64_t)v27, v7);
  unint64_t v14 = 0;
  if (objc_msgSend_count(v8, v9, v10, v11))
  {
    do
    {
      uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(v8, v12, v14, v13);
      uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v5, v16, (uint64_t)v15, v17);

      uint64_t v21 = objc_msgSend_compare_(v18, v19, *(void *)(a1 + 40), v20);
      if (v21 == 1) {
        break;
      }
      ++v14;
    }
    while (v14 < objc_msgSend_count(v8, v12, v22, v23));
  }
  uint64_t v24 = objc_msgSend_subarrayWithRange_(v8, v12, 0, v14);
  uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v26 = *(void **)(v25 + 40);
  *(void *)(v25 + 40) = v24;
}

void sub_18B00E0CC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities before date: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00E2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00E2E8(uint64_t a1, void *a2)
{
  id v28 = a2;
  id v5 = objc_msgSend_objectForKeyedSubscript_(v28, v3, @"Scheduler", v4);
  uint64_t v8 = objc_msgSend_sortedDelayedSyncRecordsForDatabase_(*(void **)(a1 + 32), v6, (uint64_t)v28, v7);
  unint64_t v15 = 0;
  if (objc_msgSend_count(v8, v9, v10, v11))
  {
    do
    {
      uint64_t v16 = objc_msgSend_objectAtIndexedSubscript_(v8, v12, v15, v14);
      uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v5, v17, (uint64_t)v16, v18);

      uint64_t v22 = objc_msgSend_compare_(v19, v20, *(void *)(a1 + 40), v21);
      if (v22 == 1) {
        break;
      }
      ++v15;
    }
    while (v15 < objc_msgSend_count(v8, v12, v13, v14));
  }
  uint64_t v23 = objc_msgSend_count(v8, v12, v13, v14);
  uint64_t v25 = objc_msgSend_subarrayWithRange_(v8, v24, v15, v23 - v15);
  uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8);
  id v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = v25;
}

void sub_18B00E404(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities after date: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00E684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00E69C(uint64_t a1, void *a2)
{
  id v17 = a2;
  id v5 = objc_msgSend_objectForKeyedSubscript_(v17, v3, @"Unrecoverable", v4);
  uint64_t v8 = objc_msgSend_objectForKey_(v5, v6, *(void *)(a1 + 32), v7);

  if (!v8)
  {
    uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v17, v9, @"Scheduler", v10);
    uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(v11, v12, *(void *)(a1 + 32), v13);
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }
}

void sub_18B00E754(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities for fetching record date: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00E910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B00E928(uint64_t a1, void *a2)
{
  id v18 = a2;
  id v5 = objc_msgSend_objectForKeyedSubscript_(v18, v3, @"Unrecoverable", v4);
  uint64_t v8 = objc_msgSend_objectForKey_(v5, v6, *(void *)(a1 + 32), v7);

  if (!v8)
  {
    uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v18, v9, @"SchedulerCount", v10);
    uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(v11, v12, *(void *)(a1 + 32), v13);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_integerValue(v14, v15, v16, v17);
  }
}

void sub_18B00E9E4(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities for fetching record count: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B00EBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B00EBD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, @"SyncEngineMetadata", a4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return MEMORY[0x1F41817F8](v5, v7);
}

void sub_18B00EC28(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading sync engine metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

id sub_18B00EDAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v6, *(void *)(a1 + 32), @"LastFetchedDate");

  return v5;
}

void sub_18B00EDFC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error setting next fetch date: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

id sub_18B00EF80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  uint64_t v7 = v5;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    id v14 = 0;
    id v9 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E4F28DB0], v6, v8, 1, &v14);
    id v11 = v14;
    if (v11)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v12 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v11;
        _os_log_error_impl(&dword_18AF10000, v12, OS_LOG_TYPE_ERROR, "Error archiving current user: %@", buf, 0xCu);
      }
    }
    else
    {
      objc_msgSend_setObject_forKeyedSubscript_(v7, v10, (uint64_t)v9, @"CurrentUser");
    }
  }
  else
  {
    objc_msgSend_setObject_forKeyedSubscript_(v5, v6, 0, @"CurrentUser");
  }

  return v7;
}

void sub_18B00F0E8(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error setting current user: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

id sub_18B00F2BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  id v9 = objc_msgSend_recordType(*(void **)(a1 + 32), v6, v7, v8);
  if (objc_msgSend_isEqualToString_(v9, v10, @"MissingAsset", v11))
  {
  }
  else
  {
    uint64_t v15 = objc_msgSend_recordType(*(void **)(a1 + 32), v12, v13, v14);
    int isEqualToString = objc_msgSend_isEqualToString_(v15, v16, @"MissingPackage", v17);

    if (!isEqualToString) {
      goto LABEL_22;
    }
  }
  uint64_t v19 = objc_opt_class();
  uint64_t v22 = objc_msgSend_repairRecordToMetadata_(v19, v20, *(void *)(a1 + 32), v21);
  id v100 = 0;
  uint64_t v24 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E4F28DB0], v23, (uint64_t)v22, 1, &v100);
  id v28 = v100;
  if (v28)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v29 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void **)(a1 + 32);
      uint64_t v31 = v29;
      uint64_t v35 = objc_msgSend_recordID(v30, v32, v33, v34);
      *(_DWORD *)buf = 138412546;
      uint64_t v102 = v35;
      __int16 v103 = 2112;
      id v104 = v28;
      _os_log_error_impl(&dword_18AF10000, v31, OS_LOG_TYPE_ERROR, "Error encoding repair record %@: %@", buf, 0x16u);
    }
    goto LABEL_21;
  }
  uint64_t v36 = objc_msgSend_recordType(*(void **)(a1 + 32), v25, v26, v27);
  uint64_t v39 = objc_msgSend_objectForKeyedSubscript_(v5, v37, (uint64_t)v36, v38);
  uint64_t v43 = v39;
  if (!v39) {
    uint64_t v39 = (void *)MEMORY[0x1E4F1CC08];
  }
  uint32_t v44 = objc_msgSend_mutableCopy(v39, v40, v41, v42);

  id v48 = objc_msgSend_recordID(*(void **)(a1 + 32), v45, v46, v47);
  long long v52 = objc_msgSend_recordName(v48, v49, v50, v51);
  uint64_t v55 = objc_msgSend_objectForKeyedSubscript_(v44, v53, (uint64_t)v52, v54);
  if (!v55)
  {

    uint64_t v71 = v44;
    goto LABEL_15;
  }
  id v59 = (void *)v55;
  objc_msgSend_recordID(*(void **)(a1 + 32), v56, v57, v58);
  uint64_t v99 = v22;
  v61 = uint64_t v60 = v5;
  uint64_t v65 = objc_msgSend_recordName(v61, v62, v63, v64);
  uint64_t v68 = objc_msgSend_objectForKeyedSubscript_(v44, v66, (uint64_t)v65, v67);
  char isEqual = objc_msgSend_isEqual_(v24, v69, (uint64_t)v68, v70);

  id v5 = v60;
  uint64_t v22 = v99;

  uint64_t v71 = v44;
  if ((isEqual & 1) == 0)
  {
LABEL_15:
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v72 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v88 = *(void **)(a1 + 32);
      unint64_t v89 = v72;
      uint64_t v93 = objc_msgSend_recordType(v88, v90, v91, v92);
      os_log_type_t v97 = objc_msgSend_recordID(*(void **)(a1 + 32), v94, v95, v96);
      *(_DWORD *)buf = 138543618;
      uint64_t v102 = v93;
      __int16 v103 = 2112;
      id v104 = v97;
      _os_log_debug_impl(&dword_18AF10000, v89, OS_LOG_TYPE_DEBUG, "Persisting %{public}@ record %@", buf, 0x16u);
    }
    uint64_t v76 = objc_msgSend_recordID(*(void **)(a1 + 32), v73, v74, v75);
    long long v80 = objc_msgSend_recordName(v76, v77, v78, v79);
    objc_msgSend_setObject_forKeyedSubscript_(v71, v81, (uint64_t)v24, (uint64_t)v80);

    uint64_t v85 = objc_msgSend_recordType(*(void **)(a1 + 32), v82, v83, v84);
    objc_msgSend_setObject_forKeyedSubscript_(v5, v86, (uint64_t)v71, (uint64_t)v85);
  }
  id v28 = 0;
LABEL_21:

LABEL_22:

  return v5;
}

void sub_18B00F6E0(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v4 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = v4;
      uint64_t v10 = objc_msgSend_recordID(v5, v7, v8, v9);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_error_impl(&dword_18AF10000, v6, OS_LOG_TYPE_ERROR, "Error saving repair record %@: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

id sub_18B00F8F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  uint64_t v6 = @"MissingAsset";
  uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(v5, v7, @"MissingAsset", v8);
  __int16 v13 = objc_msgSend_recordName(*(void **)(a1 + 32), v10, v11, v12);
  id v16 = objc_msgSend_objectForKeyedSubscript_(v9, v14, (uint64_t)v13, v15);

  if (v16) {
    goto LABEL_20;
  }
  uint64_t v6 = @"MissingPackage";
  uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v5, v17, @"MissingPackage", v18);
  uint64_t v23 = objc_msgSend_recordName(*(void **)(a1 + 32), v20, v21, v22);
  uint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v19, v24, (uint64_t)v23, v25);

  if (v26)
  {
LABEL_20:
    uint64_t v27 = v6;
    if (v27)
    {
      id v28 = v27;
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v29 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v113 = *(void *)(a1 + 32);
        int v114 = 138412290;
        uint64_t v115 = v113;
        _os_log_debug_impl(&dword_18AF10000, v29, OS_LOG_TYPE_DEBUG, "Deleting repair record %@", (uint8_t *)&v114, 0xCu);
      }
      uint64_t v32 = objc_msgSend_objectForKeyedSubscript_(v5, v30, (uint64_t)v28, v31);
      uint64_t v36 = objc_msgSend_mutableCopy(v32, v33, v34, v35);

      uint64_t v40 = objc_msgSend_recordName(*(void **)(a1 + 32), v37, v38, v39);
      objc_msgSend_removeObjectForKey_(v36, v41, (uint64_t)v40, v42);

      objc_msgSend_setObject_forKeyedSubscript_(v5, v43, (uint64_t)v36, (uint64_t)v28);
      uint64_t v46 = objc_msgSend_objectForKeyedSubscript_(v5, v44, @"Scheduler", v45);
      uint64_t v50 = objc_msgSend_recordName(*(void **)(a1 + 32), v47, v48, v49);
      id v53 = objc_msgSend_objectForKey_(v46, v51, (uint64_t)v50, v52);

      if (v53)
      {
        uint64_t v56 = objc_msgSend_objectForKeyedSubscript_(v5, v54, @"Scheduler", v55);
        uint64_t v60 = objc_msgSend_mutableCopy(v56, v57, v58, v59);

        uint64_t v64 = objc_msgSend_recordName(*(void **)(a1 + 32), v61, v62, v63);
        objc_msgSend_removeObjectForKey_(v60, v65, (uint64_t)v64, v66);

        objc_msgSend_setObject_forKeyedSubscript_(v5, v67, (uint64_t)v60, @"Scheduler");
      }
      uint64_t v68 = objc_msgSend_objectForKeyedSubscript_(v5, v54, @"SchedulerCount", v55);
      uint64_t v72 = objc_msgSend_recordName(*(void **)(a1 + 32), v69, v70, v71);
      uint64_t v75 = objc_msgSend_objectForKey_(v68, v73, (uint64_t)v72, v74);

      if (v75)
      {
        uint64_t v78 = objc_msgSend_objectForKeyedSubscript_(v5, v76, @"SchedulerCount", v77);
        long long v82 = objc_msgSend_mutableCopy(v78, v79, v80, v81);

        uint64_t v86 = objc_msgSend_recordName(*(void **)(a1 + 32), v83, v84, v85);
        objc_msgSend_removeObjectForKey_(v82, v87, (uint64_t)v86, v88);

        objc_msgSend_setObject_forKeyedSubscript_(v5, v89, (uint64_t)v82, @"SchedulerCount");
      }
      uint64_t v90 = objc_msgSend_objectForKeyedSubscript_(v5, v76, @"Unrecoverable", v77);
      uint64_t v94 = objc_msgSend_recordName(*(void **)(a1 + 32), v91, v92, v93);
      os_log_type_t v97 = objc_msgSend_objectForKey_(v90, v95, (uint64_t)v94, v96);

      if (v97)
      {
        id v100 = objc_msgSend_objectForKeyedSubscript_(v5, v98, @"Unrecoverable", v99);
        id v104 = objc_msgSend_mutableCopy(v100, v101, v102, v103);

        uint64_t v108 = objc_msgSend_recordName(*(void **)(a1 + 32), v105, v106, v107);
        objc_msgSend_removeObjectForKey_(v104, v109, (uint64_t)v108, v110);

        objc_msgSend_setObject_forKeyedSubscript_(v5, v111, (uint64_t)v104, @"Unrecoverable");
      }
    }
  }

  return v5;
}

void sub_18B00FD04(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error deleting repair record %@: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

id sub_18B00FE1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v5, 0, @"MissingAsset");
  objc_msgSend_setObject_forKeyedSubscript_(v4, v6, 0, @"MissingPackage");
  objc_msgSend_setObject_forKeyedSubscript_(v4, v7, 0, @"Scheduler");
  objc_msgSend_setObject_forKeyedSubscript_(v4, v8, 0, @"SchedulerCount");
  objc_msgSend_setObject_forKeyedSubscript_(v4, v9, 0, @"Unrecoverable");

  return v4;
}

void sub_18B00FEC0(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error clearing repair records: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

id sub_18B0100C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  __int16 v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, @"Scheduler", v7);
  uint64_t v12 = objc_msgSend_mutableCopy(v8, v9, v10, v11);
  id v16 = v12;
  if (v12)
  {
    id v17 = v12;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v13, v14, v15);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v18 = v17;

  uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v18, v19, *(void *)(a1 + 32), v20);
  if (!v21
    || (uint64_t v24 = (void *)v21,
        uint64_t v25 = *(void **)(a1 + 40),
        objc_msgSend_objectForKeyedSubscript_(v18, v22, *(void *)(a1 + 32), v23),
        uint64_t v26 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v25) = objc_msgSend_isEqual_(v25, v27, (uint64_t)v26, v28),
        v26,
        v24,
        (v25 & 1) == 0))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v31 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v59 = *(void *)(a1 + 32);
      uint64_t v60 = *(void *)(a1 + 40);
      int v61 = 138543618;
      uint64_t v62 = v59;
      __int16 v63 = 2114;
      uint64_t v64 = v60;
      _os_log_debug_impl(&dword_18AF10000, v31, OS_LOG_TYPE_DEBUG, "Persisting delayed sync for record %{public}@ with date %{public}@", (uint8_t *)&v61, 0x16u);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v18, v32, *(void *)(a1 + 40), *(void *)(a1 + 32));
    objc_msgSend_setObject_forKeyedSubscript_(v5, v33, (uint64_t)v18, @"Scheduler");
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v34 = objc_msgSend_objectForKeyedSubscript_(v5, v29, @"SchedulerCount", v30);
    uint64_t v38 = objc_msgSend_mutableCopy(v34, v35, v36, v37);
    uint64_t v42 = v38;
    if (v38)
    {
      id v43 = v38;
    }
    else
    {
      objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v39, v40, v41);
      id v43 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint32_t v44 = v43;

    uint64_t v45 = NSNumber;
    uint64_t v48 = objc_msgSend_objectForKeyedSubscript_(v44, v46, *(void *)(a1 + 32), v47);
    uint64_t v52 = objc_msgSend_integerValue(v48, v49, v50, v51);
    uint64_t v55 = objc_msgSend_numberWithInteger_(v45, v53, v52 + 1, v54);
    objc_msgSend_setObject_forKeyedSubscript_(v44, v56, (uint64_t)v55, *(void *)(a1 + 32));

    objc_msgSend_setObject_forKeyedSubscript_(v5, v57, (uint64_t)v44, @"SchedulerCount");
  }

  return v5;
}

void sub_18B010344(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error saving delayed sync for record %{public}@: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

id sub_18B010534(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  __int16 v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, @"Scheduler", v7);
  uint64_t v12 = objc_msgSend_mutableCopy(v8, v9, v10, v11);
  id v16 = v12;
  if (v12)
  {
    id v17 = v12;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v13, v14, v15);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v18 = v17;

  uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v5, v19, @"SchedulerCount", v20);
  uint64_t v25 = objc_msgSend_mutableCopy(v21, v22, v23, v24);
  uint64_t v29 = v25;
  if (v25)
  {
    id v30 = v25;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v26, v27, v28);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v31 = v30;

  uint64_t v34 = objc_msgSend_objectForKeyedSubscript_(v18, v32, *(void *)(a1 + 32), v33);

  if (v34)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v35 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = *(void *)(a1 + 32);
      int v44 = 138543362;
      uint64_t v45 = v43;
      _os_log_debug_impl(&dword_18AF10000, v35, OS_LOG_TYPE_DEBUG, "Deleting delayed sync for record %{public}@", (uint8_t *)&v44, 0xCu);
    }
    objc_msgSend_removeObjectForKey_(v18, v36, *(void *)(a1 + 32), v37);
    objc_msgSend_removeObjectForKey_(v31, v38, *(void *)(a1 + 32), v39);
    objc_msgSend_setObject_forKeyedSubscript_(v5, v40, (uint64_t)v18, @"Scheduler");
    objc_msgSend_setObject_forKeyedSubscript_(v5, v41, (uint64_t)v31, @"SchedulerCount");
  }

  return v5;
}

void sub_18B010730(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error deleting delayed sync for record %{public}@: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

id sub_18B010848(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v5, 0, @"Scheduler");
  objc_msgSend_setObject_forKeyedSubscript_(v4, v6, 0, @"SchedulerCount");

  return v4;
}

void sub_18B0108A8(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error clearing scheduled activities: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

id sub_18B010A7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  __int16 v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, @"Unrecoverable", v7);
  uint64_t v12 = objc_msgSend_mutableCopy(v8, v9, v10, v11);
  __int16 v13 = v12;
  if (v12) {
    id v14 = v12;
  }
  else {
    id v14 = (id)objc_opt_new();
  }
  uint64_t v15 = v14;

  objc_msgSend_setObject_forKeyedSubscript_(v15, v16, MEMORY[0x1E4F1CC38], *(void *)(a1 + 32));
  objc_msgSend_setObject_forKeyedSubscript_(v5, v17, (uint64_t)v15, @"Unrecoverable");

  return v5;
}

void sub_18B010B38(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138543618;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error marking record %{public}@ unrecoverable: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

id sub_18B010CD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v6, *(void *)(a1 + 32), @"SyncEngineMetadata");
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v7 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v9 = 0;
    _os_log_debug_impl(&dword_18AF10000, v7, OS_LOG_TYPE_DEBUG, "Persisting sync engine metadata", v9, 2u);
  }

  return v5;
}

void sub_18B010DA8(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error saving sync engine metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sub_18B010EA4()
{
  return MEMORY[0x1E4F1CC08];
}

void sub_18B010EB0(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error clearing database: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B01101C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], a2, a3, a4);
  id v9 = objc_msgSend_databaseURL(*(void **)(a1 + 32), v6, v7, v8);
  id v23 = 0;
  objc_msgSend_removeItemAtURL_error_(v5, v10, (uint64_t)v9, (uint64_t)&v23);
  id v11 = v23;

  if (v11)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v12 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = *(void **)(a1 + 32);
      id v14 = v12;
      uint64_t v18 = objc_msgSend_databaseURL(v13, v15, v16, v17);
      uint64_t v22 = objc_msgSend_CKSanitizedPath(v18, v19, v20, v21);
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v22;
      _os_log_error_impl(&dword_18AF10000, v14, OS_LOG_TYPE_ERROR, "Could not delete upload request database at %{public}@", buf, 0xCu);
    }
  }
}

uint64_t sub_18B011230(uint64_t a1)
{
  return 0;
}

void sub_18B01132C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Class aClassa, uint64_t a14, long long buf, int a16, __int16 a17, __int16 a18, void *a19)
{
  aClass = v20;
  if (a2 == 1)
  {
    id v21 = objc_begin_catch(a1);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v22 = (id)ck_log_facility_data_repair;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      NSStringFromClass(aClass);
      id v32 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v36 = objc_msgSend_name(v21, v33, v34, v35);
      uint64_t v40 = objc_msgSend_reason(v21, v37, v38, v39);
      LODWORD(buf) = 138543874;
      *(void *)((char *)&buf + 4) = v32;
      WORD6(buf) = 2114;
      *(void *)((char *)&buf + 14) = v36;
      a18 = 2114;
      a19 = v40;
      _os_log_fault_impl(&dword_18AF10000, v22, OS_LOG_TYPE_FAULT, "Could not unarchive data for %{public}@ due to %{public}@: %{public}@", (uint8_t *)&buf, 0x20u);
    }
    id v23 = NSStringFromClass(aClass);
    uint64_t v27 = objc_msgSend_name(v21, v24, v25, v26);
    uint64_t v41 = objc_msgSend_reason(v21, v28, v29, v30);
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v31, @"CKErrorDomain", 12, @"Could not unarchive data for %@ due to %@: %@");
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    if (!v19) {
      JUMPOUT(0x18B0112D8);
    }
    JUMPOUT(0x18B0112CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_18B0115E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], a2, a3, a4);
  id v9 = objc_msgSend_databaseURL(*(void **)(a1 + 32), v6, v7, v8);
  __int16 v13 = objc_msgSend_URLByDeletingLastPathComponent(v9, v10, v11, v12);
  char v63 = 0;
  uint64_t v17 = objc_msgSend_path(v13, v14, v15, v16);
  int isDirectory = objc_msgSend_fileExistsAtPath_isDirectory_(v5, v18, (uint64_t)v17, (uint64_t)&v63);

  if (!objc_msgSend_firstInvocation(*(void **)(a1 + 32), v20, v21, v22) || (isDirectory & 1) != 0)
  {
    if (!isDirectory)
    {
      uint64_t v42 = @"could not be found";
      uint64_t v43 = &stru_1ED7F5C98;
LABEL_16:
      uint64_t v44 = *(void *)(a1 + 40);
      objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v23, @"CKErrorDomain", 10000, 0, v13, @"UploadRequest cache directory %@%@", v42, v43);
      id v28 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, id))(v44 + 16))(v44, v28);
      goto LABEL_29;
    }
LABEL_7:
    if (v63)
    {
      id v61 = 0;
      uint64_t v29 = objc_msgSend_dataWithContentsOfURL_options_error_(MEMORY[0x1E4F1C9B8], v23, (uint64_t)v9, 0, &v61);
      id v30 = v61;
      id v28 = v30;
      if (v30 && objc_msgSend_code(v30, v31, v32, v33) != 260)
      {
        uint64_t v45 = *(void *)(a1 + 40);
        uint64_t v46 = objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v31, @"CKErrorDomain", 10000, v28, v9, @"Could not open UploadRequest cache");
        (*(void (**)(uint64_t, void *))(v45 + 16))(v45, v46);

        uint64_t v34 = (void *)MEMORY[0x1E4F1CC08];
        goto LABEL_28;
      }
      if (v29)
      {
        id v60 = 0;
        uint64_t v34 = objc_msgSend_propertyListWithData_options_format_error_(MEMORY[0x1E4F28F98], v31, (uint64_t)v29, 0, 0, &v60);
        id v35 = v60;

        if (v35)
        {
          uint64_t v37 = *(void *)(a1 + 40);
          uint64_t v38 = objc_msgSend_errorWithDomain_code_error_format_(CKPrettyError, v36, @"CKErrorDomain", 10000, v35, @"UploadRequest cache appears to be corrupt, deleting for future retry");
          (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v38);

          objc_msgSend_removeItemAtURL_error_(v5, v39, (uint64_t)v9, 0);
          id v28 = v35;
LABEL_28:

          goto LABEL_29;
        }
        id v28 = 0;
      }
      else
      {
        uint64_t v34 = (void *)MEMORY[0x1E4F1CC08];
      }

      uint64_t v47 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      uint64_t v29 = v47;
      if (!v47 || (objc_msgSend_isEqualToDictionary_(v47, v48, (uint64_t)v34, v49) & 1) != 0)
      {
LABEL_22:
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        goto LABEL_28;
      }
      id v59 = 0;
      uint64_t v51 = objc_msgSend_dataWithPropertyList_format_options_error_(MEMORY[0x1E4F28F98], v50, (uint64_t)v29, 200, 0, &v59);
      id v52 = v59;

      if (v52)
      {
        uint64_t v54 = *(void *)(a1 + 40);
        uint64_t v55 = objc_msgSend_errorWithDomain_code_error_format_(CKPrettyError, v53, @"CKErrorDomain", 10000, v52, @"Could not serialize UploadRequest cache");
        (*(void (**)(uint64_t, void *))(v54 + 16))(v54, v55);
        id v28 = v52;
      }
      else
      {
        id v58 = 0;
        objc_msgSend_writeToURL_options_error_(v51, v53, (uint64_t)v9, 1, &v58);
        id v28 = v58;
        if (!v28)
        {

          goto LABEL_22;
        }
        uint64_t v57 = *(void *)(a1 + 40);
        uint64_t v55 = objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v56, @"CKErrorDomain", 10000, v28, v9, @"Could not persist UploadRequest cache");
        (*(void (**)(uint64_t, void *))(v57 + 16))(v57, v55);
      }

      goto LABEL_28;
    }
    uint64_t v42 = @"exists";
    uint64_t v43 = @" but is not a directory";
    goto LABEL_16;
  }
  id v62 = 0;
  int v24 = objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(v5, v23, (uint64_t)v13, 1, 0, &v62);
  id v25 = v62;
  id v28 = v25;
  if (v24 && !v25)
  {
    char v63 = 1;
    objc_msgSend_setFirstInvocation_(*(void **)(a1 + 32), v26, 0, v27);
    goto LABEL_7;
  }
  uint64_t v40 = *(void *)(a1 + 40);
  uint64_t v41 = objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v26, @"CKErrorDomain", 10000, v25, v13, @"Could not create UploadRequest cache directory");
  (*(void (**)(uint64_t, void *))(v40 + 16))(v40, v41);

LABEL_29:
}

void sub_18B011FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B011FF4(uint64_t a1, void *a2)
{
}

void sub_18B012004(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error reading all data: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sub_18B012928(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return objc_msgSend_setObject_forKey_(*(void **)(*(void *)(result + 32) + 16), a2, a4, (uint64_t)a2);
  }
  return result;
}

void sub_18B013FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B013FD0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v14 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 56), v9, (uint64_t)v7, v10);
  if (v14)
  {
    uint64_t v15 = objc_msgSend_length(v7, v11, v12, v13);
    uint64_t v16 = (char *)v33 - ((v15 + 17) & 0xFFFFFFFFFFFFFFF0);
    char *v16 = 64;
    uint64_t v17 = v15 + 1;
    objc_msgSend_getCString_maxLength_encoding_(v7, v18, (uint64_t)(v16 + 1), v15 + 1, 1);
    v16[v17] = 0;
    uint64_t v19 = sqlite3_bind_parameter_index(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 16), v16);
    if (v19)
    {
      uint64_t v23 = v19;
      int v24 = *(void **)(a1 + 32);
      uint64_t v25 = objc_msgSend_unsignedIntValue(v14, v20, v21, v22);
      objc_msgSend_bindValue_ofType_atIndex_(v24, v26, (uint64_t)v8, v25, v23);
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v20, @"CKErrorDomain", 1, @"No binding index for %@", v7);
    uint64_t v27 = };
    uint64_t v31 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v32 = *(void **)(v31 + 40);
    *(void *)(v31 + 40) = v27;
  }
  else
  {
    uint64_t v28 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, @"CKErrorDomain", 1, @"No binding type found for %@", v7);
    uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8);
    id v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    *a4 = 1;
  }
}

void sub_18B0150D0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 40);
  id v7 = a2;
  objc_msgSend_objectAtIndex_(v6, v8, a3, v9);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_pointerAtIndex_(*(void **)(*(void *)(a1 + 32) + 48), v10, a3, v11);
  (*(void (**)(uint64_t, id, id, uint64_t))(v5 + 16))(v5, v7, v13, v12);
}

id sub_18B0153A8(int a1, SEL aSelector)
{
  id v2 = NSStringFromSelector(aSelector);
  id v3 = (objc_class *)objc_opt_class();
  int v4 = NSStringFromClass(v3);
  uint64_t v6 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v5, @"CKErrorDomain", 1, @"%@ not implemented for %@", v2, v4);

  return v6;
}

uint64_t sub_18B015450(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return 0;
}

uint64_t sub_18B015488(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return 0;
}

id sub_18B0154C0(void *a1, uint64_t a2, void *a3)
{
  return sub_18B0154C8(a1, a3);
}

id sub_18B0154C8(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  objc_msgSend_appendString_(v4, v5, @"("), v6;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = v3;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v9)
  {
    uint64_t v12 = v9;
    uint64_t v13 = *(void *)v23;
    char v14 = 1;
    while (2)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v23 != v13) {
          objc_enumerationMutation(v7);
        }
        uint64_t v16 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if ((v14 & 1) == 0) {
          objc_msgSend_appendString_(v4, v10, @",", v11, (void)v22);
        }
        uint64_t v17 = objc_msgSend_cksqlcs_appendSQLConstantValueToString_(v16, v10, (uint64_t)v4, v11, (void)v22);
        if (v17)
        {
          uint64_t v20 = (void *)v17;

          goto LABEL_13;
        }
        char v14 = 0;
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v22, (uint64_t)v26, 16);
      char v14 = 0;
      if (v12) {
        continue;
      }
      break;
    }
  }

  objc_msgSend_appendString_(v4, v18, @""), v19);
  uint64_t v20 = 0;
LABEL_13:

  return v20;
}

id sub_18B015650(void *a1, uint64_t a2, void *a3)
{
  return sub_18B0154C8(a1, a3);
}

id sub_18B015658(void *a1, uint64_t a2, void *a3)
{
  return sub_18B0154C8(a1, a3);
}

id sub_18B015660(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_expressionType(a1, v8, v9, v10);
  switch(v11)
  {
    case 0:
      uint64_t v18 = objc_msgSend_constantValue(a1, v12, v13, v14);
      uint64_t v21 = objc_msgSend_cksqlcs_appendSQLConstantValueToString_(v18, v19, (uint64_t)v6, v20);

      goto LABEL_9;
    case 2:
      uint64_t v15 = objc_msgSend_variable(a1, v12, v13, v14);
      long long v24 = objc_msgSend_sqlValueForVariable_(v7, v22, (uint64_t)v15, v23);
      objc_msgSend_appendString_(v6, v25, (uint64_t)v24, v26);

      goto LABEL_7;
    case 3:
      uint64_t v15 = objc_msgSend_keyPath(a1, v12, v13, v14);
      objc_msgSend_appendFormat_(v6, v16, @"%@", v17, v15);
LABEL_7:

      uint64_t v21 = 0;
      goto LABEL_9;
  }
  uint64_t v21 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v12, @"CKErrorDomain", 1, @"Unhandled expression type %lu", v11);
LABEL_9:

  return v21;
}

BOOL sub_18B0157A0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_expressionType(a1, a2, a3, a4)) {
    return 0;
  }
  uint64_t v9 = objc_msgSend_constantValue(a1, v5, v6, v7);
  BOOL v8 = v9 == 0;

  return v8;
}

id sub_18B0157EC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_leftExpression(a1, v8, v9, v10);
  if (objc_msgSend_cksqlcs_isNil(v11, v12, v13, v14))
  {
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v15, @"CKErrorDomain", 1, @"nil cannot appear as the left operand");
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_31;
  }
  uint64_t v19 = objc_msgSend_rightExpression(a1, v15, v16, v17);
  int isNil = objc_msgSend_cksqlcs_isNil(v19, v20, v21, v22);
  unint64_t v27 = objc_msgSend_predicateOperatorType(a1, v24, v25, v26);
  objc_msgSend_appendString_(v6, v28, @"("), v29;
  uint64_t v31 = objc_msgSend_cksqlcs_appendSQLToString_statement_(v11, v30, (uint64_t)v6, (uint64_t)v7);
  if (v31) {
    goto LABEL_30;
  }
  if (isNil)
  {
    if (v27 == 4)
    {
      objc_msgSend_appendString_(v6, v32, @" IS NULL", v33);
      goto LABEL_18;
    }
    if (v27 == 5)
    {
      objc_msgSend_appendString_(v6, v32, @" IS NOT NULL", v33);
LABEL_18:
      objc_msgSend_appendString_(v6, v34, @""), v35);
      uint64_t v41 = objc_msgSend_expressionType(v11, v38, v39, v40);
      uint64_t v45 = objc_msgSend_expressionType(v19, v42, v43, v44);
      if (v41 == 3 && v45 == 2)
      {
        uint64_t v49 = objc_msgSend_keyPath(v11, v46, v47, v48);
        goto LABEL_21;
      }
      if (v41 == 2 && v45 == 3)
      {
        uint64_t v55 = objc_msgSend_variable(v11, v46, v47, v48);
        uint64_t v59 = objc_msgSend_keyPath(v19, v56, v57, v58);
      }
      else
      {
        if (!v41 && v45 == 2)
        {
          uint64_t v49 = objc_msgSend_constantValue(v11, v46, v47, v48);
LABEL_21:
          id v53 = (void *)v49;
          uint64_t v55 = objc_msgSend_variable(v19, v50, v51, v52);
          if (!v53) {
            goto LABEL_29;
          }
LABEL_27:
          if (v55) {
            id v60 = (id)objc_msgSend_addBindingVariable_withAssociatedProperty_(v7, v54, (uint64_t)v55, (uint64_t)v53);
          }
          goto LABEL_29;
        }
        uint64_t v55 = 0;
        if (v41 != 2)
        {
          id v53 = 0;
          goto LABEL_29;
        }
        id v53 = 0;
        if (v45)
        {
LABEL_29:

          uint64_t v31 = 0;
          goto LABEL_30;
        }
        uint64_t v55 = objc_msgSend_variable(v11, v46, v47, v48);
        uint64_t v59 = objc_msgSend_constantValue(v19, v62, v63, v64);
      }
      id v53 = (void *)v59;
      if (v59) {
        goto LABEL_27;
      }
      goto LABEL_29;
    }
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v32, @"CKErrorDomain", 1, @"invalid nil operand");
    goto LABEL_13;
  }
  if (v27 >= 0xB || ((0x43Fu >> v27) & 1) == 0)
  {
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v32, @"CKErrorDomain", 1, @"Unhandled operator type %lu", v27);
    uint64_t v31 = LABEL_13:;
    if (v31) {
      goto LABEL_30;
    }
    objc_msgSend_appendString_(v6, v36, (uint64_t)&stru_1ED7F5C98, v37);
    if (isNil) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  objc_msgSend_appendString_(v6, v32, (uint64_t)off_1E5460460[v27], v33);
LABEL_17:
  uint64_t v31 = objc_msgSend_cksqlcs_appendSQLToString_statement_(v19, v34, (uint64_t)v6, (uint64_t)v7);
  if (!v31) {
    goto LABEL_18;
  }
LABEL_30:
  id v18 = v31;

LABEL_31:

  return v18;
}

id sub_18B015AE8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x3032000000;
  uint64_t v44 = sub_18AF13A88;
  uint64_t v45 = sub_18AF13820;
  id v46 = 0;
  uint64_t v11 = objc_msgSend_compoundPredicateType(a1, v8, v9, v10);
  uint64_t v17 = objc_msgSend_subpredicates(a1, v12, v13, v14);
  if (v11)
  {
    if (v11 == 1)
    {
      id v18 = @" AND ";
    }
    else
    {
      if (v11 != 2) {
        goto LABEL_8;
      }
      id v18 = @" OR ";
    }
    uint64_t v33 = MEMORY[0x1E4F143A8];
    uint64_t v34 = 3221225472;
    uint64_t v35 = sub_18B015CFC;
    uint64_t v36 = &unk_1E5460440;
    id v19 = v6;
    id v37 = v19;
    uint64_t v38 = v18;
    uint64_t v40 = &v41;
    id v39 = v7;
    objc_msgSend_enumerateObjectsUsingBlock_(v17, v20, (uint64_t)&v33, v21);
    objc_msgSend_appendString_(v19, v22, @""), v23, v33, v34, v35, v36);
  }
  else
  {
    objc_msgSend_appendString_(v6, v15, @" NOT ("), v16;
    uint64_t v26 = objc_msgSend_objectAtIndex_(v17, v24, 0, v25);
    id v28 = (id)objc_msgSend_cksqlcs_appendSQLToString_statement_(v26, v27, (uint64_t)v6, (uint64_t)v7);

    objc_msgSend_appendString_(v6, v29, @" "), v30);
  }
LABEL_8:
  id v31 = (id)v42[5];

  _Block_object_dispose(&v41, 8);

  return v31;
}

void sub_18B015CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B015CFC(uint64_t *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v14 = a2;
  uint64_t v9 = (void *)a1[4];
  if (a3) {
    objc_msgSend_appendString_(v9, v7, a1[5], v8);
  }
  else {
    objc_msgSend_appendString_(v9, v7, @"("), v8;
  }
  uint64_t v11 = objc_msgSend_cksqlcs_appendSQLToString_statement_(v14, v10, a1[4], a1[6]);
  uint64_t v12 = *(void *)(a1[7] + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  if (*(void *)(*(void *)(a1[7] + 8) + 40)) {
    *a4 = 1;
  }
}

void *sub_18B016100(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 520) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0162E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0162F8(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

__CFString *CKStringFromSyncEngineAccountChangeType(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E54604D8[a1];
  }
}

uint64_t sub_18B018C4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_conciseDescription(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B01946C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_conciseDescription(a2, (const char *)a2, a3, a4);
}

__CFString *CKStringFromZoneDeletionReason(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E54604F0[a1];
  }
}

uint64_t sub_18B01A2D8()
{
  return 0;
}

uint64_t sub_18B01A2E0()
{
  return 0;
}

uint64_t sub_18B01A2E8()
{
  return 0;
}

__CFString *sub_18B01A394(uint64_t *a1, const char *a2)
{
  if (a1)
  {
    uint64_t v3 = objc_msgSend_stringWithCString_encoding_(NSString, a2, a1[1], 1);
    uint64_t v4 = NSString;
    uint64_t v5 = *a1;
    uint64_t v9 = objc_msgSend_lastPathComponent(v3, v6, v7, v8);
    objc_msgSend_stringWithFormat_(v4, v10, @"%s(%@:%d)", v11, v5, v9, *((unsigned int *)a1 + 4));
    uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v12 = @"(unlabeled)";
  }

  return v12;
}

void sub_18B01AB0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)(a1 + 56))
    {
      int v5 = objc_msgSend_logOperations(*(void **)(a1 + 8), a2, a3, a4);
      int v9 = v5;
      if (!*(unsigned char *)(a1 + 48))
      {
        *(unsigned char *)(a1 + 48) = 1;
        if (v5)
        {
          uint64_t v10 = objc_msgSend_fetchedColumns(*(void **)(a1 + 56), v6, v7, v8);
          uint64_t v13 = objc_msgSend_componentsJoinedByString_(v10, v11, @", ", v12);
          uint64_t v17 = objc_msgSend_searchBindingsDescription(*(void **)(a1 + 56), v14, v15, v16);
          id v18 = (objc_class *)objc_opt_class();
          id v19 = NSStringFromClass(v18);
          uint64_t v20 = (objc_class *)objc_opt_class();
          uint64_t v21 = NSStringFromClass(v20);
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v22 = (void *)ck_log_facility_sql;
          if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
          {
            uint64_t v66 = v10;
            uint64_t v23 = v17;
            long long v24 = v13;
            uint64_t v25 = *(void **)(a1 + 56);
            uint64_t v26 = v22;
            uint64_t v30 = objc_msgSend_label(v25, v27, v28, v29);
            *(_DWORD *)buf = 138544642;
            uint64_t v70 = v19;
            __int16 v71 = 2048;
            uint64_t v72 = (void *)a1;
            __int16 v73 = 2114;
            id v74 = v21;
            __int16 v75 = 2114;
            uint64_t v76 = v30;
            __int16 v77 = 2114;
            uint64_t v78 = v24;
            __int16 v79 = 2114;
            uint64_t v80 = v23;
            _os_log_impl(&dword_18AF10000, v26, OS_LOG_TYPE_INFO, "%{public}@(%p): Begin enumeration of %{public}@ (label=%{public}@), FETCH (%{public}@) WHERE %{public}@", buf, 0x3Eu);

            uint64_t v13 = v24;
            uint64_t v17 = v23;
            uint64_t v10 = v66;
          }
        }
      }
      id v31 = *(void **)(a1 + 56);
      id v68 = 0;
      int v32 = objc_msgSend_step_(v31, v6, (uint64_t)&v68, v8);
      id v33 = v68;
      if (v32) {
        BOOL v37 = v33 == 0;
      }
      else {
        BOOL v37 = 0;
      }
      if (v37)
      {
        uint64_t v45 = *(void **)(a1 + 8);
        uint64_t v46 = *(void *)(a1 + 56);
        id v67 = 0;
        id v39 = objc_msgSend_newEntryObjectFromStatement_error_(v45, v34, v46, (uint64_t)&v67);
        id v38 = v67;
        objc_storeStrong((id *)(a1 + 40), v39);
        if (v9)
        {
          uint64_t v50 = objc_msgSend_fetchedColumns(*(void **)(a1 + 56), v47, v48, v49);
          uint64_t v51 = (objc_class *)objc_opt_class();
          uint64_t v52 = NSStringFromClass(v51);
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          id v53 = (void *)ck_log_facility_sql;
          if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
          {
            uint64_t v54 = v53;
            uint64_t v55 = objc_opt_class();
            uint64_t v57 = objc_msgSend_descriptionOfProperties_from_(v55, v56, (uint64_t)v50, (uint64_t)v39);
            *(_DWORD *)buf = 138543874;
            uint64_t v70 = v52;
            __int16 v71 = 2048;
            uint64_t v72 = (void *)a1;
            __int16 v73 = 2114;
            id v74 = v57;
            _os_log_impl(&dword_18AF10000, v54, OS_LOG_TYPE_INFO, "%{public}@(%p): enumeration fetched: (%{public}@)", buf, 0x20u);
          }
        }
      }
      else
      {
        id v38 = v33;
        objc_msgSend_invalidate((void *)a1, v34, v35, v36);
        id v39 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = 0;
      }
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, a2, @"CKInternalErrorDomain", 1, @"Enumeration already finished");
      id v38 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v40 = (objc_class *)objc_opt_class();
      id v39 = NSStringFromClass(v40);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v41 = ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_FAULT))
      {
        uint64_t v42 = *(void **)(a1 + 24);
        uint64_t v43 = *(void **)(a1 + 16);
        uint64_t v44 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138544386;
        uint64_t v70 = v39;
        __int16 v71 = 2048;
        uint64_t v72 = (void *)a1;
        __int16 v73 = 2114;
        id v74 = v42;
        __int16 v75 = 2114;
        uint64_t v76 = v43;
        __int16 v77 = 2114;
        uint64_t v78 = v44;
        _os_log_fault_impl(&dword_18AF10000, v41, OS_LOG_TYPE_FAULT, "%{public}@(%p): Enumeration already finished. table: %{public}@ in group: %{public}@, error=%{public}@", buf, 0x34u);
      }
    }

    if (v38)
    {
      objc_storeStrong((id *)(a1 + 32), v38);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v58 = (void *)ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
      {
        uint64_t v59 = *(void **)(a1 + 8);
        id v60 = v58;
        uint64_t v64 = objc_msgSend_logicalTableName(v59, v61, v62, v63);
        uint64_t v65 = NSStringFromSelector(sel__nextObject);
        *(_DWORD *)buf = 138543874;
        uint64_t v70 = v64;
        __int16 v71 = 2114;
        uint64_t v72 = v65;
        __int16 v73 = 2114;
        id v74 = v38;
        _os_log_error_impl(&dword_18AF10000, v60, OS_LOG_TYPE_ERROR, "Table %{public}@ failed in %{public}@ - error: %{public}@", buf, 0x20u);
      }
    }
  }
}

id sub_18B01B5F4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18B01B7B0(uint64_t a1, void *a2, uint64_t a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_18B01B840;
  v7[3] = &unk_1E5460530;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = a3;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a2, v5, (uint64_t)v7, v6);
}

uint64_t sub_18B01B840(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v7)
  {
    *a4 = 1;
    **(unsigned char **)(a1 + 40) = 1;
  }
  return result;
}

void sub_18B01B940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B01B958(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_count(a2, (const char *)a2, a3, a4);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_18B01BA40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

void sub_18B01BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B01BB70(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v6 = objc_msgSend_objectForKey_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    *a3 = 1;
  }
}

uint64_t sub_18B01BC7C(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), a2, a3, (uint64_t)a2);
}

void sub_18B01BF34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B01BF58(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_18B01BF60(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

id sub_18B01BF68(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18B01C030(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a2;
  objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(v5, v8, (uint64_t)v7, a3, v6, 0);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(*(void **)(a1 + 40), v9, (uint64_t)v10, (uint64_t)v7);
}

void sub_18B01C188(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  unsigned int v12 = objc_msgSend_unsignedIntValue(v5, v7, v8, v9);
  if (v12 <= 0x48)
  {
    if (v12 - 1 >= 2 && v12 != 3 && v12 != 5) {
      goto LABEL_11;
    }
  }
  else if (v12 - 73 >= 0xD && v12 != 132 && v12 != 134)
  {
    goto LABEL_11;
  }
  uint64_t v13 = objc_opt_class();
  if (v13)
  {
    uint64_t v14 = objc_msgSend_decodeObjectOfClass_forKey_(*(void **)(a1 + 32), v10, v13, (uint64_t)v6);
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v14 = objc_msgSend_decodeObjectForKey_(*(void **)(a1 + 32), v10, (uint64_t)v6, v11);
LABEL_12:
  uint64_t v15 = (char *)v14;
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 48), v15, (uint64_t)v15, (uint64_t)v6, v5, *(void *)(a1 + 40));
}

void sub_18B01C384(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18B01C39C(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if ((objc_msgSend_unsignedIntValue(v5, v6, v7, v8) & 0x100) == 0)
  {
    id v10 = objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 48), v9, (uint64_t)v14, (uint64_t)v5, *(void *)(a1 + 32), 0);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^= objc_msgSend_hash(v10, v11, v12, v13);
  }
}

void sub_18B01C548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B01C560(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v20 = a2;
  id v7 = a3;
  __int16 v11 = objc_msgSend_unsignedIntValue(v7, v8, v9, v10);
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = (v11 & 0x100) == 0;
  }
  if (v13)
  {
    id v14 = objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 56), v12, (uint64_t)v20, (uint64_t)v7, *(void *)(a1 + 32), 0);
    uint64_t v16 = objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 56), v15, (uint64_t)v20, (uint64_t)v7, *(void *)(a1 + 40), 0);
    id v19 = (void *)v16;
    if (v14 != (void *)v16 && (!v14 || !v16 || (objc_msgSend_isEqual_(v14, v17, v16, v18) & 1) == 0)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    }
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      *a4 = 1;
    }
  }
}

void sub_18B01C720(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v7 = a3;
  id v8 = a2;
  objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(v5, v9, (uint64_t)v8, (uint64_t)v7, v6, 0);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = *(void **)(a1 + 40);
  id v14 = objc_msgSend_copy(v16, v11, v12, v13);
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(v10, v15, (uint64_t)v14, (uint64_t)v8, v7, *(void *)(a1 + 32));
}

void sub_18B01CBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18B01CBFC(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v5 = a3;
  uint64_t v7 = objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 64), v6, (uint64_t)v20, (uint64_t)v5, *(void *)(a1 + 32), 1);
  __int16 v11 = (__CFString *)v7;
  if (v7 == qword_1E912A320)
  {
    id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (!v14)
    {
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    }
    objc_msgSend_addObject_(v14, v8, (uint64_t)v20, v10);
    goto LABEL_11;
  }
  if (!v7)
  {
    __int16 v11 = @"<nil>";
LABEL_10:
    objc_msgSend_appendFormat_(*(void **)(a1 + 40), v20, @"%@%@ = %@", v10, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v20, v11);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = @", ";

LABEL_11:
    goto LABEL_12;
  }
  if (objc_msgSend_unsignedIntValue(v5, v8, v9, v10) != 8) {
    goto LABEL_10;
  }
  uint64_t v13 = objc_msgSend_stringWithFormat_(NSString, v12, @"{ %@ }", v10, v11);

  __int16 v11 = (__CFString *)v13;
  if (v13) {
    goto LABEL_10;
  }
LABEL_12:
}

void sub_18B01CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B01CFFC(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  uint64_t v6 = a3;
  __int16 v10 = objc_msgSend_unsignedIntValue(v6, v7, v8, v9);
  if ((v10 & 0x100) != 0)
  {
    unsigned __int8 v13 = v10;
    id v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v14)
    {
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), a2);
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 72), a3);
      id v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    objc_msgSend_addObject_(v14, v11, (uint64_t)v28, v12);
    int v18 = v13;
    if (v13 - 73 <= 9)
    {
      if (((1 << (v13 - 73)) & 0x108) != 0) {
        goto LABEL_14;
      }
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v6 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_18AF10000, v6, OS_LOG_TYPE_ERROR, "Scalar types shorter than 64 bit are not allowed as primary keys", buf, 2u);
      }
      uint64_t v21 = objc_msgSend_stringWithFormat_(NSString, v19, @"Scalar types shorter than 64 bit are not allowed as primary keys", v20);
      objc_msgSend_UTF8String(v21, v22, v23, v24);
      _os_crash();
      __break(1u);
    }
    if (v18 != 1)
    {
      uint64_t v25 = *(void *)(a1 + 32);
      do
      {
        uint64_t v26 = *(void *)(v25 + 48);
        uint64_t v27 = v26;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v25 + 48), (unint64_t *)&v27, v26 & 0xFFFFFFFFFFFFFFFELL, memory_order_relaxed, memory_order_relaxed);
      }
      while (v27 != v26);
    }
  }
LABEL_14:
}

void sub_18B01D22C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B01D488(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  if ((objc_msgSend_unsignedIntValue(a3, v5, v6, v7) & 0x100) == 0) {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v8, (uint64_t)v10, v9);
  }
}

id sub_18B01D4E8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18B01D6A4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B01DF5C(_Unwind_Exception *a1)
{
}

void sub_18B01DFE4(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, unsigned int a5, void *a6)
{
  id v20 = a2;
  for (id i = a6; a4 <= a5; a4 = (a4 + 1))
  {
    id v15 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v10, a4, v11);
    if ((a3 >> a4))
    {
      objc_msgSend_objectForKey_(v20, v13, (uint64_t)v15, v14);
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      if (!v18)
      {
        id v18 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        objc_msgSend_setObject_forKey_(v20, v19, (uint64_t)v18, (uint64_t)v15);
      }
      objc_msgSend_addObject_(v18, v16, (uint64_t)i, v17);
    }
  }
}

void sub_18B01E0D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v35 = a2;
  id v7 = a3;
  uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8);
  if (*(unsigned char *)(v8 + 24)) {
    *(unsigned char *)(v8 + 24) = 0;
  }
  else {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v5, @",", v6);
  }
  objc_msgSend_appendString_(*(void **)(a1 + 32), v5, (uint64_t)v35, v6);
  objc_msgSend_appendString_(*(void **)(a1 + 32), v9, @" ", v10);
  uint64_t v16 = objc_msgSend_unsignedIntValue(v7, v11, v12, v13);
  uint64_t v17 = *(void **)(a1 + 32);
  if (v16 > 0x53u)
  {
    if (v16 > 0x85u)
    {
      if (v16 == 134 || v16 == 135)
      {
LABEL_14:
        id v20 = @"BLOB";
LABEL_15:
        objc_msgSend_appendString_(v17, v14, (uint64_t)v20, v15);
        goto LABEL_16;
      }
    }
    else
    {
      if (v16 - 84 < 2)
      {
LABEL_7:
        objc_msgSend_appendString_(v17, v14, @"REAL", v15);
        goto LABEL_16;
      }
      if (v16 == 132) {
        goto LABEL_14;
      }
    }
LABEL_37:
    if (ck_log_initialization_predicate != -1) {
      goto LABEL_41;
    }
    while (1)
    {
      id v28 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        int v37 = v16;
        _os_log_error_impl(&dword_18AF10000, v28, OS_LOG_TYPE_ERROR, "Unknown type code: %u", buf, 8u);
      }
      id v31 = objc_msgSend_stringWithFormat_(NSString, v29, @"Unknown type code: %u", v30, v16);
      objc_msgSend_UTF8String(v31, v32, v33, v34);
      _os_crash();
      __break(1u);
LABEL_41:
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
  }
  if (v16 - 73 >= 0xB)
  {
    id v20 = @"<missing type placeholder>";
    switch((char)v16)
    {
      case 0:
        goto LABEL_15;
      case 1:
      case 8:
        break;
      case 2:
      case 5:
        goto LABEL_7;
      case 3:
        objc_msgSend_appendString_(v17, v14, @"STRING", v15);
        goto LABEL_16;
      default:
        goto LABEL_37;
    }
  }
  objc_msgSend_appendString_(v17, v14, @"INTEGER", v15);
LABEL_16:
  if ((v16 & 0x400) != 0) {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v18, @" UNIQUE", v19);
  }
  if ((v16 & 0x200) != 0) {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v18, @" NOT NULL", v19);
  }
  uint64_t v23 = objc_msgSend_checkConstraintForProperty_(*(void **)(a1 + 40), v18, (uint64_t)v35, v19);
  if (v23) {
    objc_msgSend_appendFormat_(*(void **)(a1 + 32), v21, @" CHECK(%@)", v22, v23);
  }
  if ((v16 & 0x800) != 0) {
    objc_msgSend_addObject_(*(void **)(a1 + 48), v21, (uint64_t)v35, v22);
  }
  if ((*(_DWORD *)(a1 + 96) & v16) != 0) {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  if ((*(_DWORD *)(a1 + 100) & v16) != 0) {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  if (v16 == 8)
  {
    uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    if (!v24)
    {
      id v25 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v26 = *(void *)(*(void *)(a1 + 88) + 8);
      uint64_t v27 = *(void **)(v26 + 40);
      *(void *)(v26 + 40) = v25;

      uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    }
    objc_msgSend_addObject_(v24, v21, (uint64_t)v35, v22);
  }
}

uint64_t sub_18B01E43C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  objc_msgSend_appendString_(v4, v6, @", UNIQUE ("), v7;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v11 = objc_msgSend_componentsJoinedByString_(v5, v9, @",", v10);

  objc_msgSend_appendString_(v8, v12, (uint64_t)v11, v13);
  uint64_t v16 = *(void **)(a1 + 32);

  return objc_msgSend_appendString_(v16, v14, @""), v15);
}

void sub_18B01E4CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = NSString;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a3;
  objc_msgSend_stringWithFormat_(v5, v8, @"%@.index_%@", v9, v6, a2);
  uint64_t v19 = (char *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendFormat_(*(void **)(a1 + 40), v19, @"CREATE INDEX '%@' on '%@' ("), v10, v19, *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 40);
  uint64_t v14 = objc_msgSend_componentsJoinedByString_(v7, v12, @",", v13);

  objc_msgSend_appendString_(v11, v15, (uint64_t)v14, v16);
  objc_msgSend_appendString_(*(void **)(a1 + 40), v17, @";"), v18);
}

id sub_18B01E5C4(void *a1, void *a2, void *a3, char a4)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = (objc_class *)objc_opt_class();
  id v11 = v7;
  uint64_t v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
  Property = class_getProperty(v10, v15);
  uint64_t v17 = property_copyAttributeValue(Property, "G");
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = sel_registerName(v17);
    free(v18);
  }
  else
  {
    uint64_t v19 = sel_registerName(v15);
  }
  InstanceMethod = class_getInstanceMethod(v10, v19);
  if (!InstanceMethod)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v80 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v81 = v80;
      long long v82 = (objc_class *)objc_opt_class();
      uint64_t v83 = NSStringFromClass(v82);
      *(_DWORD *)buf = 138412546;
      id v106 = v11;
      __int16 v107 = 2112;
      uint64_t v108 = v83;
      _os_log_error_impl(&dword_18AF10000, v81, OS_LOG_TYPE_ERROR, "Could not find getter method for property %@ on class %@", buf, 0x16u);
    }
    uint64_t v84 = NSString;
    uint64_t v85 = (objc_class *)objc_opt_class();
    uint64_t v86 = NSStringFromClass(v85);
    objc_msgSend_stringWithFormat_(v84, v87, @"Could not find getter method for property %@ on class %@", v88, v11, v86);
    id v11 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend_UTF8String(v11, v89, v90, v91);
    _os_crash();
    __break(1u);
LABEL_30:
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v92 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v93 = v92;
      uint64_t v94 = (objc_class *)objc_opt_class();
      uint64_t v95 = NSStringFromClass(v94);
      *(_DWORD *)buf = 138412546;
      id v106 = v11;
      __int16 v107 = 2112;
      uint64_t v108 = v95;
      _os_log_error_impl(&dword_18AF10000, v93, OS_LOG_TYPE_ERROR, "Attempted to use property %@ on entry of class %@ but the property value has not been fetched into the object.", buf, 0x16u);
    }
    uint64_t v96 = NSString;
    os_log_type_t v97 = (objc_class *)objc_opt_class();
    uint64_t v98 = NSStringFromClass(v97);
    uint64_t v101 = objc_msgSend_stringWithFormat_(v96, v99, @"Attempted to use property %@ on entry of class %@ but the property value has not been fetched into the object.", v100, v11, v98);

    objc_msgSend_UTF8String(v101, v102, v103, v104);
    _os_crash();
    __break(1u);
  }
  IMP Implementation = method_getImplementation(InstanceMethod);
  switch(objc_msgSend_unsignedIntValue(v9, v22, v23, v24))
  {
    case 'I':
      id v25 = NSNumber;
      uint64_t v26 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithChar_(v25, v27, v26, v28);
      break;
    case 'J':
      uint64_t v50 = NSNumber;
      uint64_t v51 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithShort_(v50, v52, v51, v53);
      break;
    case 'K':
      uint64_t v38 = NSNumber;
      uint64_t v39 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithInt_(v38, v40, v39, v41);
      break;
    case 'L':
      uint64_t v54 = NSNumber;
      uint64_t v55 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithLongLong_(v54, v56, v55, v57);
      break;
    case 'M':
      uint64_t v30 = NSNumber;
      uint64_t v31 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithInteger_(v30, v32, v31, v33);
      break;
    case 'N':
      uint64_t v62 = NSNumber;
      uint64_t v63 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithUnsignedChar_(v62, v64, v63, v65);
      break;
    case 'O':
      uint64_t v66 = NSNumber;
      uint64_t v67 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithUnsignedShort_(v66, v68, v67, v69);
      break;
    case 'P':
      uint64_t v58 = NSNumber;
      uint64_t v59 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithUnsignedInt_(v58, v60, v59, v61);
      break;
    case 'Q':
      uint64_t v70 = NSNumber;
      uint64_t v71 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithUnsignedLongLong_(v70, v72, v71, v73);
      break;
    case 'R':
      uint64_t v42 = NSNumber;
      uint64_t v43 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithUnsignedInteger_(v42, v44, v43, v45);
      break;
    case 'S':
      id v74 = NSNumber;
      uint64_t v75 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithBool_(v74, v76, v75, v77);
      break;
    case 'T':
      uint64_t v34 = NSNumber;
      ((void (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithFloat_(v34, v35, v36, v37);
      break;
    case 'U':
      uint64_t v46 = NSNumber;
      ((void (*)(id, const char *))Implementation)(v8, v19);
      uint64_t v29 = objc_msgSend_numberWithDouble_(v46, v47, v48, v49);
      break;
    default:
      uint64_t v29 = ((void (*)(id, const char *))Implementation)(v8, v19);
      break;
  }
  uint64_t v78 = (void *)v29;
  if (v29 == qword_1E912A320 && (a4 & 1) == 0) {
    goto LABEL_30;
  }

  return v78;
}

void sub_18B01EBB0(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v43 = a1;
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (objc_class *)objc_opt_class();
  id v11 = v7;
  uint64_t v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
  uint64_t v16 = sub_18B027848(v10, v15);
  InstanceMethod = class_getInstanceMethod(v10, v16);
  IMP Implementation = method_getImplementation(InstanceMethod);
  if (!Implementation)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v32 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = v32;
      uint64_t v34 = NSStringFromClass(v10);
      *(_DWORD *)buf = 138412546;
      id v45 = v11;
      __int16 v46 = 2112;
      uint64_t v47 = v34;
      _os_log_error_impl(&dword_18AF10000, v33, OS_LOG_TYPE_ERROR, "Failed to find a setter for %@ on %@", buf, 0x16u);
    }
    id v35 = NSString;
    uint64_t v36 = NSStringFromClass(v10);
    uint64_t v39 = objc_msgSend_stringWithFormat_(v35, v37, @"Failed to find a setter for %@ on %@", v38, v11, v36);

    objc_msgSend_UTF8String(v39, v40, v41, v42);
    _os_crash();
    __break(1u);
  }
  uint64_t v22 = (void (*)(id, const char *))Implementation;
  switch(objc_msgSend_unsignedIntValue(v8, v19, v20, v21))
  {
    case 'I':
      uint64_t v26 = objc_msgSend_charValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'J':
      uint64_t v26 = objc_msgSend_shortValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'K':
      uint64_t v27 = objc_msgSend_longValue(v43, v23, v24, v25);
      goto LABEL_12;
    case 'L':
      uint64_t v28 = objc_msgSend_longLongValue(v43, v23, v24, v25);
      goto LABEL_17;
    case 'M':
      uint64_t v28 = objc_msgSend_integerValue(v43, v23, v24, v25);
      goto LABEL_17;
    case 'N':
      uint64_t v26 = objc_msgSend_unsignedCharValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'O':
      uint64_t v26 = objc_msgSend_unsignedShortValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'P':
      uint64_t v27 = objc_msgSend_unsignedLongValue(v43, v23, v24, v25);
LABEL_12:
      uint64_t v29 = v27;
      id v30 = v9;
      uint64_t v31 = v16;
      goto LABEL_21;
    case 'Q':
      uint64_t v28 = objc_msgSend_unsignedLongLongValue(v43, v23, v24, v25);
      goto LABEL_17;
    case 'R':
      uint64_t v28 = objc_msgSend_unsignedIntegerValue(v43, v23, v24, v25);
LABEL_17:
      uint64_t v29 = v28;
      id v30 = v9;
      uint64_t v31 = v16;
      goto LABEL_21;
    case 'S':
      uint64_t v26 = objc_msgSend_BOOLValue(v43, v23, v24, v25);
LABEL_20:
      uint64_t v29 = v26;
      id v30 = v9;
      uint64_t v31 = v16;
      goto LABEL_21;
    case 'T':
      objc_msgSend_floatValue(v43, v23, v24, v25);
      v22(v9, v16);
      goto LABEL_22;
    case 'U':
      objc_msgSend_doubleValue(v43, v23, v24, v25);
      v22(v9, v16);
      goto LABEL_22;
    default:
      id v30 = v9;
      uint64_t v31 = v16;
      uint64_t v29 = (uint64_t)v43;
LABEL_21:
      ((void (*)(id, const char *, uint64_t))v22)(v30, v31, v29);
LABEL_22:

      return;
  }
}

void sub_18B01F2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18B01F2F8(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  if (objc_msgSend_unsignedIntValue(a3, v8, v9, v10) == 8)
  {
    id v11 = (void *)a1[4];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = sub_18B01F3F4;
    v17[3] = &unk_1E5460810;
    uint64_t v12 = a1[6];
    v17[4] = v11;
    uint64_t v19 = v12;
    id v18 = v7;
    uint64_t v14 = objc_msgSend_tableForReferenceProperty_block_(v11, v13, (uint64_t)v18, (uint64_t)v17);
    uint64_t v15 = *(void *)(a1[5] + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }
  if (*(void *)(*(void *)(a1[5] + 8) + 40)) {
    *a4 = 1;
  }
}

void sub_18B01F3F4(void *a1, void *a2, void *a3)
{
  id v17 = a2;
  id v6 = a3;
  if (!*(void *)(a1[4] + 32))
  {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v8 = a1[4];
    uint64_t v9 = *(void **)(v8 + 32);
    *(void *)(v8 + 32) = v7;

    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v11 = *(void *)(a1[6] + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
  objc_msgSend_setObject_forKey_(*(void **)(*(void *)(a1[6] + 8) + 40), v5, (uint64_t)v6, a1[5]);
  if ((objc_msgSend_containsObject_(*(void **)(a1[4] + 32), v13, (uint64_t)v17, v14) & 1) == 0) {
    objc_msgSend_addObject_(*(void **)(a1[4] + 32), v15, (uint64_t)v17, v16);
  }
}

void sub_18B01F68C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_opt_class();
  objc_msgSend_propertyInfo_(v7, v8, (uint64_t)v6, v9);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_valueForProperty_propertyInfo_inObject_(*(void **)(a1 + 32), v10, (uint64_t)v6, (uint64_t)v13, *(void *)(a1 + 40));
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 48), v12, (uint64_t)v11, (uint64_t)v6, v5, *(void *)(a1 + 56));
}

void sub_18B01FA54(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = objc_opt_class();
  id v6 = objc_msgSend_propertyInfo_(v3, v4, (uint64_t)v10, v5);

  uint64_t v9 = 40;
  if (!v6) {
    uint64_t v9 = 48;
  }
  objc_msgSend_addObject_(*(void **)(a1 + v9), v7, (uint64_t)v10, v8);
}

uint64_t sub_18B01FAD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_setFetchedProperties_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
}

void sub_18B01FC50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B01FD34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0207DC(uint64_t a1, void *a2)
{
  id v19 = a2;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64);
  id v6 = objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v4, @"%@ = $PRIMARY_KEY", v5, v3);
  objc_msgSend_setSearchPredicate_(v19, v7, (uint64_t)v6, v8);

  char v13 = objc_msgSend_containsObject_(*(void **)(a1 + 40), v9, (uint64_t)v3, v10);
  uint64_t v14 = *(void **)(a1 + 40);
  if (v13)
  {
    id v15 = v14;
  }
  else
  {
    objc_msgSend_arrayByAddingObject_(v14, v11, (uint64_t)v3, v12);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v18 = v15;
  objc_msgSend_setFetchedProperties_(v19, v16, (uint64_t)v15, v17);
}

void sub_18B020A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B020A44(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  id v27 = 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = sub_18B020BD4;
  v25[3] = &unk_1E5460918;
  id v26 = *(id *)(a1 + 48);
  id v6 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v2, v5, v3, v4, &v27, v25);
  id v7 = v27;
  uint64_t v11 = objc_msgSend_nextObject(v6, v8, v9, v10);
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  char v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    uint64_t v17 = objc_msgSend_nextObject(v6, v14, v15, v16);

    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
      id v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = 0;

      uint64_t v20 = NSStringFromSelector(*(SEL *)(a1 + 72));
      uint64_t v22 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v21, @"CKInternalErrorDomain", 1051, @"Matched more than one database row in %@", v20);

      id v7 = (id)v22;
    }
  }
  id v23 = v7;

  return v23;
}

void sub_18B020BD4(uint64_t a1, void *a2)
{
  id v6 = a2;
  objc_msgSend_setLimit_(v6, v3, (uint64_t)&unk_1ED8460F0, v4);
  uint64_t v5 = v6;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v5 = v6;
  }
}

void sub_18B021188(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = *(void **)(a1 + 32);
  id v15 = a4;
  id v8 = a3;
  objc_msgSend_addPointer_(v7, v9, a2, v10);
  objc_msgSend_addPointer_(*(void **)(a1 + 32), v11, (uint64_t)v8, v12);

  objc_msgSend_addPointer_(*(void **)(a1 + 32), v13, (uint64_t)v15, v14);
}

id sub_18B02131C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  id v20 = 0;
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 3221225472;
  id v15 = sub_18B02141C;
  uint64_t v16 = &unk_1E5460968;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v17 = v5;
  uint64_t v18 = v6;
  id v19 = *(id *)(a1 + 56);
  id v8 = objc_msgSend__statementForFetchingEntriesMatchingObject_label_error_setupBlock_(v2, v7, v3, v4, &v20, &v13);
  id v9 = v20;
  if (!v9)
  {
    objc_msgSend__fetchPropertiesUsingStatement_inObject_matchingDBProperties_label_(*(void **)(a1 + 32), v10, (uint64_t)v8, *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 64), v13, v14, v15, v16, v17, v18);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v11 = v9;

  return v11;
}

void sub_18B02141C(uint64_t a1, void *a2)
{
  id v22 = a2;
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v6 = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    objc_msgSend_addObjectsFromArray_(v3, v4, v7, v5);
  }
  else
  {
    uint64_t v10 = objc_opt_class();
    uint64_t v14 = objc_msgSend_allPropertyNames(v10, v11, v12, v13);
    objc_msgSend_addObjectsFromArray_(v6, v15, (uint64_t)v14, v16);
  }
  objc_msgSend_removeObjectsInArray_(v6, v8, *(void *)(a1 + 48), v9);
  objc_msgSend_setFetchedProperties_(v22, v17, (uint64_t)v6, v18);
  uint64_t v21 = *(void *)(a1 + 48);
  if (v21) {
    objc_msgSend_setSearchProperties_(v22, v19, v21, v20);
  }
  objc_msgSend_setLimit_(v22, v19, (uint64_t)&unk_1ED8460F0, v20);
}

id sub_18B02159C(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = sub_18B021670;
  v10[3] = &unk_1E54609D0;
  v10[4] = v3;
  uint64_t v5 = objc_msgSend__statementForFetchingEntriesMatchingObject_label_error_setupBlock_(v3, a2, v4, (uint64_t)off_1E54609B0, &v11, v10);
  id v6 = v11;
  if (!v6)
  {
    objc_msgSend__fetchPropertiesUsingStatement_inObject_matchingDBProperties_label_(*(void **)(a1 + 32), v7, (uint64_t)v5, *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 24), off_1E54609B0);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v8 = v6;

  return v8;
}

void sub_18B021670(uint64_t a1, void *a2)
{
  id v14 = a2;
  id v3 = objc_opt_class();
  uint64_t v7 = objc_msgSend_nonKeyProperties(v3, v4, v5, v6);
  objc_msgSend_setFetchedProperties_(v14, v8, (uint64_t)v7, v9);

  objc_msgSend_setSearchProperties_(v14, v10, *(void *)(*(void *)(a1 + 32) + 24), v11);
  objc_msgSend_setLimit_(v14, v12, (uint64_t)&unk_1ED8460F0, v13);
}

uint64_t sub_18B0218B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__predicateForMatchingProperties_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
}

void sub_18B021B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18B021B84(uint64_t a1, void *a2, void *a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = a3;
    id v8 = a2;
    objc_msgSend_valueForProperty_propertyInfo_inObject_(v5, v9, (uint64_t)v8, (uint64_t)v7, v6);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = objc_msgSend_unsignedIntValue(v7, v10, v11, v12);

    uint64_t v15 = objc_msgSend_bindValueColumn_type_value_(*(void **)(a1 + 48), v14, (uint64_t)v8, v13, v18);

    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    if ((v13 & 0x100) != 0 && !v18) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    }
  }
}

id sub_18B021D40(uint64_t a1, const char *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a1 + 32);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = sub_18B022020;
  v37[3] = &unk_1E5460A78;
  v37[4] = v3;
  uint64_t v4 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, a2, (uint64_t)off_1E5460A58, (uint64_t)v37);
  uint64_t v6 = objc_msgSend__performInsertOrUpdateStatement_usingObject_(*(void **)(a1 + 32), v5, (uint64_t)v4, *(void *)(a1 + 40));
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v7, v8, v9))
  {
    uint64_t v13 = objc_msgSend_db(*(void **)(a1 + 32), v10, v11, v12);
    uint64_t v17 = objc_msgSend_changeCount(v13, v14, v15, v16);

    id v18 = objc_opt_class();
    uint64_t v21 = objc_msgSend_descriptionOfEntry_(v18, v19, *(void *)(a1 + 40), v20);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v22 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      id v23 = v22;
      uint64_t v24 = (objc_class *)objc_opt_class();
      uint64_t v25 = NSStringFromClass(v24);
      id v26 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138544130;
      uint64_t v39 = v25;
      __int16 v40 = 2048;
      uint64_t v41 = v26;
      __int16 v42 = 2114;
      id v43 = v21;
      __int16 v44 = 2048;
      uint64_t v45 = v17;
      _os_log_impl(&dword_18AF10000, v23, OS_LOG_TYPE_INFO, "%{public}@(%p): INSERT (%{public}@) inserted: %lld", buf, 0x2Au);
    }
  }
  objc_msgSend_resetAndClearBindings(v4, v10, v11, v12);
  if (v6)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v27 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
    {
      id v30 = *(void **)(a1 + 32);
      uint64_t v31 = v27;
      id v35 = objc_msgSend_logicalTableName(v30, v32, v33, v34);
      uint64_t v36 = NSStringFromSelector(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 138543874;
      uint64_t v39 = v35;
      __int16 v40 = 2114;
      uint64_t v41 = v36;
      __int16 v42 = 2114;
      id v43 = v6;
      _os_log_error_impl(&dword_18AF10000, v31, OS_LOG_TYPE_ERROR, "Table %{public}@ failed in %{public}@ - error: %{public}@", buf, 0x20u);
    }
  }
  id v28 = v6;

  return v28;
}

id sub_18B022020(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v3 = objc_opt_class();
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = sub_18B022104;
  v10[3] = &unk_1E54605A8;
  id v11 = v2;
  id v4 = v2;
  objc_msgSend_enumeratePropertyDataWithBlock_(v3, v5, (uint64_t)v10, v6);
  uint64_t v8 = objc_msgSend_statementForInserting_inTable_(CKSQLiteCompiledStatement, v7, (uint64_t)v4, *(void *)(a1 + 32));

  return v8;
}

uint64_t sub_18B022104(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

id sub_18B022204(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v40 = MEMORY[0x1E4F143A8];
  uint64_t v41 = 3221225472;
  __int16 v42 = sub_18B022528;
  id v43 = &unk_1E5460AC8;
  __int16 v44 = v2;
  id v45 = *(id *)(a1 + 40);
  uint64_t v5 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v2, v4, v3, (uint64_t)&v40);
  id v7 = objc_msgSend__performInsertOrUpdateStatement_usingObject_(*(void **)(a1 + 32), v6, (uint64_t)v5, *(void *)(a1 + 48), v40, v41, v42, v43, v44);
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v8, v9, v10))
  {
    id v14 = objc_msgSend_db(*(void **)(a1 + 32), v11, v12, v13);
    uint64_t v18 = objc_msgSend_changeCount(v14, v15, v16, v17);

    id v19 = objc_opt_class();
    id v22 = objc_msgSend_descriptionOfEntry_(v19, v20, *(void *)(a1 + 48), v21);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v23 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = v23;
      uint64_t v25 = (objc_class *)objc_opt_class();
      id v26 = NSStringFromClass(v25);
      id v27 = *(void **)(a1 + 32);
      uint64_t v29 = sub_18B01A394(*(uint64_t **)(a1 + 56), v28);
      *(_DWORD *)buf = 138544386;
      uint64_t v47 = v26;
      __int16 v48 = 2048;
      uint64_t v49 = v27;
      __int16 v50 = 2114;
      uint64_t v51 = v22;
      __int16 v52 = 2112;
      uint64_t v53 = v29;
      __int16 v54 = 2048;
      uint64_t v55 = v18;
      _os_log_impl(&dword_18AF10000, v24, OS_LOG_TYPE_INFO, "%{public}@(%p): UPSERT (%{public}@) label: %@ inserted/modified: %lld", buf, 0x34u);
    }
  }
  objc_msgSend_resetAndClearBindings(v5, v11, v12, v13);
  if (v7)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v30 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void **)(a1 + 32);
      uint64_t v34 = v30;
      uint64_t v38 = objc_msgSend_logicalTableName(v33, v35, v36, v37);
      uint64_t v39 = NSStringFromSelector(*(SEL *)(a1 + 64));
      *(_DWORD *)buf = 138543874;
      uint64_t v47 = v38;
      __int16 v48 = 2114;
      uint64_t v49 = v39;
      __int16 v50 = 2114;
      uint64_t v51 = v7;
      _os_log_error_impl(&dword_18AF10000, v34, OS_LOG_TYPE_ERROR, "Table %{public}@ failed in %{public}@ - error: %{public}@", buf, 0x20u);
    }
  }
  id v31 = v7;

  return v31;
}

id sub_18B022528(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v3 = objc_opt_class();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  id v11[2] = sub_18B022614;
  v11[3] = &unk_1E54605A8;
  id v12 = v2;
  id v4 = v2;
  objc_msgSend_enumeratePropertyDataWithBlock_(v3, v5, (uint64_t)v11, v6);
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    objc_msgSend_statementForInserting_orUpdating_inTable_(CKSQLiteCompiledStatement, v7, (uint64_t)v4, *(void *)(a1 + 40), v8);
  }
  else {
  uint64_t v9 = objc_msgSend_statementForInserting_orUpdating_inTable_(CKSQLiteCompiledStatement, v7, (uint64_t)v4, (uint64_t)v4, v8);
  }

  return v9;
}

uint64_t sub_18B022614(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

uint64_t sub_18B0227A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__predicateForMatchingProperties_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
}

uint64_t sub_18B022AA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"%@=$VALUE", a4, *(void *)(a1 + 32));
}

void sub_18B022BE8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if ((objc_msgSend_unsignedIntValue(v5, v6, v7, v8) & 0x40) == 0) {
    objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 32), v9, qword_1E912A320, (uint64_t)v10, v5, *(void *)(a1 + 40));
  }
}

uint64_t sub_18B022EB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__predicateForMatchingProperties_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
}

void sub_18B023118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B02313C(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = sub_18B02339C;
  uint64_t v30[3] = &unk_1E5460AC8;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v31 = v4;
  uint64_t v32 = v5;
  uint64_t v7 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v30);
  id v29 = 0;
  int v10 = objc_msgSend_step_(v7, v8, (uint64_t)&v29, v9);
  id v11 = v29;
  uint64_t v15 = v11;
  if (v10 && !v11)
  {
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = sub_18B0233B0;
    v28[3] = &unk_1E5460B98;
    v28[4] = *(void *)(a1 + 48);
    objc_msgSend_enumerateResultColumnsWithBlock_(v7, v12, (uint64_t)v28, v14);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v12, v13, v14) && !v15)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v19 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = v19;
      uint64_t v21 = (objc_class *)objc_opt_class();
      id v22 = NSStringFromClass(v21);
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138544130;
      uint64_t v34 = v22;
      __int16 v35 = 2048;
      uint64_t v36 = v23;
      __int16 v37 = 2114;
      uint64_t v38 = v24;
      __int16 v39 = 2114;
      uint64_t v40 = v25;
      _os_log_impl(&dword_18AF10000, v20, OS_LOG_TYPE_INFO, "%{public}@(%p): FETCH MIN(%{public}@) fetched: %{public}@", buf, 0x2Au);
    }
  }
  objc_msgSend_resetAndClearBindings(v7, v16, v17, v18);
  id v26 = v15;

  return v26;
}

uint64_t sub_18B02339C(uint64_t a1)
{
  return MEMORY[0x1F4181798](CKSQLiteCompiledStatement, sel_statementForFetchingMinimumValueForColumn_inTable_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B0233B0(uint64_t a1, int a2, int a3, id obj)
{
}

void sub_18B02361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B023640(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = sub_18B0238A0;
  uint64_t v30[3] = &unk_1E5460AC8;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v31 = v4;
  uint64_t v32 = v5;
  uint64_t v7 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v30);
  id v29 = 0;
  int v10 = objc_msgSend_step_(v7, v8, (uint64_t)&v29, v9);
  id v11 = v29;
  uint64_t v15 = v11;
  if (v10 && !v11)
  {
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = sub_18B0238B4;
    v28[3] = &unk_1E5460B98;
    v28[4] = *(void *)(a1 + 48);
    objc_msgSend_enumerateResultColumnsWithBlock_(v7, v12, (uint64_t)v28, v14);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v12, v13, v14) && !v15)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v19 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = v19;
      uint64_t v21 = (objc_class *)objc_opt_class();
      id v22 = NSStringFromClass(v21);
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138544130;
      uint64_t v34 = v22;
      __int16 v35 = 2048;
      uint64_t v36 = v23;
      __int16 v37 = 2114;
      uint64_t v38 = v24;
      __int16 v39 = 2114;
      uint64_t v40 = v25;
      _os_log_impl(&dword_18AF10000, v20, OS_LOG_TYPE_INFO, "%{public}@(%p): FETCH MAX(%{public}@) fetched: %{public}@", buf, 0x2Au);
    }
  }
  objc_msgSend_resetAndClearBindings(v7, v16, v17, v18);
  id v26 = v15;

  return v26;
}

uint64_t sub_18B0238A0(uint64_t a1)
{
  return MEMORY[0x1F4181798](CKSQLiteCompiledStatement, sel_statementForFetchingMaximumValueForColumn_inTable_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B0238B4(uint64_t a1, int a2, int a3, id obj)
{
}

void sub_18B023B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B023BB4(void *a1)
{
  uint64_t v2 = objc_alloc_init(CKSQLiteTableSearchEnumeratorSetupHelper);
  uint64_t v3 = objc_opt_class();
  uint64_t v7 = objc_msgSend_allPropertyNames(v3, v4, v5, v6);
  objc_msgSend_setFetchedProperties_(v2, v8, (uint64_t)v7, v9);
  objc_msgSend_setSearchProperties_(v2, v10, (uint64_t)v7, v11);
  uint64_t v15 = a1[5];
  if (v15) {
    (*(void (**)(uint64_t, CKSQLiteTableSearchEnumeratorSetupHelper *))(v15 + 16))(v15, v2);
  }
  uint64_t v16 = (void *)a1[4];
  uint64_t v17 = objc_msgSend_fetchedProperties(v2, v12, v13, v14);
  uint64_t v21 = objc_msgSend_searchProperties(v2, v18, v19, v20);
  id v30 = 0;
  uint64_t v23 = objc_msgSend_statementForFetchingProperties_inEntriesMatchingColumns_error_(v16, v22, (uint64_t)v17, (uint64_t)v21, &v30);
  id v24 = v30;

  objc_msgSend_setupStatement_(v2, v25, (uint64_t)v23, v26);
  uint64_t v27 = *(void *)(a1[6] + 8);
  id v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = v24;

  return v23;
}

id sub_18B023F64(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v21 = 0;
  uint64_t v3 = (*(void (**)(void))(v2 + 16))();
  id v4 = 0;
  if (!v4)
  {
    char v20 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = v3;
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v16, (uint64_t)v22, 16);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v17;
LABEL_4:
      uint64_t v10 = 0;
      while (1)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v5);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        objc_msgSend_error(v5, v11, v12, v13, (void)v16);
        id v4 = (id)objc_claimAutoreleasedReturnValue();
        if (v4 || v20) {
          break;
        }
        if (v8 == ++v10)
        {
          uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v14, (uint64_t)&v16, (uint64_t)v22, 16);
          if (v8) {
            goto LABEL_4;
          }
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      id v4 = 0;
    }
  }

  return v4;
}

uint64_t sub_18B02416C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_entryEnumerator_, a2, a4);
}

uint64_t sub_18B0242A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 32), a2, a4, (uint64_t)a2, a3, *(void *)(a1 + 40));
}

id sub_18B0244D4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = 0;
  id v68 = &v67;
  uint64_t v69 = 0x3032000000;
  uint64_t v70 = sub_18AF13AC4;
  uint64_t v71 = sub_18AF13830;
  id v72 = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 3221225472;
  v63[2] = sub_18B0249D4;
  v63[3] = &unk_1E5460C78;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(v1 + 32);
  id v64 = v4;
  uint64_t v65 = v5;
  uint64_t v66 = &v67;
  uint64_t v53 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v63);
  while (1)
  {
    uint64_t v9 = (id *)(v68 + 5);
    obunint64_t j = (id)v68[5];
    int v10 = objc_msgSend_step_(v53, v7, (uint64_t)&obj, v8);
    objc_storeStrong(v9, obj);
    if (!v10) {
      break;
    }
    uint64_t v14 = (id *)(v68 + 5);
    if (v68[5]) {
      break;
    }
    uint64_t v15 = *(void **)(v1 + 32);
    id v61 = 0;
    long long v16 = objc_msgSend_newEntryObjectFromStatement_error_(v15, v11, (uint64_t)v53, (uint64_t)&v61);
    objc_storeStrong(v14, v61);
    if (v16) {
      objc_msgSend_addObject_(*(void **)(v1 + 48), v17, (uint64_t)v16, v18);
    }
  }
  if (objc_msgSend_logOperations(*(void **)(v1 + 32), v11, v12, v13))
  {
    id v22 = objc_msgSend_fetchedColumns(v53, v19, v20, v21);
    __int16 v52 = objc_msgSend_componentsJoinedByString_(v22, v23, @", ", v24);
    uint64_t v51 = objc_msgSend_searchBindingsDescription(v53, v25, v26, v27);
    id v28 = (objc_class *)objc_opt_class();
    uint64_t v56 = NSStringFromClass(v28);
    __int16 v54 = v28;
    uint64_t v55 = v22;
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v29 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = *(void *)(v1 + 32);
      sub_18B01A394(*(uint64_t **)(v1 + 56), v30);
      id v32 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v36 = objc_msgSend_count(*(void **)(v1 + 48), v33, v34, v35);
      *(_DWORD *)buf = 138544642;
      uint64_t v75 = v56;
      __int16 v76 = 2048;
      uint64_t v77 = v31;
      __int16 v78 = 2114;
      __int16 v79 = v52;
      __int16 v80 = 2114;
      uint64_t v81 = v51;
      __int16 v82 = 2114;
      id v83 = v32;
      __int16 v84 = 2048;
      uint64_t v85 = v36;
      _os_log_impl(&dword_18AF10000, v29, OS_LOG_TYPE_INFO, "%{public}@(%p): FETCH (%{public}@) WHERE %{public}@, label: %{public}@ fetched %ld entries:", buf, 0x3Eu);
    }
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id v37 = *(id *)(v1 + 48);
    uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v57, (uint64_t)v73, 16);
    if (v39)
    {
      uint64_t v40 = *(void *)v58;
      do
      {
        uint64_t v41 = 0;
        do
        {
          if (*(void *)v58 != v40) {
            objc_enumerationMutation(v37);
          }
          uint64_t v42 = *(void *)(*((void *)&v57 + 1) + 8 * v41);
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          id v43 = (id)ck_log_facility_sql;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            uint64_t v45 = v1;
            uint64_t v46 = *(void *)(v1 + 32);
            uint64_t v47 = objc_msgSend_descriptionOfProperties_from_(v54, v44, (uint64_t)v55, v42);
            *(_DWORD *)buf = 138543874;
            uint64_t v75 = v56;
            __int16 v76 = 2048;
            uint64_t v77 = v46;
            __int16 v78 = 2114;
            __int16 v79 = v47;
            _os_log_impl(&dword_18AF10000, v43, OS_LOG_TYPE_INFO, "%{public}@(%p):    %{public}@", buf, 0x20u);

            uint64_t v1 = v45;
          }

          ++v41;
        }
        while (v39 != v41);
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v48, (uint64_t)&v57, (uint64_t)v73, 16);
      }
      while (v39);
    }
  }
  objc_msgSend_resetAndClearBindings(v53, v19, v20, v21);
  id v49 = (id)v68[5];

  _Block_object_dispose(&v67, 8);

  return v49;
}

void sub_18B024984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id sub_18B0249D4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = v2;
  }
  else
  {
    uint64_t v5 = objc_opt_class();
    objc_msgSend_allPropertyNames(v5, v6, v7, v8);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v9 = v3;
  int v10 = (void *)a1[5];
  id v17 = 0;
  uint64_t v11 = objc_msgSend_statementForFetchingProperties_inEntriesMatchingColumns_error_(v10, v4, (uint64_t)v9, 0, &v17);
  id v12 = v17;
  uint64_t v13 = *(void *)(a1[6] + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
  id v15 = v12;

  return v11;
}

void sub_18B024C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B024CA4(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_18B024D80;
  v14[3] = &unk_1E5460A78;
  v14[4] = v3;
  id v4 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, a2, (uint64_t)off_1E5460CD8, (uint64_t)v14);
  id v13 = 0;
  char v7 = objc_msgSend_step_(v4, v5, (uint64_t)&v13, v6);
  id v8 = v13;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
  objc_msgSend_resetAndClearBindings(v4, v9, v10, v11);

  return v8;
}

id sub_18B024D80(uint64_t a1, const char *a2)
{
  uint64_t v2 = objc_msgSend_statementForFetchingColumns_inTable_(CKSQLiteCompiledStatement, a2, 0, *(void *)(a1 + 32));
  objc_msgSend_setLimit_(v2, v3, (uint64_t)&unk_1ED846108, v4);

  return v2;
}

void sub_18B024FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B024FD4(uint64_t a1, const char *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = *(void **)(a1 + 32);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_18B025204;
  v24[3] = &unk_1E5460A78;
  v24[4] = v3;
  uint64_t v4 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, a2, (uint64_t)off_1E5460D18, (uint64_t)v24);
  id v23 = 0;
  objc_msgSend_step_(v4, v5, (uint64_t)&v23, v6);
  id v10 = v23;
  if (!v10)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    long long v22[2] = sub_18B025218;
    v22[3] = &unk_1E5460B98;
    v22[4] = *(void *)(a1 + 40);
    objc_msgSend_enumerateResultColumnsWithBlock_(v4, v7, (uint64_t)v22, v9);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v7, v8, v9))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v14 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      id v15 = v14;
      long long v16 = (objc_class *)objc_opt_class();
      id v17 = NSStringFromClass(v16);
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138543874;
      uint64_t v26 = v17;
      __int16 v27 = 2048;
      uint64_t v28 = v18;
      __int16 v29 = 2048;
      uint64_t v30 = v19;
      _os_log_impl(&dword_18AF10000, v15, OS_LOG_TYPE_INFO, "%{public}@(%p): SELECT COUNT (*) returns: %lld", buf, 0x20u);
    }
  }
  objc_msgSend_resetAndClearBindings(v4, v11, v12, v13);
  id v20 = v10;

  return v20;
}

uint64_t sub_18B025204(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_statementForCountingRowsInTable_(CKSQLiteCompiledStatement, a2, *(void *)(a1 + 32), a4);
}

uint64_t sub_18B025218(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result = objc_msgSend_unsignedLongValue(a4, a2, a3, (uint64_t)a4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_18B02560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B025630(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = 0;
  __int16 v48 = &v47;
  uint64_t v49 = 0x3032000000;
  __int16 v50 = sub_18AF13AC4;
  uint64_t v51 = sub_18AF13830;
  id v52 = 0;
  uint64_t v2 = *(void *)(a1 + 80);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = sub_18B0259CC;
  v42[3] = &unk_1E5460D38;
  id v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v43 = v4;
  uint64_t v44 = v5;
  id v45 = *(id *)(a1 + 64);
  uint64_t v46 = &v47;
  char v7 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v42);
  uint64_t v11 = v7;
  if (!v48[5])
  {
    objc_msgSend_setSearchValues_(v7, v8, *(void *)(a1 + 48), v10);
    uint64_t v13 = objc_msgSend__bindProperties_valueObject_inStatement_includePrimaryKeys_(*(void **)(a1 + 32), v12, *(void *)(a1 + 40), *(void *)(a1 + 56), v11, 0);
    uint64_t v14 = (void *)v48[5];
    v48[5] = v13;

    if (!v48[5])
    {
      id v15 = objc_msgSend_db(*(void **)(a1 + 32), v8, v9, v10);
      long long v16 = (id *)(v48 + 5);
      obunint64_t j = (id)v48[5];
      objc_msgSend_step_(v11, v17, (uint64_t)&obj, v18);
      objc_storeStrong(v16, obj);
      if (!v48[5]) {
        *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = objc_msgSend_changeCount(v15, v19, v20, v21);
      }
    }
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v8, v9, v10))
  {
    uint64_t v25 = objc_opt_class();
    __int16 v27 = objc_msgSend_descriptionOfProperties_from_(v25, v26, *(void *)(a1 + 40), *(void *)(a1 + 56));
    uint64_t v31 = objc_msgSend_searchBindingsDescription(v11, v28, v29, v30);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v32 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = (objc_class *)objc_opt_class();
      NSStringFromClass(v33);
      id v34 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v35 = *(void *)(a1 + 32);
      id v37 = sub_18B01A394(*(uint64_t **)(a1 + 80), v36);
      uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      *(_DWORD *)buf = 138544642;
      id v54 = v34;
      __int16 v55 = 2048;
      uint64_t v56 = v35;
      __int16 v57 = 2114;
      long long v58 = v27;
      __int16 v59 = 2114;
      long long v60 = v31;
      __int16 v61 = 2114;
      uint64_t v62 = v37;
      __int16 v63 = 2048;
      uint64_t v64 = v38;
      _os_log_impl(&dword_18AF10000, v32, OS_LOG_TYPE_INFO, "%{public}@(%p): UPDATE SET (%{public}@) WHERE %{public}@, label: %{public}@, changeCount: %lld", buf, 0x3Eu);
    }
  }
  objc_msgSend_resetAndClearBindings(v11, v22, v23, v24);
  id v39 = (id)v48[5];

  _Block_object_dispose(&v47, 8);

  return v39;
}

void sub_18B02599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B0259CC(uint64_t *a1, const char *a2)
{
  id v3 = objc_msgSend_statementForUpdatingColumns_inTable_(CKSQLiteCompiledStatement, a2, a1[4], a1[5]);
  uint64_t v5 = objc_msgSend_addPredicateToStatement_predicate_((void *)a1[5], v4, (uint64_t)v3, a1[6]);
  if (v5)
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), v5);

    id v3 = 0;
  }

  return v3;
}

void sub_18B025C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B025CB0(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x3032000000;
  id v37 = sub_18AF13AC4;
  uint64_t v38 = sub_18AF13830;
  id v39 = 0;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  _OWORD v31[2] = sub_18B025FC4;
  v31[3] = &unk_1E5460DC8;
  v31[4] = v2;
  id v32 = *(id *)(a1 + 48);
  uint64_t v33 = &v34;
  uint64_t v5 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v2, v4, v3, (uint64_t)v31);
  uint64_t v9 = v5;
  if (!v35[5])
  {
    objc_msgSend_setSearchValues_(v5, v6, *(void *)(a1 + 40), v8);
    uint64_t v10 = (id *)(v35 + 5);
    obunint64_t j = (id)v35[5];
    objc_msgSend_step_(v9, v11, (uint64_t)&obj, v12);
    objc_storeStrong(v10, obj);
    if (!v35[5])
    {
      uint64_t v13 = objc_msgSend_db(*(void **)(a1 + 32), v6, v7, v8);
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = objc_msgSend_changeCount(v13, v14, v15, v16);
    }
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v6, v7, v8))
  {
    uint64_t v20 = objc_msgSend_searchBindingsDescription(v9, v17, v18, v19);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v21 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v22 = (objc_class *)objc_opt_class();
      NSStringFromClass(v22);
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v26 = sub_18B01A394(*(uint64_t **)(a1 + 64), v25);
      uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      *(_DWORD *)buf = 138544386;
      id v41 = v23;
      __int16 v42 = 2048;
      uint64_t v43 = v24;
      __int16 v44 = 2114;
      id v45 = v20;
      __int16 v46 = 2114;
      uint64_t v47 = v26;
      __int16 v48 = 2048;
      uint64_t v49 = v27;
      _os_log_impl(&dword_18AF10000, v21, OS_LOG_TYPE_INFO, "%{public}@(%p): DELETE WHERE %{public}@, label: %{public}@, removed %lld", buf, 0x34u);
    }
  }
  objc_msgSend_resetAndClearBindings(v9, v17, v18, v19);
  id v28 = (id)v35[5];

  _Block_object_dispose(&v34, 8);

  return v28;
}

void sub_18B025F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B025FC4(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_statementForDeletingInTable_(CKSQLiteCompiledStatement, a2, a1[4], a4);
  uint64_t v7 = objc_msgSend_addPredicateToStatement_predicate_((void *)a1[4], v6, (uint64_t)v5, a1[5]);
  if (v7)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v7);

    uint64_t v5 = 0;
  }

  return v5;
}

void sub_18B0262F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B026318(uint64_t *a1)
{
  uint64_t v6 = objc_alloc_init(CKSQLiteTableSearchEnumeratorSetupHelper);
  uint64_t v7 = a1[5];
  if (v7) {
    (*(void (**)(uint64_t, CKSQLiteTableSearchEnumeratorSetupHelper *))(v7 + 16))(v7, v6);
  }
  uint64_t v8 = objc_msgSend_fetchedProperties(v6, v3, v4, v5);
  uint64_t v9 = v8;
  if (v8)
  {
    id v10 = v8;
  }
  else
  {
    uint64_t v11 = objc_opt_class();
    objc_msgSend_allPropertyNames(v11, v12, v13, v14);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v15 = v10;

  id v17 = objc_msgSend_statementForFetchingColumns_inTable_(CKSQLiteCompiledStatement, v16, (uint64_t)v15, a1[4]);
  uint64_t v21 = objc_msgSend_searchPredicate(v6, v18, v19, v20);
  id v23 = v21;
  uint64_t v24 = (void *)a1[4];
  if (v21)
  {
    uint64_t v25 = v30;
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    void v30[2] = sub_18B0264B4;
    uint64_t v30[3] = &unk_1E5460B48;
    uint64_t v1 = &v31;
    id v31 = v21;
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v26 = objc_msgSend_addPredicateToStatement_predicate_(v24, v22, (uint64_t)v17, (uint64_t)v25);
  objc_msgSend_setupStatement_(v6, v27, (uint64_t)v17, v28);
  if (v26)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v26);

    id v17 = 0;
  }
  if (v23) {

  }
  return v17;
}

id sub_18B0264B4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18B0266F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B026714(uint64_t a1)
{
  uint64_t v20 = 0;
  uint64_t v21 = (id *)&v20;
  uint64_t v22 = 0x3032000000;
  id v23 = sub_18AF13AC4;
  uint64_t v24 = sub_18AF13830;
  id v25 = 0;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_18B0268F8;
  v17[3] = &unk_1E5460DC8;
  v17[4] = v2;
  id v18 = *(id *)(a1 + 48);
  uint64_t v19 = &v20;
  uint64_t v5 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v2, v4, v3, (uint64_t)v17);
  uint64_t v9 = v5;
  if (!v21[5])
  {
    objc_msgSend_setSearchValues_(v5, v6, *(void *)(a1 + 40), v8);
    id v10 = v21;
    obunint64_t j = v21[5];
    objc_msgSend_step_(v9, v11, (uint64_t)&obj, v12);
    objc_storeStrong(v10 + 5, obj);
    if (!v21[5])
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      uint64_t v15[2] = sub_18B026984;
      v15[3] = &unk_1E5460B98;
      v15[4] = *(void *)(a1 + 56);
      objc_msgSend_enumerateResultColumnsWithBlock_(v9, v6, (uint64_t)v15, v8);
    }
  }
  objc_msgSend_resetAndClearBindings(v9, v6, v7, v8);
  id v13 = v21[5];

  _Block_object_dispose(&v20, 8);

  return v13;
}

void sub_18B0268E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_18B0268F8(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_statementForCountingRowsInTable_(CKSQLiteCompiledStatement, a2, a1[4], a4);
  uint64_t v7 = objc_msgSend_addPredicateToStatement_predicate_((void *)a1[4], v6, (uint64_t)v5, a1[5]);
  if (v7)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v7);

    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t sub_18B026984(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result = objc_msgSend_unsignedLongValue(a4, a2, a3, (uint64_t)a4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_18B026C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B026C40(uint64_t a1)
{
  uint64_t v24 = 0;
  id v25 = (id *)&v24;
  uint64_t v26 = 0x3032000000;
  uint64_t v27 = sub_18AF13AC4;
  uint64_t v28 = sub_18AF13830;
  id v29 = 0;
  uint64_t v2 = *(void *)(a1 + 72);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_18B026E34;
  v19[3] = &unk_1E5460D38;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v20 = v4;
  uint64_t v21 = v5;
  id v22 = *(id *)(a1 + 56);
  id v23 = &v24;
  uint64_t v7 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v19);
  uint64_t v11 = v7;
  if (!v25[5])
  {
    objc_msgSend_setSearchValues_(v7, v8, *(void *)(a1 + 48), v10);
    uint64_t v12 = v25;
    obunint64_t j = v25[5];
    objc_msgSend_step_(v11, v13, (uint64_t)&obj, v14);
    objc_storeStrong(v12 + 5, obj);
    if (!v25[5])
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = sub_18B026EC0;
      v17[3] = &unk_1E5460B98;
      v17[4] = *(void *)(a1 + 64);
      objc_msgSend_enumerateResultColumnsWithBlock_(v11, v8, (uint64_t)v17, v10);
    }
  }
  objc_msgSend_resetAndClearBindings(v11, v8, v9, v10);
  id v15 = v25[5];

  _Block_object_dispose(&v24, 8);

  return v15;
}

void sub_18B026E1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_18B026E34(uint64_t *a1, const char *a2)
{
  uint64_t v3 = objc_msgSend_statementForSummingColumn_inTable_(CKSQLiteCompiledStatement, a2, a1[4], a1[5]);
  uint64_t v5 = objc_msgSend_addPredicateToStatement_predicate_((void *)a1[5], v4, (uint64_t)v3, a1[6]);
  if (v5)
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), v5);

    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t sub_18B026EC0(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result = objc_msgSend_longValue(a4, a2, a3, (uint64_t)a4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_18B0272A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B0272D4(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x3032000000;
  uint64_t v38 = sub_18AF13AC4;
  id v39 = sub_18AF13830;
  id v40 = 0;
  uint64_t v2 = *(void *)(a1 + 72);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = sub_18B027644;
  uint64_t v30[3] = &unk_1E5460D38;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v31 = v4;
  uint64_t v32 = v5;
  id v33 = *(id *)(a1 + 56);
  uint64_t v34 = &v35;
  uint64_t v7 = objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v30);
  uint64_t v11 = v7;
  if (!v36[5]) {
    objc_msgSend_setSearchValues_(v7, v8, *(void *)(a1 + 48), v10);
  }
  while (1)
  {
    uint64_t v12 = (id *)(v36 + 5);
    if (v36[5]) {
      break;
    }
    obunint64_t j = 0;
    int v13 = objc_msgSend_step_(v11, v8, (uint64_t)&obj, v10);
    objc_storeStrong(v12, obj);
    if (!v13) {
      break;
    }
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = sub_18B0276D0;
    v28[3] = &unk_1E5460B98;
    v28[4] = *(void *)(a1 + 64);
    objc_msgSend_enumerateResultColumnsWithBlock_(v11, v8, (uint64_t)v28, v10);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v8, v9, v10))
  {
    id v17 = objc_msgSend_searchBindingsDescription(v11, v14, v15, v16);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v18 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      uint64_t v24 = sub_18B01A394(*(uint64_t **)(a1 + 72), v23);
      uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      *(_DWORD *)buf = 138544642;
      id v42 = v20;
      __int16 v43 = 2048;
      uint64_t v44 = v22;
      __int16 v45 = 2114;
      uint64_t v46 = v21;
      __int16 v47 = 2114;
      __int16 v48 = v17;
      __int16 v49 = 2114;
      uint64_t v50 = v24;
      __int16 v51 = 2048;
      uint64_t v52 = v25;
      _os_log_impl(&dword_18AF10000, v18, OS_LOG_TYPE_INFO, "%{public}@(%p): SELECT LENGTH (%{public}@) WHERE %{public}@, label: %{public}@, size: %lld", buf, 0x3Eu);
    }
  }
  objc_msgSend_resetAndClearBindings(v11, v14, v15, v16);
  id v26 = (id)v36[5];

  _Block_object_dispose(&v35, 8);

  return v26;
}

void sub_18B027618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B027644(uint64_t *a1, const char *a2)
{
  uint64_t v3 = objc_msgSend_statementForSizingColumn_inTable_(CKSQLiteCompiledStatement, a2, a1[4], a1[5]);
  uint64_t v5 = objc_msgSend_addPredicateToStatement_predicate_((void *)a1[5], v4, (uint64_t)v3, a1[6]);
  if (v5)
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), v5);

    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t sub_18B0276D0(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result = objc_msgSend_longValue(a4, a2, a3, (uint64_t)a4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

SEL sub_18B027848(objc_class *a1, const char *a2)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  Property = class_getProperty(a1, a2);
  id v4 = property_copyAttributeValue(Property, "S");
  if (v4)
  {
    uint64_t v5 = v4;
    SEL v6 = sel_registerName(v4);
    free(v5);
    return v6;
  }
  else
  {
    size_t v8 = strlen(a2);
    size_t v12 = v8;
    size_t v13 = v8 + 3;
    size_t v14 = v8 + 5;
    if (v8 + 5 >= 0x40)
    {
      uint64_t v16 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10, v11);
      uint64_t v19 = objc_msgSend_stringWithUTF8String_(NSString, v17, (uint64_t)"SEL setterForProperty(__unsafe_unretained Class, const char *)", v18);
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v16, v20, (uint64_t)v19, @"CKSQLiteTable.m", 51, @"property name too long: %s", a2);
    }
    MEMORY[0x1F4188790](v8);
    uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_WORD *)uint64_t v15 = 25971;
    uint64_t v15[2] = 116;
    memcpy(v15 + 3, a2, v12);
    v15[3] = __toupper(v15[3]);
    v15[v13] = 58;
    v15[v12 + 4] = 0;
    return sel_registerName(v15);
  }
}

BOOL sub_18B0279EC()
{
  BOOL result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

BOOL CKDPSiteIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 8;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x230], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void *sub_18B028324(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 520) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B028504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B02851C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0286A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x230], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B028888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0288A0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B028A2C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B028C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B028C24(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B02B16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B02B18C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  id v24 = 0;
  uint64_t v19 = MEMORY[0x1E4F143A8];
  uint64_t v20 = 3221225472;
  uint64_t v21 = sub_18B02B298;
  uint64_t v22 = &unk_1E54608B0;
  id v23 = *(id *)(a1 + 48);
  uint64_t v6 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v2, v5, v3, v4, &v24, &v19);
  id v7 = v24;
  uint64_t v11 = objc_msgSend_allObjects(v6, v8, v9, v10, v19, v20, v21, v22);
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  char v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  uint64_t v17 = objc_msgSend_error(v6, v14, v15, v16);

  return v17;
}

void sub_18B02B298(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v4 = CKSQLiteTOCTableEntryGroupIDPropertyName;
  id v12 = a2;
  id v7 = objc_msgSend_predicateWithFormat_(v3, v5, @"%@ = $ID", v6, v4);
  objc_msgSend_setSearchPredicate_(v12, v8, (uint64_t)v7, v9);

  objc_msgSend_setFetchedProperties_(v12, v10, *(void *)(a1 + 32), v11);
}

void sub_18B02B5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B02B5EC(void *a1, const char *a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v18 = 0;
  uint64_t v5 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v3, a2, v4, (uint64_t)off_1E5460E90, &v18, &unk_1ED7EEED8);
  id v6 = v18;
  uint64_t v10 = objc_msgSend_nextObject(v5, v7, v8, v9);
  uint64_t v11 = *(void *)(a1[6] + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  uint64_t v16 = objc_msgSend_error(v5, v13, v14, v15);

  return v16;
}

void sub_18B02B6A0(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v3 = CKSQLiteTOCTableEntryGroupIDPropertyName;
  id v4 = a2;
  objc_msgSend_predicateWithFormat_(v2, v5, @"%@ = $ID AND %@ = $NAME", v6, v3, @"logicalTableName");
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v4, v7, (uint64_t)v9, v8);
}

id sub_18B02B99C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v20.id receiver = *(id *)(a1 + 40);
  v20.Class super_class = (Class)CKSQLiteTOCTableGroupTable;
  id v4 = objc_msgSendSuper2(&v20, sel_deleteObject_, v2);
  if (!v4)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    id v19 = 0;
    uint64_t v6 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v5, v3, 0, (uint64_t)off_1E5460F08, &v19, &unk_1ED7F52F8);
    unint64_t v7 = (unint64_t)v19;
    uint64_t v11 = objc_msgSend_nextObject(v6, v8, v9, v10);
    if (v11 | v7)
    {
    }
    else
    {
      uint64_t v15 = objc_msgSend_error(v6, v12, v13, v14);

      if (!v15) {
        objc_msgSend_setIsEmpty_(*(void **)(*(void *)(a1 + 40) + 104), v16, 1, v17);
      }
    }
  }

  return v4;
}

void sub_18B02BAA0(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v3 = CKSQLiteTOCTableGroupTableGroupIDPropertyName;
  id v11 = a2;
  uint64_t v6 = objc_msgSend_predicateWithFormat_(v2, v4, @"%@ > 1", v5, v3);
  objc_msgSend_setSearchPredicate_(v11, v7, (uint64_t)v6, v8);

  objc_msgSend_setLimit_(v11, v9, (uint64_t)&unk_1ED8461F8, v10);
}

void sub_18B02C184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B02C19C(uint64_t a1, const char *a2)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v25 = @"CLASS";
  v26[0] = v3;
  id v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v26, (uint64_t)&v25, 1);
  uint64_t v6 = objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(a1 + 40), v5, (uint64_t)v4, (uint64_t)off_1E5460F80, 0, &unk_1ED7EF998);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v20, (uint64_t)v24, 16);
  if (v8)
  {
    uint64_t v12 = v8;
    uint64_t v13 = *(void *)v21;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v6);
        }
        uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        uint64_t v16 = objc_msgSend_name(*(void **)(*((void *)&v20 + 1) + 8 * v14), v9, v10, v11);
        objc_msgSend_addObject_(v15, v17, (uint64_t)v16, v18);

        ++v14;
      }
      while (v12 != v14);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v20, (uint64_t)v24, 16);
    }
    while (v12);
  }

  return 0;
}

void sub_18B02C314(uint64_t a1, void *a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  v13[0] = CKSQLiteTOCTableGroupTableGroupNamePropertyName;
  uint64_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  uint64_t v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)v13, 1);
  objc_msgSend_setFetchedProperties_(v3, v6, (uint64_t)v5, v7);

  uint64_t v10 = objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v8, @"%@ = $CLASS", v9, CKSQLiteTOCTableEntryCreatingClassName);
  objc_msgSend_setSearchPredicate_(v3, v11, (uint64_t)v10, v12);
}

uint64_t sub_18B02C7FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_executeSQL_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
}

uint64_t sub_18B02C808(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_executeSQL_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
}

uint64_t sub_18B02CCEC(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_shouldReadAssetContentUsingClientProxy(a3, a2, (uint64_t)a3, a4);
}

__CFString *CKStringFromServerEnvironment(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5461958[a1];
  }
}

uint64_t CKServerEnvironmentFromString(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_lowercaseString(a1, a2, a3, a4);
  if (objc_msgSend_hasPrefix_(v4, v5, @"icloud", v6))
  {
    uint64_t v8 = objc_msgSend_substringWithRange_(v4, v7, 6, 1);
    uint64_t v12 = objc_msgSend_integerValue(v8, v9, v10, v11);
    if ((unint64_t)(v12 - 1) >= 3) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v12;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

__CFString *CKStringFromCKMMCSEncryptionSupport(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unknown";
  }
  else {
    return off_1E5461978[a1 - 1];
  }
}

__CFString *CKStringFromAccountChangeType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"Unknown";
  }
  else {
    return off_1E5461990[a1 - 1];
  }
}

__CFString *CKStringFromApplicationPermissionStatus(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown status";
  }
  else {
    return off_1E54619E0[a1];
  }
}

__CFString *CKStringFromDeviceCount(uint64_t a1)
{
  uint64_t v1 = @"Unknown";
  if (a1 == 1) {
    uint64_t v1 = @"Single";
  }
  if (a1 == 2) {
    return @"Multiple";
  }
  else {
    return v1;
  }
}

id CKAccountChangedNotificationName()
{
  return CKPrefixedNotificationName(@"CKAccountChangedNotification");
}

uint64_t sub_18B02D158(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_invalidateCachedAccountInfo(CKAccountInfo, a2, a3, a4);
}

void sub_18B02E208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18B02E248(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_18AF10000, "CKStatusReport", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v2, &state);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v25 = WeakRetained;
      _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Building status report for %@", buf, 0xCu);
    }
    uint64_t v5 = (id *)WeakRetained;
    objc_sync_enter(v5);
    uint64_t v6 = sub_18B064878(v5);
    sub_18B02E4EC(v6);

    uint64_t v7 = sub_18B064878(v5[8]);
    sub_18B02E4EC(v7);

    uint64_t v8 = sub_18B064878(v5[9]);
    sub_18B02E4EC(v8);

    uint64_t v9 = sub_18B064878(v5[10]);
    sub_18B02E4EC(v9);

    uint64_t v10 = sub_18B064878(v5[11]);
    sub_18B02E4EC(v10);

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v11 = v5[18];
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v18, (uint64_t)v23, 16);
    if (v13)
    {
      uint64_t v14 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v19 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = sub_18B064878(*(id *)(*((void *)&v18 + 1) + 8 * i));
          sub_18B02E4EC(v16);
        }
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v17, (uint64_t)&v18, (uint64_t)v23, 16);
      }
      while (v13);
    }

    objc_sync_exit(v5);
  }

  os_activity_scope_leave(&state);
}

void sub_18B02E4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  objc_sync_exit(v17);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18B02E4EC(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v3 = 138543362;
      id v4 = v1;
      _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Status report from notification: %{public}@", (uint8_t *)&v3, 0xCu);
    }
  }
}

void sub_18B02E71C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B02E88C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B02E9FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B02EA1C(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v68 = v9;
  if (a1)
  {
    if (v9)
    {
      id v11 = objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(MEMORY[0x1E4F29088], v10, (uint64_t)v9, 0);
      objc_msgSend_applyDefaultParametersToServiceURLComponents_(CKCodeFunctionInvokeOperationInfo, v12, (uint64_t)v11, v13);
      uint64_t v70 = objc_msgSend_URL(v11, v14, v15, v16);
    }
    else
    {
      uint64_t v70 = 0;
    }
    id v18 = a1;
    objc_sync_enter(v18);
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    uint64_t v69 = (void **)v18;
    long long v22 = objc_msgSend_codeServiceImplementations(v18, v19, v20, v21);
    uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v71, (uint64_t)v81, 16);
    if (v27)
    {
      uint64_t v28 = *(void *)v72;
LABEL_8:
      uint64_t v29 = 0;
      while (1)
      {
        if (*(void *)v72 != v28) {
          objc_enumerationMutation(v22);
        }
        uint64_t v30 = *(void **)(*((void *)&v71 + 1) + 8 * v29);
        id v31 = objc_msgSend_serviceName(v30, v24, v25, v26);
        char isEqualToString = objc_msgSend_isEqualToString_(v31, v32, (uint64_t)v7, v33);

        if (isEqualToString)
        {
          objc_msgSend_boxedDatabaseScope(v30, v24, v25, v26);
          id v38 = (id)objc_claimAutoreleasedReturnValue();
          if (v38 == v8)
          {

LABEL_16:
            uint64_t v46 = objc_msgSend_serviceInstanceURL(v30, v24, v25, v26);
            if (v46 == v70)
            {

LABEL_28:
              id inited = v30;

              __int16 v57 = v69;
              goto LABEL_29;
            }
            __int16 v47 = objc_msgSend_serviceInstanceURL(v30, v43, v44, v45);
            char isEqual = objc_msgSend_isEqual_(v47, v48, (uint64_t)v70, v49);

            if (isEqual) {
              goto LABEL_28;
            }
            goto LABEL_18;
          }
          id v39 = objc_msgSend_boxedDatabaseScope(v30, v35, v36, v37);
          int v42 = objc_msgSend_isEqual_(v39, v40, (uint64_t)v8, v41);

          if (v42) {
            goto LABEL_16;
          }
        }
LABEL_18:
        if (v27 == ++v29)
        {
          uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v24, (uint64_t)&v71, (uint64_t)v81, 16);
          if (v27) {
            goto LABEL_8;
          }
          break;
        }
      }
    }

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    __int16 v51 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      int v63 = objc_msgSend_intValue(v8, v52, v53, v54);
      uint64_t v67 = objc_msgSend_containerID(v69, v64, v65, v66);
      *(_DWORD *)buf = 138412802;
      id v76 = v7;
      __int16 v77 = 1024;
      int v78 = v63;
      __int16 v79 = 2112;
      __int16 v80 = v67;
      _os_log_debug_impl(&dword_18AF10000, v51, OS_LOG_TYPE_DEBUG, "Creating code service implementation for serviceName %@ (scope: %d) in container %@", buf, 0x1Cu);
    }
    if (!v69[18])
    {
      uint64_t v55 = objc_opt_new();
      uint64_t v56 = v69[18];
      v69[18] = (void *)v55;
    }
    __int16 v57 = v69;
    long long v58 = [CKCodeServiceImplementation alloc];
    id inited = (id)objc_msgSend_initInternalWithContainerImplementation_serviceName_boxedDatabaseScope_serviceInstanceURL_(v58, v59, (uint64_t)v69, (uint64_t)v7, v8, v70);
    objc_msgSend_addObject_(v69[18], v60, (uint64_t)inited, v61);
LABEL_29:
    objc_sync_exit(v57);
  }
  else
  {
    id inited = 0;
  }

  return inited;
}

void sub_18B02EE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

BOOL sub_18B02F1E0()
{
  BOOL result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

void sub_18B02F204(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained || !objc_msgSend_CKIsXPCConnectionError(v3, v4, v5, v6)) {
    goto LABEL_16;
  }
  sub_18B02F410((uint64_t)WeakRetained, v8, v9, v10);
  if (!*(void *)(a1 + 64)
    || (uint64_t v11 = *(void *)(a1 + 32)) != 0 && !(*(unsigned int (**)(uint64_t, id))(v11 + 16))(v11, v3))
  {
    if (!*(void *)(a1 + 40)) {
      goto LABEL_17;
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v13 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 138412546;
      id v15 = WeakRetained;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_debug_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEBUG, "Exhausted automatic retries getting container proxy, failing with error for %@: %@", (uint8_t *)&v14, 0x16u);
    }
LABEL_16:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_17;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v12 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412546;
    id v15 = WeakRetained;
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl(&dword_18AF10000, v12, OS_LOG_TYPE_INFO, "Automatically retrying getting container proxy due to error for %@: %@", (uint8_t *)&v14, 0x16u);
  }
  sub_18AF3C510(WeakRetained, *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 64) - 1, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
LABEL_17:
}

void sub_18B02F410(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  objc_msgSend_lock(*(void **)(a1 + 240), a2, a3, a4);
  char v5 = *(unsigned char *)(a1 + 58);
  *(unsigned char *)(a1 + 5_Block_object_dispose(&STACK[0x230], 8) = 0;
  objc_msgSend_unlock(*(void **)(a1 + 240), v6, v7, v8);
  if (v5)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v21 = 138412290;
      uint64_t v22 = a1;
      _os_log_impl(&dword_18AF10000, v9, OS_LOG_TYPE_INFO, "Warn: Connection became invalid: %@", (uint8_t *)&v21, 0xCu);
    }
    uint64_t v13 = objc_msgSend_deviceContext((void *)a1, v10, v11, v12);
    id v17 = objc_msgSend_deviceScopedStateManager(v13, v14, v15, v16);
    objc_msgSend_resetThrottles(v17, v18, v19, v20);
  }
}

void sub_18B02F528(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = WeakRetained;
      _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted for %@", (uint8_t *)&v6, 0xCu);
    }
    sub_18B02F410((uint64_t)WeakRetained, v3, v4, v5);
  }
}

void sub_18B02F614(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v10 = a3;
  if (v6)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      objc_msgSend_lock(*(void **)(v11 + 240), v7, v8, v9);
    }
    else {
      objc_msgSend_lock(0, v7, v8, v9);
    }
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12)
    {
      id v13 = *(id *)(v12 + 208);
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 32);
        if (v14)
        {
          char v15 = *(unsigned char *)(v14 + 58);

          if (v15)
          {
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            }
            uint64_t v25 = ck_log_facility_ck;
            if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
            {
              uint64_t v26 = *(void *)(a1 + 32);
              int v30 = 138412546;
              uint64_t v31 = v26;
              __int16 v32 = 2112;
              id v33 = v6;
              _os_log_impl(&dword_18AF10000, v25, OS_LOG_TYPE_INFO, "Ignoring superfluous container proxy for %@: %@", (uint8_t *)&v30, 0x16u);
            }
            uint64_t v27 = *(void **)(a1 + 32);
            if (v27) {
              uint64_t v27 = (void *)v27[26];
            }
            uint64_t v28 = v27;

            id v6 = v28;
            goto LABEL_27;
          }
        }
        else
        {
        }
      }
      uint64_t v16 = *(void *)(a1 + 32);
      if (v16)
      {
        objc_storeStrong((id *)(v16 + 208), a2);
        uint64_t v17 = *(void *)(a1 + 32);
        if (v17) {
          *(unsigned char *)(v17 + 5_Block_object_dispose(&STACK[0x230], 8) = 1;
        }
      }
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v18 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      int v30 = 138412546;
      uint64_t v31 = v22;
      __int16 v32 = 2112;
      id v33 = v6;
      _os_log_impl(&dword_18AF10000, v18, OS_LOG_TYPE_INFO, "Got a container proxy for %@: %@", (uint8_t *)&v30, 0x16u);
    }
LABEL_27:
    uint64_t v29 = *(void *)(a1 + 32);
    if (v29) {
      objc_msgSend_unlock(*(void **)(v29 + 240), v19, v20, v21);
    }
    else {
      objc_msgSend_unlock(0, v19, v20, v21);
    }
    goto LABEL_29;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v23 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    uint64_t v24 = *(void *)(a1 + 32);
    int v30 = 138412546;
    uint64_t v31 = v24;
    __int16 v32 = 2112;
    id v33 = v10;
    _os_log_impl(&dword_18AF10000, v23, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get container proxy for %@: %@", (uint8_t *)&v30, 0x16u);
  }
  id v6 = 0;
LABEL_29:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18B02FBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18B02FBFC(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    id v4 = WeakRetained;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Warn: Discretionary connection was interrupted: %@", (uint8_t *)&v3, 0xCu);
  }
}

void sub_18B02FCDC(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      id v10 = WeakRetained;
      _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Warn: Connection became invalid: %@", (uint8_t *)&v9, 0xCu);
    }
    objc_msgSend_lock(WeakRetained[30], v3, v4, v5);
    *((unsigned char *)WeakRetained + 59) = 0;
    objc_msgSend_unlock(WeakRetained[30], v6, v7, v8);
  }
}

uint64_t sub_18B02FDD4()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F179C8]);
  uint64_t v1 = qword_1EB279AB0;
  qword_1EB279AB0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_18B02FFD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0302B4(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0302C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B030340(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B0303D0;
  v5[3] = &unk_1E5461100;
  uint64_t v3 = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_statusGroupsForApplicationPermission_completionHandler_(a2, v4, v3, (uint64_t)v5);
}

void sub_18B0303D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);
}

void sub_18B0305AC(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18B0305C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, 1, v5);
  }
}

void sub_18B030638(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  long long v6[2] = sub_18B0306D8;
  v6[3] = &unk_1E5461150;
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  objc_msgSend_setApplicationPermission_enabled_completionHandler_(a2, v5, v4, v3, v6);
}

void sub_18B0306D8(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, const char *, id))(v4 + 16))(v4, a2, v6);
  }
}

void sub_18B03089C(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0308B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_18B030924(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B0309B0;
  v5[3] = &unk_1E54610D8;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_resetAllApplicationPermissionsWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B0309B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_18B030B6C(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B030B80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_18B030BF4(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B030C80;
  v5[3] = &unk_1E54610D8;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_tossConfigWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B030C80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_18B031050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, os_activity_scope_state_s state)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18B031080(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_error_impl(&dword_18AF10000, v7, OS_LOG_TYPE_ERROR, "Failed to fetch server preferred push environment: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v8 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 138543362;
      id v13 = v5;
      _os_log_debug_impl(&dword_18AF10000, v8, OS_LOG_TYPE_DEBUG, "Successfully fetched server preferred push environment: %{public}@", (uint8_t *)&v12, 0xCu);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_setPushEnvironment_(WeakRetained, v10, (uint64_t)v5, v11);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B0314BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18B0314E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v11 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
}

void sub_18B0316B4(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0316C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B031740(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B0317CC;
  v5[3] = &unk_1E5461218;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_serverPreferredPushEnvironmentWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B0317CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);
}

void sub_18B0319B8(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0319CC(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "IRONY. Errored out talking to daemon while trying to set a fake error for class name %{public}@, check your syslog", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t sub_18B031ABC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setFakeError_forNextRequestOfClassName_completionHandler_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B031C78(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18B031C8C(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "IRONY. Errored out talking to daemon while trying to set a fake operation result for class name %{public}@, check your syslog", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t sub_18B031D7C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_setFakeResponseOperationResult_forNextRequestOfClassName_forItemID_withLifetime_completionHandler_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B031EE4(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B031EF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B031F70(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B031FFC;
  v5[3] = &unk_1E5461290;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_getOutstandingOperationCountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B031FFC(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, const char *, id))(v5 + 16))(v5, a2, v6);
}

void sub_18B0321AC(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0321C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B032238(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B0322C4;
  v5[3] = &unk_1E5461290;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_getRegisteredItemCountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B0322C4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, const char *, id))(v5 + 16))(v5, a2, v6);
}

void sub_18B032474(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B032488(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_18B0324FC(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B032588;
  v5[3] = &unk_1E54610D8;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_dropDetachedContainersWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B032588(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void sub_18B03267C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  if (a2)
  {
    id v5 = a2;
    id v6 = [CKSignatureGenerator alloc];
    a2 = objc_msgSend_initWithBoundaryKey_(v6, v7, (uint64_t)v5, v8);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B0328D4(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0328E8(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 138412290;
    id v11 = v3;
    _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Error fetching boundary key: %@", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    id v9 = objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
}

void sub_18B032A08(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B032A94;
  v5[3] = &unk_1E54612B8;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_globalPerUserBoundaryKeyWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B032A94(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v7 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    id v13 = NSString;
    uint64_t v14 = v7;
    uint64_t v18 = objc_msgSend_length(v5, v15, v16, v17);
    uint64_t v21 = objc_msgSend_stringWithFormat_(v13, v19, @"<%lu bytes>", v20, v18);
    uint64_t v22 = @". Error was ";
    uint64_t v23 = &stru_1ED7F5C98;
    *(_DWORD *)buf = 138543874;
    uint64_t v25 = v21;
    if (v6) {
      uint64_t v23 = v6;
    }
    else {
      uint64_t v22 = &stru_1ED7F5C98;
    }
    __int16 v26 = 2114;
    uint64_t v27 = v22;
    __int16 v28 = 2112;
    uint64_t v29 = v23;
    _os_log_debug_impl(&dword_18AF10000, v14, OS_LOG_TYPE_DEBUG, "Boundary key is %{public}@%{public}@%@", buf, 0x20u);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11)
  {
    uint64_t v12 = objc_msgSend_CKClientSuitableError(v6, v8, v9, v10);
    (*(void (**)(uint64_t, id, void *))(v11 + 16))(v11, v5, v12);
  }
}

void sub_18B032D84(_Unwind_Exception *exception_object)
{
}

void sub_18B032EB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B032FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B032FCC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing metadata cache, check your syslog", v4, 2u);
  }
}

uint64_t sub_18B033074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_clearContainerFromMetadataCache, a3, a4);
}

void sub_18B033174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B033188(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing PILS cache, check your syslog", v4, 2u);
  }
}

uint64_t sub_18B033230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_clearPILSCacheForLookupInfos_, *(void *)(a1 + 32), a4);
}

void sub_18B033384(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B033398(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while requesting dataclass status from account, check your syslog", v10, 2u);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
}

void sub_18B033480(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B03350C;
  v5[3] = &unk_1E5461328;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_representativeDataclassEnabledWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B03350C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, const char *, id))(v5 + 16))(v5, a2, v6);
}

void sub_18B0336BC(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0336D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, -1, v5);
  }
}

void sub_18B033748(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B0337D4;
  v5[3] = &unk_1E5461150;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_serverEnvironmentWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B0337D4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, const char *, id))(v5 + 16))(v5, a2, v6);
}

void sub_18B033984(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B033998(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B033A10(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B033A9C;
  v5[3] = &unk_1E5461218;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_currentDeviceIDWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B033A9C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);
}

void sub_18B033C60(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B033C74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, void, id))(v4 + 16))(v4, 0, 0, v5);
  }
}

void sub_18B033CF0(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B033D7C;
  v5[3] = &unk_1E5461350;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_displayInfoOnAccountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B033D7C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v8 = a3;
    id v9 = a2;
    objc_msgSend_CKClientSuitableError(a5, v10, v11, v12);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, v9, v8, v13);
  }
}

void sub_18B033F6C(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B033F80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, void, id))(v4 + 16))(v4, 0, 0, v5);
  }
}

void sub_18B033FFC(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B034088;
  v5[3] = &unk_1E5461350;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_displayInfoOnAccountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B034088(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v8 = a4;
    id v9 = a2;
    objc_msgSend_CKClientSuitableError(a5, v10, v11, v12);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, v9, v8, v13);
  }
}

void sub_18B03423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B034380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B034628(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v4 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = v4;
      uint64_t v11 = objc_msgSend_metricUUID(v6, v8, v9, v10);
      int v12 = 138543618;
      id v13 = v11;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_error_impl(&dword_18AF10000, v7, OS_LOG_TYPE_ERROR, "Error reaching cloudd to submit CKEventMetric %{public}@: %@", (uint8_t *)&v12, 0x16u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_18B03475C(void *a1, void *a2)
{
  id v3 = (void *)a1[6];
  BOOL v4 = v3 == 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_18B034808;
  v7[3] = &unk_1E5460058;
  uint64_t v5 = a1[4];
  void v7[4] = a1[5];
  id v8 = v3;
  objc_msgSend_submitClientEventMetric_completeWhenQueued_completionHandler_(a2, v6, v5, v4, v7);
}

uint64_t sub_18B034808(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_18B034994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0349AC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error retrieving daemon to get device count: %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_18B034A8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B034B00;
  v5[3] = &unk_1E54613C8;
  void v5[4] = *(void *)(a1 + 32);
  return objc_msgSend_lastKnownDeviceCountWithCompletionHandler_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18B034B00(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  int v4 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    id v5 = @"Unknown";
    if (a2 == 1) {
      id v5 = @"Single";
    }
    if (a2 == 2) {
      id v5 = @"Multiple";
    }
    uint64_t v6 = v5;
    int v8 = 138412290;
    uint64_t v9 = v6;
    uint64_t v7 = v4;
    _os_log_debug_impl(&dword_18AF10000, v7, OS_LOG_TYPE_DEBUG, "Received device count %@", (uint8_t *)&v8, 0xCu);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
}

void sub_18B034EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18B034EE0(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  int v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error retrieving daemon to get network transfer endpoint: %@", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
}

uint64_t sub_18B034FDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B035050;
  v5[3] = &unk_1E5461440;
  long long v6 = *(_OWORD *)(a1 + 32);
  return objc_msgSend_networkTransferEndpointWithCompletionHandler_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18B035050(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v17;
      _os_log_error_impl(&dword_18AF10000, v7, OS_LOG_TYPE_ERROR, "Error getting network transfer endpoint: %@", buf, 0xCu);
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    id v9 = v6;
    uint64_t v10 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v9;
    goto LABEL_16;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v11 = ck_log_facility_ck;
  if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    if (v5) {
      goto LABEL_11;
    }
LABEL_14:
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v12, @"CKInternalErrorDomain", 1000, @"No endpoint dictionary received from daemon");
    goto LABEL_15;
  }
  uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  *(_DWORD *)buf = 138412290;
  uint64_t v22 = v18;
  _os_log_debug_impl(&dword_18AF10000, v11, OS_LOG_TYPE_DEBUG, "Received network transfer endpoint: %@", buf, 0xCu);
  if (!v5) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v13 = nw_endpoint_create_from_dictionary();
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v16, @"CKInternalErrorDomain", 1000, @"Failed to convert endpoint dictionary: %@", v5);
    uint64_t v19 = LABEL_15:;
    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v10 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;
LABEL_16:
  }
}

void sub_18B035528(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B0355A0(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B03562C;
  v5[3] = &unk_1E5461218;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_frameworkCachesDirectoryWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B03562C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a2;
    objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v9);
  }
}

void sub_18B035C08(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B035C1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void sub_18B035C7C(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B035D0C;
  v5[3] = &unk_1E54610D8;
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_msgSend_dumpDaemonStatusReportToFileHandle_completionHandler_(a2, v4, v3, (uint64_t)v5);
}

void sub_18B035D0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

id sub_18B035DF8()
{
  self;
  uint64_t v3 = objc_msgSend_sharedManager(CKProcessScopedStateManager, v0, v1, v2);
  uint64_t v7 = objc_msgSend_untrustedEntitlements(v3, v4, v5, v6);
  uint64_t v11 = objc_msgSend_associatedApplicationBundleID(v7, v8, v9, v10);

  if (!v11)
  {
    id v15 = objc_msgSend_sharedManager(CKProcessScopedStateManager, v12, v13, v14);
    uint64_t v19 = objc_msgSend_untrustedEntitlements(v15, v16, v17, v18);
    uint64_t v11 = objc_msgSend_applicationBundleID(v19, v20, v21, v22);
  }

  return v11;
}

void sub_18B0361AC(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Failed to simulate memory pressure with error: %@", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

void sub_18B0362B0(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B036340;
  v5[3] = &unk_1E54610D8;
  uint64_t v3 = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_handleMemoryPressure_completionHandler_(a2, v4, v3, (uint64_t)v5);
}

void sub_18B036340(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Failed to simulate memory pressure with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v5 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v7) = 0;
      _os_log_debug_impl(&dword_18AF10000, v5, OS_LOG_TYPE_DEBUG, "Successfully simulated memory pressure", (uint8_t *)&v7, 2u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_18B0364E4(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9())
  {
    uint64_t v6 = objc_msgSend_CKClientSuitableError(v9, v3, v4, v5);

    int v7 = (void *)v6;
  }
  else
  {
    int v7 = v9;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    id v10 = v7;
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
    int v7 = v10;
  }
}

void sub_18B0365F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_18B036788(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

uint64_t sub_18B036794(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, *(void *)(a1 + 32), a2);
  }
  return result;
}

void sub_18B0367B8(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    uint64_t v13 = [CKDiscoverUserIdentitiesOperation alloc];
    v34[0] = v9;
    id v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v14, (uint64_t)v34, 1);
    uint64_t v18 = objc_msgSend_initWithUserIdentityLookupInfos_(v13, v16, (uint64_t)v15, v17);

    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x3032000000;
    v32[3] = sub_18AF13B10;
    v32[4] = sub_18AF13848;
    id v33 = 0;
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    _OWORD v31[2] = sub_18B0369F4;
    v31[3] = &unk_1E54615A8;
    v31[4] = v32;
    objc_msgSend_setUserIdentityDiscoveredBlock_(v18, v19, (uint64_t)v31, v20);
    uint64_t v24 = MEMORY[0x1E4F143A8];
    uint64_t v25 = 3221225472;
    __int16 v26 = sub_18B036A04;
    uint64_t v27 = &unk_1E54615D0;
    id v29 = v12;
    uint64_t v30 = v32;
    id v28 = v9;
    objc_msgSend_setDiscoverUserIdentitiesCompletionBlock_(v18, v21, (uint64_t)&v24, v22);
    objc_msgSend__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_(a1, v23, (uint64_t)v18, (uint64_t)v10, v11, v24, v25, v26, v27);

    _Block_object_dispose(v32, 8);
  }
}

void sub_18B0369D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0369F4(uint64_t a1, void *a2)
{
}

void sub_18B036A04(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1[6] + 8) + 40);
    uint64_t v4 = (void *)a1[4];
    id v5 = a2;
    objc_msgSend_lookupValue(v4, v6, v7, v8);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = objc_msgSend_CKItemErrorForID_(v5, v9, (uint64_t)v12, v10);

    (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v11);
  }
}

void sub_18B036F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B036F30(uint64_t a1, int a2, id obj)
{
}

void sub_18B036F44(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[5];
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a1[6] + 8) + 40);
    objc_msgSend_CKItemErrorForID_(a2, (const char *)a2, a1[4], a4);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, v5, v6);
  }
}

void sub_18B037660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B037680(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  if (objc_msgSend_isEqual_(a2, v6, *(void *)(a1 + 32), v7)) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
}

void sub_18B0376F8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[5];
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a1[6] + 8) + 40);
    objc_msgSend_CKItemErrorForID_(a2, (const char *)a2, a1[4], a4);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, v5, v6);
  }
}

void sub_18B037A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B037A74(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  if (objc_msgSend_isEqual_(*(void **)(a1 + 32), v6, a2, v7)) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
}

void sub_18B037AEC(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1[6] + 8) + 40);
    uint64_t v4 = (void *)a1[4];
    id v5 = a2;
    objc_msgSend_share(v4, v6, v7, v8);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    id v12 = objc_msgSend_URL(v16, v9, v10, v11);
    id v15 = objc_msgSend_CKItemErrorForID_(v5, v13, (uint64_t)v12, v14);

    (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v15);
  }
}

void sub_18B037D30(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B037D44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B037DBC(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B037E4C;
  v5[3] = &unk_1E5461670;
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_msgSend_decryptPersonalInfoOnShare_completionHandler_(a2, v4, v3, (uint64_t)v5);
}

void sub_18B037E4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);
}

void sub_18B038010(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B038024(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B03809C(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B038128;
  v5[3] = &unk_1E54612B8;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_getNewWebSharingIdentityDataWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B038128(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);
}

void sub_18B0381A4()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.cloudkit.accountInfoFetchQueue.bypassesPCS", v2);
  uint64_t v1 = (void *)qword_1EB279AA0;
  qword_1EB279AA0 = (uint64_t)v0;
}

void sub_18B0382F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B03830C(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void **)(a1 + 32);
    uint64_t v23 = v2;
    uint64_t v27 = objc_msgSend_containerID(v22, v24, v25, v26);
    *(_DWORD *)buf = 138412290;
    uint64_t v35 = v27;
    _os_log_debug_impl(&dword_18AF10000, v23, OS_LOG_TYPE_DEBUG, "Checking account access authorization for container %@", buf, 0xCu);
  }
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    id v5 = *(void **)(v4 + 256);
  }
  else {
    id v5 = 0;
  }
  objc_sync_exit(v3);

  id v33 = 0;
  if (objc_msgSend___preflightAccountAccessAuthorization_(*(void **)(a1 + 32), v6, (uint64_t)&v33, v7))
  {
    uint64_t v8 = v33;
    if (v33 != v5)
    {
      id v9 = *(id *)(a1 + 32);
      objc_sync_enter(v9);
      uint64_t v10 = *(void *)(a1 + 32);
      if (v10) {
        *(void *)(v10 + 256) = v33;
      }
      objc_sync_exit(v9);

      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v11 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = (uint64_t)v33;
        uint64_t v13 = v11;
        uint64_t v14 = CKTernaryDescription(v12);
        id v15 = CKTernaryDescription((uint64_t)v5);
        *(_DWORD *)buf = 138412546;
        uint64_t v35 = v14;
        __int16 v36 = 2112;
        uint64_t v37 = v15;
        _os_log_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEFAULT, "In-process account access authorization check returned: %@, previously: %@", buf, 0x16u);
      }
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      (*(void (**)(uint64_t, BOOL))(v16 + 16))(v16, v8 != v5);
      return;
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v21 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
LABEL_36:
      _os_log_debug_impl(&dword_18AF10000, v21, OS_LOG_TYPE_DEBUG, "No completion handler", buf, 2u);
    }
  }
  else if (v5 == (void *)-1)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v19 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_18AF10000, v19, OS_LOG_TYPE_DEBUG, "No previous account access authorization.", buf, 2u);
    }
    uint64_t v20 = *(void *)(a1 + 40);
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v20, 1);
      return;
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v21 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      goto LABEL_36;
    }
  }
  else
  {
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    uint64_t v17 = *(void **)(a1 + 32);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    _OWORD v31[2] = sub_18B0387F8;
    v31[3] = &unk_1E54610D8;
    id v32 = *(id *)(a1 + 40);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = sub_18B038970;
    v28[3] = &unk_1E54616C0;
    v28[4] = *(void *)(a1 + 32);
    v30[1] = v5;
    objc_copyWeak(v30, (id *)buf);
    id v18 = *(id *)(a1 + 40);
    id v29 = v18;
    if (v17)
    {
      sub_18AF3C510(v17, 0, (void *)1, 0, v31, v28);
      id v18 = v29;
    }

    objc_destroyWeak(v30);
    objc_destroyWeak((id *)buf);
  }
}

void sub_18B0387D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18B0387F8(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't access daemon to fetch account access authorization: %@", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, 1);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v7) = 0;
      _os_log_debug_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEBUG, "No completion handler", (uint8_t *)&v7, 2u);
    }
  }
}

void sub_18B038970(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Fetching account access authorization from daemon.", buf, 2u);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_18B038AC4;
  v8[3] = &unk_1E5461698;
  uint64_t v5 = *(void **)(a1 + 56);
  v8[4] = *(void *)(a1 + 32);
  v10[1] = v5;
  objc_copyWeak(v10, (id *)(a1 + 48));
  id v9 = *(id *)(a1 + 40);
  objc_msgSend_accountAccessAuthorizationWithCompletionHandler_(v3, v6, (uint64_t)v8, v7);

  objc_destroyWeak(v10);
}

void sub_18B038AB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18B038AC4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v6 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    id v18 = v6;
    uint64_t v19 = CKTernaryDescription(a2);
    uint64_t v20 = *(void **)(a1 + 32);
    int v21 = 138412546;
    uint64_t v22 = v19;
    __int16 v23 = 2114;
    uint64_t v24 = v20;
    _os_log_debug_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEBUG, "Retrieved account access authorization '%@' for container %{public}@", (uint8_t *)&v21, 0x16u);
  }
  if (v5)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v21 = 138412290;
      uint64_t v22 = v5;
      _os_log_error_impl(&dword_18AF10000, v7, OS_LOG_TYPE_ERROR, "Failed to fetch account access authorization: %@", (uint8_t *)&v21, 0xCu);
    }
    BOOL v8 = 1;
  }
  else if (*(void *)(a1 + 56) == a2)
  {
    BOOL v8 = 0;
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v10 = WeakRetained;
    BOOL v8 = WeakRetained != 0;
    if (WeakRetained)
    {
      uint64_t v11 = WeakRetained;
      objc_sync_enter(v11);
      v11[32] = a2;
      objc_sync_exit(v11);

      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v12 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v12;
        uint64_t v14 = CKTernaryDescription(a2);
        id v15 = CKTernaryDescription(*(void *)(a1 + 56));
        int v21 = 138543874;
        uint64_t v22 = v11;
        __int16 v23 = 2112;
        uint64_t v24 = v14;
        __int16 v25 = 2112;
        uint64_t v26 = v15;
        _os_log_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEFAULT, "Account access authorization updated for container %{public}@: %@, previous: %@", (uint8_t *)&v21, 0x20u);
      }
    }
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16)
  {
    (*(void (**)(uint64_t, BOOL))(v16 + 16))(v16, v8);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v17 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v21) = 0;
      _os_log_debug_impl(&dword_18AF10000, v17, OS_LOG_TYPE_DEBUG, "No completion handler", (uint8_t *)&v21, 2u);
    }
  }
}

void sub_18B038FF0(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_18B039004(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  if (!v8) {
    objc_msgSend_accountStatus(a2, v5, v6, v7);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B03907C(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 138412290;
    id v14 = v3;
    _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Error fetching account info: %@", (uint8_t *)&v13, 0xCu);
  }
  id v8 = objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v12 = objc_msgSend_accountInfoFetchQueue(*(void **)(a1 + 32), v9, v10, v11);
  dispatch_resume(v12);
}

void sub_18B0391AC(uint64_t a1, void *a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_18B03926C;
  uint64_t v9[3] = &unk_1E5461738;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  id v10 = v4;
  uint64_t v11 = v5;
  char v14 = *(unsigned char *)(a1 + 64);
  id v12 = v6;
  id v13 = *(id *)(a1 + 56);
  objc_msgSend_accountInfoWithCompletionHandler_(a2, v7, (uint64_t)v9, v8);
}

void sub_18B03926C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  id v9 = a3;
  id v10 = *(void **)(a1 + 32);
  if (v10)
  {
    uint64_t v11 = objc_msgSend_log(v10, v6, v7, v8);
    uint64_t v15 = objc_msgSend_identifier(*(void **)(a1 + 32), v12, v13, v14);
    if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v16 = v15;
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)__int16 v59 = 0;
        _os_signpost_emit_with_name_impl(&dword_18AF10000, v11, OS_SIGNPOST_EVENT, v16, "accountStatus", "Fetched account info", v59, 2u);
      }
    }
  }
  uint64_t v17 = objc_msgSend_deviceContext(*(void **)(a1 + 40), v6, v7, v8);
  int v21 = objc_msgSend_testDeviceReferenceProtocol(v17, v18, v19, v20);

  if (v21)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v22 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = *(void **)(a1 + 40);
      uint64_t v27 = v22;
      uint64_t v31 = objc_msgSend_deviceContext(v26, v28, v29, v30);
      uint64_t v35 = objc_msgSend_testDeviceReferenceProtocol(v31, v32, v33, v34);
      id v39 = objc_msgSend_deviceID(v35, v36, v37, v38);
      id v40 = @". Error was ";
      *(_DWORD *)__int16 v59 = 138413058;
      uint64_t v41 = &stru_1ED7F5C98;
      *(void *)&v59[4] = v39;
      *(_WORD *)&v59[12] = 2112;
      if (v9) {
        uint64_t v41 = v9;
      }
      else {
        id v40 = &stru_1ED7F5C98;
      }
      *(void *)&v59[14] = v5;
      __int16 v60 = 2114;
      uint64_t v61 = v40;
      __int16 v62 = 2112;
      int v63 = v41;
      _os_log_debug_impl(&dword_18AF10000, v27, OS_LOG_TYPE_DEBUG, "For test device %@, account info is %@%{public}@%@", v59, 0x2Au);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v42 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      if (v9) {
        __int16 v51 = @". Error was ";
      }
      else {
        __int16 v51 = &stru_1ED7F5C98;
      }
      if (v9) {
        uint64_t v52 = v9;
      }
      else {
        uint64_t v52 = &stru_1ED7F5C98;
      }
      uint64_t v53 = *(__CFString **)(a1 + 40);
      uint64_t v54 = v42;
      long long v58 = objc_msgSend_containerID(v53, v55, v56, v57);
      *(_DWORD *)__int16 v59 = 138413314;
      *(void *)&v59[4] = v5;
      *(_WORD *)&v59[12] = 2114;
      *(void *)&v59[14] = v51;
      __int16 v60 = 2112;
      uint64_t v61 = v52;
      __int16 v62 = 2048;
      int v63 = v53;
      __int16 v64 = 2112;
      uint64_t v65 = v58;
      _os_log_debug_impl(&dword_18AF10000, v54, OS_LOG_TYPE_DEBUG, "Account info is %@%{public}@%@ for CKContainerImplementation %p, containerID %@", v59, 0x34u);
    }
  }
  if (!v9)
  {
    id v43 = *(id *)(a1 + 40);
    objc_sync_enter(v43);
    if (v5) {
      uint64_t v44 = v5[7];
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v45 = *(void *)(a1 + 40);
    if (v45) {
      *(void *)(v45 + 256) = v44;
    }
    objc_sync_exit(v43);

    if (!*(unsigned char *)(a1 + 64)) {
      objc_msgSend_setAsCachedAccountInfoForSetupInfoHash_(v5, v23, *(void *)(a1 + 48), v25);
    }
  }
  uint64_t v46 = objc_msgSend_CKClientSuitableError(v9, v23, v24, v25, *(_OWORD *)v59);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v50 = objc_msgSend_accountInfoFetchQueue(*(void **)(a1 + 40), v47, v48, v49);
  dispatch_resume(v50);
}

void sub_18B0397B8(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0397CC(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v10 = 138412290;
    id v11 = v3;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error getting daemon to reload account: %@", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    id v9 = objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

void sub_18B0398E8(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B039974;
  v5[3] = &unk_1E54610D8;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_reloadAccountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B039974(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412290;
      id v15 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error reloading account: %@", (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v8 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v14) = 0;
      _os_log_debug_impl(&dword_18AF10000, v8, OS_LOG_TYPE_DEBUG, "Reloaded account", (uint8_t *)&v14, 2u);
    }
  }
  objc_msgSend_invalidateCachedAccountInfo(CKAccountInfo, v5, v6, v7);
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    uint64_t v13 = objc_msgSend_CKClientSuitableError(v3, v9, v10, v11);
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
  }
}

void sub_18B039DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
}

void sub_18B039DD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, 1, v8);
  }
  uint64_t v10 = *(void **)(a1 + 32);
  if (v8)
  {
    if (v10)
    {
      uint64_t v11 = objc_msgSend_log(v10, v5, v6, v7);
      uint64_t v15 = objc_msgSend_identifier(*(void **)(a1 + 32), v12, v13, v14);
      if ((unint64_t)(v15 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_13;
      }
      os_signpost_id_t v16 = v15;
      if (!os_signpost_enabled(v11)) {
        goto LABEL_13;
      }
      int v26 = 138412290;
      uint64_t v27 = v8;
      uint64_t v17 = "Error: %@";
      id v18 = v11;
      os_signpost_id_t v19 = v16;
      uint32_t v20 = 12;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_18AF10000, v18, OS_SIGNPOST_INTERVAL_END, v19, "statusForApplicationPermission", v17, (uint8_t *)&v26, v20);
LABEL_13:
    }
  }
  else if (v10)
  {
    uint64_t v11 = objc_msgSend_log(v10, v5, v6, v7);
    uint64_t v24 = objc_msgSend_identifier(*(void **)(a1 + 32), v21, v22, v23);
    if ((unint64_t)(v24 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_13;
    }
    os_signpost_id_t v25 = v24;
    if (!os_signpost_enabled(v11)) {
      goto LABEL_13;
    }
    LOWORD(v26) = 0;
    uint64_t v17 = "";
    id v18 = v11;
    os_signpost_id_t v19 = v25;
    uint32_t v20 = 2;
    goto LABEL_12;
  }
}

void sub_18B039F48(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  long long v6[2] = sub_18B039FF8;
  v6[3] = &unk_1E54617B0;
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  objc_msgSend_statusForApplicationPermission_completionHandler_(a2, v5, v4, (uint64_t)v6);
}

void sub_18B039FF8(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v6 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    if (a2 > 3) {
      uint64_t v31 = @"Unknown status";
    }
    else {
      uint64_t v31 = off_1E54619E0[a2];
    }
    *(_DWORD *)uint64_t v35 = 138543874;
    *(void *)&v35[4] = v31;
    if (v5) {
      id v32 = @". Error was ";
    }
    else {
      id v32 = &stru_1ED7F5C98;
    }
    if (v5) {
      uint64_t v33 = v5;
    }
    else {
      uint64_t v33 = &stru_1ED7F5C98;
    }
    *(_WORD *)&v35[12] = 2114;
    *(void *)&v35[14] = v32;
    *(_WORD *)&v35[22] = 2112;
    __int16 v36 = v33;
    uint64_t v34 = v6;
    _os_log_debug_impl(&dword_18AF10000, v34, OS_LOG_TYPE_DEBUG, "Application permission status is %{public}@%{public}@%@", v35, 0x20u);
  }
  uint64_t v13 = objc_msgSend_CKClientSuitableError(v5, v7, v8, v9, *(_OWORD *)v35, *(void *)&v35[16], v36);
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(uint64_t, unint64_t, void *))(v14 + 16))(v14, a2, v13);
  }
  uint64_t v15 = *(void **)(a1 + 32);
  if (v13)
  {
    if (v15)
    {
      os_signpost_id_t v16 = objc_msgSend_log(v15, v10, v11, v12);
      uint64_t v20 = objc_msgSend_identifier(*(void **)(a1 + 32), v17, v18, v19);
      if ((unint64_t)(v20 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_16;
      }
      os_signpost_id_t v21 = v20;
      if (!os_signpost_enabled(v16)) {
        goto LABEL_16;
      }
      *(_DWORD *)uint64_t v35 = 138412290;
      *(void *)&v35[4] = v13;
      uint64_t v22 = "Error: %@";
      uint64_t v23 = v16;
      os_signpost_id_t v24 = v21;
      uint32_t v25 = 12;
LABEL_15:
      _os_signpost_emit_with_name_impl(&dword_18AF10000, v23, OS_SIGNPOST_INTERVAL_END, v24, "statusForApplicationPermission", v22, v35, v25);
LABEL_16:
    }
  }
  else if (v15)
  {
    os_signpost_id_t v16 = objc_msgSend_log(v15, v10, v11, v12);
    uint64_t v29 = objc_msgSend_identifier(*(void **)(a1 + 32), v26, v27, v28);
    if ((unint64_t)(v29 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_16;
    }
    os_signpost_id_t v30 = v29;
    if (!os_signpost_enabled(v16)) {
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v35 = 0;
    uint64_t v22 = "";
    uint64_t v23 = v16;
    os_signpost_id_t v24 = v30;
    uint32_t v25 = 2;
    goto LABEL_15;
  }
}

void sub_18B03A51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
}

void sub_18B03A538(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, 1, v8);
  }
  uint64_t v10 = *(void **)(a1 + 32);
  if (v8)
  {
    if (v10)
    {
      uint64_t v11 = objc_msgSend_log(v10, v5, v6, v7);
      uint64_t v15 = objc_msgSend_identifier(*(void **)(a1 + 32), v12, v13, v14);
      if ((unint64_t)(v15 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_13;
      }
      os_signpost_id_t v16 = v15;
      if (!os_signpost_enabled(v11)) {
        goto LABEL_13;
      }
      int v26 = 138412290;
      uint64_t v27 = v8;
      uint64_t v17 = "Error: %@";
      uint64_t v18 = v11;
      os_signpost_id_t v19 = v16;
      uint32_t v20 = 12;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_18AF10000, v18, OS_SIGNPOST_INTERVAL_END, v19, "requestApplicationPermission", v17, (uint8_t *)&v26, v20);
LABEL_13:
    }
  }
  else if (v10)
  {
    uint64_t v11 = objc_msgSend_log(v10, v5, v6, v7);
    uint64_t v24 = objc_msgSend_identifier(*(void **)(a1 + 32), v21, v22, v23);
    if ((unint64_t)(v24 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_13;
    }
    os_signpost_id_t v25 = v24;
    if (!os_signpost_enabled(v11)) {
      goto LABEL_13;
    }
    LOWORD(v26) = 0;
    uint64_t v17 = "";
    uint64_t v18 = v11;
    os_signpost_id_t v19 = v25;
    uint32_t v20 = 2;
    goto LABEL_12;
  }
}

void sub_18B03A6AC(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  long long v6[2] = sub_18B03A75C;
  v6[3] = &unk_1E54617B0;
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  objc_msgSend_requestApplicationPermission_completionHandler_(a2, v5, v4, (uint64_t)v6);
}

void sub_18B03A75C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, const char *, void *))(v10 + 16))(v10, a2, v9);
  }
  uint64_t v11 = *(void **)(a1 + 32);
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = objc_msgSend_log(v11, v6, v7, v8);
      uint64_t v16 = objc_msgSend_identifier(*(void **)(a1 + 32), v13, v14, v15);
      if ((unint64_t)(v16 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_13;
      }
      os_signpost_id_t v17 = v16;
      if (!os_signpost_enabled(v12)) {
        goto LABEL_13;
      }
      int v27 = 138412290;
      uint64_t v28 = v9;
      uint64_t v18 = "Error: %@";
      os_signpost_id_t v19 = v12;
      os_signpost_id_t v20 = v17;
      uint32_t v21 = 12;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_18AF10000, v19, OS_SIGNPOST_INTERVAL_END, v20, "requestApplicationPermission", v18, (uint8_t *)&v27, v21);
LABEL_13:
    }
  }
  else if (v11)
  {
    uint64_t v12 = objc_msgSend_log(v11, v6, v7, v8);
    uint64_t v25 = objc_msgSend_identifier(*(void **)(a1 + 32), v22, v23, v24);
    if ((unint64_t)(v25 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_13;
    }
    os_signpost_id_t v26 = v25;
    if (!os_signpost_enabled(v12)) {
      goto LABEL_13;
    }
    LOWORD(v27) = 0;
    uint64_t v18 = "";
    os_signpost_id_t v19 = v12;
    os_signpost_id_t v20 = v26;
    uint32_t v21 = 2;
    goto LABEL_12;
  }
}

void sub_18B03A8D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B03A94C(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  long long v6[2] = sub_18B03A9FC;
  v6[3] = &unk_1E5461800;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  objc_msgSend_fetchLongLivedOperationsWithIDs_completionHandler_(a2, v5, v4, (uint64_t)v6);
}

void sub_18B03A9FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_opt_new();
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v8 = v5;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v40, (uint64_t)v44, 16);
  if (v10)
  {
    uint64_t v14 = v10;
    uint64_t v15 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v41 != v15) {
          objc_enumerationMutation(v8);
        }
        os_signpost_id_t v17 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        uint64_t v18 = *(void *)(a1 + 32);
        os_signpost_id_t v19 = objc_msgSend_resolvedConfiguration(v17, v11, v12, v13, (void)v40);
        objc_msgSend_setContainer_(v19, v20, v18, v21);

        objc_msgSend_ckOperationClassName(v17, v22, v23, v24);
        uint64_t v25 = (NSString *)objc_claimAutoreleasedReturnValue();
        os_signpost_id_t v26 = NSClassFromString(v25);

        id v27 = objc_alloc_init(v26);
        objc_msgSend_fillFromOperationInfo_(v27, v28, (uint64_t)v17, v29);
        uint64_t v33 = objc_msgSend_operationID(v17, v30, v31, v32);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v34, (uint64_t)v27, (uint64_t)v33);
      }
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v40, (uint64_t)v44, 16);
    }
    while (v14);
  }

  uint64_t v38 = *(void *)(a1 + 40);
  if (v38)
  {
    id v39 = objc_msgSend_CKClientSuitableError(v6, v35, v36, v37);
    (*(void (**)(uint64_t, void *, void *))(v38 + 16))(v38, v7, v39);
  }
}

void sub_18B03AD18(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B03AD2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
  }
}

void sub_18B03ADA4(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B03AE30;
  v5[3] = &unk_1E5461100;
  id v6 = *(id *)(a1 + 32);
  objc_msgSend_fetchAllLongLivedOperationIDsWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);
}

void sub_18B03AE30(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a2;
    objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v9);
  }
}

void sub_18B03B144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B03B160(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    objc_msgSend_allValues(a2, v6, v7, v8);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = objc_msgSend_firstObject(v13, v9, v10, v11);
    (*(void (**)(uint64_t, void *, id))(v3 + 16))(v3, v12, v5);
  }
}

uint64_t sub_18B03B2FC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  objc_msgSend_setAssetRequestCallback_(v4, v5, v3, v6);
  objc_msgSend_setMachServiceName_(v4, v7, *(void *)(a1 + 32), v8);
  objc_msgSend_registerForItemRequests(v4, v9, v10, v11);

  return 0;
}

uint64_t sub_18B03B44C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  objc_msgSend_setPackageRequestCallback_(v4, v5, v3, v6);
  objc_msgSend_setMachServiceName_(v4, v7, *(void *)(a1 + 32), v8);
  objc_msgSend_registerForItemRequests(v4, v9, v10, v11);

  return 0;
}

void sub_18B03B5E0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B03B608()
{
  return 1;
}

uint64_t sub_18B03B6A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return 1;
}

uint64_t sub_18B03B6DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return 0;
}

uint64_t sub_18B03B70C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return 0;
}

uint64_t sub_18B03B948(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = v3;
  uint64_t v7 = a1[5];
  if (v7)
  {
    objc_msgSend_setAssetRequestCallback_(v3, v4, v7, v5);
  }
  else
  {
    uint64_t v10 = objc_msgSend_assetRequestCallback(v3, v4, 0, v5);
    objc_msgSend_setAssetRequestCallback_(v6, v11, (uint64_t)v10, v12);
  }
  uint64_t v13 = a1[6];
  if (v13)
  {
    objc_msgSend_setPackageRequestCallback_(v6, v8, v13, v9);
  }
  else
  {
    uint64_t v16 = objc_msgSend_packageRequestCallback(v6, v8, 0, v9);
    objc_msgSend_setPackageRequestCallback_(v6, v17, (uint64_t)v16, v18);
  }
  objc_msgSend_setMachServiceName_(v6, v14, a1[4], v15);
  objc_msgSend_registerForItemRequests(v6, v19, v20, v21);

  return 0;
}

void sub_18B03BB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B03BB54(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Failed to begin content access with error: %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_18B03BC34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B03BCA8;
  v5[3] = &unk_1E5461910;
  void v5[4] = *(void *)(a1 + 32);
  return objc_msgSend_beginContentAccess_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18B03BCA8(uint64_t a1, int a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      id v13 = v5;
      uint64_t v7 = "Failed to begin content access with error: %@";
      uint64_t v8 = v6;
      uint32_t v9 = 12;
LABEL_15:
      _os_log_error_impl(&dword_18AF10000, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v12, v9);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
    if (a2)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v10 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v12) = 0;
        _os_log_debug_impl(&dword_18AF10000, v10, OS_LOG_TYPE_DEBUG, "Successfully began content access", (uint8_t *)&v12, 2u);
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v11 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12) = 0;
        uint64_t v7 = "Failed to begin content access";
        uint64_t v8 = v11;
        uint32_t v9 = 2;
        goto LABEL_15;
      }
    }
  }
}

void sub_18B03BF3C(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Failed to end content access with error: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_18B03C01C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_endContentAccess(a2, (const char *)a2, a3, a4);
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  int v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v5 = 0;
    _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Successfully ended content access", v5, 2u);
  }
}

void sub_18B03C184(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Failed to discard content with error: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_18B03C264(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_discardContentIfPossible(a2, (const char *)a2, a3, a4);
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  int v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v5 = 0;
    _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Successfully discarded content if possible", v5, 2u);
  }
}

void sub_18B03C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B03C3EC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Failed to check if content is discarded with error: %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_18B03C4CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B03C540;
  v5[3] = &unk_1E5461910;
  void v5[4] = *(void *)(a1 + 32);
  return objc_msgSend_isContentDiscarded_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18B03C540(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_error_impl(&dword_18AF10000, v6, OS_LOG_TYPE_ERROR, "Failed to check if content is discarded with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
}

uint64_t sub_18B03C900()
{
  dispatch_queue_t v0 = [CKContainer alloc];
  uint64_t v3 = objc_msgSend__initWithContainerIdentifier_(v0, v1, 0, v2);
  uint64_t v4 = qword_1EB279AD0;
  qword_1EB279AD0 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

uint64_t sub_18B03C944()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = qword_1EB279AD8;
  qword_1EB279AD8 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_18B03C9FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B03D0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, id *a15)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak(a15);
  objc_destroyWeak((id *)(v16 - 120));
  _Unwind_Resume(a1);
}

void sub_18B03D118(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138543362;
    uint64_t v11 = v9;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Posting scoped CKIdentityUpdateNotification for service named %{public}@", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v6 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v3, v4, v5);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_postNotificationName_object_(v6, v8, @"CKIdentityUpdateNotification", (uint64_t)WeakRetained);
}

void sub_18B03D230(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138543362;
    uint64_t v11 = v9;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Posting scoped CKIdentityUpdateNotification for view named %{public}@", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v6 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v3, v4, v5);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_postNotificationName_object_(v6, v8, @"CKIdentityUpdateNotification", (uint64_t)WeakRetained);
}

void sub_18B03D348(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138543362;
    uint64_t v12 = v10;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Posting scoped CKAccountChangedNotification for service named %{public}@", (uint8_t *)&v11, 0xCu);
  }
  uint64_t v6 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v3, v4, v5);
  int v7 = CKPrefixedNotificationName(@"CKAccountChangedNotification");
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_postNotificationName_object_(v6, v9, (uint64_t)v7, (uint64_t)WeakRetained);
}

void sub_18B03D47C(void *a1, void *a2, void *a3)
{
  id v11 = a2;
  id v8 = a3;
  if (a1)
  {
    uint64_t v9 = objc_msgSend_implementation(a1, v5, v6, v7);
    uint64_t v10 = v9;
    if (v9) {
      sub_18AF3C510(v9, 0, (void *)1, 0, v11, v8);
    }
  }
}

id sub_18B03DBC0()
{
  self;
  if (qword_1EB279AF0 != -1) {
    dispatch_once(&qword_1EB279AF0, &unk_1ED7F54D8);
  }
  uint64_t v0 = (void *)qword_1EB279AE8;

  return v0;
}

void sub_18B03DC18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED8513F0, a4);
  uint64_t v5 = (void *)qword_1EB279AE8;
  qword_1EB279AE8 = v4;

  uint64_t v6 = (void *)qword_1EB279AE8;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v12 = objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v6, v13, (uint64_t)v12, (uint64_t)sel_consumeSandboxExtensions_reply_, 0, 0);

  uint64_t v14 = (void *)qword_1EB279AE8;
  CKErrorUserInfoClasses();
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v14, v15, (uint64_t)v16, (uint64_t)sel_handleSharingUIUpdatedShare_recordID_isDeleted_error_reply_, 3, 0);
}

void sub_18B03DD0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED8856F8, a4);
  uint64_t v5 = (void *)qword_1EB279AF8;
  qword_1EB279AF8 = v4;

  uint64_t v6 = (void *)qword_1EB279AF8;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v12 = objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v6, v13, (uint64_t)v12, (uint64_t)sel_statusGroupsForApplicationPermission_completionHandler_, 0, 1);

  uint64_t v14 = (void *)qword_1EB279AF8;
  uint64_t v15 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v16 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  uint64_t v20 = objc_msgSend_setWithObjects_(v15, v18, v16, v19, v17, 0);
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v14, v21, (uint64_t)v20, (uint64_t)sel_getRecordPCSDiagnosticsForZonesWithCompletionHandler_, 0, 1);

  uint64_t v81 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v82 = (void *)qword_1EB279AF8;
  uint64_t v80 = objc_opt_class();
  uint64_t v79 = objc_opt_class();
  uint64_t v78 = objc_opt_class();
  uint64_t v77 = objc_opt_class();
  uint64_t v76 = objc_opt_class();
  uint64_t v75 = objc_opt_class();
  uint64_t v74 = objc_opt_class();
  uint64_t v73 = objc_opt_class();
  uint64_t v72 = objc_opt_class();
  uint64_t v71 = objc_opt_class();
  uint64_t v70 = objc_opt_class();
  uint64_t v69 = objc_opt_class();
  uint64_t v68 = objc_opt_class();
  uint64_t v67 = objc_opt_class();
  uint64_t v22 = objc_opt_class();
  uint64_t v23 = objc_opt_class();
  uint64_t v24 = objc_opt_class();
  uint64_t v25 = objc_opt_class();
  uint64_t v26 = objc_opt_class();
  uint64_t v27 = objc_opt_class();
  uint64_t v28 = objc_opt_class();
  uint64_t v29 = objc_opt_class();
  uint64_t v30 = objc_opt_class();
  uint64_t v31 = objc_opt_class();
  uint64_t v32 = objc_opt_class();
  objc_msgSend_setWithObjects_(v81, v33, v80, v34, v79, v78, v77, v76, v75, v74, v73, v72, v71, v70, v69, v68, v67, v22, v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
  uint64_t v35 = 0);
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v82, v36, (uint64_t)v35, (uint64_t)sel_fetchLongLivedOperationsWithIDs_completionHandler_, 0, 1);

  objc_msgSend_setXPCType_forSelector_argumentIndex_ofReply_((void *)qword_1EB279AF8, v37, MEMORY[0x1E4F14590], (uint64_t)sel_networkTransferEndpointWithCompletionHandler_, 0, 1);
  uint64_t v38 = (void *)qword_1EB279AF8;
  id v39 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v40 = objc_opt_class();
  uint64_t v41 = objc_opt_class();
  uint64_t v42 = objc_opt_class();
  uint64_t v43 = objc_opt_class();
  uint64_t v44 = objc_opt_class();
  uint64_t v45 = objc_opt_class();
  uint64_t v48 = objc_msgSend_setWithObjects_(v39, v46, v40, v47, v41, v42, v43, v44, v45, 0);
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v38, v49, (uint64_t)v48, (uint64_t)sel_setFakeResponseOperationResult_forNextRequestOfClassName_forItemID_withLifetime_completionHandler_, 2, 0);

  uint64_t v50 = (void *)qword_1EB279AF8;
  __int16 v51 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v52 = objc_opt_class();
  uint64_t v53 = objc_opt_class();
  uint64_t v54 = objc_opt_class();
  uint64_t v55 = objc_opt_class();
  long long v58 = objc_msgSend_setWithObjects_(v51, v56, v52, v57, v53, v54, v55, 0);
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v50, v59, (uint64_t)v58, (uint64_t)sel_setFakeError_forNextRequestOfClassName_completionHandler_, 0, 0);

  __int16 v60 = (void *)qword_1EB279AF8;
  uint64_t v61 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v62 = objc_opt_class();
  uint64_t v63 = objc_opt_class();
  id v83 = objc_msgSend_setWithObjects_(v61, v64, v62, v65, v63, 0);
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v60, v66, (uint64_t)v83, (uint64_t)sel_clearPILSCacheForLookupInfos_, 0, 0);
}

id sub_18B03E234()
{
  uint64_t v0 = self;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_18B03E2D8;
  block[3] = &unk_1E545FFA8;
  block[4] = v0;
  if (qword_1EB279B10 != -1) {
    dispatch_once(&qword_1EB279B10, block);
  }
  uint64_t v1 = (void *)qword_1EB279B08;

  return v1;
}

void sub_18B03E2D8()
{
  self;
  if (qword_1EB279B00 != -1) {
    dispatch_once(&qword_1EB279B00, &unk_1ED7F54F8);
  }
  uint64_t v0 = (void *)qword_1EB279AF8;

  objc_storeStrong((id *)&qword_1EB279B08, v0);
}

uint64_t sub_18B03E38C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED885758, a4);
  uint64_t v5 = qword_1EB279B18;
  qword_1EB279B18 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

void sub_18B03E480(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B03E534(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B03E5E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B03E610(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v63 = v9;
  if (a1)
  {
    if (v9)
    {
      uint64_t v11 = objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(MEMORY[0x1E4F29088], v10, (uint64_t)v9, 0);
      objc_msgSend_applyDefaultParametersToServiceURLComponents_(CKCodeFunctionInvokeOperationInfo, v12, (uint64_t)v11, v13);
      uint64_t v65 = objc_msgSend_URL(v11, v14, v15, v16);
    }
    else
    {
      uint64_t v65 = 0;
    }
    id v18 = a1;
    objc_sync_enter(v18);
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    obunint64_t j = (void **)v18;
    uint64_t v22 = objc_msgSend_codeServices(v18, v19, v20, v21);
    uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v66, (uint64_t)v70, 16);
    if (v27)
    {
      uint64_t v28 = *(void *)v67;
LABEL_8:
      uint64_t v29 = 0;
      while (1)
      {
        if (*(void *)v67 != v28) {
          objc_enumerationMutation(v22);
        }
        uint64_t v30 = *(void **)(*((void *)&v66 + 1) + 8 * v29);
        uint64_t v31 = objc_msgSend_serviceName(v30, v24, v25, v26);
        char isEqualToString = objc_msgSend_isEqualToString_(v31, v32, (uint64_t)v7, v33);

        if (isEqualToString)
        {
          objc_msgSend_boxedDatabaseScope(v30, v24, v25, v26);
          id v38 = (id)objc_claimAutoreleasedReturnValue();
          if (v38 == v8)
          {

LABEL_16:
            uint64_t v46 = objc_msgSend_serviceInstanceURL(v30, v24, v25, v26);
            if (v46 == v65)
            {

LABEL_24:
              id inited = v30;
              goto LABEL_25;
            }
            uint64_t v47 = objc_msgSend_serviceInstanceURL(v30, v43, v44, v45);
            char isEqual = objc_msgSend_isEqual_(v47, v48, (uint64_t)v65, v49);

            if (isEqual) {
              goto LABEL_24;
            }
            goto LABEL_18;
          }
          id v39 = objc_msgSend_boxedDatabaseScope(v30, v35, v36, v37);
          int v42 = objc_msgSend_isEqual_(v39, v40, (uint64_t)v8, v41);

          if (v42) {
            goto LABEL_16;
          }
        }
LABEL_18:
        if (v27 == ++v29)
        {
          uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v24, (uint64_t)&v66, (uint64_t)v70, 16);
          if (v27) {
            goto LABEL_8;
          }
          break;
        }
      }
    }

    uint64_t v54 = obj;
    if (!obj[7])
    {
      uint64_t v55 = objc_opt_new();
      uint64_t v56 = obj[7];
      obj[7] = (void *)v55;

      uint64_t v54 = obj;
    }
    uint64_t v57 = objc_msgSend_implementation(v54, v51, v52, v53);
    uint64_t v22 = sub_18B02EA1C(v57, v7, v8, v63);

    long long v58 = [CKCodeService alloc];
    id inited = (id)objc_msgSend_initInternalWithImplementation_container_(v58, v59, (uint64_t)v22, (uint64_t)obj);
    objc_msgSend_addObject_(obj[7], v60, (uint64_t)inited, v61);
LABEL_25:

    objc_sync_exit(obj);
  }
  else
  {
    id inited = 0;
  }

  return inited;
}

void sub_18B03E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

void sub_18B03F804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

void sub_18B03F828(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v4 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v4;
      uint64_t v10 = objc_msgSend_CKClientSuitableError(v3, v7, v8, v9);
      int v11 = 138412546;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_fault_impl(&dword_18AF10000, v6, OS_LOG_TYPE_FAULT, "Failed to register CKSystemSharingUIObserver %@: %@", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_18B03F948(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Successfully got a daemon proxy for CKSystemSharingUIObserver %@", (uint8_t *)&v6, 0xCu);
  }
}

void *sub_18B04071C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0408FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B040914(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B041BDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B041BE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t CKSQLDBSerializerInit(pthread_mutex_t *a1)
{
  uint64_t result = pthread_mutex_init(a1, 0);
  a1[1].__sig = 0;
  return result;
}

pthread_mutex_t *_CKSQLDBSerializerLock(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)a1;
  uint64_t v2 = *(_opaque_pthread_t **)(a1 + 64);
  if (v2 == pthread_self()) {
    return 0;
  }
  pthread_mutex_lock(v1);
  v1[1].__sig = (uint64_t)pthread_self();
  return v1;
}

pthread_mutex_t *_CKSQLDBSerializerUnlock(pthread_mutex_t **a1)
{
  uint64_t result = *a1;
  if (result)
  {
    result[1].__sig = 0;
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  }
  return result;
}

void *sub_18B041F40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B042120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B042138(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0422C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 520) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0424A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0424BC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B043AE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B043AFC()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1C998]);
  uint64_t v1 = (void *)qword_1EB279A50;
  qword_1EB279A50 = (uint64_t)v0;

  uint64_t v4 = (void *)qword_1EB279A50;

  return objc_msgSend_setName_(v4, v2, @"com.apple.cloudkit.operationCallbackProxy", v3);
}

id sub_18B043CB4(void *a1, void *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v7 = objc_msgSend_superclass(a1, v4, v5, v6);
  if (objc_msgSend_conformsToProtocol_(v7, v8, (uint64_t)v3, v9))
  {
    uint64_t v13 = objc_msgSend_superclass(a1, v10, v11, v12);
    uint64_t v14 = sub_18B043CB4(v13, v3);
    uint64_t v17 = objc_msgSend_arrayByAddingObject_(v14, v15, (uint64_t)a1, v16);
  }
  else if (objc_msgSend_conformsToProtocol_(a1, v10, (uint64_t)v3, v12))
  {
    v20[0] = a1;
    uint64_t v17 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v18, (uint64_t)v20, 1);
  }
  else
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v17;
}

NSString *sub_18B043DB0(int a1, Class aClass)
{
  return NSStringFromClass(aClass);
}

Class sub_18B0440A0(int a1, NSString *aClassName)
{
  return NSClassFromString(aClassName);
}

void sub_18B0443C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0444FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0448F8(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    if (objc_msgSend_isCancelled(v7, v3, v4, v5))
    {
      uint64_t v11 = @"op was cancelled";
    }
    else if (objc_msgSend_isFinished(*(void **)(a1 + 32), v8, v9, v10))
    {
      uint64_t v11 = @"op was finished";
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v11 = @"unknown";
      if (v12)
      {
        if (*(unsigned char *)(v12 + 282))
        {
          uint64_t v11 = @"cloudd connection was interrupted";
        }
        else if (*(unsigned char *)(v12 + 283))
        {
          uint64_t v11 = @"op was suspended";
        }
      }
    }
  }
  else
  {
    uint64_t v11 = @"op was deallocated";
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v13 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void **)(a1 + 32);
    uint64_t v23 = v13;
    uint64_t v27 = objc_msgSend_operationID(v22, v24, v25, v26);
    *(_DWORD *)buf = 134218498;
    uint64_t v29 = v22;
    __int16 v30 = 2114;
    uint64_t v31 = v27;
    __int16 v32 = 2114;
    uint64_t v33 = v11;
    _os_log_debug_impl(&dword_18AF10000, v23, OS_LOG_TYPE_DEBUG, "Skipping callback invocation for %p %{public}@, %{public}@", buf, 0x20u);

    if (v6) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (!v6)
  {
LABEL_16:
    uint64_t v17 = objc_msgSend_operationID(*(void **)(a1 + 32), v14, v15, v16);
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v18, @"CKInternalErrorDomain", 1000, @"Not forwarding invocation to operation %@, no good reason why", v17);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_17:
  uint64_t v19 = *(void **)(a1 + 40);
  uint64_t v20 = objc_msgSend_callbackProtocol(*(void **)(a1 + 48), v14, v15, v16);
  objc_msgSend_CKInvokeAndNilOutReplyBlockWithError_forProtocol_(v19, v21, (uint64_t)v6, (uint64_t)v20);
}

void sub_18B044B24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  char isCancelled = objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = *(unsigned char **)(a1 + 32);
  if ((isCancelled & 1) == 0)
  {
    if (v9 && (v9[282] || v9[283]))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = (void (**)(uint64_t, id))(v10 + 16);
      goto LABEL_8;
    }
    char isFinished = objc_msgSend_isFinished(v9, v5, v6, v7);
    uint64_t v9 = *(unsigned char **)(a1 + 32);
    if ((isFinished & 1) == 0)
    {
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      uint64_t v13 = sub_18B0D7CD0(v9);
      os_activity_scope_enter(v13, &state);

      objc_msgSend_invokeWithTarget_(*(void **)(a1 + 40), v14, *(void *)(a1 + 32), v15);
      os_activity_scope_leave(&state);
      return;
    }
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = (void (**)(uint64_t, id))(v10 + 16);
  if (!v9) {
    goto LABEL_10;
  }
LABEL_8:
  if (!v9[283])
  {
LABEL_10:
    objc_msgSend_error(v9, v5, v6, v7);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v16);
    goto LABEL_11;
  }
  sub_18B0D7BA0(v9);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  (*v11)(v10, v16);
LABEL_11:
}

void sub_18B044C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_18B044D64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18B044DFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6)) {
    BOOL v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9) == 11;
  }
  else {
    BOOL v10 = 0;
  }

  return v10;
}

BOOL sub_18B044E48(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6))
  {
    int v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9);
    BOOL v12 = v10 == 13 || v10 == 10;
  }
  else
  {
    BOOL v12 = 0;
  }

  return v12;
}

BOOL sub_18B044E98(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v7 = v3;
  if (v3)
  {
    objc_msgSend_domain(v3, v4, v5, v6);
    uint64_t v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    BOOL v12 = v11 == @"CKInternalErrorDomain" && objc_msgSend_code(v7, v8, v9, v10) == 1050;
  }
  else
  {
    BOOL v12 = 0;
  }

  return v12;
}

BOOL sub_18B044F18(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v7 = v3;
  if (v3)
  {
    objc_msgSend_domain(v3, v4, v5, v6);
    uint64_t v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    BOOL v12 = v11 == @"CKInternalErrorDomain" && objc_msgSend_code(v7, v8, v9, v10) == 1051;
  }
  else
  {
    BOOL v12 = 0;
  }

  return v12;
}

BOOL sub_18B044F98(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6)) {
    BOOL v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9) == 19;
  }
  else {
    BOOL v10 = 0;
  }

  return v10;
}

BOOL sub_18B044FE4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (objc_msgSend_CKIsConstraintError_(a1, v5, (uint64_t)v4, v6))
  {
    int v10 = objc_msgSend_CKSQLiteExtendedCode(v4, v7, v8, v9);
    BOOL v12 = v10 == 2067 || v10 == 1555;
  }
  else
  {
    BOOL v12 = 0;
  }

  return v12;
}

BOOL sub_18B045044(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (objc_msgSend_CKIsConstraintError_(a1, v5, (uint64_t)v4, v6)) {
    BOOL v10 = objc_msgSend_CKSQLiteExtendedCode(v4, v7, v8, v9) == 787;
  }
  else {
    BOOL v10 = 0;
  }

  return v10;
}

BOOL sub_18B04509C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6)) {
    BOOL v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9) == 5;
  }
  else {
    BOOL v10 = 0;
  }

  return v10;
}

uint64_t sub_18B045538(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_code(a1, a2, a3, a4) != 1027) {
    return 0;
  }
  uint64_t v8 = objc_msgSend_domain(a1, v5, v6, v7);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v8, v9, @"CKInternalErrorDomain", v10);

  return isEqualToString;
}

uint64_t sub_18B045598(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_userInfo(a1, a2, a3, a4);
  uint64_t v7 = objc_msgSend_objectForKey_(v4, v5, @"SQLCode", v6);
  uint64_t v11 = objc_msgSend_intValue(v7, v8, v9, v10);

  return v11;
}

uint64_t sub_18B0455F0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_userInfo(a1, a2, a3, a4);
  uint64_t v7 = objc_msgSend_objectForKey_(v4, v5, @"SQLExtendedCode", v6);
  uint64_t v11 = objc_msgSend_intValue(v7, v8, v9, v10);

  return v11;
}

void sub_18B04623C(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  if (v1)
  {
    v57.id receiver = v1;
    v57.Class super_class = (Class)CKProcessScopedStateManager;
    uint64_t v5 = objc_msgSendSuper2(&v57, sel_init);
    if (v5)
    {
      uint64_t v6 = (const char *)objc_msgSend_UTF8String(@"com.apple.cloudkit.CKProcessScopedStateManager.notificationQueue", v2, v3, v4);
      uint64_t v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v8 = dispatch_queue_create(v6, v7);
      uint64_t v9 = (void *)v5[6];
      void v5[6] = v8;

      uint64_t v13 = objc_msgSend_weakObjectsHashTable(MEMORY[0x1E4F28D30], v10, v11, v12);
      uint64_t v14 = (void *)v5[2];
      uint64_t v5[2] = v13;

      uint64_t v15 = objc_opt_new();
      id v16 = (void *)v5[5];
      void v5[5] = v15;

      uint64_t v17 = [CKEntitlements alloc];
      uint64_t v21 = objc_msgSend_initWithCurrentProcess(v17, v18, v19, v20);
      uint64_t v22 = (void *)v5[3];
      v5[3] = v21;

      sub_18B0464C8((uint64_t)v5, v23, v24, v25);
      uint64_t v29 = objc_msgSend_sharedOptions(CKBehaviorOptions, v26, v27, v28);
      LODWORD(v7) = objc_msgSend_isAppleInternalInstall(v29, v30, v31, v32);

      if (v7)
      {
        int out_token = -1;
        uint64_t v33 = NSString;
        uint64_t v34 = CKTestNotificationPrefix();
        uint64_t v37 = objc_msgSend_stringWithFormat_(v33, v35, @"%@%@", v36, v34, @"com.apple.cloudd.sleepytime");

        uint64_t v41 = (const char *)objc_msgSend_UTF8String(v37, v38, v39, v40);
        int v42 = CKGetGlobalQueue(25);
        notify_register_dispatch(v41, &out_token, v42, &unk_1ED7EEF78);

        int out_token = -1;
        uint64_t v43 = NSString;
        uint64_t v44 = CKTestNotificationPrefix();
        uint64_t v47 = objc_msgSend_stringWithFormat_(v43, v45, @"%@%@", v46, v44, @"com.apple.cloudd.pcsIdentityUpdate");

        __int16 v51 = (const char *)objc_msgSend_UTF8String(v47, v48, v49, v50);
        uint64_t v52 = v5[6];
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 3221225472;
        handler[2] = sub_18B046678;
        handler[3] = &unk_1E5461AC0;
        uint64_t v55 = v5;
        notify_register_dispatch(v51, &out_token, v52, handler);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v53 = (void *)qword_1EB279B30;
  qword_1EB279B30 = (uint64_t)v5;
}

void sub_18B0464C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v5 = objc_msgSend_count(*(void **)(a1 + 40), a2, a3, a4);
    uint64_t v6 = *(void **)(a1 + 24);
    if (v5)
    {
      id v7 = *(id *)(a1 + 40);
      id v8 = v6;
      uint64_t v11 = objc_msgSend_entitlementsByAddingOverlay_(v8, v9, (uint64_t)v7, v10);
      uint64_t v12 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v11;
    }
    else
    {
      id v13 = v6;
      id v8 = *(id *)(a1 + 32);
      *(void *)(a1 + 32) = v13;
    }

    id v14 = *(id *)(a1 + 32);
    uint64_t v15 = CKSDKVersion();
    id v30 = 0;
    char v17 = objc_msgSend_validateEntitlementsWithSDKVersion_error_(v14, v16, v15, (uint64_t)&v30);
    id v18 = v30;

    if ((v17 & 1) == 0)
    {
      uint64_t v19 = [CKException alloc];
      uint64_t v23 = objc_msgSend_code(v18, v20, v21, v22);
      uint64_t v27 = objc_msgSend_localizedDescription(v18, v24, v25, v26);
      id v29 = (id)objc_msgSend_initWithCode_format_(v19, v28, v23, @"%@", v27);

      objc_exception_throw(v29);
    }
  }
}

void sub_18B0465E8()
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v0 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v1 = 0;
    _os_log_error_impl(&dword_18AF10000, v0, OS_LOG_TYPE_ERROR, "Kill signal received. Goodbye cruel world!", v1, 2u);
  }
  exit(1);
}

void sub_18B046678(uint64_t a1)
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v8 = 0;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Posting CKIdentityUpdateNotification", v8, 2u);
  }
  uint64_t v6 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v3, v4, v5);
  objc_msgSend_postNotificationName_object_(v6, v7, @"CKIdentityUpdateNotification", *(void *)(a1 + 32));
}

id sub_18B046744(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    a1 = objc_msgSend_sharedXPCConnection(CKXPCConnection, a2, a3, a4);
    uint64_t v4 = vars8;
  }
  return a1;
}

void sub_18B04684C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0468EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B046900(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1;
    objc_sync_enter(v4);
    id v5 = v4[2];
    objc_msgSend_addObject_(v5, v6, (uint64_t)v3, v7);

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v8 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = v4[2];
      int v20 = 138412546;
      id v21 = v3;
      __int16 v22 = 2048;
      uint64_t v23 = objc_msgSend_count(v9, v10, v11, v12);
      _os_log_impl(&dword_18AF10000, v8, OS_LOG_TYPE_INFO, "Registering %@ for account and authorization change notifications. Now have %ld registered containers", (uint8_t *)&v20, 0x16u);
    }
    if ((byte_1EB279A68 & 1) == 0)
    {
      byte_1EB279A68 = 1;
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v13 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v20) = 0;
        _os_log_debug_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEBUG, "Registering notification handlers", (uint8_t *)&v20, 2u);
      }
      objc_msgSend___registerForAuthorizationChangeNotifications(v4, v14, v15, v16);
      objc_msgSend___registerForAccountChangeNotifications(v4, v17, v18, v19);
    }
    objc_sync_exit(v4);
  }
}

void sub_18B046AD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B046BF0(uint64_t a1)
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEFAULT, "Authorization change notification received for all containers", v27, 2u);
  }
  objc_msgSend_sharedManager(CKProcessScopedStateManager, v3, v4, v5);
  uint64_t v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v6);
  if (!v6) {
    goto LABEL_9;
  }
  if (!v6[8])
  {
    v6[9] = 1;
LABEL_9:
    id v13 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v7, v8, v9);
    id v14 = *(void **)(a1 + 32);
    uint64_t v18 = sub_18B046744(v14, v15, v16, v17);
    objc_msgSend_addObserver_selector_name_object_(v13, v19, (uint64_t)v14, (uint64_t)sel_connectionBecameInvalid_, @"CKXPCConnectionInterrupted", v18);

    uint64_t v23 = sub_18B046744(*(void **)(a1 + 32), v20, v21, v22);
    objc_msgSend_activate(v23, v24, v25, v26);

    objc_sync_exit(v6);
    goto LABEL_10;
  }
  objc_sync_exit(v6);

  objc_msgSend___refreshAccountAccessAuthorization(v6, v10, v11, v12);
LABEL_10:
}

void sub_18B046D60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B047030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_18B047088(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    uint64_t v5 = objc_msgSend_importantUserRecordAccessQueue(CKContainer, a2, a3, a4);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    long long v6[2] = sub_18B04716C;
    v6[3] = &unk_1E5461AE8;
    objc_copyWeak(&v8, (id *)(a1 + 56));
    id v7 = *(id *)(a1 + 32);
    dispatch_sync(v5, v6);

    objc_destroyWeak(&v8);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_18B04716C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl(&dword_18AF10000, v3, OS_LOG_TYPE_DEFAULT, "Authorization changed for %@", (uint8_t *)&v11, 0xCu);
    }
    objc_msgSend_setContainerScopedUserID_(WeakRetained, v4, 0, v5);
    objc_msgSend_setOrgAdminUserID_(WeakRetained, v7, 0, v8);
    objc_msgSend_setPushEnvironment_(WeakRetained, v9, 0, v10);
  }
}

void sub_18B047284(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v11) = 0;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Account access authorization refresh completed.", (uint8_t *)&v11, 2u);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v11 = 134217984;
      uint64_t v12 = v7;
      _os_log_impl(&dword_18AF10000, v3, OS_LOG_TYPE_DEFAULT, "Notifying of account change, due to the authorization of %zu containers changing.", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v8 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v4, v5, v6);
    uint64_t v9 = CKAccountChangedNotificationName();
    objc_msgSend_postNotificationName_object_(v8, v10, (uint64_t)v9, 0);
  }
}

void sub_18B0475AC(uint64_t a1, int a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEFAULT, "Account change notification received for all containers", buf, 2u);
  }
  objc_msgSend_sharedManager(CKProcessScopedStateManager, v5, v6, v7);
  uint64_t v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v8);
  if (v8) {
    uint64_t v9 = (void *)v8[2];
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = v9;
  id v14 = objc_msgSend_allObjects(v10, v11, v12, v13);

  objc_sync_exit(v8);
  uint64_t v18 = objc_msgSend_importantUserRecordAccessQueue(CKContainer, v15, v16, v17);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v54 = 3221225472;
  uint64_t v55 = sub_18B047930;
  uint64_t v56 = &unk_1E5460350;
  id v19 = v14;
  id v57 = v19;
  dispatch_sync(v18, &block);

  objc_msgSend_invalidateCachedAccountInfo(CKAccountInfo, v20, v21, v22);
  uint64_t v52 = 0;
  uint32_t state = notify_get_state(a2, (uint64_t *)&v52);
  if (state)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v26 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      int v59 = a2;
      __int16 v60 = 1024;
      uint32_t v61 = state;
      _os_log_error_impl(&dword_18AF10000, v26, OS_LOG_TYPE_ERROR, "Failed to retrieve validation counter with token %d: status %u", buf, 0xEu);
    }
    uint64_t v27 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v27 = v52;
  }
  objc_msgSend_setValidAccountInfoValidationCounterValue_(CKAccountInfo, v23, v27, v24, v52, block, v54, v55, v56);
  uint64_t v28 = v8;
  objc_sync_enter(v28);
  if (!v8) {
    goto LABEL_18;
  }
  if (!v28[8])
  {
    v28[10] = 1;
LABEL_18:
    id v38 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v29, v30, v31);
    uint64_t v39 = *(void **)(a1 + 32);
    uint64_t v43 = sub_18B046744(v39, v40, v41, v42);
    objc_msgSend_addObserver_selector_name_object_(v38, v44, (uint64_t)v39, (uint64_t)sel_connectionBecameInvalid_, @"CKXPCConnectionInterrupted", v43);

    uint64_t v48 = sub_18B046744(*(void **)(a1 + 32), v45, v46, v47);
    objc_msgSend_activate(v48, v49, v50, v51);

    objc_sync_exit(v28);
    uint64_t v35 = v28;
    goto LABEL_19;
  }
  objc_sync_exit(v28);

  uint64_t v35 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v32, v33, v34);
  uint64_t v36 = CKAccountChangedNotificationName();
  objc_msgSend_postNotificationName_object_(v35, v37, (uint64_t)v36, 0);

LABEL_19:
}

void sub_18B047908(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B047930(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v18, (uint64_t)v24, 16);
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = *(void *)v19;
    *(void *)&long long v4 = 138543362;
    long long v17 = v4;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v1);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * v7);
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v9 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v17;
          uint64_t v23 = v8;
          _os_log_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEFAULT, "Account change notification received for %{public}@", buf, 0xCu);
        }
        objc_msgSend_setContainerScopedUserID_(v8, v10, 0, v11, v17, (void)v18);
        objc_msgSend_setOrgAdminUserID_(v8, v12, 0, v13);
        objc_msgSend_setPushEnvironment_(v8, v14, 0, v15);
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v16, (uint64_t)&v18, (uint64_t)v24, 16);
    }
    while (v5);
  }
}

id sub_18B047ADC(uint64_t a1)
{
  if (a1)
  {
    id v1 = objc_opt_new();
    uint64_t v2 = CKSDKVersion();
    objc_msgSend_setClientSDKVersion_(v1, v3, v2, v4);
    uint64_t v5 = objc_opt_new();
    objc_msgSend_setFrameworkFingerprint_(v1, v6, (uint64_t)v5, v7);

    uint64_t IsAppleExecutable = CKMainBundleIsAppleExecutable();
    objc_msgSend_setIsClientMainBundleAppleExecutable_(v1, v9, IsAppleExecutable, v10);
  }
  else
  {
    id v1 = 0;
  }

  return v1;
}

void sub_18B047F4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B048250(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18B048264(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138543618;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while granting access to bundle id %{public}@ containerIdentifiers %@, check your syslog", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t sub_18B048360(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_accountsDidGrantAccessToBundleID_containerIdentifiers_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B0484FC(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18B048510(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138543618;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while revoking access to bundle id %{public}@ containerIdentifiers %@, check your syslog", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t sub_18B04860C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_accountsDidRevokeAccessToBundleID_containerIdentifiers_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B04878C(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B0487A0(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while deleting account %@, check your syslog", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

uint64_t sub_18B0488A8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_accountsWillDeleteAccount_completionHandler_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B048AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
}

void sub_18B048AF4(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while notifying about account change for account %@", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t sub_18B048BE4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_accountWithID_changedWithChangeType_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B048D50(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18B048D64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while fetching usability for test account credentials", v5, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_18B048E30(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_fetchUsabilityForTestAccountCredentials_completionHandler_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B048EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B048ED0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while wiping all caches, check your syslog", v4, 2u);
  }
}

uint64_t sub_18B048F78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_wipeAllCachesAndDie(a2, (const char *)a2, a3, a4);
}

void sub_18B049000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B049014(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while wiping server configurations, check your syslog", v4, 2u);
  }
}

uint64_t sub_18B0490BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_wipeServerConfigurationsAndDie, a3, a4);
}

void sub_18B049144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B049158(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while updating push tokens, check your syslog", v4, 2u);
  }
}

uint64_t sub_18B049200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_updatePushTokens, a3, a4);
}

void sub_18B049310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_18B049324(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_dumpAllClientsStatusReportToFileHandle_completionHandler_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B049468(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_18B04947C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_18B049494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_clearPCSCachesForKnownContainersWithCompletionHandler_, *(void *)(a1 + 32), a4);
}

void sub_18B0495C4(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v7 = a3;
  if (v11)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 48)) {
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    }
    else {
    uint64_t v10 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    }
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_18B0498D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v13 - 64));
  _Unwind_Resume(a1);
}

void sub_18B049900(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error getting proxy for global device identifier: %@", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
}

uint64_t sub_18B0499FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_18B049A70;
  v5[3] = &unk_1E54611F0;
  long long v6 = *(_OWORD *)(a1 + 32);
  return objc_msgSend_globalDeviceIdentifierWithCompletionHandler_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18B049A70(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v8 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_error_impl(&dword_18AF10000, v8, OS_LOG_TYPE_ERROR, "Error fetching global device identifier from daemon: %@", (uint8_t *)&v10, 0xCu);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl(&dword_18AF10000, v9, OS_LOG_TYPE_INFO, "Fetched global device identifier from daemon: %@", (uint8_t *)&v10, 0xCu);
    }
  }
}

void sub_18B049D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18B049D8C(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error getting proxy for max inline mergeable delta size: %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_18B049E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_maxInlineMergeableDeltaSizeWithCompletionHandler_, &unk_1ED7EFD98, a4);
}

void sub_18B049E7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  qword_1E9124D48 = (uint64_t)a2;
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], a2, a3, a4);
  qword_1E912A430 = v4;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v5 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
  {
    int v6 = 134217984;
    uint64_t v7 = qword_1E9124D48;
    _os_log_impl(&dword_18AF10000, v5, OS_LOG_TYPE_INFO, "Fetched max inline delta size from daemon: %ld", (uint8_t *)&v6, 0xCu);
  }
}

void sub_18B04A18C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v2 - 72));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B04A1C4(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      id v6 = WeakRetained;
      _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Warn: Connection became invalid: %@", (uint8_t *)&v5, 0xCu);
    }
    objc_msgSend_setHasValidProcessScopedDaemonProxyCreator_(WeakRetained, v3, 0, v4);
  }
}

void sub_18B04A2B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = *(id *)(a1 + 32);
    objc_sync_enter(v7);
    id v14 = objc_msgSend_processScopedDaemonProxyCreator(*(void **)(a1 + 32), v8, v9, v10);
    if (v14
      && (char hasValidProcessScopedDaemonProxyCreator = objc_msgSend_hasValidProcessScopedDaemonProxyCreator(*(void **)(a1 + 32), v11, v12, v13), v14, (hasValidProcessScopedDaemonProxyCreator & 1) != 0))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v16 = ck_log_facility_ck;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v17 = *(void *)(a1 + 32);
      int v24 = 138412546;
      uint64_t v25 = v17;
      __int16 v26 = 2112;
      id v27 = v5;
      long long v18 = "Ignoring superfluous process proxy for %@: %@";
    }
    else
    {
      objc_msgSend_setProcessScopedDaemonProxyCreator_(*(void **)(a1 + 32), v11, (uint64_t)v5, v13);
      objc_msgSend_setHasValidProcessScopedDaemonProxyCreator_(*(void **)(a1 + 32), v19, 1, v20);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v16 = ck_log_facility_ck;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v21 = *(void *)(a1 + 32);
      int v24 = 138412546;
      uint64_t v25 = v21;
      __int16 v26 = 2112;
      id v27 = v5;
      long long v18 = "Got a process proxy for %@: %@";
    }
    _os_log_impl(&dword_18AF10000, v16, OS_LOG_TYPE_INFO, v18, (uint8_t *)&v24, 0x16u);
LABEL_13:
    objc_sync_exit(v7);

    goto LABEL_18;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v22 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = *(void *)(a1 + 32);
    int v24 = 138412546;
    uint64_t v25 = v23;
    __int16 v26 = 2112;
    id v27 = v6;
    _os_log_impl(&dword_18AF10000, v22, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get process proxy for %@: %@", (uint8_t *)&v24, 0x16u);
  }
LABEL_18:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18B04A550(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B04A5C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED8857B8, a4);
  uint64_t v5 = qword_1EB279B38;
  qword_1EB279B38 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

uint64_t sub_18B04A65C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED854330, a4);
  uint64_t v5 = qword_1EB279B48;
  qword_1EB279B48 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

id CKDeviceSerialNumber()
{
  return sub_18AF1C2A0(@"SerialNumber");
}

id CKDeviceClass()
{
  return sub_18AF1C2A0(@"DeviceClass");
}

void sub_18B04A770()
{
  void v32[5] = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc(MEMORY[0x1E4F1CA60]);
  uint64_t v3 = objc_msgSend_initWithCapacity_(v0, v1, 0, v2);
  uint64_t v4 = (void *)qword_1EB279B58;
  qword_1EB279B58 = v3;

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  v32[0] = @"BuildVersion";
  v32[1] = @"ProductName";
  v32[2] = @"ProductType";
  v32[3] = @"ProductVersion";
  v32[4] = @"DeviceClass";
  id v6 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v5, (uint64_t)v32, 5);
  uint64_t v8 = v6;
  if (!byte_1E9124EF0 || byte_1E912FED0)
  {
    v31[0] = @"UniqueDeviceID";
    v31[1] = @"SerialNumber";
    uint64_t v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v7, (uint64_t)v31, 2);
    objc_msgSend_arrayByAddingObjectsFromArray_(v8, v11, (uint64_t)v10, v12);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v9 = v6;
  }

  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v13, (uint64_t)&v26, (uint64_t)v30, 16);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v27;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v27 != v16) {
          objc_enumerationMutation(v9);
        }
        uint64_t v18 = *(void *)(*((void *)&v26 + 1) + 8 * v17);
        uint64_t v19 = MGCopyAnswer();
        if (!v19)
        {
          uint64_t v23 = [CKException alloc];
          id v25 = (id)objc_msgSend_initWithCode_format_(v23, v24, 1000, @"Error getting %@ from MobileGestalt", v18);
          objc_exception_throw(v25);
        }
        uint64_t v21 = (void *)v19;
        objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1EB279B58, v20, v19, v18);

        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v22, (uint64_t)&v26, (uint64_t)v30, 16);
    }
    while (v15);
  }
}

void *sub_18B04ACEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B04AECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B04AEE4(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B04B070(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B04B250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B04B268(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B04CC08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B04CC24(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class();
  uint64_t v6 = objc_msgSend_copySortDescriptor_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

void sub_18B04CD24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B04CD38(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class();
  uint64_t v6 = objc_msgSend_copySortDescriptor_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

uint64_t sub_18B04E1D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    uint64_t result = objc_msgSend_count(*(void **)(v5 + 24), a2, a3, a4);
  }
  else {
    uint64_t result = objc_msgSend_count(0, a2, a3, a4);
  }
  if (result)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 40);
    if (v9) {
      uint64_t v10 = *(void *)(v9 + 24);
    }
    else {
      uint64_t v10 = 0;
    }
    return objc_msgSend_addProperty_value_shouldRedact_(v8, v7, @"subscriptionInfos", v10, 0);
  }
  return result;
}

void sub_18B04E314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B04E32C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[6];
  }
  uint64_t v6 = v2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (unint64_t)objc_msgSend_count(v6, v3, v4, v5) > 1;
}

void sub_18B04E458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B04E470(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_18B04E57C(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 8) != *(unsigned __int8 *)(a1 + 40))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v2 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(unsigned __int8 *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 32);
      v8[0] = 67109378;
      v8[1] = v6;
      __int16 v9 = 2112;
      uint64_t v10 = v7;
      _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Setting useOpportunisticPushTopics=%d for %@", (uint8_t *)v8, 0x12u);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x230], 8) = *(unsigned char *)(a1 + 40);
    sub_18B04E690(*(void *)(a1 + 32), v3, v4, v5);
  }
}

void sub_18B04E690(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = objc_msgSend_queue((void *)a1, a2, a3, a4);
    dispatch_assert_queue_V2(v5);

    __int16 v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v6, v7, v8);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v13 = objc_msgSend_allKeys(*(void **)(a1 + 48), v10, v11, v12);
    uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v34, (uint64_t)v38, 16);
    if (v15)
    {
      uint64_t v19 = v15;
      uint64_t v20 = *(void *)v35;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v35 != v20) {
            objc_enumerationMutation(v13);
          }
          uint64_t v22 = *(void *)(*((void *)&v34 + 1) + 8 * v21);
          uint64_t v23 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v16, v17, v18);
          objc_msgSend_setObject_forKeyedSubscript_(v9, v24, (uint64_t)v23, v22);

          ++v21;
        }
        while (v19 != v21);
        uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v34, (uint64_t)v38, 16);
      }
      while (v19);
    }

    id v25 = *(void **)(a1 + 24);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_18B04F86C;
    v32[3] = &unk_1E5462098;
    id v33 = v9;
    id v26 = v9;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v25, v27, (uint64_t)v32, v28);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    void v31[2] = sub_18B04FAB4;
    v31[3] = &unk_1E54620C0;
    void v31[4] = a1;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v26, v29, (uint64_t)v31, v30);
  }
}

void sub_18B04EC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v27 - 144));
  _Unwind_Resume(a1);
}

void sub_18B04EC90(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (!a2) {
    a2 = (void *)*MEMORY[0x1E4F4E1D0];
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = v2;
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void sub_18B04ED04(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = ck_log_facility_notification_listener;
  if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v17 = 138412802;
    uint64_t v18 = v3;
    __int16 v19 = 2112;
    uint64_t v20 = v4;
    __int16 v21 = 2112;
    uint64_t v22 = v5;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Starting to listen to subscription %@ for database %@ in %@", (uint8_t *)&v17, 0x20u);
  }
  int v6 = objc_alloc_init(CKSubscriptionInfo);
  p_Class isa = (id *)&v6->super.isa;
  if (v6)
  {
    objc_setProperty_nonatomic_copy(v6, v7, *(id *)(a1 + 32), 40);
    objc_storeStrong(p_isa + 1, *(id *)(a1 + 40));
    objc_storeStrong(p_isa + 2, *(id *)(a1 + 56));
    objc_storeStrong(p_isa + 3, *(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40));
    objc_setProperty_nonatomic_copy(p_isa, v9, *(id *)(a1 + 64), 32);
  }
  uint64_t v11 = objc_msgSend_uniqueKeyForSubscriptionID_inDatabase_(*(void **)(a1 + 48), v7, *(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v12 + 24), v10, (uint64_t)p_isa, (uint64_t)v11);
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(0, v10, (uint64_t)p_isa, (uint64_t)v11);
  }
  sub_18B04EEB8(*(void **)(a1 + 48), v13, v14, v15);
  uint64_t v16 = *(void *)(a1 + 72);
  if (v16) {
    (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0);
  }
}

void sub_18B04EEB8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = objc_msgSend_queue(a1, a2, a3, a4);
    dispatch_assert_queue_V2(v5);

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v6 = (void *)ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = a1[3];
      int v16 = 138412290;
      uint64_t v17 = v14;
      uint64_t v15 = v6;
      _os_log_debug_impl(&dword_18AF10000, v15, OS_LOG_TYPE_DEBUG, "Updating push notification listeners for subscription infos: %@", (uint8_t *)&v16, 0xCu);
    }
    uint64_t v10 = a1[7];
    if (v10 == 1)
    {
      uint64_t v11 = objc_msgSend_sharedPushRegistry(CKPKPushRegistry, v7, v8, v9);
      objc_msgSend_addDelegate_(v11, v12, (uint64_t)a1, v13);
    }
    else if (!v10)
    {
      sub_18B04E690((uint64_t)a1, v7, v8, v9);
    }
  }
}

void sub_18B04F208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

void sub_18B04F21C(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = ck_log_facility_notification_listener;
  if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v15 = 138412802;
    uint64_t v16 = v4;
    __int16 v17 = 2112;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    uint64_t v20 = v6;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Stopping listening to subscription %@ for database %@ in %@", (uint8_t *)&v15, 0x20u);
  }
  uint64_t v9 = objc_msgSend_uniqueKeyForSubscriptionID_inDatabase_(*(void **)(a1 + 48), v3, *(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    objc_msgSend_removeObjectForKey_(*(void **)(v10 + 24), v7, (uint64_t)v9, v8);
  }
  else {
    objc_msgSend_removeObjectForKey_(0, v7, (uint64_t)v9, v8);
  }
  sub_18B04EEB8(*(void **)(a1 + 48), v11, v12, v13);
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    (*(void (**)(uint64_t, void))(v14 + 16))(v14, 0);
  }
}

void sub_18B04F470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B04F488(uint64_t a1, const char *a2)
{
  objc_msgSend_uniqueKeyForSubscriptionID_inDatabase_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48));
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    uint64_t v3 = (void *)v3[3];
  }
  uint64_t v4 = v3;
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)v8, v6);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v7 != 0;
}

void sub_18B04F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B04F7F8(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2) {
    id v2 = (void *)v2[6];
  }
  uint64_t v3 = a1[5];
  uint64_t v9 = v2;
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v9, v4, v3, v5);
  uint64_t v7 = *(void *)(a1[6] + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_18B04F86C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = (void *)v4[2];
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;
  uint64_t v11 = objc_msgSend_applicationBundleIdentifierForPush(v7, v8, v9, v10);

  if (v11)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v12 = (void *)ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      if (v5) {
        uint64_t v28 = v5[5];
      }
      else {
        uint64_t v28 = 0;
      }
      *(_DWORD *)uint64_t v30 = 138543618;
      *(void *)&void v30[4] = v11;
      *(_WORD *)&v30[12] = 2112;
      *(void *)&v30[14] = v28;
      long long v29 = v12;
      _os_log_debug_impl(&dword_18AF10000, v29, OS_LOG_TYPE_DEBUG, "Using bundle identifier %{public}@ for push notifications for subscription: %@", v30, 0x16u);
    }
    int v15 = *(void **)(a1 + 32);
    if (v5) {
      objc_msgSend_objectForKeyedSubscript_(v15, v13, v5[3], v14, *(_OWORD *)v30, *(void *)&v30[16], v31);
    }
    else {
    __int16 v19 = objc_msgSend_objectForKeyedSubscript_(v15, v13, 0, v14, *(void *)v30, *(_OWORD *)&v30[8], v31);
    }
    if (!v19)
    {
      __int16 v19 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v16, v17, v18);
      uint64_t v21 = *(void **)(a1 + 32);
      if (v5) {
        objc_msgSend_setObject_forKeyedSubscript_(v21, v20, (uint64_t)v19, v5[3]);
      }
      else {
        objc_msgSend_setObject_forKeyedSubscript_(v21, v20, (uint64_t)v19, 0);
      }
    }
    uint64_t v22 = objc_msgSend_stringByAppendingString_(@"com.apple.icloud-container.", v16, (uint64_t)v11, v18);
    objc_msgSend_addObject_(v19, v23, (uint64_t)v22, v24);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v25 = (void *)ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
    {
      if (v5) {
        uint64_t v26 = v5[5];
      }
      else {
        uint64_t v26 = 0;
      }
      *(_DWORD *)uint64_t v30 = 138412290;
      *(void *)&void v30[4] = v26;
      uint64_t v27 = v25;
      _os_log_impl(&dword_18AF10000, v27, OS_LOG_TYPE_INFO, "No container bundle ID for push notifications for subscription: %@", v30, 0xCu);
    }
  }
}

void sub_18B04FAB4(uint64_t a1, void *a2, void *a3)
{
  v122[2] = *(id *)MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v108 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6) {
    uint64_t v6 = (void *)v6[6];
  }
  id v7 = v6;
  __int16 v107 = v5;
  uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(v7, v8, (uint64_t)v5, v9);

  if (objc_msgSend_count(v108, v11, v12, v13) && !v10)
  {
    uint64_t v17 = objc_msgSend_machServiceName(*(void **)(a1 + 32), v14, v15, v16);

    if (v17)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v18 = (void *)ck_log_facility_notification_listener;
      if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v95 = *(void **)(a1 + 32);
        uint64_t v96 = v18;
        uint64_t v100 = objc_msgSend_machServiceName(v95, v97, v98, v99);
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v100;
        _os_log_debug_impl(&dword_18AF10000, v96, OS_LOG_TYPE_DEBUG, "Creating APS connection with mach service name %{public}@", buf, 0xCu);
      }
      uint64_t v22 = (void *)MEMORY[0x1E4F4E1E8];
      uint64_t v23 = objc_msgSend_machServiceName(*(void **)(a1 + 32), v19, v20, v21);
      id v25 = objc_msgSend_ck_singletonConnectionForEnvironmentName_namedDelegatePort_(v22, v24, (uint64_t)v107, (uint64_t)v23);

      uint64_t v27 = *(void *)(a1 + 32);
      if (v27)
      {
        objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v27 + 48), v26, (uint64_t)v25, (uint64_t)v107);
LABEL_12:
        uint64_t v28 = *(void **)(a1 + 32);
        uint64_t v10 = v25;
        if (v28)
        {
          uint64_t v32 = objc_msgSend_queue(v28, v29, v30, v31);
          dispatch_assert_queue_V2(v32);

          long long v36 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v33, v34, v35);
          objc_initWeak(&location, v28);
          uint64_t v40 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v37, v38, v39);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_18B0502AC;
          uint64_t v120 = &unk_1E54620E8;
          objc_copyWeak(v122, &location);
          uint64_t v41 = v10;
          uint64_t v121 = v41;
          uint64_t v43 = objc_msgSend_addObserverForName_object_queue_usingBlock_(v40, v42, @"CKAPSMachServiceConnectionDidReceivePublicTokenNotification", (uint64_t)v41, 0, buf);

          objc_msgSend_addObject_(v36, v44, (uint64_t)v43, v45);
          uint64_t v49 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v46, v47, v48);
          v115[0] = MEMORY[0x1E4F143A8];
          v115[1] = 3221225472;
          v115[2] = sub_18B050330;
          v115[3] = &unk_1E54620E8;
          objc_copyWeak(&v117, &location);
          uint64_t v50 = v41;
          uint64_t v116 = v50;
          uint64_t v52 = objc_msgSend_addObserverForName_object_queue_usingBlock_(v49, v51, @"CKAPSMachServiceConnectionDidReceiveIncomingMessageNotification", (uint64_t)v50, 0, v115);

          objc_msgSend_addObject_(v36, v53, (uint64_t)v52, v54);
          long long v58 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v55, v56, v57);
          v112[0] = MEMORY[0x1E4F143A8];
          v112[1] = 3221225472;
          v112[2] = sub_18B0503B4;
          v112[3] = &unk_1E54620E8;
          objc_copyWeak(&v114, &location);
          int v59 = v50;
          uint64_t v113 = v59;
          uint32_t v61 = objc_msgSend_addObserverForName_object_queue_usingBlock_(v58, v60, @"CKAPSMachServiceConnectionDidChangeConnectedStatusNotification", (uint64_t)v59, 0, v112);

          objc_msgSend_addObject_(v36, v62, (uint64_t)v61, v63);
          long long v67 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v64, v65, v66);
          v109[0] = MEMORY[0x1E4F143A8];
          v109[1] = 3221225472;
          v109[2] = sub_18B050448;
          v109[3] = &unk_1E54620E8;
          objc_copyWeak(&v111, &location);
          uint64_t v110 = v59;
          long long v69 = objc_msgSend_addObserverForName_object_queue_usingBlock_(v67, v68, @"CKAPSMachServiceConnectionDidReconnectNotification", (uint64_t)v110, 0, v109);

          objc_msgSend_addObject_(v36, v70, (uint64_t)v69, v71);
          uint64_t v78 = objc_msgSend_notificationObservers(v28, v72, v73, v74);
          uint64_t v79 = v78;
          if (!v78)
          {
            uint64_t v79 = objc_msgSend_array(MEMORY[0x1E4F1C978], v75, v76, v77);
          }
          uint64_t v80 = objc_msgSend_arrayByAddingObjectsFromArray_(v79, v75, (uint64_t)v36, v77);
          objc_msgSend_setNotificationObservers_(v28, v81, (uint64_t)v80, v82);

          if (!v78) {
          objc_destroyWeak(&v111);
          }

          objc_destroyWeak(&v114);
          objc_destroyWeak(&v117);

          objc_destroyWeak(v122);
          objc_destroyWeak(&location);
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v25 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_18AF10000, v25, OS_LOG_TYPE_ERROR, "BUG IN CLIENT OF CLOUDKIT: When using CKNotificationListener in a daemon, you must supply an APS mach service name to -[CKNotificationListener initWithMachServiceName:]. Otherwise, your process won't be launched for push notifications. See header comments in CKNotificationListener_Private.h.", buf, 2u);
      }
      uint64_t v103 = objc_msgSend_stringWithFormat_(NSString, v101, @"BUG IN CLIENT OF CLOUDKIT: When using CKNotificationListener in a daemon, you must supply an APS mach service name to -[CKNotificationListener initWithMachServiceName:]. Otherwise, your process won't be launched for push notifications. See header comments in CKNotificationListener_Private.h.", v102);
      objc_msgSend_UTF8String(v103, v104, v105, v106);
      _os_crash();
      __break(1u);
    }
    objc_msgSend_setObject_forKeyedSubscript_(0, v26, (uint64_t)v25, (uint64_t)v107);
    goto LABEL_12;
  }
LABEL_19:
  if (v10)
  {
    id v83 = v10;
    objc_sync_enter(v83);
    if (objc_msgSend_useOpportunisticPushTopics(*(void **)(a1 + 32), v84, v85, v86))
    {
      uint64_t v90 = objc_msgSend_allObjects(v108, v87, v88, v89);
      uint64_t v91 = 0;
      objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_(v83, v92, 0, 0, v90, 0);
    }
    else
    {
      uint64_t v91 = objc_msgSend_allObjects(v108, v87, v88, v89);
      uint64_t v90 = 0;
      objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_(v83, v93, (uint64_t)v91, 0, 0, 0);
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v94 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v91;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v90;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v120 = v83;
      _os_log_debug_impl(&dword_18AF10000, v94, OS_LOG_TYPE_DEBUG, "Setting enabled topics %@, opportunistic topics %@ on %@", buf, 0x20u);
    }

    objc_sync_exit(v83);
  }
}

void sub_18B0501F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  objc_sync_exit(v32);
  _Unwind_Resume(a1);
}

void sub_18B0502AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_userInfo(a2, (const char *)a2, a3, a4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, @"publicToken", v7);
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connection_didReceivePublicToken_(WeakRetained, v9, *(void *)(a1 + 32), (uint64_t)v10);
}

void sub_18B050330(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_userInfo(a2, (const char *)a2, a3, a4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, @"message", v7);
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connection_didReceiveIncomingMessage_(WeakRetained, v9, *(void *)(a1 + 32), (uint64_t)v10);
}

void sub_18B0503B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_userInfo(a2, (const char *)a2, a3, a4);
  id v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, @"connected", v7);
  uint64_t v12 = objc_msgSend_BOOLValue(v8, v9, v10, v11);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connection_didChangeConnectedStatus_(WeakRetained, v13, *(void *)(a1 + 32), v12);
}

void sub_18B050448(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connectionDidReconnect_(WeakRetained, v2, *(void *)(a1 + 32), v3);
}

void sub_18B0507EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B05080C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v10 = a2;
  if (objc_msgSend_isEqual_(a3, v8, *(void *)(a1 + 32), v9))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_18B0509D4(uint64_t a1)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  group = dispatch_group_create();
  uint64_t v63 = objc_msgSend_notificationFromRemoteNotificationDictionary_(CKNotification, v2, *(void *)(a1 + 32), v3);
  uint64_t v4 = (void *)&property descriptor for CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration;
  if (v63)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v5 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v61 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v93 = 138412546;
      *(void *)&v93[4] = v63;
      *(_WORD *)&v93[12] = 2112;
      *(void *)&v93[14] = v61;
      _os_log_debug_impl(&dword_18AF10000, v5, OS_LOG_TYPE_DEBUG, "Received CKNotification: %@ for %@", v93, 0x16u);
    }
    uint64_t v6 = *(void **)(a1 + 40);
    if (v6) {
      uint64_t v6 = (void *)v6[3];
    }
    uint64_t v7 = v6;
    uint64_t v11 = objc_msgSend_allValues(v7, v8, v9, v10);
    v86[0] = MEMORY[0x1E4F143A8];
    v86[1] = 3221225472;
    v86[2] = sub_18B051154;
    v86[3] = &unk_1E5462138;
    id v87 = *(id *)(a1 + 48);
    id v12 = v63;

    id v88 = v12;
    uint64_t v62 = objc_msgSend_CKFilter_(v11, v13, (uint64_t)v86, v14);

    if (objc_msgSend_count(v62, v15, v16, v17))
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      obunint64_t j = v62;
      uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v18, (uint64_t)&v82, (uint64_t)v95, 16);
      if (v67)
      {
        uint64_t v66 = *(void *)v83;
        do
        {
          uint64_t v19 = 0;
          do
          {
            if (*(void *)v83 != v66) {
              objc_enumerationMutation(obj);
            }
            uint64_t v20 = *(void *)(*((void *)&v82 + 1) + 8 * v19);
            uint64_t v21 = dispatch_group_create();
            *(void *)uint64_t v93 = 0;
            *(void *)&v93[8] = v93;
            *(void *)&v93[16] = 0x2020000000;
            char v94 = 0;
            id v25 = objc_msgSend_testDeviceID(v12, v22, v23, v24);
            if (v20) {
              uint64_t v26 = *(void **)(v20 + 16);
            }
            else {
              uint64_t v26 = 0;
            }
            id v27 = v26;
            uint64_t v31 = objc_msgSend_deviceContext(v27, v28, v29, v30);
            uint64_t v35 = objc_msgSend_testDeviceReferenceProtocol(v31, v32, v33, v34);
            uint64_t v39 = objc_msgSend_deviceID(v35, v36, v37, v38);

            if (CKObjectsAreBothNilOrEqual(v25, v39))
            {
              uint64_t v43 = objc_msgSend_subscriptionOwnerUserRecordID(v12, v40, v41, v42);
              BOOL v44 = v43 == 0;

              if (v44)
              {
                if (ck_log_initialization_predicate != -1) {
                  dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
                }
                uint64_t v54 = ck_log_facility_notification_listener;
                if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_debug_impl(&dword_18AF10000, v54, OS_LOG_TYPE_DEBUG, "No user record ID in notification", buf, 2u);
                }
                *(unsigned char *)(*(void *)&v93[8] + 24) = 1;
              }
              else
              {
                dispatch_group_enter(group);
                dispatch_group_enter(v21);
                if (ck_log_initialization_predicate != -1) {
                  dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
                }
                uint64_t v45 = (id)ck_log_facility_notification_listener;
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                {
                  long long v58 = objc_msgSend_subscriptionOwnerUserRecordID(v12, v46, v47, v48);
                  *(_DWORD *)buf = 138412546;
                  uint64_t v90 = v58;
                  __int16 v91 = 2112;
                  uint64_t v92 = v20;
                  _os_log_debug_impl(&dword_18AF10000, v45, OS_LOG_TYPE_DEBUG, "Checking notification's user record ID %@ against container user record ID for %@", buf, 0x16u);
                }
                if (v20) {
                  uint64_t v49 = *(void **)(v20 + 16);
                }
                else {
                  uint64_t v49 = 0;
                }
                id v50 = v49;
                v77[0] = MEMORY[0x1E4F143A8];
                v77[1] = 3221225472;
                v77[2] = sub_18B0512A8;
                v77[3] = &unk_1E5462160;
                v77[4] = v20;
                uint64_t v81 = v93;
                id v78 = v12;
                uint64_t v79 = group;
                uint64_t v80 = v21;
                objc_msgSend_fetchUserRecordIDWithCompletionHandler_(v50, v51, (uint64_t)v77, v52);
              }
            }
            else
            {
              if (ck_log_initialization_predicate != -1) {
                dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
              }
              uint64_t v53 = ck_log_facility_notification_listener;
              if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl(&dword_18AF10000, v53, OS_LOG_TYPE_DEBUG, "Notification was destined for a different test device", buf, 2u);
              }
              *(unsigned char *)(*(void *)&v93[8] + 24) = 0;
            }
            uint64_t v55 = *(void *)(a1 + 40);
            if (v55) {
              uint64_t v56 = *(NSObject **)(v55 + 40);
            }
            else {
              uint64_t v56 = 0;
            }
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = sub_18B05153C;
            block[3] = &unk_1E5462188;
            uint64_t v76 = v93;
            id v72 = v12;
            id v73 = *(id *)(a1 + 32);
            uint64_t v74 = v20;
            id v75 = *(id *)(a1 + 56);
            dispatch_group_notify(v21, v56, block);

            _Block_object_dispose(v93, 8);
            ++v19;
          }
          while (v67 != v19);
          uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v82, (uint64_t)v95, 16);
          uint64_t v67 = v59;
        }
        while (v59);
      }
    }
    uint64_t v4 = &property descriptor for CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration;
  }
  __int16 v60 = dispatch_get_global_queue(0, 0);
  v68[0] = MEMORY[0x1E4F143A8];
  v68[1] = v4[268];
  v68[2] = sub_18B0517E0;
  v68[3] = &unk_1E54621B0;
  id v70 = *(id *)(a1 + 64);
  id v69 = *(id *)(a1 + 56);
  dispatch_group_notify(group, v60, v68);
}