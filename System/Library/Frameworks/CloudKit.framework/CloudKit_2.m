void sub_18B05112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B051154(uint64_t a1, void *a2)
{
  id v5 = a2;
  v6 = *(void **)(a1 + 32);
  if (v6
    && (!v5
      ? (int isEqualToString = objc_msgSend_isEqualToString_(v6, v3, 0, v4))
      : (int isEqualToString = objc_msgSend_isEqualToString_(v6, v3, *((void *)v5 + 3), v4)),
        !isEqualToString)
    || objc_msgSend_conformsToProtocol_(*(void **)(a1 + 40), v3, (uint64_t)&unk_1ED868AA0, v4)
    && ((uint64_t v14 = objc_msgSend_databaseScope(*(void **)(a1 + 40), v8, v9, v10), !v5)
      ? (uint64_t v15 = objc_msgSend_databaseScope(0, v11, v12, v13))
      : (uint64_t v15 = objc_msgSend_databaseScope(*((void **)v5 + 1), v11, v12, v13)),
        v14 != v15))
  {
    uint64_t isEqual = 0;
  }
  else
  {
    if (v5) {
      v16 = (void *)*((void *)v5 + 5);
    }
    else {
      v16 = 0;
    }
    id v17 = v16;
    v21 = objc_msgSend_subscriptionID(*(void **)(a1 + 40), v18, v19, v20);
    if (objc_msgSend_isEqual_(v17, v22, (uint64_t)v21, v23))
    {
      if (v5) {
        v24 = (void *)*((void *)v5 + 1);
      }
      else {
        v24 = 0;
      }
      id v25 = v24;
      v29 = objc_msgSend_container(v25, v26, v27, v28);
      v33 = objc_msgSend_containerID(v29, v30, v31, v32);
      v37 = objc_msgSend_containerID(*(void **)(a1 + 40), v34, v35, v36);

      uint64_t isEqual = objc_msgSend_isEqual_(v33, v38, (uint64_t)v37, v39);
    }
    else
    {
      uint64_t isEqual = 0;
    }
  }
  return isEqual;
}

void sub_18B0512A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v9 = a3;
  if (v5)
  {
    uint64_t v10 = objc_msgSend_subscriptionOwnerUserRecordID(*(void **)(a1 + 40), v6, v7, v8);
    int isEqual = objc_msgSend_isEqual_(v10, v11, (uint64_t)v5, v12);

    if (isEqual)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v14 = ck_log_facility_notification_listener;
      if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void **)(a1 + 32);
        int v27 = 138412290;
        id v28 = v19;
        _os_log_debug_impl(&dword_18AF10000, v14, OS_LOG_TYPE_DEBUG, "Container user is equal to subscription user for %@", (uint8_t *)&v27, 0xCu);
      }
      char v15 = 1;
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      v18 = (void *)ck_log_facility_notification_listener;
      if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = *(void **)(a1 + 40);
        v21 = v18;
        id v25 = objc_msgSend_subscriptionOwnerUserRecordID(v20, v22, v23, v24);
        uint64_t v26 = *(void *)(a1 + 32);
        int v27 = 138412802;
        id v28 = v5;
        __int16 v29 = 2112;
        id v30 = v25;
        __int16 v31 = 2112;
        uint64_t v32 = v26;
        _os_log_debug_impl(&dword_18AF10000, v21, OS_LOG_TYPE_DEBUG, "Container user %@ is not equal to subscription user %@ for %@", (uint8_t *)&v27, 0x20u);
      }
      char v15 = 0;
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    v16 = ck_log_facility_notification_listener;
    char v15 = 1;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
    {
      id v17 = *(void **)(a1 + 32);
      int v27 = 138412546;
      id v28 = v17;
      __int16 v29 = 2112;
      id v30 = v9;
      _os_log_impl(&dword_18AF10000, v16, OS_LOG_TYPE_INFO, "Couldn't fetch user record ID to compare to notification for %@: %@", (uint8_t *)&v27, 0x16u);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v15;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_18B05153C(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1[8] + 8) + 24))
  {
    v2 = _os_activity_create(&dword_18AF10000, "client/notification-listener-receive", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    v21.opaque[0] = 0;
    v21.opaque[1] = 0;
    os_activity_scope_enter(v2, &v21);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    v3 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      id v5 = (void *)a1[5];
      *(_DWORD *)buf = 138412546;
      uint64_t v23 = v4;
      __int16 v24 = 2114;
      id v25 = v5;
      _os_log_impl(&dword_18AF10000, v3, OS_LOG_TYPE_DEFAULT, "Running handler for notification %@: %{public}@", buf, 0x16u);
    }
    uint64_t v6 = a1[6];
    if (v6)
    {
      id v7 = *(id *)(v6 + 32);
      if (v7)
      {
        uint64_t v8 = a1[6];
        if (v8)
        {
          BOOL v9 = *(void *)(v8 + 40) == 0;

          if (!v9)
          {
            uint64_t v10 = (void *)a1[6];
            if (v10) {
              uint64_t v10 = (void *)v10[4];
            }
            v11 = v10;
            uint64_t v12 = a1[4];
            uint64_t v13 = (void *)a1[6];
            if (v13) {
              uint64_t v13 = (void *)v13[5];
            }
            uint64_t v14 = v13;
            ((void (*)(NSObject *, uint64_t, void *))v11[2].isa)(v11, v12, v14);

LABEL_19:
            os_activity_scope_leave(&v21);

            return;
          }
        }
        else
        {
        }
      }
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    v11 = (id)ck_log_facility_notification_listener;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = a1[6];
      if (v15) {
        v16 = *(void **)(v15 + 32);
      }
      else {
        v16 = 0;
      }
      id v17 = v16;
      v18 = _Block_copy(v17);
      uint64_t v19 = v18;
      uint64_t v20 = a1[6];
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 40);
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v23 = v15;
      __int16 v24 = 2048;
      id v25 = v18;
      __int16 v26 = 2048;
      uint64_t v27 = v20;
      _os_log_error_impl(&dword_18AF10000, v11, OS_LOG_TYPE_ERROR, "Tried to notify for info %@, but a necessary property is missing: %p %p", buf, 0x20u);
    }
    goto LABEL_19;
  }
}

void sub_18B0517C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_18B0517E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_18B051B0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B052134(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0521E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B052918(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B052E3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKDPOneTimeFullTokenInfoReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
      }
      else
      {
        if (v17 == 2)
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0) {
              goto LABEL_34;
            }
            v21 += 7;
            BOOL v14 = v22++ >= 9;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_36;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 24) = v23;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
      }
      uint64_t v20 = *(void **)(a1 + v19);
      *(void *)(a1 + v19) = v18;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordReferenceReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = objc_alloc_init(CKDPRecordIdentifier);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !CKDPRecordIdentifierReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_18B054F08(id *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v2 = a1[4];
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v39, (uint64_t)v45, 16);
  if (v4)
  {
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)v40;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v40 != v9) {
          objc_enumerationMutation(v2);
        }
        uint64_t v11 = objc_msgSend_dbTableName(*(void **)(*((void *)&v39 + 1) + 8 * v10), v5, v6, v7, (void)v39);
        id v14 = (id)objc_msgSend_dropTable_(a1[5], v12, (uint64_t)v11, v13);
        objc_msgSend_addObject_(a1[6], v15, (uint64_t)v11, v16);

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v39, (uint64_t)v45, 16);
    }
    while (v8);
  }

  v43 = @"GROUPID";
  uint64_t v20 = objc_msgSend_groupID(a1[7], v17, v18, v19);
  v44 = v20;
  char v22 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v21, (uint64_t)&v44, (uint64_t)&v43, 1);

  objc_msgSend_deleteEntriesMatching_label_error_predicate_(a1[8], v23, (uint64_t)v22, 0, 0, &unk_1ED7EEFD8);
  objc_msgSend_removeValidatedTableGroup_(a1[5], v24, (uint64_t)a1[7], v25);
  id v28 = (id)objc_msgSend_deleteObject_(a1[9], v26, (uint64_t)a1[7], v27);
  uint64_t v32 = objc_msgSend_keyValueCleaner(a1[5], v29, v30, v31);
  uint64_t v36 = objc_msgSend_name(a1[7], v33, v34, v35);
  objc_msgSend_purgeKeyValuePropertiesForGroupName_tableNames_(v32, v37, (uint64_t)v36, (uint64_t)a1[6]);

  return 0;
}

uint64_t sub_18B0550EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"groupID = $GROUPID", a4);
}

id sub_18B055420(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_tocTableGroupTable(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v11 = objc_msgSend_invalidateGroup_(v5, v6, *(void *)(a1 + 32), v7);
  if (!v11)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 96) = 1;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    unint64_t v12 = objc_msgSend_allTables(*(void **)(a1 + 32), v8, v9, v10, 0);
    uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v21, (uint64_t)v25, 16);
    if (v14)
    {
      uint64_t v17 = v14;
      uint64_t v18 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v22 != v18) {
            objc_enumerationMutation(v12);
          }
          objc_msgSend_deleteAllEntries_(*(void **)(*((void *)&v21 + 1) + 8 * i), v15, 0, v16);
        }
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v15, (uint64_t)&v21, (uint64_t)v25, 16);
      }
      while (v17);
    }
  }

  return v11;
}

uint64_t sub_18B0557CC(void **a1)
{
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  uint64_t v27 = sub_18AF13BC4;
  id v28 = sub_18AF13878;
  id v29 = 0;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_18B055958;
  v21[3] = &unk_1E54622B0;
  long long v23 = &v24;
  id v2 = a1[4];
  id v22 = a1[5];
  objc_msgSend_usingTableGroupCachePerformBlock_(v2, v3, (uint64_t)v21, v4);
  uint64_t v7 = v25[5];
  if (v7)
  {
    objc_msgSend_purgeGroup_(a1[6], v5, v7, v6);
  }
  else
  {
    uint64_t v8 = objc_msgSend_tocTableGroup(a1[4], v5, 0, v6);
    unint64_t v12 = objc_msgSend_tocTableGroupTable(v8, v9, v10, v11);
    uint64_t v13 = (uint64_t)a1[5];
    id v20 = 0;
    int v15 = objc_msgSend_entryWithGroupName_error_(v12, v14, v13, (uint64_t)&v20);
    id v16 = v20;
    objc_msgSend_deleteTables_(v15, v17, (uint64_t)a1[4], v18);
  }
  _Block_object_dispose(&v24, 8);

  return 0;
}

void sub_18B055934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B055958(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_objectForKey_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return MEMORY[0x1F41817F8](v5, v7);
}

void sub_18B055DB8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = a3;
  id v8 = a2;
  objc_msgSend_valueForProperty_propertyInfo_inObject_(v5, v9, (uint64_t)v8, (uint64_t)v7, v6);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 32), v10, (uint64_t)v11, (uint64_t)v8, v7, *(void *)(a1 + 48));
}

void sub_18B055F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B055F9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_objectForKey_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return MEMORY[0x1F41817F8](v5, v7);
}

unsigned char *sub_18B055FEC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = (objc_class *)self;
  uint64_t v14 = objc_msgSend_tocTableGroup(v8, v11, v12, v13);
  uint64_t v18 = objc_msgSend_tocTableGroupTable(v14, v15, v16, v17);
  if ((a4 & 0x10000) != 0)
  {
    id v24 = 0;
    uint64_t v25 = 0;
    goto LABEL_16;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v19 = ck_log_facility_sql;
  if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG))
  {
    int v42 = 138543362;
    id v43 = v9;
    _os_log_debug_impl(&dword_18AF10000, v19, OS_LOG_TYPE_DEBUG, "Creating new table group: %{public}@.", (uint8_t *)&v42, 0xCu);
  }
  if (objc_msgSend_containsString_(v9, v20, @"'", v21))
  {
    uint64_t v23 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v22, @"CKErrorDomain", 12, @"table group name contains invalid characters");
    if (v23)
    {
      id v24 = (id)v23;
      uint64_t v25 = 0;
      if (!a5) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
  id v26 = [v10 alloc];
  uint64_t v25 = (unsigned char *)objc_msgSend_initWithName_options_database_(v26, v27, (uint64_t)v9, a4, v8);
  uint64_t v31 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v28, v29, v30);
  objc_msgSend_setLastUsed_(v25, v32, (uint64_t)v31, v33);

  uint64_t v34 = NSStringFromClass(v10);
  objc_msgSend_setCreatingClass_(v25, v35, (uint64_t)v34, v36);

  objc_msgSend_insertObject_(v18, v37, (uint64_t)v25, v38);
  id v24 = (id)objc_claimAutoreleasedReturnValue();
  if (!v24) {
    objc_msgSend_tableGroupPassedValidation_(v8, v39, (uint64_t)v25, v40);
  }
  v25[97] = 1;
  if (a5)
  {
LABEL_14:
    if (v24)
    {
      id v24 = v24;
      *a5 = v24;
    }
  }
LABEL_16:

  return v25;
}

void sub_18B0564B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19)
  {
    v19[1].__sig = 0;
    pthread_mutex_unlock(v19);
  }
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

id sub_18B0564EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_tocTableGroup(*(void **)(a1 + 32), a2, a3, a4);
  id v9 = objc_msgSend_tocTableGroupTable(v5, v6, v7, v8);
  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 64);
  id v12 = *(id *)(a1 + 32);
  id v13 = v10;
  uint64_t v14 = self;
  id v87 = 0;
  uint64_t v16 = objc_msgSend_groupEntryInDatabase_withGroupName_error_(v14, v15, (uint64_t)v12, (uint64_t)v13, &v87);

  id v17 = v87;
  uint64_t v19 = v17;
  if (v17 || !v16)
  {
    if (v17) {
      id v34 = v17;
    }
    else {
      id v34 = 0;
    }
    id v20 = 0;
  }
  else
  {
    id v20 = objc_msgSend_tableGroupWithEntry_database_options_(v14, v18, (uint64_t)v16, (uint64_t)v12, v11);
    if (v20 && (uint64_t v21 = objc_opt_class(), objc_msgSend_rebootShouldClearData(v21, v22, v23, v24)))
    {
      v81 = v9;
      uint64_t v25 = CKBootDate();
      uint64_t v29 = objc_msgSend_lastUsed(v20, v26, v27, v28);
      uint64_t v32 = objc_msgSend_compare_(v25, v30, (uint64_t)v29, v31);

      if (v32 == 1)
      {
        objc_msgSend_expireGroup_reason_database_(v14, v33, (uint64_t)v20, @"rebooted", v12);

        id v20 = 0;
      }

      id v34 = 0;
      id v9 = v81;
    }
    else
    {
      id v34 = 0;
    }
  }

  uint64_t v35 = (uint64_t)v34;
  uint64_t v36 = *(void *)(*(void *)(a1 + 48) + 8);
  v37 = *(void **)(v36 + 40);
  *(void *)(v36 + 40) = v20;

  unint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (!(v41 | v35))
  {
    int v42 = *(void **)(a1 + 32);
    id v43 = *(void **)(a1 + 40);
    uint64_t v44 = *(void *)(a1 + 56);
    uint64_t v45 = *(void *)(a1 + 64);
    id v86 = 0;
    uint64_t v46 = sub_18B055FEC(v44, v42, v43, v45, &v86);
    uint64_t v35 = (uint64_t)v86;
    uint64_t v47 = *(void *)(*(void *)(a1 + 48) + 8);
    v48 = *(void **)(v47 + 40);
    *(void *)(v47 + 40) = v46;

    unint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  }
  if (!v41) {
    goto LABEL_17;
  }
  uint64_t v49 = objc_msgSend_prepareTables((void *)v41, v38, v39, v40);

  uint64_t v35 = v49;
  if (v49) {
    goto LABEL_17;
  }
  v53 = *(unsigned char **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v53[56])
  {
    uint64_t v35 = 0;
    v54 = 0;
    goto LABEL_26;
  }
  v54 = v53;
  uint64_t v55 = *(void *)(*(void *)(a1 + 48) + 8);
  v56 = *(void **)(v55 + 40);
  *(void *)(v55 + 40) = 0;

  if (*(unsigned char *)(a1 + 66))
  {
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v57 = objc_msgSend_invalidateGroup_(v9, v50, (uint64_t)v54, v51);
    if (v57)
    {
LABEL_24:
      uint64_t v35 = v57;
      goto LABEL_26;
    }
    v73 = *(void **)(a1 + 32);
    v74 = *(void **)(a1 + 40);
    uint64_t v75 = *(void *)(a1 + 56);
    uint64_t v76 = *(void *)(a1 + 64);
    id v85 = 0;
    uint64_t v77 = sub_18B055FEC(v75, v73, v74, v76, &v85);
    uint64_t v35 = (uint64_t)v85;
    uint64_t v78 = *(void *)(*(void *)(a1 + 48) + 8);
    v79 = *(void **)(v78 + 40);
    *(void *)(v78 + 40) = v77;

    if (!v35)
    {
      uint64_t v57 = objc_msgSend_prepareTables(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v50, v80, v51);
      goto LABEL_24;
    }
  }
LABEL_26:
  if (v54 && (v58 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) != 0 && !v35)
  {
    uint64_t v59 = objc_msgSend_performDataMigration_(v58, v50, (uint64_t)v54, v51);
    if (v59)
    {
      uint64_t v35 = v59;

      goto LABEL_17;
    }
    objc_msgSend_purgeGroup_(*(void **)(a1 + 56), v60, (uint64_t)v54, v61);
  }
  else
  {

    if (v35) {
      goto LABEL_17;
    }
  }
  uint64_t v65 = objc_msgSend_finishInitializing(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v62, v63, v64, v81);
  uint64_t v35 = v65;
  uint64_t v68 = *(void *)(a1 + 48);
  if (*(void *)(*(void *)(v68 + 8) + 40) && !v65)
  {
    uint64_t v69 = *(void *)(a1 + 64);
    if ((v69 & 0x40000) == 0)
    {
      v82[0] = MEMORY[0x1E4F143A8];
      v82[1] = 3221225472;
      v82[2] = sub_18B0568F8;
      v82[3] = &unk_1E54622B0;
      uint64_t v84 = v68;
      v70 = *(void **)(a1 + 32);
      id v83 = *(id *)(a1 + 40);
      objc_msgSend_usingTableGroupCachePerformBlock_(v70, v71, (uint64_t)v82, v72);

      uint64_t v69 = *(void *)(a1 + 64);
    }
    if ((v69 & 0x20000) == 0) {
      objc_msgSend_updateLastUsedDate_(v9, v66, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v67);
    }
    uint64_t v35 = 0;
  }
LABEL_17:

  return (id)v35;
}

uint64_t sub_18B0568F8(uint64_t a1, void *a2)
{
  return objc_msgSend_setObject_forKey_(a2, (const char *)a2, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(void *)(a1 + 32));
}

void sub_18B056CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B056CD4(uint64_t a1, const char *a2, void *a3, unsigned char *a4)
{
  uint64_t v6 = objc_msgSend_finishInitializing(a3, a2, (uint64_t)a3, (uint64_t)a4);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    *a4 = 1;
  }
}

void sub_18B057690(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  objc_msgSend_dbTableNameForLogicalTableName_(v4, v6, a2, v7);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDbTableName_(v5, v8, (uint64_t)v10, v9);
}

uint64_t sub_18B057CBC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setObject_forKey_(*(void **)(*(void *)(a1 + 32) + 64), a2, a3, (uint64_t)a2);
}

uint64_t sub_18B057CD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__addExtraTablesForTable_(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18B058C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

id sub_18B058CA8(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v25, (uint64_t)v29, 16);
  if (v4)
  {
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)v26;
LABEL_3:
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v26 != v9) {
        objc_enumerationMutation(v2);
      }
      uint64_t v11 = *(void **)(*((void *)&v25 + 1) + 8 * v10);
      id v12 = objc_msgSend_logicalTableName(v11, v5, v6, v7);
      int v15 = objc_msgSend_tableWithName_(*(void **)(a1 + 40), v13, (uint64_t)v12, v14);
      id v24 = 0;
      char v17 = objc_msgSend_migrateDataFromTable_error_(v15, v16, (uint64_t)v11, (uint64_t)&v24);
      id v18 = v24;
      id v20 = v24;
      if (v20) {
        break;
      }
      if ((v17 & 1) == 0)
      {
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v19, @"CKErrorDomain", 1, @"migration failed for table: %@", v12);
        id v22 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_13;
      }

      if (v8 == ++v10)
      {
        uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v25, (uint64_t)v29, 16);
        if (v8) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v18);
    id v22 = v20;
LABEL_13:
    id v21 = v22;

    goto LABEL_14;
  }
LABEL_10:

  id v21 = *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
LABEL_14:

  return v21;
}

void sub_18B058FA8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B059064(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B059628(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v7 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v6, @"CKErrorDomain", 1, @"No int64 binding value for %@", v5);

    id v8 = v7;
    *a3 = v8;
  }
  return 0;
}

id sub_18B0596C0(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8 = a5;
  id v16 = 0;
  sqlite3_int64 v11 = objc_msgSend_cksqlcs_int64BindingValue_(a1, v9, (uint64_t)&v16, v10);
  id v12 = v16;
  if (!v12)
  {
    if (sqlite3_bind_int64(a3, a4, v11))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v13, @"Failed to bind int64 value", v14);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v12 = 0;
    }
  }

  return v12;
}

double sub_18B059778(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v7 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v6, @"CKErrorDomain", 1, @"No double binding value for %@", v5);

    id v8 = v7;
    *a3 = v8;
  }
  return 0.0;
}

id sub_18B059810(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8 = a5;
  id v17 = 0;
  objc_msgSend_cksqlcs_doubleBindingValue_(a1, v9, (uint64_t)&v17, v10);
  double v12 = v11;
  id v13 = v17;
  if (!v13)
  {
    if (sqlite3_bind_double(a3, a4, v12))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v14, @"Failed to bind double value", v15);
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v13 = 0;
    }
  }

  return v13;
}

const char *sub_18B0598C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    uint64_t v6 = (objc_class *)objc_opt_class();
    uint64_t v7 = NSStringFromClass(v6);
    uint64_t v9 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v8, @"CKErrorDomain", 1, @"No text binding value for %@", v7);

    id v10 = v9;
    *a5 = v10;
  }
  return "";
}

id sub_18B059964(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8 = a5;
  int v17 = 0;
  id v15 = 0;
  id v16 = 0;
  id v10 = (const void *)objc_msgSend_cksqlcs_textBindingValue_destructor_error_(a1, v9, (uint64_t)&v17, (uint64_t)&v16, &v15);
  id v11 = v15;
  if (!v11)
  {
    if (sqlite3_bind_text16(a3, a4, v10, v17, v16))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v12, @"Failed to bind text value", v13);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v11 = 0;
    }
  }

  return v11;
}

uint64_t sub_18B059A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    uint64_t v6 = (objc_class *)objc_opt_class();
    uint64_t v7 = NSStringFromClass(v6);
    uint64_t v9 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v8, @"CKErrorDomain", 1, @"No blob binding value for %@", v7);

    id v10 = v9;
    *a5 = v10;
  }
  return 0;
}

id sub_18B059AC8(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8 = a5;
  id v16 = 0;
  sqlite3_uint64 v17 = 0;
  id v15 = 0;
  id v10 = (const void *)objc_msgSend_cksqlcs_blobBindingValue_destructor_error_(a1, v9, (uint64_t)&v17, (uint64_t)&v16, &v15);
  id v11 = v15;
  if (!v11)
  {
    if (sqlite3_bind_blob64(a3, a4, v10, v17, v16))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v12, @"Failed to bind blob value", v13);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v11 = 0;
    }
  }

  return v11;
}

uint64_t sub_18B059B90(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    uint64_t v7 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v6, @"CKErrorDomain", 1, @"No archived object binding value for %@", v5);

    id v8 = v7;
    *a3 = v8;
  }
  return 0;
}

id sub_18B059C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  uint64_t v9 = (void *)MEMORY[0x18C12ADA0]();
  id v15 = 0;
  id v11 = objc_msgSend_databaseArchiveWithObject_error_(CKSQLiteDatabase, v10, a1, (uint64_t)&v15);
  id v13 = v15;
  if (!v13)
  {
    objc_msgSend_cksqlcs_bindBlob_index_db_(v11, v12, a3, a4, v8);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v13;
}

uint64_t sub_18B059CE8(void *a1, const char *a2, uint64_t *a3, uint64_t a4)
{
  *a3 = objc_msgSend_length(a1, a2, (uint64_t)a3, a4);
  id v5 = a1;

  return objc_msgSend_bytes(v5, v6, v7, v8);
}

void *sub_18B059D2C(void *a1, const char *a2, _DWORD *a3, void *a4, void *a5)
{
  uint64_t v9 = objc_msgSend_length(a1, a2, (uint64_t)a3, (uint64_t)a4);
  id v11 = malloc_type_malloc(2 * v9, 0xCE121CA2uLL);
  if (v11)
  {
    objc_msgSend_getCharacters_range_(a1, v10, (uint64_t)v11, 0, v9);
    *a3 = 2 * v9;
    *a4 = MEMORY[0x1E4F14838];
  }
  else
  {
    double v12 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v10, @"CKErrorDomain", 1, @"malloc() failed");
    id v13 = v12;
    if (a5) {
      *a5 = v12;
    }
  }
  return v11;
}

void *sub_18B059E10(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = malloc_type_malloc(0x10uLL, 0xBDD228B8uLL);
  objc_msgSend_getUUIDBytes_(a1, v8, (uint64_t)v7, v9);
  *a3 = 16;
  *a4 = MEMORY[0x1E4F14838];
  return v7;
}

id sub_18B059E84(uint64_t a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  return sub_18B059E94(a3, a4, a5);
}

id sub_18B059E94(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5 = a3;
  if (sqlite3_bind_null(a1, a2))
  {
    uint64_t v8 = objc_msgSend_sqlErrorWithMessage_(v5, v6, @"Failed to bind NULL value", v7);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

id sub_18B059F10(uint64_t a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  return sub_18B059E94(a3, a4, a5);
}

id sub_18B059F20(uint64_t a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  return sub_18B059E94(a3, a4, a5);
}

uint64_t sub_18B05A1F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"scope = %d AND scopeIdentifier IN %@", a4, *(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_18B05A2D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"scope = %d AND NOT scopeIdentifier IN %@", a4, *(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_18B05A6E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"number=NULL AND string=NULL AND data=NULL AND UUID=NULL AND object=NULL", a4);
}

uint64_t sub_18B05AB94(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(void *)(a1 + 40), &unk_1ED845DC0);
}

uint64_t sub_18B05AFB4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(void *)(a1 + 40), &unk_1ED845DF0);
}

uint64_t sub_18B05B3D4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(void *)(a1 + 40), &unk_1ED845E20);
}

uint64_t sub_18B05B7F4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(void *)(a1 + 40), &unk_1ED845E50);
}

uint64_t sub_18B05BC14(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(void *)(a1 + 40), &unk_1ED845E80);
}

id CKValidSharingURLHostnames()
{
  if (qword_1EB279FD8 != -1) {
    dispatch_once(&qword_1EB279FD8, &unk_1ED7EF018);
  }
  v0 = (void *)qword_1EB279FD0;

  return v0;
}

uint64_t sub_18B05D3EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, @"icloud.com", a4, @"www.icloud.com", @"share.icloud.com", @"icloud.com.cn", @"www.icloud.com.cn", @"share.icloud.com.cn", 0);
  uint64_t v5 = qword_1EB279FD0;
  qword_1EB279FD0 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

uint64_t CKBoolFromCKTernaryWithDefault(uint64_t a1, unsigned int a2)
{
  if (a1 == 1) {
    a2 = 1;
  }
  if (a1) {
    return a2;
  }
  else {
    return 0;
  }
}

void sub_18B05D488(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_currentProcess(MEMORY[0x1E4F963E8], a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB279FA8 = objc_msgSend_isDaemon(v7, v4, v5, v6);
}

id CKGetHomeDirRealPath()
{
  v0 = NSHomeDirectory();
  v1 = CKGetRealPath(v0);

  return v1;
}

id CKGetDarwinTempDirRealPath()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  confstr(65537, __s, 0x400uLL);
  v3 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v0, v1, v2);
  size_t v4 = strlen(__s);
  uint64_t v6 = objc_msgSend_stringWithFileSystemRepresentation_length_(v3, v5, (uint64_t)__s, v4);

  id v7 = CKGetRealPath(v6);

  return v7;
}

id CKGetDarwinCacheDirRealPath()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  confstr(65538, __s, 0x400uLL);
  v3 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v0, v1, v2);
  size_t v4 = strlen(__s);
  uint64_t v6 = objc_msgSend_stringWithFileSystemRepresentation_length_(v3, v5, (uint64_t)__s, v4);

  id v7 = CKGetRealPath(v6);

  return v7;
}

id CKApplicationBundleIDForPush(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = v10;
  if (v8) {
    double v12 = v8;
  }
  else {
    double v12 = v7;
  }
  if (v10) {
    double v12 = v10;
  }
  if (v9) {
    double v12 = v9;
  }
  id v13 = v12;

  return v13;
}

id CKPushTopicForPushBehavior(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v11 = a4;
  if (a1 == 2)
  {
    id v13 = objc_msgSend_stringWithFormat_(NSString, v9, @"%@%@", v10, v8, v11);
    sqlite3_uint64 v17 = objc_msgSend_CKSHA256(v13, v14, v15, v16);
    objc_msgSend_stringWithFormat_(NSString, v18, @"%@-DH-%@", v19, v7, v17);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  else if (a1 == 1)
  {
    id v12 = v7;
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

uint64_t CKBootDate()
{
  v0 = (void *)MEMORY[0x1E4F1C9C8];
  double v4 = (double)CKBootTime();

  return objc_msgSend_dateWithTimeIntervalSince1970_(v0, v1, v2, v3, v4);
}

uint64_t CKCreateDirectoryAtURL(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_path(a1, a2, a3, a4);
  uint64_t v6 = CKCreateDirectoryAtPathWithAttributes(v5, 0, a2);

  return v6;
}

uint64_t sub_18B05D8E0()
{
  uint64_t v30 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v29 = objc_opt_class();
  uint64_t v28 = objc_opt_class();
  uint64_t v27 = objc_opt_class();
  uint64_t v26 = objc_opt_class();
  uint64_t v25 = objc_opt_class();
  uint64_t v24 = objc_opt_class();
  uint64_t v23 = objc_opt_class();
  uint64_t v22 = objc_opt_class();
  uint64_t v21 = objc_opt_class();
  uint64_t v20 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  uint64_t v18 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  uint64_t v16 = objc_opt_class();
  uint64_t v0 = objc_opt_class();
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  objc_msgSend_setWithObjects_(v30, v11, v29, v12, v28, v27, v26, v25, v24, v23, v22, v21, v20, v19, v18, v17, v16, v0, v1,
    v2,
    v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v10,
  uint64_t v13 = 0);
  uint64_t v14 = qword_1EB279FE8;
  qword_1EB279FE8 = v13;

  return MEMORY[0x1F41817F8](v13, v14);
}

id CKOperationProgressCallbackClasses()
{
  if (qword_1EB27A000 != -1) {
    dispatch_once(&qword_1EB27A000, &unk_1ED7F09F8);
  }
  uint64_t v0 = (void *)qword_1EB279FF8;

  return v0;
}

uint64_t sub_18B05DBB8()
{
  int v42 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v41 = objc_opt_class();
  uint64_t v40 = objc_opt_class();
  uint64_t v39 = objc_opt_class();
  uint64_t v38 = objc_opt_class();
  uint64_t v37 = objc_opt_class();
  uint64_t v36 = objc_opt_class();
  uint64_t v35 = objc_opt_class();
  uint64_t v34 = objc_opt_class();
  uint64_t v33 = objc_opt_class();
  uint64_t v32 = objc_opt_class();
  uint64_t v31 = objc_opt_class();
  uint64_t v30 = objc_opt_class();
  uint64_t v29 = objc_opt_class();
  uint64_t v28 = objc_opt_class();
  uint64_t v27 = objc_opt_class();
  uint64_t v26 = objc_opt_class();
  uint64_t v25 = objc_opt_class();
  uint64_t v24 = objc_opt_class();
  uint64_t v23 = objc_opt_class();
  uint64_t v22 = objc_opt_class();
  uint64_t v21 = objc_opt_class();
  uint64_t v20 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  uint64_t v18 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  uint64_t v16 = objc_opt_class();
  uint64_t v0 = objc_opt_class();
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  objc_msgSend_setWithObjects_(v42, v11, v41, v12, v40, v39, v38, v37, v36, v35, v34, v33, v32, v31, v30, v29, v28, v27, v26,
    v25,
    v24,
    v23,
    v22,
    v21,
    v20,
    v19,
    v18,
    v17,
    v16,
    v0,
    v1,
    v2,
    v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v10,
  uint64_t v13 = 0);
  uint64_t v14 = qword_1EB279FF8;
  qword_1EB279FF8 = v13;

  return MEMORY[0x1F41817F8](v13, v14);
}

void sub_18B05DF4C()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CKAcceptableValueClasses();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v2 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v1, (uint64_t)&v7, 3);
  uint64_t v5 = objc_msgSend_setByAddingObjectsFromArray_(v0, v3, (uint64_t)v2, v4, v7, v8);
  uint64_t v6 = (void *)qword_1EB27A008;
  qword_1EB27A008 = v5;
}

uint64_t sub_18B05E01C()
{
  uint64_t v20 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v19 = objc_opt_class();
  uint64_t v18 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  uint64_t v16 = objc_opt_class();
  uint64_t v0 = objc_opt_class();
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v13 = objc_msgSend_setWithObjects_(v20, v11, v19, v12, v18, v17, v16, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, 0);
  uint64_t v14 = qword_1EB27A018;
  qword_1EB27A018 = v13;

  return MEMORY[0x1F41817F8](v13, v14);
}

id CKStringWithLimitedArray(void *a1, unint64_t a2)
{
  id v3 = a1;
  if (objc_msgSend_count(v3, v4, v5, v6) <= a2)
  {
    uint64_t v17 = CKStringWithArray(v3);
  }
  else
  {
    uint64_t v10 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v7, v8, v9);
    uint64_t v12 = objc_msgSend_subarrayWithRange_(v3, v11, 0, a2);
    objc_msgSend_addObjectsFromArray_(v10, v13, (uint64_t)v12, v14);

    objc_msgSend_addObject_(v10, v15, @"...", v16);
    uint64_t v17 = CKStringWithArray(v10);
  }

  return v17;
}

id CKStringWithArray(void *a1)
{
  id v1 = a1;
  uint64_t v4 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v2, @"[", v3);
  uint64_t v8 = objc_msgSend_objectEnumerator(v1, v5, v6, v7);
  uint64_t v12 = objc_msgSend_nextObject(v8, v9, v10, v11);
  if (v12)
  {
    uint64_t v16 = (void *)v12;
    do
    {
      if (objc_msgSend_length(v4, v13, v14, v15) != 1) {
        objc_msgSend_appendString_(v4, v17, @", ", v18);
      }
      uint64_t v19 = CKStringWithObject(v16);
      objc_msgSend_appendString_(v4, v20, (uint64_t)v19, v21);

      uint64_t v25 = objc_msgSend_nextObject(v8, v22, v23, v24);

      uint64_t v16 = (void *)v25;
    }
    while (v25);
  }
  objc_msgSend_appendString_(v4, v13, @"]", v15);

  return v4;
}

id CKStringWithNibbles(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v12 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v14 = 134217984;
      unint64_t v15 = a2;
      _os_log_impl(&dword_18AF10000, v12, OS_LOG_TYPE_INFO, "Warn: That size was ridiculous: %lu. Refusing to create a string that log.", (uint8_t *)&v14, 0xCu);
    }
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v4 = malloc_type_malloc(2 * a2, 0x1000040BDFB0063uLL);
    uint64_t v5 = (uint64_t)v4;
    if (a2)
    {
      unint64_t v6 = 0;
      do
      {
        unsigned int v8 = *a1++;
        char v7 = v8;
        v4[v6] = a0123456789abcd_1[(unint64_t)v8 >> 4];
        if (v6 + 1 < a2) {
          v4[v6 + 1] = a0123456789abcd_1[v7 & 0xF];
        }
        v6 += 2;
      }
      while (v6 < a2);
    }
    id v9 = [NSString alloc];
    uint64_t v11 = objc_msgSend_initWithCharactersNoCopy_length_freeWhenDone_(v9, v10, v5, a2, 1);
  }

  return v11;
}

id CKStringWithBytes(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2 < 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v6 = 134217984;
      uint64_t v7 = a2;
      _os_log_impl(&dword_18AF10000, v4, OS_LOG_TYPE_INFO, "Warn: That size was ridiculous: %lu. Refusing to create a string from bytes that long", (uint8_t *)&v6, 0xCu);
    }
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = CKStringWithNibbles(a1, 2 * a2);
  }

  return v3;
}

id CKStringWithData(void *a1)
{
  id v1 = a1;
  uint64_t v5 = (unsigned __int8 *)objc_msgSend_bytes(v1, v2, v3, v4);
  uint64_t v9 = objc_msgSend_length(v1, v6, v7, v8);

  return CKStringWithBytes(v5, v9);
}

uint64_t CKStringWithDate(uint64_t a1)
{
  return MEMORY[0x1F4181798](MEMORY[0x1E4F28C10], sel_localizedStringFromDate_dateStyle_timeStyle_, a1, 1);
}

id CKStringWithDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v4 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v2, @"{", v3);
  uint64_t v8 = objc_msgSend_keyEnumerator(v1, v5, v6, v7);
  uint64_t v12 = objc_msgSend_nextObject(v8, v9, v10, v11);
  if (v12)
  {
    uint64_t v16 = (void *)v12;
    do
    {
      if (objc_msgSend_length(v4, v13, v14, v15) != 1) {
        objc_msgSend_appendString_(v4, v17, @", ", v18);
      }
      uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v1, v17, (uint64_t)v16, v18);
      uint64_t v20 = CKStringWithObject();
      objc_msgSend_appendFormat_(v4, v21, @"%@: %@", v22, v16, v20);

      uint64_t v26 = objc_msgSend_nextObject(v8, v23, v24, v25);

      uint64_t v16 = (void *)v26;
    }
    while (v26);
  }
  objc_msgSend_appendString_(v4, v13, @"}", v15);

  return v4;
}

id CKStringWithObject(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = CKStringWithArray(v1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v2 = CKStringWithData(v1);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v2 = CKStringWithDictionary(v1);
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v2 = CKStringWithSet(v1);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            objc_msgSend_stringWithFormat_(NSString, v3, @"\"%@\"", v5, v1);
          }
          else {
          uint64_t v2 = objc_msgSend_description(v1, v3, v4, v5);
          }
        }
      }
    }
  }
  uint64_t v6 = (void *)v2;

  return v6;
}

id CKStringWithSet(void *a1)
{
  id v1 = a1;
  uint64_t v4 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v2, @"{", v3);
  uint64_t v8 = objc_msgSend_objectEnumerator(v1, v5, v6, v7);
  uint64_t v12 = objc_msgSend_nextObject(v8, v9, v10, v11);
  if (v12)
  {
    uint64_t v16 = (void *)v12;
    do
    {
      if (objc_msgSend_length(v4, v13, v14, v15) != 1) {
        objc_msgSend_appendString_(v4, v17, @", ", v18);
      }
      uint64_t v19 = CKStringWithObject(v16);
      objc_msgSend_appendString_(v4, v20, (uint64_t)v19, v21);

      uint64_t v25 = objc_msgSend_nextObject(v8, v22, v23, v24);

      uint64_t v16 = (void *)v25;
    }
    while (v25);
  }
  objc_msgSend_appendString_(v4, v13, @"}", v15);

  return v4;
}

id CKShareURLSlugForiWorkShareTitle(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v8 = v4;
  if (qword_1EB27A030 == -1)
  {
    if (v4)
    {
LABEL_3:
      uint64_t v9 = (void *)qword_1EB27A028;
      uint64_t v10 = objc_msgSend_lowercaseString(v8, v5, v6, v7);
      objc_msgSend_objectForKeyedSubscript_(v9, v11, (uint64_t)v10, v12);
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_1EB27A030, &unk_1ED7EC188);
    if (v8) {
      goto LABEL_3;
    }
  }
  if (v3)
  {
    uint64_t v15 = objc_msgSend_pathExtension(v3, v5, v6, v7);
    uint64_t v10 = objc_msgSend_lowercaseString(v15, v16, v17, v18);

    if (!v10)
    {
      uint64_t v13 = 0;
      goto LABEL_5;
    }
    objc_msgSend_objectForKeyedSubscript_((void *)qword_1EB27A028, v19, (uint64_t)v10, v20);
    uint64_t v13 = LABEL_4:;
LABEL_5:

    goto LABEL_6;
  }
  uint64_t v13 = 0;
LABEL_6:

  return v13;
}

void sub_18B05EAB8()
{
  uint64_t v0 = (void *)qword_1EB27A028;
  qword_1EB27A028 = (uint64_t)&unk_1ED8469D0;
}

uint64_t CKSharingContainerSupportsAdminParticipants(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = objc_msgSend_specialContainerType(a1, a2, a3, a4);
  return (v4 < 0x1A) & (0x2200010u >> v4);
}

id CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_setupInfo(v1, v2, v3, v4);
  uint64_t v9 = objc_msgSend_copy(v5, v6, v7, v8);

  uint64_t v13 = objc_msgSend_containerOptions(v9, v10, v11, v12);
  uint64_t v17 = objc_msgSend_applicationBundleIdentifierOverrideForContainerAccess(v13, v14, v15, v16);

  if (!v17)
  {
    uint64_t v21 = objc_msgSend_containerOptions(v9, v18, v19, v20);
    uint64_t v25 = objc_msgSend_primaryIdentifier(v1, v22, v23, v24);
    objc_msgSend_setApplicationBundleIdentifierOverride_(v21, v26, (uint64_t)v25, v27);
  }

  return v9;
}

__CFString *CKSharingContainerSlugForContainerID(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = @"share";
  uint64_t v11 = objc_msgSend_specialContainerType(a1, v8, v9, v10);
  if (v11 > 20)
  {
    switch(v11)
    {
      case 21:
        uint64_t v14 = kCKNotesShareURLSlug;
        goto LABEL_14;
      case 25:
        uint64_t v14 = kCKRemindersShareURLSlug;
        goto LABEL_14;
      case 28:
        if (!objc_msgSend_isEqualToString_(v6, v12, @"safari-tab-groups", v13)) {
          goto LABEL_16;
        }
        uint64_t v14 = kCKSafariTabGroupsShareURLSlug;
        break;
      case 29:
        if (!objc_msgSend_isEqualToString_(v6, v12, @"freeform", v13)) {
          goto LABEL_16;
        }
        uint64_t v14 = kCKFreeformShareURLSlug;
        break;
      default:
        goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v11 == 4)
  {
    uint64_t v15 = @"iclouddrive";

    uint64_t v17 = CKShareURLSlugForiWorkShareTitle(v5, v6);
    if (v17)
    {
      uint64_t v7 = v17;

      uint64_t v15 = v7;
    }
    else
    {
      uint64_t v7 = 0;
    }
    goto LABEL_15;
  }
  if (v11 == 5)
  {
    uint64_t v18 = @"photos";

    if (objc_msgSend_isEqualToString_(v6, v19, @"photos_sharing", v20))
    {
      uint64_t v23 = kCKPhotosSharedLibraryShareURLSlug;
    }
    else
    {
      if (!objc_msgSend_isEqualToString_(v6, v21, @"photos_links", v22))
      {
        uint64_t v7 = v18;
        goto LABEL_16;
      }
      uint64_t v23 = kCKPhotosEPPMomentShareURLSlug;
    }
    uint64_t v15 = *v23;
    uint64_t v7 = v18;
    goto LABEL_15;
  }
  if (v11 == 6 && objc_msgSend_isEqualToString_(v6, v12, @"events", v13))
  {
    uint64_t v14 = kCKEventsShareURLSlug;
LABEL_14:
    uint64_t v15 = *v14;
LABEL_15:

    uint64_t v7 = v15;
  }
LABEL_16:

  return v7;
}

__CFString *CKStringForTransferSize(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return @"Unknown";
  }
  else {
    return off_1E54625B0[a1 - 1];
  }
}

__CFString *CKStringForNetworkServiceType(unint64_t a1)
{
  if (a1 > 0xB) {
    return @"Unknown";
  }
  else {
    return off_1E54625E8[a1];
  }
}

__CFString *CKStringForXPCActivityState(unint64_t a1)
{
  if (a1 > 5) {
    return @"Unknown";
  }
  else {
    return off_1E5462660[a1];
  }
}

CFDataRef mmapFileDescriptor(int a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v18.st_dev = 67109120;
    *(_DWORD *)&v18.st_mode = a1;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Memory mapping the file with fd %d", (uint8_t *)&v18, 8u);
    if (a1 < 0) {
      goto LABEL_6;
    }
  }
  else if (a1 < 0)
  {
LABEL_6:
    CFDataRef v3 = 0;
    goto LABEL_7;
  }
  memset(&v18, 0, sizeof(v18));
  if (fstat(a1, &v18)) {
    goto LABEL_6;
  }
  if (v18.st_size)
  {
    id v5 = (UInt8 *)mmap(0, v18.st_size, 1, 1025, a1, 0);
    if (v5 == (UInt8 *)-1)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v10 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = v10;
        int v12 = *__error();
        LODWORD(context.version) = 67109376;
        HIDWORD(context.version) = a1;
        LOWORD(context.info) = 1024;
        *(_DWORD *)((char *)&context.info + 2) = v12;
        _os_log_error_impl(&dword_18AF10000, v11, OS_LOG_TYPE_ERROR, "Could not mmap %d: %{errno}d", (uint8_t *)&context, 0xEu);
      }
      goto LABEL_6;
    }
    id v6 = v5;
    context.version = 0;
    memset(&context.retain, 0, 40);
    context.info = (void *)v18.st_size;
    context.deallocate = (CFAllocatorDeallocateCallBack)sub_18B05F1D4;
    context.preferredSize = 0;
    CFAllocatorRef v7 = CFAllocatorCreate(0, &context);
    if (v7)
    {
      CFAllocatorRef v8 = v7;
      CFDataRef v3 = CFDataCreateWithBytesNoCopy(0, v6, v18.st_size, v7);
      if (!v3) {
        munmap(v6, v18.st_size);
      }
      CFRelease(v8);
    }
    else
    {
      CFDataRef v3 = 0;
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v13 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v14[0] = 67109376;
      v14[1] = a1;
      __int16 v15 = 2048;
      off_t st_size = v18.st_size;
      _os_log_debug_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEBUG, "Successfully mapped fd %d (%lld bytes)", (uint8_t *)v14, 0x12u);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(context.version) = 0;
      _os_log_debug_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEBUG, "Memory mapping a zero byte file", (uint8_t *)&context, 2u);
    }
    CFDataRef v3 = CFDataCreate(0, 0, 0);
  }
LABEL_7:

  return v3;
}

void sub_18B05F1D4(void *a1, size_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  munmap(a1, a2);
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  CFDataRef v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 134217984;
    size_t v5 = a2;
    _os_log_debug_impl(&dword_18AF10000, v3, OS_LOG_TYPE_DEBUG, "Unmapped %ld bytes", (uint8_t *)&v4, 0xCu);
  }
}

id mmapFileAtPath(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  bzero(buffer, 0x401uLL);
  if (!v1) {
    goto LABEL_17;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = v2;
    uint64_t v13 = objc_msgSend_CKSanitizedPath(v1, v10, v11, v12);
    *(_DWORD *)buf = 138543362;
    uint64_t v25 = v13;
    _os_log_debug_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEBUG, "Memory mapping the file at %{public}@", buf, 0xCu);
  }
  if (CFStringGetFileSystemRepresentation(v1, buffer, 1024) != 1)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    CFAllocatorRef v7 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = v7;
      stat v18 = objc_msgSend_CKSanitizedPath(v1, v15, v16, v17);
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v18;
      _os_log_error_impl(&dword_18AF10000, v14, OS_LOG_TYPE_ERROR, "Can't get file system representation for backup file path %{public}@", buf, 0xCu);
    }
    goto LABEL_17;
  }
  int v3 = open(buffer, 0, 0);
  if (v3 < 1)
  {
LABEL_17:
    uint64_t v6 = 0;
    goto LABEL_18;
  }
  int v4 = v3;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  size_t v5 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = v5;
    uint64_t v23 = objc_msgSend_CKSanitizedPath(v1, v20, v21, v22);
    *(_DWORD *)buf = 138543362;
    uint64_t v25 = v23;
    _os_log_debug_impl(&dword_18AF10000, v19, OS_LOG_TYPE_DEBUG, "Attempting to map file at %{public}@", buf, 0xCu);
  }
  uint64_t v6 = mmapFileDescriptor(v4);
  close(v4);
LABEL_18:

  return v6;
}

void CKWarnForInvalidApplicationIdentifier(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v4)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    size_t v5 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138544130;
      id v32 = v3;
      __int16 v33 = 2114;
      uint64_t v34 = @"application-identifier";
      __int16 v35 = 2114;
      uint64_t v36 = @"com.apple.developer.associated-application-identifier";
      __int16 v37 = 2114;
      id v38 = v4;
      _os_log_error_impl(&dword_18AF10000, v5, OS_LOG_TYPE_ERROR, "Invalid value of \"%{public}@\" for entitlement \"%{public}@\" or \"%{public}@\" on process \"%{public}@\". We expect TEAMID.BUNDLEID, and insist that TEAMID is exactly 10 characters long, consisting of [0-9][A-Z]. This is a permanent issue, and access to CloudKit will be denied until this is resolved", buf, 0x2Au);
    }
    uint64_t v9 = objc_msgSend_sharedOptions(CKBehaviorOptions, v6, v7, v8);
    int isAppleInternalInstall = objc_msgSend_isAppleInternalInstall(v9, v10, v11, v12);

    if (isAppleInternalInstall && (objc_msgSend_hasPrefix_(v3, v14, @"com.apple.", v15) & 1) == 0)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v16 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138544386;
        id v32 = v4;
        __int16 v33 = 2114;
        uint64_t v34 = @"application-identifier";
        __int16 v35 = 2114;
        uint64_t v36 = @"com.apple.developer.associated-application-identifier";
        __int16 v37 = 2114;
        id v38 = v3;
        __int16 v39 = 2114;
        id v40 = v3;
        _os_log_error_impl(&dword_18AF10000, v16, OS_LOG_TYPE_ERROR, "\n\n\nAn application using CloudKit \"%{public}@\" has a %{public}@ or %{public}@ entitlement value of %{public}@.  CloudKit is expecting an entitlement value of TEAMID.BUNDLEID. %{public}@\n\n\n", buf, 0x34u);
      }
      uint64_t v19 = objc_msgSend_stringWithFormat_(NSString, v17, @"The applicationIdentifier of \"%@\" isn't a suitable TEAMID.BUNDLEID value, and CloudKit access is denied.  Please fix the entitlements of the calling process \"%@\". See syslog for more info.", v18, v3, v4);
      v29[0] = *MEMORY[0x1E4F1D990];
      uint64_t v22 = objc_msgSend_stringWithFormat_(NSString, v20, @"Invalid Entitlements for %@", v21, v4);
      uint64_t v23 = *MEMORY[0x1E4F1D9A8];
      v30[0] = v22;
      v30[1] = v19;
      uint64_t v24 = *MEMORY[0x1E4F1D9E0];
      v29[1] = v23;
      v29[2] = v24;
      v30[2] = @"OK";
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v25, (uint64_t)v30, (uint64_t)v29, 3);
      CFDictionaryRef v26 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

      CFUserNotificationRef v27 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, v26);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_18B05F88C;
      block[3] = &unk_1E545FFA8;
      block[4] = v27;
      dispatch_async(MEMORY[0x1E4F14428], block);
    }
  }
}

void sub_18B05F88C(uint64_t a1, const char *a2)
{
  objc_msgSend_showUserNotification_withCompletionBlock_(CKUserNotificationUtilities, a2, *(void *)(a1 + 32), (uint64_t)&unk_1ED7EC248);
  id v3 = *(const void **)(a1 + 32);

  CFRelease(v3);
}

uint64_t sub_18B05F8DC()
{
  id v0 = objc_alloc(MEMORY[0x1E4F28FD8]);
  uint64_t v2 = objc_msgSend_initWithPattern_options_error_(v0, v1, @"[0-9,A-Z]{10}\\.(.*)", 0, 0);
  uint64_t v3 = qword_1EB27A038;
  qword_1EB27A038 = v2;

  return MEMORY[0x1F41817F8](v2, v3);
}

void sub_18B05F92C()
{
  id v0 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E4F14430], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_initially_inactive(v0);

  dispatch_queue_t v1 = dispatch_queue_create("com.apple.cloudkit.global.user_interactive", attr);
  uint64_t v2 = (void *)qword_1EB27A050;
  qword_1EB27A050 = (uint64_t)v1;

  uint64_t v3 = qword_1EB27A050;
  id v4 = dispatch_get_global_queue(33, 0);
  dispatch_set_target_queue(v3, v4);

  dispatch_queue_t v5 = dispatch_queue_create("com.apple.cloudkit.global.user_initiated", attr);
  uint64_t v6 = (void *)qword_1EB27A058;
  qword_1EB27A058 = (uint64_t)v5;

  uint64_t v7 = qword_1EB27A058;
  uint64_t v8 = dispatch_get_global_queue(25, 0);
  dispatch_set_target_queue(v7, v8);

  dispatch_queue_t v9 = dispatch_queue_create("com.apple.cloudkit.default", attr);
  uint64_t v10 = (void *)qword_1EB27A060;
  qword_1EB27A060 = (uint64_t)v9;

  uint64_t v11 = qword_1EB27A060;
  uint64_t v12 = dispatch_get_global_queue(21, 0);
  dispatch_set_target_queue(v11, v12);

  dispatch_queue_t v13 = dispatch_queue_create("com.apple.cloudkit.global.utility", attr);
  uint64_t v14 = (void *)qword_1EB27A068;
  qword_1EB27A068 = (uint64_t)v13;

  uint64_t v15 = qword_1EB27A068;
  uint64_t v16 = dispatch_get_global_queue(17, 0);
  dispatch_set_target_queue(v15, v16);

  dispatch_queue_t v17 = dispatch_queue_create("com.apple.cloudkit.global.background", attr);
  uint64_t v18 = (void *)qword_1EB27A070;
  qword_1EB27A070 = (uint64_t)v17;

  uint64_t v19 = qword_1EB27A070;
  uint64_t v20 = dispatch_get_global_queue(9, 0);
  dispatch_set_target_queue(v19, v20);

  dispatch_activate((dispatch_object_t)qword_1EB27A050);
  dispatch_activate((dispatch_object_t)qword_1EB27A058);
  dispatch_activate((dispatch_object_t)qword_1EB27A060);
  dispatch_activate((dispatch_object_t)qword_1EB27A068);
  dispatch_activate((dispatch_object_t)qword_1EB27A070);
}

BOOL sub_18B05FB18(unsigned __int8 *a1, unint64_t a2)
{
  if (!a1) {
    __assert_rtn("isCStyleIdentifier", "CKUtils.m", 957, "cs");
  }
  if (!a2) {
    __assert_rtn("isCStyleIdentifier", "CKUtils.m", 958, "length > 0");
  }
  int v2 = *a1;
  if ((v2 - 97) >= 0x1A && (v2 != 95 ? (BOOL v3 = (v2 - 65) > 0x19) : (BOOL v3 = 0), v3))
  {
    return 0;
  }
  else if (a2 >= 2)
  {
    BOOL v4 = 0;
    for (i = 1; i != a2; BOOL v4 = i >= a2)
    {
      unsigned __int8 v6 = a1[i];
      if ((v6 - 48) >= 0xAu && ((v6 & 0xDF) - 65) >= 0x1Au)
      {
        int v8 = a1[i];
        if (v8 != 95 && v8 != 36) {
          break;
        }
      }
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t CKRunningInClientProcess()
{
  return byte_1E9124EF0;
}

uint64_t setCKRunningInClientProcess(uint64_t result)
{
  byte_1E9124EF0 = result;
  return result;
}

void sub_18B05FC1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (byte_1E9124EF0)
  {
    objc_msgSend_sharedManager(MEMORY[0x1E4FB36F8], a2, a3, a4);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isSharedIPad(v17, v4, v5, v6))
    {
      uint64_t v10 = objc_msgSend_currentUser(v17, v7, v8, v9);
      int v14 = objc_msgSend_uid(v10, v11, v12, v13);
      byte_1EB279FA9 = v14 != geteuid();
    }
    else
    {
      byte_1EB279FA9 = 0;
    }
  }
  else
  {
    uint64_t v15 = getenv("CK_IN_SYNC_BUBBLE");
    if (v15) {
      BOOL v16 = atoi(v15) == 1;
    }
    else {
      BOOL v16 = 0;
    }
    byte_1EB279FA9 = v16;
  }
}

void setCKUseSystemInstalledBinariesBackingBool(int a1)
{
  if (_sCKUseSystemInstalledBinariesPredicate != -1) {
    dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1ED7EC2E8);
  }
  int v2 = _sCKUseSystemInstalledBinaries;
  _sCKUseSystemInstalledBinaries = a1;
  if (v2 != a1)
  {
    ck_log_facilities_setup_logging_facilities();
  }
}

BOOL sub_18B05FD6C()
{
  BOOL result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

void sub_18B05FD8C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEFAULT, "Not using system installed binaries: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    BOOL v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v5) = 0;
      _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Using system installed binaries", (uint8_t *)&v5, 2u);
    }
  }
}

uint64_t CKUseSystemInstalledBinariesFuncForSwift()
{
  if (_sCKUseSystemInstalledBinariesPredicate != -1) {
    dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1ED7EFDB8);
  }
  return _sCKUseSystemInstalledBinaries;
}

BOOL sub_18B05FF14()
{
  BOOL result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

uint64_t CKTrap()
{
  pid_t v0 = getpid();

  return kill(v0, 5);
}

id CKPrefixedNotificationName(void *a1)
{
  id v1 = a1;
  BOOL v4 = v1;
  if (__sTestOverridesAvailable)
  {
    objc_msgSend_stringWithFormat_(NSString, v2, @"%@%@", v3, @"com.apple.cloudkit.testing.", v1);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = v1;
  }
  uint64_t v6 = v5;

  return v6;
}

uint64_t CKIsRunningInTestHost()
{
  return byte_1E912FED0;
}

void setCKIsRunningInTestHost()
{
  int v0 = byte_1E912FED0;
  byte_1E912FED0 = 1;
  if (!v0) {
    ck_log_facilities_setup_logging_facilities();
  }
}

uint64_t overrideCKIsRunningInTestHost(uint64_t result)
{
  byte_1E912FED0 = result;
  return result;
}

uint64_t CKIsRunningInLogger()
{
  return byte_1E912FED1;
}

void setCKIsRunningInLogger()
{
  byte_1E912FED1 = 1;
}

BOOL CKCurrentQueueIsMainQueue()
{
  if (qword_1E912FDC8 != -1) {
    dispatch_once(&qword_1E912FDC8, &unk_1ED7EFE18);
  }
  return dispatch_get_specific(&unk_1E9128299) != 0;
}

void sub_18B060080()
{
}

uint64_t CKShouldUseNewPredicateValidation()
{
  if (qword_1EB27A080 != -1) {
    dispatch_once(&qword_1EB27A080, &unk_1ED7EC308);
  }
  return byte_1EB279FAA;
}

uint64_t CKCurrentProcessLinkCheck0fd6bdf95f2efb6e65813fd4cd0f5d9af656d08a()
{
  if (qword_1EB27A080 != -1) {
    dispatch_once(&qword_1EB27A080, &unk_1ED7EC308);
  }
  return byte_1EB279FAA;
}

uint64_t sub_18B060124()
{
  uint64_t result = dyld_program_sdk_at_least();
  byte_1EB279FAA = result;
  return result;
}

uint64_t CKCurrentProcessLinkCheck5dbf91c3fd1d871f0bcfe60afeb451e3e708d350()
{
  if (qword_1EB27A088 != -1) {
    dispatch_once(&qword_1EB27A088, &unk_1ED7EC328);
  }
  return byte_1EB279FAB;
}

uint64_t sub_18B060190()
{
  uint64_t result = dyld_program_sdk_at_least();
  byte_1EB279FAB = result;
  return result;
}

uint64_t sub_18B0601B8()
{
  uint64_t result = dyld_program_sdk_at_least();
  byte_1EB279FAC = result;
  return result;
}

uint64_t CKCurrentProcessLinkCheck908c3403f5370f9fc0f790c790ce4de0669132c0()
{
  if (qword_1EB27A098 != -1) {
    dispatch_once(&qword_1EB27A098, &unk_1ED7EC368);
  }
  return byte_1EB279FAD;
}

uint64_t sub_18B060224()
{
  uint64_t result = dyld_program_sdk_at_least();
  byte_1EB279FAD = result;
  return result;
}

uint64_t CKCurrentProcessLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24()
{
  if (qword_1EB27A0A0 != -1) {
    dispatch_once(&qword_1EB27A0A0, &unk_1ED7EC388);
  }
  return byte_1EB279FAE;
}

uint64_t sub_18B060290()
{
  uint64_t result = dyld_program_sdk_at_least();
  byte_1EB279FAE = result;
  return result;
}

BOOL CKLinkCheckc809671068f5f334951d6b3e996f193c(unsigned int a1)
{
  return a1 >> 9 > 0x880;
}

uint64_t CKSDKVersionc809671068f5f334951d6b3e996f193c()
{
  return 1114624;
}

uint64_t CKCurrentProcessLinkCheckc809671068f5f334951d6b3e996f193c()
{
  if (qword_1EB27A0B0 != -1) {
    dispatch_once(&qword_1EB27A0B0, &unk_1ED7EC3C8);
  }
  return byte_1EB279FB0;
}

uint64_t sub_18B060318()
{
  uint64_t result = dyld_program_sdk_at_least();
  byte_1EB279FB0 = result;
  return result;
}

BOOL CKLinkCheck48d9728e8c354416a38f82379cbb35e3(unsigned int a1)
{
  return HIWORD(a1) > 0xAu;
}

uint64_t CKSDKVersion32f5805a68adfc1b65f94a0de69aa32177c7cd24()
{
  return 983040;
}

BOOL CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24(unsigned int a1)
{
  return HIWORD(a1) > 0xEu;
}

uint64_t sub_18B060368()
{
  uint64_t result = dyld_get_program_sdk_version();
  dword_1EB279FB4 = result;
  return result;
}

uint64_t CKIsDebuggerAttached()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  bzero(v5, 0x288uLL);
  *(void *)int v2 = 0xE00000001;
  int v3 = 1;
  pid_t v4 = getpid();
  size_t v1 = 648;
  if (sysctl(v2, 4u, v5, &v1, 0, 0)) {
    __assert_rtn("CKIsDebuggerAttached", "CKUtils.m", 1340, "junk == 0");
  }
  return (v6 >> 11) & 1;
}

id CKRandomDataWithLength(size_t a1)
{
  int v2 = malloc_type_malloc(a1, 0xA7B27EB4uLL);
  if (!v2) {
    goto LABEL_4;
  }
  unsigned int v6 = v2;
  if (SecRandomCopyBytes((SecRandomRef)*MEMORY[0x1E4F3BC60], a1, v2))
  {
    free(v6);
LABEL_4:
    uint64_t v8 = objc_msgSend_data(MEMORY[0x1E4F1C9B8], v3, v4, v5);
    goto LABEL_6;
  }
  uint64_t v8 = objc_msgSend_dataWithBytesNoCopy_length_(MEMORY[0x1E4F1C9B8], v7, (uint64_t)v6, a1);
LABEL_6:

  return v8;
}

id CKHKDFSHA256(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v8 = objc_msgSend_dataUsingEncoding_(a2, v6, 4, v7);
  id v9 = objc_alloc(MEMORY[0x1E4F1CA58]);
  uint64_t v12 = objc_msgSend_initWithLength_(v9, v10, a3, v11);
  ccsha256_di();
  objc_msgSend_length(v5, v13, v14, v15);
  id v16 = v5;
  objc_msgSend_bytes(v16, v17, v18, v19);

  objc_msgSend_length(v8, v20, v21, v22);
  objc_msgSend_bytes(v8, v23, v24, v25);
  uint64_t v34 = objc_msgSend_mutableBytes(v12, v26, v27, v28);
  if (ccnistkdf_ctr_hmac())
  {

    uint64_t v12 = 0;
  }
  id v32 = objc_msgSend_copy(v12, v29, v30, v31, v34);

  return v32;
}

void CKHandleSignificantIssueBehavior(char a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ((a1 & 2) == 0) {
    goto LABEL_5;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v8 = 138543362;
    id v9 = v3;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v8, 0xCu);
    if ((a1 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_5:
    if ((a1 & 1) == 0) {
      goto LABEL_10;
    }
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v5 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
  {
    int v8 = 138543362;
    id v9 = v3;
    _os_log_fault_impl(&dword_18AF10000, v5, OS_LOG_TYPE_FAULT, "%{public}@", (uint8_t *)&v8, 0xCu);
  }
LABEL_10:
  if ((a1 & 4) != 0 && CKIsDebuggerAttached())
  {
    pid_t v6 = getpid();
    kill(v6, 5);
  }
  if ((a1 & 8) != 0)
  {
    pid_t v7 = getpid();
    kill(v7, 5);
  }
}

BOOL CKQoSIsBackground(uint64_t a1)
{
  return a1 == 9 || a1 == 17;
}

uint64_t CKNSQualityOfServiceFromQoSClass(int a1)
{
  if (a1 <= 16)
  {
    if (a1 == 9) {
      return 9;
    }
    return -1;
  }
  if (a1 == 33) {
    return 33;
  }
  if (a1 != 25)
  {
    if (a1 == 17) {
      return 17;
    }
    return -1;
  }
  return 25;
}

uint64_t CKCurrentThreadQualityOfService()
{
  qos_class_t v0 = qos_class_self();
  if ((int)v0 <= 16)
  {
    if (v0 == QOS_CLASS_BACKGROUND) {
      return 9;
    }
    return -1;
  }
  if (v0 == QOS_CLASS_USER_INTERACTIVE) {
    return 33;
  }
  if (v0 != QOS_CLASS_USER_INITIATED)
  {
    if (v0 == QOS_CLASS_UTILITY) {
      return 17;
    }
    return -1;
  }
  return 25;
}

void sub_18B060870(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], a2, a3, a4);
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  pid_t v7 = objc_msgSend_bundleIdentifier(v28, v4, v5, v6);
  if (objc_msgSend_hasPrefix_(v7, v8, @"com.apple.", v9))
  {
    byte_1EB279FB1 = 1;
  }
  else
  {
    uint64_t v13 = objc_msgSend_sharedManager(CKProcessScopedStateManager, v10, v11, v12);
    id v17 = objc_msgSend_untrustedEntitlements(v13, v14, v15, v16);
    if (objc_msgSend_hasSPIEntitlement(v17, v18, v19, v20))
    {
      byte_1EB279FB1 = 1;
    }
    else
    {
      uint64_t v24 = objc_msgSend_bundleRecordForCurrentProcess(MEMORY[0x1E4F223F8], v21, v22, v23);
      byte_1EB279FB1 = objc_msgSend_developerType(v24, v25, v26, v27) == 1;
    }
  }
}

uint64_t CKMainBundleIsAppExtension()
{
  if (qword_1EB27A0C8 != -1) {
    dispatch_once(&qword_1EB27A0C8, &unk_1ED7EC428);
  }
  return byte_1EB279FB2;
}

void sub_18B0609A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_bundleRecordForCurrentProcess(MEMORY[0x1E4F223F8], a2, a3, a4);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    byte_1EB279FB2 = 1;
  }
}

void CKCFDictionaryForEach(const __CFDictionary *a1, void *context)
{
}

uint64_t sub_18B060A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void CKCFArrayForEach(const __CFArray *a1, void *a2)
{
  id context = a2;
  v5.length = CFArrayGetCount(a1);
  v5.location = 0;
  CFArrayApplyFunction(a1, v5, (CFArrayApplierFunction)sub_18B060AB4, context);
}

uint64_t sub_18B060AB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

double CKMonotonicHostTime()
{
  return sub_18B060AD4(0);
}

double sub_18B060AD4(int a1)
{
  if (qword_1EB27A108 != -1)
  {
    dispatch_once(&qword_1EB27A108, &unk_1ED7EC0C8);
    if (a1) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = mach_continuous_time();
    return *(double *)&qword_1EB27A110 * (double)v2;
  }
  if (!a1) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = mach_continuous_approximate_time();
  return *(double *)&qword_1EB27A110 * (double)v2;
}

double CKMonotonicFastHostTime()
{
  return sub_18B060AD4(1);
}

char *CKTabIndentAtDepth(unint64_t a1)
{
  unint64_t v1 = 11 - a1;
  if (a1 > 0xB) {
    unint64_t v1 = 0;
  }
  return &asc_18B1DA35B[v1];
}

uint64_t NSTimeIntervalToClosestXPCActivityInterval(double a1)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  uint64_t result = *MEMORY[0x1E4F14200];
  uint64_t v2 = *MEMORY[0x1E4F14220];
  v9[0] = *MEMORY[0x1E4F14200];
  v9[1] = v2;
  uint64_t v3 = *MEMORY[0x1E4F14210];
  v9[2] = *MEMORY[0x1E4F141D8];
  v9[3] = v3;
  uint64_t v4 = *MEMORY[0x1E4F14218];
  v9[4] = *MEMORY[0x1E4F141F8];
  v9[5] = v4;
  uint64_t v5 = *MEMORY[0x1E4F141E8];
  v9[6] = *MEMORY[0x1E4F14238];
  v9[7] = v5;
  uint64_t v6 = *MEMORY[0x1E4F14228];
  v9[8] = *MEMORY[0x1E4F14228];
  if (a1 > 60.0)
  {
    uint64_t v7 = 0;
    uint64_t result = v6;
    while (v7 != 8)
    {
      double v8 = *(double *)&a0123456789abcd_1[8 * v7++ + 24];
      if (v8 >= a1)
      {
        if ((unint64_t)(v7 - 1) < 8) {
          return v9[v7];
        }
        return result;
      }
    }
  }
  return result;
}

id CKGetCurrentActivities()
{
  entries[3] = *MEMORY[0x1E4F143B8];
  qos_class_t v0 = objc_opt_new();
  memset(entries, 0, 24);
  unsigned int count = 3;
  os_activity_get_active(entries, &count);
  if (count)
  {
    for (unint64_t i = 0; i < count; ++i)
    {
      uint64_t v4 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v1, entries[i], v2);
      objc_msgSend_addObject_(v0, v5, (uint64_t)v4, v6);
    }
  }

  return v0;
}

id CKLocalizedString(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = (void *)MEMORY[0x1E4F28B50];
  id v11 = a2;
  id v12 = a1;
  uint64_t v13 = objc_opt_class();
  uint64_t v16 = objc_msgSend_bundleForClass_(v10, v14, v13, v15);
  id v17 = CKLocalizedStringFromTableInBundleVA(v12, @"CloudKit", v16, v11, (uint64_t)&a9);

  return v17;
}

id CKLocalizedStringFromTableInBundleVA(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v15 = a4;
  if (!v9)
  {
    uint64_t v31 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v12, v13, v14);
    uint64_t v34 = objc_msgSend_stringWithUTF8String_(NSString, v32, (uint64_t)"NSString * _Nonnull CKLocalizedStringFromTableInBundleVA(NSString *__strong _Nonnull, NSString *__strong _Nonnull, NSBundle *__strong _Nonnull, NSString *__strong _Nonnull, va_list)", v33);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v31, v35, (uint64_t)v34, @"CKUtils.m", 1612, @"key must not be nil");
  }
  if (!objc_msgSend_length(v9, v12, v13, v14))
  {
    uint64_t v36 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v16, v17, v18);
    __int16 v39 = objc_msgSend_stringWithUTF8String_(NSString, v37, (uint64_t)"NSString * _Nonnull CKLocalizedStringFromTableInBundleVA(NSString *__strong _Nonnull, NSString *__strong _Nonnull, NSBundle *__strong _Nonnull, NSString *__strong _Nonnull, va_list)", v38);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v36, v40, (uint64_t)v39, @"CKUtils.m", 1613, @"key must not be empty");
  }
  uint64_t v19 = CKLocalizedFormatString(v9, v10, v11);
  if (objc_msgSend_length(v15, v20, v21, v22))
  {
    id v23 = [NSString alloc];
    id v46 = 0;
    id valid = (id)objc_msgSend_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(v23, v24, (uint64_t)v19, (uint64_t)v15, 0, a5, &v46);
    id v29 = v46;
    if (!valid)
    {
      uint64_t v41 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v26, v27, v28);
      uint64_t v44 = objc_msgSend_stringWithUTF8String_(NSString, v42, (uint64_t)"NSString * _Nonnull CKLocalizedStringFromTableInBundleVA(NSString *__strong _Nonnull, NSString *__strong _Nonnull, NSBundle *__strong _Nonnull, NSString *__strong _Nonnull, va_list)", v43);
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v41, v45, (uint64_t)v44, @"CKUtils.m", 1623, @"Couldn't validate format string \"%@\" with specifiers \"%@\": %@", v19, v15, v29);
    }
  }
  else
  {
    id valid = v19;
  }

  return valid;
}

id CKLocalizedStringFromTableInBundle(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9 = CKLocalizedStringFromTableInBundleVA(a1, a2, a3, a4, (uint64_t)&a9);

  return v9;
}

id CKLocalizedFormatString(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v9 = objc_msgSend_localizedStringForKey_value_table_(v7, v8, (uint64_t)v5, (uint64_t)&stru_1ED7F5C98, v6);
  if (_os_feature_enabled_impl())
  {
    id v12 = objc_msgSend_stringWithFormat_(NSString, v10, @"%@_FFAPPLEACCOUNT", v11, v5);
    uint64_t v14 = objc_msgSend_localizedStringForKey_value_table_(v7, v13, (uint64_t)v12, (uint64_t)v9, v6);

    id v9 = (void *)v14;
  }

  return v9;
}

uint64_t sub_18B06117C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel_CKSafeStringForURLWithCharsToBeEscaped_, @":/?#[]@!$&'()*+,;=%\" ", a4);
}

id sub_18B061188(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, a3, a4);
  id v9 = objc_msgSend_invertedSet(v5, v6, v7, v8);
  id v12 = objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(a1, v10, (uint64_t)v9, v11);

  return v12;
}

id sub_18B061200(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_stringByDeletingPathExtension(a1, a2, a3, a4);
  uint64_t v8 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v5, v6, v7);
  uint64_t v11 = objc_msgSend_componentsSeparatedByCharactersInSet_(v4, v9, (uint64_t)v8, v10);

  uint64_t v14 = objc_msgSend_componentsJoinedByString_(v11, v12, @"_", v13);
  uint64_t v18 = objc_msgSend_mutableCopy(v14, v15, v16, v17);

  uint64_t v22 = objc_msgSend_URLFragmentAllowedCharacterSet(MEMORY[0x1E4F28B88], v19, v20, v21);
  uint64_t v26 = objc_msgSend_invertedSet(v22, v23, v24, v25);

  if (objc_msgSend_rangeOfCharacterFromSet_(v18, v27, (uint64_t)v26, v28) == 0x7FFFFFFFFFFFFFFFLL && v29 == 0)
  {
    if (objc_msgSend_length(v18, v29, v30, v31))
    {
      uint64_t v39 = objc_msgSend_length(v18, v34, v35, v36);
      while (1)
      {
        unint64_t v40 = v39 - 1;
        if (objc_msgSend_characterAtIndex_(v18, v37, v39 - 1, v38) != 46) {
          break;
        }
        --v39;
        if (!v40)
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          int v42 = ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v50 = 0;
            _os_log_debug_impl(&dword_18AF10000, v42, OS_LOG_TYPE_DEBUG, "The document name consisted entirely of periods. Using no fragment.", v50, 2u);
          }
          goto LABEL_17;
        }
      }
      if (v40 < objc_msgSend_length(v18, v37, v41, v38) - 1)
      {
        uint64_t v47 = objc_msgSend_length(v18, v44, v45, v46);
        objc_msgSend_deleteCharactersInRange_(v18, v48, v39, v47 - v39);
      }
    }
    id v43 = v18;
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v33 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18AF10000, v33, OS_LOG_TYPE_INFO, "Warn: Share title contains characters that require URL encoding. Dropping fragment from URL.", buf, 2u);
    }
LABEL_17:
    id v43 = 0;
  }

  return v43;
}

id sub_18B061454(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_mutableCopy(a1, a2, a3, a4);
  uint64_t v8 = objc_msgSend_length(v4, v5, v6, v7);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v4, v9, @"_", @" ", 0, 0, v8);
  uint64_t v13 = objc_msgSend_stringByRemovingPercentEncoding(v4, v10, v11, v12);

  return v13;
}

id sub_18B0614C8(void *a1, const char *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  memset(v17, 0, sizeof(v17));
  uint64_t v3 = objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E4F1C9B8], a2, (uint64_t)v17, 32, 0);
  id v4 = a1;
  uint64_t v8 = (const void *)objc_msgSend_UTF8String(v4, v5, v6, v7);
  CC_LONG v11 = objc_msgSend_lengthOfBytesUsingEncoding_(v4, v9, 4, v10);
  CC_SHA256(v8, v11, (unsigned __int8 *)v17);
  id v15 = objc_msgSend_CKLowercaseHexStringWithoutSpaces(v3, v12, v13, v14);

  return v15;
}

id sub_18B0615A4(void *a1)
{
  if (__sTestOverridesAvailable)
  {
    id v2 = a1;
  }
  else
  {
    uint64_t v3 = NSHomeDirectory();
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, v4, (uint64_t)v3, @"~");
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id sub_18B06161C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4);
  uint64_t v8 = objc_msgSend_stringByTrimmingCharactersInSet_(a1, v6, (uint64_t)v5, v7);

  uint64_t v12 = objc_msgSend_CKNilIfLengthZero(v8, v9, v10, v11);

  return v12;
}

id sub_18B061690(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_dataUsingEncoding_(a1, a2, 1, a4);
  uint64_t v8 = objc_msgSend_mutableCopy(v4, v5, v6, v7);

  uint64_t v12 = objc_msgSend_length(v8, v9, v10, v11);
  if (v12
    && (uint64_t v13 = v12,
        id v14 = v8,
        (uint64_t v18 = (unsigned char *)objc_msgSend_mutableBytes(v14, v15, v16, v17)) != 0))
  {
    do
    {
      int v19 = *v18;
      BOOL v20 = (v19 - 48) >= 0xA && (v19 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (v20 && v19 != 32 && v19 != 45) {
        unsigned char *v18 = 95;
      }
      ++v18;
      --v13;
    }
    while (v13);
    id v21 = [NSString alloc];
    id v23 = objc_msgSend_initWithData_encoding_(v21, v22, (uint64_t)v14, 1);
  }
  else
  {
    id v23 = 0;
  }

  return v23;
}

id sub_18B061770(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_dataUsingEncoding_(a1, a2, 4, a4);
  uint64_t v7 = objc_msgSend_base64EncodedStringWithOptions_(v4, v5, 0, v6);

  if (objc_msgSend_length(v7, v8, v9, v10))
  {
    uint64_t v13 = objc_msgSend_stringWithFormat_(NSString, v11, @":%@:", v12, v7);
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

id sub_18B061804(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_dataUsingEncoding_(a1, a2, 4, a4);
  uint64_t v8 = objc_msgSend_CKBase64URLSafeString(v4, v5, v6, v7);

  return v8;
}

id sub_18B061854(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_CKDataFromBase64URLSafeString_(MEMORY[0x1E4F1C9B8], a2, a1, a4);
  id v5 = [NSString alloc];
  uint64_t v7 = objc_msgSend_initWithData_encoding_(v5, v6, (uint64_t)v4, 4);

  return v7;
}

id sub_18B0618BC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v8 = objc_msgSend_mutableCopy(a1, v5, v6, v7);
  id v9 = objc_alloc(MEMORY[0x1E4F28FD8]);
  id v22 = 0;
  uint64_t v11 = objc_msgSend_initWithPattern_options_error_(v9, v10, @"[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}", 0, &v22);
  id v12 = v22;
  uint64_t v16 = v12;
  if (v11) {
    BOOL v17 = v12 == 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    uint64_t v19 = objc_msgSend_length(v8, v13, v14, v15);
    objc_msgSend_replaceMatchesInString_options_range_withTemplate_(v11, v20, (uint64_t)v8, 0, 0, v19, v4);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v18 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v24 = v16;
      _os_log_error_impl(&dword_18AF10000, v18, OS_LOG_TYPE_ERROR, "Error creating regex for removing UUIDs: %@", buf, 0xCu);
    }
  }

  return v8;
}

id sub_18B061A3C(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = objc_opt_new();
  id v9 = objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(&stru_1ED7F5C98, v8, a3, @" ", 0);
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v22[3] = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  _OWORD v17[2] = sub_18B061B90;
  v17[3] = &unk_1E54624A0;
  BOOL v20 = v22;
  id v10 = v7;
  id v18 = v10;
  char v21 = a4;
  id v11 = v9;
  id v19 = v11;
  objc_msgSend_enumerateLinesUsingBlock_(a1, v12, (uint64_t)v17, v13);
  uint64_t v14 = v19;
  id v15 = v10;

  _Block_object_dispose(v22, 8);

  return v15;
}

void sub_18B061B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B061B90(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v5 = (char *)v3;
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
    && (objc_msgSend_appendFormat_(*(void **)(a1 + 32), v3, @"\n", v4),
        uint64_t v3 = v5,
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    || !*(unsigned char *)(a1 + 56))
  {
    objc_msgSend_appendFormat_(*(void **)(a1 + 32), v3, @"%@%@", v4, *(void *)(a1 + 40), v3);
  }
  else
  {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v3, (uint64_t)v3, v4);
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

id sub_18B061C4C(void *a1)
{
  uint64_t v15 = 0;
  id v1 = a1;
  uint64_t v5 = objc_msgSend_bytes(v1, v2, v3, v4);
  unint64_t v9 = objc_msgSend_length(v1, v6, v7, v8);
  id v10 = CKHexCharFromBytes(v5, v9, &v15, 0);
  id v11 = [NSString alloc];
  uint64_t v13 = objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(v11, v12, (uint64_t)v10, v15, 1, 1);

  return v13;
}

id sub_18B061CD4(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v5 = a3;
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
  if (a4) {
    unint64_t v9 = @"0123456789ABCDEF";
  }
  else {
    unint64_t v9 = @"0123456789abcdef";
  }
  if (a4) {
    char v10 = -65;
  }
  else {
    char v10 = -97;
  }
  id v11 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v6, (uint64_t)v9, v7);
  if (objc_msgSend_length(v5, v12, v13, v14))
  {
    unsigned int v18 = 0;
    do
    {
      unint64_t v19 = v18;
      if (objc_msgSend_length(v5, v15, v16, v17) <= (unint64_t)v18)
      {
        LODWORD(v24) = 0;
        char v29 = 1;
      }
      else
      {
        unsigned int v23 = v18 + 1;
        do
        {
          unsigned int v18 = v23;
          uint64_t v24 = objc_msgSend_characterAtIndex_(v5, v20, v19, v22);
          char IsMember = objc_msgSend_characterIsMember_(v11, v25, v24, v26);
          unint64_t v19 = v18;
          if (IsMember) {
            break;
          }
          unint64_t v28 = objc_msgSend_length(v5, v20, v21, v22);
          unsigned int v23 = v18 + 1;
        }
        while (v28 > v18);
        char v29 = IsMember ^ 1;
      }
      if (objc_msgSend_length(v5, v20, v21, v22) <= v19) {
        break;
      }
      ++v18;
      while (1)
      {
        uint64_t v32 = objc_msgSend_characterAtIndex_(v5, v30, v19, v31);
        if (objc_msgSend_characterIsMember_(v11, v33, v32, v34)) {
          break;
        }
        unint64_t v19 = v18;
        if (objc_msgSend_length(v5, v35, v36, v37) <= (unint64_t)v18++) {
          goto LABEL_27;
        }
      }
      if (v29) {
        break;
      }
      char v39 = v32 - 48;
      if ((v32 - 48) >= 0xA) {
        char v39 = v10 + v32 + 10;
      }
      char v40 = (v24 - 48) >= 0xA ? 16 * v24 - 112 : 16 * v24;
      char v45 = v39 + v40;
      objc_msgSend_appendBytes_length_(v8, v35, (uint64_t)&v45, 1);
    }
    while (objc_msgSend_length(v5, v41, v42, v43) > (unint64_t)v18);
  }
LABEL_27:

  return v8;
}

uint64_t sub_18B061E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a1, sel_CKDataWithHexString_stringIsUppercase_, a3, 0);
}

id sub_18B061EA4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_base64EncodedStringWithOptions_(a1, a2, 0, a4);
  id v8 = objc_msgSend_mutableCopy(v4, v5, v6, v7);

  uint64_t v12 = objc_msgSend_length(v8, v9, v10, v11);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v8, v13, @"+", @"-", 0, 0, v12);
  uint64_t v17 = objc_msgSend_length(v8, v14, v15, v16);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v8, v18, @"/", @"_", 0, 0, v17);
  uint64_t v22 = objc_msgSend_length(v8, v19, v20, v21);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v8, v23, @"=", (uint64_t)&stru_1ED7F5C98, 0, 0, v22);

  return v8;
}

id sub_18B061F74(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = objc_msgSend_mutableCopy(a3, a2, (uint64_t)a3, a4);
    uint64_t v8 = objc_msgSend_length(v4, v5, v6, v7);
    objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v4, v9, @"-", @"+", 0, 0, v8);
    uint64_t v13 = objc_msgSend_length(v4, v10, v11, v12);
    objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v4, v14, @"_", @"/", 0, 0, v13);
    uint64_t v20 = objc_msgSend_length(v4, v15, v16, v17) & 3;
    if (v20)
    {
      unint64_t v21 = v20 | 0xFFFFFFFFFFFFFFFCLL;
      do
        objc_msgSend_appendString_(v4, v18, @"=", v19);
      while (!__CFADD__(v21++, 1));
    }
    id v23 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    uint64_t v25 = objc_msgSend_initWithBase64EncodedString_options_(v23, v24, (uint64_t)v4, 0);
  }
  else
  {
    uint64_t v25 = 0;
  }

  return v25;
}

uint64_t sub_18B062068(id a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (a1 == v7 || !objc_msgSend_length(a1, v4, v5, v6) && !objc_msgSend_length(v7, v8, v9, v10)) {
    goto LABEL_18;
  }
  if (!objc_msgSend_length(a1, v8, v9, v10))
  {
LABEL_19:
    uint64_t v27 = -1;
    goto LABEL_24;
  }
  if (!objc_msgSend_length(v7, v11, v12, v13))
  {
    uint64_t v27 = 1;
    goto LABEL_24;
  }
  unint64_t v17 = objc_msgSend_length(a1, v14, v15, v16);
  unint64_t v21 = objc_msgSend_length(v7, v18, v19, v20);
  if (v17 >= v21) {
    unint64_t v25 = v21;
  }
  else {
    unint64_t v25 = v17;
  }
  if (v25)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 1;
    do
    {
      __int16 v50 = 0;
      objc_msgSend_getBytes_range_(a1, v22, (uint64_t)&v50 + 1, v26, 1);
      objc_msgSend_getBytes_range_(v7, v28, (uint64_t)&v50, v26, 1);
      if (HIBYTE(v50) < v50) {
        goto LABEL_19;
      }
      if (v50 < HIBYTE(v50)) {
        goto LABEL_24;
      }
      ++v26;
      unint64_t v32 = objc_msgSend_length(a1, v29, v30, v31);
      unint64_t v36 = objc_msgSend_length(v7, v33, v34, v35);
      if (v32 >= v36) {
        unint64_t v37 = v36;
      }
      else {
        unint64_t v37 = v32;
      }
    }
    while (v26 < v37);
  }
  uint64_t v38 = objc_msgSend_length(a1, v22, v23, v24);
  if (v38 != objc_msgSend_length(v7, v39, v40, v41))
  {
    unint64_t v45 = objc_msgSend_length(a1, v42, v43, v44);
    if (v45 < objc_msgSend_length(v7, v46, v47, v48)) {
      uint64_t v27 = -1;
    }
    else {
      uint64_t v27 = 1;
    }
  }
  else
  {
LABEL_18:
    uint64_t v27 = 0;
  }
LABEL_24:

  return v27;
}

__CFString *sub_18B0621D0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_pathComponents(a1, a2, a3, a4);
  if ((unint64_t)objc_msgSend_count(v5, v6, v7, v8) < 2)
  {
    uint64_t v15 = &stru_1ED7F5C98;
  }
  else
  {
    uint64_t v12 = objc_msgSend_pathComponents(a1, v9, v10, v11);
    objc_msgSend_objectAtIndexedSubscript_(v12, v13, 1, v14);
    uint64_t v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v15;
}

id sub_18B062258(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_scheme(a1, a2, a3, a4);
  if (v5)
  {
    uint64_t v9 = (void *)v5;
    uint64_t v10 = objc_msgSend_host(a1, v6, v7, v8);
    if (v10)
    {
      uint64_t v14 = (void *)v10;
      uint64_t v15 = objc_msgSend_pathComponents(a1, v11, v12, v13);
      unint64_t v19 = objc_msgSend_count(v15, v16, v17, v18);

      if (v19 >= 2)
      {
        uint64_t v20 = NSString;
        unint64_t v21 = objc_msgSend_scheme(a1, v6, v7, v8);
        unint64_t v25 = objc_msgSend_host(a1, v22, v23, v24);
        char v29 = objc_msgSend_CKURLSlug(a1, v26, v27, v28);
        unint64_t v32 = objc_msgSend_stringWithFormat_(v20, v30, @"%@://%@/%@/", v31, v21, v25, v29);

        goto LABEL_7;
      }
    }
    else
    {
    }
  }
  unint64_t v32 = objc_msgSend_absoluteString(a1, v6, v7, v8);
LABEL_7:

  return v32;
}

__CFString *sub_18B062370(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_pathComponents(a1, a2, a3, a4);
  if ((unint64_t)objc_msgSend_count(v5, v6, v7, v8) < 3)
  {
    unint64_t v25 = &stru_1ED7F5C98;
  }
  else
  {
    uint64_t v12 = objc_msgSend_pathComponents(a1, v9, v10, v11);
    uint64_t v16 = objc_msgSend_pathComponents(a1, v13, v14, v15);
    uint64_t v20 = objc_msgSend_count(v16, v17, v18, v19);
    uint64_t v22 = objc_msgSend_subarrayWithRange_(v12, v21, 2, v20 - 2);
    objc_msgSend_componentsJoinedByString_(v22, v23, @"/", v24);
    unint64_t v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v25;
}

id sub_18B062438(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_path(a1, a2, a3, a4);
  uint64_t v8 = objc_msgSend_CKSanitizedPath(v4, v5, v6, v7);

  return v8;
}

BOOL sub_18B062484(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  uint64_t v8 = (const char *)objc_msgSend_fileSystemRepresentation(v4, v5, v6, v7);
  int v9 = open(v8, 0);
  if (v9 < 0)
  {
    uint64_t v16 = *__error();
    uint64_t v17 = __error();
    uint64_t v18 = strerror(*v17);
    uint64_t v15 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v19, @"CKInternalErrorDomain", 1000, @"open() failed while marking %@ as purgeable %d (%s)", v4, v16, v18);
    if (!a3) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  int v10 = v9;
  uint64_t v21 = 65541;
  uint64_t v11 = ffsctl(v9, 0xC0084A44uLL, &v21, 0);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = strerror(v11);
    uint64_t v15 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v14, @"CKInternalErrorDomain", 1000, @"Failed to mark %@ as purgeable %d (%s)", v4, v12, v13);
  }
  else
  {
    uint64_t v15 = 0;
  }
  close(v10);
  if (a3)
  {
LABEL_8:
    if (v15) {
      *a3 = v15;
    }
  }
LABEL_10:

  return v15 == 0;
}

uint64_t sub_18B062674(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  objc_sync_enter(v5);
  int v10 = objc_msgSend_containsObject_(v5, v6, (uint64_t)v4, v7);
  if ((v10 & 1) == 0) {
    objc_msgSend_addObject_(v5, v8, (uint64_t)v4, v9);
  }
  objc_sync_exit(v5);

  return v10 ^ 1u;
}

void sub_18B0626E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0626FC(void *a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = a1;
  objc_sync_enter(v4);
  objc_msgSend_removeObject_(v4, v5, (uint64_t)v7, v6);
  objc_sync_exit(v4);
}

void sub_18B062764(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18B062778(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  objc_sync_enter(v8);
  uint64_t v11 = objc_msgSend_objectForKey_(v8, v9, (uint64_t)v7, v10);

  if (!v11) {
    objc_msgSend_setObject_forKey_(v8, v12, (uint64_t)v6, (uint64_t)v7);
  }
  objc_sync_exit(v8);

  return v11 == 0;
}

void sub_18B06280C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B062820(void *a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = a1;
  objc_sync_enter(v4);
  objc_msgSend_removeObjectForKey_(v4, v5, (uint64_t)v7, v6);
  objc_sync_exit(v4);
}

void sub_18B062888(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B06289C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v4 = a3;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v22, (uint64_t)v30, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v11 = *(void *)v23;
    *(void *)&long long v9 = 138543618;
    long long v21 = v9;
    while (2)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void *)(*((void *)&v22 + 1) + 8 * v12);
        uint64_t v14 = objc_msgSend_objectForKey_(a1, v7, v13, v8, v21, (void)v22);
        if (v14)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v17 = objc_msgSend_URLWithString_(MEMORY[0x1E4F1CB10], v15, (uint64_t)v14, v16);
            if (v17)
            {
              uint64_t v19 = (void *)v17;

              goto LABEL_17;
            }
          }
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v18 = ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v21;
            uint64_t v27 = v13;
            __int16 v28 = 2114;
            char v29 = v14;
            _os_log_debug_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEBUG, "Couldn't create url for key %{public}@ with value %{public}@", buf, 0x16u);
          }
        }

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v22, (uint64_t)v30, 16);
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v19 = 0;
LABEL_17:

  return v19;
}

id sub_18B062AA8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(a1, v5, (uint64_t)v4, v6);
  if (!v10)
  {
    uint64_t v11 = objc_msgSend_lowercaseString(v4, v7, v8, v9);
    uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(a1, v12, (uint64_t)v11, v13);

    if (!v10)
    {
      uint64_t v17 = objc_msgSend_capitalizedString(v4, v14, v15, v16);
      uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(a1, v18, (uint64_t)v17, v19);

      if (!v10)
      {
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = sub_18B062C14;
        v33[3] = &unk_1E54624C8;
        id v34 = v4;
        long long v22 = objc_msgSend_keysOfEntriesPassingTest_(a1, v20, (uint64_t)v33, v21);
        if (objc_msgSend_count(v22, v23, v24, v25))
        {
          char v29 = objc_msgSend_anyObject(v22, v26, v27, v28);
          uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(a1, v30, (uint64_t)v29, v31);
        }
        else
        {
          uint64_t v10 = 0;
        }
      }
    }
  }

  return v10;
}

uint64_t sub_18B062C14(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && !objc_msgSend_caseInsensitiveCompare_(v6, v7, *(void *)(a1 + 32), v8))
  {
    uint64_t v9 = 1;
    *a4 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id sub_18B062C8C(int a1, int a2, int __errnum)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *MEMORY[0x1E4F1D140];
  id v4 = NSString;
  id v5 = strerror(__errnum);
  uint64_t v8 = objc_msgSend_stringWithUTF8String_(v4, v6, (uint64_t)v5, v7);
  v15[0] = v8;
  uint64_t v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)v15, (uint64_t)&v14, 1);

  uint64_t v12 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v11, *MEMORY[0x1E4F28798], __errnum, v10);

  return v12;
}

uint64_t sub_18B062D84()
{
  qos_class_t v0 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v2 = *__error();

  return objc_msgSend_CKErrorWithPOSIXCode_(v0, v1, v2, v3);
}

BOOL sub_18B062DC4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_msgSend_domain(a1, a2, a3, a4);
  if (objc_msgSend_isEqualToString_(v6, v7, *MEMORY[0x1E4F28798], v8)) {
    BOOL v12 = objc_msgSend_code(a1, v9, v10, v11) == a3;
  }
  else {
    BOOL v12 = 0;
  }

  return v12;
}

id sub_18B062E30(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E4F1CA60], a2, 3, a4);
  id v62 = (id)objc_claimAutoreleasedReturnValue();
  if (!v4) {
    goto LABEL_22;
  }
  uint64_t v9 = objc_msgSend_domain(a1, v6, v7, v8);
  objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v10, @"domain", (uint64_t)v9);

  id v11 = objc_alloc(NSNumber);
  uint64_t v15 = objc_msgSend_code(a1, v12, v13, v14);
  uint64_t v18 = objc_msgSend_initWithLong_(v11, v16, v15, v17);
  objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v19, @"code", (uint64_t)v18);

  long long v23 = objc_msgSend_localizedDescription(a1, v20, v21, v22);
  objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v24, @"localizedDescription", (uint64_t)v23);

  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  uint64_t v28 = objc_msgSend_userInfo(a1, v25, v26, v27);
  unint64_t v32 = objc_msgSend_allKeys(v28, v29, v30, v31);

  uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v63, (uint64_t)v67, 16);
  if (!v34) {
    goto LABEL_19;
  }
  uint64_t v37 = v34;
  uint64_t v38 = *(void *)v64;
  do
  {
    for (uint64_t i = 0; i != v37; ++i)
    {
      if (*(void *)v64 != v38) {
        objc_enumerationMutation(v32);
      }
      uint64_t v40 = *(void **)(*((void *)&v63 + 1) + 8 * i);
      if ((objc_msgSend_isEqualToString_(v40, v35, @"NSLocalizedDescription", v36) & 1) == 0)
      {
        uint64_t v42 = objc_msgSend_userInfo(a1, v35, v41, v36);
        unint64_t v45 = objc_msgSend_valueForKey_(v42, v43, (uint64_t)v40, v44);

        if (v45)
        {
          if ((objc_opt_respondsToSelector() & 1) == 0) {
            goto LABEL_12;
          }
          uint64_t v48 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v45, v46, 1, 1, 1);
          if (!objc_msgSend_count(v48, v49, v50, v51))
          {

LABEL_12:
            if (objc_msgSend_isValidJSONObject_(MEMORY[0x1E4F28D90], v46, (uint64_t)v45, v47))
            {
              objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v53, (uint64_t)v40, (uint64_t)v45);
              goto LABEL_16;
            }
            uint64_t v48 = objc_msgSend_description(v45, v53, v54, v55);
          }
          objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v52, (uint64_t)v40, (uint64_t)v48);
        }
LABEL_16:

        continue;
      }
    }
    uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v35, (uint64_t)&v63, (uint64_t)v67, 16);
  }
  while (v37);
LABEL_19:

  v60 = objc_msgSend_CKStringForWellKnownCKErrors(a1, v56, v57, v58);
  if (v60) {
    objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v59, @"cloudKitErrorType", (uint64_t)v60);
  }

LABEL_22:

  return v62;
}

uint64_t CKIsPCSError(void *a1)
{
  id v1 = a1;
  id v5 = objc_msgSend_domain(v1, v2, v3, v4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"CKInternalErrorDomain", v7);

  if (isEqualToString)
  {
    uint64_t v12 = objc_msgSend_code(v1, v9, v10, v11);
    if ((unint64_t)(v12 - 5000) <= 0x14) {
      uint64_t v13 = (0x1F0A3Fu >> (v12 + 120)) & 1;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

id CKTopLevelUnderlyingErrorCodes()
{
  if (qword_1EB27A0D8 != -1) {
    dispatch_once(&qword_1EB27A0D8, &unk_1ED7F5538);
  }
  qos_class_t v0 = (void *)qword_1EB27A0D0;

  return v0;
}

uint64_t sub_18B0631E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], a2, (uint64_t)&unk_1ED8462D0, a4, &unk_1ED8462E8, &unk_1ED846300, &unk_1ED846318, &unk_1ED846330, &unk_1ED846348, &unk_1ED846360, &unk_1ED846378, 0);
  uint64_t v5 = qword_1EB27A0D0;
  qword_1EB27A0D0 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

uint64_t CKGetGenerationCounterForFd(int a1, _DWORD *a2, void *a3)
{
  uint64_t v13 = 0;
  long long v12 = xmmword_18B1F39C8;
  uint64_t v11 = 0;
  if (fgetattrlist(a1, &v12, &v11, 8uLL, 0x20u))
  {
    if (a3)
    {
      uint64_t v8 = objc_msgSend_CKErrorFromErrno(MEMORY[0x1E4F28C58], v5, v6, v7);
LABEL_4:
      id v9 = v8;
      uint64_t result = 0;
      *a3 = v9;
      return result;
    }
  }
  else
  {
    if (HIDWORD(v11))
    {
      *a2 = HIDWORD(v11);
      return 1;
    }
    if (a3)
    {
      uint64_t v8 = objc_msgSend_CKErrorWithPOSIXCode_(MEMORY[0x1E4F28C58], v5, 16, v7);
      goto LABEL_4;
    }
  }
  return 0;
}

__CFString *sub_18B063338()
{
  return &stru_1ED7F5C98;
}

uint64_t sub_18B063344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDescriptionWithExpansion_, 1, a4);
}

id sub_18B06334C(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (a5)
    {
      uint64_t v6 = (void *)MEMORY[0x1E4F1CA60];
      uint64_t v7 = objc_msgSend_count(a1, a2, a3, a4);
      objc_msgSend_dictionaryWithCapacity_(v6, v8, v7, v9);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      objc_msgSend_allKeys(a1, v11, v12, v13);
      id obj = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v40, (uint64_t)v44, 16);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v41;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v41 != v17) {
              objc_enumerationMutation(obj);
            }
            uint64_t v19 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v23 = v19;
            }
            else
            {
              objc_msgSend_description(v19, v20, v21, v22);
              id v23 = (id)objc_claimAutoreleasedReturnValue();
            }
            uint64_t v26 = v23;
            uint64_t v27 = objc_msgSend_objectForKeyedSubscript_(a1, v24, (uint64_t)v19, v25);
            char v29 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v27, v28, 1, 1, 1);

            if (objc_msgSend_count(v29, v30, v31, v32))
            {
              objc_msgSend_setObject_forKeyedSubscript_(v10, v33, (uint64_t)v29, (uint64_t)v26);
            }
            else
            {
              uint64_t v35 = objc_msgSend_objectForKeyedSubscript_(a1, v33, (uint64_t)v19, v34);
              objc_msgSend_setObject_forKeyedSubscript_(v10, v36, (uint64_t)v35, (uint64_t)v26);
            }
          }
          uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v37, (uint64_t)&v40, (uint64_t)v44, 16);
        }
        while (v16);
      }
    }
    else
    {
      id v10 = a1;
    }
  }
  else
  {
    id v10 = (id)MEMORY[0x1E4F1CC08];
  }

  return v10;
}

id sub_18B06355C(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (a5)
    {
      uint64_t v6 = (void *)MEMORY[0x1E4F1CA48];
      uint64_t v7 = objc_msgSend_count(a1, a2, a3, a4);
      id v10 = objc_msgSend_arrayWithCapacity_(v6, v8, v7, v9);
      if (objc_msgSend_count(a1, v11, v12, v13))
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v17 = objc_msgSend_objectAtIndexedSubscript_(a1, v14, v16, v15);
          uint64_t v21 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v17, v18, 1, 1, 1);
          if (v21)
          {
            objc_msgSend_setObject_atIndexedSubscript_(v10, v19, (uint64_t)v21, v16);
          }
          else
          {
            uint64_t v22 = objc_msgSend_objectAtIndexedSubscript_(a1, v19, v16, v20);
            objc_msgSend_setObject_atIndexedSubscript_(v10, v23, (uint64_t)v22, v16);
          }
          ++v16;
        }
        while (v16 < objc_msgSend_count(a1, v24, v25, v26));
      }
      v31[0] = @"type";
      v31[1] = @"items";
      v32[0] = @"array";
      v32[1] = v10;
      uint64_t v27 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)v32, (uint64_t)v31, 2);
    }
    else
    {
      char v29 = @"items";
      uint64_t v30 = a1;
      uint64_t v27 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)&v30, (uint64_t)&v29, 1);
    }
  }
  else
  {
    uint64_t v27 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v27;
}

id sub_18B063718(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    uint64_t v27 = @"count";
    unint64_t v16 = NSNumber;
    uint64_t v17 = objc_msgSend_count(a1, a2, a3, a4);
    objc_msgSend_numberWithUnsignedInteger_(v16, v18, v17, v19);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    id v28 = v11;
    uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v20, (uint64_t)&v28, (uint64_t)&v27, 1);
    goto LABEL_5;
  }
  if (a5)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4F1CA48];
    uint64_t v7 = objc_msgSend_count(a1, a2, a3, a4);
    id v10 = objc_msgSend_arrayWithCapacity_(v6, v8, v7, v9);
    uint64_t v22 = MEMORY[0x1E4F143A8];
    uint64_t v23 = 3221225472;
    uint64_t v24 = sub_18B0638D8;
    uint64_t v25 = &unk_1E5462518;
    id v26 = v10;
    id v11 = v10;
    objc_msgSend_enumerateObjectsUsingBlock_(a1, v12, (uint64_t)&v22, v13);
    v31[0] = @"type";
    v31[1] = @"items";
    v32[0] = @"orderedSet";
    v32[1] = v11;
    uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)v32, (uint64_t)v31, 2, v22, v23, v24, v25);

LABEL_5:
    goto LABEL_7;
  }
  char v29 = @"items";
  uint64_t v30 = a1;
  uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)&v30, (uint64_t)&v29, 1);
LABEL_7:

  return v15;
}

void sub_18B0638D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v9 = a2;
  uint64_t v7 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v9, v5, 1, 1, 1);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v7) {
    objc_msgSend_setObject_atIndexedSubscript_(v8, v6, (uint64_t)v7, a3);
  }
  else {
    objc_msgSend_setObject_atIndexedSubscript_(v8, v6, (uint64_t)v9, a3);
  }
}

id sub_18B063960(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  v42[3] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (a5)
    {
      v42[0] = @"data";
      v41[0] = @"type";
      v41[1] = @"length";
      uint64_t v6 = NSNumber;
      uint64_t v7 = objc_msgSend_length(a1, a2, a3, a4);
      id v10 = objc_msgSend_numberWithUnsignedInteger_(v6, v8, v7, v9);
      v42[1] = v10;
      v41[2] = @"data";
      uint64_t v13 = objc_msgSend_base64EncodedStringWithOptions_(a1, v11, 32, v12);
      v42[2] = v13;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)v42, (uint64_t)v41, 3);
    }
    else
    {
      if ((unint64_t)objc_msgSend_length(a1, a2, a3, a4) < 0x19)
      {
        v37[0] = @"length";
        uint64_t v30 = NSNumber;
        uint64_t v31 = objc_msgSend_length(a1, v16, v17, v18);
        id v10 = objc_msgSend_numberWithUnsignedInteger_(v30, v32, v31, v33);
        v37[1] = @"data";
        v38[0] = v10;
        uint64_t v13 = objc_msgSend_base64EncodedStringWithOptions_(a1, v34, 32, v35);
        v38[1] = v13;
        uint64_t v27 = (void *)MEMORY[0x1E4F1C9E8];
        id v28 = v38;
        char v29 = v37;
      }
      else
      {
        v39[0] = @"length";
        uint64_t v19 = NSNumber;
        uint64_t v20 = objc_msgSend_length(a1, v16, v17, v18);
        id v10 = objc_msgSend_numberWithUnsignedInteger_(v19, v21, v20, v22);
        v39[1] = @"sha256";
        v40[0] = v10;
        uint64_t v13 = objc_msgSend_CKSHA256(a1, v23, v24, v25);
        v40[1] = v13;
        uint64_t v27 = (void *)MEMORY[0x1E4F1C9E8];
        id v28 = v40;
        char v29 = v39;
      }
      objc_msgSend_dictionaryWithObjects_forKeys_count_(v27, v26, (uint64_t)v28, (uint64_t)v29, 2);
    uint64_t v15 = };
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v15;
}

id sub_18B063DA4(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  v54[4] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (a5)
    {
      v54[0] = @"location";
      v53[0] = @"type";
      v53[1] = @"latitude";
      uint64_t v6 = NSNumber;
      objc_msgSend_coordinate(a1, a2, a3, a4);
      id v10 = objc_msgSend_numberWithDouble_(v6, v7, v8, v9);
      v54[1] = v10;
      v53[2] = @"longitude";
      id v11 = NSNumber;
      objc_msgSend_coordinate(a1, v12, v13, v14);
      uint64_t v19 = objc_msgSend_numberWithDouble_(v11, v15, v16, v17, v18);
      v54[2] = v19;
      v53[3] = @"altitude";
      uint64_t v20 = NSNumber;
      objc_msgSend_altitude(a1, v21, v22, v23);
      uint64_t v27 = objc_msgSend_numberWithDouble_(v20, v24, v25, v26);
      v54[3] = v27;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v54, (uint64_t)v53, 4);
    }
    else
    {
      v51[0] = @"latitude";
      uint64_t v30 = NSNumber;
      objc_msgSend_coordinate(a1, a2, a3, a4);
      id v10 = objc_msgSend_numberWithDouble_(v30, v31, v32, v33);
      v52[0] = v10;
      v51[1] = @"longitude";
      uint64_t v34 = NSNumber;
      objc_msgSend_coordinate(a1, v35, v36, v37);
      uint64_t v19 = objc_msgSend_numberWithDouble_(v34, v38, v39, v40, v41);
      v52[1] = v19;
      v51[2] = @"altitude";
      long long v42 = NSNumber;
      objc_msgSend_altitude(a1, v43, v44, v45);
      uint64_t v27 = objc_msgSend_numberWithDouble_(v42, v46, v47, v48);
      v52[2] = v27;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v49, (uint64_t)v52, (uint64_t)v51, 3);
    char v29 = };
  }
  else
  {
    char v29 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v29;
}

id sub_18B063F98(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v7 = objc_msgSend_count(&unk_1ED845EB0, a2, a3, a4);
  id v11 = objc_msgSend_dictionaryWithCapacity_(v6, v8, v7, v9);
  if (v4)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1ED845EB0, v10, (uint64_t)&v24, (uint64_t)v28, 16);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v25 != v14) {
            objc_enumerationMutation(&unk_1ED845EB0);
          }
          uint64_t v16 = *(NSString **)(*((void *)&v24 + 1) + 8 * i);
          SEL v17 = NSSelectorFromString(v16);
          uint64_t v20 = objc_msgSend_performSelector_(a1, v18, (uint64_t)v17, v19);
          objc_msgSend_CKAddPropertySafelyForKey_value_(v11, v21, (uint64_t)v16, v20);
        }
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1ED845EB0, v22, (uint64_t)&v24, (uint64_t)v28, 16);
      }
      while (v13);
    }
  }

  return v11;
}

void sub_18B0640F4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a4)
  {
    id v13 = a3;
    objc_msgSend_setObject_forKey_(a1, v6, a4, (uint64_t)v13);
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F1CA98];
    id v8 = a3;
    objc_msgSend_null(v7, v9, v10, v11);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(a1, v12, (uint64_t)v13, (uint64_t)v8);
  }
}

void sub_18B064194(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = a1;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v13, (uint64_t)v17, 16);
  if (v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)v14;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend_CKAssignToContainerWithID_(*(void **)(*((void *)&v13 + 1) + 8 * v12++), v8, (uint64_t)v4, v9, (void)v13);
      }
      while (v10 != v12);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v13, (uint64_t)v17, 16);
    }
    while (v10);
  }
}

void sub_18B064290(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = a1;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v13, (uint64_t)v17, 16);
  if (v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)v14;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend_CKAssignToContainerWithID_(*(void **)(*((void *)&v13 + 1) + 8 * v12++), v8, (uint64_t)v4, v9, (void)v13);
      }
      while (v10 != v12);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v13, (uint64_t)v17, 16);
    }
    while (v10);
  }
}

void sub_18B06438C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_18B064420;
  v8[3] = &unk_1E5462540;
  id v9 = v4;
  id v5 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v6, (uint64_t)v8, v7);
}

void sub_18B064420(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v10 = a3;
  objc_msgSend_CKAssignToContainerWithID_(a2, v6, v5, v7);
  objc_msgSend_CKAssignToContainerWithID_(v10, v8, *(void *)(a1 + 32), v9);
}

void sub_18B06448C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_userInfo(a1, v5, v6, v7);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKAssignToContainerWithID_(v10, v8, (uint64_t)v4, v9);
}

void CKNSIndexSet_enumerateInverseRangesInRange_options_usingBlock(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a5;
  if (a4) {
    __assert_rtn("CKNSIndexSet_enumerateInverseRangesInRange_options_usingBlock", "CKUtils.m", 2567, "opts == 0 && \"NSEnumerationOptions not yet supported\"");
  }
  uint64_t v11 = v10;
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x3010000000;
  uint64_t v33 = &unk_18B233E1F;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v12 = v10 + 2;
  do
  {
    long long v13 = v31;
    if (!v31[5]) {
      break;
    }
    uint64_t v26 = 0;
    long long v27 = &v26;
    uint64_t v28 = 0x2020000000;
    char v29 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = &v22;
    uint64_t v24 = 0x2020000000;
    char v25 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    _OWORD v17[2] = sub_18B0646EC;
    v17[3] = &unk_1E5462568;
    uint64_t v19 = &v26;
    uint64_t v20 = &v30;
    long long v14 = v11;
    uint64_t v18 = v14;
    uint64_t v21 = &v22;
    objc_msgSend_enumerateRangesInRange_options_usingBlock_(v9, v15, v13[4], v13[5], 0, v17);
    if (*((unsigned char *)v27 + 24))
    {
      int v16 = *((unsigned __int8 *)v23 + 24);
    }
    else
    {
      (*v12)(v14, v31[4], v31[5], (uint64_t)(v23 + 3));
      int v16 = 1;
      *((unsigned char *)v23 + 24) = 1;
    }

    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&v26, 8);
  }
  while (!v16);
  _Block_object_dispose(&v30, 8);
}

void sub_18B0646BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void *sub_18B0646EC(void *result, unint64_t a2, uint64_t a3, unsigned char *a4)
{
  *(unsigned char *)(*(void *)(result[5] + 8) + 24) = 1;
  uint64_t v6 = *(void *)(result[6] + 8);
  unint64_t v7 = *(void *)(v6 + 32);
  if (a2 <= v7)
  {
    uint64_t v12 = v7 - (a2 + a3) + *(void *)(v6 + 40);
    *(void *)(v6 + 32) = a2 + a3;
    *(void *)(v6 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v12;
  }
  else
  {
    id v9 = result;
    uint64_t result = (void *)(*(uint64_t (**)(void))(result[4] + 16))();
    uint64_t v10 = *(void *)(v9[6] + 8);
    uint64_t v11 = *(void *)(v10 + 32) - (a2 + a3) + *(void *)(v10 + 40);
    *(void *)(v10 + 32) = a2 + a3;
    *(void *)(v10 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v11;
    *a4 = 1;
  }
  return result;
}

id CKNSIndexSet_indexSetWithInverseIndexSet(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28E60];
  id v2 = a1;
  uint64_t v6 = objc_msgSend_indexSet(v1, v3, v4, v5);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_18B064868;
  v9[3] = &unk_1E5462590;
  id v7 = v6;
  id v10 = v7;
  CKNSIndexSet_enumerateInverseRangesInRange_options_usingBlock(v2, 0, 0x7FFFFFFFFFFFFFFELL, 0, v9);

  return v7;
}

uint64_t sub_18B064868(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_addIndexesInRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
}

id sub_18B064878(id a1)
{
  id v1 = a1;
  if (a1)
  {
    if (objc_opt_respondsToSelector())
    {
      uint64_t v5 = (void *)MEMORY[0x18C12ADA0]();
      id v9 = objc_msgSend_CKStatusReportArray(v1, v6, v7, v8);
      objc_msgSend_CKComponentsAndSubcomponentsJoinedByString_(v9, v10, @"\n", v11);
      id v1 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend_description(v1, v2, v3, v4);
      id v1 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  return v1;
}

id sub_18B064918(void *a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id context = (void *)MEMORY[0x18C12ADA0]();
  uint64_t v5 = objc_opt_new();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = a1;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend_CKComponentsAndSubcomponentsJoinedByString_(v12, v13, (uint64_t)v4, v15);
        }
        else {
        int v16 = objc_msgSend_description(v12, v13, v14, v15);
        }
        objc_msgSend_appendFormat_(v5, v17, @"%@%@", v18, v16, v4);
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v19, (uint64_t)&v22, (uint64_t)v26, 16);
    }
    while (v9);
  }

  return v5;
}

id sub_18B064AA8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v6 = objc_msgSend_count(a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_arrayWithCapacity_(v5, v7, v6, v8);
  long long v13 = objc_msgSend_mutableCopy(a1, v10, v11, v12);
  for (uint64_t i = objc_msgSend_count(v13, v14, v15, v16); i; uint64_t i = objc_msgSend_count(v13, v30, v31, v32))
  {
    uint32_t v21 = objc_msgSend_count(v13, v18, v19, v20);
    uint64_t v22 = arc4random_uniform(v21);
    long long v25 = objc_msgSend_objectAtIndexedSubscript_(v13, v23, v22, v24);
    objc_msgSend_addObject_(v9, v26, (uint64_t)v25, v27);

    objc_msgSend_removeObjectAtIndex_(v13, v28, v22, v29);
  }

  return v9;
}

id sub_18B064B64(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (!objc_msgSend_length(a1, a2, a3, a4))
  {
    uint64_t v18 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8, v9);
    if ((a3 - 1) >= 8)
    {
      objc_msgSend_stringWithFormat_(NSString, v16, @"(unknown: %i)", v17, a3);
      uint64_t v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v19 = off_1E54626A8[(int)a3 - 1];
    }
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v16, (uint64_t)a2, (uint64_t)a1, @"CKUtils.m", 2688, @"You can't pass an empty string for an identifier of type %@", v19);
  }
  uint64_t v10 = objc_opt_new();
  objc_msgSend_setName_(v10, v11, (uint64_t)a1, v12);
  if ((int)a3 >= 1) {
    objc_msgSend_setType_(v10, v13, a3, v14);
  }

  return v10;
}

uint64_t sub_18B064C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 0, a4);
}

uint64_t sub_18B064C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 1, a4);
}

uint64_t sub_18B064C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 7, a4);
}

uint64_t sub_18B064C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 2, a4);
}

uint64_t sub_18B064C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 3, a4);
}

uint64_t sub_18B064C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 4, a4);
}

uint64_t sub_18B064CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 6, a4);
}

uint64_t sub_18B064CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDPIdentifierWithType_, 8, a4);
}

uint64_t sub_18B064CB0(void *a1, uint64_t a2, unint64_t a3)
{
  double v4 = __exp10((double)a3);
  uint64_t v5 = NSNumber;
  objc_msgSend_doubleValue(a1, v6, v7, v8);
  double v13 = round(v4 * v12) / v4;

  return objc_msgSend_numberWithDouble_(v5, v9, v10, v11, v13);
}

id sub_18B064D14(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  double v4 = objc_opt_new();
  objc_msgSend_coordinate(v3, v5, v6, v7);
  objc_msgSend_setLatitude_(v4, v8, v9, v10);
  objc_msgSend_coordinate(v3, v11, v12, v13);
  objc_msgSend_setLongitude_(v4, v14, v15, v16, v17);
  objc_msgSend_horizontalAccuracy(v3, v18, v19, v20);
  objc_msgSend_setHorizontalAccuracy_(v4, v21, v22, v23);
  objc_msgSend_verticalAccuracy(v3, v24, v25, v26);
  objc_msgSend_setVerticalAccuracy_(v4, v27, v28, v29);
  objc_msgSend_altitude(v3, v30, v31, v32);
  objc_msgSend_setAltitude_(v4, v33, v34, v35);
  objc_msgSend_course(v3, v36, v37, v38);
  objc_msgSend_setCourse_(v4, v39, v40, v41);
  objc_msgSend_speed(v3, v42, v43, v44);
  objc_msgSend_setSpeed_(v4, v45, v46, v47);
  uint64_t v51 = objc_msgSend_timestamp(v3, v48, v49, v50);

  if (v51)
  {
    v52 = objc_opt_new();
    objc_msgSend_setTimestamp_(v4, v53, (uint64_t)v52, v54);

    uint64_t v58 = objc_msgSend_timestamp(v3, v55, v56, v57);
    objc_msgSend_timeIntervalSinceReferenceDate(v58, v59, v60, v61);
    double v63 = v62;
    uint64_t v67 = objc_msgSend_timestamp(v4, v64, v65, v66);
    objc_msgSend_setTime_(v67, v68, v69, v70, v63);
  }

  return v4;
}

id sub_18B064E54(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F1E5F0];
  id v4 = a3;
  id v5 = [v3 alloc];
  objc_msgSend_latitude(v4, v6, v7, v8);
  CLLocationDegrees v10 = v9;
  objc_msgSend_longitude(v4, v11, v12, v13);
  CLLocationCoordinate2D v15 = CLLocationCoordinate2DMake(v10, v14);
  objc_msgSend_altitude(v4, v16, v17, v18);
  double v20 = v19;
  objc_msgSend_horizontalAccuracy(v4, v21, v22, v23);
  double v25 = v24;
  objc_msgSend_verticalAccuracy(v4, v26, v27, v28);
  double v30 = v29;
  objc_msgSend_course(v4, v31, v32, v33);
  double v35 = v34;
  objc_msgSend_speed(v4, v36, v37, v38);
  double v40 = v39;
  uint64_t v41 = (void *)MEMORY[0x1E4F1C9C8];
  uint64_t v45 = objc_msgSend_timestamp(v4, v42, v43, v44);

  objc_msgSend_time(v45, v46, v47, v48);
  v52 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(v41, v49, v50, v51);
  uint64_t v55 = objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_(v5, v53, (uint64_t)v52, v54, v15.latitude, v15.longitude, v20, v25, v30, v35, v40);

  return v55;
}

id CKWatchAppBundleIDFromProcessBundleID(uint64_t a1, const char *a2)
{
  uint64_t v26 = 0;
  id v2 = objc_msgSend_bundleRecordWithBundleIdentifier_allowPlaceholder_error_(MEMORY[0x1E4F223F8], a2, a1, 0, &v26);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend_extensionPointRecord(v2, v3, v4, v5),
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_identifier(v6, v7, v8, v9),
        CLLocationDegrees v10 = objc_claimAutoreleasedReturnValue(),
        int isEqualToString = objc_msgSend_isEqualToString_(v10, v11, @"com.apple.watchkit", v12),
        v10,
        v6,
        isEqualToString))
  {
    uint64_t v17 = objc_msgSend_containingBundleRecord(v2, v14, v15, v16);
    uint32_t v21 = objc_msgSend_bundleIdentifier(v17, v18, v19, v20);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint32_t v21 = objc_msgSend_bundleIdentifier(v2, v22, v23, v24);
    }
    else
    {
      uint32_t v21 = 0;
    }
  }

  return v21;
}

id CKSelectLocalAppNamesByBundleIDs(void *a1)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    uint64_t v72 = objc_opt_new();
    v73 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v5, v6, v7);
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    id v71 = v1;
    id obj = v1;
    uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v79, (uint64_t)v87, 16);
    if (v9)
    {
      uint64_t v11 = v9;
      uint64_t v77 = *(void *)v80;
      uint64_t v12 = (void **)&ck_log_initialization_block;
      *(void *)&long long v10 = 138412290;
      long long v70 = v10;
      do
      {
        uint64_t v13 = 0;
        uint64_t v74 = v11;
        do
        {
          if (*(void *)v80 != v77) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(id *)(*((void *)&v79 + 1) + 8 * v13);
          id v15 = objc_alloc(MEMORY[0x1E4F223C8]);
          id v78 = 0;
          uint64_t v17 = objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(v15, v16, (uint64_t)v14, 0, &v78);
          id v18 = v78;
          uint64_t v19 = *v12;
          if (v18)
          {
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, v19);
            }
            uint64_t v20 = ck_log_facility_ck;
            if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412546;
              id v84 = v14;
              __int16 v85 = 2112;
              id v86 = v18;
              _os_log_debug_impl(&dword_18AF10000, v20, OS_LOG_TYPE_DEBUG, "LSApplicationRecord with bundle id %@: is not available on this device. Skipping it: %@", buf, 0x16u);
            }
          }
          else
          {
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, v19);
            }
            uint32_t v21 = v12;
            uint64_t v22 = ck_log_facility_ck;
            if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412546;
              id v84 = v14;
              __int16 v85 = 2112;
              id v86 = v17;
              _os_log_debug_impl(&dword_18AF10000, v22, OS_LOG_TYPE_DEBUG, "Considering registered bundleID: %@, got record: %@", buf, 0x16u);
            }
            uint64_t v26 = objc_msgSend_applicationState(v17, v23, v24, v25, v70);
            if ((objc_msgSend_isInstalled(v26, v27, v28, v29) & 1) != 0
              && (objc_msgSend_URL(v17, v30, v31, v32), (uint64_t v33 = objc_claimAutoreleasedReturnValue()) != 0))
            {
              uint64_t v37 = (void *)v33;
              uint64_t v38 = objc_msgSend_URL(v17, v34, v35, v36);
              char v75 = objc_msgSend_containsObject_(v73, v39, (uint64_t)v38, v40);

              uint64_t v11 = v74;
              uint64_t v12 = v21;
              if ((v75 & 1) == 0)
              {
                uint64_t v44 = objc_msgSend_URL(v17, v41, v42, v43);
                objc_msgSend_addObject_(v73, v45, (uint64_t)v44, v46);

                uint64_t v50 = objc_msgSend_sharedConnection(MEMORY[0x1E4F74230], v47, v48, v49);
                int isCloudSyncAllowed = objc_msgSend_isCloudSyncAllowed_(v50, v51, (uint64_t)v14, v52);

                uint64_t v54 = *v12;
                if (isCloudSyncAllowed)
                {
                  if (ck_log_initialization_predicate != -1) {
                    dispatch_once(&ck_log_initialization_predicate, v54);
                  }
                  uint64_t v11 = v74;
                  uint64_t v55 = ck_log_facility_ck;
                  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = v70;
                    id v84 = v14;
                    _os_log_debug_impl(&dword_18AF10000, v55, OS_LOG_TYPE_DEBUG, "BundleID %@ is installed and sync allowed", buf, 0xCu);
                  }
                  uint64_t v59 = objc_msgSend_localizedName(v17, v56, v57, v58);
                  uint64_t v61 = (void *)v59;
                  if (v59) {
                    objc_msgSend_setObject_forKeyedSubscript_(v72, v60, v59, (uint64_t)v14);
                  }
                  else {
                    objc_msgSend_setObject_forKeyedSubscript_(v72, v60, (uint64_t)v14, (uint64_t)v14);
                  }
                }
                else
                {
                  if (ck_log_initialization_predicate != -1) {
                    dispatch_once(&ck_log_initialization_predicate, v54);
                  }
                  uint64_t v11 = v74;
                  double v63 = ck_log_facility_ck;
                  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138543362;
                    id v84 = v14;
                    _os_log_impl(&dword_18AF10000, v63, OS_LOG_TYPE_INFO, "Warn: %{public}@ is disabled by profile", buf, 0xCu);
                  }
                }
              }
            }
            else
            {

              uint64_t v12 = v21;
            }
          }

          ++v13;
        }
        while (v11 != v13);
        uint64_t v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v62, (uint64_t)&v79, (uint64_t)v87, 16);
        uint64_t v11 = v64;
      }
      while (v64);
    }

    uint64_t v68 = objc_msgSend_copy(v72, v65, v66, v67);
    id v1 = v71;
  }
  else
  {
    uint64_t v68 = 0;
  }

  return v68;
}

id CKURLSlugsToBundleIDsMap()
{
  if (qword_1EB27A0E8 != -1) {
    dispatch_once(&qword_1EB27A0E8, &unk_1ED7EC5C8);
  }
  qos_class_t v0 = (void *)qword_1EB27A0E0;

  return v0;
}

void sub_18B065598()
{
  qos_class_t v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = objc_opt_class();
  objc_msgSend_bundleForClass_(v0, v2, v1, v3);
  id v24 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = objc_msgSend_pathForResource_ofType_(v24, v4, @"url-slugs-to-bundle-ids", @"plist");
  uint64_t v8 = objc_msgSend_dictionaryWithContentsOfFile_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v5, v7);
  uint64_t v11 = objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1CA60], v9, (uint64_t)v8, v10);
  uint64_t v13 = objc_msgSend_pathForResource_ofType_(v24, v12, @"apple-feature-url-slugs-to-bundle-ids", @"plist");
  uint64_t v16 = objc_msgSend_dictionaryWithContentsOfFile_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)v13, v15);
  objc_msgSend_addEntriesFromDictionary_(v11, v17, (uint64_t)v16, v18);
  uint64_t v22 = objc_msgSend_copy(v11, v19, v20, v21);
  uint64_t v23 = (void *)qword_1EB27A0E0;
  qword_1EB27A0E0 = v22;
}

void sub_18B066E48(uint64_t a1)
{
  id v2 = [CKUserDefaults alloc];
  objc_msgSend_suiteName(*(void **)(a1 + 32), v3, v4, v5);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = objc_msgSend_initWithSuiteName_(v2, v6, (uint64_t)v10, v7);
  uint64_t v9 = (void *)qword_1EB27A0F0;
  qword_1EB27A0F0 = v8;
}

uint64_t CKSimulateOncePerBootProcessRestart()
{
  pthread_mutex_lock(&stru_1EB279660);
  byte_1EB279FB3 = 0;
  qos_class_t v0 = (void *)qword_1EB279FB8;
  qword_1EB279FB8 = 0;

  qword_1EB27A100 = 0;
  uint64_t v1 = (void *)qword_1EB279FC8;
  qword_1EB279FC8 = 0;

  return pthread_mutex_unlock(&stru_1EB279660);
}

void CKSimulateOncePerBootReboot()
{
  pthread_mutex_lock(&stru_1EB279660);
  while (qword_1EB279FC0)
    pthread_cond_wait(&stru_1EB279630, &stru_1EB279660);
  pthread_mutex_lock(&stru_1EB2796A0);
  byte_1EB279FB3 = 0;
  qos_class_t v0 = (void *)qword_1EB279FB8;
  qword_1EB279FB8 = 0;

  qword_1EB27A100 = 0;
  uint64_t v1 = (void *)qword_1EB279FC8;
  qword_1EB279FC8 = 0;

  objc_msgSend_standardUserDefaults(MEMORY[0x1E4F1CB18], v2, v3, v4);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v9, v5, @"CKStartupTime", v6);
  objc_msgSend_removeObjectForKey_(v9, v7, @"CKPerBootTasks", v8);
  pthread_mutex_unlock(&stru_1EB2796A0);
  pthread_mutex_unlock(&stru_1EB279660);
}

id CKDescriptionForTimeInterval(double a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v19 = xmmword_18B1F3A78;
  long long v20 = unk_18B1F3A88;
  long long v21 = xmmword_18B1F3A98;
  long long v22 = unk_18B1F3AA8;
  long long v15 = xmmword_18B1F3A38;
  long long v16 = unk_18B1F3A48;
  long long v17 = xmmword_18B1F3A58;
  long long v18 = unk_18B1F3A68;
  *(_OWORD *)&v11[8] = xmmword_18B1F39F8;
  long long v12 = unk_18B1F3A08;
  long long v13 = xmmword_18B1F3A18;
  long long v14 = unk_18B1F3A28;
  uint64_t v1 = __str;
  if (a1 >= 0.0)
  {
    size_t v2 = 32;
  }
  else
  {
    __str[0] = 45;
    uint64_t v1 = &__str[1];
    a1 = -a1;
    size_t v2 = 31;
  }
  if (a1 * 1000000000.0 >= 0.1)
  {
    uint64_t v5 = (double *)v11;
    do
    {
      double v6 = v5[1];
      v5 += 3;
    }
    while (a1 > v6 && v6 != 0.0);
    double v7 = a1 * *(v5 - 1);
    if (v6 == 0.0 && v7 >= 1000.0) {
      snprintf(v1, v2, ">1k %s");
    }
    else {
      snprintf(v1, v2, "%.3g %s");
    }
  }
  else if (a1 == 0.0)
  {
    snprintf(v1, v2, "0.0 %s");
  }
  else
  {
    snprintf(v1, v2, "<0.1 %s");
  }
  uint64_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v3, (uint64_t)__str, v4);

  return v8;
}

id CKDescriptionForNSInterval(unint64_t a1)
{
  return CKDescriptionForTimeInterval((double)a1 / 1000000000.0);
}

id sub_18B0671C8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_path(a1, a2, a3, a4);
  uint64_t v8 = objc_msgSend_pathComponents(v4, v5, v6, v7);

  if ((unint64_t)objc_msgSend_count(v8, v9, v10, v11) >= 2)
  {
    long long v15 = objc_msgSend_objectAtIndexedSubscript_(v8, v12, 1, v13);
    long long v19 = objc_msgSend_stringByRemovingPercentEncoding(v15, v16, v17, v18);
    uint64_t v23 = objc_msgSend_lowercaseString(v19, v20, v21, v22);

    long long v14 = objc_msgSend_capitalizedString(v23, v24, v25, v26);
  }
  else
  {
    long long v14 = 0;
  }

  return v14;
}

__CFString *sub_18B067280(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_CKShareURLSlugBasedApplicationName(a1, a2, a3, a4);
  uint64_t v8 = objc_msgSend_lowercaseString(v4, v5, v6, v7);

  if (objc_msgSend_isEqualToString_(v8, v9, @"pages", v10))
  {
    uint64_t v13 = @"com.apple.Pages";
  }
  else if (objc_msgSend_isEqualToString_(v8, v11, @"keynote", v12))
  {
    uint64_t v13 = @"com.apple.Keynote";
  }
  else if (objc_msgSend_isEqualToString_(v8, v14, @"numbers", v15))
  {
    uint64_t v13 = @"com.apple.Numbers";
  }
  else
  {
    uint64_t v13 = @"iclouddrive";
    if (!objc_msgSend_isEqualToString_(v8, v16, @"iclouddrive", v17)) {
      uint64_t v13 = 0;
    }
  }

  return v13;
}

uint64_t sub_18B06733C(void *a1, uint64_t a2, void *a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  id v4 = a3;
  objc_msgSend_getUUIDBytes_(a1, v5, (uint64_t)v18, v6);
  objc_msgSend_getUUIDBytes_(v4, v7, (uint64_t)v17, v8);

  uint64_t v10 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v9, (uint64_t)v18, 16);
  uint64_t v12 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v11, (uint64_t)v17, 16);
  uint64_t v15 = objc_msgSend_CKCompare_(v10, v13, (uint64_t)v12, v14);

  return v15;
}

uint64_t CKByteTuple(int a1, int a2)
{
  return __rev16(a1 | (a2 << 8));
}

uint64_t CKValue1FromByteTuple(unsigned int a1)
{
  return a1 >> 8;
}

uint64_t CKValue2FromByteTuple(uint64_t result)
{
  return result;
}

double sub_18B067430()
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(vdispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = info.numer;
  double result = 1.0 / (1000000000.0 / (double)v0 * (double)v1);
  qword_1EB27A110 = *(void *)&result;
  return result;
}

void *sub_18B067794(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  double result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B067974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B06798C(uint64_t a1)
{
  size_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B067B18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  double result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 528) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B067CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B067D10(uint64_t a1)
{
  size_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B069314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B0696B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v14) {
    operator delete(v14);
  }

  _Unwind_Resume(a1);
}

void sub_18B0698B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B0698E4(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_addIndexesInRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
}

void sub_18B0699C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B069AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18B069AC8(uint64_t a1, const char *a2, NSUInteger a3, uint64_t a4)
{
  uint64_t v7 = objc_msgSend_rangeMap(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v8 = (char *)v7[1];
  uint64_t v9 = (char *)v7[2];
  if (v8 == v9) {
    goto LABEL_19;
  }
  unint64_t v10 = (v9 - v8) >> 5;
  uint64_t v11 = (char *)v7[1];
  do
  {
    unint64_t v12 = v10 >> 1;
    uint64_t v13 = (uint64_t *)&v11[32 * (v10 >> 1)];
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v14 = (char *)(v13 + 4);
    v10 += ~(v10 >> 1);
    if (v16 + v15 <= (unint64_t)a2) {
      uint64_t v11 = v14;
    }
    else {
      unint64_t v10 = v12;
    }
  }
  while (v10);
  while (v11 != v8)
  {
    uint64_t v17 = v11;
    unint64_t v19 = *((void *)v11 - 4);
    v11 -= 32;
    unint64_t v18 = v19;
    if (v19 > (unint64_t)a2 || *((void *)v17 - 3) + v18 <= (unint64_t)a2) {
      goto LABEL_12;
    }
  }
  uint64_t v17 = (char *)v7[1];
LABEL_12:
  if (v17 == v9)
  {
LABEL_19:
  }
  else
  {
    unint64_t v20 = v17 - v8;

    if ((~v20 & 0x1FFFFFFFE0) != 0)
    {
      unint64_t v24 = (v20 >> 5);
      uint64_t v25 = objc_msgSend_rangeMap(*(void **)(a1 + 32), v21, v22, v23);
      uint64_t v26 = v25[2] - v25[1];

      if (v24 < v26 >> 5)
      {
        for (uint64_t i = 32 * v24; ; i += 32)
        {
          uint64_t v31 = objc_msgSend_rangeMap(*(void **)(a1 + 32), v27, v28, v29);
          uint64_t v32 = v31[1] + i;
          NSUInteger v33 = *(void *)v32;
          NSUInteger v34 = *(void *)(v32 + 8);
          id v35 = *(id *)(v32 + 16);

          v42.location = (NSUInteger)a2;
          v42.length = a3;
          v43.location = v33;
          v43.length = v34;
          if (!NSIntersectionRange(v42, v43).length) {
            break;
          }
          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

          ++v24;
          double v39 = objc_msgSend_rangeMap(*(void **)(a1 + 32), v36, v37, v38);
          uint64_t v40 = v39[2] - v39[1];

          if (v24 >= v40 >> 5) {
            return;
          }
        }
      }
    }
  }
}

void sub_18B069CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B069E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B069F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18B069F84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_rangeMap(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v7 = (uint64_t *)objc_claimAutoreleasedReturnValue();
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = v8;
  unint64_t v10 = (const char **)v7[2];
  unint64_t v11 = v7[3];
  if ((unint64_t)v10 >= v11)
  {
    uint64_t v13 = v7[1];
    uint64_t v14 = ((uint64_t)v10 - v13) >> 5;
    if ((unint64_t)(v14 + 1) >> 59) {
      sub_18B06B0C0();
    }
    uint64_t v15 = v11 - v13;
    uint64_t v16 = v15 >> 4;
    if (v15 >> 4 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    v20[4] = v7 + 3;
    if (v17) {
      unint64_t v17 = (unint64_t)sub_18B06B160(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v19 = (const char **)(v17 + 32 * v14);
    v20[0] = v17;
    v20[1] = v19;
    v20[3] = v17 + 32 * v18;
    *unint64_t v19 = a2;
    v19[1] = (const char *)a3;
    v19[2] = (const char *)v9;
    v19[3] = 0;
    v20[2] = v19 + 4;
    sub_18B06B040(v7 + 1, v20);
    unint64_t v12 = (void *)v7[2];
    sub_18B06B1CC((uint64_t)v20);
  }
  else
  {
    *unint64_t v10 = a2;
    v10[1] = (const char *)a3;
    v10[2] = (const char *)v8;
    v10[3] = 0;
    unint64_t v12 = v10 + 4;
  }
  v7[2] = (uint64_t)v12;
}

void sub_18B06A0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B06A0BC(void ***a1)
{
  unint64_t v1 = *a1;
  size_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 4;

        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t sub_18B06A144(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = (a3 + a2) >> 1;
  uint64_t v6 = (void *)(*a1 + 32 * v5);
  unint64_t result = v6[1] + *v6;
  v6[3] = result;
  id v8 = v6 + 3;
  if (v5 > a2)
  {
    unint64_t result = sub_18B06A144(a1);
    if (*v8 > result) {
      unint64_t result = *v8;
    }
    unint64_t *v8 = result;
  }
  if (v5 + 1 < a3)
  {
    unint64_t result = sub_18B06A144(a1);
    if (*v8 > result) {
      unint64_t result = *v8;
    }
    unint64_t *v8 = result;
  }
  return result;
}

void sub_18B06A1D8(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = (unint64_t *)a1;
  if (a3 == 2)
  {
    uint64_t v7 = (long long *)&a2[-2];
    unint64_t v8 = a2[-2].n128_u64[0];
    BOOL v9 = v8 >= a1->n128_u64[0];
    if (v8 == a1->n128_u64[0])
    {
      unint64_t v10 = a2[-2].n128_u64[1];
      unint64_t v11 = a1->n128_u64[1];
      BOOL v9 = v10 >= v11;
      if (v10 == v11) {
        BOOL v9 = a2[-1].n128_u64[0] >= a1[1].n128_u64[0];
      }
    }
    if (!v9)
    {
      sub_18B06A614((long long *)a1, v7);
    }
    return;
  }
  unint64_t v12 = a3;
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2) {
      return;
    }
    uint64_t v18 = a1 + 2;
    if (&a1[2] == a2) {
      return;
    }
    uint64_t v19 = 0;
    unint64_t v20 = a1;
    while (1)
    {
      uint64_t v21 = (unint64_t *)v20;
      unint64_t v20 = v18;
      unint64_t v22 = v18->n128_u64[0];
      if (v18->n128_u64[0] == *v21)
      {
        unint64_t v23 = v21[5];
        unint64_t v24 = v21[1];
        BOOL v25 = v23 >= v24;
        if (v23 == v24) {
          BOOL v25 = v21[6] >= v21[2];
        }
        if (!v25) {
          goto LABEL_27;
        }
      }
      else if (v22 < *v21)
      {
        unint64_t v23 = v21[5];
LABEL_27:
        unint64_t v27 = v21[6];
        unint64_t v26 = v21[7];
        v21[6] = 0;
        *unint64_t v20 = *(__n128 *)v21;
        unint64_t v28 = v21[2];
        v21[2] = 0;
        uint64_t v29 = (void *)v20[1].n128_u64[0];
        v20[1].n128_u64[0] = v28;

        v20[1].n128_u64[1] = v21[3];
        if (v21 == v6)
        {
          uint64_t v21 = v6;
        }
        else
        {
          unint64_t v62 = v26;
          uint64_t v30 = v19;
          do
          {
            uint64_t v31 = (_OWORD *)((char *)v6 + v30);
            unint64_t v32 = *(unint64_t *)((char *)v6 + v30 - 32);
            BOOL v33 = v22 >= v32;
            if (v22 == v32 && (v34 = *((void *)v31 - 3), BOOL v33 = v23 >= v34, v23 == v34))
            {
              if (v27 >= *(unint64_t *)((char *)v6 + v30 - 16))
              {
                uint64_t v21 = (unint64_t *)((char *)v6 + v30);
                goto LABEL_37;
              }
            }
            else if (v33)
            {
              goto LABEL_37;
            }
            v21 -= 4;
            *uint64_t v31 = *(_OWORD *)((char *)v6 + v30 - 32);
            uint64_t v35 = (uint64_t)v6 + v30;
            uint64_t v36 = *(unint64_t *)((char *)v6 + v30 - 16);
            *(void *)(v35 - 16) = 0;
            uint64_t v37 = *(void **)((char *)v6 + v30 + 16);
            *(void *)(v35 + 16) = v36;

            *(void *)(v35 + 24) = *(void *)(v35 - 8);
            v30 -= 32;
          }
          while (v30);
          uint64_t v21 = v6;
LABEL_37:
          unint64_t v26 = v62;
        }
        unint64_t *v21 = v22;
        v21[1] = v23;
        uint64_t v38 = (void *)v21[2];
        v21[2] = v27;

        v21[3] = v26;
      }
      uint64_t v18 = v20 + 2;
      v19 += 32;
      if (&v20[2] == a2) {
        return;
      }
    }
  }
  unint64_t v15 = a3 >> 1;
  uint64_t v16 = &a1[2 * (a3 >> 1)];
  unint64_t v17 = a3 >> 1;
  if ((uint64_t)v12 <= a5)
  {
    sub_18B06A694(a1, v16, v17, a4);
    double v39 = &a4[2 * v15];
    sub_18B06A694((__n128 *)&v6[4 * (v12 >> 1)], a2, v12 - (v12 >> 1), v39);
    uint64_t v40 = &a4[2 * v12];
    uint64_t v41 = v39;
    NSRange v42 = a4;
    while (v41 != v40)
    {
      BOOL v43 = v41->n128_u64[0] >= v42->n128_u64[0];
      if (v41->n128_u64[0] == v42->n128_u64[0])
      {
        unint64_t v44 = v41->n128_u64[1];
        unint64_t v45 = v42->n128_u64[1];
        BOOL v43 = v44 >= v45;
        if (v44 == v45) {
          BOOL v43 = v41[1].n128_u64[0] >= v42[1].n128_u64[0];
        }
      }
      if (v43)
      {
        *(__n128 *)uint64_t v6 = *v42;
        unint64_t v48 = v42[1].n128_u64[0];
        v42[1].n128_u64[0] = 0;
        uint64_t v49 = (void *)v6[2];
        v6[2] = v48;

        v6[3] = v42[1].n128_u64[1];
        v42 += 2;
      }
      else
      {
        *(__n128 *)uint64_t v6 = *v41;
        unint64_t v46 = v41[1].n128_u64[0];
        v41[1].n128_u64[0] = 0;
        uint64_t v47 = (void *)v6[2];
        v6[2] = v46;

        v6[3] = v41[1].n128_u64[1];
        v41 += 2;
      }
      v6 += 4;
      if (v42 == v39)
      {
        if (v41 != v40)
        {
          unint64_t v50 = 0;
          do
          {
            uint64_t v51 = &v41[v50 / 0x10];
            uint64_t v52 = (__n128 *)&v6[v50 / 8];
            __n128 *v52 = v41[v50 / 0x10];
            unint64_t v53 = v41[v50 / 0x10 + 1].n128_u64[0];
            v41[v50 / 0x10 + 1].n128_u64[0] = 0;
            uint64_t v54 = (void *)v6[v50 / 8 + 2];
            v52[1].n128_u64[0] = v53;

            v52[1].n128_u64[1] = v41[v50 / 0x10 + 1].n128_u64[1];
            v50 += 32;
          }
          while (&v51[2] != v40);
        }
        goto LABEL_57;
      }
    }
    if (v42 != v39)
    {
      unint64_t v55 = 0;
      do
      {
        uint64_t v56 = &v42[v55 / 0x10];
        uint64_t v57 = (__n128 *)&v6[v55 / 8];
        *uint64_t v57 = v42[v55 / 0x10];
        unint64_t v58 = v42[v55 / 0x10 + 1].n128_u64[0];
        v42[v55 / 0x10 + 1].n128_u64[0] = 0;
        uint64_t v59 = (void *)v6[v55 / 8 + 2];
        v57[1].n128_u64[0] = v58;

        v57[1].n128_u64[1] = v42[v55 / 0x10 + 1].n128_u64[1];
        v55 += 32;
      }
      while (&v56[2] != v39);
    }
LABEL_57:
    if (a4)
    {
      uint64_t v60 = (void **)&a4[1];
      do
      {
        uint64_t v61 = *v60;
        v60 += 4;

        --v12;
      }
      while (v12);
    }
  }
  else
  {
    sub_18B06A1D8(a1, v16, v17, a4, a5);
    sub_18B06A1D8(&v6[4 * (v12 >> 1)], a2, v12 - (v12 >> 1), a4, a5);
    sub_18B06AA58((long long *)v6, (long long *)&v6[4 * (v12 >> 1)], (long long *)a2, v12 >> 1, v12 - (v12 >> 1), (uint64_t)a4, a5);
  }
}

void sub_18B06A5F0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v4 = (void **)(v1 + 16);
    do
    {
      unint64_t v5 = *v4;
      v4 += 4;

      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B06A614(long long *a1, long long *a2)
{
  long long v9 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  *((void *)a1 + 2) = 0;
  *a1 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  uint64_t v7 = (void *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v6;

  *((void *)a1 + 3) = *((void *)a2 + 3);
  *a2 = v9;
  unint64_t v8 = (void *)*((void *)a2 + 2);
  *((void *)a2 + 2) = v4;

  *((void *)a2 + 3) = v5;
}

__n128 sub_18B06A694(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  uint64_t v7 = a1;
  if (a3 == 2)
  {
    unint64_t v11 = a2 - 2;
    unint64_t v12 = a2[-2].n128_u64[0];
    BOOL v13 = v12 >= a1->n128_u64[0];
    if (v12 == a1->n128_u64[0])
    {
      unint64_t v14 = a2[-2].n128_u64[1];
      unint64_t v15 = a1->n128_u64[1];
      BOOL v13 = v14 >= v15;
      if (v14 == v15) {
        BOOL v13 = a2[-1].n128_u64[0] >= a1[1].n128_u64[0];
      }
    }
    if (v13)
    {
      *a4 = *a1;
      unint64_t v47 = a1[1].n128_u64[0];
      unint64_t v48 = a1[1].n128_u64[1];
      a1[1].n128_u64[0] = 0;
      a4[1].n128_u64[0] = v47;
      a4[1].n128_u64[1] = v48;
      __n128 result = *v11;
      a4[2] = *v11;
      unint64_t v49 = a2[-1].n128_u64[0];
      a2[-1].n128_u64[0] = 0;
      a4[3].n128_u64[0] = v49;
      unint64_t v10 = &a4[3].n128_u64[1];
      uint64_t v19 = &a2[-1].n128_u64[1];
      goto LABEL_36;
    }
    *a4 = *v11;
    unint64_t v16 = a2[-1].n128_u64[0];
    unint64_t v17 = a2[-1].n128_u64[1];
    a2[-1].n128_u64[0] = 0;
    a4[1].n128_u64[0] = v16;
    a4[1].n128_u64[1] = v17;
    __n128 result = *a1;
    a4[2] = *a1;
    unint64_t v18 = a1[1].n128_u64[0];
    a1[1].n128_u64[0] = 0;
    a4[3].n128_u64[0] = v18;
    unint64_t v10 = &a4[3].n128_u64[1];
LABEL_10:
    uint64_t v19 = &a1[1].n128_u64[1];
LABEL_36:
    *unint64_t v10 = *v19;
    return result;
  }
  if (a3 == 1)
  {
    __n128 result = *a1;
    *a4 = *a1;
    unint64_t v9 = a1[1].n128_u64[0];
    a1[1].n128_u64[0] = 0;
    a4[1].n128_u64[0] = v9;
    unint64_t v10 = &a4[1].n128_u64[1];
    goto LABEL_10;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (a1 == a2) {
      return result;
    }
    __n128 result = *a1;
    *a4 = *a1;
    unint64_t v20 = a1[1].n128_u64[0];
    unint64_t v21 = a1[1].n128_u64[1];
    a1[1].n128_u64[0] = 0;
    a4[1].n128_u64[0] = v20;
    a4[1].n128_u64[1] = v21;
    unint64_t v22 = a1 + 2;
    if (&a1[2] == a2) {
      return result;
    }
    uint64_t v23 = 0;
    unint64_t v24 = a4;
    BOOL v25 = a4;
    while (1)
    {
      unint64_t v26 = v22;
      unint64_t v27 = v25->n128_u64[0];
      v25 += 2;
      BOOL v28 = v22->n128_u64[0] >= v27;
      if (v22->n128_u64[0] == v27)
      {
        unint64_t v29 = v7[2].n128_u64[1];
        unint64_t v30 = v24->n128_u64[1];
        BOOL v28 = v29 >= v30;
        if (v29 == v30) {
          BOOL v28 = v7[3].n128_u64[0] >= v24[1].n128_u64[0];
        }
      }
      if (v28)
      {
        __n128 result = *v26;
        *BOOL v25 = *v26;
        unint64_t v43 = v7[3].n128_u64[0];
        unint64_t v44 = v7[3].n128_u64[1];
        v7[3].n128_u64[0] = 0;
        v24[3].n128_u64[0] = v43;
        v24[3].n128_u64[1] = v44;
        goto LABEL_33;
      }
      *BOOL v25 = *v24;
      uint64_t v31 = v24[1].n128_i64[0];
      uint64_t v32 = v24[1].n128_i64[1];
      v24[1].n128_u64[0] = 0;
      v24[3].n128_u64[0] = v31;
      v24[3].n128_u64[1] = v32;
      BOOL v33 = v4;
      if (v24 == v4) {
        goto LABEL_32;
      }
      uint64_t v34 = v23;
      while (1)
      {
        uint64_t v35 = (_OWORD *)((char *)v4->n128_u64 + v34);
        unint64_t v36 = *(unint64_t *)((char *)v4[-2].n128_u64 + v34);
        BOOL v37 = v26->n128_u64[0] >= v36;
        if (v26->n128_u64[0] != v36) {
          goto LABEL_24;
        }
        unint64_t v38 = v7[2].n128_u64[1];
        unint64_t v39 = *((void *)v35 - 3);
        if (v38 == v39)
        {
          BOOL v37 = v7[3].n128_u64[0] >= *(unint64_t *)((char *)v4[-1].n128_u64 + v34);
LABEL_24:
          if (v37)
          {
            BOOL v33 = v24;
            goto LABEL_32;
          }
          goto LABEL_28;
        }
        if (v38 >= v39) {
          break;
        }
LABEL_28:
        v24 -= 2;
        *uint64_t v35 = *(__n128 *)((char *)&v4[-2] + v34);
        uint64_t v40 = (uint64_t)v4 + v34;
        uint64_t v41 = *(uint64_t *)((char *)v4[-1].n128_i64 + v34);
        *(void *)(v40 - 16) = 0;
        NSRange v42 = *(void **)((char *)v4[1].n128_u64 + v34);
        *(void *)(v40 + 16) = v41;

        *(void *)(v40 + 24) = *(void *)(v40 - 8);
        v34 -= 32;
        if (!v34)
        {
          BOOL v33 = v4;
          goto LABEL_32;
        }
      }
      BOOL v33 = (__n128 *)((char *)v4 + v34);
LABEL_32:
      __n128 *v33 = *v26;
      unint64_t v45 = v7[3].n128_u64[0];
      v7[3].n128_u64[0] = 0;
      unint64_t v46 = (void *)v33[1].n128_u64[0];
      v33[1].n128_u64[0] = v45;

      v33[1].n128_u64[1] = v7[3].n128_u64[1];
LABEL_33:
      unint64_t v22 = v26 + 2;
      v23 += 32;
      unint64_t v24 = v25;
      uint64_t v7 = v26;
      if (&v26[2] == a2) {
        return result;
      }
    }
  }
  unint64_t v50 = &a1[2 * (a3 >> 1)];
  sub_18B06A1D8(a1, v50, a3 >> 1, a4, a3 >> 1);
  sub_18B06A1D8(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
  uint64_t v51 = &v7[2 * (a3 >> 1)];
  while (v51 != a2)
  {
    BOOL v52 = v51->n128_u64[0] >= v7->n128_u64[0];
    if (v51->n128_u64[0] == v7->n128_u64[0])
    {
      unint64_t v53 = v51->n128_u64[1];
      unint64_t v54 = v7->n128_u64[1];
      BOOL v52 = v53 >= v54;
      if (v53 == v54) {
        BOOL v52 = v51[1].n128_u64[0] >= v7[1].n128_u64[0];
      }
    }
    if (v52)
    {
      __n128 result = *v7;
      *uint64_t v4 = *v7;
      unint64_t v57 = v7[1].n128_u64[0];
      unint64_t v58 = v7[1].n128_u64[1];
      v7[1].n128_u64[0] = 0;
      v4[1].n128_u64[0] = v57;
      v4[1].n128_u64[1] = v58;
      v7 += 2;
    }
    else
    {
      __n128 result = *v51;
      *uint64_t v4 = *v51;
      unint64_t v55 = v51[1].n128_u64[0];
      unint64_t v56 = v51[1].n128_u64[1];
      v51[1].n128_u64[0] = 0;
      v4[1].n128_u64[0] = v55;
      v4[1].n128_u64[1] = v56;
      v51 += 2;
    }
    v4 += 2;
    if (v7 == v50)
    {
      if (v51 != a2)
      {
        uint64_t v59 = 0;
        do
        {
          uint64_t v60 = &v51[v59];
          uint64_t v61 = &v4[v59];
          __n128 result = v51[v59];
          *uint64_t v61 = result;
          unint64_t v62 = v51[v59 + 1].n128_u64[0];
          unint64_t v63 = v51[v59 + 1].n128_u64[1];
          v60[1].n128_u64[0] = 0;
          v61[1].n128_u64[0] = v62;
          v61[1].n128_u64[1] = v63;
          v59 += 2;
        }
        while (&v60[2] != a2);
      }
      return result;
    }
  }
  if (v7 != v50)
  {
    uint64_t v64 = 0;
    do
    {
      uint64_t v65 = &v4[v64];
      uint64_t v66 = &v7[v64];
      __n128 result = v7[v64];
      *uint64_t v65 = result;
      unint64_t v67 = v7[v64 + 1].n128_u64[0];
      unint64_t v68 = v7[v64 + 1].n128_u64[1];
      v66[1].n128_u64[0] = 0;
      v65[1].n128_u64[0] = v67;
      v65[1].n128_u64[1] = v68;
      v64 += 2;
    }
    while (&v66[2] != v50);
  }
  return result;
}

void sub_18B06AA58(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return;
      }
      uint64_t v13 = 0;
      unint64_t v14 = *(void *)a2;
      uint64_t v15 = -a4;
      while (1)
      {
        unint64_t v16 = *(void *)&a1[v13];
        BOOL v17 = v14 >= v16;
        if (v14 == v16)
        {
          unint64_t v18 = *((void *)a2 + 1);
          unint64_t v19 = *((void *)&a1[v13] + 1);
          BOOL v17 = v18 >= v19;
          if (v18 == v19) {
            BOOL v17 = *((void *)a2 + 2) >= *(void *)&a1[v13 + 1];
          }
        }
        if (!v17) {
          break;
        }
        v13 += 2;
        BOOL v17 = __CFADD__(v15++, 1);
        if (v17) {
          return;
        }
      }
      uint64_t v20 = -v15;
      unint64_t v21 = &a1[v13];
      uint64_t v101 = a6;
      if (-v15 >= v8)
      {
        if (v15 == -1)
        {
          sub_18B06A614(&a1[v13], a2);
          return;
        }
        if (v15 > 0) {
          uint64_t v20 = 1 - v15;
        }
        uint64_t v35 = v20 >> 1;
        unint64_t v24 = &a1[2 * (v20 >> 1) + v13];
        if (a2 == a3)
        {
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v23 = 0;
          unint64_t v37 = ((char *)a3 - (char *)a2) >> 5;
          unint64_t v38 = *(void *)v24;
          unint64_t v39 = *((void *)v24 + 1);
          do
          {
            unint64_t v40 = v37 >> 1;
            unint64_t v41 = v23 + (v37 >> 1);
            NSRange v42 = &a2[2 * v41];
            BOOL v43 = *(void *)v42 >= v38;
            if (*(void *)v42 == v38)
            {
              unint64_t v44 = *((void *)v42 + 1);
              BOOL v43 = v44 >= v39;
              if (v44 == v39) {
                BOOL v43 = *((void *)v42 + 2) >= *((void *)v24 + 2);
              }
            }
            if (!v43)
            {
              uint64_t v23 = v41 + 1;
              unint64_t v40 = v37 + ~v40;
            }
            unint64_t v37 = v40;
          }
          while (v40);
        }
        uint64_t v36 = (32 * v23) >> 5;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v22 = v8;
        }
        else {
          uint64_t v22 = v8 + 1;
        }
        uint64_t v23 = v22 >> 1;
        unint64_t v24 = &a1[v13];
        uint64_t v25 = (char *)a2 - (char *)a1 - v13 * 16;
        if (v25)
        {
          unint64_t v26 = &a2[2 * v23];
          unint64_t v27 = v25 >> 5;
          unint64_t v28 = *(void *)v26;
          unint64_t v29 = *((void *)v26 + 1);
          unint64_t v30 = *((void *)v26 + 2);
          unint64_t v24 = &a1[v13];
          do
          {
            unint64_t v31 = v27 >> 1;
            uint64_t v32 = &v24[2 * (v27 >> 1)];
            BOOL v33 = v28 >= *(void *)v32;
            if (v28 == *(void *)v32)
            {
              unint64_t v34 = *((void *)v32 + 1);
              BOOL v33 = v29 >= v34;
              if (v29 == v34) {
                BOOL v33 = v30 >= *((void *)v32 + 2);
              }
            }
            if (v33)
            {
              unint64_t v24 = v32 + 2;
              unint64_t v31 = v27 + ~v31;
            }
            unint64_t v27 = v31;
          }
          while (v31);
        }
        uint64_t v35 = ((char *)v24 - (char *)a1 - v13 * 16) >> 5;
        uint64_t v36 = v23;
      }
      v100 = a3;
      unint64_t v45 = &a2[2 * v23];
      if (v24 == a2)
      {
        a3 = &a2[2 * v23];
      }
      else
      {
        a3 = v24;
        if (v23)
        {
          v98 = v21;
          uint64_t v99 = a7;
          sub_18B06A614(v24, a2);
          a3 = v24 + 2;
          if (v23 != 1)
          {
            unint64_t v46 = a2 + 2;
            uint64_t v47 = 32 * v23 - 32;
            do
            {
              if (a3 == a2) {
                a2 = v46;
              }
              sub_18B06A614(a3, v46);
              a3 += 2;
              v46 += 2;
              v47 -= 32;
            }
            while (v47);
          }
          if (a3 != a2)
          {
            unint64_t v48 = a3;
            unint64_t v49 = a2;
            do
            {
              while (1)
              {
                sub_18B06A614(v48, a2);
                v48 += 2;
                a2 += 2;
                if (a2 == v45) {
                  break;
                }
                if (v48 == v49) {
                  unint64_t v49 = a2;
                }
              }
              a2 = v49;
            }
            while (v48 != v49);
          }
          unint64_t v21 = v98;
          a7 = v99;
        }
      }
      a4 = -(v35 + v15);
      uint64_t v50 = v8 - v36;
      if (v35 + v36 >= v8 - (v35 + v36) - v15)
      {
        unint64_t v53 = v21;
        unint64_t v54 = v45;
        a6 = v101;
        uint64_t v55 = -(v35 + v15);
        uint64_t v51 = a7;
        sub_18B06AA58(a3, v54, v100, v55, v50, v101);
        BOOL v52 = v53;
        uint64_t v50 = v36;
        a4 = v35;
      }
      else
      {
        uint64_t v51 = a7;
        sub_18B06AA58(v21, v24, a3, v35, v36, v101);
        BOOL v52 = a3;
        unint64_t v24 = v45;
        a6 = v101;
        a3 = v100;
      }
      a2 = v24;
      a1 = v52;
      uint64_t v8 = v50;
      a7 = v51;
      if (!v50) {
        return;
      }
    }
    if (a4 <= v8)
    {
      if (a1 == a2) {
        return;
      }
      uint64_t v72 = 0;
      uint64_t v57 = 0;
      do
      {
        uint64_t v73 = a6 + v72 * 16;
        uint64_t v74 = &a1[v72];
        *(_OWORD *)uint64_t v73 = a1[v72];
        uint64_t v75 = *(void *)&a1[v72 + 1];
        uint64_t v76 = *((void *)&a1[v72 + 1] + 1);
        *((void *)v74 + 2) = 0;
        *(void *)(v73 + 16) = v75;
        *(void *)(v73 + 24) = v76;
        ++v57;
        v72 += 2;
      }
      while (v74 + 2 != a2);
      if (v72 * 16)
      {
        uint64_t v77 = (void *)(a6 + v72 * 16);
        uint64_t v78 = a6 + v72 * 16 - 32;
        long long v79 = (void *)a6;
        while (a2 != a3)
        {
          BOOL v80 = *(void *)a2 >= *v79;
          if (*(void *)a2 == *v79)
          {
            unint64_t v81 = *((void *)a2 + 1);
            unint64_t v82 = v79[1];
            BOOL v80 = v81 >= v82;
            if (v81 == v82) {
              BOOL v80 = *((void *)a2 + 2) >= v79[2];
            }
          }
          if (v80)
          {
            *a1 = *(_OWORD *)v79;
            uint64_t v85 = v79[2];
            v79[2] = 0;
            id v86 = (void *)*((void *)a1 + 2);
            *((void *)a1 + 2) = v85;

            *((void *)a1 + 3) = v79[3];
            v79 += 4;
          }
          else
          {
            *a1 = *a2;
            uint64_t v83 = *((void *)a2 + 2);
            *((void *)a2 + 2) = 0;
            id v84 = (void *)*((void *)a1 + 2);
            *((void *)a1 + 2) = v83;

            *((void *)a1 + 3) = *((void *)a2 + 3);
            a2 += 2;
          }
          a1 += 2;
          if (v77 == v79) {
            goto LABEL_102;
          }
        }
        if (v77 != v79)
        {
          unint64_t v91 = 0;
          do
          {
            v92 = &a1[v91 / 0x10];
            v93 = &v79[v91 / 8];
            long long *v92 = *(_OWORD *)&v79[v91 / 8];
            uint64_t v94 = v79[v91 / 8 + 2];
            v79[v91 / 8 + 2] = 0;
            v95 = *(void **)&a1[v91 / 0x10 + 1];
            *((void *)v92 + 2) = v94;

            *((void *)v92 + 3) = v79[v91 / 8 + 3];
            v91 += 32;
          }
          while ((void *)v78 != v93);
        }
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      do
      {
        uint64_t v58 = a6 + v56 * 16;
        uint64_t v59 = &a2[v56];
        *(_OWORD *)uint64_t v58 = a2[v56];
        uint64_t v60 = *(void *)&a2[v56 + 1];
        uint64_t v61 = *((void *)&a2[v56 + 1] + 1);
        *((void *)v59 + 2) = 0;
        *(void *)(v58 + 16) = v60;
        *(void *)(v58 + 24) = v61;
        ++v57;
        v56 += 2;
      }
      while (v59 + 2 != a3);
      if (v56 * 16)
      {
        unint64_t v62 = (long long *)(a6 + v56 * 16);
        while (a2 != a1)
        {
          unint64_t v63 = *((void *)a2 - 4);
          unint64_t v64 = *((void *)v62 - 4);
          BOOL v65 = v64 >= v63;
          if (v64 == v63)
          {
            unint64_t v66 = *((void *)v62 - 3);
            unint64_t v67 = *((void *)a2 - 3);
            BOOL v65 = v66 >= v67;
            if (v66 == v67) {
              BOOL v65 = *((void *)v62 - 2) >= *((void *)a2 - 2);
            }
          }
          if (v65)
          {
            *(a3 - 2) = *(v62 - 2);
            uint64_t v71 = *((void *)v62 - 2);
            *((void *)v62 - 2) = 0;
            uint64_t v69 = (void *)*((void *)a3 - 2);
            *((void *)a3 - 2) = v71;
            long long v70 = v62;
            v62 -= 2;
          }
          else
          {
            *(a3 - 2) = *(a2 - 2);
            uint64_t v68 = *((void *)a2 - 2);
            *((void *)a2 - 2) = 0;
            uint64_t v69 = (void *)*((void *)a3 - 2);
            *((void *)a3 - 2) = v68;
            long long v70 = a2;
            a2 -= 2;
          }

          *((void *)a3 - 1) = *((void *)v70 - 1);
          a3 -= 2;
          if (v62 == (long long *)a6) {
            goto LABEL_102;
          }
        }
        unint64_t v87 = 0;
        do
        {
          uint64_t v88 = &a3[v87];
          *(v88 - 2) = v62[v87 - 2];
          uint64_t v89 = *(void *)&v62[v87 - 1];
          *(void *)&v62[v87 - 1] = 0;
          v90 = *(void **)&a3[v87 - 1];
          *((void *)v88 - 2) = v89;

          *((void *)v88 - 1) = *((void *)&v62[v87 - 1] + 1);
          v87 -= 2;
        }
        while (&v62[v87] != (long long *)a6);
      }
    }
LABEL_102:
    if (a6)
    {
      v96 = (void **)(a6 + 16);
      do
      {
        v97 = *v96;
        v96 += 4;

        --v57;
      }
      while (v57);
    }
  }
}

uint64_t *sub_18B06B040(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 32;
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      uint64_t v6 = *(void *)(v3 - 16);
      uint64_t v7 = *(void *)(v3 - 8);
      *(void *)(v3 - 16) = 0;
      *(void *)(v4 - 16) = v6;
      *(void *)(v4 - 8) = v7;
      v4 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *__n128 result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_18B06B0C0()
{
}

void sub_18B06B0D0()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18B06B124(exception);
  __cxa_throw(exception, (struct type_info *)off_1E545F578, MEMORY[0x1E4FBA1C8]);
}

void sub_18B06B110(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18B06B124(std::logic_error *a1)
{
  __n128 result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *sub_18B06B160(unint64_t a1)
{
  if (a1 >> 59) {
    sub_18B06B198();
  }
  return operator new(32 * a1);
}

void sub_18B06B198()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t sub_18B06B1CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18B06B274()
{
  unint64_t v0 = [CKScheduler alloc];
  uint64_t inited = objc_msgSend_initInternal(v0, v1, v2, v3);
  uint64_t v5 = qword_1EB279B70;
  qword_1EB279B70 = inited;

  return MEMORY[0x1F41817F8](inited, v5);
}

void sub_18B06B7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,os_activity_scope_state_s state)
{
}

void sub_18B06B820(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = objc_msgSend_identifier(*(void **)(a1 + 40), v5, v6, v7);
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v14, v9, (uint64_t)v8, v10);
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v11;
}

void sub_18B06B8A4(void **a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    int v60 = 138412290;
    uint64_t v61 = v6;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEFAULT, "Submitting activity %@", (uint8_t *)&v60, 0xCu);
  }
  uint64_t v7 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(a1[5], v3, v4, v5);
  uint64_t v11 = objc_msgSend_identifier(a1[4], v8, v9, v10);
  id v14 = objc_msgSend_objectForKeyedSubscript_(v7, v12, (uint64_t)v11, v13);

  if ((objc_msgSend_isXPCActivityPending_(a1[5], v15, (uint64_t)v14, v16) & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    unint64_t v24 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v6dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
      _os_log_debug_impl(&dword_18AF10000, v24, OS_LOG_TYPE_DEBUG, "Dropping cached non-pending xpc_activity", (uint8_t *)&v60, 2u);
    }
    unint64_t v28 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(a1[5], v25, v26, v27);
    uint64_t v32 = objc_msgSend_identifier(a1[4], v29, v30, v31);
    objc_msgSend_setObject_forKeyedSubscript_(v28, v33, 0, (uint64_t)v32);

    unint64_t v21 = 0;
    id v14 = 0;
    goto LABEL_15;
  }
  if (!v14)
  {
    unint64_t v21 = 0;
LABEL_15:
    char v34 = 1;
    goto LABEL_16;
  }
  xpc_object_t v20 = xpc_activity_copy_criteria((xpc_activity_t)v14);
  unint64_t v21 = v20;
  if (v20)
  {
    double v22 = xpc_dictionary_get_double(v20, "ck_submitted_time");
    uint64_t v23 = a1 + 6;
    xpc_dictionary_set_double(a1[6], "ck_submitted_time", v22);
    if (xpc_equal(v21, *v23))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      NSRange v42 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
      {
        BOOL v43 = a1[4];
        int v60 = 138412290;
        uint64_t v61 = v43;
        _os_log_debug_impl(&dword_18AF10000, v42, OS_LOG_TYPE_DEBUG, "Not modifying criteria of identical existing XPC activity for %@", (uint8_t *)&v60, 0xCu);
      }
LABEL_33:
      BOOL v52 = [CKXPCActivity alloc];
      unint64_t v41 = objc_msgSend_initWithXPCActivity_(v52, v53, (uint64_t)v14, v54);
      objc_msgSend_setCkXPCActivity_(a1[4], v55, (uint64_t)v41, v56);
      uint64_t v57 = a1[7];
      if (v57)
      {
        uint64_t v58 = a1[5];
        if (v58) {
          uint64_t v59 = *((void *)v58 + 2);
        }
        else {
          uint64_t v59 = 0;
        }
        dispatch_async(v59, v57);
      }
      goto LABEL_37;
    }
LABEL_28:
    unint64_t v44 = (void *)xpc_copy_short_description();
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    unint64_t v45 = (void *)ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v46 = a1[4];
      uint64_t v47 = v45;
      uint64_t v51 = objc_msgSend_identifier(v46, v48, v49, v50);
      int v60 = 138543618;
      uint64_t v61 = v51;
      __int16 v62 = 2080;
      unint64_t v63 = v44;
      _os_log_impl(&dword_18AF10000, v47, OS_LOG_TYPE_DEFAULT, "Modifying criteria of existing activity %{public}@ with criteria: %s", (uint8_t *)&v60, 0x16u);
    }
    free(v44);
    xpc_activity_set_criteria((xpc_activity_t)v14, *v23);
    goto LABEL_33;
  }
  char v34 = 0;
LABEL_16:
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v17, v18, v19);
  uint64_t v23 = a1 + 6;
  xpc_dictionary_set_double(a1[6], "ck_submitted_time", v35);
  if ((v34 & 1) == 0) {
    goto LABEL_28;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v36 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v6dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
    _os_log_debug_impl(&dword_18AF10000, v36, OS_LOG_TYPE_DEBUG, "Submitting activity without an existing xpc_activity, will register", (uint8_t *)&v60, 2u);
  }
  uint64_t v40 = (uint64_t)a1[5];
  unint64_t v41 = objc_msgSend_identifier(a1[4], v37, v38, v39);
  sub_18B06BD30(v40, v41, a1[6], a1[7]);
LABEL_37:
}

void sub_18B06BD30(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!a1) {
    goto LABEL_13;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  uint64_t v10 = objc_opt_class();
  uint64_t v13 = objc_msgSend_xpcActivityIdentifierForCKActivityIdentifier_(v10, v11, (uint64_t)v7, v12);
  if (objc_msgSend_isEqual_(v13, v14, (uint64_t)v7, v15))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v16 = ck_log_facility_scheduler;
    if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_10;
    }
    *(_DWORD *)buf = 138543362;
    *(void *)&uint8_t buf[4] = v7;
    xpc_object_t v20 = "Calling xpc_activity_register for activity %{public}@";
    unint64_t v21 = v16;
    uint32_t v22 = 12;
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v23 = ck_log_facility_scheduler;
    if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_10;
    }
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v13;
    xpc_object_t v20 = "Calling xpc_activity_register for activity %{public}@ (xpc_activity %{public}@)";
    unint64_t v21 = v23;
    uint32_t v22 = 22;
  }
  _os_log_debug_impl(&dword_18AF10000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
LABEL_10:
  if (__sTestOverridesAvailable)
  {
    unint64_t v24 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v17, v18, v19);
    objc_msgSend_postNotificationName_object_(v24, v25, @"CKSchedulerWillRegisterXPCActivityNotification", (uint64_t)v13);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  NSRange v42 = sub_18AF13C00;
  BOOL v43 = sub_18AF13888;
  id v44 = _Block_copy(v9);
  v39[0] = 0;
  v39[1] = v39;
  void v39[2] = 0x2020000000;
  char v40 = 0;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 24));
  id v26 = v13;
  uint64_t v30 = (const char *)objc_msgSend_UTF8String(v26, v27, v28, v29);
  uint64_t v31 = (void *)*MEMORY[0x1E4F14158];
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  v33[2] = sub_18B06D248;
  v33[3] = &unk_1E54627C8;
  void v33[4] = a1;
  id v34 = v7;
  id v35 = v8;
  unint64_t v37 = v39;
  id v32 = v26;
  id v36 = v32;
  uint64_t v38 = buf;
  xpc_activity_register(v30, v31, v33);

  _Block_object_dispose(v39, 8);
  _Block_object_dispose(buf, 8);

LABEL_13:
}

void sub_18B06C070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B06C09C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v6 = objc_msgSend_nullableContainer(v2, v3, v4, v5);
  uint64_t v10 = objc_msgSend_deviceContext(v6, v7, v8, v9);
  uint64_t v14 = objc_msgSend_testDeviceReferenceProtocol(v10, v11, v12, v13);

  if (v14)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v19 = objc_msgSend_containerID(v2, v15, v16, v17);
    int isTestContainer = objc_msgSend_isTestContainer(v19, v20, v21, v22);

    uint64_t v18 = isTestContainer ^ 1u;
  }

  return v18;
}

id sub_18B06C13C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v6, v7, v8);
  uint64_t v13 = objc_msgSend_containerID(v4, v10, v11, v12);
  int isAppleInternal = objc_msgSend_isAppleInternal(v13, v14, v15, v16);

  if (isAppleInternal)
  {
    uint64_t v21 = objc_msgSend_identifier(v4, v18, v19, v20);
    unint64_t v24 = objc_msgSend_CKStringByReplacingUUIDsWithString_(v21, v22, @"<uuid>", v23);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v25, (uint64_t)v24, @"activityIdentifier");

    uint64_t v29 = objc_msgSend_containerID(v4, v26, v27, v28);
    BOOL v33 = objc_msgSend_containerIdentifier(v29, v30, v31, v32);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v34, (uint64_t)v33, @"containerIdentifier");
  }
  else
  {
    objc_msgSend_setObject_forKeyedSubscript_(v9, v18, @"<redacted>", @"activityIdentifier");
    objc_msgSend_setObject_forKeyedSubscript_(v9, v38, @"ThirdPartyContainer", @"containerIdentifier");
  }
  uint64_t v39 = NSNumber;
  uint64_t v40 = objc_msgSend_priority(v4, v35, v36, v37);
  BOOL v43 = objc_msgSend_numberWithInteger_(v39, v41, v40, v42);
  objc_msgSend_setObject_forKeyedSubscript_(v9, v44, (uint64_t)v43, @"priority");

  if (objc_msgSend_userRequestedBackupTask(v4, v45, v46, v47))
  {
    uint64_t v51 = NSNumber;
    uint64_t v52 = objc_msgSend_userRequestedBackupTask(v4, v48, v49, v50);
    uint64_t v55 = objc_msgSend_numberWithBool_(v51, v53, v52, v54);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v56, (uint64_t)v55, @"userRequestedBackupTask");
  }
  if (objc_msgSend_expectedTransferSizeBytes(v4, v48, v49, v50))
  {
    int v60 = NSNumber;
    uint64_t v61 = objc_msgSend_expectedTransferSizeBytes(v4, v57, v58, v59);
    uint64_t v64 = objc_msgSend_numberWithUnsignedInteger_(v60, v62, v61, v63);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v65, (uint64_t)v64, @"transferSizeBytes");
  }
  if (v5)
  {
    string = xpc_dictionary_get_string(v5, "ck_device_count_string");
    if (string)
    {
      uint64_t v69 = objc_msgSend_stringWithUTF8String_(NSString, v67, (uint64_t)string, v68);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v70, (uint64_t)v69, @"deviceCountString");
    }
    uint64_t v71 = xpc_dictionary_get_string(v5, (const char *)*MEMORY[0x1E4F142C8]);
    if (v71)
    {
      uint64_t v74 = objc_msgSend_stringWithUTF8String_(NSString, v72, (uint64_t)v71, v73);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v75, (uint64_t)v74, @"xpcActivityPriority");
    }
    int64_t int64 = xpc_dictionary_get_int64(v5, (const char *)*MEMORY[0x1E4F141A8]);
    long long v79 = objc_msgSend_numberWithLongLong_(NSNumber, v77, int64, v78);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v80, (uint64_t)v79, @"xpcActivityGracePeriod");

    int64_t v81 = xpc_dictionary_get_int64(v5, (const char *)*MEMORY[0x1E4F14170]);
    id v84 = objc_msgSend_numberWithLongLong_(NSNumber, v82, v81, v83);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v85, (uint64_t)v84, @"xpcActivityDelay");
  }

  return v9;
}

void sub_18B06C528(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v6, v5, *(void *)(a1 + 40));
}

void sub_18B06C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v17 - 112));
  _Unwind_Resume(a1);
}

void sub_18B06C894(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    int v18 = *(unsigned __int8 *)(a1 + 64);
    int v20 = 138543618;
    uint64_t v21 = v17;
    __int16 v22 = 1024;
    int v23 = v18;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Registering CK activity %{public}@ replaceExistingHandler=%d", (uint8_t *)&v20, 0x12u);
  }
  if (*(unsigned char *)(a1 + 64)
    || (objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 40), v3, v4, v5),
        uint64_t v12 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v12, v13, *(void *)(a1 + 32), v14),
        uint64_t v15 = objc_claimAutoreleasedReturnValue(),
        v15,
        v12,
        !v15))
  {
    uint64_t v6 = _Block_copy(*(const void **)(a1 + 48));
    uint64_t v10 = objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 40), v7, v8, v9);
    objc_msgSend_setObject_forKeyedSubscript_(v10, v11, (uint64_t)v6, *(void *)(a1 + 32));
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v16 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = 138412290;
      uint64_t v21 = v19;
      _os_log_fault_impl(&dword_18AF10000, v16, OS_LOG_TYPE_FAULT, "BUG IN CLIENT OF CLOUDKIT: Registering a handler for a CKScheduler activity identifier that has already been registered (%@).", (uint8_t *)&v20, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

void sub_18B06CA80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, *(void *)(a1 + 40), v7);

  if (!v8) {
    sub_18B06BD30(*(void *)(a1 + 32), *(void **)(a1 + 40), 0, 0);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v12 = @"activityIdentifier";
  v13[0] = v10;
  uint64_t v11 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)v13, (uint64_t)&v12, 1);
  AnalyticsSendEvent();
}

void sub_18B06CC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state)
{
}

void sub_18B06CE14(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v10 = 138543362;
    uint64_t v11 = v6;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEFAULT, "Unregistering handler for CK activity %{public}@", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v7 = objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 40), v3, v4, v5);
  objc_msgSend_removeObjectForKey_(v7, v8, *(void *)(a1 + 32), v9);
}

void sub_18B06D088(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, *(void *)(a1 + 40), v7);

  if (v8)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      int v27 = 138543362;
      uint64_t v28 = v13;
      _os_log_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEFAULT, "Cancelling activity %{public}@", (uint8_t *)&v27, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v14 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = *(void *)(a1 + 40);
      int v27 = 138543362;
      uint64_t v28 = v26;
      _os_log_debug_impl(&dword_18AF10000, v14, OS_LOG_TYPE_DEBUG, "Cancelling unknown activity %{public}@", (uint8_t *)&v27, 0xCu);
    }
  }
  uint64_t v15 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), v10, v11, v12);
  objc_msgSend_removeObjectForKey_(v15, v16, *(void *)(a1 + 40), v17);

  int v18 = objc_opt_class();
  objc_msgSend_xpcActivityIdentifierForCKActivityIdentifier_(v18, v19, *(void *)(a1 + 40), v20);
  id v21 = objc_claimAutoreleasedReturnValue();
  uint64_t v25 = (const char *)objc_msgSend_UTF8String(v21, v22, v23, v24);
  xpc_activity_unregister(v25);
}

void sub_18B06D248(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    uint64_t v6 = *(NSObject **)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_18B06D34C;
  block[3] = &unk_1E54627A0;
  id v11 = v3;
  uint64_t v12 = v5;
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 56);
  id v7 = (id)v9;
  long long v15 = v9;
  uint64_t v16 = *(void *)(a1 + 72);
  id v8 = v4;
  dispatch_sync(v6, block);
}

void sub_18B06D34C(uint64_t a1)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  xpc_activity_state_t v2 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 40), v4, v5, v6);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v8, v3, *(void *)(a1 + 48));

  if (v2 == 2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v16 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v92 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v92;
      _os_log_debug_impl(&dword_18AF10000, v16, OS_LOG_TYPE_DEBUG, "Being told to run activity %{public}@", buf, 0xCu);
    }
    uint64_t v17 = *(dispatch_queue_t **)(a1 + 40);
    int v18 = *(void **)(a1 + 32);
    id v19 = *(id *)(a1 + 48);
    uint64_t v20 = v18;
    if (!v17) {
      goto LABEL_56;
    }
    dispatch_assert_queue_V2(v17[1]);
    id v21 = _os_activity_create(&dword_18AF10000, "client/scheduler-run", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    os_activity_scope_enter(v21, &state);
    v98 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v22, v23, v24);
    uint64_t v28 = objc_msgSend_handlersByCKActivityIdentifier(v17, v25, v26, v27);
    uint64_t v31 = objc_msgSend_objectForKeyedSubscript_(v28, v29, (uint64_t)v19, v30);

    uint64_t v32 = objc_opt_class();
    uint64_t v35 = objc_msgSend_activityFromXPCActivity_(v32, v33, (uint64_t)v20, v34);
    uint64_t v36 = (void *)v35;
    if (v31)
    {
      if (v35)
      {
        objc_initWeak(&location, v17);
        uint64_t v101 = MEMORY[0x1E4F143A8];
        uint64_t v102 = 3221225472;
        v103 = sub_18B06DE48;
        v104 = &unk_1E54627F0;
        objc_copyWeak(&v107, &location);
        id v96 = v19;
        id v105 = v96;
        id v97 = v36;
        id v106 = v97;
        uint64_t v95 = xpc_activity_add_eligibility_changed_handler();
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v37 = ck_log_facility_scheduler;
        if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v96;
          _os_log_debug_impl(&dword_18AF10000, v37, OS_LOG_TYPE_DEBUG, "Will run scheduler activity %{public}@", buf, 0xCu);
        }
        if (xpc_activity_set_state(v20, 4))
        {
          double v40 = 0.0;
          if (sub_18B06C09C((uint64_t)CKScheduler, v97))
          {
            xpc_object_t v41 = xpc_activity_copy_criteria(v20);
            uint64_t v42 = sub_18B06C13C((uint64_t)CKScheduler, v97, v41);
            double v43 = xpc_dictionary_get_double(v41, "ck_submitted_time");
            objc_msgSend_timeIntervalSinceReferenceDate(v98, v44, v45, v46);
            double v40 = v47 - v43;
            uint64_t v51 = objc_msgSend_numberWithDouble_(NSNumber, v48, v49, v50, v40);
            objc_msgSend_setObject_forKeyedSubscript_(v42, v52, (uint64_t)v51, @"durationFromSubmitToRun");

            AnalyticsSendEvent();
          }
          if (qword_1EB279B80 != -1) {
            dispatch_once(&qword_1EB279B80, &unk_1ED7F0AB8);
          }
          if (qword_1EB279B78)
          {
            unint64_t v53 = objc_msgSend_stringWithFormat_(NSString, v38, @"CKScheduler-%@", v39, v96);
            uint64_t v54 = (void *)qword_1EB279B78;
            v99[0] = MEMORY[0x1E4F143A8];
            v99[1] = 3221225472;
            v99[2] = sub_18B06E0F0;
            v99[3] = &unk_1E5460350;
            id v55 = v53;
            id v100 = v55;
            uint64_t v94 = objc_msgSend_beginBackgroundTaskWithName_expirationHandler_(v54, v56, (uint64_t)v55, (uint64_t)v99);
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            }
            uint64_t v57 = (id)ck_log_facility_scheduler;
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_backgroundTimeRemaining((void *)qword_1EB279B78, v58, v59, v60);
              *(_DWORD *)buf = 134218498;
              *(void *)&uint8_t buf[4] = v94;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v96;
              *(_WORD *)&buf[22] = 2048;
              v111 = v93;
              _os_log_debug_impl(&dword_18AF10000, v57, OS_LOG_TYPE_DEBUG, "Began background task identifier %ld for %@ with %.2fs background time remaining", buf, 0x20u);
            }

            uint64_t v61 = v94;
          }
          else
          {
            uint64_t v61 = 0;
          }
          uint64_t v69 = v17[2];
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_18B06E1CC;
          v111 = &unk_1E5462868;
          id v112 = v97;
          id v118 = v31;
          v113 = v21;
          v114 = v17;
          id v115 = v96;
          v116 = v20;
          uint64_t v119 = v95;
          uint64_t v120 = v61;
          id v117 = v98;
          double v121 = v40;
          dispatch_async(v69, buf);
        }
        else
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v68 = ck_log_facility_scheduler;
          if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v96;
            _os_log_error_impl(&dword_18AF10000, v68, OS_LOG_TYPE_ERROR, "Failed to set state to CONTINUE for activity %{public}@", buf, 0xCu);
          }
        }

        objc_destroyWeak(&v107);
        objc_destroyWeak(&location);
        goto LABEL_55;
      }
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      unint64_t v66 = ck_log_facility_scheduler;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_FAULT)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v19;
      unint64_t v67 = "No scheduler activity when trying to run activity %{public}@";
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      unint64_t v66 = ck_log_facility_scheduler;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_FAULT)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v19;
      unint64_t v67 = "No handler when trying to run activity %{public}@";
    }
    _os_log_fault_impl(&dword_18AF10000, v66, OS_LOG_TYPE_FAULT, v67, buf, 0xCu);
LABEL_55:

    os_activity_scope_leave(&state);
LABEL_56:

    goto LABEL_57;
  }
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    __int16 v62 = (void *)ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
    {
      uint64_t v63 = *(void *)(a1 + 48);
      uint64_t v64 = v62;
      BOOL v65 = CKStringForXPCActivityState(v2);
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v63;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v65;
      _os_log_impl(&dword_18AF10000, v64, OS_LOG_TYPE_INFO, "Received callback for activity %{public}@ with state [%{public}@]", buf, 0x16u);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    long long v9 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v91 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v91;
      _os_log_debug_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEBUG, "Checking in for activity %{public}@", buf, 0xCu);
    }
    if (*(void *)(a1 + 56))
    {
      id v13 = (void *)xpc_copy_short_description();
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v14 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v13;
        _os_log_impl(&dword_18AF10000, v14, OS_LOG_TYPE_DEFAULT, "Submitting activity criteria for %{public}@: %s", buf, 0x16u);
      }
      free(v13);
      xpc_activity_set_criteria(*(xpc_activity_t *)(a1 + 32), *(xpc_object_t *)(a1 + 56));
    }
  }
LABEL_57:
  uint64_t v70 = *(void *)(*(void *)(a1 + 72) + 8);
  if (!*(unsigned char *)(v70 + 24))
  {
    if (__sTestOverridesAvailable)
    {
      uint64_t v76 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v10, v11, v12);
      objc_msgSend_postNotificationName_object_(v76, v77, @"CKSchedulerDidRegisterXPCActivityNotification", *(void *)(a1 + 64));

      uint64_t v70 = *(void *)(*(void *)(a1 + 72) + 8);
    }
    *(unsigned char *)(v70 + 24) = 1;
    uint64_t v78 = *(void *)(a1 + 40);
    if (v78) {
      long long v79 = *(NSObject **)(v78 + 24);
    }
    else {
      long long v79 = 0;
    }
    dispatch_resume(v79);
    if (__sTestOverridesAvailable)
    {
      objc_msgSend_delayAfterXPCActivityRegister(*(void **)(a1 + 40), v80, v81, v82);
      if (v86 > 0.0)
      {
        unint64_t v87 = (void *)MEMORY[0x1E4F29060];
        objc_msgSend_delayAfterXPCActivityRegister(*(void **)(a1 + 40), v83, v84, v85);
        objc_msgSend_sleepForTimeInterval_(v87, v88, v89, v90);
      }
    }
  }
  uint64_t v71 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  if (v71)
  {
    uint64_t v72 = *(void *)(a1 + 40);
    if (v72) {
      uint64_t v73 = *(NSObject **)(v72 + 16);
    }
    else {
      uint64_t v73 = 0;
    }
    dispatch_async(v73, v71);
    uint64_t v74 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v75 = *(void **)(v74 + 40);
    *(void *)(v74 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  }
}

void sub_18B06DDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,os_activity_scope_state_s state)
{
}

void sub_18B06DE48(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (id *)(a1 + 48);
  uint64_t v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  BOOL should_defer = xpc_activity_should_defer(v4);

  if (should_defer)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v7 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v13 = v8;
      _os_log_impl(&dword_18AF10000, v7, OS_LOG_TYPE_DEFAULT, "Should defer activity %{public}@", buf, 0xCu);
    }
    if (WeakRetained)
    {
      long long v9 = WeakRetained[1];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_18B06DFC4;
      block[3] = &unk_1E5460350;
      id v11 = *(id *)(a1 + 40);
      dispatch_async(v9, block);
    }
  }
}

uint64_t sub_18B06DFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_setShouldDefer_, 1, a4);
}

void sub_18B06DFD0()
{
  if ((CKCurrentProcessIsDaemon() & 1) == 0 && sub_18B070AF4())
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2050000000;
    unint64_t v0 = (void *)qword_1EB279B88;
    uint64_t v10 = qword_1EB279B88;
    if (!qword_1EB279B88)
    {
      sub_18B070AF4();
      v8[3] = (uint64_t)objc_getClass("UIApplication");
      qword_1EB279B88 = v8[3];
      unint64_t v0 = (void *)v8[3];
    }
    id v1 = v0;
    _Block_object_dispose(&v7, 8);
    uint64_t v5 = objc_msgSend_sharedApplication(v1, v2, v3, v4);
    uint64_t v6 = (void *)qword_1EB279B78;
    qword_1EB279B78 = v5;
  }
}

void sub_18B06E0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B06E0F0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  xpc_activity_state_t v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Background task for %@ expired. Too bad.", (uint8_t *)&v4, 0xCu);
  }
}

void sub_18B06E1CC(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  xpc_activity_state_t v2 = (void *)ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v4 = v2;
    uint64_t v8 = objc_msgSend_identifier(v3, v5, v6, v7);
    *(_DWORD *)buf = 138543362;
    uint64_t v28 = v8;
    _os_log_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEFAULT, "Running scheduler activity %{public}@", buf, 0xCu);
  }
  uint64_t v9 = *(void *)(a1 + 80);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = sub_18B06E3A0;
  v17[3] = &unk_1E5462840;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void **)(a1 + 56);
  id v18 = v11;
  uint64_t v19 = v12;
  id v20 = v13;
  id v14 = *(id *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 96);
  id v21 = v14;
  uint64_t v24 = v15;
  uint64_t v25 = v16;
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 72);
  uint64_t v26 = *(void *)(a1 + 104);
  (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, v10, v17);
}

void sub_18B06E3A0(uint64_t a1, uint64_t a2)
{
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(*(os_activity_t *)(a1 + 32), &state);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    uint64_t v5 = *(NSObject **)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v39 = MEMORY[0x1E4F143A8];
  uint64_t v40 = 3221225472;
  xpc_object_t v41 = sub_18B06E61C;
  uint64_t v42 = &unk_1E5462818;
  id v43 = *(id *)(a1 + 48);
  uint64_t v46 = a2;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40);
  id v44 = v6;
  uint64_t v45 = v7;
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v47 = *(void *)(a1 + 80);
  uint64_t v48 = v8;
  dispatch_async(v5, &v39);
  if (sub_18B06C09C((uint64_t)CKScheduler, *(void **)(a1 + 64)))
  {
    xpc_object_t v9 = xpc_activity_copy_criteria(*(xpc_activity_t *)(a1 + 56));
    uint64_t v10 = sub_18B06C13C((uint64_t)CKScheduler, *(void **)(a1 + 64), v9);
    id v14 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v11, v12, v13, v39, v40, v41, v42, v43);
    double v15 = xpc_dictionary_get_double(v9, "ck_submitted_time");
    objc_msgSend_timeIntervalSinceReferenceDate(v14, v16, v17, v18);
    id v23 = objc_msgSend_numberWithDouble_(NSNumber, v20, v21, v22, v19 - v15);
    objc_msgSend_setObject_forKeyedSubscript_(v10, v24, (uint64_t)v23, @"durationFromSubmitToComplete");

    objc_msgSend_timeIntervalSinceDate_(v14, v25, *(void *)(a1 + 72), v26);
    uint64_t v30 = objc_msgSend_numberWithDouble_(NSNumber, v27, v28, v29);
    objc_msgSend_setObject_forKeyedSubscript_(v10, v31, (uint64_t)v30, @"durationFromRunToComplete");

    if (*(double *)(a1 + 96) != 0.0)
    {
      uint64_t v35 = objc_msgSend_numberWithDouble_(NSNumber, v32, v33, v34);
      objc_msgSend_setObject_forKeyedSubscript_(v10, v36, (uint64_t)v35, @"durationFromSubmitToRun");
    }
    uint64_t v37 = objc_msgSend_numberWithInteger_(NSNumber, v32, a2, v34);
    objc_msgSend_setObject_forKeyedSubscript_(v10, v38, (uint64_t)v37, @"result");

    AnalyticsSendEvent();
  }

  os_activity_scope_leave(&state);
}

void sub_18B06E5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

uint64_t sub_18B06E61C(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  xpc_activity_state_t v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 56);
    int v22 = 138543618;
    uint64_t v23 = v3;
    __int16 v24 = 1024;
    LODWORD(v25) = v4;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Received completion handler for activity %{public}@ with result %d", (uint8_t *)&v22, 0x12u);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5 == 2)
  {
    if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 3))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v13 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        int v22 = 138543362;
        uint64_t v23 = v21;
        _os_log_error_impl(&dword_18AF10000, v13, OS_LOG_TYPE_ERROR, "Failed to set state to DEFER for activity %{public}@", (uint8_t *)&v22, 0xCu);
      }
    }
  }
  else if (v5 == 1)
  {
    if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 5))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      xpc_object_t v9 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        int v22 = 138543362;
        uint64_t v23 = v20;
        _os_log_error_impl(&dword_18AF10000, v9, OS_LOG_TYPE_ERROR, "Failed to set state to DONE for activity %{public}@", (uint8_t *)&v22, 0xCu);
      }
    }
    uint64_t v10 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 48), v6, v7, v8);
    objc_msgSend_removeObjectForKey_(v10, v11, *(void *)(a1 + 32), v12);
  }
  uint64_t result = xpc_activity_remove_eligibility_changed_handler();
  if (*(void *)(a1 + 72) && qword_1EB279B78)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    double v15 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 32);
      int v22 = 134218242;
      uint64_t v23 = v18;
      __int16 v24 = 2112;
      uint64_t v25 = v19;
      _os_log_debug_impl(&dword_18AF10000, v15, OS_LOG_TYPE_DEBUG, "Ending background task identifier %ld for %@", (uint8_t *)&v22, 0x16u);
    }
    return objc_msgSend_endBackgroundTask_((void *)qword_1EB279B78, v16, *(void *)(a1 + 72), v17);
  }
  return result;
}

uint64_t sub_18B06EA24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  return result;
}

void sub_18B06EA34(uint64_t a1)
{
}

void sub_18B06EA3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(v10, v5, *(void *)(a1 + 40), v6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  xpc_object_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
}

void sub_18B06F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B06F8D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v4 = (void **)qword_1EB2799F0;
  uint64_t v20 = qword_1EB2799F0;
  if (!qword_1EB2799F0)
  {
    uint64_t v5 = sub_18B070CD8(a1, a2, a3, a4);
    void v18[3] = (uint64_t)dlsym(v5, "_DASOverrideRateLimitingKey");
    qword_1EB2799F0 = v18[3];
    uint64_t v4 = (void **)v18[3];
  }
  _Block_object_dispose(&v17, 8);
  if (v4)
  {
    xpc_object_t v9 = *v4;
    id v10 = v9;
  }
  else
  {
    id v11 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7, v8);
    id v14 = objc_msgSend_stringWithUTF8String_(NSString, v12, (uint64_t)"NSString *get_DASOverrideRateLimitingKey(void)", v13);
    double v15 = dlerror();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v11, v16, (uint64_t)v14, @"CKScheduler.m", 30, @"%s", v15);

    __break(1u);
  }
}

void sub_18B06FA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B06FA38(void *a1, const char *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)a1[4];
  id v6 = a3;
  uint64_t v7 = xpc_dictionary_get_value(v5, a2);

  if (v7)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v8 = (void *)ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = (void *)a1[5];
      uint64_t v26 = v8;
      uint64_t v30 = objc_msgSend_identifier(v25, v27, v28, v29);
      int v31 = 138543618;
      uint64_t v32 = v30;
      __int16 v33 = 2082;
      uint64_t v34 = a2;
      _os_log_debug_impl(&dword_18AF10000, v26, OS_LOG_TYPE_DEBUG, "Overriding existing XPC activity criterion %{public}@ for key %{public}s", (uint8_t *)&v31, 0x16u);
    }
  }
  xpc_object_t v9 = (void *)a1[4];
  xpc_object_t v10 = xpc_copy(v6);
  xpc_dictionary_set_value(v9, a2, v10);

  id v11 = (void *)a1[6];
  xpc_object_t v12 = xpc_copy(v6);
  xpc_dictionary_set_value(v11, a2, v12);

  uint64_t v13 = (void *)xpc_copy_short_description();
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v14 = (void *)ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = (void *)a1[5];
    uint64_t v17 = v14;
    uint64_t v21 = objc_msgSend_identifier(v16, v18, v19, v20);
    __int16 v24 = objc_msgSend_stringWithUTF8String_(NSString, v22, (uint64_t)v13, v23);
    int v31 = 138543874;
    uint64_t v32 = v21;
    __int16 v33 = 2082;
    uint64_t v34 = a2;
    __int16 v35 = 2112;
    uint64_t v36 = v24;
    _os_log_debug_impl(&dword_18AF10000, v17, OS_LOG_TYPE_DEBUG, "Adding additional XPC activity criterion for %{public}@: %{public}s %@", (uint8_t *)&v31, 0x20u);
  }
  free(v13);
  return 1;
}

void sub_18B07065C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, *(void *)(a1 + 40), v7);

  if (v8)
  {
    xpc_object_t v9 = objc_opt_class();
    uint64_t v12 = objc_msgSend_activityFromXPCActivity_(v9, v10, (uint64_t)v8, v11);
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v12;
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    double v15 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      int v17 = 138543362;
      uint64_t v18 = v16;
      _os_log_debug_impl(&dword_18AF10000, v15, OS_LOG_TYPE_DEBUG, "Couldn't find XPC activity for CK activity %{public}@", (uint8_t *)&v17, 0xCu);
    }
  }
}

void sub_18B070874(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, *(void *)(a1 + 40), v7);
  uint64_t v8 = (_xpc_activity_s *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    xpc_object_t v9 = xpc_activity_copy_criteria(v8);
    xpc_object_t v10 = v9;
    if (v9)
    {
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = xpc_dictionary_get_int64(v9, "ck_scheduler_priority");
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v13 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        int v15 = 138543362;
        uint64_t v16 = v14;
        _os_log_impl(&dword_18AF10000, v13, OS_LOG_TYPE_INFO, "No criteria in XPC activity for %{public}@", (uint8_t *)&v15, 0xCu);
      }
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v11 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      int v15 = 138543362;
      uint64_t v16 = v12;
      _os_log_impl(&dword_18AF10000, v11, OS_LOG_TYPE_INFO, "Couldn't find XPC activity for CK activity %{public}@", (uint8_t *)&v15, 0xCu);
    }
  }
}

uint64_t sub_18B070AF4()
{
  if (!qword_1E912FDD0) {
    qword_1E912FDD0 = _sl_dlopen();
  }
  return qword_1E912FDD0;
}

uint64_t sub_18B070BC4()
{
  uint64_t result = _sl_dlopen();
  qword_1E912FDD0 = result;
  return result;
}

Class sub_18B070C38(uint64_t a1)
{
  sub_18B070AF4();
  Class result = objc_getClass("UIApplication");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB279B88 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B070C88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_18B070CD8(a1, a2, a3, a4);
  Class result = dlsym(v5, "_DASOverrideRateLimitingKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB2799F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B070CD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  if (!qword_1EB2799F8)
  {
    v11[1] = (void *)MEMORY[0x1E4F143A8];
    v11[2] = (void *)3221225472;
    v11[3] = sub_18B070E2C;
    v11[4] = &unk_1E545FFA8;
    v11[5] = v11;
    long long v12 = xmmword_1E54628F0;
    uint64_t v13 = 0;
    qword_1EB2799F8 = _sl_dlopen();
  }
  uint64_t v4 = (void *)qword_1EB2799F8;
  if (!qword_1EB2799F8)
  {
    uint64_t v4 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
    xpc_object_t v9 = objc_msgSend_stringWithUTF8String_(NSString, v7, (uint64_t)"void *DuetActivitySchedulerLibrary(void)", v8);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v10, (uint64_t)v9, @"CKScheduler.m", 27, @"%s", v11[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = v11[0];
  if (v11[0]) {
LABEL_7:
  }
    free(v5);
  return v4;
}

uint64_t sub_18B070E2C()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2799F8 = result;
  return result;
}

void *sub_18B070EA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_18B070CD8(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "_DASRateLimitConfigurationKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB279B90 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B070EF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_18B070CD8(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "_DASCKRateLimitConfigurationName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB279B98 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B0710E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0712C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0712DC(uint64_t a1)
{
  xpc_activity_state_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B071468(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B071648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B071660(uint64_t a1)
{
  xpc_activity_state_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B072360(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E912FDD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18B0723F0()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v13[0] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v0 = qword_1E912FDD8;
  uint64_t v19 = qword_1E912FDD8;
  if (!qword_1E912FDD8)
  {
    v13[1] = (void *)MEMORY[0x1E4F143A8];
    void v13[2] = (void *)3221225472;
    v13[3] = sub_18B072360;
    v13[4] = &unk_1E5462930;
    uint64_t v14 = &v16;
    int v15 = v13;
    long long v20 = xmmword_1E5462908;
    long long v21 = *(_OWORD *)&off_1E5462918;
    v17[3] = _sl_dlopen();
    qword_1E912FDD8 = *(void *)(v14[1] + 24);
    uint64_t v0 = v17[3];
  }
  _Block_object_dispose(&v16, 8);
  if (!v0)
  {
    uint64_t v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v1, v2, v3);
    uint64_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"void *CloudKitTestingLibrary(void)", v7);
    uint64_t v9 = (void *)v5;
    xpc_object_t v10 = (void *)v5;
    uint64_t v11 = (void *)v8;
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v9, v12, v8, @"CKTestFrameworkLinking.m", 11, @"%s", v13[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = v13[0];
  if (v13[0]) {
LABEL_7:
  }
    free(v4);
}

void sub_18B07258C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B0725AC()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E912FEE0;
  uint64_t v7 = qword_1E912FEE0;
  if (!qword_1E912FEE0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_18B072690;
    v3[3] = &unk_1E545FF40;
    v3[4] = &v4;
    sub_18B072690((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18B072678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B072690(uint64_t a1)
{
  sub_18B0723F0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CKTestContainer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1E912FEE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v2, v3, v4);
    uint64_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"Class getCKTestContainerClass(void)_block_invoke", v7);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, @"CKTestFrameworkLinking.m", 13, @"Unable to find class %s", "CKTestContainer");

    __break(1u);
  }
}

id sub_18B072758()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E912FEE8;
  uint64_t v7 = qword_1E912FEE8;
  if (!qword_1E912FEE8)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_18B07283C;
    v3[3] = &unk_1E545FF40;
    v3[4] = &v4;
    sub_18B07283C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18B072824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B07283C(uint64_t a1)
{
  sub_18B0723F0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CKTestDeviceReference");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1E912FEE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v2, v3, v4);
    uint64_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"Class getCKTestDeviceReferenceClass(void)_block_invoke", v7);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, @"CKTestFrameworkLinking.m", 14, @"Unable to find class %s", "CKTestDeviceReference");

    __break(1u);
  }
}

id sub_18B072904()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E912FEF0;
  uint64_t v7 = qword_1E912FEF0;
  if (!qword_1E912FEF0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_18B0729E8;
    v3[3] = &unk_1E545FF40;
    v3[4] = &v4;
    sub_18B0729E8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18B0729D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0729E8(uint64_t a1)
{
  sub_18B0723F0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CKTestServerManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1E912FEF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v2, v3, v4);
    uint64_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"Class getCKTestServerManagerClass(void)_block_invoke", v7);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, @"CKTestFrameworkLinking.m", 15, @"Unable to find class %s", "CKTestServerManager");

    __break(1u);
  }
}

void *sub_18B072DE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B072FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B072FDC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B073168(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B073348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B073360(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B073BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B073BE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  return result;
}

void sub_18B073BF8(uint64_t a1)
{
}

uint64_t sub_18B073C00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = a3;
  uint64_t v8 = objc_msgSend_packagesToDestroy(v3, v5, v6, v7);
  objc_msgSend_addObject_(v8, v9, (uint64_t)v4, v10);

  return 0;
}

uint64_t sub_18B073C54(uint64_t a1, int a2, int a3, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  return 1;
}

void *sub_18B0752A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B075480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B075498(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B075624(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B075804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B07581C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0759A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 528) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B075B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B075BA0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t CKContainerEnvironmentFromString(void *a1, const char *a2)
{
  if (objc_msgSend_compare_options_(a1, a2, @"Production", 1)) {
    return 2;
  }
  else {
    return 1;
  }
}

void sub_18B07786C(uint64_t a1, const char *a2)
{
  v27[37] = *MEMORY[0x1E4F143B8];
  v26[0] = @"com.apple.ActivitySharing";
  v26[1] = @"com.apple.bluetooth";
  v27[0] = &unk_1ED846390;
  v27[1] = &unk_1ED8463A8;
  v26[2] = @"com.apple.clouddocs";
  v26[3] = @"com.apple.test.p01.B.Xaeaeg.com.apple.clouddocs";
  v26[4] = @"com.apple.photos.cloud";
  v26[5] = @"com.apple.test.p01.B.Xaeaeg.com.apple.photos.cloud";
  v27[4] = &unk_1ED8463D8;
  v27[5] = &unk_1ED8463D8;
  v26[6] = @"com.apple.coremotion.coldstorage";
  v26[7] = @"com.apple.health.sync.secure";
  v26[8] = @"com.apple.willow.config";
  v26[9] = @"com.apple.iad-cloudkit";
  v27[8] = &unk_1ED846408;
  v27[9] = &unk_1ED846420;
  v26[10] = @"com.apple.pages.sync";
  v26[11] = @"com.apple.numbers.sync";
  v27[10] = &unk_1ED846438;
  v27[11] = &unk_1ED846450;
  v26[12] = @"com.apple.keynote.sync";
  v26[13] = @"com.apple.journal";
  v26[14] = @"com.apple.textinput.KeyboardServices";
  v26[15] = @"com.apple.security.keychain";
  v27[14] = &unk_1ED846498;
  v27[15] = &unk_1ED8464B0;
  v26[16] = @"com.apple.KeyValueService";
  v26[17] = @"com.apple.largeattachment";
  v27[16] = &unk_1ED8464C8;
  v27[17] = &unk_1ED8464E0;
  v27[12] = &unk_1ED846468;
  v27[13] = &unk_1ED846480;
  v26[18] = @"com.apple.messages.cloud";
  v26[19] = @"com.apple.Avatars";
  v27[18] = &unk_1ED8464F8;
  v27[19] = &unk_1ED846510;
  v26[20] = @"com.apple.moments";
  v26[21] = @"com.apple.callhistory.cloud-storage2";
  v27[20] = &unk_1ED846480;
  v27[21] = &unk_1ED846528;
  v26[22] = @"com.apple.FTMessageStoreService";
  v26[23] = @"com.apple.ProactivePredictionsBackup";
  v27[22] = &unk_1ED846540;
  v27[23] = &unk_1ED846558;
  v26[24] = @"com.apple.reminders";
  v26[25] = @"com.apple.SafariShared.WBSCloudBookmarksStore";
  v27[24] = &unk_1ED846570;
  v27[25] = &unk_1ED846588;
  v27[2] = &unk_1ED8463C0;
  v27[3] = &unk_1ED8463C0;
  v26[26] = @"com.apple.SafariShared.WBSCloudHistoryStore";
  v26[27] = @"com.apple.SafariShared.CloudTabs";
  v27[26] = &unk_1ED8465A0;
  v27[27] = &unk_1ED8465B8;
  v26[28] = @"com.apple.test.p01.B.Xaeaeg.com.apple.SafariShared.CloudTabs";
  v26[29] = @"com.apple.test.p01.B.Xaeaeg.com.apple.freeform";
  v27[28] = &unk_1ED8465B8;
  v27[29] = &unk_1ED8465D0;
  v26[30] = @"com.apple.freeform";
  v26[31] = @"com.apple.sharingd";
  v27[30] = &unk_1ED8465D0;
  v27[31] = &unk_1ED8465E8;
  v27[6] = &unk_1ED8463F0;
  v27[7] = &unk_1ED8463F0;
  v26[32] = @"com.apple.socialgaming.sessions";
  v26[33] = @"com.apple.accessibility.TTYCallHistory";
  v27[32] = &unk_1ED846600;
  v27[33] = &unk_1ED846618;
  v26[34] = @"com.apple.vo2max";
  v26[35] = @"com.apple.test.p01.B.Xaeaeg.com.apple.icloud.events";
  v27[34] = &unk_1ED8463F0;
  v27[35] = &unk_1ED846630;
  v26[36] = @"com.apple.icloud.events";
  v27[36] = &unk_1ED846630;
  uint64_t v2 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v27, (uint64_t)v26, 37);
  uint64_t v3 = (void *)qword_1EB279BA0;
  qword_1EB279BA0 = v2;

  v24[0] = @"com.apple.backup";
  v24[1] = @"com.apple.notes";
  v25[0] = &unk_1ED846648;
  v25[1] = &unk_1ED846660;
  v24[2] = @"com.apple.news";
  v24[3] = @"com.apple.siri";
  v25[2] = &unk_1ED846678;
  v25[3] = &unk_1ED846690;
  v24[4] = @"com.apple.pay";
  v24[5] = @"com.apple.homekit";
  v25[4] = &unk_1ED8466A8;
  v25[5] = &unk_1ED846408;
  uint64_t v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v25, (uint64_t)v24, 6);
  uint64_t v6 = (void *)qword_1EB279BA8;
  qword_1EB279BA8 = v5;

  v22[0] = @"com.apple.clouddocs";
  v22[1] = @"com.apple.test.reminders";
  v23[0] = &unk_1ED8463C0;
  v23[1] = &unk_1ED846570;
  v22[2] = @"com.apple.siri.profile";
  v22[3] = @"com.apple.test.zone_sharing.dugong.zoneish_pcs";
  v23[2] = &unk_1ED8466C0;
  v23[3] = &unk_1ED8466D8;
  void v22[4] = @"com.apple.test.zone_sharing.dugong.record_pcs";
  v23[4] = &unk_1ED8466D8;
  uint64_t v8 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v7, (uint64_t)v23, (uint64_t)v22, 5);
  uint64_t v9 = (void *)qword_1EB279BB0;
  qword_1EB279BB0 = v8;

  uint64_t v12 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v10, @"com.apple.ckcode.ckclient.unittests", v11);
  uint64_t v13 = (void *)qword_1EB279BB8;
  qword_1EB279BB8 = v12;

  uint64_t v16 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], v14, @"com.apple.test.", v15, @"com.apple.cloudkit.unittest.", 0);
  uint64_t v17 = (void *)qword_1EB279BC0;
  qword_1EB279BC0 = v16;

  uint64_t v20 = objc_msgSend_setWithObjects_(MEMORY[0x1E4F1CAD0], v18, @"com.apple.", v19, @"iCloud.com.apple.", 0);
  long long v21 = (void *)qword_1EB279BC8;
  qword_1EB279BC8 = v20;
}

void *sub_18B078128(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B078308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B078320(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B0798F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t CKCodeProto2ProtectedEnvelopeReadFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v7 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v7)) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *v5;
        unint64_t v14 = *(void *)(a2 + v13);
        if (v14 == -1 || v14 >= *(void *)(a2 + *v6)) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)(a2 + *v9) + v14);
        *(void *)(a2 + v13) = v14 + 1;
        v12 |= (unint64_t)(v15 & 0x7F) << v10;
        if ((v15 & 0x80) == 0) {
          goto LABEL_12;
        }
        v10 += 7;
        if (v11++ >= 9)
        {
          unint64_t v12 = 0;
          int v17 = *(unsigned __int8 *)(a2 + *v7);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v7) = 1;
LABEL_12:
      int v17 = *(unsigned __int8 *)(a2 + *v7);
      if (*(unsigned char *)(a2 + *v7)) {
        unint64_t v12 = 0;
      }
LABEL_14:
      uint64_t v18 = v12 & 7;
      if (v17 || v18 == 4) {
        break;
      }
      uint64_t v20 = (const char *)(v12 >> 3);
      if ((v12 >> 3) == 2)
      {
        objc_msgSend_clearOneofValuesForContents((void *)a1, v20, v18, a4);
        *(unsigned char *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 8) = 2;
        uint64_t v27 = objc_alloc_init(CKCodeProto2Any);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (!PBReaderPlaceMark() || !CKCodeProto2AnyReadFrom((uint64_t)v27, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v20 == 1)
      {
        objc_msgSend_clearOneofValuesForContents((void *)a1, v20, v18, a4);
        *(unsigned char *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 8) = 1;
        uint64_t v28 = PBReaderReadData();
        uint64_t v29 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v28;
      }
      else if (v20)
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
      else
      {
        unsigned int v21 = 0;
        while (1)
        {
          uint64_t v22 = *v5;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v6)) {
            break;
          }
          unint64_t v24 = v23 + 1;
          int v25 = *(char *)(*(void *)(a2 + *v9) + v23);
          *(void *)(a2 + v22) = v24;
          if (v25 < 0 && v21++ <= 8) {
            continue;
          }
          goto LABEL_35;
        }
        *(unsigned char *)(a2 + *v7) = 1;
      }
LABEL_35:
      ;
    }
    while (*(void *)(a2 + *v5) < *(void *)(a2 + *v6));
  }
  return *(unsigned char *)(a2 + *v7) == 0;
}

id sub_18B07A4D8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_expressionType(a1, a2, a3, a4);
  if (v5 <= 2)
  {
    if (!v5)
    {
      uint64_t v9 = objc_msgSend_constantValue(a1, v6, v7, v8);
      goto LABEL_18;
    }
    if (v5 == 2)
    {
      uint64_t v9 = objc_msgSend_variable(a1, v6, v7, v8);
LABEL_18:
      int v25 = (void *)v9;
      goto LABEL_19;
    }
LABEL_22:
    uint64_t v27 = [CKException alloc];
    uint64_t v28 = *MEMORY[0x1E4F1C3C8];
    uint64_t v29 = (objc_class *)objc_opt_class();
    uint64_t v30 = NSStringFromClass(v29);
    id v32 = (id)objc_msgSend_initWithName_format_(v27, v31, v28, @"Unexpected expression: %@", v30);

    objc_exception_throw(v32);
  }
  if (v5 == 3)
  {
    uint64_t v9 = objc_msgSend_keyPath(a1, v6, v7, v8);
    goto LABEL_18;
  }
  if (v5 != 14) {
    goto LABEL_22;
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  char v10 = objc_msgSend_collection(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v33, (uint64_t)v37, 16);
  if (v12)
  {
    uint64_t v16 = v12;
    uint64_t v17 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v34 != v17) {
          objc_enumerationMutation(v10);
        }
        if (objc_msgSend_expressionType(*(void **)(*((void *)&v33 + 1) + 8 * i), v13, v14, v15)) {
          goto LABEL_22;
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v33, (uint64_t)v37, 16);
    }
    while (v16);
  }

  uint64_t v22 = objc_msgSend_collection(a1, v19, v20, v21);
  int v25 = objc_msgSend_valueForKeyPath_(v22, v23, @"constantValue", v24);

LABEL_19:

  return v25;
}

uint64_t sub_18B07B22C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    char isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

void sub_18B07C3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18B07C3D4(void *a1, const char *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v7 + 40);
  char v8 = objc_msgSend_checkElementType_error_(v6, a2, a3, (uint64_t)&obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v8;
  if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    *a4 = 1;
  }
}

void sub_18B07CB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B07CB88(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v24 = a3;
  unint64_t v9 = objc_msgSend_count(v24, v6, v7, v8);
  if (v9 >= objc_msgSend_modifierLimitForInstallationIdentifierCheck(*(void **)(a1 + 32), v10, v11, v12))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  if ((unint64_t)objc_msgSend_count(v24, v13, v14, v15) < 0x1F)
  {
    if ((unint64_t)objc_msgSend_count(v24, v16, v17, v18) < 0xB)
    {
      if ((unint64_t)objc_msgSend_count(v24, v21, v22, v23) < 6) {
        goto LABEL_10;
      }
      uint64_t v19 = @"CKMultiValueMergeableDeltaRegisterInstallationIdentifierLowLimitExceededFault";
      uint64_t v20 = &unk_1ED7EFC98;
    }
    else
    {
      uint64_t v19 = @"CKMultiValueMergeableDeltaRegisterInstallationIdentifierMediumLimitExceededFault";
      uint64_t v20 = &unk_1ED7EFA98;
    }
  }
  else
  {
    uint64_t v19 = @"CKMultiValueMergeableDeltaRegisterInstallationIdentifierHighLimitExceededFault";
    uint64_t v20 = &unk_1ED7EF098;
  }
  CKOncePerBoot(v19, v20);
LABEL_10:
}

void sub_18B07CC70()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v0 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    int v1 = 134217984;
    uint64_t v2 = 30;
    _os_log_fault_impl(&dword_18AF10000, v0, OS_LOG_TYPE_FAULT, "Unique installation identifier count in CKMultiValueMergeableDeltaRegister exceeded high limit of %lu", (uint8_t *)&v1, 0xCu);
  }
}

void sub_18B07CD48()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v0 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    int v1 = 134217984;
    uint64_t v2 = 10;
    _os_log_fault_impl(&dword_18AF10000, v0, OS_LOG_TYPE_FAULT, "Unique installation identifier count in CKMultiValueMergeableDeltaRegister exceeded medium limit of %lu", (uint8_t *)&v1, 0xCu);
  }
}

void sub_18B07CE20()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v0 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    int v1 = 134217984;
    uint64_t v2 = 5;
    _os_log_fault_impl(&dword_18AF10000, v0, OS_LOG_TYPE_FAULT, "Unique installation identifier count in CKMultiValueMergeableDeltaRegister exceeded low limit of %lu", (uint8_t *)&v1, 0xCu);
  }
}

void sub_18B07CF9C(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v10 = 0;
  char v3 = objc_msgSend_checkElementType_error_(v2, a2, (uint64_t)a2, (uint64_t)&v10);
  id v4 = v10;
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v6 = *MEMORY[0x1E4F1C3C8];
    uint64_t v7 = (objc_class *)objc_opt_class();
    uint64_t v8 = NSStringFromClass(v7);
    objc_msgSend_raise_format_(v5, v9, v6, @"Failed to set contents on %@: %@", v8, v4);
  }
}

void sub_18B07D738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_18B07D770(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  if (a3 < a3 + a4)
  {
    while (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) < 2uLL)
    {
      uint64_t v13 = [CKDistributedTimestamp alloc];
      uint64_t v15 = objc_msgSend_initWithSiteIdentifierObject_clockValue_(v13, v14, (uint64_t)v12, a3);
      uint64_t v19 = objc_msgSend_copy(*(void **)(a1 + 32), v16, v17, v18);
      objc_msgSend_setMetadata_(v19, v20, 0, v21);
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v22, (uint64_t)v19, (uint64_t)v15);
      ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

      ++a3;
      if (!--a4) {
        goto LABEL_10;
      }
    }
    uint64_t v23 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, @"CKErrorDomain", 1, @"Multi-value register delta has more than one CKDistributedTimestampAtomStatePresent timestamp");
    uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8);
    int v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v23;

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v26 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      int v28 = 138412290;
      uint64_t v29 = v27;
      _os_log_fault_impl(&dword_18AF10000, v26, OS_LOG_TYPE_FAULT, "Multi-value register delta %@ has more than one CKDistributedTimestampAtomStatePresent timestamp", (uint8_t *)&v28, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    *a7 = 1;
  }
LABEL_10:
}

void sub_18B07DF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18B07DF4C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (objc_msgSend_includesTimestamp_(*(void **)(a1 + 32), v9, (uint64_t)v7, v10))
  {
    id v12 = *(void **)(a1 + 40);
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    id obj = *(id *)(v13 + 40);
    char v14 = objc_msgSend_checkElementType_error_(v12, v11, (uint64_t)v8, (uint64_t)&obj);
    objc_storeStrong((id *)(v13 + 40), obj);
    if (v14)
    {
      uint64_t v18 = objc_msgSend_mutableCopy(*(void **)(a1 + 48), v15, v16, v17);
      uint64_t v19 = (void *)MEMORY[0x1E4F28D60];
      uint64_t v23 = objc_msgSend_clockValue(v7, v20, v21, v22);
      uint64_t v26 = objc_msgSend_indexSetWithIndex_(v19, v24, v23, v25);
      uint64_t v30 = objc_msgSend_siteIdentifierObject(v7, v27, v28, v29);
      objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v18, v31, (uint64_t)v26, 1, v30);

      id v32 = [CKMergeableDeltaMetadata alloc];
      long long v33 = [CKMergeableDeltaVectors alloc];
      uint64_t v37 = objc_msgSend_vectors(*(void **)(a1 + 56), v34, v35, v36);
      xpc_object_t v41 = objc_msgSend_previous(v37, v38, v39, v40);
      uint64_t v45 = objc_msgSend_vectors(*(void **)(a1 + 56), v42, v43, v44);
      uint64_t v49 = objc_msgSend_removals(v45, v46, v47, v48);
      uint64_t v51 = objc_msgSend_initWithPreviousVector_contentsVector_removalsVector_dependenciesVector_(v33, v50, (uint64_t)v41, (uint64_t)v18, v49, *(void *)(a1 + 64));
      uint64_t v54 = objc_msgSend_initWithVectors_(v32, v52, (uint64_t)v51, v53);

      uint64_t v58 = objc_msgSend_copy(v8, v55, v56, v57);
      objc_msgSend_setMetadata_(v58, v59, (uint64_t)v54, v60);
      objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v61, (uint64_t)v58, v62);
    }
    else
    {
      uint64_t v63 = *(void *)(*(void *)(a1 + 80) + 8);
      uint64_t v64 = *(void **)(v63 + 40);
      *(void *)(v63 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;

      *a4 = 1;
    }
  }
}

void sub_18B07E25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B07E274(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5 = 0;
  uint64_t result = objc_msgSend_contentSize_error_(a3, a2, (uint64_t)&v5, 0);
  if (result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v5;
  }
  return result;
}

void *CKSQLiteJournalSuffixes()
{
  return &unk_1ED845EC8;
}

id sub_18B07EDF0(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    char v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v8 = objc_msgSend_path(v3, v5, v6, v7);
    id v12 = objc_msgSend_CKSanitizedPath(v8, v9, v10, v11);
    int v16 = 138543362;
    uint64_t v17 = v12;
    _os_log_impl(&dword_18AF10000, v4, OS_LOG_TYPE_INFO, "Vacuuming database at %{public}@", (uint8_t *)&v16, 0xCu);
  }
  id result = (id)sqlite3_exec(*(sqlite3 **)(*(void *)(a1 + 32) + 136), "VACUUM", 0, 0, 0);
  if (result) {
    return (id)objc_msgSend_handleDatabaseError_(*(void **)(a1 + 32), v14, @"Vacuum failed", v15);
  }
  return result;
}

uint64_t sub_18B07F200()
{
  return 1;
}

void *sub_18B07F208(uint64_t a1, uint64_t a2)
{
  id result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = result;
  return result;
}

void sub_18B07F234(uint64_t a1)
{
}

void sub_18B07F504(uint64_t a1, void *a2, void *a3)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = a3;
  id v8 = objc_msgSend_select_from_where_bindings_(*(void **)(a1 + 32), v7, (uint64_t)&unk_1ED845EE0, @"sqlite_master", @"type = ? AND name = ?", &unk_1ED845EF8);
  if (!objc_msgSend_count(v8, v9, v10, v11)) {
    objc_msgSend_executeSQL_(v5, v12, @"create table if not exists Properties (\n    key    text primary key,\n    value  text\n);\n",
  }
      v14);
  uint64_t v15 = objc_msgSend_dbUserVersion(*(void **)(a1 + 32), v12, v13, v14);
  if ((v6[2](v6) & 1) == 0)
  {
    uint64_t v21 = objc_msgSend_propertyForKey_(*(void **)(a1 + 32), v16, @"SchemaVersion", v17);
    if (v21)
    {
      uint64_t v22 = objc_msgSend_schemaVersion(*(void **)(a1 + 32), v18, v19, v20);
      if (objc_msgSend_isEqualToString_(v21, v23, (uint64_t)v22, v24))
      {
        if (!objc_msgSend_userVersion(*(void **)(a1 + 32), v25, v26, v27))
        {

LABEL_34:
          goto LABEL_35;
        }
        int v31 = objc_msgSend_userVersion(*(void **)(a1 + 32), v28, v29, v30);

        if (v15 == v31) {
          goto LABEL_34;
        }
      }
      else
      {
      }
      uint64_t v50 = objc_msgSend_delegate(*(void **)(a1 + 32), v32, v33, v34);
      if (v50)
      {
        uint64_t v54 = (void *)v50;
        id v55 = objc_msgSend_delegate(*(void **)(a1 + 32), v51, v52, v53);
        int v57 = objc_msgSend_migrateDatabase_fromVersion_(v55, v56, *(void *)(a1 + 32), (uint64_t)v15);

        if (v57)
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v58 = (void *)ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
          {
            uint64_t v59 = *(void **)(a1 + 32);
            uint64_t v60 = (void *)v59[10];
            loga = v58;
            objc_msgSend_CKSanitizedPath(v60, v61, v62, v63);
            v140 = (void **)objc_claimAutoreleasedReturnValue();
            unint64_t v67 = objc_msgSend_schemaVersion(*(void **)(a1 + 32), v64, v65, v66);
            int v71 = objc_msgSend_userVersion(*(void **)(a1 + 32), v68, v69, v70);
            *(_DWORD *)buf = 134219266;
            v146 = v59;
            __int16 v147 = 2114;
            v148 = v140;
            __int16 v149 = 2114;
            v150 = v21;
            __int16 v151 = 2114;
            v152 = v67;
            __int16 v153 = 2048;
            uint64_t v154 = (int)v15;
            __int16 v155 = 2048;
            uint64_t v156 = v71;
            _os_log_impl(&dword_18AF10000, loga, OS_LOG_TYPE_INFO, "Re-creating db (%p) at %{public}@ because the schema-version (%{public}@/%{public}@) or the user-version (0x%lx/0x%lx) changed", buf, 0x3Eu);
          }
          *(unsigned char *)(*(void *)(a1 + 32) + 66) = 1;
        }
      }
      if (*(unsigned char *)(*(void *)(a1 + 32) + 66)) {
        goto LABEL_29;
      }
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v72 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v76 = *(void **)(a1 + 32);
        uint64_t v77 = (void *)v76[10];
        logb = v72;
        objc_msgSend_CKSanitizedPath(v77, v78, v79, v80);
        v141 = (void **)objc_claimAutoreleasedReturnValue();
        uint64_t v84 = objc_msgSend_schemaVersion(*(void **)(a1 + 32), v81, v82, v83);
        int v88 = objc_msgSend_userVersion(*(void **)(a1 + 32), v85, v86, v87);
        *(_DWORD *)buf = 134219266;
        v146 = v76;
        __int16 v147 = 2114;
        v148 = v141;
        __int16 v149 = 2114;
        v150 = v21;
        __int16 v151 = 2114;
        v152 = v84;
        __int16 v153 = 2048;
        uint64_t v154 = (int)v15;
        __int16 v155 = 2048;
        uint64_t v156 = v88;
        _os_log_impl(&dword_18AF10000, logb, OS_LOG_TYPE_INFO, "Re-creating db (%p) at %{public}@ because the schema-version (%{public}@/%{public}@) or the user-version (0x%lx/0x%lx) changed", buf, 0x3Eu);
      }
      objc_msgSend__dropAllTables(*(void **)(a1 + 32), v73, v74, v75);
      *(unsigned char *)(*(void *)(a1 + 32) + 66) = 1;
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v35 = (void *)ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v36 = *(void **)(a1 + 32);
        uint64_t v37 = (void *)v36[10];
        log = v35;
        objc_msgSend_CKSanitizedPath(v37, v38, v39, v40);
        xpc_object_t v41 = (void **)objc_claimAutoreleasedReturnValue();
        uint64_t v45 = objc_msgSend_schemaVersion(*(void **)(a1 + 32), v42, v43, v44);
        int v49 = objc_msgSend_userVersion(*(void **)(a1 + 32), v46, v47, v48);
        *(_DWORD *)buf = 134218754;
        v146 = v36;
        __int16 v147 = 2114;
        v148 = v41;
        __int16 v149 = 2114;
        v150 = v45;
        __int16 v151 = 2048;
        v152 = (void *)v49;
        _os_log_debug_impl(&dword_18AF10000, log, OS_LOG_TYPE_DEBUG, "Creating a new db (%p) at %{public}@ with schema-version:%{public}@ and user-version:0x%lx", buf, 0x2Au);
      }
    }

    if (v6[2](v6))
    {
LABEL_30:
      if ((v6[2](v6) & 1) == 0)
      {
        v116 = *(void **)(a1 + 32);
        id v117 = objc_msgSend_schemaVersion(v116, v113, v114, v115);
        objc_msgSend_setProperty_forKey_(v116, v118, (uint64_t)v117, @"SchemaVersion");

        if (objc_msgSend_userVersion(*(void **)(a1 + 32), v119, v120, v121))
        {
          uint64_t v15 = *(void **)(a1 + 32);
          int v125 = objc_msgSend_userVersion(v15, v122, v123, v124);
          objc_msgSend_executeSQL_(v15, v126, @"pragma user_version = %ld", v127, v125);
          LODWORD(v15) = objc_msgSend_userVersion(*(void **)(a1 + 32), v128, v129, v130);
        }
      }
      goto LABEL_35;
    }
    objc_msgSend_willCreateDatabase(*(void **)(a1 + 32), v89, v90, v91);
    objc_msgSend_executeSQL_(*(void **)(a1 + 32), v92, @"create table if not exists Properties (\n    key    text primary key,\n    value  text\n);\n",
      v93);
    uint64_t v94 = *(void **)(a1 + 32);
    v98 = objc_msgSend_schema(v94, v95, v96, v97);
    objc_msgSend_executeSQL_(v94, v99, @"%@", v100, v98);

    uint64_t v101 = NSString;
    id v105 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v102, v103, v104);
    objc_msgSend_timeIntervalSinceReferenceDate(v105, v106, v107, v108);
    uint64_t v21 = objc_msgSend_stringWithFormat_(v101, v109, @"%f", v110, v111);

    objc_msgSend_setProperty_forKey_(*(void **)(a1 + 32), v112, (uint64_t)v21, @"Created");
LABEL_29:

    goto LABEL_30;
  }
LABEL_35:
  if ((v6[2](v6) & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 32) + 144) = 1;
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    v131 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      v132 = v131;
      v133 = (objc_class *)objc_opt_class();
      v134 = NSStringFromClass(v133);
      v135 = *(void ***)(a1 + 32);
      v139 = objc_msgSend_CKSanitizedPath(v135[10], v136, v137, v138);
      *(_DWORD *)buf = 138544130;
      v146 = v134;
      __int16 v147 = 2048;
      v148 = v135;
      __int16 v149 = 2114;
      v150 = v139;
      __int16 v151 = 2048;
      v152 = (void *)(int)v15;
      _os_log_impl(&dword_18AF10000, v132, OS_LOG_TYPE_INFO, "Opened db %{public}@<%p> at %{public}@ (user-version:0x%lx)", buf, 0x2Au);
    }
  }
}

uint64_t sub_18B07FC20()
{
  return 1;
}

void sub_18B07FD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B07FD38(uint64_t *a1)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v5 = *(id *)(a1[4] + 80);
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = v6[18];
  if (v7)
  {
    if (!v6[17])
    {
      uint64_t v86 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v2, v3, v4);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v86, v87, a1[6], a1[4], @"CKSQLite.m", 423, @"Missing handle for open cache db");

      uint64_t v6 = (void *)a1[4];
      uint64_t v7 = v6[18];
    }
    id v8 = 0;
    v6[18] = v7 + 1;
    goto LABEL_14;
  }
  if (objc_msgSend_invalid(v6, v2, v3, v4))
  {
    id v12 = (objc_class *)objc_opt_class();
    uint64_t v13 = NSStringFromClass(v12);
    uint64_t v15 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v14, @"CKErrorDomain", 1, @"Cannot reopen invalidated %@ instance", v13);
    uint64_t v16 = *(void *)(a1[5] + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v15;

    id v8 = 0;
LABEL_14:

    return;
  }
  id v8 = objc_msgSend_stringByDeletingLastPathComponent(*(void **)(a1[4] + 80), v9, v10, v11);
  if (objc_msgSend_isCorrupt((void *)a1[4], v18, v19, v20))
  {
    uint64_t v24 = objc_msgSend_CKSanitizedPath(v8, v21, v22, v23);
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v25, @"CKErrorDomain", 1, @"Database is corrupt: %@", v24);
    uint64_t v43 = LABEL_13:;
    uint64_t v44 = *(void *)(a1[5] + 8);
    uint64_t v45 = *(void **)(v44 + 40);
    *(void *)(v44 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v43;

    goto LABEL_14;
  }
  uint64_t v26 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v26 + 40);
  char v27 = CKCreateDirectoryAtPathWithAttributes(v8, 0, &obj);
  objc_storeStrong((id *)(v26 + 40), obj);
  if ((v27 & 1) == 0)
  {
    uint64_t v24 = objc_msgSend_CKSanitizedPath(v8, v28, v29, v30);
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v42, @"CKErrorDomain", 1, @"Error creating db dir at %@: %@", v24, *(void *)(*(void *)(a1[5] + 8) + 40));
    goto LABEL_13;
  }
  int v31 = (const char *)objc_msgSend_fileSystemRepresentation(v5, v28, v29, v30);
  uint64_t v32 = sqlite3_open_v2(v31, (sqlite3 **)(a1[4] + 136), 3145734, 0);
  if (v32)
  {
    uint64_t v36 = v32;
    uint64_t v37 = objc_msgSend_CKSanitizedPath(*(void **)(a1[4] + 80), v33, v34, v35);
    uint64_t v39 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v38, @"CKErrorDomain", 1, @"Error opening db at %@, rc=%d(0x%x)", v37, v36, v36);
    uint64_t v40 = *(void *)(a1[5] + 8);
    xpc_object_t v41 = *(void **)(v40 + 40);
    *(void *)(v40 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v39;

    goto LABEL_14;
  }
  sqlite3_extended_result_codes(*(sqlite3 **)(a1[4] + 136), 1);
  if (!*(void *)(*(void *)(a1[5] + 8) + 40) && sqlite3_busy_timeout(*(sqlite3 **)(a1[4] + 136), 300000))
  {
    uint64_t v49 = objc_msgSend_errorForSQLite_message_(CKPrettyError, v46, *(void *)(a1[4] + 136), @"Error setting the db busy timeout");
    uint64_t v50 = *(void *)(a1[5] + 8);
    uint64_t v51 = *(void **)(v50 + 40);
    *(void *)(v50 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v49;
  }
  if (!*(void *)(*(void *)(a1[5] + 8) + 40)
    && sqlite3_exec(*(sqlite3 **)(a1[4] + 136), "pragma journal_mode = WAL", 0, 0, 0))
  {
    uint64_t v52 = objc_msgSend_errorForSQLite_message_(CKPrettyError, v46, *(void *)(a1[4] + 136), @"Error setting pragma journal_mode = WAL");
    uint64_t v53 = *(void *)(a1[5] + 8);
    uint64_t v54 = *(void **)(v53 + 40);
    *(void *)(v53 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v52;
  }
  unint64_t v55 = objc_msgSend_synchronousMode((void *)a1[4], v46, v47, v48);
  if (v55 < 3)
  {
    if (!*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      uint64_t v59 = off_1E5462FE8[v55];
      if (sqlite3_exec(*(sqlite3 **)(a1[4] + 136), v59, 0, 0, 0))
      {
        uint64_t v60 = objc_msgSend_errorForSQLite_message_(CKPrettyError, v56, *(void *)(a1[4] + 136), @"Error setting %s", v59);
        uint64_t v61 = *(void *)(a1[5] + 8);
        uint64_t v62 = *(void **)(v61 + 40);
        *(void *)(v61 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v60;
      }
    }
    if (!*(void *)(*(void *)(a1[5] + 8) + 40)
      && sqlite3_exec(*(sqlite3 **)(a1[4] + 136), "pragma auto_vacuum = FULL", 0, 0, 0))
    {
      uint64_t v63 = objc_msgSend_errorForSQLite_message_(CKPrettyError, v56, *(void *)(a1[4] + 136), @"Error setting pragma auto_vacuum = FULL");
      uint64_t v64 = *(void *)(a1[5] + 8);
      uint64_t v65 = *(void **)(v64 + 40);
      *(void *)(v64 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v63;
    }
    if (!*(void *)(*(void *)(a1[5] + 8) + 40)
      && sqlite3_exec(*(sqlite3 **)(a1[4] + 136), "pragma foreign_keys = 1", 0, 0, 0))
    {
      uint64_t v66 = objc_msgSend_errorForSQLite_message_(CKPrettyError, v56, *(void *)(a1[4] + 136), @"Error setting pragma foreign_keys = 1");
      uint64_t v67 = *(void *)(a1[5] + 8);
      uint64_t v68 = *(void **)(v67 + 40);
      *(void *)(v67 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v66;
    }
    if (*(void *)(*(void *)(a1[5] + 8) + 40) {
      || (objc_msgSend__prepareDatabase((void *)a1[4], v56, v57, v58),
    }
          uint64_t v69 = objc_claimAutoreleasedReturnValue(),
          uint64_t v70 = *(void *)(a1[5] + 8),
          int v71 = *(void **)(v70 + 40),
          *(void *)(v70 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v69,
          v71,
          *(void *)(*(void *)(a1[5] + 8) + 40)))
    {
      objc_msgSend__forceClosed_locked((void *)a1[4], v56, v57, v58);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v72 = (void *)ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
      {
        uint64_t v77 = v72;
        uint64_t v78 = (objc_class *)objc_opt_class();
        uint64_t v79 = NSStringFromClass(v78);
        uint64_t v80 = a1[4];
        uint64_t v84 = objc_msgSend_CKSanitizedPath(*(void **)(v80 + 80), v81, v82, v83);
        uint64_t v85 = *(void *)(*(void *)(a1[5] + 8) + 40);
        *(_DWORD *)buf = 138413058;
        uint64_t v90 = v79;
        __int16 v91 = 2048;
        uint64_t v92 = v80;
        __int16 v93 = 2112;
        uint64_t v94 = v84;
        __int16 v95 = 2112;
        uint64_t v96 = v85;
        _os_log_error_impl(&dword_18AF10000, v77, OS_LOG_TYPE_ERROR, "Failed to open db %@<%p> at %@. Error: %@", buf, 0x2Au);
      }
    }
    if (objc_msgSend_shouldVacuum((void *)a1[4], v56, v57, v58)
      && !*(void *)(*(void *)(a1[5] + 8) + 40)
      && _sqlite3_maintain_load_factor())
    {
      uint64_t v75 = objc_msgSend_sqlErrorWithMessage_((void *)a1[4], v73, @"_sqlite3_maintain_load_factor failed", v74);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v76 = ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543362;
        uint64_t v90 = v75;
        _os_log_fault_impl(&dword_18AF10000, v76, OS_LOG_TYPE_FAULT, "Failed to enable automatic incremental vacuum: %{public}@", buf, 0xCu);
      }
    }
    goto LABEL_14;
  }
  __break(1u);
}

void sub_18B080768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B080780(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(a1 + 32) + 136))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v2 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void **)(*(void *)(a1 + 32) + 80);
      uint64_t v18 = v2;
      uint64_t v22 = objc_msgSend_CKSanitizedPath(v17, v19, v20, v21);
      *(_DWORD *)buf = 138543362;
      uint64_t v29 = v22;
      _os_log_debug_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEBUG, "Removing db at %{public}@", buf, 0xCu);
    }
    uint64_t v6 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v3, v4, v5);
    objc_msgSend_removeItemAtPath_error_(v6, v7, *(void *)(*(void *)(a1 + 32) + 80), 0);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1ED845EC8, v8, (uint64_t)&v23, (uint64_t)v27, 16);
    if (v9)
    {
      uint64_t v12 = v9;
      uint64_t v13 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(&unk_1ED845EC8);
          }
          uint64_t v15 = objc_msgSend_stringByAppendingString_(*(void **)(*(void *)(a1 + 32) + 80), v10, *(void *)(*((void *)&v23 + 1) + 8 * i), v11);
          objc_msgSend_removeItemAtPath_error_(v6, v16, (uint64_t)v15, 0);
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1ED845EC8, v10, (uint64_t)&v23, (uint64_t)v27, 16);
      }
      while (v12);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

uint64_t sub_18B080A10(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  if ((a1 & 1) == 0) {
    goto LABEL_5;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v7 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 138412546;
    id v11 = v6;
    __int16 v12 = 2080;
    uint64_t v13 = a4;
    _os_log_debug_impl(&dword_18AF10000, v7, OS_LOG_TYPE_DEBUG, "%@ sql stmt:'%s'", (uint8_t *)&v10, 0x16u);
    if ((a1 & 8) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_5:
    if ((a1 & 8) == 0) {
      goto LABEL_10;
    }
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v8 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 138412290;
    id v11 = v6;
    _os_log_debug_impl(&dword_18AF10000, v8, OS_LOG_TYPE_DEBUG, "%@ sql close", (uint8_t *)&v10, 0xCu);
  }
LABEL_10:

  return 0;
}

void sub_18B080E3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18B080E54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_18B080EF8;
  v9[3] = &unk_1E5462CD0;
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v5;
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v8, @"select name from sqlite_master where type = 'table'", (uint64_t)v9);
}

void sub_18B080EF8(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))() & 1) == 0)
  {
    do
    {
      if (!sub_18AF27740((uint64_t)v8)) {
        break;
      }
      id v5 = sub_18AF28F0C(v8, 0, v3, v4);
      objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v6, (uint64_t)v5, v7);
    }
    while (!(*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))());
  }
}

uint64_t sub_18B080F9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;

  return 1;
}

void sub_18B081044(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v7 = objc_msgSend_allTableNames(*(void **)(a1 + 32), v4, v5, v6);
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v15, (uint64_t)v19, 16);
  if (v9)
  {
    uint64_t v12 = v9;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend_executeSQL_(v3, v10, @"drop table %@", v11, *(void *)(*((void *)&v15 + 1) + 8 * v14++));
      }
      while (v12 != v14);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v15, (uint64_t)v19, 16);
    }
    while (v12);
  }
}

uint64_t sub_18B081160()
{
  return 4;
}

void sub_18B0812C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0812E0(uint64_t a1, void *a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_18B08137C;
  v7[3] = &unk_1E5462D48;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = v4;
  uint64_t v9 = v5;
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v6, @"select value from Properties where key = ?", (uint64_t)v7);
}

void sub_18B08137C(uint64_t a1, void *a2)
{
  id v9 = a2;
  objc_msgSend_bindText_atIndex_(v9, v3, *(void *)(a1 + 32), 0);
  if (sub_18AF27740((uint64_t)v9))
  {
    uint64_t v6 = sub_18AF28F0C((sqlite3_stmt *)v9, 0, v4, v5);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v6;
  }
}

void sub_18B081520(uint64_t a1, void *a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_18B0815CC;
  v5[3] = &unk_1E5462D98;
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v4, @"insert or replace into Properties (key, value) values (?,?)", (uint64_t)v5);
}

void sub_18B0815CC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = a2;
  objc_msgSend_bindText_atIndex_(v6, v4, v3, 0);
  objc_msgSend_bindText_atIndex_(v6, v5, *(void *)(a1 + 40), 1);
  sub_18AF27740((uint64_t)v6);
}

void sub_18B081858(uint64_t a1, void *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_18B0818EC;
  v4[3] = &unk_1E5462DE8;
  id v5 = *(id *)(a1 + 32);
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v3, @"delete from Properties where key = ?", (uint64_t)v4);
}

void sub_18B0818EC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v4 = a2;
  objc_msgSend_bindText_atIndex_(v4, v3, v2, 0);
  sub_18AF27740((uint64_t)v4);
}

void sub_18B081B68(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v7 = objc_msgSend_stringWithFormat_(NSString, v5, @"pragma table_info(%@)", v6, *(void *)(a1 + 32));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_18B081C48;
  v11[3] = &unk_1E5462E38;
  id v13 = v4;
  id v8 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  id v9 = v4;
  objc_msgSend_usingStatementForSQL_performBlock_(v8, v10, (uint64_t)v7, (uint64_t)v11);
}

void sub_18B081C48(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))() & 1) == 0)
  {
    do
    {
      if (!sub_18AF27740((uint64_t)v9)) {
        break;
      }
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = sub_18AF28F0C(v9, (const char *)1, v3, v4);
      objc_msgSend_addObject_(v5, v7, (uint64_t)v6, v8);
    }
    while (!(*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))());
  }
}

void sub_18B081F34(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  sub_18AF278C4((uint64_t)v4, *(void **)(a1 + 32));
  while (1)
  {
    if (v4)
    {
      id v3 = v4[5];
      if (v3) {
        break;
      }
    }
    if (!sub_18AF27740((uint64_t)v4)) {
      goto LABEL_8;
    }
  }

LABEL_8:
}

void sub_18B08241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B082434(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  sub_18AF278C4((uint64_t)v4, v3);
  sub_18AF27740((uint64_t)v4);
  if (v4) {
    id v5 = (void *)v4[5];
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  if (!v6) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_lastInsertRowID(*(void **)(a1 + 40), v7, v8, v9);
  }
}

void sub_18B0825B0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  sub_18AF278C4((uint64_t)v3, v2);
  sub_18AF27740((uint64_t)v3);
}

void sub_18B082AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B082AC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 64);
  id v8 = a2;
  uint64_t v11 = objc_msgSend__tableNameForClass_(v6, v9, v7, v10);
  uint64_t v14 = objc_msgSend_stringWithFormat_(NSString, v12, @"delete from %@ where %@", v13, v11, *(void *)(a1 + 40));
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B082BE8;
  v20[3] = &unk_1E5462ED8;
  id v15 = *(id *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 56);
  id v23 = v5;
  uint64_t v24 = v16;
  uint64_t v17 = *(void *)(a1 + 32);
  id v21 = v15;
  uint64_t v22 = v17;
  id v18 = v5;
  objc_msgSend_usingStatementForSQL_performBlock_(v8, v19, (uint64_t)v14, (uint64_t)v20);
}

uint64_t sub_18B082BE8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  sub_18AF278C4((uint64_t)v4, v3);
  sub_18AF27740((uint64_t)v4);

  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  if ((result & 1) == 0)
  {
    uint64_t result = objc_msgSend_changes(*(void **)(a1 + 40), v6, v7, v8);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = result;
  }
  return result;
}

void sub_18B082EB8(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = sub_18B082FB8;
  v17[3] = &unk_1E5462F28;
  uint64_t v10 = a1[8];
  uint64_t v11 = (void *)a1[9];
  id v20 = v5;
  void v17[4] = v10;
  id v12 = v11;
  uint64_t v14 = (void *)a1[10];
  uint64_t v13 = a1[11];
  id v18 = v12;
  uint64_t v21 = v13;
  id v19 = v14;
  id v15 = v5;
  objc_msgSend_selectFrom_where_bindings_orderBy_limit_block_(a2, v16, v6, v7, v8, 0, v9, v17);
}

void sub_18B082FB8(uint64_t a1, void *a2, unsigned char *a3)
{
  id v13 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 56) + 16))())
  {
    *a3 = 1;
  }
  else
  {
    uint64_t v6 = objc_msgSend__boxedPropertyDictionary_forObjCClass_(*(void **)(a1 + 32), v5, (uint64_t)v13, *(void *)(a1 + 40));
    id v7 = objc_alloc(*(Class *)(a1 + 64));
    uint64_t v10 = objc_msgSend_initWithPropertyDictionary_(v7, v8, (uint64_t)v6, v9);
    objc_msgSend_addObject_(*(void **)(a1 + 48), v11, (uint64_t)v10, v12);
  }
}

void sub_18B0831E8(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)MEMORY[0x18C12ADA0]();
  uint64_t v8 = objc_msgSend__boxedPropertyDictionary_forObjCClass_(*(void **)(a1 + 32), v7, (uint64_t)v5, *(void *)(a1 + 40));
  id v9 = objc_alloc(*(Class *)(a1 + 56));
  uint64_t v12 = objc_msgSend_initWithPropertyDictionary_(v9, v10, (uint64_t)v8, v11);
  char v15 = 0;
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13)
  {
    (*(void (**)(uint64_t, void *, char *))(v13 + 16))(v13, v12, &v15);
    char v14 = v15;
  }
  else
  {
    char v14 = 0;
  }
  *a3 = v14;
}

id sub_18B0834D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = a3;
  id v9 = objc_msgSend_propertyForName_(v5, v7, a2, v8);
  uint64_t v11 = objc_msgSend__boxedValue_forObjcCProperty_(v4, v10, (uint64_t)v6, (uint64_t)v9);

  return v11;
}

void sub_18B0838B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0838D0(uint64_t a1, void *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_18B08394C;
  v3[3] = &unk_1E5462FC8;
  v3[4] = *(void *)(a1 + 32);
  return objc_msgSend_usingStatementForSQL_performBlock_(a2, (const char *)a2, @"pragma user_version", (uint64_t)v3);
}

void sub_18B08394C(uint64_t a1, void *a2)
{
  for (id i = a2;
        sub_18AF27740((uint64_t)i);
}

void *sub_18B083CE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B083EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B083ED8(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B084064(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B084244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B08425C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B084E00(uint64_t a1, void *a2, void *a3)
{
  id v20 = a3;
  id v5 = a2;
  uint64_t v6 = [CKMediaItemMaker alloc];
  uint64_t v9 = objc_msgSend_initWithAssetStreamHandle_(v6, v7, (uint64_t)v5, v8);

  objc_msgSend_setMediaItemMaker_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11);
  uint64_t v15 = *(void *)(a1 + 64);
  if (v15)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = objc_msgSend_CKClientSuitableError(v20, v12, v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(v15 + 16))(v15, v17, v16, v18, v19);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

uint64_t sub_18B085DA8()
{
  uint64_t v0 = [CKAccountOverrideInfo alloc];
  uint64_t v2 = objc_msgSend__initWithEmail_password_recoveryKey_(v0, v1, @"__anonymous_account__", 0, 0);
  uint64_t v3 = qword_1EB279BE0;
  qword_1EB279BE0 = v2;

  return MEMORY[0x1F41817F8](v2, v3);
}

uint64_t sub_18B085E4C()
{
  uint64_t v0 = [CKAccountOverrideInfo alloc];
  uint64_t v2 = objc_msgSend__initWithEmail_password_recoveryKey_(v0, v1, @"__live_account__", 0, 0);
  uint64_t v3 = qword_1EB279BF0;
  qword_1EB279BF0 = v2;

  return MEMORY[0x1F41817F8](v2, v3);
}

void sub_18B087578(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0876B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKSyncEngineDelegateShouldFetchChanges(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (objc_opt_respondsToSelector()) {
    uint64_t ChangesForZoneID = objc_msgSend_syncEngine_shouldFetchChangesForZoneID_(v5, v8, (uint64_t)v6, (uint64_t)v7);
  }
  else {
    uint64_t ChangesForZoneID = 1;
  }

  return ChangesForZoneID;
}

uint64_t CKSyncEngineDataSourceShouldFetchAssetContents(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (objc_opt_respondsToSelector()) {
    uint64_t AssetContentsForZoneID = objc_msgSend_syncEngine_shouldFetchAssetContentsForZoneID_(v5, v8, (uint64_t)v6, (uint64_t)v7);
  }
  else {
    uint64_t AssetContentsForZoneID = 1;
  }

  return AssetContentsForZoneID;
}

uint64_t sub_18B088480(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_syncEngine_failedToDeleteRecordZoneWithID_error_, *(void *)(a1 + 40), a2);
}

BOOL sub_18B088494(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_CKClientSuitableError(a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_domain(v5, v6, v7, v8);
  if (objc_msgSend_isEqualToString_(v9, v10, *MEMORY[0x1E4F281F8], v11))
  {
    if (objc_msgSend_code(v5, v12, v13, v14) == 4099)
    {

      goto LABEL_21;
    }
    uint64_t v21 = objc_msgSend_code(v5, v15, v16, v17);

    if (v21 == 4097) {
      goto LABEL_21;
    }
  }
  else
  {
  }
  uint64_t v22 = objc_msgSend_domain(v5, v18, v19, v20);
  char isEqualToString = objc_msgSend_isEqualToString_(v22, v23, @"CKErrorDomain", v24);

  if (isEqualToString)
  {
    if (objc_msgSend_code(v5, v26, v27, v28) == 2)
    {
      uint64_t v57 = 0;
      uint64_t v58 = &v57;
      uint64_t v59 = 0x2020000000;
      char v60 = 0;
      uint64_t v32 = objc_msgSend_userInfo(v5, v29, v30, v31);
      uint64_t v35 = objc_msgSend_objectForKeyedSubscript_(v32, v33, @"CKPartialErrors", v34);

      v56[0] = MEMORY[0x1E4F143A8];
      v56[1] = 3221225472;
      v56[2] = sub_18B089FB0;
      v56[3] = &unk_1E5463100;
      v56[4] = &v57;
      v56[5] = a2;
      objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v35, v36, (uint64_t)v56, v37);
      BOOL v38 = *((unsigned char *)v58 + 24) != 0;

      _Block_object_dispose(&v57, 8);
      goto LABEL_25;
    }
    if (objc_msgSend_code(v5, v29, v30, v31) == 1)
    {
      uint64_t v42 = objc_msgSend_userInfo(v5, v39, v40, v41);
      uint64_t v45 = objc_msgSend_objectForKeyedSubscript_(v42, v43, *MEMORY[0x1E4F28A50], v44);

      uint64_t v49 = objc_msgSend_domain(v45, v46, v47, v48);
      int v52 = objc_msgSend_isEqualToString_(v49, v50, @"CKErrorDomain", v51);

      if (v52)
      {
        id v53 = v45;

        id v5 = v53;
      }
    }
    unint64_t v54 = objc_msgSend_code(v5, v39, v40, v41);
    if (v54 <= 0x24)
    {
      if (((1 << v54) & 0x1000A002D8) != 0) {
        goto LABEL_21;
      }
      if (v54 == 20)
      {
        if (a2) {
          *a2 = 0;
        }
        BOOL v38 = 1;
        goto LABEL_25;
      }
    }
    if (v54 - 110 <= 5 && ((1 << (v54 - 110)) & 0x23) != 0)
    {
LABEL_21:
      BOOL v38 = 1;
      if (a2) {
        *a2 = 1;
      }
      goto LABEL_25;
    }
  }
  BOOL v38 = 0;
  if (a2) {
    *a2 = 0;
  }
LABEL_25:

  return v38;
}

void sub_18B08873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B088754(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = a3;
  id v12 = a2;
  objc_msgSend_syncEngine_failedToDeleteRecordWithID_error_(v5, v8, v6, (uint64_t)v12, v7);
  objc_msgSend_addObject_(*(void **)(a1 + 48), v9, (uint64_t)v12, v10);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 56), v11, (uint64_t)v7, (uint64_t)v12);
}

uint64_t sub_18B088B5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
  uint64_t v8 = objc_msgSend_containsRecordID_(v4, v6, (uint64_t)v5, v7);

  return v8;
}

id sub_18B088BA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = objc_msgSend_syncEngine_recordToSaveForRecordID_(*(void **)(a1 + 32), v4, *(void *)(a1 + 40), (uint64_t)v3);
  if (!v5)
  {
    uint64_t v6 = *(void **)(a1 + 48);
    uint64_t v7 = [CKSyncEnginePendingRecordZoneChange alloc];
    uint64_t v9 = objc_msgSend_initWithRecordID_type_(v7, v8, (uint64_t)v3, 0);
    objc_msgSend_addObject_(v6, v10, (uint64_t)v9, v11);
  }

  return v5;
}

void sub_18B08907C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B089288(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *CKStringFromSyncReason(uint64_t a1)
{
  uint64_t v1 = @"Unknown";
  if (a1 == 1) {
    uint64_t v1 = @"Manual";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"Scheduled";
  }
}

uint64_t sub_18B08986C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_ckShortDescription(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B089E74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_ckShortDescription(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B089E7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_ckShortDescription(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B089FB0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = sub_18B088494(a3, *(void *)(a1 + 40));
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void *sub_18B08B6AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B08B88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B08B8A4(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B08BA30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 528) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B08BC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B08BC28(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B08BDB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B08BF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B08BFAC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B08C138(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B08C318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B08C330(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B08C4BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 552) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 552);
    *(void *)(v8 + 552) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B08C69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B08C6B4(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 552));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B08C840(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 560) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 560);
    *(void *)(v8 + 56dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B08CA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B08CA38(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 560));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t CKDPRecordZoneIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_36;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_38;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + 8) = v22;
      }
      else
      {
        if (v17 == 2)
        {
          uint64_t v18 = objc_alloc_init(CKDPIdentifier);
          uint64_t v19 = 16;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v18 = objc_alloc_init(CKDPIdentifier);
          uint64_t v19 = 24;
        }
        objc_storeStrong((id *)(a1 + v19), v18);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_18B0910B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"refCount = 0", a4);
}

void sub_18B0927FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B092894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B092924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B0929CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B092AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B093374(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B09387C(uint64_t a1)
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Fetching server changes manually", buf, 2u);
  }
  uint64_t v3 = objc_opt_new();
  objc_msgSend_setForceFetchChanges_(v3, v4, 1, v5);
  unsigned int v9 = objc_msgSend_repairZoneSyncEngine(*(void **)(a1 + 32), v6, v7, v8);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_18B0939B8;
  v11[3] = &unk_1E54610D8;
  id v12 = *(id *)(a1 + 40);
  objc_msgSend_fetchChangesWithOptions_completionHandler_(v9, v10, (uint64_t)v3, (uint64_t)v11);
}

void sub_18B0939B8(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Fetch server changes completed with error %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v5 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_18AF10000, v5, OS_LOG_TYPE_INFO, "Fetch server changes completed successfully", (uint8_t *)&v7, 2u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
}

uint64_t sub_18B093B80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_scheduleOrInvokeRepairsNow(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_18B093C70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_dispatchEvent_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
}

void sub_18B093DAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_callbackForOverridePoint(*(void **)(a1 + 32), a2, a3, a4);

  if (!v5)
  {
    uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v6, v7, v8);
    objc_msgSend_setCallbackForOverridePoint_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11);
  }
  id v20 = _Block_copy(*(const void **)(a1 + 40));
  int v15 = objc_msgSend_callbackForOverridePoint(*(void **)(a1 + 32), v12, v13, v14);
  uint64_t v18 = objc_msgSend_numberWithInteger_(NSNumber, v16, *(void *)(a1 + 48), v17);
  objc_msgSend_setObject_forKeyedSubscript_(v15, v19, (uint64_t)v20, (uint64_t)v18);
}

void sub_18B094018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B094030(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_callbackForOverridePoint(*(void **)(a1 + 32), a2, a3, a4);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = objc_msgSend_numberWithInteger_(NSNumber, v5, *(void *)(a1 + 48), v6);
  uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(v13, v8, (uint64_t)v7, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v10;
}

uint64_t sub_18B0940BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) + 16))();
}

void sub_18B094570(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(a1[4], a2, 0, a4))
  {
    uint64_t v7 = (uint64_t)a1[5];
    if (!v7)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      unint64_t v24 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v100 = 0;
        _os_log_impl(&dword_18AF10000, v24, OS_LOG_TYPE_INFO, "Asset was successfully reuploaded, so deleting persisted repair record", v100, 2u);
      }
      uint64_t v28 = objc_msgSend_database(a1[4], v25, v26, v27);
      uint64_t v32 = objc_msgSend_repairZoneRecordID(a1[6], v29, v30, v31);
      objc_msgSend_deleteRepairRecord_(v28, v33, (uint64_t)v32, v34);

      goto LABEL_40;
    }
    if (objc_msgSend_repairErrorShouldBeMarkedAsBroken_(CKAssetRepairOperationUtilities, v5, v7, v6))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v8 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v100 = 0;
        _os_log_impl(&dword_18AF10000, v8, OS_LOG_TYPE_INFO, "Asset was successfully marked as missing, so deleting persisted repair record", v100, 2u);
      }
      id v12 = objc_msgSend_database(a1[4], v9, v10, v11);
      uint64_t v16 = objc_msgSend_repairZoneRecordID(a1[6], v13, v14, v15);
      objc_msgSend_deleteRepairRecord_(v12, v17, (uint64_t)v16, v18);
    }
    else
    {
      int v36 = CKCanRetryForError(a1[5]);
      uint64_t v40 = objc_msgSend_database(a1[4], v37, v38, v39);
      uint64_t v44 = objc_msgSend_repairZoneRecordID(a1[6], v41, v42, v43);
      uint64_t v48 = objc_msgSend_recordName(v44, v45, v46, v47);
      uint64_t v51 = objc_msgSend_delayedSyncCountForRecordName_(v40, v49, (uint64_t)v48, v50);
      objc_msgSend_retryableErrorMaxRetryCount(a1[4], v52, v53, v54);
      double v56 = v55;

      if (CKErrorIsCode(a1[5], 20))
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v57 = ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
        {
          uint64_t v58 = a1[5];
          *(_DWORD *)uint64_t v100 = 138412290;
          *(void *)&v100[4] = v58;
          _os_log_impl(&dword_18AF10000, v57, OS_LOG_TYPE_INFO, "Received repair cancellation %@, rescheduling", v100, 0xCu);
        }
        double v62 = CKRetryAfterSecondsForError(a1[5]);
        if (v62 == 0.0)
        {
          objc_msgSend_cancelledErrorRetryTime(a1[4], v59, v60, v61);
          double v62 = v63;
        }
        uint64_t v64 = a1[4];
        id v12 = objc_msgSend_repairZoneRecordID(a1[6], v59, v60, v61);
        objc_msgSend_scheduleRecordRepair_withDelay_increasingCount_(v64, v65, (uint64_t)v12, 0, v62);
        goto LABEL_38;
      }
      if (v56 > (double)v51) {
        int v66 = v36;
      }
      else {
        int v66 = 0;
      }
      if (v66 == 1)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v67 = ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
        {
          uint64_t v68 = a1[5];
          *(_DWORD *)uint64_t v100 = 138412290;
          *(void *)&v100[4] = v68;
          _os_log_impl(&dword_18AF10000, v67, OS_LOG_TYPE_INFO, "Received recoverable repair error %@, rescheduling", v100, 0xCu);
        }
        double v72 = CKRetryAfterSecondsForError(a1[5]);
        if (v72 == 0.0)
        {
          objc_msgSend_retryableErrorRetryTime(a1[4], v69, v70, v71);
          double v72 = v73;
        }
        uint64_t v74 = a1[4];
        id v12 = objc_msgSend_repairZoneRecordID(a1[6], v69, v70, v71);
        objc_msgSend_scheduleRecordRepair_withDelay_increasingCount_(v74, v75, (uint64_t)v12, 1, v72);
        goto LABEL_38;
      }
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v79 = (void *)ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = a1[6];
        __int16 v93 = v79;
        uint64_t v97 = objc_msgSend_repairZoneRecordID(v92, v94, v95, v96);
        v98 = a1[5];
        uint64_t v99 = @"which is unrecoverable";
        *(_DWORD *)uint64_t v100 = 138412802;
        *(void *)&v100[4] = v97;
        if (v36) {
          uint64_t v99 = @"after several attempts";
        }
        *(_WORD *)&v100[12] = 2112;
        *(void *)&v100[14] = v98;
        __int16 v101 = 2112;
        uint64_t v102 = v99;
        _os_log_error_impl(&dword_18AF10000, v93, OS_LOG_TYPE_ERROR, "Could not recover repair record %@ with error %@ %@, so marking locally as unrecoverable", v100, 0x20u);
      }
      id v12 = objc_msgSend_database(a1[4], v80, v81, v82, *(_OWORD *)v100);
      uint64_t v16 = objc_msgSend_repairZoneRecordID(a1[6], v83, v84, v85);
      uint64_t v89 = objc_msgSend_recordName(v16, v86, v87, v88);
      objc_msgSend_markRecordNameUnrecoverable_(v12, v90, (uint64_t)v89, v91);
    }
LABEL_38:

    if (objc_msgSend_errorShouldTriggerNetworkReachabilityEvent_(CKAssetRepairOperationUtilities, v76, (uint64_t)a1[5], v77))objc_msgSend_dispatchEvent_(a1[4], v35, 7, v78); {
LABEL_40:
    }
    objc_msgSend_invokeCallbackForOverridePoint_withError_onCallbackQueue_(a1[4], v35, 4, (uint64_t)a1[5], 1);
    return;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v19 = (void *)ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    id v20 = v19;
    uint64_t v23 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v21, 0, v22);
    *(_DWORD *)uint64_t v100 = 138543362;
    *(void *)&v100[4] = v23;
    _os_log_debug_impl(&dword_18AF10000, v20, OS_LOG_TYPE_DEBUG, "Upload request repair scheduler attempted to perform function %{public}@, but failed to do so", v100, 0xCu);
  }
}

uint64_t sub_18B094BEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_dispatchEvent_(*(void **)(a1 + 32), a2, 17, a4);
}

void sub_18B094D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B094D34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 0, a4))
  {
    if (objc_msgSend_isRepairRecordActionable_(*(void **)(a1 + 32), v5, *(void *)(a1 + 40), v6))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v7 = (void *)ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v45 = *(void **)(a1 + 40);
        uint64_t v46 = v7;
        uint64_t v50 = objc_msgSend_recordID(v45, v47, v48, v49);
        int v57 = 138412290;
        uint64_t v58 = v50;
        _os_log_debug_impl(&dword_18AF10000, v46, OS_LOG_TYPE_DEBUG, "Sync engine: repair record %@ was fetched, persisting", (uint8_t *)&v57, 0xCu);
      }
      uint64_t v11 = objc_msgSend_database(*(void **)(a1 + 32), v8, v9, v10);
      objc_msgSend_persistRepairRecord_(v11, v12, *(void *)(a1 + 40), v13);
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v19 = (void *)ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v51 = *(void **)(a1 + 40);
        int v52 = v19;
        double v56 = objc_msgSend_recordID(v51, v53, v54, v55);
        int v57 = 138412290;
        uint64_t v58 = v56;
        _os_log_debug_impl(&dword_18AF10000, v52, OS_LOG_TYPE_DEBUG, "Sync engine: repair record %@ was fetched but is not actionable, deleting", (uint8_t *)&v57, 0xCu);
      }
      uint64_t v23 = objc_msgSend_database(*(void **)(a1 + 32), v20, v21, v22);
      uint64_t v27 = objc_msgSend_recordID(*(void **)(a1 + 40), v24, v25, v26);
      objc_msgSend_deleteRepairRecord_(v23, v28, (uint64_t)v27, v29);

      uint64_t v11 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), v30, v31, v32);
      int v36 = objc_msgSend_recordID(*(void **)(a1 + 40), v33, v34, v35);
      objc_msgSend_removeUploadRequestWithRecordID_(v11, v37, (uint64_t)v36, v38);
    }
    if ((objc_msgSend_ignoreUploadRequestPushNotifications(CKUploadRequestManager, v39, v40, v41) & 1) == 0) {
      objc_msgSend_scheduleOrInvokeRepairsNow(*(void **)(a1 + 32), v42, v43, v44);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v14 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = v14;
      uint64_t v18 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v16, 0, v17);
      int v57 = 138543362;
      uint64_t v58 = v18;
      _os_log_debug_impl(&dword_18AF10000, v15, OS_LOG_TYPE_DEBUG, "Sync engine did fetch record attempted to perform function %{public}@, but failed to do so", (uint8_t *)&v57, 0xCu);
    }
  }
}

void sub_18B095158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B09516C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 0, a4))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v5 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void **)(a1 + 40);
      int v24 = 138412290;
      uint64_t v25 = v19;
      _os_log_debug_impl(&dword_18AF10000, v5, OS_LOG_TYPE_DEBUG, "Sync engine: repair record %@ was deleted", (uint8_t *)&v24, 0xCu);
    }
    uint64_t v9 = objc_msgSend_database(*(void **)(a1 + 32), v6, v7, v8);
    objc_msgSend_deleteRepairRecord_(v9, v10, *(void *)(a1 + 40), v11);

    uint64_t v15 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), v12, v13, v14);
    objc_msgSend_removeUploadRequestWithRecordID_(v15, v16, *(void *)(a1 + 40), v17);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v18 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      id v20 = v18;
      uint64_t v23 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v21, 0, v22);
      int v24 = 138543362;
      uint64_t v25 = v23;
      _os_log_debug_impl(&dword_18AF10000, v20, OS_LOG_TYPE_DEBUG, "Sync engine record deleted attempted to perform function %{public}@, but failed to do so", (uint8_t *)&v24, 0xCu);
    }
  }
}

void sub_18B0953E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 0, a4))
  {
    objc_msgSend_database(*(void **)(a1 + 32), v5, v6, v7);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_persistSyncEngineMetadata_(v15, v8, *(void *)(a1 + 40), v9);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v10 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = v10;
      uint64_t v14 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v12, 0, v13);
      *(_DWORD *)buf = 138543362;
      uint64_t v17 = v14;
      _os_log_debug_impl(&dword_18AF10000, v11, OS_LOG_TYPE_DEBUG, "Sync engine did update metadata attempted to perform function %{public}@, but failed to do so", buf, 0xCu);
    }
  }
}

void sub_18B09565C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B095670(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_zoneName(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_repairZoneID(*(void **)(a1 + 40), v6, v7, v8);
  uint64_t v13 = objc_msgSend_zoneName(v9, v10, v11, v12);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v14, (uint64_t)v13, v15);

  if (isEqualToString)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v17 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_debug_impl(&dword_18AF10000, v17, OS_LOG_TYPE_DEBUG, "Sync engine: repair zone was changed", v18, 2u);
    }
  }
}

void sub_18B095878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B09588C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 0, a4))
  {
    uint64_t v8 = objc_msgSend_zoneName(*(void **)(a1 + 40), v5, v6, v7);
    uint64_t v12 = objc_msgSend_repairZoneID(*(void **)(a1 + 32), v9, v10, v11);
    uint64_t v16 = objc_msgSend_zoneName(v12, v13, v14, v15);
    int isEqualToString = objc_msgSend_isEqualToString_(v8, v17, (uint64_t)v16, v18);

    if (isEqualToString)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v20 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v32) = 0;
        _os_log_debug_impl(&dword_18AF10000, v20, OS_LOG_TYPE_DEBUG, "Sync engine: repair zone was deleted", (uint8_t *)&v32, 2u);
      }
      int v24 = objc_msgSend_database(*(void **)(a1 + 32), v21, v22, v23);
      objc_msgSend_clearRepairRecords(v24, v25, v26, v27);
      goto LABEL_8;
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v28 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      int v24 = v28;
      uint64_t v31 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v29, 0, v30);
      int v32 = 138543362;
      uint64_t v33 = v31;
      _os_log_debug_impl(&dword_18AF10000, v24, OS_LOG_TYPE_DEBUG, "Sync engine zone deleted attempted to perform function %{public}@, but failed to do so", (uint8_t *)&v32, 0xCu);

LABEL_8:
    }
  }
}

void sub_18B095BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B095BB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 0, a4))
  {
    uint64_t v8 = objc_msgSend_zoneName(*(void **)(a1 + 40), v5, v6, v7);
    uint64_t v12 = objc_msgSend_repairZoneID(*(void **)(a1 + 32), v9, v10, v11);
    uint64_t v16 = objc_msgSend_zoneName(v12, v13, v14, v15);
    int isEqualToString = objc_msgSend_isEqualToString_(v8, v17, (uint64_t)v16, v18);

    if (isEqualToString)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v20 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v32) = 0;
        _os_log_debug_impl(&dword_18AF10000, v20, OS_LOG_TYPE_DEBUG, "Sync engine: repair zone was purged", (uint8_t *)&v32, 2u);
      }
      int v24 = objc_msgSend_database(*(void **)(a1 + 32), v21, v22, v23);
      objc_msgSend_clearRepairRecords(v24, v25, v26, v27);
      goto LABEL_8;
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v28 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      int v24 = v28;
      uint64_t v31 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v29, 0, v30);
      int v32 = 138543362;
      uint64_t v33 = v31;
      _os_log_debug_impl(&dword_18AF10000, v24, OS_LOG_TYPE_DEBUG, "Sync engine zone purged attempted to perform function %{public}@, but failed to do so", (uint8_t *)&v32, 0xCu);

LABEL_8:
    }
  }
}

void sub_18B095EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B095EDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_recordType(*(void **)(a1 + 32), a2, a3, a4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"MissingAsset", v7);

  uint64_t v12 = *(void **)(a1 + 32);
  if (isEqualToString)
  {
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v12, v9, @"hasAssetRecovered", v11);
    if (objc_msgSend_integerValue(v13, v14, v15, v16) >= 1)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v19 = (void *)ck_log_facility_data_repair;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
      id v20 = *(void **)(a1 + 32);
      uint64_t v21 = v19;
      uint64_t v25 = objc_msgSend_recordID(v20, v22, v23, v24);
      int v77 = 138412290;
      uint64_t v78 = v25;
      uint64_t v26 = "Skipping asset repair record, already recovered: %@";
LABEL_28:
      _os_log_debug_impl(&dword_18AF10000, v21, OS_LOG_TYPE_DEBUG, v26, (uint8_t *)&v77, 0xCu);

LABEL_29:
      char v70 = 0;
LABEL_30:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v70;

      return;
    }
    uint64_t v44 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v17, @"confirmedUnrecoverableDevices", v18);
    uint64_t v48 = objc_msgSend_deviceID(*(void **)(a1 + 40), v45, v46, v47);
    int v51 = objc_msgSend_containsObject_(v44, v49, (uint64_t)v48, v50);

    if (v51)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      int v52 = (void *)ck_log_facility_data_repair;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
      uint64_t v53 = *(void **)(a1 + 32);
      uint64_t v21 = v52;
      uint64_t v25 = objc_msgSend_recordID(v53, v54, v55, v56);
      int v77 = 138412290;
      uint64_t v78 = v25;
      uint64_t v26 = "Skipping asset repair record, device identifier included: %@";
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  uint64_t v27 = objc_msgSend_recordType(v12, v9, v10, v11);
  int v30 = objc_msgSend_isEqualToString_(v27, v28, @"MissingPackage", v29);

  if (v30)
  {
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v31, @"hasAssetRecovered", v32);
    if (objc_msgSend_integerValue(v13, v33, v34, v35) >= 1)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v38 = (void *)ck_log_facility_data_repair;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
      uint64_t v39 = *(void **)(a1 + 32);
      uint64_t v21 = v38;
      uint64_t v25 = objc_msgSend_recordID(v39, v40, v41, v42);
      int v77 = 138412290;
      uint64_t v78 = v25;
      uint64_t v26 = "Skipping package repair record, already recovered: %@";
      goto LABEL_28;
    }
    int v57 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v36, @"confirmedUnrecoverableDevices", v37);
    uint64_t v61 = objc_msgSend_deviceID(*(void **)(a1 + 40), v58, v59, v60);
    int v64 = objc_msgSend_containsObject_(v57, v62, (uint64_t)v61, v63);

    if (v64)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v65 = (void *)ck_log_facility_data_repair;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
      int v66 = *(void **)(a1 + 32);
      uint64_t v21 = v65;
      uint64_t v25 = objc_msgSend_recordID(v66, v67, v68, v69);
      int v77 = 138412290;
      uint64_t v78 = v25;
      uint64_t v26 = "Skipping package repair record, device identifier included: %@";
      goto LABEL_28;
    }
LABEL_31:
    char v70 = 1;
    goto LABEL_30;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v43 = (void *)ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v71 = *(void **)(a1 + 32);
    double v72 = v43;
    uint64_t v76 = objc_msgSend_recordType(v71, v73, v74, v75);
    int v77 = 138543362;
    uint64_t v78 = v76;
    _os_log_debug_impl(&dword_18AF10000, v72, OS_LOG_TYPE_DEBUG, "Skipping unknown repair record with type %{public}@", (uint8_t *)&v77, 0xCu);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
}

void sub_18B096474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B096488(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 1, a4))
  {
    double v5 = *(double *)(a1 + 40);
    if (v5 < 0.0) {
      double v5 = 0.0;
    }
    if (v5 <= 0.0) {
      double v6 = v5;
    }
    else {
      double v6 = v5 + 2.0;
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v7 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
    {
      int v37 = 134217984;
      double v38 = v6;
      _os_log_impl(&dword_18AF10000, v7, OS_LOG_TYPE_INFO, "Scheduling upload request in %.1f seconds", (uint8_t *)&v37, 0xCu);
    }
    uint64_t v8 = [CKSchedulerActivity alloc];
    uint64_t v12 = objc_msgSend_activityIdentifierForSchedulingRepairs(*(void **)(a1 + 32), v9, v10, v11);
    uint64_t v16 = objc_msgSend_container(*(void **)(a1 + 32), v13, v14, v15);
    uint64_t v18 = objc_msgSend_initWithIdentifier_container_priority_(v8, v17, (uint64_t)v12, (uint64_t)v16, 2);

    if (v6 > 0.0)
    {
      uint64_t v22 = objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E4F1C9C8], v19, v20, v21, v6);
      objc_msgSend_setEarliestStartDate_(v18, v23, (uint64_t)v22, v24);
    }
    empty = xpc_dictionary_create_empty();
    xpc_dictionary_set_value(empty, (const char *)*MEMORY[0x1E4F14138], MEMORY[0x1E4F14510]);
    xpc_dictionary_set_value(empty, (const char *)*MEMORY[0x1E4F14330], MEMORY[0x1E4F14518]);
    objc_msgSend_setXpcActivityCriteriaOverrides_(v18, v26, (uint64_t)empty, v27);
    uint64_t v31 = objc_msgSend_sharedScheduler(CKScheduler, v28, v29, v30);
    objc_msgSend_submitActivity_(v31, v32, (uint64_t)v18, v33);

    goto LABEL_14;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v34 = (void *)ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = v34;
    empty = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v35, 1, v36);
    int v37 = 138543362;
    double v38 = *(double *)&empty;
    _os_log_debug_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEBUG, "Upload request schedule repairs attempted to perform function %{public}@, but failed to do so", (uint8_t *)&v37, 0xCu);
LABEL_14:
  }
}

uint64_t sub_18B0967C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 1, a4))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return objc_msgSend_scheduleRepairsWithDelay_(v8, v5, v6, v7, 0.0);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v10 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_debug_impl(&dword_18AF10000, v10, OS_LOG_TYPE_DEBUG, "Not permitted to schedule upload requests in the current state, so attempting to process them right away", v14, 2u);
    }
    return objc_msgSend_performRepairs(*(void **)(a1 + 32), v11, v12, v13);
  }
}

void sub_18B096980(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 0, a4))
  {
    uint64_t v8 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v5, v6, v7);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v34 = *(void **)(a1 + 40);
      uint64_t v35 = *(void *)(a1 + 48);
      int v39 = 138412546;
      uint64_t v40 = v34;
      __int16 v41 = 2048;
      uint64_t v42 = v35;
      _os_log_debug_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEBUG, "Persisting delayed repair for record %@ with a delay of %.1f seconds", (uint8_t *)&v39, 0x16u);
    }
    uint64_t v13 = objc_msgSend_database(*(void **)(a1 + 32), v10, v11, v12);
    uint64_t v17 = objc_msgSend_recordName(*(void **)(a1 + 40), v14, v15, v16);
    uint64_t v21 = objc_msgSend_dateByAddingTimeInterval_(v8, v18, v19, v20, *(double *)(a1 + 48));
    objc_msgSend_persistDelayedSyncForRecordName_withDate_increasingCount_(v13, v22, (uint64_t)v17, (uint64_t)v21, *(unsigned __int8 *)(a1 + 56));

    uint64_t v25 = objc_msgSend_nextRepairDateForDate_(*(void **)(a1 + 32), v23, (uint64_t)v8, v24);
    uint64_t v26 = *(void **)(a1 + 32);
    objc_msgSend_timeIntervalSinceDate_(v25, v27, (uint64_t)v8, v28);
    if (v32 < 0.0) {
      double v32 = 0.0;
    }
    objc_msgSend_scheduleRepairsWithDelay_(v26, v29, v30, v31, v32);

    goto LABEL_9;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v33 = (void *)ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = v33;
    double v38 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v36, 0, v37);
    int v39 = 138543362;
    uint64_t v40 = v38;
    _os_log_debug_impl(&dword_18AF10000, v8, OS_LOG_TYPE_DEBUG, "Upload request schedule record repair attempted to perform function %{public}@, but failed to do so", (uint8_t *)&v39, 0xCu);

LABEL_9:
  }
}

void sub_18B096CD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  double v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_msgSend_database(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_delayedSyncRecordNamesAfterDate_(v6, v7, *(void *)(a1 + 40), v8);
  uint64_t v12 = objc_msgSend_setWithArray_(v5, v10, (uint64_t)v9, v11);

  uint64_t v16 = objc_msgSend_assetRequestCallback(*(void **)(a1 + 32), v13, v14, v15);

  if (v16)
  {
    uint64_t v20 = objc_msgSend_database(*(void **)(a1 + 32), v17, v18, v19);
    uint64_t v24 = objc_msgSend_assetRepairMetadata(v20, v21, v22, v23);

    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    id v25 = v24;
    uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v74, (uint64_t)v79, 16);
    if (v27)
    {
      uint64_t v31 = v27;
      uint64_t v32 = *(void *)v75;
      do
      {
        for (uint64_t i = 0; i != v31; ++i)
        {
          if (*(void *)v75 != v32) {
            objc_enumerationMutation(v25);
          }
          uint64_t v34 = *(void **)(*((void *)&v74 + 1) + 8 * i);
          uint64_t v35 = objc_msgSend_repairZoneRecordID(v34, v28, v29, v30);
          int v39 = objc_msgSend_recordName(v35, v36, v37, v38);
          char v42 = objc_msgSend_containsObject_(v12, v40, (uint64_t)v39, v41);

          if ((v42 & 1) == 0) {
            objc_msgSend_addObject_(*(void **)(a1 + 48), v28, (uint64_t)v34, v30);
          }
        }
        uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v74, (uint64_t)v79, 16);
      }
      while (v31);
    }
  }
  uint64_t v43 = objc_msgSend_packageRequestCallback(*(void **)(a1 + 32), v17, v18, v19);

  if (v43)
  {
    uint64_t v47 = objc_msgSend_database(*(void **)(a1 + 32), v44, v45, v46);
    int v51 = objc_msgSend_packageRepairMetadata(v47, v48, v49, v50);

    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    id v52 = v51;
    uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v70, (uint64_t)v78, 16);
    if (v54)
    {
      uint64_t v58 = v54;
      uint64_t v59 = *(void *)v71;
      do
      {
        for (uint64_t j = 0; j != v58; ++j)
        {
          if (*(void *)v71 != v59) {
            objc_enumerationMutation(v52);
          }
          uint64_t v61 = *(void **)(*((void *)&v70 + 1) + 8 * j);
          double v62 = objc_msgSend_repairZoneRecordID(v61, v55, v56, v57, (void)v70);
          int v66 = objc_msgSend_recordName(v62, v63, v64, v65);
          char v69 = objc_msgSend_containsObject_(v12, v67, (uint64_t)v66, v68);

          if ((v69 & 1) == 0) {
            objc_msgSend_addObject_(*(void **)(a1 + 48), v55, (uint64_t)v61, v57);
          }
        }
        uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v55, (uint64_t)&v70, (uint64_t)v78, 16);
      }
      while (v58);
    }
  }
}

void sub_18B0970D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0970F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  return result;
}

void sub_18B097100(uint64_t a1)
{
}

uint64_t sub_18B097108(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v5 = objc_msgSend_repairableAssetsForDate_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
  uint64_t v9 = objc_msgSend_count(v5, v6, v7, v8);

  if (v9 < 1)
  {
    uint64_t v23 = objc_msgSend_database(*(void **)(a1 + 32), v10, v11, v12);
    uint64_t v19 = objc_msgSend_earliestDelayedSyncDateAfterDate_(v23, v17, *(void *)(a1 + 40), v18);
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v19;

    uint64_t v16 = v23;
  }
  else
  {
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
    id v15 = v13;
    uint64_t v16 = *(void **)(v14 + 40);
    *(void *)(v14 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v15;
  }

  return MEMORY[0x1F41817F8](v15, v16);
}

void sub_18B097290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B0972A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_canPerformFunction_(*(void **)(a1 + 32), a2, 2, a4))
  {
    uint64_t v8 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v5, v6, v7);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = v8;
      _os_log_impl(&dword_18AF10000, v9, OS_LOG_TYPE_INFO, "Performing asset repairs with date %{public}@", buf, 0xCu);
    }
    uint64_t v12 = objc_msgSend_repairableAssetsForDate_(*(void **)(a1 + 32), v10, (uint64_t)v8, v11);
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    void v39[2] = sub_18B097534;
    void v39[3] = &unk_1E5463260;
    v39[4] = *(void *)(a1 + 32);
    id v15 = objc_msgSend_CKCompactMap_(v12, v13, (uint64_t)v39, v14);
    uint64_t v19 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), v16, v17, v18);
    char hasPendingWork = objc_msgSend_hasPendingWork(v19, v20, v21, v22);

    uint64_t v27 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), v24, v25, v26);
    objc_msgSend_addUploadRequestsWithMetadata_requestBlocks_(v27, v28, (uint64_t)v12, (uint64_t)v15);

    if ((hasPendingWork & 1) == 0 && !objc_msgSend_count(v12, v29, v30, v31)) {
      objc_msgSend_dispatchEvent_(*(void **)(a1 + 32), v32, 17, v33);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v34 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = v34;
      uint64_t v38 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v36, 2, v37);
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = v38;
      _os_log_debug_impl(&dword_18AF10000, v35, OS_LOG_TYPE_DEBUG, "Upload request perform repairs attempted to perform function %{public}@, but failed to do so", buf, 0xCu);
    }
  }
}

id sub_18B097534(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v7 = objc_msgSend_assetRequestCallback(*(void **)(a1 + 32), v4, v5, v6);
LABEL_5:
    uint64_t v14 = v7;
    id v15 = objc_msgSend_copy(v7, v8, v9, v10);

    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v7 = objc_msgSend_packageRequestCallback(*(void **)(a1 + 32), v11, v12, v13);
    goto LABEL_5;
  }
  id v15 = 0;
LABEL_7:

  return v15;
}

void sub_18B097778(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_18B0977BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained(v4);
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(v5, v6, @"retry", v7);

  uint64_t v12 = objc_msgSend_BOOLValue(v8, v9, v10, v11);
  objc_msgSend_respondToStateMachineAction_isRetry_(WeakRetained, v13, a2, v12);
}

void sub_18B097858(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_respondToStateMachineChangeState_enter_(WeakRetained, v3, a2, 1);
}

void sub_18B0978AC(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_respondToStateMachineChangeState_enter_(WeakRetained, v3, a2, 0);
}

void sub_18B0979D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  switch(*(void *)(a1 + 40))
  {
    case 0:
      uint64_t v5 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v5, sel_registerForRepairScheduler, a3, a4);
      return;
    case 2:
      uint64_t v6 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v6, sel_openSyncEngine, a3, a4);
      return;
    case 3:
      uint64_t v7 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v7, sel_closeSyncEngine, a3, a4);
      return;
    case 4:
      uint64_t v8 = objc_msgSend_database(*(void **)(a1 + 32), a2, a3, a4);

      if (!v8)
      {
        uint64_t v12 = objc_msgSend_createDatabase(*(void **)(a1 + 32), v9, v10, v11);
        objc_msgSend_setDatabase_(*(void **)(a1 + 32), v13, (uint64_t)v12, v14);

        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        id v15 = (void *)ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void **)(a1 + 32);
          uint64_t v17 = v15;
          uint64_t v21 = objc_msgSend_database(v16, v18, v19, v20);
          uint64_t v25 = objc_msgSend_databaseURL(v21, v22, v23, v24);
          uint64_t v29 = objc_msgSend_path(v25, v26, v27, v28);
          *(_DWORD *)buf = 138543362;
          v168 = v29;
          _os_log_debug_impl(&dword_18AF10000, v17, OS_LOG_TYPE_DEBUG, "Upload request manager database initialized with path: %{public}@", buf, 0xCu);
        }
      }
      return;
    case 5:
      uint64_t v30 = *(void **)(a1 + 32);
      objc_msgSend_setDatabase_(v30, a2, 0, a4);
      return;
    case 6:
      uint64_t v31 = [CKAssetRepairScheduler alloc];
      uint64_t v35 = objc_msgSend_container(*(void **)(a1 + 32), v32, v33, v34);
      int v39 = objc_msgSend_repairContainerOverrides(*(void **)(a1 + 32), v36, v37, v38);
      uint64_t v41 = objc_msgSend_initWithContainer_repairContainerOverrides_(v31, v40, (uint64_t)v35, (uint64_t)v39);
      objc_msgSend_setRepairProcessor_(*(void **)(a1 + 32), v42, (uint64_t)v41, v43);

      uint64_t v47 = objc_msgSend_assetRepairSchedulerRepairBatchCountLimit(*(void **)(a1 + 32), v44, v45, v46);
      int v51 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), v48, v49, v50);
      objc_msgSend_setRepairBatchCountLimit_(v51, v52, v47, v53);

      objc_msgSend_assetRepairSchedulerDefaultSuspensionTime(*(void **)(a1 + 32), v54, v55, v56);
      double v58 = v57;
      double v62 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), v59, v60, v61);
      objc_msgSend_setDefaultSuspensionTime_(v62, v63, v64, v65, v58);

      uint64_t v69 = objc_msgSend_assetRepairSchedulerRepairRetryCount(*(void **)(a1 + 32), v66, v67, v68);
      long long v73 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), v70, v71, v72);
      objc_msgSend_setRepairRetryCount_(v73, v74, v69, v75);

      long long v76 = *(void **)(a1 + 32);
      objc_msgSend_repairProcessor(v76, v77, v78, v79);
      id v163 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setDelegate_(v163, v80, (uint64_t)v76, v81);
      goto LABEL_74;
    case 7:
      uint64_t v82 = objc_msgSend_repairProcessor(*(void **)(a1 + 32), a2, a3, a4);
      objc_msgSend_setDelegate_(v82, v83, 0, v84);

      uint64_t v87 = *(void **)(a1 + 32);
      objc_msgSend_setRepairProcessor_(v87, v85, 0, v86);
      return;
    case 8:
      uint64_t v88 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v88, sel_cancelScheduledEvent, a3, a4);
      return;
    case 9:
      objc_msgSend_repairProcessor(*(void **)(a1 + 32), a2, a3, a4);
      id v163 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_cancelAllOperations(v163, v89, v90, v91);
      goto LABEL_74;
    case 0xALL:
      uint64_t v92 = objc_msgSend_database(*(void **)(a1 + 32), a2, a3, a4);
      uint64_t v96 = v92;
      if (v92)
      {
        id v97 = v92;
      }
      else
      {
        objc_msgSend_createDatabase(*(void **)(a1 + 32), v93, v94, v95);
        id v97 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v163 = v97;

      objc_msgSend_deleteDatabase(v163, v120, v121, v122);
LABEL_74:

      return;
    case 0xBLL:
      v98 = objc_msgSend_repairZoneSyncEngine(*(void **)(a1 + 32), a2, a3, a4);

      if (v98)
      {
        uint64_t v102 = objc_msgSend_repairZoneSyncEngine(*(void **)(a1 + 32), v99, v100, v101);
        objc_msgSend_unregisterActivities(v102, v103, v104, v105);
      }
      else
      {
        uint64_t v102 = objc_msgSend_container(*(void **)(a1 + 32), v99, v100, v101);
        v126 = objc_msgSend_privateCloudDatabase(v102, v123, v124, v125);
        uint64_t v130 = objc_msgSend_ignoringSystemConditions(*(void **)(a1 + 32), v127, v128, v129);
        objc_msgSend_unregisterActivitiesWithDatabase_ignoringSystemConditions_(CKSyncEngine, v131, (uint64_t)v126, v130);
      }
      v135 = objc_msgSend_sharedScheduler(CKScheduler, v132, v133, v134);
      v139 = objc_msgSend_activityIdentifierForSchedulingRepairs(*(void **)(a1 + 32), v136, v137, v138);
      objc_msgSend_unregisterActivityIdentifier_(v135, v140, (uint64_t)v139, v141);

      objc_msgSend_setHasRegisteredActivity_(*(void **)(a1 + 32), v142, 0, v143);
      v150 = objc_msgSend_machServiceName(*(void **)(a1 + 32), v144, v145, v146);
      if (v150)
      {
        __int16 v151 = objc_msgSend_stateQueue(*(void **)(a1 + 32), v147, v148, v149);
        dispatch_suspend(v151);

        __int16 v155 = objc_msgSend_stateQueue(*(void **)(a1 + 32), v152, v153, v154);
        v159 = objc_msgSend_repairContainer(*(void **)(a1 + 32), v156, v157, v158);
        v164[0] = MEMORY[0x1E4F143A8];
        v164[1] = 3221225472;
        v164[2] = sub_18B09842C;
        v164[3] = &unk_1E54632D8;
        id v165 = v150;
        id v166 = v155;
        id v160 = v155;
        objc_msgSend_pushEnvironmentWithCompletionHandler_(v159, v161, (uint64_t)v164, v162);
      }
      return;
    case 0xCLL:
      uint64_t v106 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v106, sel_checkNetworkReachability, a3, a4);
      return;
    case 0xDLL:
      uint64_t v107 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v107, sel_registerForNetworkReachability, a3, a4);
      return;
    case 0xELL:
      uint64_t v108 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v108, sel_unregisterFromNetworkReachability, a3, a4);
      return;
    case 0xFLL:
      uint64_t v109 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v109, sel_fetchRepairContainerMetadata, a3, a4);
      return;
    case 0x10:
      uint64_t v110 = *(void **)(a1 + 32);
      objc_msgSend_checkAccountStatus(v110, a2, a3, a4);
      return;
    case 0x11:
      uint64_t v111 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v111, sel_checkAccountID, a3, a4);
      return;
    case 0x12:
      uint64_t v112 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v112, sel_registerForAccountNotifications, a3, a4);
      return;
    case 0x13:
      uint64_t v113 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v113, sel_unregisterFromAccountNotifications, a3, a4);
      return;
    case 0x14:
      uint64_t v114 = *(void **)(a1 + 32);
      objc_msgSend_fetchServerChanges_(v114, a2, 0, a4);
      return;
    case 0x15:
      uint64_t v115 = *(void *)(a1 + 32);
      uint64_t v116 = 0;
      goto LABEL_60;
    case 0x16:
      uint64_t v115 = *(void *)(a1 + 32);
      uint64_t v116 = 1;
LABEL_60:
      MEMORY[0x1F4181798](v115, sel_finishSchedulerCallbackWithDeferral_, v116, a4);
      break;
    case 0x17:
      uint64_t v117 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v117, sel_scheduleRecurringFetch, a3, a4);
      break;
    case 0x18:
      uint64_t v118 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v118, sel_scheduleNextSync, a3, a4);
      break;
    case 0x19:
      uint64_t v119 = *(void **)(a1 + 32);
      objc_msgSend_performRepairs(v119, a2, a3, a4);
      break;
    default:
      return;
  }
}

void sub_18B09842C(uint64_t a1, const char *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2) {
    objc_msgSend_ck_singletonConnectionForEnvironmentName_namedDelegatePort_(MEMORY[0x1E4F4E1E8], a2, (uint64_t)a2, *(void *)(a1 + 32));
  }
  else {
  id v3 = objc_msgSend_ck_singletonConnectionForEnvironmentName_namedDelegatePort_(MEMORY[0x1E4F4E1E8], 0, *MEMORY[0x1E4F4E1D0], *(void *)(a1 + 32));
  }
  objc_msgSend__setEnabledTopics_(v3, v4, 0, v5);
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v6 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_debug_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEBUG, "Cleared all enabled topics from connection %@", (uint8_t *)&v7, 0xCu);
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 40));
}

uint64_t sub_18B098600(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(result + 40) == 2)
  {
    int v4 = *(unsigned __int8 *)(result + 48);
    uint64_t v5 = *(void *)(result + 32);
    if (v4) {
      return MEMORY[0x1F4181798](v5, sel_registerForFetchAllNotifications, a3, a4);
    }
    else {
      return MEMORY[0x1F4181798](v5, sel_unregisterFromFetchAllNotifications, a3, a4);
    }
  }
  return result;
}

void sub_18B0986D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_stateMachine(*(void **)(a1 + 32), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dispatchEvent_(v7, v5, *(void *)(a1 + 40), v6);
}

void sub_18B098804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B09881C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_stateMachine(*(void **)(a1 + 32), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_canPerformFunction_(v7, v5, *(void *)(a1 + 48), v6);
}

void sub_18B0989C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, os_activity_scope_state_s state)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18B0989F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_invokeCallbackForOverridePoint_withError_onCallbackQueue_(WeakRetained, v8, 5, 0, 0);
  if (WeakRetained)
  {
    uint64_t v12 = objc_msgSend_stateQueue(WeakRetained, v9, v10, v11);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18B098B80;
    block[3] = &unk_1E5463328;
    void block[4] = WeakRetained;
    id v15 = v5;
    id v16 = v6;
    dispatch_async(v12, block);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v13 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_18AF10000, v13, OS_LOG_TYPE_ERROR, "Repair XPC activity was called, but self was nil", buf, 2u);
    }
    (*((void (**)(id, uint64_t))v6 + 2))(v6, 1);
  }
}

uint64_t sub_18B098B80(uint64_t a1, const char *a2)
{
  objc_msgSend_invokeCallbackForOverridePoint_withError_onCallbackQueue_(*(void **)(a1 + 32), a2, 6, 0, 0);
  id v6 = objc_msgSend_observedRepairActivity(*(void **)(a1 + 32), v3, v4, v5);

  if (v6)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v33 = 0;
      _os_log_fault_impl(&dword_18AF10000, v9, OS_LOG_TYPE_FAULT, "Activity triggered while another activity was running", v33, 2u);
    }
    uint64_t v13 = objc_msgSend_observedRepairActivity(*(void **)(a1 + 32), v10, v11, v12);
    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = NSStringFromSelector(sel_shouldDefer);
    objc_msgSend_removeObserver_forKeyPath_context_(v13, v16, v14, (uint64_t)v15, qword_1E91287E0);

    objc_msgSend_setObservedRepairActivity_(*(void **)(a1 + 32), v17, 0, v18);
    objc_msgSend_setRepairActivityHandler_(*(void **)(a1 + 32), v19, 0, v20);
  }
  objc_msgSend_setObservedRepairActivity_(*(void **)(a1 + 32), v7, *(void *)(a1 + 40), v8);
  uint64_t v24 = objc_msgSend_observedRepairActivity(*(void **)(a1 + 32), v21, v22, v23);
  uint64_t v25 = *(void *)(a1 + 32);
  uint64_t v26 = NSStringFromSelector(sel_shouldDefer);
  objc_msgSend_addObserver_forKeyPath_options_context_(v24, v27, v25, (uint64_t)v26, 0, qword_1E91287E0);

  objc_msgSend_setRepairActivityHandler_(*(void **)(a1 + 32), v28, *(void *)(a1 + 48), v29);
  return objc_msgSend_dispatchEvent_(*(void **)(a1 + 32), v30, 15, v31);
}

void sub_18B098FCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_observedRepairActivity(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = *(void **)(a1 + 40);

  if (v5 != v6)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_error_impl(&dword_18AF10000, v9, OS_LOG_TYPE_ERROR, "Critical error: received KVO call for scheduler activity, but activity is different from the persisted one", v10, 2u);
    }
  }
  if (*(unsigned char *)(a1 + 48)) {
    objc_msgSend_dispatchEvent_(*(void **)(a1 + 32), v7, 16, v8);
  }
}

void sub_18B099450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18B099474(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v12 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v13 = objc_msgSend_stateQueue(WeakRetained, v9, v10, v11);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    _DWORD v14[2] = sub_18B09957C;
    v14[3] = &unk_1E54633C8;
    id v15 = v6;
    id v16 = v12;
    id v17 = v5;
    objc_copyWeak(&v18, v7);
    dispatch_async(v13, v14);

    objc_destroyWeak(&v18);
  }
}

void sub_18B09957C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v5 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v24 = v20;
      _os_log_error_impl(&dword_18AF10000, v5, OS_LOG_TYPE_ERROR, "Error fetching repair container device identifier: %@", buf, 0xCu);
    }
    uint64_t v9 = *(void **)(a1 + 40);
    uint64_t v8 = (void **)(a1 + 40);
    objc_msgSend_setDeviceID_(v9, v6, 0, v7);
    objc_msgSend_setCachesDirectory_(*v8, v10, 0, v11);
    objc_msgSend_dispatchEvent_(*v8, v12, 5, v13);
  }
  else
  {
    objc_msgSend_setDeviceID_(*(void **)(a1 + 40), a2, *(void *)(a1 + 48), a4);
    id v17 = objc_msgSend_repairContainer(*(void **)(a1 + 40), v14, v15, v16);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = sub_18B099730;
    v21[3] = &unk_1E54633A0;
    objc_copyWeak(&v22, (id *)(a1 + 56));
    objc_msgSend_fetchFrameworkCachesDirectoryWithCompletionHandler_(v17, v18, (uint64_t)v21, v19);

    objc_destroyWeak(&v22);
  }
}

void sub_18B099714(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18B099730(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v11 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v12 = objc_msgSend_stateQueue(WeakRetained, v8, v9, v10);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18B099814;
    block[3] = &unk_1E54614E0;
    id v14 = v6;
    uint64_t v15 = v11;
    id v16 = v5;
    dispatch_async(v12, block);
  }
}

uint64_t sub_18B099814(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v5 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v16;
      _os_log_error_impl(&dword_18AF10000, v5, OS_LOG_TYPE_ERROR, "Error fetching repair container caches directory: %@", (uint8_t *)&v17, 0xCu);
    }
    objc_msgSend_setDeviceID_(*(void **)(a1 + 40), v6, 0, v7);
    objc_msgSend_setCachesDirectory_(*(void **)(a1 + 40), v8, 0, v9);
    return objc_msgSend_dispatchEvent_(*(void **)(a1 + 40), v10, 5, v11);
  }
  else
  {
    objc_msgSend_setCachesDirectory_(*(void **)(a1 + 40), a2, *(void *)(a1 + 48), a4);
    uint64_t v15 = *(void **)(a1 + 40);
    return objc_msgSend_dispatchEvent_(v15, v13, 4, v14);
  }
}

void sub_18B099A30(uint64_t a1, char a2, void *a3)
{
  id v10 = a3;
  uint64_t v7 = objc_msgSend_stateQueue(v10, v4, v5, v6);
  dispatch_assert_queue_V2(v7);

  if ((a2 & 0x2A) != 0) {
    objc_msgSend_dispatchEvent_(v10, v8, 6, v9);
  }
  else {
    objc_msgSend_dispatchEvent_(v10, v8, 7, v9);
  }
}

void sub_18B099D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, os_activity_scope_state_s state)
{
}

void sub_18B099D70(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = objc_msgSend_stateQueue(WeakRetained, v4, v5, v6);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18B099E48;
    block[3] = &unk_1E54633F0;
    void block[4] = v7;
    objc_copyWeak(v10, v2);
    v10[1] = *(id *)(a1 + 40);
    dispatch_async(v8, block);

    objc_destroyWeak(v10);
  }
}

void sub_18B099E48(uint64_t a1)
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Received account change notification, enqueueing", buf, 2u);
  }
  uint64_t v6 = objc_msgSend_scheduledAccountStatusCheck(*(void **)(a1 + 32), v3, v4, v5);

  if (v6)
  {
    id v10 = objc_msgSend_scheduledAccountStatusCheck(*(void **)(a1 + 32), v7, v8, v9);
    dispatch_block_cancel(v10);

    objc_msgSend_setScheduledAccountStatusCheck_(*(void **)(a1 + 32), v11, 0, v12);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_18B09A000;
  block[3] = &unk_1E54610B0;
  objc_copyWeak(&v22, (id *)(a1 + 40));
  dispatch_block_t v13 = dispatch_block_create((dispatch_block_flags_t)0, block);
  objc_msgSend_setScheduledAccountStatusCheck_(*(void **)(a1 + 32), v14, (uint64_t)v13, v15);
  dispatch_time_t v16 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
  uint64_t v20 = objc_msgSend_stateQueue(*(void **)(a1 + 32), v17, v18, v19);
  dispatch_after(v16, v20, v13);

  objc_destroyWeak(&v22);
}

void sub_18B099FEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18B09A000(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Acting on account change notification", v8, 2u);
  }
  objc_msgSend_checkAccountStatus(WeakRetained, v3, v4, v5);
  objc_msgSend_setScheduledAccountStatusCheck_(WeakRetained, v6, 0, v7);
}

void sub_18B09A2DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18B09A300(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v10 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v11 = objc_msgSend_stateQueue(WeakRetained, v7, v8, v9);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18B09A3CC;
    block[3] = &unk_1E5463440;
    id v13 = v5;
    uint64_t v14 = v10;
    uint64_t v15 = a2;
    dispatch_async(v11, block);
  }
}

uint64_t sub_18B09A3CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v5 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412290;
      uint64_t v13 = v11;
      _os_log_error_impl(&dword_18AF10000, v5, OS_LOG_TYPE_ERROR, "Error fetching account info in upload request manager: %@", (uint8_t *)&v12, 0xCu);
    }
    return objc_msgSend_dispatchEvent_(*(void **)(a1 + 40), v6, 10, v7);
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 40);
    if (*(void *)(a1 + 48) == 1) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = 9;
    }
    return objc_msgSend_dispatchEvent_(v9, a2, v10, a4);
  }
}

void sub_18B09A5FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18B09A620(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = WeakRetained;
  if (WeakRetained)
  {
    int v12 = objc_msgSend_stateQueue(WeakRetained, v8, v9, v10);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = sub_18B09A714;
    v13[3] = &unk_1E5463490;
    id v14 = v6;
    uint64_t v15 = v11;
    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = v5;
    dispatch_async(v12, v13);
  }
}

void sub_18B09A714(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_CKClientSuitableError(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_domain(v5, v6, v7, v8);
  if (objc_msgSend_isEqualToString_(v9, v10, @"CKErrorDomain", v11))
  {
    if (objc_msgSend_code(v5, v12, v13, v14) == 9)
    {

LABEL_6:
      objc_msgSend_dispatchEvent_(*(void **)(a1 + 40), v18, 9, v19);
      goto LABEL_23;
    }
    uint64_t v21 = objc_msgSend_code(v5, v15, v16, v17);

    if (v21 == 115) {
      goto LABEL_6;
    }
  }
  else
  {
  }
  uint64_t v23 = objc_msgSend_domain(v5, v18, v20, v19);
  if (objc_msgSend_isEqualToString_(v23, v24, @"CKErrorDomain", v25))
  {
    if (objc_msgSend_code(v5, v26, v27, v28) == 4)
    {

LABEL_18:
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      int v39 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
      {
        uint64_t v42 = *(void *)(a1 + 32);
        int v56 = 138412290;
        uint64_t v57 = v42;
        _os_log_impl(&dword_18AF10000, v39, OS_LOG_TYPE_INFO, "Error fetching user record ID in upload request manager, treating as network unreachable: %@", (uint8_t *)&v56, 0xCu);
      }
      objc_msgSend_dispatchEvent_(*(void **)(a1 + 40), v40, 7, v41);
      goto LABEL_23;
    }
    uint64_t v38 = objc_msgSend_code(v5, v29, v30, v31);

    if (v38 == 3) {
      goto LABEL_18;
    }
  }
  else
  {
  }
  if (v5)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v35 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v55 = *(void *)(a1 + 32);
      int v56 = 138412290;
      uint64_t v57 = v55;
      _os_log_error_impl(&dword_18AF10000, v35, OS_LOG_TYPE_ERROR, "Error fetching user record ID in upload request manager: %@", (uint8_t *)&v56, 0xCu);
    }
    objc_msgSend_dispatchEvent_(*(void **)(a1 + 40), v36, 11, v37);
  }
  else
  {
    uint64_t v43 = objc_msgSend_database(*(void **)(a1 + 48), v32, v33, v34);
    uint64_t v47 = objc_msgSend_currentUser(v43, v44, v45, v46);

    uint64_t v51 = *(void *)(a1 + 56);
    if (v51)
    {
      id v52 = objc_msgSend_database(*(void **)(a1 + 48), v48, v49, v50);
      objc_msgSend_setCurrentUser_(v52, v53, v51, v54);
    }
    if (!v47 || objc_msgSend_isEqual_(v47, v48, *(void *)(a1 + 56), v50)) {
      objc_msgSend_dispatchEvent_(*(void **)(a1 + 40), v48, 12, v50);
    }
    else {
      objc_msgSend_dispatchEvent_(*(void **)(a1 + 40), v48, 13, v50);
    }
  }
LABEL_23:
  objc_msgSend_invokeCallbackForOverridePoint_withError_onCallbackQueue_(*(void **)(a1 + 48), v22, 1, *(void *)(a1 + 32), 1);
}

void sub_18B09AB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18B09AB70(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = objc_msgSend_stateQueue(WeakRetained, v2, v3, v4);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_18B09AC08;
  v6[3] = &unk_1E5460350;
  v6[4] = WeakRetained;
  ck_call_or_dispatch_sync_if_not_key(v5, WeakRetained + 232, v6);
}

uint64_t sub_18B09AC08(uint64_t a1)
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Manually fetching and scheduling changes via notification", v7, 2u);
  }
  return objc_msgSend_manuallyTriggerUploadRequests(*(void **)(a1 + 32), v3, v4, v5);
}

void sub_18B09B6A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B09B808(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B09BB44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B09BD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B09BD3C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B09BEC8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 528) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B09C0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B09C0C0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B09C24C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B09C42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B09C444(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B09C5D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B09C7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B09C7C8(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

id CKSQLiteContainerAttribution_None(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_ActivitySharing(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Backup(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Bluetooth(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_CloudDocs(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_CloudPhotos(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Health(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_HomeKit(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_iAD(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_iWorkPages(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_iWorkNumbers(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_iWorkKeynote(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_KeyboardServices(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_KeychainSync(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_KeyValueService(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_MailDrop(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Memoji(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Messages(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Moments(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_News(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Notes(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_PhoneFaceTimeCallHistory(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_PhoneFaceTimeMessageStore(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_ProactivePredictions(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Reminders(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_SafariBookmarks(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_SafariHistory(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_SafariTabGroups(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Freeform(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Sharingd(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Siri(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_SocialGaming(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_TTYCallHistory(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Wallet(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_SiriProfile(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_DugongTesting(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

id CKSQLiteContainerAttribution_Events(objc_super *a1, const char *a2)
{
  uint64_t v2 = objc_msgSendSuper(a1, a2);

  return v2;
}

void sub_18B09F72C(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_fault_impl(&dword_18AF10000, v2, OS_LOG_TYPE_FAULT, "No container attribution function for attributionName=%@. Using None instead.", (uint8_t *)&v4, 0xCu);
  }
}

void sub_18B09FDE8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  if ((objc_msgSend_unsignedIntegerValue(a3, v5, v6, v7) & 0x80) != 0) {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v8, (uint64_t)v10, v9);
  }
}

void sub_18B0A06F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_orderAscendingByProperty_(v3, v4, @"expirationDate", v5);
  objc_msgSend_primaryKeyProperties(*(void **)(a1 + 32), v6, v7, v8);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFetchedProperties_(v3, v9, (uint64_t)v11, v10);
}

void sub_18B0A09EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0A0A10(void *a1, const char *a2)
{
  id v3 = (void *)a1[4];
  id v9 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_18B0A0AC0;
  v8[3] = &unk_1E5462368;
  uint64_t v4 = a1[6];
  void v8[4] = v3;
  v8[5] = v4;
  uint64_t v5 = objc_msgSend_deleteEntriesMatching_label_error_predicate_(v3, a2, 0, 0, &v9, v8);
  id v6 = v9;
  *(void *)(*(void *)(a1[5] + 8) + 24) = v5;

  return 0;
}

id sub_18B0A0AC0(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = sub_18B0A0BAC;
  v15[3] = &unk_1E5463650;
  uint64_t v4 = *(void *)(a1 + 40);
  v15[4] = v3;
  v15[5] = v4;
  uint64_t v5 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v3, a2, 0, 0, 0, v15);
  id v6 = (void *)MEMORY[0x1E4F28F60];
  uint64_t v10 = objc_msgSend_primaryKeyProperty(*(void **)(a1 + 32), v7, v8, v9);
  uint64_t v13 = objc_msgSend_predicateWithFormat_(v6, v11, @"%@ IN %@", v12, v10, v5);

  return v13;
}

void sub_18B0A0BAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend_orderAscendingByProperty_(v3, v4, @"expirationDate", v5);
  uint64_t v9 = objc_msgSend_primaryKeyProperties(*(void **)(a1 + 32), v6, v7, v8);
  objc_msgSend_setFetchedProperties_(v3, v10, (uint64_t)v9, v11);

  objc_msgSend_numberWithLongLong_(NSNumber, v12, *(void *)(a1 + 40), v13);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLimit_(v3, v14, (uint64_t)v16, v15);
}

void sub_18B0A0E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0A0E84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = objc_msgSend_oldestFirstEnumerator(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = objc_msgSend_nextObject(v8, v5, v6, v7);

    if (!v9) {
      break;
    }
    id v13 = (id)objc_msgSend_deleteObject_(*(void **)(a1 + 32), v11, (uint64_t)v9, v12);
    id v16 = (id)objc_msgSend_fetchAllProperties_(*(void **)(*(void *)(a1 + 32) + 104), v14, *(void *)(a1 + 40), v15);
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    uint64_t v20 = objc_msgSend_dataSize(*(void **)(a1 + 40), v17, v18, v19);
    unint64_t v24 = objc_msgSend_unsignedLongLongValue(v20, v21, v22, v23);
    unint64_t v25 = *(void *)(*(void *)(a1 + 32) + 128);
  }
  while (v24 > v25);

  return 0;
}

void sub_18B0A1154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0A1178(void *a1, const char *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v11 = @"EXPIRE_DATE";
  v12[0] = v3;
  uint64_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v12, (uint64_t)&v11, 1);
  uint64_t v5 = (void *)a1[5];
  id v10 = 0;
  uint64_t v7 = objc_msgSend_deleteEntriesMatching_label_error_predicate_(v5, v6, (uint64_t)v4, (uint64_t)off_1E5463698, &v10, &unk_1ED7EF158);
  id v8 = v10;
  *(void *)(*(void *)(a1[6] + 8) + 24) = v7;

  return 0;
}

uint64_t sub_18B0A1250(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"expirationDate < $EXPIRE_DATE", a4);
}

void sub_18B0A1408(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_trackingEntry(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(void *)(v6 + 120))
  {
    uint64_t v7 = (id)v6;
    uint64_t v11 = objc_msgSend_entryCount(v5, v8, v9, v10);
    unint64_t v15 = objc_msgSend_unsignedLongLongValue(v11, v12, v13, v14);
    unint64_t v16 = v7[15];

    if (v15 > v16) {
      goto LABEL_9;
    }
    uint64_t v6 = *(void *)(a1 + 32);
  }
  if (*(double *)(v6 + 136) == 0.0)
  {
LABEL_7:
    if (!*(void *)(v6 + 128)) {
      goto LABEL_14;
    }
    uint64_t v26 = (id)v6;
    uint64_t v30 = objc_msgSend_dataSize(v5, v27, v28, v29);
    unint64_t v34 = objc_msgSend_unsignedLongLongValue(v30, v31, v32, v33);
    unint64_t v35 = v26[16];

    if (v34 <= v35) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  id v17 = *(id *)(a1 + 40);
  uint64_t v21 = objc_msgSend_oldestExpireDate(v5, v18, v19, v20);
  objc_msgSend_timeIntervalSinceDate_(v21, v22, (uint64_t)v17, v23);
  double v25 = v24;

  if (v25 >= 0.0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v36 = *(void **)(a1 + 32);
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 3221225472;
  v49[2] = sub_18B0A1658;
  v49[3] = &unk_1E54636F8;
  v49[4] = v36;
  id v37 = v5;
  id v50 = v37;
  id v51 = *(id *)(a1 + 40);
  id v40 = (id)objc_msgSend_performTransaction_(v36, v38, (uint64_t)v49, v39);
  uint64_t v42 = *(double **)(a1 + 32);
  if (v42[17] != 0.0)
  {
    uint64_t v43 = objc_msgSend_minimumValueOfProperty_label_error_(v42, v41, @"expirationDate", (uint64_t)off_1E5463718, 0);
    id v45 = (id)objc_msgSend_updateEntryOldestExpireDate_oldestExpirationDate_(*(void **)(*(void *)(a1 + 32) + 104), v44, (uint64_t)v37, (uint64_t)v43);
    if (v43) {
      id v48 = (id)objc_msgSend_requestCallbackWithDate_coalescingInterval_minimumSeparation_(*(void **)(a1 + 32), v46, (uint64_t)v43, v47, *(double *)(*(void *)(a1 + 32) + 144), *(double *)(*(void *)(a1 + 32) + 144));
    }
  }
LABEL_14:
}

uint64_t sub_18B0A1658(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(double *)(v2 + 136) == 0.0) {
    goto LABEL_4;
  }
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  id v8 = objc_msgSend_oldestExpireDate(v3, v5, v6, v7);
  objc_msgSend_timeIntervalSinceDate_(v8, v9, (uint64_t)v4, v10);
  double v12 = v11;

  uint64_t v2 = *(void *)(a1 + 32);
  if (v12 >= 0.0)
  {
LABEL_4:
    int v15 = 0;
  }
  else
  {
    objc_msgSend_expireByTime_((void *)v2, v13, *(void *)(a1 + 48), v14);
    uint64_t v2 = *(void *)(a1 + 32);
    int v15 = 1;
  }
  if (*(void *)(v2 + 120))
  {
    unint64_t v16 = *(void **)(a1 + 40);
    id v17 = (id)v2;
    uint64_t v21 = objc_msgSend_entryCount(v16, v18, v19, v20);
    unint64_t v25 = objc_msgSend_unsignedLongLongValue(v21, v22, v23, v24);
    unint64_t v26 = v17[15];

    if (v25 > v26)
    {
      if (v15) {
        id v29 = (id)objc_msgSend_fetchAllProperties_(*(void **)(*(void *)(a1 + 32) + 104), v27, *(void *)(a1 + 40), v28);
      }
      objc_msgSend_expireByCount_(*(void **)(a1 + 32), v27, *(void *)(a1 + 40), v28);
      int v15 = 1;
    }
  }
  uint64_t v30 = *(void **)(a1 + 32);
  if (v30[16])
  {
    uint64_t v31 = *(void **)(a1 + 40);
    uint64_t v32 = v30;
    uint64_t v36 = objc_msgSend_dataSize(v31, v33, v34, v35);
    unint64_t v40 = objc_msgSend_unsignedLongLongValue(v36, v37, v38, v39);
    unint64_t v41 = v32[16];

    if (v40 > v41)
    {
      if (v15) {
        id v44 = (id)objc_msgSend_fetchAllProperties_(*(void **)(*(void *)(a1 + 32) + 104), v42, *(void *)(a1 + 40), v43);
      }
      objc_msgSend_expireByDataSize_(*(void **)(a1 + 32), v42, *(void *)(a1 + 40), v43);
    }
  }
  return 0;
}

uint64_t sub_18B0A1884(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_expire_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
  *(unsigned char *)(*(void *)(a1 + 32) + 113) = 0;
  return result;
}

uint64_t sub_18B0A192C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 113) = 0;
  return result;
}

uint64_t sub_18B0A1C98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (!a2) {
    uint64_t result = objc_msgSend_periodicExpire(*(void **)(result + 32), 0, a3, a4);
  }
  *(unsigned char *)(*(void *)(v4 + 32) + 112) = 0;
  return result;
}

id sub_18B0A1DD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v8.receiver = *(id *)(a1 + 40);
  v8.super_class = (Class)CKSQLiteCacheTable;
  uint64_t v6 = objc_msgSendSuper2(&v8, sel_insertObject_, v2);
  if (!v6) {
    objc_msgSend_transactionExpireCheck(*(void **)(a1 + 40), v3, v4, v5);
  }

  return v6;
}

id sub_18B0A1F78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 56);
  v10.receiver = *(id *)(a1 + 48);
  v10.super_class = (Class)CKSQLiteCacheTable;
  objc_super v8 = objc_msgSendSuper2(&v10, sel_insertObject_orUpdateProperties_label_, v2, v3, v4);
  if (!v8) {
    objc_msgSend_transactionExpireCheck(*(void **)(a1 + 48), v5, v6, v7);
  }

  return v8;
}

void sub_18B0A2170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B0A2188(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 64);
  v13.receiver = *(id *)(a1 + 56);
  v13.super_class = (Class)CKSQLiteCacheTable;
  id v14 = 0;
  id v7 = objc_msgSendSuper2(&v13, sel_setProperties_valuesToStore_inEntriesMatching_label_error_predicate_, v2, v3, v4, v5, &v14, v6);
  id v11 = v14;
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v7;
  if (!v11) {
    objc_msgSend_transactionExpireCheck(*(void **)(a1 + 56), v8, v9, v10);
  }

  return v11;
}

void *sub_18B0A23B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0A2594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0A25AC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0A2738(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0A2918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0A2930(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t CKIndexedArrayKey(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_stringWithFormat_(NSString, a2, @"%@[%ld..<%ld]", a4, a1, a2, a3);
}

BOOL CKIsIndexedArrayKey(void *a1)
{
  uint64_t v3 = 0;
  id v1 = CKProcessIndexedArrayKey(a1, &v3, 0, 0);
  return v3 != 0;
}

void sub_18B0A3600()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc(MEMORY[0x1E4F28FD8]);
  id v6 = 0;
  uint64_t v2 = objc_msgSend_initWithPattern_options_error_(v0, v1, @"^                                                      (.{1,255})                                             \\[                                                       (-?\\d{1,8})                                           (\\.\\.\\<|\\.\\.\\.)                                  (-?\\d{1,8})                                        \\]                                                    $", 2, &v6);
  id v3 = v6;
  uint64_t v4 = (void *)qword_1EB279BF8;
  qword_1EB279BF8 = v2;

  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v5 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543618;
      uint64_t v8 = @"^                                                      (.{1,255})                                             \\[                                                       (-?\\d{1,8})                                           (\\.\\.\\<|\\.\\.\\.)                                  (-?\\d{1,8})                                        \\]                                                    $";
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_fault_impl(&dword_18AF10000, v5, OS_LOG_TYPE_FAULT, "Couldn't initialize indexed list key regular expression with pattern \"%{public}@\": %@", buf, 0x16u);
    }
  }
}

id CKValidateIndexedArrayKeys(void *a1, int a2)
{
  id v3 = a1;
  if (!objc_msgSend_count(v3, v4, v5, v6)) {
    goto LABEL_49;
  }
  char v9 = 0;
  unint64_t v10 = 0;
  do
  {
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v3, v7, v10, v8);
    id v70 = 0;
    double v12 = CKProcessIndexedArrayKey(v11, &v70, &v72, &v71);
    id v13 = v70;

    if (v12)
    {
      id v63 = v12;
LABEL_52:

      goto LABEL_53;
    }
    if (v13)
    {
      char v9 = 1;
      if (a2)
      {
        if (!v71)
        {
          uint64_t v64 = objc_msgSend_objectAtIndexedSubscript_(v3, v14, v10, v15);
          objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v65, @"CKErrorDomain", 12, @"indexed list key (%@) has zero length", v64);
          id v63 = (id)objc_claimAutoreleasedReturnValue();

          goto LABEL_52;
        }
      }
    }

    ++v10;
  }
  while (v10 < objc_msgSend_count(v3, v16, v17, v18));
  if ((v9 & 1) == 0)
  {
LABEL_49:
    id v63 = 0;
    goto LABEL_54;
  }
  objc_msgSend_set(MEMORY[0x1E4F1CA80], v7, v19, v8);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v23 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v20, v21, v22);
  if (!objc_msgSend_count(v3, v24, v25, v26))
  {
LABEL_48:

    id v63 = 0;
    goto LABEL_53;
  }
  uint64_t v29 = 0;
  uint64_t v67 = v23;
  while (1)
  {
    objc_msgSend_objectAtIndexedSubscript_(v3, v27, v29, v28);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    id v69 = 0;
    uint64_t v31 = CKProcessIndexedArrayKey(v30, &v69, &v72, &v71);
    id v32 = v69;
    uint64_t v33 = v32;
    if (v31)
    {
      id v63 = v31;
      goto LABEL_61;
    }
    id v34 = v32 ? v32 : v30;
    id v35 = v34;

    if (!v33) {
      break;
    }
    if (objc_msgSend_containsObject_(v13, v36, (uint64_t)v33, v37)) {
      goto LABEL_60;
    }
    unint64_t v40 = objc_msgSend_objectForKey_(v23, v38, (uint64_t)v33, v39);

    if (!v40)
    {
      id v44 = objc_msgSend_indexSet(MEMORY[0x1E4F28E60], v41, v42, v43);
      objc_msgSend_setObject_forKeyedSubscript_(v23, v45, (uint64_t)v44, (uint64_t)v33);
    }
    uint64_t v46 = objc_msgSend_objectForKeyedSubscript_(v23, v41, (uint64_t)v33, v43);
    id v48 = v46;
    if (v72 < 0)
    {
      if (v71 >= ~v72) {
        uint64_t v55 = ~v72;
      }
      else {
        uint64_t v55 = v71;
      }
      uint64_t v56 = v71 + v72;
      if (v71 + v72 < 0 != __OFADD__(v71, v72)) {
        uint64_t v56 = -1;
      }
      uint64_t v57 = v56 + 1;
      if (v55 < 1) {
        uint64_t v49 = 1;
      }
      else {
        uint64_t v49 = 2 * v55;
      }
      if (v55 >= 1) {
        uint64_t v50 = 2 * v72 - 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v50 = (2 * v72) ^ 0x8000000000000000;
      }
      BOOL v51 = v57 != 0;
      uint64_t v68 = 2 * v57;
    }
    else
    {
      uint64_t v68 = 0;
      if (v71) {
        uint64_t v49 = 2 * v71 - 1;
      }
      else {
        uint64_t v49 = 1;
      }
      if (v71) {
        uint64_t v50 = (2 * v72) | 1;
      }
      else {
        uint64_t v50 = 2 * v72;
      }
      BOOL v51 = 0;
    }
    if (objc_msgSend_intersectsIndexesInRange_(v46, v47, v50, v49))
    {
LABEL_58:
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v58, @"CKErrorDomain", 12, @"Indexed list key (%@) overlaps with existing indexed list key", v30);
      id v63 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v23 = v67;
      goto LABEL_61;
    }
    objc_msgSend_addIndexesInRange_(v48, v58, v50, v49);
    if (v51)
    {
      if (objc_msgSend_intersectsIndexesInRange_(v48, v59, 0, v68)) {
        goto LABEL_58;
      }
      objc_msgSend_addIndexesInRange_(v48, v58, 0, v68);
    }

    uint64_t v23 = v67;
LABEL_47:

    if (++v29 >= (unint64_t)objc_msgSend_count(v3, v60, v61, v62)) {
      goto LABEL_48;
    }
  }
  id v52 = objc_msgSend_objectForKey_(v23, v36, (uint64_t)v30, v37);
  if (!v52)
  {
    objc_msgSend_addObject_(v13, v53, (uint64_t)v30, v54);
    uint64_t v33 = v30;
    goto LABEL_47;
  }

LABEL_60:
  objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v38, @"CKErrorDomain", 12, @"Cannot mix indexed and non-indexed list keys (%@)", v30);
  id v63 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v33 = v35;
LABEL_61:

LABEL_53:
LABEL_54:

  return v63;
}

void sub_18B0A3D94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B0A3DA8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_18B0A3DB0(a3);
}

id sub_18B0A3DB0(void *a1)
{
  id v1 = a1;
  if (!CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9()
    || !objc_msgSend_conformsToProtocol_(v1, v2, (uint64_t)&unk_1ED848860, v3))
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v6 = objc_msgSend_CKMap_(v1, v4, (uint64_t)&unk_1ED7EC108, v5);
    unint64_t v10 = objc_msgSend_copy(v6, v7, v8, v9);

    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    id v13 = (id)objc_msgSend_copyWithZone_(v1, v11, 0, v12);
  }
  else {
LABEL_6:
  }
    id v13 = v1;
  unint64_t v10 = v13;
LABEL_8:

  return v10;
}

void sub_18B0A3F64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B0A3F78(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_18B0A3DB0(a3);
}

void sub_18B0A4054(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A4150(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A41E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A42B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A4DDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A4DFC(void *a1, void *a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v7 = v5;
      uint64_t v11 = objc_msgSend_recordID(v7, v8, v9, v10);

      if (v11)
      {
LABEL_20:

        goto LABEL_21;
      }
      uint64_t v15 = objc_msgSend_recordID(a1, v12, v13, v14);
      objc_msgSend_setRecordID_(v7, v16, (uint64_t)v15, v17);
LABEL_5:

      goto LABEL_20;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v7 = v5;
      uint64_t v21 = objc_msgSend_valueID(v7, v18, v19, v20);

      if (v21) {
        goto LABEL_20;
      }
      uint64_t v22 = [CKMergeableValueID alloc];
      uint64_t v26 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v23, v24, v25);
      id v30 = objc_msgSend_UUIDString(v26, v27, v28, v29);
      id v34 = objc_msgSend_recordID(a1, v31, v32, v33);
      uint64_t isEncrypted = objc_msgSend_isEncrypted(a1, v35, v36, v37);
      uint64_t v15 = objc_msgSend_initWithName_recordID_key_encrypted_(v22, v39, (uint64_t)v30, (uint64_t)v34, v6, isEncrypted);

      objc_msgSend_setValueID_(v7, v40, (uint64_t)v15, v41);
      objc_msgSend_setIsValueIDKnownToServer_(v7, v42, 0, v43);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v44 = ck_log_facility_distributed_sync;
      if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v57 = v15;
        _os_log_impl(&dword_18AF10000, v44, OS_LOG_TYPE_INFO, "Assigning new mergeable value ID %@", buf, 0xCu);
      }
      goto LABEL_5;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id v7 = v5;
      uint64_t v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v45, (uint64_t)&v51, (uint64_t)v55, 16);
      if (v46)
      {
        uint64_t v47 = v46;
        uint64_t v48 = *(void *)v52;
        do
        {
          for (uint64_t i = 0; i != v47; ++i)
          {
            if (*(void *)v52 != v48) {
              objc_enumerationMutation(v7);
            }
            sub_18B0A4DFC(a1, *(void *)(*((void *)&v51 + 1) + 8 * i), v6);
          }
          uint64_t v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v50, (uint64_t)&v51, (uint64_t)v55, 16);
        }
        while (v47);
      }
      goto LABEL_20;
    }
  }
LABEL_21:
}

void sub_18B0A5228(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A52B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A5338(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A53BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0A58AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_18B0A59D4(uint64_t a1)
{
  unsigned __int8 v2 = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  return v2;
}

id sub_18B0A5A28()
{
  if (qword_1EB279C40 != -1) {
    dispatch_once(&qword_1EB279C40, &unk_1ED7EC128);
  }
  id v0 = (void *)qword_1EB279C38;

  return v0;
}

void sub_18B0A5B84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A5C8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A62D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

id sub_18B0A6684(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [CKEncryptedData alloc];
  id v7 = objc_msgSend_initWithValue_(v4, v5, (uint64_t)v3, v6);

  sub_18B0A66F4(*(void *)(a1 + 32), v7, *(void **)(a1 + 40));

  return v7;
}

void sub_18B0A66F4(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v8 = a3;
  if (a1)
  {
    uint64_t v9 = objc_msgSend_data(v17, v5, v6, v7);
    unint64_t v13 = objc_msgSend_length(v9, v10, v11, v12);

    if (v13 >= 0x6400001)
    {
      uint64_t v14 = [CKException alloc];
      id v16 = (id)objc_msgSend_initWithName_format_(v14, v15, *MEMORY[0x1E4F1C3C8], @"Plaintext is too large in size for key %@", v8);
      objc_exception_throw(v16);
    }
  }
}

void sub_18B0A764C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0A78C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_18B0A78E4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v6 + 40);
  id v8 = objc_msgSend_packageWithPackage_error_(CKPackage, v7, a3, (uint64_t)&obj);
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v8)
  {
    objc_msgSend_close(v8, v9, v10, v11);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v12, (uint64_t)v8, (uint64_t)v5);
  }

  return v8 == 0;
}

void sub_18B0A7F40(uint64_t a1, uint64_t a2, void *a3)
{
  id v22 = a3;
  uint64_t v6 = objc_msgSend_deltasToSave(v22, v3, v4, v5);
  uint64_t v10 = objc_msgSend_allObjects(v6, v7, v8, v9);
  uint64_t v14 = objc_msgSend_pendingReplacementRequests(v22, v11, v12, v13);
  uint64_t v18 = objc_msgSend_copy(v14, v15, v16, v17);
  objc_msgSend_didSaveDeltas_replacementRequests_(v22, v19, (uint64_t)v10, (uint64_t)v18);

  objc_msgSend_setIsValueIDKnownToServer_(v22, v20, 1, v21);
}

void sub_18B0A83B0(uint64_t a1, void *a2, unint64_t a3)
{
  id v13 = a2;
  if (objc_msgSend_count(*(void **)(a1 + 32), v5, v6, v7) > a3)
  {
    uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v8, a3, v9);
    objc_msgSend_copyServerFieldsFromStreamingAsset_(v10, v11, (uint64_t)v13, v12);
  }
}

void sub_18B0A8508(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A8630(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A86EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A9A00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A9AF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0A9F44(uint64_t a1, void *a2, void *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v44 = a3;
  id v5 = v4;
  objc_sync_enter(v5);
  uint64_t v6 = (void *)MEMORY[0x1E4F1CA80];
  id v50 = v5;
  uint64_t v10 = objc_msgSend_allKeys(v5, v7, v8, v9);
  id v45 = objc_msgSend_setWithArray_(v6, v11, (uint64_t)v10, v12);

  uint64_t v49 = objc_msgSend_changedKeysSet(v50, v13, v14, v15);
  uint64_t v20 = objc_msgSend_setByAddingObjectsFromSet_(v45, v16, (uint64_t)v49, v17);
  if (v44)
  {
    objc_msgSend_stringWithFormat_(NSString, v18, @" (%@)", v19, v44);
    uint64_t v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v48 = &stru_1ED7F5C98;
  }
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id obj = v20;
  uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v21, (uint64_t)&v51, (uint64_t)v55, 16);
  if (v24)
  {
    uint64_t v25 = *(void *)v52;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v52 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v27 = *(void *)(*((void *)&v51 + 1) + 8 * i);
        uint64_t v28 = objc_msgSend_valueForKey_(v50, v22, v27, v23);
        if (objc_msgSend_containsObject_(v49, v29, v27, v30)) {
          uint64_t v31 = @" (modified)";
        }
        else {
          uint64_t v31 = &stru_1ED7F5C98;
        }
        if (objc_opt_respondsToSelector())
        {
          id v32 = v28;
          uint64_t v33 = *(void **)(a1 + 32);
          id v34 = CKStringWithObject(v32);
          uint64_t v38 = objc_msgSend_objCType(v32, v35, v36, v37);
          objc_msgSend_appendFormat_(v33, v39, @"\t%@%@%@ -> %@ (type %s)\n", v40, v27, v31, v48, v34, v38);
        }
        else
        {
          uint64_t v41 = *(void **)(a1 + 32);
          CKStringWithObject(v28);
          id v32 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend_appendFormat_(v41, v42, @"\t%@%@%@ -> %@\n", v43, v27, v31, v48, v32);
        }
      }
      uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v22, (uint64_t)&v51, (uint64_t)v55, 16);
    }
    while (v24);
  }

  objc_sync_exit(v50);
}

void sub_18B0AA208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id obj)
{
}

void sub_18B0AA518(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AA7CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

char *sub_18B0AA944(char *a1, void *a2, void *a3)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v9 = a3;
  if (!a1) {
    goto LABEL_18;
  }
  if (qword_1EB279C10 != -1) {
    dispatch_once(&qword_1EB279C10, &unk_1ED7EC448);
  }
  unint64_t v10 = objc_msgSend_length(v9, v6, v7, v8);
  unint64_t v11 = v10 + 2;
  if (v10 >= 0x80)
  {
    do
    {
      ++v11;
      unint64_t v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v16 = objc_msgSend_length(v5, v13, v14, v15);
    unint64_t v17 = v16 + 2;
    if (v16 >= 0x80)
    {
      do
      {
        ++v17;
        unint64_t v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
    }
LABEL_15:
    v11 += v17;
    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
LABEL_11:
    v11 += 10;
    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v22 = objc_msgSend_length(v5, v19, v20, v21);
    unint64_t v17 = v22 + 2;
    if (v22 >= 0x80)
    {
      do
      {
        ++v17;
        unint64_t v23 = v22 >> 14;
        v22 >>= 7;
      }
      while (v23);
    }
    goto LABEL_15;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v29 = qword_1EB279C08 + v11;
    objc_msgSend_recordID(a1, v26, v27, v28);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
    unint64_t v34 = objc_msgSend_size(v30, v31, v32, v33);
    unint64_t v35 = v34 + 2;
    if (v34 >= 0x80)
    {
      do
      {
        ++v35;
        unint64_t v36 = v34 >> 14;
        v34 >>= 7;
      }
      while (v36);
    }
    unint64_t v11 = v29 + v35;
LABEL_27:

    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_recordID(v5, v37, v38, v39);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
    unint64_t v43 = objc_msgSend_size(v30, v40, v41, v42);
    unint64_t v44 = v43 + 2;
    if (v43 >= 0x80)
    {
      do
      {
        ++v44;
        unint64_t v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
    }
    v11 += v44;
    goto LABEL_27;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    goto LABEL_11;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v11 += 92;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      id v46 = v5;
      uint64_t v48 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v152, (uint64_t)v158, 16);
      if (v48)
      {
        uint64_t v49 = v48;
        uint64_t v50 = *(void *)v153;
        do
        {
          for (uint64_t i = 0; i != v49; ++i)
          {
            if (*(void *)v153 != v50) {
              objc_enumerationMutation(v46);
            }
            v11 += sub_18B0AA944(a1, *(void *)(*((void *)&v152 + 1) + 8 * i), v9);
          }
          uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v52, (uint64_t)&v152, (uint64_t)v158, 16);
        }
        while (v49);
      }

      goto LABEL_16;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v56 = objc_msgSend_data(v5, v53, v54, v55);
      unint64_t v60 = objc_msgSend_length(v56, v57, v58, v59);
      unint64_t v61 = v60 + 2;
      if (v60 >= 0x80)
      {
        do
        {
          ++v61;
          unint64_t v62 = v60 >> 14;
          v60 >>= 7;
        }
        while (v62);
      }

      v11 += v61 + 26;
      goto LABEL_16;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v81 = v5;
          uint64_t v85 = objc_msgSend_deltasToSave(v81, v82, v83, v84);
          uint64_t v89 = objc_msgSend_allObjects(v85, v86, v87, v88);
          __int16 v93 = objc_msgSend_mutableCopy(v89, v90, v91, v92);
          uint64_t v94 = v93;
          if (v93) {
            id v95 = v93;
          }
          else {
            id v95 = (id)objc_opt_new();
          }
          uint64_t v96 = v95;

          long long v150 = 0u;
          long long v151 = 0u;
          long long v148 = 0u;
          long long v149 = 0u;
          v142 = v81;
          uint64_t v100 = objc_msgSend_pendingReplacementRequests(v81, v97, v98, v99);
          uint64_t v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(v100, v101, (uint64_t)&v148, (uint64_t)v157, 16);
          if (v102)
          {
            uint64_t v106 = v102;
            uint64_t v107 = *(void *)v149;
            do
            {
              for (uint64_t j = 0; j != v106; ++j)
              {
                if (*(void *)v149 != v107) {
                  objc_enumerationMutation(v100);
                }
                uint64_t v109 = objc_msgSend_replacementDeltas(*(void **)(*((void *)&v148 + 1) + 8 * j), v103, v104, v105);
                objc_msgSend_addObjectsFromArray_(v96, v110, (uint64_t)v109, v111);
              }
              uint64_t v106 = objc_msgSend_countByEnumeratingWithState_objects_count_(v100, v103, (uint64_t)&v148, (uint64_t)v157, 16);
            }
            while (v106);
          }

          long long v146 = 0u;
          long long v147 = 0u;
          long long v144 = 0u;
          long long v145 = 0u;
          id v112 = v96;
          uint64_t v114 = objc_msgSend_countByEnumeratingWithState_objects_count_(v112, v113, (uint64_t)&v144, (uint64_t)v156, 16);
          if (v114)
          {
            uint64_t v118 = v114;
            uint64_t v119 = *(void *)v145;
            do
            {
              for (uint64_t k = 0; k != v118; ++k)
              {
                if (*(void *)v145 != v119) {
                  objc_enumerationMutation(v112);
                }
                uint64_t v121 = *(void **)(*((void *)&v144 + 1) + 8 * k);
                uint64_t v122 = objc_msgSend_asset(v121, v115, v116, v117);

                uint64_t v124 = qword_1EB279C08;
                if (!v122) {
                  uint64_t v124 = 0;
                }
                unint64_t v125 = v124 + v11;
                uint64_t v143 = 0;
                int v126 = objc_msgSend_protobufSize_error_(v121, v123, (uint64_t)&v143, 0);
                uint64_t v127 = v143;
                if (!v126) {
                  uint64_t v127 = 0;
                }
                unint64_t v11 = v125 + v127;
              }
              uint64_t v118 = objc_msgSend_countByEnumeratingWithState_objects_count_(v112, v115, (uint64_t)&v144, (uint64_t)v156, 16);
            }
            while (v118);
          }

          v131 = objc_msgSend_valueID(v142, v128, v129, v130);
          v135 = objc_msgSend_name(v131, v132, v133, v134);
          unint64_t v139 = objc_msgSend_length(v135, v136, v137, v138);
          unint64_t v140 = v139 + 2;
          if (v139 >= 0x80)
          {
            do
            {
              ++v140;
              unint64_t v141 = v139 >> 14;
              v139 >>= 7;
            }
            while (v141);
          }

          v11 += v140 + 3;
        }
        goto LABEL_16;
      }
      id v30 = v5;
      int v66 = objc_msgSend_rootDatabasePath(v30, v63, v64, v65);
      unint64_t v70 = objc_msgSend_length(v66, v67, v68, v69);
      unint64_t v71 = v70 + 2;
      if (v70 >= 0x80)
      {
        do
        {
          ++v71;
          unint64_t v72 = v70 >> 14;
          v70 >>= 7;
        }
        while (v72);
      }
      unint64_t v73 = v71 + v11;

      if (objc_msgSend_sectionCount(v30, v74, v75, v76)) {
        uint64_t v80 = objc_msgSend_sectionCount(v30, v77, v78, v79);
      }
      else {
        uint64_t v80 = 3;
      }
      unint64_t v11 = v73 + qword_1EB279C08 * v80;
      goto LABEL_27;
    }
    v11 += 3;
  }
LABEL_16:
  a1 = (char *)(v11 + 2);
  if (v11 >= 0x80)
  {
    do
    {
      ++a1;
      unint64_t v24 = v11 >> 14;
      v11 >>= 7;
    }
    while (v24);
  }
LABEL_18:

  return a1;
}

void sub_18B0AAFE8()
{
  qword_1EB279C08 += 134;
}

void sub_18B0AB3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_18B0AB420()
{
  qword_1EB279C18 += 134;
}

void sub_18B0AB6C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AB74C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AB7D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AB874(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AB948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0ABE30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0ABF0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0ABFFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B0AC010(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_18B0A3DB0(a3);
}

void sub_18B0AC0E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AC1B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AC760(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B0AC854(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_valueForKey_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  return v6;
}

void sub_18B0AC93C(uint64_t a1, const char *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = objc_msgSend_expressionForBlock_arguments_(MEMORY[0x1E4F28C68], a2, (uint64_t)&unk_1ED7EC488, 0);
  v11[0] = v2;
  id v5 = objc_msgSend_expressionForConstantValue_(MEMORY[0x1E4F28C68], v3, @"cdl", v4);
  v11[1] = v5;
  uint64_t v7 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v6, (uint64_t)v11, 2);

  uint64_t v9 = objc_msgSend_expressionForFunction_arguments_(MEMORY[0x1E4F28C68], v8, @"tokenize:using:", (uint64_t)v7);
  unint64_t v10 = (void *)qword_1EB279C28;
  qword_1EB279C28 = v9;
}

uint64_t sub_18B0ACA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel__allStrings, a3, a4);
}

uint64_t sub_18B0ACB68(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    uint64_t hasAssetBackedDeltas = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t hasAssetBackedDeltas = objc_msgSend_hasAssetBackedDeltas(v3, v6, v7, v8);
    }
    else {
      uint64_t hasAssetBackedDeltas = 0;
    }
  }

  return hasAssetBackedDeltas;
}

uint64_t sub_18B0ACC04(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t hasAssetBackedDeltas = objc_msgSend_hasAssetBackedDeltas(v3, v4, v5, v6);
  }
  else {
    uint64_t hasAssetBackedDeltas = 0;
  }

  return hasAssetBackedDeltas;
}

uint64_t sub_18B0ACD14()
{
  return 1;
}

uint64_t sub_18B0ACE4C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v6 = objc_msgSend_firstObject(v1, v3, v4, v5);
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
    }
    else
    {
      char isKindOfClass = 0;
    }
  }

  return isKindOfClass & 1;
}

uint64_t sub_18B0AD064(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t hasAssetBackedDeltas = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t hasAssetBackedDeltas = objc_msgSend_hasAssetBackedDeltas(v3, v6, v7, v8);
    }
    else {
      uint64_t hasAssetBackedDeltas = 0;
    }
  }

  return hasAssetBackedDeltas;
}

uint64_t sub_18B0AD28C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t hasAssetBackedDeltas = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t hasAssetBackedDeltas = objc_msgSend_hasAssetBackedDeltas(v3, v6, v7, v8);
    }
    else {
      uint64_t hasAssetBackedDeltas = 0;
    }
  }

  return hasAssetBackedDeltas;
}

uint64_t sub_18B0AD4F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (objc_msgSend_needsDecryption(v3, v6, v7, v8) & 1) != 0)
  {
    uint64_t hasAssetBackedDeltas = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t hasAssetBackedDeltas = objc_msgSend_hasAssetBackedDeltas(v3, v9, v10, v11);
    }
    else {
      uint64_t hasAssetBackedDeltas = 0;
    }
  }

  return hasAssetBackedDeltas;
}

uint64_t sub_18B0AD5B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v4 = objc_msgSend_needsDecryption(v3, v5, v6, v7);
    }
    else {
      uint64_t v4 = 0;
    }
  }

  return v4;
}

uint64_t sub_18B0AD774()
{
  return 1;
}

uint64_t sub_18B0AD8BC()
{
  return 1;
}

void sub_18B0ADA58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0ADCEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0ADF78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AE164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0AEADC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0AFB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_18B0AFB4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v34 = v4;
      id v5 = v4;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      uint64_t v9 = objc_msgSend_deltasToSave(v5, v6, v7, v8);
      v44[0] = v9;
      uint64_t v33 = v5;
      id v13 = objc_msgSend_unmergedDeltas(v5, v10, v11, v12);
      v44[1] = v13;
      uint64_t v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v14, (uint64_t)v44, 2);

      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v39, (uint64_t)v45, 16);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v40;
        do
        {
          uint64_t v20 = 0;
          do
          {
            if (*(void *)v40 != v19) {
              objc_enumerationMutation(v15);
            }
            uint64_t v21 = *(void **)(*((void *)&v39 + 1) + 8 * v20);
            long long v35 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            id v22 = v21;
            uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v35, (uint64_t)v43, 16);
            if (v24)
            {
              uint64_t v28 = v24;
              uint64_t v29 = *(void *)v36;
              do
              {
                uint64_t v30 = 0;
                do
                {
                  if (*(void *)v36 != v29) {
                    objc_enumerationMutation(v22);
                  }
                  uint64_t v31 = objc_msgSend_asset(*(void **)(*((void *)&v35 + 1) + 8 * v30), v25, v26, v27);

                  if (v31) {
                    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                  }
                  ++v30;
                }
                while (v28 != v30);
                uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v25, (uint64_t)&v35, (uint64_t)v43, 16);
              }
              while (v28);
            }

            ++v20;
          }
          while (v20 != v18);
          uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v32, (uint64_t)&v39, (uint64_t)v45, 16);
        }
        while (v18);
      }

      id v4 = v34;
    }
  }
}

void sub_18B0AFEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_18B0AFF18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_size(v4, v5, v6, v7);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v42 = v4;
      id v8 = v4;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      uint64_t v12 = objc_msgSend_deltasToSave(v8, v9, v10, v11);
      v53[0] = v12;
      long long v41 = v8;
      unint64_t v16 = objc_msgSend_unmergedDeltas(v8, v13, v14, v15);
      v53[1] = v16;
      uint64_t v18 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v17, (uint64_t)v53, 2);

      id obj = v18;
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v48, (uint64_t)v54, 16);
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = *(void *)v49;
        do
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v49 != v22) {
              objc_enumerationMutation(obj);
            }
            uint64_t v24 = *(void **)(*((void *)&v48 + 1) + 8 * i);
            long long v44 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            id v25 = v24;
            uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v44, (uint64_t)v52, 16);
            if (v27)
            {
              uint64_t v31 = v27;
              uint64_t v32 = *(void *)v45;
              do
              {
                for (uint64_t j = 0; j != v31; ++j)
                {
                  if (*(void *)v45 != v32) {
                    objc_enumerationMutation(v25);
                  }
                  id v34 = *(void **)(*((void *)&v44 + 1) + 8 * j);
                  long long v35 = objc_msgSend_asset(v34, v28, v29, v30);

                  if (v35)
                  {
                    long long v36 = objc_msgSend_asset(v34, v28, v29, v30);
                    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_size(v36, v37, v38, v39);
                  }
                }
                uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v44, (uint64_t)v52, 16);
              }
              while (v31);
            }
          }
          uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v48, (uint64_t)v54, 16);
        }
        while (v21);
      }

      id v4 = v42;
    }
  }
}

uint64_t sub_18B0B02D4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_setRequestOptions_(a3, a2, *(void *)(a1 + 32), a4);
}

uint64_t sub_18B0B0388(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_releaseDB(a3, a2, (uint64_t)a3, a4);
}

uint64_t sub_18B0B0434(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_removeDB(a3, a2, (uint64_t)a3, a4);
}

void sub_18B0B0634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0B0654(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v17 = 0;
  int v11 = objc_msgSend_claimOwnershipWithError_(v8, v9, (uint64_t)&v17, v10);
  id v14 = v17;
  if (v11)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v12, (uint64_t)v8, v13);
    uint64_t v15 = *(void *)(a1 + 48);
    if (!v15 || ((*(uint64_t (**)(uint64_t, id, id))(v15 + 16))(v15, v7, v8) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    *a4 = 1;
    goto LABEL_8;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  objc_msgSend_addObject_(*(void **)(a1 + 40), v12, (uint64_t)v8, v13);
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16 && (*(unsigned int (**)(uint64_t, id, id, id))(v16 + 16))(v16, v7, v8, v14)) {
    goto LABEL_7;
  }
LABEL_8:
}

uint64_t sub_18B0B08D4()
{
  return 1;
}

uint64_t sub_18B0B097C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_hasAssetBackedDeltas(a3, a2, (uint64_t)a3, a4);
}

BOOL sub_18B0B0C34(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v7 = objc_msgSend_deltasToSave(v3, v4, v5, v6);
  if (objc_msgSend_count(v7, v8, v9, v10))
  {
    BOOL v14 = 1;
  }
  else
  {
    uint64_t v15 = objc_msgSend_pendingReplacementRequests(v3, v11, v12, v13);
    BOOL v14 = objc_msgSend_count(v15, v16, v17, v18) != 0;
  }
  return v14;
}

void sub_18B0B0DA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v8 = objc_msgSend_deltasToSave(v4, v5, v6, v7);
  uint64_t v12 = objc_msgSend_allObjects(v8, v9, v10, v11);
  uint64_t v16 = objc_msgSend_mutableCopy(v12, v13, v14, v15);

  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  uint64_t v20 = objc_msgSend_pendingReplacementRequests(v4, v17, v18, v19);
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v73, (uint64_t)v82, 16);
  if (v22)
  {
    uint64_t v26 = v22;
    uint64_t v27 = *(void *)v74;
    do
    {
      for (uint64_t i = 0; i != v26; ++i)
      {
        if (*(void *)v74 != v27) {
          objc_enumerationMutation(v20);
        }
        uint64_t v29 = objc_msgSend_replacementDeltas(*(void **)(*((void *)&v73 + 1) + 8 * i), v23, v24, v25);
        objc_msgSend_addObjectsFromArray_(v16, v30, (uint64_t)v29, v31);
      }
      uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v23, (uint64_t)&v73, (uint64_t)v82, 16);
    }
    while (v26);
  }

  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id obj = v16;
  uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v32, (uint64_t)&v69, (uint64_t)v81, 16);
  if (v33)
  {
    uint64_t v38 = v33;
    uint64_t v39 = *(void *)v70;
    *(void *)&long long v37 = 138412546;
    long long v67 = v37;
    do
    {
      uint64_t v40 = 0;
      do
      {
        if (*(void *)v70 != v39) {
          objc_enumerationMutation(obj);
        }
        long long v41 = *(void **)(*((void *)&v69 + 1) + 8 * v40);
        uint64_t v42 = objc_msgSend_valueID(v41, v34, v35, v36, v67);
        if (!v42) {
          goto LABEL_15;
        }
        long long v46 = (void *)v42;
        long long v47 = objc_msgSend_valueID(v41, v43, v44, v45);
        long long v51 = objc_msgSend_valueID(v4, v48, v49, v50);
        char isEqual = objc_msgSend_isEqual_(v47, v52, (uint64_t)v51, v53);

        if ((isEqual & 1) == 0)
        {
LABEL_15:
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v55 = (void *)ck_log_facility_distributed_sync;
          if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
          {
            uint64_t v59 = v55;
            id v63 = objc_msgSend_valueID(v4, v60, v61, v62);
            *(_DWORD *)buf = v67;
            uint64_t v78 = v63;
            __int16 v79 = 2112;
            uint64_t v80 = v41;
            _os_log_impl(&dword_18AF10000, v59, OS_LOG_TYPE_INFO, "Delta was generated with a placeholder (or incorrect) value ID. Assigning value ID %@ to delta: %@", buf, 0x16u);
          }
          uint64_t v64 = objc_msgSend_valueID(v4, v56, v57, v58);
          objc_msgSend_setValueID_(v41, v65, (uint64_t)v64, v66);
        }
        if (!*(unsigned char *)(a1 + 32)) {
          objc_msgSend_unpopulateAsset(v41, v34, v35, v36);
        }
        ++v40;
      }
      while (v38 != v40);
      uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v34, (uint64_t)&v69, (uint64_t)v81, 16);
    }
    while (v38);
  }
}

void sub_18B0B1240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_18B0B1278(void *a1, uint64_t a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  ++*(void *)(*(void *)(a1[4] + 8) + 24);
  id v8 = objc_msgSend_unmergedDeltas(v4, v5, v6, v7);
  *(void *)(*(void *)(a1[5] + 8) + 24) += objc_msgSend_count(v8, v9, v10, v11);

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v15 = objc_msgSend_unmergedDeltas(v4, v12, v13, v14, 0);
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v25, (uint64_t)v29, 16);
  if (v17)
  {
    uint64_t v21 = v17;
    uint64_t v22 = *(void *)v26;
    do
    {
      uint64_t v23 = 0;
      do
      {
        if (*(void *)v26 != v22) {
          objc_enumerationMutation(v15);
        }
        uint64_t v24 = objc_msgSend_asset(*(void **)(*((void *)&v25 + 1) + 8 * v23), v18, v19, v20);

        if (v24) {
          ++*(void *)(*(void *)(a1[6] + 8) + 24);
        }
        ++v23;
      }
      while (v21 != v23);
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v25, (uint64_t)v29, 16);
    }
    while (v21);
  }
}

void sub_18B0B1630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0B1648(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (*a4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

id sub_18B0B1A08(uint64_t a1, void *a2)
{
  return sub_18B0A3DB0(a2);
}

uint64_t sub_18B0B1A10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], a2, (uint64_t)&unk_1ED845F88, a4);
  uint64_t v5 = qword_1EB279C38;
  qword_1EB279C38 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

uint64_t sub_18B0B1B94()
{
  id v0 = [CKPKPushRegistry alloc];
  uint64_t inited = objc_msgSend_initInternal(v0, v1, v2, v3);
  uint64_t v5 = qword_1EB279C50;
  qword_1EB279C50 = inited;

  return MEMORY[0x1F41817F8](inited, v5);
}

void sub_18B0B1C4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0B1CD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0B1FA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0B1FBC(uint64_t a1)
{
}

uint64_t sub_18B0B1FC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_18B0B2858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0B3CA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_sharedManager(CKProcessScopedStateManager, a2, a3, a4);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = objc_msgSend_untrustedEntitlements(v11, v4, v5, v6);
  byte_1EB279C58 = objc_msgSend_hasVFSOpenByIDEntitlement(v7, v8, v9, v10);
}

void sub_18B0B4BD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0B4C6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0B4D50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0B5578(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B0B7448(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  if (objc_msgSend_count(a1, v13, v14, v15))
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = objc_msgSend_objectAtIndexedSubscript_(a1, v16, v18, v17);
      uint64_t v20 = v4[2](v4, v19, v18);
      objc_msgSend_addObject_(v12, v21, (uint64_t)v20, v22);

      ++v18;
    }
    while (v18 < objc_msgSend_count(a1, v23, v24, v25));
  }

  return v12;
}

id sub_18B0B7530(void *a1, uint64_t a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_dictionaryWithCapacity_(v5, v10, v9, v11);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v31, (uint64_t)v35, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v32 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = v4[2](v4, *(void *)(*((void *)&v31 + 1) + 8 * i));
        uint64_t v23 = objc_msgSend_v2(v19, v20, v21, v22, (void)v31);
        long long v27 = objc_msgSend_v1(v19, v24, v25, v26);
        objc_msgSend_setObject_forKeyedSubscript_(v12, v28, (uint64_t)v23, (uint64_t)v27);
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v29, (uint64_t)&v31, (uint64_t)v35, 16);
    }
    while (v16);
  }

  return v12;
}

id sub_18B0B76BC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v26, (uint64_t)v30, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v27;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v27 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = *(void *)(*((void *)&v26 + 1) + 8 * v18);
        uint64_t v20 = (void *)MEMORY[0x18C12ADA0](v15);
        uint64_t v23 = v4[2](v4, v19);
        if (v23) {
          objc_msgSend_addObject_(v12, v21, (uint64_t)v23, v22, (void)v26);
        }

        ++v18;
      }
      while (v16 != v18);
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v24, (uint64_t)&v26, (uint64_t)v30, 16);
      uint64_t v16 = v15;
    }
    while (v15);
  }

  return v12;
}

id sub_18B0B7838(void *a1, uint64_t a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_dictionaryWithCapacity_(v5, v10, v9, v11);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v32, (uint64_t)v36, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v33 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = v4[2](v4, *(void *)(*((void *)&v32 + 1) + 8 * i));
        uint64_t v23 = v19;
        if (v19)
        {
          uint64_t v24 = objc_msgSend_v2(v19, v20, v21, v22, (void)v32);
          long long v28 = objc_msgSend_v1(v23, v25, v26, v27);
          objc_msgSend_setObject_forKeyedSubscript_(v12, v29, (uint64_t)v24, (uint64_t)v28);
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v30, (uint64_t)&v32, (uint64_t)v36, 16);
    }
    while (v16);
  }

  return v12;
}

id sub_18B0B79CC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v24, (uint64_t)v28, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v25 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v21 = v4[2](v4, *(void *)(*((void *)&v24 + 1) + 8 * i));
        if (v21) {
          objc_msgSend_addObjectsFromArray_(v12, v19, (uint64_t)v21, v20, (void)v24);
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v22, (uint64_t)&v24, (uint64_t)v28, 16);
    }
    while (v16);
  }

  return v12;
}

uint64_t sub_18B0B7B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a1, sel__CKReduceIntoDictionary_block_, 0, a3);
}

uint64_t sub_18B0B7B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a1, sel__CKReduceIntoDictionary_block_, 1, a3);
}

id sub_18B0B7B4C(void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a4;
  uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v6, v7, v8);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v10 = a1;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v35, (uint64_t)v40, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v36;
    uint64_t v33 = *MEMORY[0x1E4F1C3B8];
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v36 != v14) {
          objc_enumerationMutation(v10);
        }
        uint64_t v16 = *(void *)(*((void *)&v35 + 1) + 8 * i);
        uint64_t v19 = v5[2](v5, v16);
        if (v19)
        {
          uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v9, v17, (uint64_t)v19, v18);
          uint64_t v23 = v20;
          if (v20)
          {
            objc_msgSend_arrayByAddingObject_(v20, v21, v16, v22);
          }
          else
          {
            uint64_t v39 = v16;
            objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v21, (uint64_t)&v39, 1);
          long long v25 = };
          objc_msgSend_setObject_forKeyedSubscript_(v9, v26, (uint64_t)v25, (uint64_t)v19, v33);
        }
        else if ((a3 & 1) == 0)
        {
          id v24 = (id)objc_msgSend_exceptionWithName_reason_userInfo_(MEMORY[0x1E4F1CA00], v17, v33, @"Returning a non-nil result from a non-compact map function", 0);
        }
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v27, (uint64_t)&v35, (uint64_t)v40, 16);
    }
    while (v13);
  }

  uint64_t v31 = objc_msgSend_copy(v9, v28, v29, v30);

  return v31;
}

id sub_18B0B7D54(void *a1, uint64_t a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v23, (uint64_t)v27, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        if (v4[2](v4, v19)) {
          objc_msgSend_addObject_(v12, v20, v19, v21, (void)v23);
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v20, (uint64_t)&v23, (uint64_t)v27, 16);
    }
    while (v16);
  }

  return v12;
}

BOOL sub_18B0B7EB4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  id v10[2] = sub_18B0B7F58;
  v10[3] = &unk_1E5463B18;
  id v11 = v4;
  id v5 = v4;
  BOOL v8 = objc_msgSend_indexOfObjectPassingTest_(a1, v6, (uint64_t)v10, v7) != 0x7FFFFFFFFFFFFFFFLL;

  return v8;
}

uint64_t sub_18B0B7F58(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result) {
    *a4 = 1;
  }
  return result;
}

uint64_t sub_18B0B7F94(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result) {
    *a4 = 1;
  }
  return result;
}

id sub_18B0B7FD0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0B80B4;
  v20[3] = &unk_1E5463B40;
  id v13 = v12;
  id v21 = v13;
  id v22 = v4;
  id v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)v20, v16);
  uint64_t v17 = v22;
  id v18 = v13;

  return v18;
}

void sub_18B0B80B4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v1, v2, (uint64_t)v4, v3);
}

id sub_18B0B8110(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0B81F8;
  v20[3] = &unk_1E5463B68;
  id v22 = v4;
  id v13 = v12;
  id v21 = v13;
  id v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)v20, v16);
  uint64_t v17 = v21;
  id v18 = v13;

  return v18;
}

uint64_t sub_18B0B81F8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = (const char *)objc_claimAutoreleasedReturnValue();
  id v4 = v2;
  if (v2)
  {
    uint64_t v6 = v2;
    uint64_t v2 = (const char *)objc_msgSend_addObject_(*(void **)(a1 + 32), v2, (uint64_t)v2, v3);
    id v4 = v6;
  }

  return MEMORY[0x1F41817F8](v2, v4);
}

id sub_18B0B8260(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  uint64_t v22 = MEMORY[0x1E4F143A8];
  uint64_t v23 = 3221225472;
  long long v24 = sub_18B0B8354;
  long long v25 = &unk_1E5463B68;
  id v26 = v12;
  id v27 = v4;
  id v13 = v12;
  id v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)&v22, v16);
  uint64_t v20 = objc_msgSend_copy(v13, v17, v18, v19, v22, v23, v24, v25);

  return v20;
}

uint64_t sub_18B0B8354(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = (const char *)objc_claimAutoreleasedReturnValue();
  id v4 = v2;
  if (v2)
  {
    uint64_t v6 = v2;
    uint64_t v2 = (const char *)objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), v2, (uint64_t)v2, v3);
    id v4 = v6;
  }

  return MEMORY[0x1F41817F8](v2, v4);
}

id sub_18B0B83BC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_dictionaryWithCapacity_(v5, v10, v9, v11);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0B84A0;
  v20[3] = &unk_1E5463B40;
  id v13 = v12;
  id v21 = v13;
  id v22 = v4;
  id v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)v20, v16);
  uint64_t v17 = v22;
  id v18 = v13;

  return v18;
}

void sub_18B0B84A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void (**)(uint64_t, id, uint64_t))(v5 + 16);
  id v7 = a2;
  v6(v5, v7, a3);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v8, (uint64_t)v9, (uint64_t)v7);
}

id sub_18B0B8530(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_dictionaryWithCapacity_(v5, v10, v9, v11);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0B8618;
  v20[3] = &unk_1E5463B68;
  id v22 = v4;
  id v13 = v12;
  id v21 = v13;
  id v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)v20, v16);
  uint64_t v17 = v21;
  id v18 = v13;

  return v18;
}

void sub_18B0B8618(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v4 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v4) {
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v3, (uint64_t)v4, (uint64_t)v5);
  }
}

id sub_18B0B8698(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_dictionaryWithCapacity_(v5, v10, v9, v11);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0B8780;
  v20[3] = &unk_1E5463B68;
  id v22 = v4;
  id v13 = v12;
  id v21 = v13;
  id v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)v20, v16);
  uint64_t v17 = v21;
  id v18 = v13;

  return v18;
}

void sub_18B0B8780(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_msgSend_v2(v12, v2, v3, v4);
  uint64_t v6 = *(void **)(a1 + 32);
  id v10 = objc_msgSend_v1(v12, v7, v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v5, (uint64_t)v10);
}

id sub_18B0B8814(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  id v12 = objc_msgSend_dictionaryWithCapacity_(v5, v10, v9, v11);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0B88FC;
  v20[3] = &unk_1E5463B68;
  id v22 = v4;
  id v13 = v12;
  id v21 = v13;
  id v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)v20, v16);
  uint64_t v17 = v21;
  id v18 = v13;

  return v18;
}

void sub_18B0B88FC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v6, (uint64_t)v5, (uint64_t)v7);
  }
}

id sub_18B0B897C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  id v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v24, (uint64_t)v28, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v25 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = v4[2](v4, *(void *)(*((void *)&v24 + 1) + 8 * i));
        objc_msgSend_addObject_(v12, v20, (uint64_t)v19, v21, (void)v24);
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v22, (uint64_t)&v24, (uint64_t)v28, 16);
    }
    while (v16);
  }

  return v12;
}

id sub_18B0B8AE0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  id v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v24, (uint64_t)v28, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v25 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v21 = v4[2](v4, *(void *)(*((void *)&v24 + 1) + 8 * i));
        if (v21) {
          objc_msgSend_addObject_(v12, v19, (uint64_t)v21, v20, (void)v24);
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v22, (uint64_t)&v24, (uint64_t)v28, 16);
    }
    while (v16);
  }

  return v12;
}

id sub_18B0B8C48(void *a1, uint64_t a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  id v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v23, (uint64_t)v27, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        if (v4[2](v4, v19)) {
          objc_msgSend_addObject_(v12, v20, v19, v21, (void)v23);
        }
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v20, (uint64_t)&v23, (uint64_t)v27, 16);
    }
    while (v16);
  }

  return v12;
}

id sub_18B0B8DA8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  id v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0B8E8C;
  v20[3] = &unk_1E5463B90;
  id v13 = v12;
  id v21 = v13;
  id v22 = v4;
  id v14 = v4;
  objc_msgSend_enumerateIndexesUsingBlock_(a1, v15, (uint64_t)v20, v16);
  uint64_t v17 = v22;
  id v18 = v13;

  return v18;
}

void sub_18B0B8E8C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v1, v2, (uint64_t)v4, v3);
}

id sub_18B0B8EE8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v8 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v9 = a1;
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v27, (uint64_t)v31, 16);
  if (v11)
  {
    uint64_t v14 = v11;
    uint64_t v15 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v28 != v15) {
          objc_enumerationMutation(v9);
        }
        uint64_t v17 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        id v18 = objc_msgSend_objectForKey_(v9, v12, v17, v13, (void)v27);
        uint64_t v19 = v4[2](v4, v17, v18);

        if (v19) {
          objc_msgSend_addObjectsFromArray_(v8, v20, (uint64_t)v19, v21);
        }
      }
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v27, (uint64_t)v31, 16);
    }
    while (v14);
  }

  long long v25 = objc_msgSend_copy(v8, v22, v23, v24);

  return v25;
}

void *sub_18B0B9270(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0B9450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0B9468(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0B95F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0B97D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0B97EC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B0BC890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_objecta, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,void *a52)
{
  _Unwind_Resume(a1);
}

void sub_18B0BD1D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, __n128 a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = (uint64_t)a2;
    a5.n128_u64[0] = 134218754;
    __n128 v17 = a5;
    do
    {
      uint64_t v22 = 0;
      uint64_t v23 = &v22;
      uint64_t v24 = 0x2020000000;
      uint64_t v25 = 0;
      id v10 = *(void **)(a1 + 32);
      uint64_t v11 = objc_msgSend_indexSetWithIndex_(MEMORY[0x1E4F28D60], a2, v8, a4, *(_OWORD *)&v17);
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = sub_18B0BD420;
      v19[3] = &unk_1E5463BB8;
      id v20 = *(id *)(a1 + 40);
      uint64_t v21 = &v22;
      objc_msgSend_enumerateObjectsForIndexes_usingBlock_(v10, v12, (uint64_t)v11, (uint64_t)v19);

      if (!v23[3])
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v13 = ck_log_facility_distributed_sync;
        if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(a1 + 48);
          uint64_t v15 = *(void *)(a1 + 56);
          uint64_t v16 = *(void *)(a1 + 64);
          *(_DWORD *)buf = v17.n128_u32[0];
          uint64_t v27 = v8;
          __int16 v28 = 2112;
          uint64_t v29 = v14;
          __int16 v30 = 2112;
          uint64_t v31 = v15;
          __int16 v32 = 2112;
          uint64_t v33 = v16;
          _os_log_debug_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEBUG, "[Batch Replacement] Could not find causal batch for state changed clock value %lu in batch %@ with eligible removals vector %@ and current state vector %@", buf, 0x2Au);
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
        *a7 = 1;
      }

      _Block_object_dispose(&v22, 8);
      ++v8;
      --v7;
    }
    while (v7);
  }
}

void sub_18B0BD3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0BD420(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_addObject_(*(void **)(a1 + 32), a2, a4, a4);
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

void sub_18B0BD460(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v31 = 0;
  uint64_t v7 = objc_msgSend_vectors(v3, v4, v5, v6);
  uint64_t v11 = objc_msgSend_contents(v7, v8, v9, v10);
  uint64_t v15 = objc_msgSend_backingVector(v11, v12, v13, v14);
  uint64_t v19 = objc_msgSend_attributeToSparseVector(v15, v16, v17, v18);
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = sub_18B0BD5E0;
  v27[3] = &unk_1E5463CD0;
  v27[4] = &v28;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v19, v20, (uint64_t)v27, v21);

  uint64_t v22 = *(void **)(a1 + 32);
  uint64_t v25 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v23, v29[3], v24);
  objc_msgSend_setObject_forKey_(v22, v26, (uint64_t)v25, (uint64_t)v3);

  _Block_object_dispose(&v28, 8);
}

void sub_18B0BD590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0BD5E0(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  unsigned __int8 v9 = objc_msgSend_unsignedShortValue(v13, v6, v7, v8);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_timestampCount(v5, v10, v11, v12) * v9;
}

void sub_18B0BD668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B0BD680(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v10 = objc_msgSend_vectors(v5, v7, v8, v9);
  uint64_t v14 = objc_msgSend_contents(v10, v11, v12, v13);
  unint64_t v18 = objc_msgSend_timestampCount(v14, v15, v16, v17);
  uint64_t v22 = objc_msgSend_vectors(v6, v19, v20, v21);
  long long v26 = objc_msgSend_contents(v22, v23, v24, v25);
  unint64_t v30 = objc_msgSend_timestampCount(v26, v27, v28, v29);

  if (v18 < v30)
  {
    uint64_t v34 = 1;
    goto LABEL_13;
  }
  long long v35 = objc_msgSend_vectors(v5, v31, v32, v33);
  uint64_t v39 = objc_msgSend_contents(v35, v36, v37, v38);
  unint64_t v43 = objc_msgSend_timestampCount(v39, v40, v41, v42);
  long long v47 = objc_msgSend_vectors(v6, v44, v45, v46);
  long long v51 = objc_msgSend_contents(v47, v48, v49, v50);
  unint64_t v55 = objc_msgSend_timestampCount(v51, v52, v53, v54);

  if (v43 > v55)
  {
    uint64_t v34 = -1;
    goto LABEL_13;
  }
  uint64_t v58 = objc_msgSend_objectForKey_(*(void **)(a1 + 32), v56, (uint64_t)v5, v57);
  uint64_t v61 = objc_msgSend_objectForKey_(*(void **)(a1 + 32), v59, (uint64_t)v6, v60);
  uint64_t v65 = (void *)v61;
  if (!v58)
  {
    uint64_t v82 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v62, v63, v64);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v82, v83, *(void *)(a1 + 40), *(void *)(a1 + 48), @"CKMergeableDeltaMetadata+DeltaMetadataCalculations.mm", 305, @"Cached sum for delta1 not found");

    if (v65) {
      goto LABEL_7;
    }
LABEL_15:
    uint64_t v84 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v62, v63, v64);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v84, v85, *(void *)(a1 + 40), *(void *)(a1 + 48), @"CKMergeableDeltaMetadata+DeltaMetadataCalculations.mm", 306, @"Cached sum for delta2 not found");

    goto LABEL_7;
  }
  if (!v61) {
    goto LABEL_15;
  }
LABEL_7:
  unint64_t v66 = objc_msgSend_unsignedIntegerValue(v58, v62, v63, v64);
  unint64_t v70 = objc_msgSend_unsignedIntegerValue(v65, v67, v68, v69);
  if (v66 >= v70)
  {
    if (v66 > v70)
    {
      uint64_t v34 = -1;
    }
    else
    {
      long long v74 = objc_msgSend_identifier(v5, v71, v72, v73);
      uint64_t v78 = objc_msgSend_identifier(v6, v75, v76, v77);
      uint64_t v34 = objc_msgSend_compare_(v74, v79, (uint64_t)v78, v80);
    }
  }
  else
  {
    uint64_t v34 = 1;
  }

LABEL_13:
  return v34;
}

void sub_18B0BD8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B0BD940(void **a1, void *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id obj = a2;
  uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v58, (uint64_t)v62, 16);
  if (v3)
  {
    uint64_t v55 = *(void *)v59;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v59 != v55) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v58 + 1) + 8 * v4);
        id v6 = (void *)MEMORY[0x18C12ADA0]();
        uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(obj, v7, v5, v8);
        uint64_t v13 = objc_msgSend_vectors(v9, v10, v11, v12);
        uint64_t v17 = objc_msgSend_contents(v13, v14, v15, v16);
        uint64_t v20 = objc_msgSend_vectorFilteredByAtomState_(v17, v18, 3, v19);

        uint64_t v24 = objc_msgSend_vectors(v9, v21, v22, v23);
        uint64_t v28 = objc_msgSend_contents(v24, v25, v26, v27);
        uint64_t v32 = objc_msgSend_mutableCopy(v28, v29, v30, v31);

        long long v36 = objc_msgSend_clockVector(v20, v33, v34, v35);
        objc_msgSend_minusVector_(v32, v37, (uint64_t)v36, v38);

        uint64_t v42 = objc_msgSend_vectors(a1[4], v39, v40, v41);
        uint64_t v46 = objc_msgSend_contents(v42, v43, v44, v45);
        char hasAtomStateNotInStateVector = objc_msgSend_hasAtomStateNotInStateVector_(v32, v47, (uint64_t)v46, v48);

        if ((hasAtomStateNotInStateVector & 1) == 0)
        {
          objc_msgSend_addObject_(a1[5], v50, v5, v51);
          objc_msgSend_addObject_(a1[6], v52, (uint64_t)v9, v53);
        }

        ++v4;
      }
      while (v3 != v4);
      uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v54, (uint64_t)&v58, (uint64_t)v62, 16);
    }
    while (v3);
  }
}

void sub_18B0BDB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_18B0BEB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_objecta, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_18B0BF018(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  if ((objc_msgSend_containsObject_(*(void **)(a1 + 32), v6, (uint64_t)v5, v7) & 1) == 0)
  {
    uint64_t v11 = *(void **)(a1 + 40);
    uint64_t v12 = objc_msgSend_identifier(v5, v8, v9, v10);
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v11, v13, (uint64_t)v12, v14);

    uint64_t v16 = *(void **)(a1 + 48);
    uint64_t v62 = v15;
    uint64_t v20 = objc_msgSend_identifier(v5, v17, v18, v19);
    uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v16, v21, (uint64_t)v20, v22);

    uint64_t v26 = objc_msgSend_clockValuesForSiteIdentifier_(v15, v24, *(void *)(a1 + 56), v25);
    uint64_t v29 = objc_msgSend_clockValuesForSiteIdentifier_(v23, v27, *(void *)(a1 + 56), v28);
    uint64_t v32 = objc_msgSend_clockValuesForSiteIdentifier_(*(void **)(a1 + 64), v30, *(void *)(a1 + 56), v31);
    uint64_t v33 = objc_opt_new();
    objc_msgSend_addIndexes_(v33, v34, (uint64_t)v26, v35);
    objc_msgSend_addIndexes_(v33, v36, (uint64_t)v29, v37);
    objc_msgSend_removeIndexes_(v33, v38, (uint64_t)v32, v39);
    unint64_t v43 = objc_msgSend_mutableCopy(v33, v40, v41, v42);
    objc_msgSend_removeIndexes_(v43, v44, *(void *)(a1 + 72), v45);
    objc_msgSend_removeIndexes_(v33, v46, (uint64_t)v43, v47);
    uint64_t v51 = objc_msgSend_mutableCopy(v33, v48, v49, v50);
    long long v52 = *(void **)(a1 + 80);
    v63[0] = MEMORY[0x1E4F143A8];
    v63[1] = 3221225472;
    v63[2] = sub_18B0BF2F4;
    v63[3] = &unk_1E5463C80;
    id v64 = *(id *)(a1 + 32);
    id v53 = *(id *)(a1 + 88);
    uint64_t v54 = *(void *)(a1 + 56);
    id v65 = v53;
    uint64_t v66 = v54;
    id v55 = v51;
    id v67 = v55;
    objc_msgSend_enumerateObjectsForIndexes_usingBlock_(v52, v56, (uint64_t)v33, (uint64_t)v63);
    if (objc_msgSend_count(v55, v57, v58, v59)) {
      objc_msgSend_addObject_(*(void **)(a1 + 32), v60, (uint64_t)v5, v61);
    }
  }
}

void sub_18B0BF240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18B0BF2F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v20 = a4;
  if ((objc_msgSend_containsObject_(*(void **)(a1 + 32), v5, (uint64_t)v20, v6) & 1) == 0)
  {
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v11 = objc_msgSend_identifier(v20, v7, v8, v9);
    uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(v10, v12, (uint64_t)v11, v13);

    uint64_t v17 = objc_msgSend_clockValuesForSiteIdentifier_(v14, v15, *(void *)(a1 + 48), v16);
    objc_msgSend_removeIndexes_(*(void **)(a1 + 56), v18, (uint64_t)v17, v19);
  }
}

void sub_18B0BF3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B0BF468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B0BF5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B0BFDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)xpc_copy_short_description();
  uint64_t v7 = objc_msgSend_stringWithUTF8String_(NSString, v5, (uint64_t)v4, v6);
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v11 = objc_msgSend_stringWithUTF8String_(NSString, v9, a2, v10);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v12, (uint64_t)v7, (uint64_t)v11);

  free(v4);
  return 1;
}

void sub_18B0BFED4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0C00A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0C017C(uint64_t a1, id a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a2;
  xpc_object_t value = a3;
  uint64_t v9 = (const char *)objc_msgSend_UTF8String(v5, v6, v7, v8);
  xpc_dictionary_set_value(v4, v9, value);
}

uint64_t sub_18B0C02B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = NSString;
  id v6 = a3;
  uint64_t v9 = objc_msgSend_stringWithUTF8String_(v5, v7, a2, v8);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v10, (uint64_t)v6, (uint64_t)v9);

  return 1;
}

void sub_18B0C041C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0C0490(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B0C0924(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C0B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C0B1C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0C0CA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C0E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C0EA0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0C102C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 528) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C120C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C1224(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B0C1B44(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v8 = objc_msgSend_assetReference(v4, v5, v6, v7);

  if (v8)
  {
    uint64_t v12 = objc_msgSend_assetReference(v4, v9, v10, v11);
    if (objc_msgSend_databaseScope(v12, v13, v14, v15) != 2 && objc_msgSend_databaseScope(v12, v16, v17, v18) != 3) {
      goto LABEL_11;
    }
    uint64_t v19 = objc_msgSend_database(*(void **)(a1 + 32), v16, v17, v18);
    if (objc_msgSend_databaseScope(v19, v20, v21, v22) == 2)
    {
    }
    else
    {
      uint64_t v30 = objc_msgSend_database(*(void **)(a1 + 32), v23, v24, v25);
      uint64_t v34 = objc_msgSend_databaseScope(v30, v31, v32, v33);

      if (v34 != 3) {
        goto LABEL_11;
      }
    }
    uint64_t v35 = objc_msgSend_configuration(*(void **)(a1 + 32), v26, v27, v28);
    uint64_t v39 = objc_msgSend_container(v35, v36, v37, v38);
    unint64_t v43 = objc_msgSend_options(v39, v40, v41, v42);
    if (objc_msgSend_bypassPCSEncryption(v43, v44, v45, v46))
    {
    }
    else
    {
      uint64_t v50 = objc_msgSend_configuration(*(void **)(a1 + 32), v47, v48, v49);
      uint64_t v54 = objc_msgSend_container(v50, v51, v52, v53);
      uint64_t v58 = objc_msgSend_options(v54, v55, v56, v57);
      int v62 = objc_msgSend_useClearAssetEncryption(v58, v59, v60, v61);

      if (!v62)
      {
        int v29 = 1;
        goto LABEL_12;
      }
    }
LABEL_11:
    int v29 = 0;
LABEL_12:

    goto LABEL_13;
  }
  int v29 = 1;
LABEL_13:

  return v29 ^ 1u;
}

uint64_t sub_18B0C1ED0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, a3, a4);
}

id sub_18B0C1FA4(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [CKTuple2 alloc];
  uint64_t v7 = objc_msgSend_sourceRecordID(v2, v4, v5, v6);
  uint64_t v9 = objc_msgSend_initWithObject1_object2_(v3, v8, (uint64_t)v7, (uint64_t)v2);

  return v9;
}

id sub_18B0C2024(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [CKTuple2 alloc];
  uint64_t v7 = objc_msgSend_destinationRecord(v2, v4, v5, v6);
  uint64_t v11 = objc_msgSend_recordID(v7, v8, v9, v10);
  uint64_t v13 = objc_msgSend_initWithObject1_object2_(v3, v12, (uint64_t)v11, (uint64_t)v2);

  return v13;
}

BOOL CKDPRecordIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(CKDPIdentifier);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(CKDPRecordZoneIdentifier);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || (CKDPRecordZoneIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id sub_18B0C4FD4(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [CKUserIdentityLookupInfo alloc];
  uint64_t v6 = objc_msgSend_initWithEmailAddress_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

id sub_18B0C503C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [CKUserIdentityLookupInfo alloc];
  uint64_t v6 = objc_msgSend_initWithUserRecordID_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

id sub_18B0C50A4(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [CKUserIdentityLookupInfo alloc];
  uint64_t v6 = objc_msgSend_initWithPhoneNumber_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

void *sub_18B0C5738(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 528) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C5918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C5930(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0C5ABC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C5C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C5CB4(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0C5E40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C6020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C6038(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0C61C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 552) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 552);
    *(void *)(v8 + 552) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C63A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C63BC(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 552));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0C6594(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 560) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 560);
    *(void *)(v8 + 56dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0C6774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C678C(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 560));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

id sub_18B0C7560(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_new();
  objc_msgSend_setWireSerialization_(v6, v7, (uint64_t)v5, v8);

  if (objc_msgSend_count(*(void **)(a1 + 32), v9, v10, v11) > a3)
  {
    uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v12, a3, v13);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      objc_msgSend_setEncryptedMasterKey_(v6, v15, (uint64_t)v14, v16);
    }
  }

  return v6;
}

void sub_18B0C92D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0C92EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_addClockValues_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
  uint64_t v8 = *(void **)(a1 + 32);

  return objc_msgSend_addClockValueLengths_(v8, v6, a3, v7);
}

uint64_t sub_18B0C9334(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = objc_msgSend_pClockTypeAndAtomStateFromClockType_atomState_(*(void **)(a1 + 40), a2, a4 >> 8, a4);
  objc_msgSend_addStateValues_(*(void **)(a1 + 32), v7, v6, v8);
  uint64_t v11 = *(void **)(a1 + 32);

  return objc_msgSend_addStateValueLengths_(v11, v9, a3, v10);
}

void sub_18B0C98CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, id a13, id a14)
{
  objc_sync_exit(v14);
  objc_sync_exit(obj);
  objc_sync_exit(a13);
  objc_sync_exit(a14);
  _Unwind_Resume(a1);
}

void sub_18B0C9E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

BOOL CKDPDistributedTimestampsSiteVersionVectorsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(CKDPDistributedTimestampsVersionVector);
        uint64_t v18 = 24;
        goto LABEL_25;
      case 2u:
        uint64_t v17 = objc_alloc_init(CKDPDistributedTimestampsVersionVector);
        uint64_t v18 = 8;
        goto LABEL_25;
      case 3u:
        uint64_t v17 = objc_alloc_init(CKDPDistributedTimestampsVersionVector);
        uint64_t v18 = 32;
        goto LABEL_25;
      case 4u:
        uint64_t v17 = objc_alloc_init(CKDPDistributedTimestampsVersionVector);
        uint64_t v18 = 16;
LABEL_25:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (PBReaderPlaceMark()
          && (CKDPDistributedTimestampsVersionVectorReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_28:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_28;
    }
  }
}

void sub_18B0CC02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0CC14C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CC1D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CC610(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CCBBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *CKStringFromShareParticipantVisibility(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5464070[a1];
  }
}

__CFString *CKStringFromShareParticipantSelfRemovalBehavior(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5464090[a1];
  }
}

void sub_18B0CCEF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CCF70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CCFFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CD114(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0CD12C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = objc_msgSend_participantID(a2, (const char *)a2, a3, a4);
  uint64_t v8 = objc_msgSend_containsObject_(v4, v6, (uint64_t)v5, v7) ^ 1;

  return v8;
}

void sub_18B0CD1D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CD25C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CD2CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CD358(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CD3C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CD454(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CDA40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_18B0CDA68(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v11 = a4;
  if (v11)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    unint64_t v12 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v20 = 138412290;
      id v21 = v11;
      _os_log_error_impl(&dword_18AF10000, v12, OS_LOG_TYPE_ERROR, "Error fetching share participant: %@", (uint8_t *)&v20, 0xCu);
    }
  }
  else if (v8)
  {
    objc_msgSend_setIsApprovedRequester_(v8, v9, 1, v10);
    objc_msgSend_setPermission_(v8, v13, *(void *)(a1 + 40), v14);
    objc_msgSend_setRole_(v8, v15, *(void *)(a1 + 48), v16);
    id v17 = *(id *)(a1 + 32);
    objc_sync_enter(v17);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v18, (uint64_t)v8, v19);
    objc_sync_exit(v17);
  }
}

void sub_18B0CDBD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CDBEC(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v5 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v27 = v3;
      _os_log_error_impl(&dword_18AF10000, v5, OS_LOG_TYPE_ERROR, "Error fetching share participants: %@", buf, 0xCu);
    }
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
    }
  }
  else
  {
    id v7 = *(id *)(a1 + 32);
    objc_sync_enter(v7);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v8 = *(id *)(a1 + 32);
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v21, (uint64_t)v25, 16);
    if (v12)
    {
      uint64_t v13 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v22 != v13) {
            objc_enumerationMutation(v8);
          }
          objc_msgSend_addParticipant_(WeakRetained, v10, *(void *)(*((void *)&v21 + 1) + 8 * i), v11, (void)v21);
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v21, (uint64_t)v25, 16);
      }
      while (v12);
    }

    objc_sync_exit(v7);
    int v15 = (void **)WeakRetained;
    objc_sync_enter(v15);
    objc_msgSend_removeObjectsInArray_(v15[54], v16, *(void *)(a1 + 40), v17);
    objc_msgSend_addObjectsFromArray_(v15[55], v18, *(void *)(a1 + 40), v19);
    objc_sync_exit(v15);

    uint64_t v20 = *(void *)(a1 + 48);
    if (v20) {
      (*(void (**)(uint64_t, void))(v20 + 16))(v20, 0);
    }
  }
}

void sub_18B0CDE24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CDF30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CE384(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0CE3A0(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    return objc_msgSend_addObject_(*(void **)(result + 32), a2, (uint64_t)a2, a4);
  }
  return result;
}

void sub_18B0CECB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CF2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_18B0CF538(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CF630(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CF7C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0CFD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_18B0CFD90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  uint64_t v20 = sub_18B0CFEA4;
  long long v21 = &unk_1E5463F58;
  id v5 = v3;
  id v23 = v5;
  id v22 = *(id *)(a1 + 32);
  id v8 = objc_msgSend_CKFilter_(v4, v6, (uint64_t)&v18, v7);
  if (objc_msgSend_count(v8, v9, v10, v11, v18, v19, v20, v21) == 1)
  {
    uint64_t v15 = objc_msgSend_lastObject(v8, v12, v13, v14);
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v15;
  }
  if (objc_msgSend_count(v8, v12, v13, v14)) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v8);
  }
}

uint64_t sub_18B0CFEA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

BOOL sub_18B0CFEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a3;
}

BOOL sub_18B0CFEC8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v8 = objc_msgSend_role(a2, v5, v6, v7);
  uint64_t v12 = objc_msgSend_role(v4, v9, v10, v11);

  return v8 == v12;
}

uint64_t sub_18B0CFF1C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unsigned int v9 = objc_msgSend_participantID(v4, v6, v7, v8);
  uint64_t v16 = objc_msgSend_participantID(v5, v10, v11, v12);
  if (v9 == v16)
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t v17 = objc_msgSend_participantID(v4, v13, v14, v15);
    long long v21 = objc_msgSend_participantID(v5, v18, v19, v20);
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v17, v22, (uint64_t)v21, v23);
  }
  return isEqualToString;
}

void *sub_18B0CFFE0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unsigned int v9 = objc_msgSend_userIdentity(v4, v6, v7, v8);
  char isEqual = objc_msgSend_publicSharingKey(v9, v10, v11, v12);
  if (isEqual)
  {
    uint64_t v17 = objc_msgSend_userIdentity(v5, v13, v14, v15);
    long long v21 = objc_msgSend_publicSharingKey(v17, v18, v19, v20);

    if (!v21)
    {
      char isEqual = 0;
      goto LABEL_6;
    }
    unsigned int v9 = objc_msgSend_userIdentity(v4, v22, v23, v24);
    uint64_t v28 = objc_msgSend_publicSharingKey(v9, v25, v26, v27);
    uint64_t v32 = objc_msgSend_userIdentity(v5, v29, v30, v31);
    long long v36 = objc_msgSend_publicSharingKey(v32, v33, v34, v35);
    char isEqual = objc_msgSend_isEqual_(v28, v37, (uint64_t)v36, v38);
  }
LABEL_6:

  return isEqual;
}

uint64_t sub_18B0D00E4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v8 = objc_msgSend_userIdentity(a2, v5, v6, v7);
  uint64_t v12 = objc_msgSend_userRecordID(v8, v9, v10, v11);
  uint64_t v16 = objc_msgSend_userIdentity(v4, v13, v14, v15);

  uint64_t v20 = objc_msgSend_userRecordID(v16, v17, v18, v19);
  uint64_t isEqual = objc_msgSend_isEqual_(v12, v21, (uint64_t)v20, v22);

  return isEqual;
}

void sub_18B0D05BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D08CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D09A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0D09B8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v7 = objc_msgSend_addedParticipantIDs(v2, v4, v5, v6);
  uint64_t v11 = objc_msgSend_participantID(v3, v8, v9, v10);

  uint64_t v14 = objc_msgSend_containsObject_(v7, v12, (uint64_t)v11, v13);
  return v14;
}

void sub_18B0D0AEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0D0B00(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v7 = objc_msgSend_removedParticipantIDs(v2, v4, v5, v6);
  uint64_t v11 = objc_msgSend_participantID(v3, v8, v9, v10);

  uint64_t v14 = objc_msgSend_containsObject_(v7, v12, (uint64_t)v11, v13);
  return v14;
}

void sub_18B0D0CA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D0F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0D1014(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D16CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D1990(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D1C7C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = 2;
    }
    id v9 = a3;
    objc_msgSend_setPermission_(v9, v5, v4, v6);
    objc_msgSend_addParticipant_(*(void **)(a1 + 32), v7, (uint64_t)v9, v8);
  }
}

void sub_18B0D1CEC(void **a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (v5)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v34 = v5;
      _os_log_debug_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEBUG, "Fetching share participants UI, failed: %@", buf, 0xCu);
    }
    uint64_t v7 = (void (**)(void *, void *, id))a1[6];
    if (v7) {
      v7[2](v7, a1[4], v5);
    }
  }
  else
  {
    objc_msgSend__setPublicPermissionNoSideEffects_(a1[4], v3, 1, v4);
    uint64_t v8 = [CKModifyRecordsOperation alloc];
    uint64_t v32 = a1[4];
    uint64_t v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v9, (uint64_t)&v32, 1);
    uint64_t v12 = objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(v8, v11, (uint64_t)v10, 0);

    uint64_t v16 = objc_msgSend_resolvedConfiguration(v12, v13, v14, v15);
    objc_msgSend_setRequestOriginator_(v16, v17, 5, v18);

    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = sub_18B0D1F80;
    void v30[3] = &unk_1E5463FF0;
    id v19 = a1[6];
    v30[4] = a1[4];
    id v31 = v19;
    objc_msgSend_setModifyRecordsCompletionBlock_(v12, v20, (uint64_t)v30, v21);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v22 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      int v29 = a1[4];
      *(_DWORD *)buf = 138412290;
      id v34 = v29;
      _os_log_debug_impl(&dword_18AF10000, v22, OS_LOG_TYPE_DEBUG, "Saving share to server for UI: %@", buf, 0xCu);
    }
    uint64_t v26 = objc_msgSend_privateCloudDatabase(a1[5], v23, v24, v25);
    objc_msgSend_addOperation_(v26, v27, (uint64_t)v12, v28);
  }
}

uint64_t sub_18B0D1F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, *(void *)(a1 + 32), a4);
  }
  return result;
}

void sub_18B0D2230(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D2924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0D2A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0D3118(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0D3CC4()
{
  id v0 = [CKBehaviorOptions alloc];
  uint64_t inited = objc_msgSend_initInternal(v0, v1, v2, v3);
  uint64_t v5 = qword_1EB279C68;
  qword_1EB279C68 = inited;

  return MEMORY[0x1F41817F8](inited, v5);
}

id sub_18B0D3D04(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    uint64_t v6 = objc_msgSend_CKUserDefaults(CKUserDefaults, v3, v4, v5);
    id v9 = objc_msgSend_objectForKey_(v6, v7, (uint64_t)v2, v8);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

uint64_t sub_18B0D3D80(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = sub_18AF3DEF4(a1, a2);
  if (v4)
  {
    uint64_t v8 = (void *)v4;
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      uint64_t v12 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v9, v10, v11);

      uint64_t v8 = (void *)v12;
      if (!v12) {
        goto LABEL_9;
      }
    }
LABEL_7:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      a3 = objc_msgSend_intValue(v8, v13, v14, v15);
    }
    goto LABEL_9;
  }
  uint64_t v8 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v5, v6, v7);
  if (v8) {
    goto LABEL_7;
  }
LABEL_9:

  return a3;
}

double sub_18B0D3E38(uint64_t a1, void *a2, double a3)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v4 = sub_18AF3DEF4(a1, a2);
  if (v4)
  {
    uint64_t v8 = (void *)v4;
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      uint64_t v12 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v9, v10, v11);

      uint64_t v8 = (void *)v12;
      if (!v12) {
        goto LABEL_9;
      }
    }
LABEL_7:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend_doubleValue(v8, v13, v14, v15);
      a3 = v16;
    }
    goto LABEL_9;
  }
  uint64_t v8 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v5, v6, v7);
  if (v8) {
    goto LABEL_7;
  }
LABEL_9:

  return a3;
}

id sub_18B0D3EF8(id a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = sub_18AF3DEF4((uint64_t)a1, a2);
    if (v6)
    {
      uint64_t v10 = (void *)v6;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend_length(v10, v11, v12, v13))
      {
        uint64_t v14 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v11, v12, v13);

        uint64_t v10 = (void *)v14;
        if (!v14) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v10 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v7, v8, v9);
      if (!v10) {
        goto LABEL_9;
      }
    }
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    double v16 = v10;
    if ((isKindOfClass & 1) == 0)
    {
LABEL_10:
      a1 = v16;

      goto LABEL_11;
    }
LABEL_9:
    double v16 = v5;
    goto LABEL_10;
  }
LABEL_11:

  return a1;
}

void sub_18B0D42CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D43C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double sub_18B0D4504(uint64_t a1)
{
  if (a1) {
    return sub_18B0D3E38(a1, @"OperationTimeout", 30.0);
  }
  else {
    return 0.0;
  }
}

id sub_18B0D4A74(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = sub_18B0D3EF8(a1, a2, v5);
    if (objc_msgSend_isEqualToString_(v6, v7, @"(Automatic)", v8))
    {
      id v12 = v5;

      uint64_t v6 = v12;
    }
    if (!objc_msgSend_length(v6, v9, v10, v11)
      || (objc_msgSend_URLWithString_(MEMORY[0x1E4F1CB10], v13, (uint64_t)v6, v15),
          (a1 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if (objc_msgSend_length(v5, v13, v14, v15))
      {
        a1 = objc_msgSend_URLWithString_(MEMORY[0x1E4F1CB10], v16, (uint64_t)v5, v17);
      }
      else
      {
        a1 = 0;
      }
    }
  }

  return a1;
}

double sub_18B0D4F9C(uint64_t a1)
{
  if (a1) {
    return sub_18B0D3E38(a1, @"PackageGCGracePeriodSeconds", 259200.0);
  }
  else {
    return 0.0;
  }
}

void *sub_18B0D567C(void *result)
{
  if (result)
  {
    id v1 = sub_18B0D3EF8(result, @"BuildOverride", 0);
    id v2 = CKBuildVersion();
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v1, v3, (uint64_t)v2, v4);

    return (void *)isEqualToString;
  }
  return result;
}

uint64_t sub_18B0D5C50(uint64_t result)
{
  if (result) {
    return sub_18AF3DE3C(result, @"ForceUploadRequestActivitiesToRunImmediately", 0);
  }
  return result;
}

id sub_18B0D644C(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v38.receiver = a1;
    v38.super_class = (Class)CKPlaceholderOperation;
    a1 = objc_msgSendSuper2(&v38, sel_init);
    if (a1)
    {
      uint64_t v10 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v7, v8, v9);
      uint64_t v11 = (void *)*((void *)a1 + 33);
      *((void *)a1 + 33) = v10;

      id v12 = dispatch_group_create();
      dispatch_group_enter(v12);
      uint64_t v13 = (void *)*((void *)a1 + 31);
      *((void *)a1 + 31) = v12;
      uint64_t v14 = v12;

      *((unsigned char *)a1 + 26dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
      uint64_t v18 = objc_msgSend_operationID(v5, v15, v16, v17);
      id v19 = (void *)*((void *)a1 + 34);
      *((void *)a1 + 34) = v18;

      uint64_t v23 = objc_msgSend_copy(v6, v20, v21, v22);
      uint64_t v24 = (void *)*((void *)a1 + 35);
      *((void *)a1 + 35) = v23;

      uint64_t v28 = objc_msgSend_qualityOfService(v5, v25, v26, v27);
      objc_msgSend_setQualityOfService_(a1, v29, v28, v30);
      uint64_t v34 = objc_msgSend_queuePriority(v5, v31, v32, v33);
      objc_msgSend_setQueuePriority_(a1, v35, v34, v36);
    }
  }

  return a1;
}

void *sub_18B0D673C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    a1 = objc_msgSend_stringWithFormat_(NSString, a2, @"operationID=%@", a4, a1[34]);
    uint64_t v4 = vars8;
  }
  return a1;
}

int *sub_18B0D6868(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = v2;
    id v5 = (objc_class *)objc_opt_class();
    id v6 = NSStringFromClass(v5);
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v11 = sub_18B0D673C(v7, v8, v9, v10);
    int v12 = 138543874;
    uint64_t v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 2114;
    uint64_t v17 = v11;
    _os_log_debug_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEBUG, "Placeholder op <%{public}@: %p; %{public}@> finishing in main",
      (uint8_t *)&v12,
      0x20u);
  }
  uint64_t result = *(int **)(a1 + 32);
  if (result) {
    return (int *)CKOperationExecutionStateTransitionToFinished(result, result + 64);
  }
  return result;
}

void sub_18B0D6A70(void *a1)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    if (!*((unsigned char *)obj + 260))
    {
      dispatch_group_leave(obj[31]);
      *((unsigned char *)obj + 26dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 1;
    }
    objc_sync_exit(obj);
  }
}

void sub_18B0D73BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B0D75DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 344) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 344);
    *(void *)(v8 + 344) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0D77B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0D77D0(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 344));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0D7958(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 352) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 352);
    *(void *)(v8 + 352) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0D7B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0D7B4C(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 352));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

id sub_18B0D7BA0(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    id v5 = (void *)v1[42];
    if (!v5)
    {
      uint64_t v6 = objc_msgSend_operationID(v1, v2, v3, v4);
      uint64_t v8 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v7, @"CKErrorDomain", 20, @"Operation %@ was cancelled internally by CloudKit", v6);
      uint64_t v9 = (void *)v1[42];
      v1[42] = v8;

      id v5 = (void *)v1[42];
    }
    id v10 = v5;
    objc_sync_exit(v1);
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

void sub_18B0D7C78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B0D7CD0(id a1)
{
  if (a1)
  {
    id v1 = (id *)a1;
    objc_sync_enter(v1);
    if (!v1[32])
    {
      uint64_t v5 = objc_msgSend_activityCreate(v1, v2, v3, v4);
      id v6 = v1[32];
      v1[32] = (id)v5;
    }
    objc_sync_exit(v1);

    a1 = v1[32];
  }

  return a1;
}

void sub_18B0D7D50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0D8158(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_transitionToExecuting(*(void **)(a1 + 32), a2, a3, a4) & 1) == 0)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v9 = objc_msgSend_operationID(*(void **)(a1 + 32), v5, v6, v7);
    objc_msgSend_raise_format_(v8, v10, *MEMORY[0x1E4F1C3C8], @"You can't restart an executing or finished CKOperation: %@", v9);
  }
  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), v5, v6, v7))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v11 = (void *)ck_log_facility_op;
    if (os_log_type_enabled((os_log_t)ck_log_facility_op, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = v11;
      uint64_t v13 = (objc_class *)objc_opt_class();
      __int16 v14 = NSStringFromClass(v13);
      uint64_t v15 = *(void **)(a1 + 32);
      id v19 = objc_msgSend_ckShortDescription(v15, v16, v17, v18);
      *(_DWORD *)buf = 138543874;
      id v146 = v14;
      __int16 v147 = 2048;
      long long v148 = v15;
      __int16 v149 = 2114;
      id v150 = v19;
      _os_log_impl(&dword_18AF10000, v12, OS_LOG_TYPE_DEFAULT, "Not starting already cancelled operation <%{public}@: %p; %{public}@>",
        buf,
        0x20u);
    }
    uint64_t v20 = *(void **)(a1 + 32);
    uint64_t v21 = sub_18B0D7BA0(v20);
    objc_msgSend_finishWithError_(v20, v22, (uint64_t)v21, v23);
  }
  else
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_18B0D8A8C;
    aBlock[3] = &unk_1E54640E8;
    objc_copyWeak(&v143, &location);
    unint64_t v140 = _Block_copy(aBlock);
    uint64_t v27 = objc_msgSend_resolvedConfiguration(*(void **)(a1 + 32), v24, v25, v26);
    id v31 = objc_msgSend_ckXPCActivity(v27, v28, v29, v30);

    if (v31)
    {
      uint64_t v35 = objc_msgSend_operationMetric(*(void **)(a1 + 32), v32, v33, v34);
      uint64_t v39 = objc_msgSend_criteria(v31, v36, v37, v38);
      objc_msgSend_validateXPCActivityCriteria_(*(void **)(a1 + 32), v40, (uint64_t)v39, v41);
      if (xpc_dictionary_get_BOOL(v39, (const char *)*MEMORY[0x1E4F14348])) {
        objc_msgSend_setObject_forKeyedSubscript_(v35, v42, MEMORY[0x1E4F1CC38], @"xpcActivity_criteria_requireSignificantUserInactivity");
      }
      if (!xpc_dictionary_get_BOOL(v39, (const char *)*MEMORY[0x1E4F14338])) {
        objc_msgSend_setObject_forKeyedSubscript_(v35, v43, MEMORY[0x1E4F1CC28], @"xpcActivity_criteria_requireNetworkConnectivity");
      }
      uint64_t v46 = objc_msgSend_identifier(v31, v43, v44, v45);
      objc_msgSend_setObject_forKeyedSubscript_(v35, v47, (uint64_t)v46, @"xpcActivity_identifier");
      sub_18B0D91F4(*(void *)(a1 + 32), v46);
      string = xpc_dictionary_get_string(v39, (const char *)*MEMORY[0x1E4F142C8]);
      if (string)
      {
        uint64_t v51 = objc_msgSend_stringWithUTF8String_(NSString, v48, (uint64_t)string, v50);
        objc_msgSend_setObject_forKeyedSubscript_(v35, v52, (uint64_t)v51, @"xpcActivity_priority");
      }
      else
      {
        uint64_t v51 = 0;
        objc_msgSend_setObject_forKeyedSubscript_(v35, v48, 0, @"xpcActivity_priority");
      }
      char shouldBeDataBudgeted = objc_msgSend_shouldBeDataBudgeted(v31, v53, v54, v55);
      uint64_t v57 = *(void *)(a1 + 32);
      if (v57)
      {
        *(void *)(v57 + 40dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 1;
        uint64_t v57 = *(void *)(a1 + 32);
      }
      if (shouldBeDataBudgeted)
      {
        if (v57) {
          *(void *)(v57 + 384) = 1;
        }
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v58 = (id)ck_log_facility_ck;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
        {
          uint64_t v59 = (objc_class *)objc_opt_class();
          NSStringFromClass(v59);
          id v60 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v61 = *(void **)(a1 + 32);
          id v65 = objc_msgSend_ckShortDescription(v61, v62, v63, v64);
          *(_DWORD *)buf = 138544130;
          id v146 = v60;
          __int16 v147 = 2048;
          long long v148 = v61;
          __int16 v149 = 2114;
          id v150 = v65;
          __int16 v151 = 2112;
          long long v152 = v46;
          _os_log_impl(&dword_18AF10000, v58, OS_LOG_TYPE_INFO, "Setting duetPreClearedMode KOperationDuetPreClearedModeWithBudgeting for operation <%{public}@: %p; %{public"
            "}@> for xpc_activity %@",
            buf,
            0x2Au);
        }
      }
      else
      {
        if (v57) {
          *(void *)(v57 + 384) = 2;
        }
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v58 = (id)ck_log_facility_ck;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
        {
          uint64_t v66 = (objc_class *)objc_opt_class();
          NSStringFromClass(v66);
          id v67 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v68 = *(void **)(a1 + 32);
          uint64_t v72 = objc_msgSend_ckShortDescription(v68, v69, v70, v71);
          *(_DWORD *)buf = 138544130;
          id v146 = v67;
          __int16 v147 = 2048;
          long long v148 = v68;
          __int16 v149 = 2114;
          id v150 = v72;
          __int16 v151 = 2112;
          long long v152 = v46;
          _os_log_impl(&dword_18AF10000, v58, OS_LOG_TYPE_INFO, "Setting duetPreClearedMode CKOperationDuetPreClearedModeWithoutBudgeting for operation <%{public}@: %p; %{pu"
            "blic}@> for xpc_activity %@",
            buf,
            0x2Au);
        }
      }

      int64_t int64 = xpc_dictionary_get_int64(v39, (const char *)*MEMORY[0x1E4F141C8]);
      uint64_t v76 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v74, int64, v75);
      objc_msgSend_setObject_forKeyedSubscript_(v35, v77, (uint64_t)v76, @"xpcActivity_interval");

      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v78 = (id)ck_log_facility_ck;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        __int16 v79 = (objc_class *)objc_opt_class();
        NSStringFromClass(v79);
        id v80 = (id)objc_claimAutoreleasedReturnValue();
        id v81 = *(void **)(a1 + 32);
        uint64_t v85 = objc_msgSend_ckShortDescription(v81, v82, v83, v84);
        *(_DWORD *)buf = 138544130;
        id v146 = v80;
        __int16 v147 = 2048;
        long long v148 = v81;
        __int16 v149 = 2114;
        id v150 = v85;
        __int16 v151 = 2112;
        long long v152 = v46;
        _os_log_impl(&dword_18AF10000, v78, OS_LOG_TYPE_INFO, "Adding eligibility handler to operation <%{public}@: %p; %{public}@> for xpc_activity %@",
          buf,
          0x2Au);
      }
      uint64_t v88 = objc_msgSend_addEligibilityChangedHandler_(v31, v86, (uint64_t)v140, v87);
      uint64_t v89 = *(void *)(a1 + 32);
      if (v89) {
        *(void *)(v89 + 376) = v88;
      }
    }
    objc_msgSend_setupBGSystemTaskExpirationHandler(*(void **)(a1 + 32), v32, v33, v34);
    __int16 v93 = objc_msgSend_deviceContext(*(void **)(a1 + 32), v90, v91, v92);
    id v97 = objc_msgSend_throttleManager(v93, v94, v95, v96);
    uint64_t v98 = *(void *)(a1 + 32);
    id v141 = 0;
    uint64_t v100 = objc_msgSend_enforcedThrottleForCriteria_willSendRequest_outThrottleError_(v97, v99, v98, 1, &v141);
    id v101 = v141;

    if (v100)
    {
      uint64_t v105 = *(void **)(a1 + 32);
      uint64_t v106 = objc_msgSend_CKClientSuitableError(v101, v102, v103, v104);
      objc_msgSend_finishWithError_(v105, v107, (uint64_t)v106, v108);
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v109 = (id)ck_log_facility_ck;
      if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
      {
        uint64_t v110 = (objc_class *)objc_opt_class();
        NSStringFromClass(v110);
        id v139 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v111 = *(void **)(a1 + 32);
        objc_msgSend_ckShortDescription(v111, v112, v113, v114);
        id v115 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v138 = objc_msgSend_configuration(*(void **)(a1 + 32), v116, v117, v118);
        uint64_t v122 = objc_msgSend_container(v138, v119, v120, v121);
        int v126 = objc_msgSend_configuration(*(void **)(a1 + 32), v123, v124, v125);
        uint64_t v130 = objc_msgSend_container(v126, v127, v128, v129);
        uint64_t v134 = objc_msgSend_implementation(v130, v131, v132, v133);
        *(_DWORD *)buf = 138544386;
        id v146 = v139;
        __int16 v147 = 2048;
        long long v148 = v111;
        __int16 v149 = 2114;
        id v150 = v115;
        __int16 v151 = 2048;
        long long v152 = v122;
        __int16 v153 = 2048;
        long long v154 = v134;
        _os_log_impl(&dword_18AF10000, v109, OS_LOG_TYPE_INFO, "Invoking main for operation <%{public}@: %p; %{public}@> on CKContainer/CKContainerImplementation %p / %p",
          buf,
          0x34u);
      }
      objc_msgSend_main(*(void **)(a1 + 32), v135, v136, v137);
    }

    objc_destroyWeak(&v143);
    objc_destroyWeak(&location);
  }
}

void sub_18B0D8A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
}

void sub_18B0D8A8C(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    uint64_t v6 = sub_18B0D7CD0(WeakRetained);
    os_activity_scope_enter(v6, &state);

    uint64_t v7 = xpc_activity_copy_identifier();
    xpc_activity_state_t v8 = xpc_activity_get_state(v3);
    BOOL should_defer = xpc_activity_should_defer(v3);
    BOOL v13 = should_defer;
    if (should_defer)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      __int16 v14 = (id)ck_log_facility_ck;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (objc_class *)objc_opt_class();
        NSStringFromClass(v15);
        id v16 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = objc_msgSend_ckShortDescription(v5, v17, v18, v19);
        *(_DWORD *)buf = 138543874;
        id v26 = v16;
        __int16 v27 = 2048;
        uint64_t v28 = v5;
        __int16 v29 = 2114;
        uint64_t v30 = v20;
        _os_log_impl(&dword_18AF10000, v14, OS_LOG_TYPE_INFO, "Should defer xpc_activity for operation <%{public}@: %p; %{public}@>",
          buf,
          0x20u);
      }
    }
    uint64_t v21 = objc_msgSend_callbackQueue(v5, v10, v11, v12);
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = sub_18B0D8CD4;
    v22[3] = &unk_1E54640C0;
    void v22[4] = v5;
    void v22[5] = v8;
    BOOL v23 = v13;
    v22[6] = v7;
    dispatch_async(v21, v22);

    os_activity_scope_leave(&state);
  }
}

void sub_18B0D8CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_18B0D8CD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v96[2] = *MEMORY[0x1E4F143B8];
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3, a4) & 1) == 0
    && objc_msgSend_isExecuting(*(void **)(a1 + 32), v5, v6, v7))
  {
    uint64_t v11 = objc_msgSend_resolvedConfiguration(*(void **)(a1 + 32), v8, v9, v10);
    uint64_t v15 = objc_msgSend_xpcActivityAutomaticallyDefer(v11, v12, v13, v14);

    uint64_t v19 = objc_msgSend_operationMetric(*(void **)(a1 + 32), v16, v17, v18);
    uint64_t v20 = CKStringForXPCActivityState(*(void *)(a1 + 40));
    objc_msgSend_setObject_forKeyedSubscript_(v19, v21, (uint64_t)v20, @"xpcActivity_state");

    uint64_t v24 = objc_msgSend_numberWithBool_(NSNumber, v22, *(unsigned __int8 *)(a1 + 56), v23);
    objc_msgSend_setObject_forKeyedSubscript_(v19, v25, (uint64_t)v24, @"xpcActivity_shouldDefer");

    uint64_t v28 = objc_msgSend_numberWithBool_(NSNumber, v26, v15, v27);
    objc_msgSend_setObject_forKeyedSubscript_(v19, v29, (uint64_t)v28, @"xpcActivity_autoDefer");

    unint64_t v32 = *(void *)(a1 + 40);
    if (v32 == 4)
    {
      if (!v15 || !*(unsigned char *)(a1 + 56)) {
        goto LABEL_19;
      }
      uint64_t v33 = objc_msgSend_stringWithFormat_(NSString, v30, @"xpc_activity (%s) was deferred.", v31, *(void *)(a1 + 48));
      uint64_t v34 = *MEMORY[0x1E4F28568];
      v83[0] = @"CKErrorDescription";
      v83[1] = v34;
      v84[0] = v33;
      v84[1] = v33;
      uint64_t v36 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v35, (uint64_t)v84, (uint64_t)v83, 2);
      uint64_t v38 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v37, @"CKInternalErrorDomain", 1026, v36);
      uint64_t v42 = objc_msgSend_CKClientSuitableError(v38, v39, v40, v41);

      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      unint64_t v43 = (void *)ck_log_facility_op;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_op, OS_LOG_TYPE_DEFAULT))
      {
LABEL_18:
        objc_msgSend_cancelWithUnderlyingError_message_(*(void **)(a1 + 32), v44, (uint64_t)v42, (uint64_t)v33);

LABEL_19:
        goto LABEL_20;
      }
      uint64_t v45 = v43;
      uint64_t v46 = (objc_class *)objc_opt_class();
      uint64_t v47 = NSStringFromClass(v46);
      uint64_t v48 = *(void **)(a1 + 32);
      uint64_t v52 = objc_msgSend_ckShortDescription(v48, v49, v50, v51);
      uint64_t v53 = (void *)v52;
      uint64_t v54 = *(void *)(a1 + 48);
      int v55 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 138544386;
      if (v55) {
        uint64_t v56 = @"true";
      }
      else {
        uint64_t v56 = @"false";
      }
      uint64_t v86 = v47;
      __int16 v87 = 2048;
      uint64_t v88 = v48;
      __int16 v89 = 2114;
      uint64_t v90 = v52;
      __int16 v91 = 2080;
      uint64_t v92 = v54;
      __int16 v93 = 2114;
      uint64_t v94 = v56;
      _os_log_impl(&dword_18AF10000, v45, OS_LOG_TYPE_DEFAULT, "Operation <%{public}@: %p; %{public}@> cancelled because of xpcActivity(%s). Should Defer(%{public}@).",
        buf,
        0x34u);
    }
    else
    {
      uint64_t v57 = CKStringForXPCActivityState(v32);
      objc_msgSend_setObject_forKeyedSubscript_(v19, v58, (uint64_t)v57, @"xpcActivity_state");

      uint64_t v59 = NSString;
      uint64_t v60 = *(void *)(a1 + 48);
      uint64_t v61 = CKStringForXPCActivityState(4uLL);
      int v62 = CKStringForXPCActivityState(*(void *)(a1 + 40));
      uint64_t v33 = objc_msgSend_stringWithFormat_(v59, v63, @"xpc_activity (%s) should be in state '%@', but was in state '%@'", v64, v60, v61, v62);

      uint64_t v65 = *MEMORY[0x1E4F28568];
      v95[0] = @"CKErrorDescription";
      v95[1] = v65;
      v96[0] = v33;
      v96[1] = v33;
      uint64_t v36 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v66, (uint64_t)v96, (uint64_t)v95, 2);
      uint64_t v68 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v67, @"CKInternalErrorDomain", 1025, v36);
      uint64_t v42 = objc_msgSend_CKClientSuitableError(v68, v69, v70, v71);

      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v72 = (void *)ck_log_facility_op;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_op, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      log = v72;
      uint64_t v73 = (objc_class *)objc_opt_class();
      uint64_t v47 = NSStringFromClass(v73);
      long long v74 = *(void **)(a1 + 32);
      uint64_t v53 = objc_msgSend_ckShortDescription(v74, v75, v76, v77);
      uint64_t v78 = v42;
      __int16 v79 = v36;
      uint64_t v80 = *(void *)(a1 + 48);
      CKStringForXPCActivityState(*(void *)(a1 + 40));
      id v81 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      uint64_t v86 = v47;
      __int16 v87 = 2048;
      uint64_t v88 = v74;
      __int16 v89 = 2114;
      uint64_t v90 = (uint64_t)v53;
      __int16 v91 = 2080;
      uint64_t v92 = v80;
      uint64_t v36 = v79;
      uint64_t v42 = v78;
      __int16 v93 = 2114;
      uint64_t v94 = v81;
      uint64_t v45 = log;
      _os_log_impl(&dword_18AF10000, log, OS_LOG_TYPE_DEFAULT, "Operation <%{public}@: %p; %{public}@> cancelled because of xpcActivity(%s). State(%{public}@).",
        buf,
        0x34u);
    }
    goto LABEL_18;
  }
LABEL_20:
  free(*(void **)(a1 + 48));
}

void sub_18B0D91F4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 408), a2);
  }
}

void sub_18B0D931C(uint64_t a1)
{
  v98[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x18C12ADA0]();
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    if ((objc_msgSend_isOutstandingOperation(v6, v2, v3, v4) & 1) != 0
      || (objc_msgSend_configuration(v6, v7, v8, v9),
          uint64_t v10 = objc_claimAutoreleasedReturnValue(),
          int isLongLived = objc_msgSend_isLongLived(v10, v11, v12, v13),
          v10,
          isLongLived))
    {
      uint64_t v15 = objc_msgSend_deviceContext(v6, v7, v8, v9);
      uint64_t v19 = objc_msgSend_deviceScopedStateManager(v15, v16, v17, v18);
      uint64_t v23 = objc_msgSend_operationID(v6, v20, v21, v22);
      objc_msgSend_registerLongLivedOperationWithIDAsOutstanding_(v19, v24, (uint64_t)v23, v25);
    }
    id v26 = objc_msgSend_configuration(v6, v7, v8, v9);
    uint64_t v30 = objc_msgSend_container(v26, v27, v28, v29);
    uint64_t v34 = objc_msgSend_options(v30, v31, v32, v33);
    if (objc_msgSend_enforceNamedOperationGroups(v34, v35, v36, v37))
    {
      uint64_t v41 = objc_msgSend_group(v6, v38, v39, v40);
      uint64_t v45 = objc_msgSend_name(v41, v42, v43, v44);

      if (!v45)
      {
        uint64_t v49 = [CKException alloc];
        uint64_t v53 = objc_msgSend_group(v6, v50, v51, v52);
        id v55 = (id)objc_msgSend_initWithCode_format_(v49, v54, 12, @"CKOperation enqueued without a named operation group.  Op %@  Group %@", v6, v53);

        objc_exception_throw(v55);
      }
    }
    else
    {
    }
    objc_msgSend__adoptPersonaIfNecessary(v6, v46, v47, v48);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    uint64_t v56 = sub_18B0D7CD0(v6);
    os_activity_scope_enter(v56, &state);

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v57 = (id)ck_log_facility_op;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v58 = (objc_class *)objc_opt_class();
      NSStringFromClass(v58);
      id v59 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v61 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v6, v60, 1, 0, 0);
      objc_msgSend_CKPropertiesStyleString(v61, v62, v63, v64);
      id v65 = (id)objc_claimAutoreleasedReturnValue();
      id v67 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v6, v66, 0, 1, 0);
      uint64_t v71 = objc_msgSend_CKPropertiesStyleString(v67, v68, v69, v70);
      *(_DWORD *)buf = 138544130;
      *(void *)&uint8_t buf[4] = v59;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2114;
      id v97 = v65;
      LOWORD(v98[0]) = 2112;
      *(void *)((char *)v98 + 2) = v71;
      _os_log_impl(&dword_18AF10000, v57, OS_LOG_TYPE_DEFAULT, "Starting operation <%{public}@: %p; %{public}@, %@>",
        buf,
        0x2Au);
    }
    uint64_t v75 = objc_msgSend_callbackQueue(v6, v72, v73, v74);
    dispatch_activate(v75);

    objc_msgSend_setQueueHasStarted_(v6, v76, 1, v77);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v78 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v86 = objc_msgSend_operationID(v6, v79, v80, v81);
      uint64_t v90 = objc_msgSend_qualityOfService(v6, v87, v88, v89);
      uint64_t v94 = CKStringForQOS(v90, v91, v92, v93);
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v86;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v94;
      _os_log_debug_impl(&dword_18AF10000, v78, OS_LOG_TYPE_DEBUG, "Operation %{public}@ will use QoS %{public}@", buf, 0x16u);
    }
    uint64_t v85 = objc_msgSend_callbackQueue(v6, v82, v83, v84);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_18B0D8158;
    id v97 = &unk_1E5460350;
    v98[0] = v6;
    dispatch_async(v85, buf);

    os_activity_scope_leave(&state);
  }
}

void sub_18B0D9788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_18B0D9B40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  uint64_t v8 = objc_msgSend_daemonInvocationSelector(v4, v5, v6, v7);
  uint64_t v11 = objc_msgSend_methodSignatureForSelector_(v3, v9, v8, v10);
  uint64_t v14 = objc_msgSend_invocationWithMethodSignature_(MEMORY[0x1E4F1CA18], v12, (uint64_t)v11, v13);
  objc_msgSend_setTarget_(v14, v15, (uint64_t)v3, v16);
  uint64_t v17 = objc_opt_class();
  uint64_t v21 = objc_msgSend_daemonInvocationSelector(v17, v18, v19, v20);
  objc_msgSend_setSelector_(v14, v22, v21, v23);
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_msgSend_retainArguments(v14, v24, v25, v26);
  objc_msgSend_operationInfo(*(void **)(a1 + 32), v27, v28, v29);
  id v41 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v35 = MEMORY[0x1E4F143A8];
  uint64_t v36 = 3221225472;
  uint64_t v37 = sub_18B0D9CD0;
  uint64_t v38 = &unk_1E5464110;
  objc_copyWeak(&v39, &location);
  id v40 = _Block_copy(&v35);
  objc_msgSend_setArgument_atIndex_(v14, v30, (uint64_t)&v41, 2, v35, v36, v37, v38);
  objc_msgSend_setArgument_atIndex_(v14, v31, (uint64_t)&v40, 3);
  objc_msgSend_invoke(v14, v32, v33, v34);

  objc_destroyWeak(&v39);
  objc_destroyWeak(&location);
}

void sub_18B0D9CA8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_18B0D9CD0(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Failed to perform operation with error: %@", (uint8_t *)&v8, 0xCu);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend_cancelWithError_(WeakRetained, v6, (uint64_t)v3, v7);
  }
}

void sub_18B0DA248(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), a2, a3, a4);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_18B0DA2D8;
  block[3] = &unk_1E5460350;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v5, block);
}

void sub_18B0DA2D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3, a4))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v8 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      id v9 = v8;
      uint64_t v10 = (objc_class *)objc_opt_class();
      uint64_t v11 = NSStringFromClass(v10);
      uint64_t v12 = *(void **)(a1 + 32);
      uint64_t v16 = objc_msgSend_ckShortDescription(v12, v13, v14, v15);
      int v46 = 138543874;
      uint64_t v47 = v11;
      __int16 v48 = 2048;
      uint64_t v49 = v12;
      __int16 v50 = 2114;
      uint64_t v51 = v16;
      uint64_t v17 = "Operation <%{public}@: %p; %{public}@> was cancelled, so skipping call to performCKOperation";
LABEL_17:
      _os_log_impl(&dword_18AF10000, v9, OS_LOG_TYPE_INFO, v17, (uint8_t *)&v46, 0x20u);
    }
  }
  else if (objc_msgSend_isFinished(*(void **)(a1 + 32), v5, v6, v7))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v18 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      id v9 = v18;
      uint64_t v19 = (objc_class *)objc_opt_class();
      uint64_t v11 = NSStringFromClass(v19);
      uint64_t v20 = *(void **)(a1 + 32);
      uint64_t v16 = objc_msgSend_ckShortDescription(v20, v21, v22, v23);
      int v46 = 138543874;
      uint64_t v47 = v11;
      __int16 v48 = 2048;
      uint64_t v49 = v20;
      __int16 v50 = 2114;
      uint64_t v51 = v16;
      uint64_t v17 = "Operation <%{public}@: %p; %{public}@> was finished, so skipping call to performCKOperation";
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 32);
    if (v24 && *(unsigned char *)(v24 + 278))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v25 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        id v9 = v25;
        uint64_t v26 = (objc_class *)objc_opt_class();
        uint64_t v11 = NSStringFromClass(v26);
        uint64_t v27 = *(void **)(a1 + 32);
        uint64_t v16 = objc_msgSend_ckShortDescription(v27, v28, v29, v30);
        int v46 = 138543874;
        uint64_t v47 = v11;
        __int16 v48 = 2048;
        uint64_t v49 = v27;
        __int16 v50 = 2114;
        uint64_t v51 = v16;
        uint64_t v17 = "Operation <%{public}@: %p; %{public}@> failed to enqueue, so skipping call to performCKOperation";
        goto LABEL_17;
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v31 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v35 = v31;
        uint64_t v36 = (objc_class *)objc_opt_class();
        uint64_t v37 = NSStringFromClass(v36);
        uint64_t v38 = *(void **)(a1 + 32);
        uint64_t v42 = objc_msgSend_ckShortDescription(v38, v39, v40, v41);
        int v46 = 138543874;
        uint64_t v47 = v37;
        __int16 v48 = 2048;
        uint64_t v49 = v38;
        __int16 v50 = 2114;
        uint64_t v51 = v42;
        _os_log_impl(&dword_18AF10000, v35, OS_LOG_TYPE_INFO, "Operation <%{public}@: %p; %{public}@> invoking on container throttle queue",
          (uint8_t *)&v46,
          0x20u);
      }
      objc_msgSend_ckSignpostBegin(*(void **)(a1 + 32), v32, v33, v34);
      objc_msgSend_performCKOperation(*(void **)(a1 + 32), v43, v44, v45);
    }
  }
}

void sub_18B0DA6A8(uint64_t a1)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_18B0DA788;
  aBlock[3] = &unk_1E5460350;
  void aBlock[4] = *(void *)(a1 + 32);
  id v2 = _Block_copy(aBlock);
  uint64_t v6 = v2;
  if (__sTestOverridesAvailable)
  {
    uint64_t v7 = objc_msgSend_invokePlaceholderOperationFinishedCallback(*(void **)(a1 + 32), v3, v4, v5);
    objc_msgSend_setPlaceholderOperationFinishedCallback_(*(void **)(a1 + 32), v8, 0, v9);
    objc_msgSend_takeActionOnOperation_proceedBlock_(v7, v10, *(void *)(a1 + 32), (uint64_t)v6);
  }
  else
  {
    (*((void (**)(void *))v2 + 2))(v2);
  }
}

void sub_18B0DA788(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend__finishDiscretionaryOperation(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_setProperty_atomic(v6, v5, 0, 448);
  }
}

void sub_18B0DAEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_18B0DAEE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v4, v5, v6);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_18B0DAF98;
  v9[3] = &unk_1E5461F80;
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v3;
  id v8 = v3;
  dispatch_async(v7, v9);
}

uint64_t sub_18B0DAF98(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_handleDiscretionaryOperationShouldStart_nonDiscretionary_error_, 0, 0);
}

id sub_18B0DAFAC(void *a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2;
  if (a1)
  {
    uint64_t v7 = objc_msgSend_configuration(a1, v3, v4, v5);
    uint64_t v11 = objc_msgSend_container(v7, v8, v9, v10);
    uint64_t v15 = objc_msgSend_discretionaryXPCConnection(v11, v12, v13, v14);

    if (!v15)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v37 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        uint64_t v52 = v37;
        uint64_t v56 = objc_msgSend_operationID(a1, v53, v54, v55);
        uint64_t v60 = objc_msgSend_configuration(a1, v57, v58, v59);
        uint64_t v64 = objc_msgSend_container(v60, v61, v62, v63);
        *(_DWORD *)buf = 138543618;
        uint64_t v82 = v56;
        __int16 v83 = 2112;
        uint64_t v84 = v64;
        _os_log_error_impl(&dword_18AF10000, v52, OS_LOG_TYPE_ERROR, "Couldn't get a discretionary connection for operation %{public}@ and container %@", buf, 0x16u);
      }
      uint64_t v41 = objc_msgSend_operationID(a1, v38, v39, v40);
      uint64_t v45 = objc_msgSend_configuration(a1, v42, v43, v44);
      uint64_t v49 = objc_msgSend_container(v45, v46, v47, v48);
      uint64_t v36 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v50, @"CKInternalErrorDomain", 2005, @"Couldn't get a discretionary connection for operation %@ and container %@", v41, v49);

      if (v6) {
        v6[2](v6, v36);
      }
      uint64_t v23 = 0;
      goto LABEL_18;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_18B0DE5D8;
    aBlock[3] = &unk_1E54610D8;
    uint64_t v16 = v6;
    uint64_t v80 = v16;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v23 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v15, v18, (uint64_t)v17, v19);
    if (v23)
    {
LABEL_10:

      uint64_t v36 = v80;
LABEL_18:

      goto LABEL_19;
    }
    uint64_t v78 = v6;
    uint64_t v24 = objc_msgSend_operationID(a1, v20, v21, v22);
    uint64_t v28 = objc_msgSend_configuration(a1, v25, v26, v27);
    uint64_t v32 = objc_msgSend_container(v28, v29, v30, v31);
    uint64_t v34 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v33, @"CKInternalErrorDomain", 2005, @"Couldn't get a discretionary connection for operation %@ and container %@", v24, v32);

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v35 = (void *)ck_log_facility_ck;
    uint64_t v6 = v78;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      id v65 = v35;
      uint64_t v69 = objc_msgSend_operationID(a1, v66, v67, v68);
      uint64_t v73 = objc_msgSend_configuration(a1, v70, v71, v72);
      uint64_t v77 = objc_msgSend_container(v73, v74, v75, v76);
      *(_DWORD *)buf = 138543618;
      uint64_t v82 = v69;
      __int16 v83 = 2112;
      uint64_t v84 = v77;
      _os_log_error_impl(&dword_18AF10000, v65, OS_LOG_TYPE_ERROR, "Couldn't get a discretionary connection for operation %{public}@ and container %@", buf, 0x16u);

      if (!v16) {
        goto LABEL_9;
      }
    }
    else if (!v16)
    {
LABEL_9:

      goto LABEL_10;
    }
    v16[2](v16, v34);
    goto LABEL_9;
  }
  uint64_t v23 = 0;
LABEL_19:

  return v23;
}

void sub_18B0DB3D4()
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v0 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_debug_impl(&dword_18AF10000, v0, OS_LOG_TYPE_DEBUG, "Queuing discretionary operation finished scheduling phase.", v1, 2u);
  }
}

void sub_18B0DB5C8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18B0DB5E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v2, 448, 1);
  }
  sub_18B0D6A70(WeakRetained);
}

void sub_18B0DB63C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = sub_18B0DB75C;
    uint64_t v17 = &unk_1E54621B0;
    id v3 = *(id *)(a1 + 32);
    id v18 = WeakRetained;
    id v19 = v3;
    uint64_t v4 = _Block_copy(&v14);
    unint64_t v11 = __ROR8__(objc_msgSend_qualityOfService(WeakRetained, v5, v6, v7, v14, v15, v16, v17) - 9, 3);
    if (v11 <= 3)
    {
      dispatch_block_t v12 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, (dispatch_qos_class_t)(8 * v11 + 9), 0, v4);

      uint64_t v4 = v12;
    }
    uint64_t v13 = objc_msgSend_callbackQueue(WeakRetained, v8, v9, v10);
    ck_call_or_dispatch_async_if_not_key(v13, kCKOperationCallbackQueueName, v4);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_18B0DB75C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v2, 448, 1);
  }

  sub_18B0D6A70(Property);
}

void sub_18B0DC0E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0DC5AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend__adoptPersonaIfNecessary(*(void **)(a1 + 32), a2, a3, a4);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  uint64_t v5 = sub_18B0D7CD0(*(id *)(a1 + 32));
  os_activity_scope_enter(v5, &v11);

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    if (!*(unsigned char *)(v9 + 276)
      || *(unsigned char *)(v9 + 277)
      || (objc_msgSend__finishDiscretionaryOperation(*(void **)(a1 + 32), v6, v7, v8, v11.opaque[0], v11.opaque[1]),
          (uint64_t v9 = *(void *)(a1 + 32)) != 0))
    {
      if (*(_DWORD *)(v9 + 288))
      {
        objc_msgSend__cancelDaemonOperation((void *)v9, v6, v7, v8);
        uint64_t v9 = *(void *)(a1 + 32);
      }
    }
  }
  uint64_t v10 = sub_18B0D7BA0((void *)v9);
  sub_18B0DC68C((unsigned char *)v9, v10);

  os_activity_scope_leave(&v11);
}

void sub_18B0DC678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B0DC68C(unsigned char *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  if (a1)
  {
    uint64_t v7 = objc_msgSend_callbackQueue(a1, v3, v4, v5);
    dispatch_assert_queue_V2(v7);

    if (__sTestOverridesAvailable
      && (objc_msgSend_unitTestOverrides(a1, v8, v9, v10),
          os_activity_scope_state_s v11 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v11, v12, @"SkipCheckingExecuting", v13),
          uint64_t v14 = objc_claimAutoreleasedReturnValue(),
          char v18 = objc_msgSend_BOOLValue(v14, v15, v16, v17),
          v14,
          v11,
          (v18 & 1) != 0)
      || (objc_msgSend_isExecuting(a1, v8, v9, v10) & 1) != 0)
    {
      if (!v6)
      {
        if (objc_msgSend_isCancelled(a1, v8, v9, v10))
        {
          sub_18B0D7BA0(a1);
          id v6 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v6 = 0;
        }
      }
      uint64_t v26 = objc_msgSend_error(a1, v8, v9, v10);

      if (!v26) {
        objc_msgSend_setError_(a1, v27, (uint64_t)v6, v29);
      }
      if ((objc_msgSend_isFinished(a1, v27, v28, v29) & 1) == 0)
      {
        a1[281] = 1;
        uint64_t v37 = objc_msgSend_error(a1, v30, v31, v32);
        objc_msgSend__finishOnCallbackQueueWithError_(a1, v38, (uint64_t)v37, v39);

        a1[281] = 0;
        goto LABEL_22;
      }
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v33 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = v33;
        uint64_t v24 = objc_msgSend_operationID(a1, v34, v35, v36);
        int v40 = 138543362;
        uint64_t v41 = v24;
        uint64_t v25 = "Ignoring _finishInternalOnCallbackQueue invocation on already-finished operation %{public}@";
        goto LABEL_20;
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v19 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = v19;
        uint64_t v24 = objc_msgSend_operationID(a1, v21, v22, v23);
        int v40 = 138543362;
        uint64_t v41 = v24;
        uint64_t v25 = "The operation %{public}@ didn't start or is already finished";
LABEL_20:
        _os_log_debug_impl(&dword_18AF10000, v20, OS_LOG_TYPE_DEBUG, v25, (uint8_t *)&v40, 0xCu);
      }
    }
  }
LABEL_22:
}

void sub_18B0DCA08(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = v4;
    uint64_t v10 = objc_msgSend_operationID(v5, v7, v8, v9);
    uint64_t v14 = objc_msgSend_configuration(*(void **)(a1 + 32), v11, v12, v13);
    char v18 = objc_msgSend_container(v14, v15, v16, v17);
    int v19 = 138543874;
    uint64_t v20 = v10;
    __int16 v21 = 2112;
    uint64_t v22 = v18;
    __int16 v23 = 2112;
    id v24 = v3;
    _os_log_error_impl(&dword_18AF10000, v6, OS_LOG_TYPE_ERROR, "Couldn't get a connection in order to cancel operation %{public}@ on container %@: %@", (uint8_t *)&v19, 0x20u);
  }
}

void sub_18B0DCB58(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v8 = objc_msgSend_operationID(v3, v5, v6, v7);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  id v10[2] = sub_18B0DCC08;
  v10[3] = &unk_1E5460350;
  void v10[4] = *(void *)(a1 + 32);
  objc_msgSend_cancelOperationWithIdentifier_completionHandler_(v4, v9, (uint64_t)v8, (uint64_t)v10);
}

void sub_18B0DCC08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (__sTestOverridesAvailable)
  {
    objc_msgSend_invokeDaemonOperationDidCancelCallback(*(void **)(a1 + 32), a2, a3, a4);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setDaemonOperationDidCancelCallback_(*(void **)(a1 + 32), v5, 0, v6);
    objc_msgSend_takeActionOnOperation_proceedBlock_(v8, v7, *(void *)(a1 + 32), (uint64_t)&unk_1ED7F5678);
  }
}

void sub_18B0DCEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B0DCF20(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v4 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = v4;
    uint64_t v10 = objc_msgSend_operationID(v5, v7, v8, v9);
    int v11 = 138412546;
    uint64_t v12 = v10;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_debug_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEBUG, "Error finishing discretionary operation %@: %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_18B0DD1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_18B0DD1D4(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    source = v1[46];
    id v2 = v1[46];
    v1[46] = 0;

    objc_sync_exit(v1);
    id v3 = source;
    if (source)
    {
      dispatch_source_cancel(source);
      id v3 = source;
    }
  }
}

void sub_18B0DD260(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = WeakRetained;
  if (WeakRetained)
  {
    if ((objc_msgSend_isFinished(WeakRetained, v3, v4, v5) & 1) == 0)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v7 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = v7;
        uint64_t v9 = (objc_class *)objc_opt_class();
        uint64_t v10 = NSStringFromClass(v9);
        uint64_t v12 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v6, v11, 1, 0, 0);
        uint64_t v16 = objc_msgSend_CKPropertiesStyleString(v12, v13, v14, v15);
        char v18 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v6, v17, 0, 1, 0);
        uint64_t v22 = objc_msgSend_CKPropertiesStyleString(v18, v19, v20, v21);
        __int16 v23 = CKDescriptionForTimeInterval(*(double *)(a1 + 40));
        int v46 = 138544386;
        uint64_t v47 = v10;
        __int16 v48 = 2048;
        uint64_t v49 = v6;
        __int16 v50 = 2114;
        uint64_t v51 = v16;
        __int16 v52 = 2112;
        uint64_t v53 = v22;
        __int16 v54 = 2112;
        uint64_t v55 = v23;
        _os_log_impl(&dword_18AF10000, v8, OS_LOG_TYPE_INFO, "Warn: ======================= Operation <%{public}@: %p; %{public}@, %@> has been running for %@.",
          (uint8_t *)&v46,
          0x34u);

        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
      }
      id v24 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = v24;
        uint64_t v32 = objc_msgSend_configuration(v6, v29, v30, v31);
        uint64_t v36 = objc_msgSend_container(v32, v33, v34, v35);
        uint64_t v37 = sub_18B064878(v36);
        int v46 = 138412290;
        uint64_t v47 = v37;
        _os_log_impl(&dword_18AF10000, v28, OS_LOG_TYPE_INFO, "Timeout status report: %@", (uint8_t *)&v46, 0xCu);
      }
      uint64_t v38 = objc_msgSend_configuration(v6, v25, v26, v27);
      uint64_t v42 = objc_msgSend_container(v38, v39, v40, v41);
      objc_msgSend_dumpDaemonStatusReport(v42, v43, v44, v45);
    }
    sub_18B0DD1D4(v6);
  }
}

void sub_18B0DD7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_18B0DE4D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_18B0DE4FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isOutstandingOperation(*(void **)(a1 + 32), a2, a3, a4)) {
    return 0;
  }
  uint64_t v8 = objc_msgSend_configuration(*(void **)(a1 + 32), v5, v6, v7);
  char isLongLived = objc_msgSend_isLongLived(v8, v9, v10, v11);

  if (isLongLived) {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  return !v14 || *(_DWORD *)(v14 + 288) == 0;
}

void sub_18B0DE57C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend__handleRemoteProxyFailureWithError_(WeakRetained, v4, (uint64_t)v3, v5);
}

void sub_18B0DE5D8(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Error connecting to CloudKit Discretionary daemon: %@", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

uint64_t sub_18B0DF830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_18B0DFA7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B0DFD88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend__adoptPersonaIfNecessary(*(void **)(a1 + 32), a2, a3, a4);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  uint64_t v5 = sub_18B0D7CD0(*(id *)(a1 + 32));
  os_activity_scope_enter(v5, &v8);

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    *(unsigned char *)(v6 + 282) = 1;
    id v7 = *(unsigned char **)(a1 + 32);
  }
  else
  {
    id v7 = 0;
  }
  sub_18B0DC68C(v7, *(void **)(a1 + 40));
  os_activity_scope_leave(&v8);
}

void sub_18B0DFE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B0DFED4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend__adoptPersonaIfNecessary(*(void **)(a1 + 32), a2, a3, a4);
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  uint64_t v5 = sub_18B0D7CD0(*(id *)(a1 + 32));
  os_activity_scope_enter(v5, &v6);

  sub_18B0DC68C(*(unsigned char **)(a1 + 32), *(void **)(a1 + 40));
  os_activity_scope_leave(&v6);
}

void sub_18B0DFF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CloudKit_Is_Slowing_Failing_Operations_Due_To_High_Error_Rate(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_sleepForTimeInterval_(MEMORY[0x1E4F29060], a2, a3, a4);
}

void sub_18B0E15F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0E18F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0E19E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0E1ADC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0E258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

uint64_t sub_18B0E2B60(uint64_t result)
{
  if (result) {
    return *(void *)(result + 496);
  }
  return result;
}

void sub_18B0E2B74(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 496), a2);
  }
}

void sub_18B0E370C(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x18C12ADA0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B0E444C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B0E4568(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0E4BA8()
{
  id v0 = objc_alloc_init(CKMemoryInfo);
  uint64_t v1 = qword_1EB279C78;
  qword_1EB279C78 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_18B0E4C38()
{
  dispatch_workloop_t v0 = dispatch_workloop_create("com.apple.cloudkit.memoryInfo");
  uint64_t v1 = qword_1EB279C88;
  qword_1EB279C88 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_18B0E4D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_18B0E4DA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v4 = objc_msgSend_source(WeakRetained, v1, v2, v3);
    uintptr_t data = dispatch_source_get_data(v4);

    objc_msgSend_handleMemoryPressureEvent_(WeakRetained, v6, data, v7);
  }
}

void sub_18B0E5080(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postNotificationName_object_(v6, v5, @"CKMemoryPressureDidChangeNotification", *(void *)(a1 + 32));
}

void sub_18B0E51D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0E51E8()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1C998]);
  uint64_t v1 = (void *)qword_1EB279CA0;
  qword_1EB279CA0 = (uint64_t)v0;

  uint64_t v4 = (void *)qword_1EB279CA0;

  return objc_msgSend_setName_(v4, v2, @"CKObjcClassCache", v3);
}

uint64_t sub_18B0E54F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_name(a2, (const char *)a2, a3, a4);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v5, v6, *(void *)(a1 + 32), v7);

  return isEqualToString;
}

void sub_18B0E5BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

uint64_t sub_18B0E5BC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v5, v8, v7);
      uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v10, v8, v11);
      uint64_t v16 = *(void *)(a1 + 48);
      if (v16) {
        objc_msgSend_operations(*(void **)(v16 + 104), v12, v13, v14);
      }
      else {
      uint64_t v17 = objc_msgSend_operations(0, v12, v13, v14);
      }
      uint64_t v21 = objc_msgSend_firstObject(v17, v18, v19, v20);

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v25 = objc_msgSend_includedMetadata(v21, v22, v23, v24);
        if (objc_msgSend_containsObject_(v25, v26, (uint64_t)v9, v27))
        {
          uint64_t v30 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 48) + 8), v28, (uint64_t)v9, v29);

          if (v30 != v15)
          {
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            }
            uint64_t v31 = ck_log_facility_data_repair;
            if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t v39 = 0;
              _os_log_debug_impl(&dword_18AF10000, v31, OS_LOG_TYPE_DEBUG, "Attempted to change upload request callback while operation was already running", v39, 2u);
            }
          }
        }
        else
        {
        }
      }
      uint64_t v32 = _Block_copy(v15);
      uint64_t v33 = sub_18B0E5DA4(*(dispatch_queue_t **)(a1 + 48));
      objc_msgSend_setObject_forKeyedSubscript_(v33, v34, (uint64_t)v32, (uint64_t)v9);

      ++v8;
    }
    while (v8 < objc_msgSend_count(*(void **)(a1 + 32), v35, v36, v37));
  }
  return objc_msgSend_tickle(*(void **)(a1 + 48), v5, v6, v7);
}

dispatch_queue_t *sub_18B0E5DA4(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    dispatch_assert_queue_V2(a1[10]);
    a1 = v2[1];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_18B0E5EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_18B0E5F08(uint64_t a1)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v2 = sub_18B0E6568(*(dispatch_queue_t **)(a1 + 32));
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v107, (uint64_t)v115, 16);
  if (!v4) {
    goto LABEL_65;
  }
  uint64_t v8 = v4;
  uint64_t v9 = *(void *)v108;
  while (2)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v108 != v9) {
        objc_enumerationMutation(v2);
      }
      uint64_t v11 = *(void **)(*((void *)&v107 + 1) + 8 * i);
      uint64_t v12 = objc_msgSend_repairZoneRecordID(v11, v5, v6, v7);
      int isEqual = objc_msgSend_isEqual_(v12, v13, *(void *)(a1 + 40), v14);

      if (isEqual)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v16 = ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v114 = v11;
          _os_log_debug_impl(&dword_18AF10000, v16, OS_LOG_TYPE_DEBUG, "Attempting to cancel repairs for: %@", buf, 0xCu);
        }
        uint64_t v20 = objc_msgSend_allRemainingRequestableAssets(*(void **)(a1 + 32), v17, v18, v19);
        int v23 = objc_msgSend_containsObject_(v20, v21, (uint64_t)v11, v22);

        if (v23)
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v24 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_18AF10000, v24, OS_LOG_TYPE_DEBUG, "Operation not yet started, cancelling", buf, 2u);
          }
          uint64_t v25 = sub_18B0E5DA4(*(dispatch_queue_t **)(a1 + 32));
          objc_msgSend_setObject_forKeyedSubscript_(v25, v26, 0, (uint64_t)v11);

          uint64_t v29 = *(void *)(a1 + 32);
          if (v29) {
            objc_msgSend_removeObjectForKey_(*(void **)(v29 + 128), v27, (uint64_t)v11, v28);
          }
          else {
            objc_msgSend_removeObjectForKey_(0, v27, (uint64_t)v11, v28);
          }
          goto LABEL_65;
        }
        uint64_t v30 = sub_18B0E65E8(*(dispatch_queue_t **)(a1 + 32));
        int v33 = objc_msgSend_containsObject_(v30, v31, (uint64_t)v11, v32);

        if (v33)
        {
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          uint64_t v37 = *(void *)(a1 + 32);
          if (v37) {
            objc_msgSend_operations(*(void **)(v37 + 96), v34, v35, v36, v2);
          }
          else {
            objc_msgSend_operations(0, v34, v35, v36, v2);
          }
          id obj = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v38, (uint64_t)&v103, (uint64_t)v112, 16);
          if (v39)
          {
            uint64_t v40 = v39;
            uint64_t v41 = *(void *)v104;
            while (2)
            {
              for (uint64_t j = 0; j != v40; ++j)
              {
                if (*(void *)v104 != v41) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v43 = *(void **)(*((void *)&v103 + 1) + 8 * j);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v47 = objc_msgSend_metadata(v43, v44, v45, v46);
                  uint64_t v51 = objc_msgSend_repairZoneRecordID(v47, v48, v49, v50);
                  uint64_t v55 = objc_msgSend_repairZoneRecordID(v11, v52, v53, v54);
                  int v58 = objc_msgSend_isEqual_(v51, v56, (uint64_t)v55, v57);

                  if (v58)
                  {
                    if (ck_log_initialization_predicate != -1) {
                      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
                    }
                    uint64_t v2 = v97;
                    uint64_t v88 = ck_log_facility_data_repair;
                    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_debug_impl(&dword_18AF10000, v88, OS_LOG_TYPE_DEBUG, "Found operation in request queue, cancelling", buf, 2u);
                    }
                    objc_msgSend_cancel(v43, v89, v90, v91);

                    goto LABEL_65;
                  }
                }
              }
              uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v44, (uint64_t)&v103, (uint64_t)v112, 16);
              if (v40) {
                continue;
              }
              break;
            }
          }
        }
        else
        {
          uint64_t v59 = sub_18B0E662C(*(dispatch_queue_t **)(a1 + 32));
          int v62 = objc_msgSend_containsObject_(v59, v60, (uint64_t)v11, v61);

          if (!v62)
          {
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            }
            uint64_t v92 = ck_log_facility_data_repair;
            if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_18AF10000, v92, OS_LOG_TYPE_ERROR, "Could not find operation for cancellation", buf, 2u);
            }
            goto LABEL_65;
          }
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          uint64_t v66 = *(void *)(a1 + 32);
          if (v66) {
            objc_msgSend_operations(*(void **)(v66 + 104), v63, v64, v65, v2);
          }
          else {
          uint64_t v67 = objc_msgSend_operations(0, v63, v64, v65, v2);
          }
          uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v67, v68, (uint64_t)&v99, (uint64_t)v111, 16);
          if (v69)
          {
            uint64_t v70 = v69;
            uint64_t v71 = *(void *)v100;
            while (2)
            {
              for (uint64_t k = 0; k != v70; ++k)
              {
                if (*(void *)v100 != v71) {
                  objc_enumerationMutation(v67);
                }
                uint64_t v73 = *(void **)(*((void *)&v99 + 1) + 8 * k);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v77 = objc_msgSend_includedMetadata(v73, v74, v75, v76);
                  if (objc_msgSend_count(v77, v78, v79, v80) == 1)
                  {
                    uint64_t v84 = objc_msgSend_includedMetadata(v73, v81, v82, v83);
                    int v87 = objc_msgSend_containsObject_(v84, v85, (uint64_t)v11, v86);

                    if (v87)
                    {
                      if (ck_log_initialization_predicate != -1) {
                        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
                      }
                      uint64_t v2 = v97;
                      uint64_t v93 = ck_log_facility_data_repair;
                      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_debug_impl(&dword_18AF10000, v93, OS_LOG_TYPE_DEBUG, "Found operation in upload queue, cancelling", buf, 2u);
                      }
                      objc_msgSend_cancel(v73, v94, v95, v96);

                      goto LABEL_65;
                    }
                  }
                  else
                  {
                  }
                }
              }
              uint64_t v70 = objc_msgSend_countByEnumeratingWithState_objects_count_(v67, v74, (uint64_t)&v99, (uint64_t)v111, 16);
              if (v70) {
                continue;
              }
              break;
            }
          }
        }
        uint64_t v2 = v97;
        goto LABEL_65;
      }
    }
    uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v107, (uint64_t)v115, 16);
    if (v8) {
      continue;
    }
    break;
  }
LABEL_65:
}

id sub_18B0E6568(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v2 = sub_18B0E5DA4(a1);
    uint64_t v6 = objc_msgSend_allKeys(v2, v3, v4, v5);
    uint64_t v9 = objc_msgSend_setWithArray_(v1, v7, (uint64_t)v6, v8);
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

dispatch_queue_t *sub_18B0E65E8(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    dispatch_assert_queue_V2(a1[10]);
    a1 = v2[4];
    uint64_t v1 = vars8;
  }
  return a1;
}

dispatch_queue_t *sub_18B0E662C(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    dispatch_assert_queue_V2(a1[10]);
    a1 = v2[5];
    uint64_t v1 = vars8;
  }
  return a1;
}

dispatch_queue_t *sub_18B0E6670(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    dispatch_assert_queue_V2(a1[10]);
    a1 = v2[2];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_18B0E66B4(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v2 = sub_18B0E6670(a1);
    uint64_t v6 = objc_msgSend_allKeys(v2, v3, v4, v5);
    uint64_t v9 = objc_msgSend_setWithArray_(v1, v7, (uint64_t)v6, v8);
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

dispatch_queue_t *sub_18B0E6734(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    dispatch_assert_queue_V2(a1[10]);
    a1 = v2[3];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_18B0E6784(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    uint64_t v7 = *(void **)(a1 + 80);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_18B0E6844;
    v8[3] = &unk_1E5463440;
    void v8[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    ck_call_or_dispatch_sync_if_not_key(v7, (const void *)(a1 + 80), v8);
  }
}

void sub_18B0E6844(uint64_t a1)
{
  uint64_t v190 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = (void *)ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    __int16 v151 = v2;
    long long v152 = objc_opt_class();
    uint64_t v155 = objc_msgSend_nameForEvent_(v152, v153, *(void *)(a1 + 48), v154);
    uint64_t v156 = (void *)v155;
    uint64_t v157 = *(__CFString **)(a1 + 40);
    uint64_t v158 = @"with object ";
    BOOL v159 = v157 == 0;
    if (!v157)
    {
      uint64_t v158 = &stru_1ED7F5C98;
      uint64_t v157 = &stru_1ED7F5C98;
    }
    *(_DWORD *)id location = 138544130;
    *(void *)&location[4] = v155;
    *(_WORD *)&location[12] = 2114;
    *(void *)&location[14] = v158;
    if (v159) {
      id v160 = &stru_1ED7F5C98;
    }
    else {
      id v160 = @" ";
    }
    *(_WORD *)&location[22] = 2112;
    v188 = v157;
    LOWORD(v189) = 2112;
    *(void *)((char *)&v189 + 2) = v160;
    _os_log_debug_impl(&dword_18AF10000, v151, OS_LOG_TYPE_DEBUG, "Received %{public}@ event %{public}@%@%@in repair scheduler", location, 0x2Au);
  }
  switch(*(void *)(a1 + 48))
  {
    case 0:
      goto LABEL_50;
    case 1:
      uint64_t v6 = *(dispatch_source_t **)(a1 + 32);
      if (v6 && v6[14])
      {
        dispatch_source_cancel(v6[14]);
        sub_18B0E7534(*(void *)(a1 + 32), 0);
        uint64_t v6 = *(dispatch_source_t **)(a1 + 32);
      }
      objc_msgSend_allRemainingUploadableAssets(v6, v3, v4, v5);
      long long v181 = 0u;
      long long v182 = 0u;
      long long v180 = 0u;
      long long v179 = 0u;
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v9 = 0;
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v179, (uint64_t)v186, 16);
      if (v10)
      {
        uint64_t v11 = *(void *)v180;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v180 != v11) {
              objc_enumerationMutation(v7);
            }
            uint64_t v13 = *(void *)(*((void *)&v179 + 1) + 8 * i);
            uint64_t v14 = objc_opt_class();
            uint64_t v15 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
            uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v15, v16, v13, v17);
            uint64_t v21 = objc_msgSend_estimatedSizeForAssetOrPackage_(v14, v19, (uint64_t)v18, v20);

            v9 += v21;
          }
          uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v22, (uint64_t)&v179, (uint64_t)v186, 16);
        }
        while (v10);
      }

      int v23 = sub_18B0E65E8(*(dispatch_queue_t **)(a1 + 32));
      if (objc_msgSend_count(v23, v24, v25, v26))
      {
        uint64_t v27 = *(void **)(a1 + 32);
        if (v27) {
          uint64_t v27 = (void *)v27[13];
        }
        uint64_t v28 = v27;
        if (objc_msgSend_operationCount(v28, v29, v30, v31)
          || (uint64_t v35 = objc_msgSend_count(v7, v32, v33, v34),
              v35 >= objc_msgSend_repairBatchCountLimit(*(void **)(a1 + 32), v36, v37, v38)))
        {
        }
        else
        {
          self;

          if (v9 < 104857600)
          {
            objc_initWeak((id *)location, *(id *)(a1 + 32));
            uint64_t v39 = *(void *)(a1 + 32);
            if (v39) {
              uint64_t v40 = *(NSObject **)(v39 + 80);
            }
            else {
              uint64_t v40 = 0;
            }
            uint64_t v41 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v40);
            objc_msgSend_requestTimeout(*(void **)(a1 + 32), v42, v43, v44);
            dispatch_time_t v46 = dispatch_time(0, (uint64_t)(v45 * 1000000000.0));
            objc_msgSend_requestTimeout(*(void **)(a1 + 32), v47, v48, v49);
            dispatch_source_set_timer(v41, v46, (unint64_t)(v50 * 1000000000.0), 0x3B9ACA00uLL);
            handler[0] = MEMORY[0x1E4F143A8];
            handler[1] = 3221225472;
            handler[2] = sub_18B0E7544;
            handler[3] = &unk_1E54610B0;
            objc_copyWeak(&v178, (id *)location);
            dispatch_source_set_event_handler(v41, handler);
            dispatch_resume(v41);
            sub_18B0E7534(*(void *)(a1 + 32), v41);
            objc_destroyWeak(&v178);

            objc_destroyWeak((id *)location);
          }
        }
      }
      else
      {
      }
LABEL_50:
      uint64_t v108 = *(void *)(a1 + 32);
      if (v108)
      {
        from.opaque[0] = 0;
        from.opaque[1] = (uint64_t)&from;
        uint64_t v184 = 0x2020000000;
        uint64_t v185 = 0;
        id v109 = *(id *)(v108 + 80);
        *(void *)id location = MEMORY[0x1E4F143A8];
        *(void *)&location[8] = 3221225472;
        *(void *)&location[16] = sub_18B0EAC68;
        v188 = (__CFString *)&unk_1E5464310;
        *(void *)&long long v189 = v108;
        *((void *)&v189 + 1) = &from;
        ck_call_or_dispatch_sync_if_not_key(v109, (const void *)(v108 + 80), location);

        uint64_t v110 = *(void *)(from.opaque[1] + 24);
        _Block_object_dispose(&from, 8);
        uint64_t v111 = *(void *)(a1 + 32);
        if (v111)
        {
          from.opaque[0] = 0;
          from.opaque[1] = (uint64_t)&from;
          uint64_t v184 = 0x2020000000;
          uint64_t v185 = 0;
          id v112 = *(id *)(v111 + 80);
          *(void *)id location = MEMORY[0x1E4F143A8];
          *(void *)&location[8] = 3221225472;
          *(void *)&location[16] = sub_18B0EADAC;
          v188 = (__CFString *)&unk_1E5460080;
          *(void *)&long long v189 = v111;
          *((void *)&v189 + 1) = &from;
          ck_call_or_dispatch_sync_if_not_key(v112, (const void *)(v111 + 80), location);

          uint64_t v111 = *(void *)(from.opaque[1] + 24);
          _Block_object_dispose(&from, 8);
          uint64_t v113 = *(dispatch_queue_t **)(a1 + 32);
        }
        else
        {
          uint64_t v113 = 0;
        }
      }
      else
      {
        uint64_t v113 = 0;
        uint64_t v110 = 0;
        uint64_t v111 = 0;
      }
      uint64_t v114 = sub_18B0E65E8(v113);
      uint64_t v118 = objc_msgSend_count(v114, v115, v116, v117);

      uint64_t v122 = objc_msgSend_allRemainingUploadableAssets(*(void **)(a1 + 32), v119, v120, v121);
      uint64_t v126 = objc_msgSend_count(v122, v123, v124, v125);

      uint64_t v130 = objc_msgSend_repairBatchCountLimit(*(void **)(a1 + 32), v127, v128, v129);
      if (v118 + v111 < objc_msgSend_cacheCountLimit(*(void **)(a1 + 32), v131, v132, v133))
      {
        self;
        self;
        if (v110 <= 104857599)
        {
          uint64_t v137 = objc_msgSend_cacheCountLimit(*(void **)(a1 + 32), v134, v135, v136);
          uint64_t v138 = *(void *)(a1 + 32);
          if (v138)
          {
            uint64_t v139 = (v130 - (v126 + v118)) & ~((v130 - (v126 + v118)) >> 63);
            if ((unint64_t)v139 <= 1) {
              uint64_t v139 = 1;
            }
            if (v139 >= v137) {
              uint64_t v140 = v137;
            }
            else {
              uint64_t v140 = v139;
            }
            id v141 = _os_activity_create(&dword_18AF10000, "client/data-repair-enqueue-requests", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
            from.opaque[0] = 0;
            from.opaque[1] = 0;
            os_activity_scope_enter(v141, &from);
            id v142 = *(id *)(v138 + 80);
            *(void *)id location = MEMORY[0x1E4F143A8];
            *(void *)&location[8] = 3221225472;
            *(void *)&location[16] = sub_18B0E76CC;
            v188 = (__CFString *)&unk_1E5463198;
            *(void *)&long long v189 = v138;
            *((void *)&v189 + 1) = v140;
            ck_call_or_dispatch_sync_if_not_key(v142, (const void *)(v138 + 80), location);

            os_activity_scope_leave(&from);
          }
        }
      }
      uint64_t v143 = *(void *)(a1 + 32);
      if (!v143) {
        goto LABEL_93;
      }
      id v144 = *(id *)(v143 + 112);
      if (v144)
      {
      }
      else
      {
        uint64_t v145 = *(void *)(a1 + 32);
        if (v145) {
          uint64_t v146 = objc_msgSend_operationCount(*(void **)(v145 + 104), v134, v135, v136);
        }
        else {
LABEL_93:
        }
          uint64_t v146 = objc_msgSend_operationCount(0, v134, v135, v136);
        if (!v146)
        {
          uint64_t v147 = *(void *)(a1 + 32);
          if (v147)
          {
            long long v148 = _os_activity_create(&dword_18AF10000, "client/data-repair-enqueue-uploads", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
            from.opaque[0] = 0;
            from.opaque[1] = 0;
            os_activity_scope_enter(v148, &from);
            id WeakRetained = objc_loadWeakRetained((id *)(v147 + 64));
            if (WeakRetained)
            {
              id v150 = *(id *)(v147 + 80);
              *(void *)id location = MEMORY[0x1E4F143A8];
              *(void *)&location[8] = 3221225472;
              *(void *)&location[16] = sub_18B0E8054;
              v188 = (__CFString *)&unk_1E5461F80;
              *(void *)&long long v189 = v147;
              *((void *)&v189 + 1) = WeakRetained;
              ck_call_or_dispatch_sync_if_not_key(v150, (const void *)(v147 + 80), location);
            }
            else
            {
              if (ck_log_initialization_predicate != -1) {
                dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
              }
              v161 = ck_log_facility_data_repair;
              if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)id location = 0;
                _os_log_debug_impl(&dword_18AF10000, v161, OS_LOG_TYPE_DEBUG, "Not scheduling upload batch due to nil container", location, 2u);
              }
            }

            os_activity_scope_leave(&from);
          }
        }
      }
LABEL_82:
      uint64_t v162 = sub_18B0E6568(*(dispatch_queue_t **)(a1 + 32));
      if (objc_msgSend_count(v162, v163, v164, v165))
      {
      }
      else
      {
        uint64_t v169 = objc_msgSend_delegate(*(void **)(a1 + 32), v166, v167, v168);
        BOOL v170 = v169 == 0;

        if (!v170)
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          v171 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)id location = 0;
            _os_log_debug_impl(&dword_18AF10000, v171, OS_LOG_TYPE_DEBUG, "Completed all enqueued repairs", location, 2u);
          }
          uint64_t v172 = *(void *)(a1 + 32);
          if (v172) {
            v173 = *(NSObject **)(v172 + 88);
          }
          else {
            v173 = 0;
          }
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = sub_18B0E7678;
          block[3] = &unk_1E5460350;
          void block[4] = v172;
          dispatch_async(v173, block);
        }
      }
      return;
    case 2:
      id v51 = *(id *)(a1 + 40);
      if (objc_msgSend_errorIsRetriableInNearFuture_(CKAssetRepairOperationUtilities, v52, (uint64_t)v51, v53))
      {
        uint64_t v56 = *(void *)(a1 + 32);
        if (v56
          && ((uint64_t v57 = *(NSObject **)(v56 + 120)) == 0
           || (dispatch_source_cancel(v57), sub_18B0E7590(*(void *)(a1 + 32), 0), (uint64_t v56 = *(void *)(a1 + 32)) != 0)))
        {
          objc_msgSend_setSuspended_(*(void **)(v56 + 104), v54, 1, v55);
        }
        else
        {
          objc_msgSend_setSuspended_(0, v54, 1, v55);
        }
        uint64_t v61 = objc_msgSend_userInfo(v51, v58, v59, v60);
        uint64_t v64 = objc_msgSend_objectForKeyedSubscript_(v61, v62, @"CKRetryAfter", v63);
        objc_msgSend_doubleValue(v64, v65, v66, v67);
        double v72 = v71;
        if (v71 == 0.0)
        {
          objc_msgSend_defaultSuspensionTime(*(void **)(a1 + 32), v68, v69, v70);
          double v72 = v73;
        }

        objc_initWeak((id *)&from, *(id *)(a1 + 32));
        uint64_t v74 = *(void *)(a1 + 32);
        if (v74) {
          uint64_t v75 = *(NSObject **)(v74 + 80);
        }
        else {
          uint64_t v75 = 0;
        }
        uint64_t v76 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v75);
        dispatch_time_t v77 = dispatch_time(0, (uint64_t)(v72 * 1000000000.0));
        dispatch_source_set_timer(v76, v77, (unint64_t)(v72 * 1000000000.0), 0x3B9ACA00uLL);
        v175[0] = MEMORY[0x1E4F143A8];
        v175[1] = 3221225472;
        v175[2] = sub_18B0E75A0;
        v175[3] = &unk_1E54610B0;
        objc_copyWeak(&v176, (id *)&from);
        dispatch_source_set_event_handler(v76, v175);
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v78 = ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)id location = 134217984;
          *(double *)&location[4] = v72;
          _os_log_debug_impl(&dword_18AF10000, v78, OS_LOG_TYPE_DEBUG, "Suspending upload queue for %f", location, 0xCu);
        }
        dispatch_resume(v76);
        sub_18B0E7590(*(void *)(a1 + 32), v76);
        objc_destroyWeak(&v176);

        objc_destroyWeak((id *)&from);
      }

      goto LABEL_82;
    case 3:
      uint64_t v79 = *(void *)(a1 + 32);
      if (v79) {
        objc_msgSend_cancelAllOperations(*(void **)(v79 + 104), v3, v4, v5);
      }
      else {
        objc_msgSend_cancelAllOperations(0, v3, v4, v5);
      }
      uint64_t v83 = *(void *)(a1 + 32);
      if (v83) {
        objc_msgSend_cancelAllOperations(*(void **)(v83 + 96), v80, v81, v82);
      }
      else {
        objc_msgSend_cancelAllOperations(0, v80, v81, v82);
      }
      uint64_t v84 = sub_18B0E65E8(*(dispatch_queue_t **)(a1 + 32));
      objc_msgSend_removeAllObjects(v84, v85, v86, v87);

      uint64_t v88 = sub_18B0E662C(*(dispatch_queue_t **)(a1 + 32));
      objc_msgSend_removeAllObjects(v88, v89, v90, v91);

      uint64_t v92 = sub_18B0E5DA4(*(dispatch_queue_t **)(a1 + 32));
      objc_msgSend_removeAllObjects(v92, v93, v94, v95);

      uint64_t v96 = sub_18B0E6734(*(dispatch_queue_t **)(a1 + 32));
      objc_msgSend_removeAllObjects(v96, v97, v98, v99);

      uint64_t v103 = *(void *)(a1 + 32);
      if (v103) {
        objc_msgSend_removeAllObjects(*(void **)(v103 + 128), v100, v101, v102);
      }
      else {
        objc_msgSend_removeAllObjects(0, v100, v101, v102);
      }
      uint64_t v106 = *(void *)(a1 + 32);
      if (v106)
      {
        long long v107 = *(void **)(v106 + 104);
        *(void *)id location = MEMORY[0x1E4F143A8];
        *(void *)&location[8] = 3221225472;
        *(void *)&location[16] = sub_18B0E958C;
        v188 = (__CFString *)&unk_1E5460350;
        *(void *)&long long v189 = v106;
        objc_msgSend_addOperationWithBlock_(v107, v104, (uint64_t)location, v105);
      }
      goto LABEL_82;
    default:
      goto LABEL_82;
  }
}

void sub_18B0E74DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,os_activity_scope_state_s state)
{
  objc_destroyWeak((id *)(v33 - 176));
  _Unwind_Resume(a1);
}

void sub_18B0E7534(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 112), a2);
  }
}

void sub_18B0E7544(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_18B0E7534((uint64_t)WeakRetained, 0);
  objc_msgSend_tickle(WeakRetained, v1, v2, v3);
}

void sub_18B0E7590(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 120), a2);
  }
}

void sub_18B0E75A0(uint64_t a1)
{
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 32));
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Resuming upload queue", v8, 2u);
    if (WeakRetained) {
      goto LABEL_5;
    }
LABEL_8:
    objc_msgSend_setSuspended_(0, v3, 0, v4);
    goto LABEL_6;
  }
  if (!WeakRetained) {
    goto LABEL_8;
  }
LABEL_5:
  objc_msgSend_setSuspended_(WeakRetained[13], v3, 0, v4);
LABEL_6:
  sub_18B0E7590((uint64_t)WeakRetained, 0);
  objc_msgSend_tickle(WeakRetained, v5, v6, v7);
}

void sub_18B0E7678(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_assetRepairSchedulerAllRequestsComplete_(v7, v5, *(void *)(a1 + 32), v6);
}

void sub_18B0E76CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  objc_msgSend_allRemainingRequestableAssets(*(void **)(a1 + 32), a2, a3, a4);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v38, (uint64_t)v44, 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v32 = *(void *)v39;
LABEL_3:
    uint64_t v8 = 0;
    uint64_t v30 = v6 + v7;
    while (1)
    {
      if (*(void *)v39 != v32) {
        objc_enumerationMutation(obj);
      }
      if (v7 + v8 >= *(void *)(a1 + 40)) {
        break;
      }
      uint64_t v9 = *(void *)(*((void *)&v38 + 1) + 8 * v8);
      uint64_t v10 = sub_18B0E5DA4(*(dispatch_queue_t **)(a1 + 32));
      uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, v9, v12);

      objc_initWeak(&location, *(id *)(a1 + 32));
      uint64_t v14 = sub_18B0E65E8(*(dispatch_queue_t **)(a1 + 32));
      objc_msgSend_addObject_(v14, v15, v9, v16);

      uint64_t v17 = [CKRequestAssetOperation alloc];
      uint64_t v19 = objc_msgSend_initWithAssetMetadata_requestCallback_(v17, v18, v9, (uint64_t)v13);
      objc_initWeak(&from, v19);
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 3221225472;
      v33[2] = sub_18B0E7A28;
      v33[3] = &unk_1E5464278;
      objc_copyWeak(&v34, &location);
      objc_copyWeak(&v35, &from);
      void v33[4] = v9;
      objc_msgSend_setAssetRequestCompletionBlock_(v19, v20, (uint64_t)v33, v21);
      objc_msgSend_setCompletionBlock_(v19, v22, (uint64_t)&unk_1ED7EF2B8, v23);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v24 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v43 = v9;
        _os_log_impl(&dword_18AF10000, v24, OS_LOG_TYPE_INFO, "Enqueueing asset request for %@", buf, 0xCu);
      }
      uint64_t v25 = *(void **)(a1 + 32);
      if (v25) {
        uint64_t v25 = (void *)v25[12];
      }
      uint64_t v26 = v25;
      objc_msgSend_addOperation_(v26, v27, (uint64_t)v19, v28);

      objc_destroyWeak(&v35);
      objc_destroyWeak(&v34);
      objc_destroyWeak(&from);

      objc_destroyWeak(&location);
      if (v6 == ++v8)
      {
        uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v29, (uint64_t)&v38, (uint64_t)v44, 16);
        uint64_t v7 = v30;
        if (v6) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_18B0E79E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_18B0E7A28(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v10 = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v8)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v11 = ck_log_facility_data_repair;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v35 = v12;
      __int16 v36 = 2112;
      id v37 = v8;
      _os_log_error_impl(&dword_18AF10000, v11, OS_LOG_TYPE_ERROR, "Asset request operation for %@ completed with error: %@", buf, 0x16u);
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
LABEL_9:
    uint64_t v13 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v35 = v25;
      _os_log_debug_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEBUG, "Asset request operation for %@ completed", buf, 0xCu);
    }
    uint64_t v14 = WeakRetained[10];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18B0E7DD0;
    block[3] = &unk_1E5464250;
    uint64_t v15 = *(void *)(a1 + 32);
    void block[4] = WeakRetained;
    void block[5] = v15;
    uint64_t v33 = a3;
    id v30 = v10;
    id v31 = v8;
    id v32 = v7;
    dispatch_sync(v14, block);
    uint64_t v16 = WeakRetained[10];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = sub_18B0E7F54;
    v28[3] = &unk_1E5461F80;
    uint64_t v17 = *(void *)(a1 + 32);
    v28[4] = WeakRetained;
    v28[5] = v17;
    dispatch_async(v16, v28);
    uint64_t v21 = objc_msgSend_delegate(WeakRetained, v18, v19, v20);

    if (v21)
    {
      uint64_t v22 = WeakRetained[11];
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      v27[2] = sub_18B0E7F64;
      v27[3] = &unk_1E5463440;
      uint64_t v23 = *(void *)(a1 + 32);
      v27[4] = WeakRetained;
      void v27[5] = v23;
      v27[6] = a3;
      dispatch_async(v22, v27);
    }

    goto LABEL_18;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v24 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
  {
    uint64_t v26 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v35 = v26;
    _os_log_error_impl(&dword_18AF10000, v24, OS_LOG_TYPE_ERROR, "Asset request operation for %@ no longer has a reference to self", buf, 0xCu);
  }
LABEL_18:
}

void sub_18B0E7DD0(uint64_t a1)
{
  uint64_t v2 = sub_18B0E65E8(*(dispatch_queue_t **)(a1 + 32));
  objc_msgSend_removeObject_(v2, v3, *(void *)(a1 + 40), v4);

  uint64_t v5 = *(void *)(a1 + 72);
  if ((objc_msgSend_isCancelled(*(void **)(a1 + 48), v6, v7, v8) & 1) != 0
    || (objc_msgSend_code(*(void **)(a1 + 56), v9, v10, v11) != 1 ? (BOOL v12 = v5 == 2) : (BOOL v12 = 1), v12))
  {
    sub_18B0E5DA4(*(dispatch_queue_t **)(a1 + 32));
    id v22 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v22, v13, *(void *)(a1 + 40), v14);
  }
  else
  {
    if (v5 != 1)
    {
      if (!v5)
      {
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v15 = *(void **)(a1 + 40);
        id v17 = *(id *)(a1 + 64);
        id v18 = v15;
        if (v16)
        {
          uint64_t v19 = *(void **)(v16 + 80);
          v23[0] = MEMORY[0x1E4F143A8];
          v23[1] = 3221225472;
          v23[2] = sub_18B0E9FC0;
          v23[3] = &unk_1E54614E0;
          id v24 = v17;
          uint64_t v25 = v16;
          id v26 = v18;
          ck_call_or_dispatch_sync_if_not_key(v19, (const void *)(v16 + 80), v23);
        }
      }
      return;
    }
    sub_18B0E6734(*(dispatch_queue_t **)(a1 + 32));
    id v22 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v22, v20, *(void *)(a1 + 40), v21);
  }
}

uint64_t sub_18B0E7F54(uint64_t a1)
{
  return sub_18B0E6784(*(void *)(a1 + 32), 1, *(void *)(a1 + 40));
}

void sub_18B0E7F64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_assetRepairScheduler_completedRequestWithMetadata_result_(v6, v5, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_18B0E7FBC()
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v0 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_18AF10000, v0, OS_LOG_TYPE_INFO, "Asset request completed", v1, 2u);
  }
}

void sub_18B0E8054(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_allRemainingUploadableAssets(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v118 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v6, v7, v8);
  long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  id obj = v5;
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v144, (uint64_t)v152, 16);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = *(void *)v145;
LABEL_3:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(void *)v145 != v15) {
        objc_enumerationMutation(obj);
      }
      uint64_t v17 = *(void *)(*((void *)&v144 + 1) + 8 * v16);
      uint64_t v18 = objc_msgSend_count(v118, v10, v11, v12);
      if (v18 >= objc_msgSend_repairBatchCountLimit(*(void **)(a1 + 32), v19, v20, v21)) {
        break;
      }
      self;
      id v22 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
      uint64_t v25 = objc_msgSend_objectForKeyedSubscript_(v22, v23, v17, v24);

      id v26 = objc_opt_class();
      uint64_t v29 = objc_msgSend_estimatedSizeForAssetOrPackage_(v26, v27, (uint64_t)v25, v28);
      objc_msgSend_count(v118, v30, v31, v32);
      self;
      unint64_t v35 = v29 + v14;
      if (v35 >> 22 <= 0x18)
      {
        objc_msgSend_addObject_(v118, v33, v17, v34);
        unint64_t v14 = v35;
      }

      if (v13 == ++v16)
      {
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v144, (uint64_t)v152, 16);
        if (v13) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  if (!objc_msgSend_count(v118, v36, v37, v38)) {
    goto LABEL_47;
  }
  uint64_t v123 = objc_opt_new();
  uint64_t v121 = objc_opt_new();
  uint64_t v122 = objc_opt_new();
  uint64_t v120 = objc_opt_new();
  uint64_t v119 = objc_opt_new();
  uint64_t v117 = objc_opt_new();
  long long v142 = 0u;
  long long v143 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  id v39 = v118;
  uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v40, (uint64_t)&v140, (uint64_t)v151, 16);
  if (!v41) {
    goto LABEL_27;
  }
  uint64_t v42 = *(void *)v141;
  do
  {
    for (uint64_t i = 0; i != v41; ++i)
    {
      if (*(void *)v141 != v42) {
        objc_enumerationMutation(v39);
      }
      uint64_t v44 = *(void *)(*((void *)&v140 + 1) + 8 * i);
      uint64_t v45 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
      uint64_t v48 = objc_msgSend_objectForKeyedSubscript_(v45, v46, v44, v47);

      if (v48)
      {
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        uint64_t v53 = v122;
        __int16 v52 = v123;
        if ((isKindOfClass & 1) != 0
          || (objc_opt_class(), char v54 = objc_opt_isKindOfClass(), v53 = v120, v52 = v121, (v54 & 1) != 0))
        {
          objc_msgSend_addObject_(v52, v49, (uint64_t)v48, v50);
LABEL_21:
          objc_msgSend_addObject_(v53, v55, v44, v56);
        }
      }
      else
      {
        uint64_t v57 = sub_18B0E6734(*(dispatch_queue_t **)(a1 + 32));
        int v60 = objc_msgSend_containsObject_(v57, v58, v44, v59);

        if (v60)
        {
          objc_opt_class();
          uint64_t v53 = v119;
          if (objc_opt_isKindOfClass()) {
            goto LABEL_21;
          }
          objc_opt_class();
          uint64_t v53 = v117;
          if (objc_opt_isKindOfClass()) {
            goto LABEL_21;
          }
        }
      }
    }
    uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v61, (uint64_t)&v140, (uint64_t)v151, 16);
  }
  while (v41);
LABEL_27:

  int v62 = [CKRepairAssetsOperation alloc];
  uint64_t v64 = objc_msgSend_initWithAssets_packages_assetMetadata_packageMetadata_unavailableAssets_unavailablePackages_(v62, v63, (uint64_t)v123, (uint64_t)v121, v122, v120, v119, v117);
  uint64_t v67 = objc_msgSend_createRepairOperationGroupWithName_(CKAssetRepairOperationUtilities, v65, @"Data Repair", v66);
  objc_msgSend_setGroup_(v64, v68, (uint64_t)v67, v69);

  double v73 = objc_msgSend_privateCloudDatabase(*(void **)(a1 + 40), v70, v71, v72);
  objc_msgSend_setDatabase_(v64, v74, (uint64_t)v73, v75);

  uint64_t v78 = *(void *)(a1 + 32);
  if (v78) {
    objc_msgSend_setUploadRequestConfiguration_(v64, v76, *(void *)(v78 + 72), v77);
  }
  else {
    objc_msgSend_setUploadRequestConfiguration_(v64, v76, 0, v77);
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_initWeak(&from, v64);
  v136[0] = 0;
  v136[1] = v136;
  v136[2] = 0x3032000000;
  v136[3] = sub_18AF13EA8;
  v136[4] = sub_18AF13918;
  id v137 = 0;
  v134[0] = 0;
  v134[1] = v134;
  v134[2] = 0x2020000000;
  char v135 = 1;
  v131[0] = MEMORY[0x1E4F143A8];
  v131[1] = 3221225472;
  v131[2] = sub_18B0E88BC;
  v131[3] = &unk_1E54642A0;
  objc_copyWeak(&v132, &location);
  objc_copyWeak(&v133, &from);
  v131[4] = v136;
  v131[5] = v134;
  objc_msgSend_setRepairAssetsCompletionBlock_(v64, v79, (uint64_t)v131, v80);
  v129[0] = MEMORY[0x1E4F143A8];
  v129[1] = 3221225472;
  v129[2] = sub_18B0E9450;
  v129[3] = &unk_1E54642C8;
  objc_copyWeak(&v130, &location);
  v129[4] = v134;
  v129[5] = v136;
  objc_msgSend_setCompletionBlock_(v64, v81, (uint64_t)v129, v82);
  uint64_t v86 = objc_msgSend_delegate(*(void **)(a1 + 32), v83, v84, v85);

  if (v86)
  {
    uint64_t v90 = objc_msgSend_includedMetadata(v64, v87, v88, v89);
    uint64_t v94 = objc_msgSend_count(v90, v91, v92, v93);

    uint64_t v95 = *(void *)(a1 + 32);
    if (v95) {
      uint64_t v96 = *(NSObject **)(v95 + 88);
    }
    else {
      uint64_t v96 = 0;
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18B0E9538;
    block[3] = &unk_1E5463198;
    void block[4] = v95;
    void block[5] = v94;
    dispatch_async(v96, block);
  }
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  id v97 = objc_msgSend_includedMetadata(v64, v87, v88, v89);
  uint64_t v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v97, v98, (uint64_t)&v124, (uint64_t)v150, 16);
  if (v99)
  {
    uint64_t v100 = *(void *)v125;
    do
    {
      for (uint64_t j = 0; j != v99; ++j)
      {
        if (*(void *)v125 != v100) {
          objc_enumerationMutation(v97);
        }
        uint64_t v102 = *(void *)(*((void *)&v124 + 1) + 8 * j);
        uint64_t v103 = sub_18B0E662C(*(dispatch_queue_t **)(a1 + 32));
        objc_msgSend_addObject_(v103, v104, v102, v105);
      }
      uint64_t v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v97, v106, (uint64_t)&v124, (uint64_t)v150, 16);
    }
    while (v99);
  }

  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  long long v107 = (id)ck_log_facility_data_repair;
  if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
  {
    uint64_t v111 = objc_msgSend_includedMetadata(v64, v108, v109, v110);
    *(_DWORD *)buf = 138412290;
    __int16 v149 = v111;
    _os_log_impl(&dword_18AF10000, v107, OS_LOG_TYPE_INFO, "Enqueueing asset upload for %@", buf, 0xCu);
  }
  id v112 = *(void **)(a1 + 32);
  if (v112) {
    id v112 = (void *)v112[13];
  }
  uint64_t v113 = v112;
  objc_msgSend_addOperation_(v113, v114, (uint64_t)v64, v115);

  objc_destroyWeak(&v130);
  objc_destroyWeak(&v133);
  objc_destroyWeak(&v132);
  _Block_object_dispose(v134, 8);
  _Block_object_dispose(v136, 8);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

LABEL_47:
}

void sub_18B0E8848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,id a59,id a60)
{
  objc_destroyWeak(location);
  objc_destroyWeak(v61);
  objc_destroyWeak(v60);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  objc_destroyWeak(&a59);
  objc_destroyWeak(&a60);
  _Unwind_Resume(a1);
}

void sub_18B0E88BC(uint64_t a1, void *a2)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  id v80 = a2;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v78 = a1;
  uint64_t v5 = (id *)(a1 + 56);
  id v79 = objc_loadWeakRetained(v5);
  uint64_t v81 = WeakRetained;
  if (WeakRetained)
  {
    id from = v5;
    if (v80)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(v78 + 32) + 8) + 40), a2);
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      uint64_t v9 = objc_msgSend_includedMetadata(v79, v6, v7, v8, v5);
      uint64_t v11 = 0;
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v94, (uint64_t)v103, 16);
      if (v14)
      {
        uint64_t v15 = *(void *)v95;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v95 != v15) {
              objc_enumerationMutation(v9);
            }
            uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(*((void **)v81 + 16), v12, *(void *)(*((void *)&v94 + 1) + 8 * i), v13);
            uint64_t v21 = objc_msgSend_integerValue(v17, v18, v19, v20);

            if (v11 <= v21) {
              uint64_t v11 = v21;
            }
          }
          uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v94, (uint64_t)v103, 16);
        }
        while (v14);
      }

      if (objc_msgSend_errorIsRetriableInNearFuture_(CKAssetRepairOperationUtilities, v22, (uint64_t)v80, v23)&& v11 < objc_msgSend_repairRetryCount(v81, v24, v25, v26))
      {
        *(unsigned char *)(*(void *)(*(void *)(v78 + 40) + 8) + 24) = 0;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        id v30 = objc_msgSend_includedMetadata(v79, v27, v28, v29);
        uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v90, (uint64_t)v102, 16);
        if (v32)
        {
          uint64_t v33 = *(void *)v91;
          do
          {
            for (uint64_t j = 0; j != v32; ++j)
            {
              if (*(void *)v91 != v33) {
                objc_enumerationMutation(v30);
              }
              uint64_t v35 = *(void *)(*((void *)&v90 + 1) + 8 * j);
              __int16 v36 = NSNumber;
              id v37 = *((id *)v81 + 16);
              long long v40 = objc_msgSend_objectForKeyedSubscript_(v37, v38, v35, v39);
              uint64_t v44 = objc_msgSend_integerValue(v40, v41, v42, v43);
              uint64_t v47 = objc_msgSend_numberWithInteger_(v36, v45, v44 + 1, v46);
              objc_msgSend_setObject_forKeyedSubscript_(*((void **)v81 + 16), v48, (uint64_t)v47, v35);
            }
            uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v49, (uint64_t)&v90, (uint64_t)v102, 16);
          }
          while (v32);
        }

        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v50 = (void *)ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
        {
          id v51 = v50;
          uint64_t v55 = objc_msgSend_includedMetadata(v79, v52, v53, v54);
          *(_DWORD *)buf = 138412546;
          uint64_t v99 = v55;
          __int16 v100 = 2112;
          id v101 = v80;
          _os_log_error_impl(&dword_18AF10000, v51, OS_LOG_TYPE_ERROR, "Could not upload assets for %@, but will try again: %@", buf, 0x16u);
        }
      }
      else
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v56 = (void *)ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
        {
          uint64_t v57 = v56;
          uint64_t v61 = objc_msgSend_includedMetadata(v79, v58, v59, v60);
          *(_DWORD *)buf = 138412546;
          uint64_t v99 = v61;
          __int16 v100 = 2112;
          id v101 = v80;
          _os_log_error_impl(&dword_18AF10000, v57, OS_LOG_TYPE_ERROR, "Could not upload assets for %@: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      int v62 = (void *)ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v72 = v62;
        uint64_t v76 = objc_msgSend_includedMetadata(v79, v73, v74, v75, v5);
        *(_DWORD *)buf = 138412290;
        uint64_t v99 = v76;
        _os_log_debug_impl(&dword_18AF10000, v72, OS_LOG_TYPE_DEBUG, "Completed upload for assets %@", buf, 0xCu);
      }
    }
    int v63 = *(unsigned __int8 *)(*(void *)(*(void *)(v78 + 40) + 8) + 24);
    uint64_t v64 = v81 + 80;
    id v65 = *((id *)v81 + 10);
    if (v63)
    {
      v88[0] = MEMORY[0x1E4F143A8];
      v88[1] = 3221225472;
      v88[2] = sub_18B0E8F5C;
      v88[3] = &unk_1E5461AE8;
      uint64_t v66 = &v89;
      objc_copyWeak(&v89, from);
      v88[4] = v81;
      ck_call_or_dispatch_async_if_not_key(v65, v64, v88);

      uint64_t v70 = objc_msgSend_delegate(v81, v67, v68, v69);

      if (!v70)
      {
LABEL_38:
        objc_destroyWeak(v66);
        goto LABEL_39;
      }
      uint64_t v71 = *((void *)v81 + 11);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_18B0E9178;
      block[3] = &unk_1E54614E0;
      id v85 = v79;
      id v86 = v80;
      uint64_t v87 = v81;
      dispatch_async(v71, block);

      id v65 = v85;
    }
    else
    {
      v82[0] = MEMORY[0x1E4F143A8];
      v82[1] = 3221225472;
      v82[2] = sub_18B0E932C;
      v82[3] = &unk_1E5461AE8;
      uint64_t v66 = &v83;
      objc_copyWeak(&v83, from);
      void v82[4] = v81;
      ck_call_or_dispatch_async_if_not_key(v65, v64, v82);
    }

    goto LABEL_38;
  }
LABEL_39:
}

void sub_18B0E8F38(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18B0E8F5C(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_includedMetadata(WeakRetained, v3, v4, v5);

  id obj = v6;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v32, (uint64_t)v38, 16);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v33;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v33 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v32 + 1) + 8 * v11);
        uint64_t v13 = sub_18B0E662C(*(dispatch_queue_t **)(a1 + 32));
        objc_msgSend_removeObject_(v13, v14, (uint64_t)v12, v15);

        uint64_t v16 = sub_18B0E5DA4(*(dispatch_queue_t **)(a1 + 32));
        objc_msgSend_removeObjectForKey_(v16, v17, (uint64_t)v12, v18);

        uint64_t v19 = *(void *)(a1 + 32);
        id v20 = v12;
        uint64_t v21 = v20;
        if (v19)
        {
          id v22 = *(void **)(v19 + 80);
          v36[0] = MEMORY[0x1E4F143A8];
          v36[1] = 3221225472;
          v36[2] = sub_18B0EA2EC;
          v36[3] = &unk_1E5461F80;
          v36[4] = v19;
          id v37 = v20;
          ck_call_or_dispatch_sync_if_not_key(v22, (const void *)(v19 + 80), v36);
        }
        uint64_t v23 = sub_18B0E6734(*(dispatch_queue_t **)(a1 + 32));
        objc_msgSend_removeObject_(v23, v24, (uint64_t)v21, v25);

        uint64_t v28 = *(void *)(a1 + 32);
        if (v28) {
          objc_msgSend_removeObjectForKey_(*(void **)(v28 + 128), v26, (uint64_t)v21, v27);
        }
        else {
          objc_msgSend_removeObjectForKey_(0, v26, (uint64_t)v21, v27);
        }
        ++v11;
      }
      while (v9 != v11);
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v29, (uint64_t)&v32, (uint64_t)v38, 16);
      uint64_t v9 = v30;
    }
    while (v30);
  }
}

void sub_18B0E9178(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v5 = objc_msgSend_includedMetadata(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v34, (uint64_t)v38, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(v5);
        }
        uint64_t v14 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v15 = *(void **)(a1 + 40);
        if (v15)
        {
          uint64_t v19 = objc_msgSend_code(v15, v8, v9, v10);
          id v20 = *(void **)(a1 + 40);
          if (v19 == 2)
          {
            uint64_t v21 = objc_msgSend_userInfo(v20, v16, v17, v18);
            uint64_t v24 = objc_msgSend_objectForKeyedSubscript_(v21, v22, @"CKPartialErrors", v23);
            uint64_t v28 = objc_msgSend_repairZoneRecordID(v14, v25, v26, v27);
            objc_msgSend_objectForKeyedSubscript_(v24, v29, (uint64_t)v28, v30);
            id v31 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            id v31 = v20;
          }
        }
        else
        {
          id v31 = 0;
        }
        long long v32 = objc_msgSend_delegate(*(void **)(a1 + 48), v8, v9, v10);
        objc_msgSend_assetRepairScheduler_completedRepairWithMetadata_error_(v32, v33, *(void *)(a1 + 48), (uint64_t)v14, v31);
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v34, (uint64_t)v38, 16);
    }
    while (v11);
  }
}

void sub_18B0E932C(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = objc_msgSend_includedMetadata(WeakRetained, v3, v4, v5, 0);

  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v17, (uint64_t)v21, 16);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8 * v11);
        uint64_t v13 = sub_18B0E662C(*(dispatch_queue_t **)(a1 + 32));
        objc_msgSend_removeObject_(v13, v14, v12, v15);

        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v16, (uint64_t)&v17, (uint64_t)v21, 16);
    }
    while (v9);
  }
}

void sub_18B0E9450(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_18AF10000, v3, OS_LOG_TYPE_INFO, "Asset upload completed", v7, 2u);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    objc_msgSend_tickle(WeakRetained, v4, v5, v6);
  }
  else {
    sub_18B0E6784(WeakRetained, 2, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
}

void sub_18B0E9538(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_assetRepairScheduler_preparingRepairWithIncludedMetadataCount_(v6, v5, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_18B0E958C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_clearAssetCache(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18B0E9618(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_temporaryAssetDirectory(*(void **)(a1 + 32), a2, a3, a4);

  if (v5)
  {
    uint64_t v9 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v6, v7, v8);
    uint64_t v13 = objc_msgSend_temporaryAssetDirectory(*(void **)(a1 + 32), v10, v11, v12);
    uint64_t v15 = objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(v9, v14, (uint64_t)v13, 0, 0, &unk_1ED7F08D8);

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v16 = v15;
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v35, (uint64_t)v43, 16);
    if (v18)
    {
      uint64_t v21 = v18;
      uint64_t v22 = *(void *)v36;
      *(void *)&long long v20 = 138543618;
      long long v33 = v20;
      do
      {
        uint64_t v23 = 0;
        do
        {
          if (*(void *)v36 != v22) {
            objc_enumerationMutation(v16);
          }
          uint64_t v24 = *(void **)(*((void *)&v35 + 1) + 8 * v23);
          id v34 = 0;
          char v25 = objc_msgSend_removeItemAtURL_error_(v9, v19, (uint64_t)v24, (uint64_t)&v34, v33);
          id v26 = v34;
          if (v26 || (v25 & 1) == 0)
          {
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            }
            uint64_t v27 = (void *)ck_log_facility_data_repair;
            if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
            {
              uint64_t v28 = v27;
              long long v32 = objc_msgSend_CKSanitizedPath(v24, v29, v30, v31);
              *(_DWORD *)buf = v33;
              long long v40 = v32;
              __int16 v41 = 2112;
              id v42 = v26;
              _os_log_error_impl(&dword_18AF10000, v28, OS_LOG_TYPE_ERROR, "Error removing repair scheduler cache file at %{public}@: %@", buf, 0x16u);
            }
          }

          ++v23;
        }
        while (v21 != v23);
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v35, (uint64_t)v43, 16);
      }
      while (v21);
    }
  }
}

uint64_t sub_18B0E9864(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v6 = (void *)ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = v6;
    uint64_t v12 = objc_msgSend_CKSanitizedPath(v4, v9, v10, v11);
    int v13 = 138543618;
    uint64_t v14 = v12;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_error_impl(&dword_18AF10000, v8, OS_LOG_TYPE_ERROR, "Error enumerating repair scheduler cache directory at %{public}@: %@", (uint8_t *)&v13, 0x16u);
  }
  return 1;
}

void sub_18B0E9A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18B0E9FC0(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v28 = 0;
  id v6 = objc_msgSend_clonedAsset_withError_(v3, v5, v4, (uint64_t)&v28);
  id v7 = v28;
  if (v7)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v8 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v30 = v9;
      __int16 v31 = 2112;
      id v32 = v7;
      _os_log_error_impl(&dword_18AF10000, v8, OS_LOG_TYPE_ERROR, "Unexpected error when cloning asset or package %@: %@", buf, 0x16u);
    }
  }
  else if (v6)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v10 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void **)(a1 + 40);
      long long v19 = v10;
      uint64_t v23 = objc_msgSend_temporaryAssetDirectory(v18, v20, v21, v22);
      uint64_t v27 = objc_msgSend_CKSanitizedPath(v23, v24, v25, v26);
      *(_DWORD *)buf = 138412546;
      uint64_t v30 = v6;
      __int16 v31 = 2114;
      id v32 = v27;
      _os_log_debug_impl(&dword_18AF10000, v19, OS_LOG_TYPE_DEBUG, "Cloned asset or package %@ to directory %{public}@", buf, 0x16u);
    }
    id v11 = v6;

    id v2 = v11;
  }
  if (v2 == *(id *)(a1 + 32))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v12 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_18AF10000, v12, OS_LOG_TYPE_ERROR, "Repair scheduler will attempt to upload non-cloned asset", buf, 2u);
    }
  }
  int v13 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 40));
  objc_msgSend_setObject_forKeyedSubscript_(v13, v14, (uint64_t)v2, *(void *)(a1 + 48));

  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  __int16 v15 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    id v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    uint64_t v30 = v16;
    __int16 v31 = 2112;
    id v32 = v17;
    _os_log_debug_impl(&dword_18AF10000, v15, OS_LOG_TYPE_DEBUG, "Repair scheduler cached asset %@ for metadata %@", buf, 0x16u);
  }
}

void sub_18B0EA2EC(uint64_t a1)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v2 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
  id v5 = objc_msgSend_objectForKeyedSubscript_(v2, v3, *(void *)(a1 + 40), v4);

  uint64_t v9 = objc_msgSend_temporaryAssetDirectory(*(void **)(a1 + 32), v6, v7, v8);

  if (v9)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = v5;
      uint64_t v14 = objc_msgSend_fileURL(v10, v11, v12, v13);
      uint64_t v18 = objc_msgSend_path(v14, v15, v16, v17);
      uint64_t v22 = objc_msgSend_temporaryAssetDirectory(*(void **)(a1 + 32), v19, v20, v21);
      uint64_t v26 = objc_msgSend_path(v22, v23, v24, v25);
      int hasPrefix = objc_msgSend_hasPrefix_(v18, v27, (uint64_t)v26, v28);

      if (hasPrefix)
      {
        uint64_t v33 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v30, v31, v32);
        long long v37 = objc_msgSend_fileURL(v10, v34, v35, v36);
        id v94 = 0;
        objc_msgSend_removeItemAtURL_error_(v33, v38, (uint64_t)v37, (uint64_t)&v94);
        id v39 = v94;

        if (v39)
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          long long v40 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)long long v96 = v10;
            *(_WORD *)&v96[8] = 2112;
            *(void *)&v96[10] = v39;
            _os_log_error_impl(&dword_18AF10000, v40, OS_LOG_TYPE_ERROR, "Error deleting cached asset %@: %@", buf, 0x16u);
          }
          goto LABEL_32;
        }
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v77 = ck_log_facility_data_repair;
        if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
        {
LABEL_26:
          id v39 = 0;
          goto LABEL_32;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)long long v96 = v10;
        uint64_t v78 = "Deleted cached asset %@";
        id v79 = v77;
        uint32_t v80 = 12;
LABEL_40:
        _os_log_debug_impl(&dword_18AF10000, v79, OS_LOG_TYPE_DEBUG, v78, buf, v80);
        goto LABEL_26;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_34;
      }
      id v89 = v5;
      id v93 = 0;
      id v91 = v5;
      uint64_t v43 = objc_msgSend_itemCountWithError_(v91, v41, (uint64_t)&v93, v42);
      id v46 = v93;
      if (v43)
      {
        uint64_t v47 = 0;
        int v90 = 0;
        while (1)
        {
          uint64_t v48 = objc_msgSend_itemAtIndex_(v91, v44, v47, v45, v89);
          __int16 v52 = objc_msgSend_fileURL(v48, v49, v50, v51);
          uint64_t v56 = objc_msgSend_path(v52, v53, v54, v55);
          uint64_t v60 = objc_msgSend_temporaryAssetDirectory(*(void **)(a1 + 32), v57, v58, v59);
          uint64_t v64 = objc_msgSend_path(v60, v61, v62, v63);
          int v67 = objc_msgSend_hasPrefix_(v56, v65, (uint64_t)v64, v66);

          if (v67)
          {
            uint64_t v71 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v68, v69, v70);
            uint64_t v75 = objc_msgSend_fileURL(v48, v72, v73, v74);
            id v92 = v46;
            objc_msgSend_removeItemAtURL_error_(v71, v76, (uint64_t)v75, (uint64_t)&v92);
            id v39 = v92;

            if (v39)
            {
              if (ck_log_initialization_predicate != -1) {
                dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
              }
              id v5 = v89;
              uint64_t v82 = ck_log_facility_data_repair;
              if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                *(void *)long long v96 = v48;
                *(_WORD *)&v96[8] = 2112;
                *(void *)&v96[10] = v39;
                _os_log_error_impl(&dword_18AF10000, v82, OS_LOG_TYPE_ERROR, "Error deleting cached package item %@: %@", buf, 0x16u);
              }

              goto LABEL_32;
            }
            id v46 = 0;
            ++v90;
          }

          if (v43 == ++v47) {
            goto LABEL_22;
          }
        }
      }
      int v90 = 0;
LABEL_22:
      id v39 = v46;
      id v5 = v89;
      if (!v46)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v81 = ck_log_facility_data_repair;
        if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_26;
        }
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)long long v96 = v90;
        *(_WORD *)&void v96[4] = 2112;
        *(void *)&v96[6] = v91;
        uint64_t v78 = "Deleted %d items from cached package %@";
        id v79 = v81;
        uint32_t v80 = 18;
        goto LABEL_40;
      }
LABEL_32:
    }
  }
LABEL_34:
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    objc_msgSend_removeDB(v5, v83, v84, v85);
  }
  if (v5)
  {
    id v86 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
    objc_msgSend_removeObjectForKey_(v86, v87, *(void *)(a1 + 40), v88);
  }
}

void sub_18B0EA9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0EA9BC(uint64_t a1)
{
  id v2 = sub_18B0E6568(*(dispatch_queue_t **)(a1 + 32));
  id v6 = objc_msgSend_mutableCopy(v2, v3, v4, v5);

  uint64_t v7 = sub_18B0E66B4(*(dispatch_queue_t **)(a1 + 32));
  objc_msgSend_minusSet_(v6, v8, (uint64_t)v7, v9);

  id v10 = sub_18B0E6734(*(dispatch_queue_t **)(a1 + 32));
  objc_msgSend_minusSet_(v6, v11, (uint64_t)v10, v12);

  uint64_t v13 = sub_18B0E65E8(*(dispatch_queue_t **)(a1 + 32));
  objc_msgSend_minusSet_(v6, v14, (uint64_t)v13, v15);

  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v6;
}

void sub_18B0EAB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0EABAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_set(MEMORY[0x1E4F1CA80], a2, a3, a4);
  id v6 = sub_18B0E66B4(*(dispatch_queue_t **)(a1 + 32));
  objc_msgSend_unionSet_(v5, v7, (uint64_t)v6, v8);

  uint64_t v9 = sub_18B0E6734(*(dispatch_queue_t **)(a1 + 32));
  objc_msgSend_unionSet_(v5, v10, (uint64_t)v9, v11);

  uint64_t v12 = sub_18B0E662C(*(dispatch_queue_t **)(a1 + 32));
  objc_msgSend_minusSet_(v5, v13, (uint64_t)v12, v14);

  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v5;
}

void sub_18B0EAC68(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v17, (uint64_t)v21, 16);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v17 + 1) + 8 * v7);
        uint64_t v9 = sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
        uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v9, v10, v8, v11, (void)v17);

        uint64_t v13 = objc_opt_class();
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += objc_msgSend_estimatedSizeForAssetOrPackage_(v13, v14, (uint64_t)v12, v15);

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v16, (uint64_t)&v17, (uint64_t)v21, 16);
    }
    while (v5);
  }
}

void sub_18B0EADAC(uint64_t a1)
{
  sub_18B0E6670(*(dispatch_queue_t **)(a1 + 32));
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_count(v5, v2, v3, v4);
}

void sub_18B0EAF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B0EAF34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 48);
  if (v6) {
    goto LABEL_2;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 64));
  if (WeakRetained)
  {
    uint64_t v13 = WeakRetained;
    uint64_t v14 = NSTemporaryDirectory();
    long long v17 = objc_msgSend_stringByAppendingPathComponent_(v14, v15, @"com.apple.cloudkit.upload-request.cache", v16);

    uint64_t v21 = objc_msgSend_primaryIdentifier(v13, v18, v19, v20);
    uint64_t v24 = objc_msgSend_stringByAppendingPathComponent_(v17, v22, (uint64_t)v21, v23);

    uint64_t v26 = objc_msgSend_fileURLWithPath_isDirectory_(MEMORY[0x1E4F1CB10], v25, (uint64_t)v24, 1);
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v28 = *(void **)(v27 + 48);
    *(void *)(v27 + 48) = v26;

    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 48);
    if (!v6)
    {
      uint64_t v11 = 0;
LABEL_8:
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v11);
      return;
    }
LABEL_2:
    uint64_t v7 = objc_msgSend_path(v6, a2, a3, a4);
    id v30 = 0;
    char v8 = CKCreateDirectoryAtPathWithAttributes(v7, 0, &v30);
    id v9 = v30;

    if ((v8 & 1) == 0)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v10 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v32 = v9;
        _os_log_fault_impl(&dword_18AF10000, v10, OS_LOG_TYPE_FAULT, "Could not create temporary asset directory: %@", buf, 0xCu);
      }
    }

    uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 48);
    goto LABEL_8;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v29 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18AF10000, v29, OS_LOG_TYPE_DEBUG, "Not returning temporary asset directory due to nil container", buf, 2u);
  }
}

void sub_18B0EBA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0EBC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18B0EBC70(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v10 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend_isCancelled(WeakRetained, v7, v8, v9))
    {
      uint64_t v14 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, @"CKInternalErrorDomain", 1, @"Asset request operation was cancelled");
    }
    else
    {
      uint64_t v14 = 0;
    }
    long long v18 = objc_msgSend_metadata(v10, v11, v12, v13);
    switch(a3)
    {
      case 2:
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v20 = ck_log_facility_data_repair;
        if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          uint64_t v21 = "Requested asset delayed with try again later";
          a3 = 2;
LABEL_47:
          _os_log_impl(&dword_18AF10000, v20, OS_LOG_TYPE_INFO, v21, buf, 2u);
          break;
        }
        a3 = 2;
        break;
      case 1:
        goto LABEL_43;
      case 0:
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v22 = (void *)ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            uint64_t v35 = v22;
            uint64_t v36 = (objc_class *)objc_opt_class();
            long long v37 = NSStringFromClass(v36);
            *(_DWORD *)buf = 138543362;
            uint64_t v42 = v37;
            _os_log_error_impl(&dword_18AF10000, v35, OS_LOG_TYPE_ERROR, "Expected asset in asset request response, but received %{public}@, so treating as unavailable", buf, 0xCu);

            if (v14) {
              goto LABEL_43;
            }
          }
          else if (v14)
          {
            goto LABEL_43;
          }
          uint64_t v23 = (objc_class *)objc_opt_class();
          uint64_t v24 = NSStringFromClass(v23);
          objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v25, @"CKInternalErrorDomain", 10004, @"Expected asset in asset request response, but received %@", v24);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
          {
            if (v5)
            {
              if (ck_log_initialization_predicate != -1) {
                dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
              }
              uint64_t v19 = ck_log_facility_data_repair;
              if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18AF10000, v19, OS_LOG_TYPE_INFO, "Requested asset available", buf, 2u);
              }
              a3 = 0;
              break;
            }
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            }
            uint64_t v26 = ck_log_facility_data_repair;
            if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_18AF10000, v26, OS_LOG_TYPE_ERROR, "Expected asset or package in asset request response, but received nil, so treating as unavailable", buf, 2u);
              if (v14) {
                goto LABEL_43;
              }
              goto LABEL_36;
            }
            if (!v14)
            {
LABEL_36:
              uint64_t v14 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v27, @"CKInternalErrorDomain", 10004, @"Expected package in asset request response, but received nil");
            }
LABEL_43:
            if (ck_log_initialization_predicate != -1) {
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            }
            uint64_t v20 = ck_log_facility_data_repair;
            a3 = 1;
            if (!os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_INFO)) {
              break;
            }
            *(_WORD *)buf = 0;
            uint64_t v21 = "Requested asset not available";
            a3 = 1;
            goto LABEL_47;
          }
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          uint64_t v28 = (void *)ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            long long v38 = v28;
            id v39 = (objc_class *)objc_opt_class();
            long long v40 = NSStringFromClass(v39);
            *(_DWORD *)buf = 138543362;
            uint64_t v42 = v40;
            _os_log_error_impl(&dword_18AF10000, v38, OS_LOG_TYPE_ERROR, "Expected package in asset request response, but received %{public}@, so treating as unavailable", buf, 0xCu);

            if (v14) {
              goto LABEL_43;
            }
          }
          else if (v14)
          {
            goto LABEL_43;
          }
          uint64_t v29 = (objc_class *)objc_opt_class();
          uint64_t v24 = NSStringFromClass(v29);
          objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v30, @"CKInternalErrorDomain", 10004, @"Expected package in asset request response, but received %@", v24);
        uint64_t v14 = };

        goto LABEL_43;
    }
    objc_msgSend_setState_(v10, v16, 2, v17);
    objc_msgSend_assetRequestCompletionBlock(v10, v31, v32, v33);
    id v34 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id, uint64_t, void *))v34)[2](v34, v5, a3, v14);

    goto LABEL_49;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v15 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_18AF10000, v15, OS_LOG_TYPE_ERROR, "Attempted to process asset request response, but operation was nil", buf, 2u);
  }
LABEL_49:
}

void *sub_18B0EC5A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0EC780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0EC798(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0EC924(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 528) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0ECB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0ECB1C(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0ECCA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0ECE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0ECEA0(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0ED02C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0ED20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0ED224(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B0EDE90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    *(void *)(v4 + 592) += a2;
    uint64_t v5 = *(void *)(result + 32);
    if (v5)
    {
      *(void *)(v5 + 600) += a3;
      uint64_t v6 = *(void *)(result + 32);
      if (v6) {
        *(void *)(v6 + 608) += a4;
      }
    }
  }
  return result;
}

void sub_18B0F0374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t sub_18B0F0414(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = a4;
  id v10 = objc_msgSend_name(v5, v7, v8, v9);
  uint64_t v13 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v11, 18, v12);
  int isEqualToString = objc_msgSend_isEqualToString_(v10, v14, (uint64_t)v13, v15);

  if (isEqualToString)
  {
    uint64_t v20 = objc_msgSend_userInfo(v5, v17, v18, v19);
    uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v20, v21, @"function", v22);
    uint64_t v27 = objc_msgSend_integerValue(v23, v24, v25, v26);

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v28 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      long long v38 = v28;
      __int16 v41 = objc_msgSend_nameFromFunction_(CKUploadRequestManagerStateMachine, v39, v27, v40);
      *(_DWORD *)buf = 138543362;
      id v47 = v41;
      _os_log_error_impl(&dword_18AF10000, v38, OS_LOG_TYPE_ERROR, "Warning: requested permission for function %{public}@, but not allowed in current state", buf, 0xCu);
    }
    uint64_t v44 = @"function";
    uint64_t v31 = objc_msgSend_numberWithInteger_(NSNumber, v29, v27, v30);
    uint64_t v45 = v31;
    uint64_t v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v32, (uint64_t)&v45, (uint64_t)&v44, 1);
    v6[2](v6, 28, v33);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v34 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v47 = v5;
      _os_log_error_impl(&dword_18AF10000, v34, OS_LOG_TYPE_ERROR, "Unhandled event %@ in state machine", buf, 0xCu);
    }
    uint64_t v31 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v35, @"CKErrorDomain", 10002, @"Unhandled event %@ in state machine", v5);
    uint64_t v42 = @"error";
    uint64_t v43 = v31;
    uint64_t v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v36, (uint64_t)&v43, (uint64_t)&v42, 1);
    v6[2](v6, 26, v33);
  }

  return 2;
}

uint64_t sub_18B0F0718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
}

uint64_t sub_18B0F0728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
}

uint64_t sub_18B0F0738(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v10 = objc_msgSend_name(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v11, 1, v12);
  char isEqualToString = objc_msgSend_isEqualToString_(v10, v14, (uint64_t)v13, v15);

  if ((isEqualToString & 1) == 0)
  {
    uint64_t v20 = objc_msgSend_name(v6, v17, v18, v19);
    uint64_t v23 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v21, 0, v22);
    int v26 = objc_msgSend_isEqualToString_(v20, v24, (uint64_t)v23, v25);

    if (!v26)
    {
      uint64_t v28 = 1;
      goto LABEL_6;
    }
    objc_msgSend_transitionToState_withEvent_(v5, v27, *(void *)(a1 + 32), (uint64_t)v6);
  }
  uint64_t v28 = 2;
LABEL_6:

  return v28;
}

uint64_t sub_18B0F0834(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v10 = objc_msgSend_name(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v11, 2, v12);
  int isEqualToString = objc_msgSend_isEqualToString_(v10, v14, (uint64_t)v13, v15);

  if (isEqualToString)
  {
    objc_msgSend_transitionToState_withEvent_(v5, v17, *(void *)(a1 + 32), (uint64_t)v6);
    uint64_t v18 = 2;
  }
  else
  {
    uint64_t v18 = 1;
  }

  return v18;
}

uint64_t sub_18B0F08E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, 11, 0);
}

uint64_t sub_18B0F08F8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a4;
  uint64_t v9 = objc_msgSend_name(a3, v6, v7, v8);
  uint64_t v12 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v10, 2, v11);
  int isEqualToString = objc_msgSend_isEqualToString_(v9, v13, (uint64_t)v12, v14);

  if (isEqualToString)
  {
    v5[2](v5, 11, 0);
    uint64_t v16 = 2;
  }
  else
  {
    uint64_t v16 = 1;
  }

  return v16;
}

uint64_t sub_18B0F0998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1);
}

uint64_t sub_18B0F09A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1);
}

uint64_t sub_18B0F09B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v10 = objc_msgSend_name(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v11, 1, v12);
  int isEqualToString = objc_msgSend_isEqualToString_(v10, v14, (uint64_t)v13, v15);

  if (isEqualToString)
  {
    uint64_t v20 = (uint64_t *)(a1 + 32);
LABEL_6:
    objc_msgSend_transitionToState_withEvent_(v5, v17, *v20, (uint64_t)v6);
    goto LABEL_7;
  }
  uint64_t v21 = objc_msgSend_name(v6, v17, v18, v19);
  uint64_t v24 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v22, 0, v23);
  int v27 = objc_msgSend_isEqualToString_(v21, v25, (uint64_t)v24, v26);

  if ((v27 & 1) == 0)
  {
    uint64_t v31 = objc_msgSend_name(v6, v28, v29, v30);
    id v34 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v32, 2, v33);
    int v37 = objc_msgSend_isEqualToString_(v31, v35, (uint64_t)v34, v36);

    if (!v37)
    {
      uint64_t v38 = 1;
      goto LABEL_8;
    }
    uint64_t v20 = (uint64_t *)(a1 + 40);
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v38 = 2;
LABEL_8:

  return v38;
}

void sub_18B0F0AF8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 0;
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 0;
  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 0;
  uint64_t v4 = (void (**)(id, uint64_t, void))(a4 + 2);
  id v5 = (void (*)(void))a4[2];
  id v6 = a4;
  v5();
  (*v4)(v6, 16, 0);
  (*v4)(v6, 12, 0);
}

uint64_t sub_18B0F0BB4(void *a1, void *a2, void *a3, void *a4)
{
  v87[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v13 = objc_msgSend_name(v8, v10, v11, v12);
  uint64_t v16 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v14, 4, v15);
  int isEqualToString = objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v18);

  if (isEqualToString)
  {
    uint64_t v23 = *(void *)(a1[6] + 8);
LABEL_3:
    *(unsigned char *)(v23 + 24) = 1;
LABEL_4:
    if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24)
      && *(unsigned char *)(*(void *)(a1[7] + 8) + 24)
      && *(unsigned char *)(*(void *)(a1[8] + 8) + 24))
    {
      if (*(unsigned char *)(*(void *)(a1[9] + 8) + 24) && *(unsigned char *)(*(void *)(a1[10] + 8) + 24)) {
        uint64_t v24 = a1 + 4;
      }
      else {
        uint64_t v24 = a1 + 5;
      }
      objc_msgSend_transitionToState_withEvent_(v7, v20, *v24, (uint64_t)v8);
    }
    goto LABEL_21;
  }
  uint64_t v25 = objc_msgSend_name(v8, v20, v21, v22);
  uint64_t v28 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v26, 5, v27);
  int v31 = objc_msgSend_isEqualToString_(v25, v29, (uint64_t)v28, v30);

  if (!v31)
  {
    uint64_t v36 = objc_msgSend_name(v8, v32, v33, v34);
    id v39 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v37, 9, v38);
    int v42 = objc_msgSend_isEqualToString_(v36, v40, (uint64_t)v39, v41);

    if (v42)
    {
      *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
      uint64_t v45 = a1[9];
LABEL_16:
      *(unsigned char *)(*(void *)(v45 + 8) + 24) = 0;
      goto LABEL_4;
    }
    id v46 = objc_msgSend_name(v8, v20, v43, v44);
    uint64_t v49 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v47, 8, v48);
    int v52 = objc_msgSend_isEqualToString_(v46, v50, (uint64_t)v49, v51);

    if (v52)
    {
      *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
      uint64_t v55 = a1[9];
    }
    else
    {
      uint64_t v58 = objc_msgSend_name(v8, v20, v53, v54);
      uint64_t v61 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v59, 10, v60);
      int v64 = objc_msgSend_isEqualToString_(v58, v62, (uint64_t)v61, v63);

      if (v64)
      {
        if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24)) {
          goto LABEL_21;
        }
        uint64_t v84 = @"retry";
        uint64_t v85 = MEMORY[0x1E4F1CC38];
        uint64_t v35 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v65, (uint64_t)&v85, (uint64_t)&v84, 1);
        v9[2](v9, 16, v35);
        goto LABEL_13;
      }
      uint64_t v68 = objc_msgSend_name(v8, v65, v66, v67);
      uint64_t v71 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v69, 6, v70);
      int v74 = objc_msgSend_isEqualToString_(v68, v72, (uint64_t)v71, v73);

      if (!v74)
      {
        uint64_t v77 = objc_msgSend_name(v8, v20, v75, v76);
        uint32_t v80 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v78, 7, v79);
        int v83 = objc_msgSend_isEqualToString_(v77, v81, (uint64_t)v80, v82);

        uint64_t v56 = 1;
        if (!v83) {
          goto LABEL_22;
        }
        *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 1;
        uint64_t v45 = a1[10];
        goto LABEL_16;
      }
      *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 1;
      uint64_t v55 = a1[10];
    }
    uint64_t v23 = *(void *)(v55 + 8);
    goto LABEL_3;
  }
  if (!*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    id v86 = @"retry";
    v87[0] = MEMORY[0x1E4F1CC38];
    uint64_t v35 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v32, (uint64_t)v87, (uint64_t)&v86, 1);
    v9[2](v9, 15, v35);
LABEL_13:
  }
LABEL_21:
  uint64_t v56 = 2;
LABEL_22:

  return v56;
}

void sub_18B0F0FC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  uint64_t v4 = (void (**)(id, uint64_t, void))(a4 + 2);
  id v5 = (void (*)(void))a4[2];
  id v6 = a4;
  v5();
  (*v4)(v6, 4, 0);
  (*v4)(v6, 0, 0);
  (*v4)(v6, 2, 0);
}

void sub_18B0F1060(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  v5[2](v5, 19, 0);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    v5[2](v5, 10, 0);
  }
  v5[2](v5, 5, 0);
  v5[2](v5, 1, 0);
  v5[2](v5, 3, 0);
}

uint64_t sub_18B0F1118(uint64_t *a1, void *a2, void *a3, void *a4)
{
  v114[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v13 = objc_msgSend_name(v8, v10, v11, v12);
  uint64_t v16 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v14, 13, v15);
  int isEqualToString = objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v18);

  if (isEqualToString)
  {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    objc_msgSend_transitionToState_withEvent_(v7, v20, a1[4], (uint64_t)v8);
    goto LABEL_9;
  }
  uint64_t v23 = objc_msgSend_name(v8, v20, v21, v22);
  uint64_t v26 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v24, 10, v25);
  int v29 = objc_msgSend_isEqualToString_(v23, v27, (uint64_t)v26, v28);

  if (v29)
  {
    uint64_t v113 = @"retry";
    v114[0] = MEMORY[0x1E4F1CC38];
    uint64_t v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v30, (uint64_t)v114, (uint64_t)&v113, 1);
    v9[2](v9, 16, v33);
LABEL_8:

    goto LABEL_9;
  }
  uint64_t v34 = objc_msgSend_name(v8, v30, v31, v32);
  int v37 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v35, 11, v36);
  int v40 = objc_msgSend_isEqualToString_(v34, v38, (uint64_t)v37, v39);

  if (v40)
  {
    uint64_t v111 = @"retry";
    uint64_t v112 = MEMORY[0x1E4F1CC38];
    uint64_t v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v41, (uint64_t)&v112, (uint64_t)&v111, 1);
    v9[2](v9, 17, v33);
    goto LABEL_8;
  }
  id v46 = objc_msgSend_name(v8, v41, v42, v43);
  uint64_t v49 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v47, 7, v48);
  int v52 = objc_msgSend_isEqualToString_(v46, v50, (uint64_t)v49, v51);

  if (v52)
  {
    objc_msgSend_transitionToState_withEvent_(v7, v53, a1[5], (uint64_t)v8);
    goto LABEL_9;
  }
  uint64_t v56 = objc_msgSend_name(v8, v53, v54, v55);
  uint64_t v59 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v57, 15, v58);
  int v62 = objc_msgSend_isEqualToString_(v56, v60, (uint64_t)v59, v61);

  if (v62)
  {
    v9[2](v9, 21, 0);
    goto LABEL_9;
  }
  uint64_t v66 = objc_msgSend_name(v8, v63, v64, v65);
  uint64_t v69 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v67, 2, v68);
  int v72 = objc_msgSend_isEqualToString_(v66, v70, (uint64_t)v69, v71);

  if (v72)
  {
    v9[2](v9, 8, 0);
    objc_msgSend_transitionToState_withEvent_(v7, v76, a1[6], (uint64_t)v8);
    goto LABEL_9;
  }
  uint64_t v77 = objc_msgSend_name(v8, v73, v74, v75);
  uint32_t v80 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v78, 14, v79);
  int v83 = objc_msgSend_isEqualToString_(v77, v81, (uint64_t)v80, v82);

  if (v83)
  {
    v9[2](v9, 20, 0);
    goto LABEL_9;
  }
  uint64_t v87 = objc_msgSend_name(v8, v84, v85, v86);
  int v90 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v88, 18, v89);
  int v93 = objc_msgSend_isEqualToString_(v87, v91, (uint64_t)v90, v92);

  if (!v93)
  {
    uint64_t v44 = 1;
    goto LABEL_10;
  }
  uint64_t v97 = objc_msgSend_userInfo(v8, v94, v95, v96);
  __int16 v100 = objc_msgSend_objectForKeyedSubscript_(v97, v98, @"function", v99);
  uint64_t v104 = objc_msgSend_integerValue(v100, v101, v102, v103);

  if (!v104)
  {
    uint64_t v109 = @"function";
    uint64_t v33 = objc_msgSend_numberWithInteger_(NSNumber, v105, 0, v106);
    uint64_t v110 = v33;
    uint64_t v108 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v107, (uint64_t)&v110, (uint64_t)&v109, 1);
    v9[2](v9, 27, v108);

    goto LABEL_8;
  }
LABEL_9:
  uint64_t v44 = 2;
LABEL_10:

  return v44;
}

uint64_t sub_18B0F157C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, 17, 0);
}

uint64_t sub_18B0F1594(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v13 = objc_msgSend_name(v8, v10, v11, v12);
  uint64_t v16 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v14, 9, v15);
  int isEqualToString = objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v18);

  if (isEqualToString)
  {
    objc_msgSend_transitionToState_withEvent_(v7, v20, *(void *)(a1 + 32), (uint64_t)v8);
  }
  else
  {
    uint64_t v23 = objc_msgSend_name(v8, v20, v21, v22);
    uint64_t v26 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v24, 8, v25);
    int v29 = objc_msgSend_isEqualToString_(v23, v27, (uint64_t)v26, v28);

    if (v29)
    {
      v9[2](v9, 17, 0);
    }
    else
    {
      uint64_t v33 = objc_msgSend_name(v8, v30, v31, v32);
      uint64_t v36 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v34, 12, v35);
      int v39 = objc_msgSend_isEqualToString_(v33, v37, (uint64_t)v36, v38);

      if (!v39)
      {
        uint64_t v41 = 1;
        goto LABEL_8;
      }
      objc_msgSend_transitionToState_withEvent_(v7, v40, *(void *)(a1 + 40), (uint64_t)v8);
    }
  }
  uint64_t v41 = 2;
LABEL_8:

  return v41;
}

void sub_18B0F1700(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (void (**)(id, uint64_t, void))(a4 + 2);
  id v5 = (void (*)(void))a4[2];
  id v6 = a4;
  v5();
  (*v4)(v6, 16, 0);
  (*v4)(v6, 12, 0);
}

uint64_t sub_18B0F177C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, 14, 0);
}

uint64_t sub_18B0F1790(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v10 = objc_msgSend_name(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v11, 9, v12);
  int isEqualToString = objc_msgSend_isEqualToString_(v10, v14, (uint64_t)v13, v15);

  if (!isEqualToString)
  {
    uint64_t v21 = objc_msgSend_name(v6, v17, v18, v19);
    uint64_t v24 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v22, 8, v23);
    int v27 = objc_msgSend_isEqualToString_(v21, v25, (uint64_t)v24, v26);

    if (v27)
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    }
    else
    {
      uint64_t v31 = objc_msgSend_name(v6, v28, v29, v30);
      uint64_t v34 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v32, 7, v33);
      int v37 = objc_msgSend_isEqualToString_(v31, v35, (uint64_t)v34, v36);

      if (v37)
      {
        uint64_t v20 = a1[6];
        goto LABEL_7;
      }
      uint64_t v43 = objc_msgSend_name(v6, v38, v39, v40);
      id v46 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v44, 6, v45);
      int v49 = objc_msgSend_isEqualToString_(v43, v47, (uint64_t)v46, v48);

      uint64_t v41 = 1;
      if (!v49) {
        goto LABEL_9;
      }
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24) && *(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
      objc_msgSend_transitionToState_withEvent_(v5, v28, a1[4], (uint64_t)v6);
    }
    goto LABEL_8;
  }
  uint64_t v20 = a1[5];
LABEL_7:
  *(unsigned char *)(*(void *)(v20 + 8) + 24) = 0;
LABEL_8:
  uint64_t v41 = 2;
LABEL_9:

  return v41;
}

void sub_18B0F1958(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
  id v6 = a4;
  v5(a3, 2);
  v6[2](v6, 6, 0);
  v6[2](v6, 23, 0);
}

void sub_18B0F19EC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = (void (**)(id, uint64_t, void))(a4 + 2);
  id v6 = (void (*)(void *, uint64_t, void))a4[2];
  id v7 = a4;
  uint64_t v8 = a3;
  v6(v7, 9, 0);
  (*v5)(v7, 7, 0);

  v8[2](v8, 2);
}

uint64_t sub_18B0F1A84(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v13 = objc_msgSend_name(v8, v10, v11, v12);
  uint64_t v16 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v14, 9, v15);
  int isEqualToString = objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v18);

  if (isEqualToString)
  {
    objc_msgSend_transitionToState_withEvent_(v7, v20, *(void *)(a1 + 32), (uint64_t)v8);
  }
  else
  {
    uint64_t v23 = objc_msgSend_name(v8, v20, v21, v22);
    uint64_t v26 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v24, 8, v25);
    int v29 = objc_msgSend_isEqualToString_(v23, v27, (uint64_t)v26, v28);

    if (v29)
    {
      v9[2](v9, 17, 0);
    }
    else
    {
      uint64_t v33 = objc_msgSend_name(v8, v30, v31, v32);
      uint64_t v36 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v34, 12, v35);
      int v39 = objc_msgSend_isEqualToString_(v33, v37, (uint64_t)v36, v38);

      if ((v39 & 1) == 0)
      {
        uint64_t v43 = objc_msgSend_name(v8, v40, v41, v42);
        id v46 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v44, 17, v45);
        char v49 = objc_msgSend_isEqualToString_(v43, v47, (uint64_t)v46, v48);

        if ((v49 & 1) == 0)
        {
          uint64_t v55 = objc_msgSend_name(v8, v50, v51, v52);
          uint64_t v58 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v56, 3, v57);
          int v61 = objc_msgSend_isEqualToString_(v55, v59, (uint64_t)v58, v60);

          if (!v61)
          {
            uint64_t v53 = 1;
            goto LABEL_9;
          }
          v9[2](v9, 9, 0);
          v9[2](v9, 8, 0);
          objc_msgSend_transitionToState_withEvent_(v7, v62, *(void *)(a1 + 40), (uint64_t)v8);
        }
      }
    }
  }
  uint64_t v53 = 2;
LABEL_9:

  return v53;
}

void sub_18B0F1CA0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v26 = a2;
  id v5 = a4;
  uint64_t v9 = objc_msgSend_name(v26, v6, v7, v8);
  uint64_t v12 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v10, 16, v11);
  char isEqualToString = objc_msgSend_isEqualToString_(v9, v13, (uint64_t)v12, v14);

  if ((isEqualToString & 1) != 0
    || (objc_msgSend_name(v26, v16, v17, v18),
        uint64_t v19 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v20, 3, v21),
        uint64_t v22 = objc_claimAutoreleasedReturnValue(),
        char v25 = objc_msgSend_isEqualToString_(v19, v23, (uint64_t)v22, v24),
        v22,
        v19,
        (v25 & 1) == 0))
  {
    v5[2](v5, 24, 0);
  }
}

uint64_t sub_18B0F1DA0(uint64_t a1, void *a2, void *a3, void *a4)
{
  v49[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v13 = objc_msgSend_name(v8, v10, v11, v12);
  uint64_t v16 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v14, 15, v15);
  int isEqualToString = objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v18);

  if (isEqualToString)
  {
    objc_msgSend_transitionToState_withEvent_(v7, v20, *(void *)(a1 + 32), (uint64_t)v8);
  }
  else
  {
    uint64_t v23 = objc_msgSend_name(v8, v20, v21, v22);
    id v26 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v24, 18, v25);
    int v29 = objc_msgSend_isEqualToString_(v23, v27, (uint64_t)v26, v28);

    if (!v29
      || (objc_msgSend_userInfo(v8, v30, v31, v32),
          uint64_t v33 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v33, v34, @"function", v35),
          uint64_t v36 = objc_claimAutoreleasedReturnValue(),
          uint64_t v40 = objc_msgSend_integerValue(v36, v37, v38, v39),
          v36,
          v33,
          v40 != 1))
    {
      uint64_t v46 = 1;
      goto LABEL_8;
    }
    uint64_t v48 = @"function";
    uint64_t v43 = objc_msgSend_numberWithInteger_(NSNumber, v41, 1, v42);
    v49[0] = v43;
    uint64_t v45 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v44, (uint64_t)v49, (uint64_t)&v48, 1);
    v9[2](v9, 27, v45);
  }
  uint64_t v46 = 2;
LABEL_8:

  return v46;
}

void sub_18B0F1F80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  id v5 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
  id v6 = a4;
  v5(a3, 3);
  v6[2](v6, 25, 0);
}

void sub_18B0F2004(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  id v6 = (void (**)(void *, uint64_t, void))(a4 + 2);
  id v7 = (void (*)(void *, uint64_t, void))a4[2];
  id v8 = a4;
  uint64_t v9 = a3;
  if (v5)
  {
    v7(v8, 9, 0);
    id v7 = *v6;
  }
  v7(v8, 21, 0);

  v9[2](v9, 3);
}

uint64_t sub_18B0F20B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  v65[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v13 = objc_msgSend_name(v8, v10, v11, v12);
  uint64_t v16 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v14, 17, v15);
  int isEqualToString = objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v18);

  if (isEqualToString)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  else
  {
    uint64_t v23 = objc_msgSend_name(v8, v20, v21, v22);
    id v26 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v24, 16, v25);
    int v29 = objc_msgSend_isEqualToString_(v23, v27, (uint64_t)v26, v28);

    if (!v29)
    {
      uint64_t v34 = objc_msgSend_name(v8, v20, v30, v31);
      int v37 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v35, 18, v36);
      int v40 = objc_msgSend_isEqualToString_(v34, v38, (uint64_t)v37, v39);

      if (v40)
      {
        uint64_t v44 = objc_msgSend_userInfo(v8, v41, v42, v43);
        id v47 = objc_msgSend_objectForKeyedSubscript_(v44, v45, @"function", v46);
        uint64_t v51 = objc_msgSend_integerValue(v47, v48, v49, v50);

        if (v51 == 2)
        {
          uint64_t v64 = @"function";
          uint64_t v32 = 2;
          uint64_t v54 = objc_msgSend_numberWithInteger_(NSNumber, v52, 2, v53);
          v65[0] = v54;
          uint64_t v56 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v55, (uint64_t)v65, (uint64_t)&v64, 1);
          v9[2](v9, 27, v56);

          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v57 = objc_msgSend_name(v8, v41, v42, v43);
        uint64_t v60 = objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v58, 15, v59);
        int v63 = objc_msgSend_isEqualToString_(v57, v61, (uint64_t)v60, v62);

        if (v63) {
          goto LABEL_6;
        }
      }
      uint64_t v32 = 1;
      goto LABEL_7;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  objc_msgSend_transitionToState_withEvent_(v7, v20, *(void *)(a1 + 32), (uint64_t)v8);
LABEL_6:
  uint64_t v32 = 2;
LABEL_7:

  return v32;
}

void sub_18B0F277C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  objc_destroyWeak((id *)(v18 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_18B0F27B0(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = (id *)(a1 + 40);
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(v6, v7, @"function", v8);

  uint64_t v13 = objc_msgSend_integerValue(v9, v10, v11, v12);
  id v16 = WeakRetained;
  if (v13 == *(void *)(a1 + 48))
  {
    uint64_t v14 = (uint64_t)WeakRetained;
    if (a2 == 27)
    {
      char v17 = 1;
    }
    else
    {
      if (a2 != 28) {
        goto LABEL_7;
      }
      char v17 = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v17;
    uint64_t v14 = objc_msgSend_setInternalActionHandler_(WeakRetained, (const char *)WeakRetained, 0, v15);
    id v16 = WeakRetained;
  }
LABEL_7:

  return MEMORY[0x1F41817F8](v14, v16);
}

void sub_18B0F2A88(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (a2 <= 26)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v10 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      char v17 = v10;
      uint64_t v20 = objc_msgSend_nameFromResponseAction_(CKUploadRequestManagerStateMachine, v18, a2, v19);
      uint64_t v21 = @" with userInfo ";
      uint64_t v22 = &stru_1ED7F5C98;
      *(_DWORD *)uint64_t v23 = 138543874;
      *(void *)&void v23[4] = v20;
      if (v5) {
        uint64_t v22 = v5;
      }
      else {
        uint64_t v21 = &stru_1ED7F5C98;
      }
      *(_WORD *)&v23[12] = 2114;
      *(void *)&v23[14] = v21;
      __int16 v24 = 2112;
      uint64_t v25 = v22;
      _os_log_debug_impl(&dword_18AF10000, v17, OS_LOG_TYPE_DEBUG, "Invoking state action %{public}@%{public}@%@", v23, 0x20u);
    }
  }
  uint64_t v11 = objc_msgSend_internalActionHandler(WeakRetained, v6, v7, v8, *(_OWORD *)v23);

  if (v11)
  {
    objc_msgSend_internalActionHandler(WeakRetained, v12, v13, v14);
    uint64_t v15 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, uint64_t, __CFString *))v15)[2](v15, a2, v5);
  }
  objc_msgSend_actionHandler(WeakRetained, v12, v13, v14);
  id v16 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
  ((void (**)(void, uint64_t, __CFString *))v16)[2](v16, a2, v5);
}

uint64_t sub_18B0F2C60(uint64_t a1, void *a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v6 = objc_loadWeakRetained((id *)(a1 + 72));
  unint64_t v7 = 0x1E4F5E000uLL;
  objc_msgSend_enterState(MEMORY[0x1E4F5E1E0], v8, v9, v10);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  if (v14 == v4)
  {
    char isEqualToString = 1;
  }
  else
  {
    objc_msgSend_exitState(MEMORY[0x1E4F5E1E0], v11, v12, v13);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    if (v18 == v4)
    {
      char isEqualToString = 1;
    }
    else
    {
      objc_msgSend_initialTransition(MEMORY[0x1E4F5E1E0], v15, v16, v17);
      id v2 = (id)objc_claimAutoreleasedReturnValue();
      if (v2 == v4)
      {
        char isEqualToString = 1;
      }
      else
      {
        uint64_t v22 = objc_msgSend_name(v4, v19, v20, v21);
        objc_msgSend_nameFromStateEvent_(CKUploadRequestManagerStateMachine, v23, 18, v24);
        uint64_t v25 = a1;
        id v26 = WeakRetained;
        v28 = id v27 = v6;
        char isEqualToString = objc_msgSend_isEqualToString_(v22, v29, (uint64_t)v28, v30);

        id v6 = v27;
        id WeakRetained = v26;
        a1 = v25;
        unint64_t v7 = 0x1E4F5E000;
      }
    }
  }
  uint64_t v35 = objc_msgSend_userInfo(v4, v32, v33, v34);
  uint64_t v38 = objc_msgSend_objectForKeyedSubscript_(v35, v36, @"uuid", v37);

  if ((isEqualToString & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v42 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v87 = v42;
      *(_DWORD *)buf = 138412802;
      id v108 = v4;
      __int16 v109 = 2048;
      uint64_t v110 = objc_msgSend_hash(v38, v88, v89, v90);
      __int16 v111 = 2112;
      id v112 = v6;
      _os_log_debug_impl(&dword_18AF10000, v87, OS_LOG_TYPE_DEBUG, "Processing event %@ (hash %lu) in state %@", buf, 0x20u);
    }
  }
  objc_msgSend_initialTransition(*(void **)(v7 + 480), v39, v40, v41);
  id v43 = (id)objc_claimAutoreleasedReturnValue();

  if (v43 == v4)
  {
    objc_msgSend_setEventCausingTransition_(WeakRetained, v44, 0, v46);
LABEL_37:
    uint64_t v53 = 2;
    goto LABEL_38;
  }
  objc_msgSend_enterState(*(void **)(v7 + 480), v44, v45, v46);
  id v47 = (id)objc_claimAutoreleasedReturnValue();

  if (v47 == v4)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v54 = (id)ck_log_facility_data_repair;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      id v94 = objc_msgSend_eventCausingTransition(WeakRetained, v55, v56, v57);
      if (v94)
      {
        id v101 = NSString;
        objc_msgSend_eventCausingTransition(WeakRetained, v91, v92, v93);
        id v2 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v101, v102, @" with event %@", v103, v2);
        uint64_t v95 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v95 = &stru_1ED7F5C98;
      }
      *(_DWORD *)buf = 138412546;
      id v108 = v6;
      __int16 v109 = 2112;
      uint64_t v110 = (uint64_t)v95;
      _os_log_debug_impl(&dword_18AF10000, v54, OS_LOG_TYPE_DEBUG, "Entering state %@%@", buf, 0x16u);
      if (v94)
      {
      }
    }

    if (!*(void *)(a1 + 32)) {
      goto LABEL_37;
    }
    int v61 = objc_msgSend_enterStateHandler(WeakRetained, v58, v59, v60);

    uint64_t v62 = *(void *)(a1 + 32);
    uint64_t v69 = objc_msgSend_eventCausingTransition(WeakRetained, v63, v64, v65);
    if (v61)
    {
      uint64_t v70 = objc_msgSend_enterStateHandler(WeakRetained, v66, v67, v68);
LABEL_33:
      uint64_t v85 = (void *)v70;
      (*(void (**)(uint64_t, void *, uint64_t, void))(v62 + 16))(v62, v69, v70, *(void *)(a1 + 40));

LABEL_36:
      goto LABEL_37;
    }
LABEL_35:
    (*(void (**)(uint64_t, void *, void *, void))(v62 + 16))(v62, v69, &unk_1ED7EFC78, *(void *)(a1 + 40));
    goto LABEL_36;
  }
  objc_msgSend_exitState(*(void **)(v7 + 480), v48, v49, v50);
  id v51 = (id)objc_claimAutoreleasedReturnValue();

  if (v51 == v4)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v71 = (id)ck_log_facility_data_repair;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v99 = objc_msgSend_eventCausingTransition(WeakRetained, v72, v73, v74);
      if (v99)
      {
        uint64_t v104 = NSString;
        objc_msgSend_eventCausingTransition(WeakRetained, v96, v97, v98);
        id v2 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v104, v105, @" with event %@", v106, v2);
        __int16 v100 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        __int16 v100 = &stru_1ED7F5C98;
      }
      *(_DWORD *)buf = 138412546;
      id v108 = v6;
      __int16 v109 = 2112;
      uint64_t v110 = (uint64_t)v100;
      _os_log_debug_impl(&dword_18AF10000, v71, OS_LOG_TYPE_DEBUG, "Exiting state %@%@", buf, 0x16u);
      if (v99)
      {
      }
    }

    if (!*(void *)(a1 + 48)) {
      goto LABEL_37;
    }
    uint64_t v78 = objc_msgSend_exitStateHandler(WeakRetained, v75, v76, v77);

    uint64_t v62 = *(void *)(a1 + 48);
    uint64_t v69 = objc_msgSend_eventCausingTransition(WeakRetained, v79, v80, v81);
    if (v78)
    {
      uint64_t v70 = objc_msgSend_exitStateHandler(WeakRetained, v82, v83, v84);
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  uint64_t v52 = *(void *)(a1 + 56);
  if (v52) {
    uint64_t v53 = (*(uint64_t (**)(uint64_t, id, id, void))(v52 + 16))(v52, WeakRetained, v4, *(void *)(a1 + 40));
  }
  else {
    uint64_t v53 = 1;
  }
LABEL_38:

  return v53;
}

uint64_t sub_18B0F3B3C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_CKMap_(a1, a2, (uint64_t)&unk_1ED7EF2F8, a4);
}

id sub_18B0F3B48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_equivalencyProperties(a2, (const char *)a2, a3, a4);
  uint64_t v8 = objc_msgSend_dictionary(v4, v5, v6, v7);

  return v8;
}

void sub_18B0F3E74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[2];
  uint64_t v8 = v6[3];
  uint64_t v9 = v6[4];
  uint64_t v10 = v6[5];
  uint64_t v11 = v6[6];
  uint64_t v12 = NSNumber;
  uint64_t v13 = v6[9];
  id v14 = a2;
  uint64_t v17 = objc_msgSend_numberWithUnsignedInteger_(v12, v15, v13, v16);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_18B0F3FB0;
  v20[3] = &unk_1E5464780;
  void v20[4] = *(void *)(a1 + 32);
  id v21 = v5;
  id v18 = v5;
  objc_msgSend_select_from_where_bindings_orderBy_limit_offset_block_(v14, v19, v7, v8, v9, v10, v11, &unk_1ED8467E0, v17, v20);
}

void sub_18B0F3FB0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v7 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
    *a3 = 1;
  }
  else {
    objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 56), v5, (uint64_t)v7, v6);
  }
}

__CFString *CKStringFromParticipantPermission(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"unknown";
  }
  else {
    return off_1E5464808[a1 - 1];
  }
}

__CFString *CKStringFromParticipantRole(unint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1 >= 5)
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"unknown %ld", a4, a1);
    id v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v4 = off_1E54647E0[a1];
  }

  return v4;
}

__CFString *CKStringFromParticipantAcceptanceStatus(unint64_t a1)
{
  if (a1 > 4) {
    return @"Removed";
  }
  else {
    return off_1E5464828[a1];
  }
}

__CFString *CKStringFromParticipantInvitationTokenStatus(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5464850[a1 - 1];
  }
}

void sub_18B0F5034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B0F5684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

id sub_18B0F56B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2050000000;
  id v4 = (void *)qword_1E912FDF8;
  uint64_t v11 = qword_1E912FDF8;
  if (!qword_1E912FDF8)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = sub_18B0F6204;
    v7[3] = &unk_1E545FF40;
    void v7[4] = &v8;
    sub_18B0F6204((uint64_t)v7, a2, a3, a4);
    id v4 = (void *)v9[3];
  }
  id v5 = v4;
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_18B0F5784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B0F579C(void *a1, const char *a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = objc_msgSend_unifiedContactsMatchingPredicate_keysToFetch_error_(v3, a2, (uint64_t)a2, v2, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);

  return v5;
}

void sub_18B0F6204(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_18B0F62CC(a1, a2, a3, a4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContact");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1E912FDF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v8 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v5, v6, v7);
    uint64_t v11 = objc_msgSend_stringWithUTF8String_(NSString, v9, (uint64_t)"Class getCNContactClass(void)_block_invoke", v10);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v8, v12, (uint64_t)v11, @"CKShareParticipant.m", 26, @"Unable to find class %s", "CNContact");

    __break(1u);
  }
}

void *sub_18B0F62CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  if (!qword_1E912FE00)
  {
    v11[1] = (void *)MEMORY[0x1E4F143A8];
    v11[2] = (void *)3221225472;
    void v11[3] = sub_18B0F6420;
    void v11[4] = &unk_1E545FFA8;
    v11[5] = v11;
    long long v12 = xmmword_1E54647C8;
    uint64_t v13 = 0;
    qword_1E912FE00 = _sl_dlopen();
  }
  uint64_t v4 = (void *)qword_1E912FE00;
  if (!qword_1E912FE00)
  {
    uint64_t v4 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
    uint64_t v9 = objc_msgSend_stringWithUTF8String_(NSString, v7, (uint64_t)"void *ContactsLibrary(void)", v8);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v10, (uint64_t)v9, @"CKShareParticipant.m", 25, @"%s", v11[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v5 = v11[0];
  if (v11[0]) {
LABEL_7:
  }
    free(v5);
  return v4;
}

uint64_t sub_18B0F6420()
{
  uint64_t result = _sl_dlopen();
  qword_1E912FE00 = result;
  return result;
}

void *sub_18B0F6494(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B0F62CC(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "CNContactEmailAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB279CA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18B0F64E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_18B0F62CC(a1, a2, a3, a4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB279CB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v8 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v5, v6, v7);
    uint64_t v11 = objc_msgSend_stringWithUTF8String_(NSString, v9, (uint64_t)"Class getCNPhoneNumberClass(void)_block_invoke", v10);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v8, v12, (uint64_t)v11, @"CKShareParticipant.m", 27, @"Unable to find class %s", "CNPhoneNumber");

    __break(1u);
  }
}

void *sub_18B0F65AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B0F62CC(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "CNContactPhoneNumbersKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB279CB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t CKDPDistributedTimestampsVersionVectorReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v7 = 0;
    unsigned int v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *v3;
      unint64_t v11 = *(void *)(a2 + v10);
      if (v11 == -1 || v11 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)(a2 + *v6) + v11);
      *(void *)(a2 + v1dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v11 + 1;
      v9 |= (unint64_t)(v12 & 0x7F) << v7;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v7 += 7;
      BOOL v13 = v8++ >= 9;
      if (v13)
      {
        unint64_t v9 = 0;
        int v14 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v14 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v9 = 0;
    }
LABEL_14:
    int v15 = v9 & 7;
    if (v14 || v15 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v9 >> 3))
    {
      case 2u:
        if (v15 != 2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0;
          while (1)
          {
            uint64_t v45 = *v3;
            unint64_t v46 = *(void *)(a2 + v45);
            if (v46 == -1 || v46 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v47 = *(unsigned char *)(*(void *)(a2 + *v6) + v46);
            *(void *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              BOOL v13 = v43++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_89;
          }
LABEL_88:
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_89:
          PBRepeatedUInt64Add();
LABEL_108:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        uint64_t result = PBReaderPlaceMark();
        if (result)
        {
          while (1)
          {
            if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4) || *(unsigned char *)(a2 + *v5)) {
              goto LABEL_73;
            }
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v6) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if (v23 < 0)
              {
                v18 += 7;
                BOOL v13 = v19++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_31;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
            PBRepeatedUInt64Add();
          }
        }
        return result;
      case 3u:
        if (v15 != 2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          while (1)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4)) {
              goto LABEL_88;
            }
            char v53 = *(unsigned char *)(*(void *)(a2 + *v6) + v52);
            *(void *)(a2 + v51) = v52 + 1;
            v50 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              BOOL v13 = v49++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_89;
          }
        }
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v6) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v13 = v25++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_46;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
          PBRepeatedUInt64Add();
        }
        goto LABEL_73;
      case 4u:
        if (v15 != 2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v56 = 0;
          while (1)
          {
            uint64_t v57 = *v3;
            unint64_t v58 = *(void *)(a2 + v57);
            if (v58 == -1 || v58 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v59 = *(unsigned char *)(*(void *)(a2 + *v6) + v58);
            *(void *)(a2 + v57) = v58 + 1;
            v56 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              BOOL v13 = v55++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_105;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_105:
          PBRepeatedInt32Add();
          goto LABEL_108;
        }
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          while (1)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v35 = *(unsigned char *)(*(void *)(a2 + *v6) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              BOOL v13 = v31++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_59;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_59:
          PBRepeatedInt32Add();
        }
        goto LABEL_73;
      case 5u:
        if (v15 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            while (1)
            {
              uint64_t v39 = *v3;
              unint64_t v40 = *(void *)(a2 + v39);
              if (v40 == -1 || v40 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v41 = *(unsigned char *)(*(void *)(a2 + *v6) + v40);
              *(void *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                BOOL v13 = v37++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_72;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_72:
            PBRepeatedUInt32Add();
          }
LABEL_73:
          PBReaderRecallMark();
        }
        else
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v62 = 0;
          while (1)
          {
            uint64_t v63 = *v3;
            unint64_t v64 = *(void *)(a2 + v63);
            if (v64 == -1 || v64 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v65 = *(unsigned char *)(*(void *)(a2 + *v6) + v64);
            *(void *)(a2 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              BOOL v13 = v61++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_107;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_107:
          PBRepeatedUInt32Add();
        }
        goto LABEL_108;
      default:
        if (PBReaderSkipValueWithTag()) {
          goto LABEL_108;
        }
        return 0;
    }
  }
}

uint64_t sub_18B0F7D00()
{
  return 1;
}

uint64_t sub_18B0F8624()
{
  return 1;
}

void sub_18B0F90E0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

BOOL sub_18B0F9434(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_indegree(a2, (const char *)a2, a3, a4) == 0;
}

void *sub_18B0F9760(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0F9940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0F9958(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0FA90C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0FAAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0FAB04(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0FAC90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0FAE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0FAE88(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0FC334(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0FC514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0FC52C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B0FC6B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B0FC898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B0FC8B0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B0FCD14(uint64_t a1, void *a2)
{
  void v49[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v7 = objc_msgSend_userInfo(v3, v4, v5, v6);
  unint64_t v11 = objc_msgSend_allKeys(v7, v8, v9, v10);
  int v14 = objc_msgSend_containsObject_(v11, v12, @"CKRetryAfter", v13);

  if (!v14)
  {
LABEL_19:
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 88))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v33 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = v3;
      _os_log_debug_impl(&dword_18AF10000, v33, OS_LOG_TYPE_DEBUG, "Got a retryable error %@, but no more retries left, reporting it", buf, 0xCu);
    }
    goto LABEL_19;
  }
  char v18 = objc_msgSend_userInfo(v3, v15, v16, v17);
  uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v18, v19, @"CKRetryAfter", v20);
  objc_msgSend_doubleValue(v21, v22, v23, v24);
  double v26 = v25;

  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v27 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138544130;
    uint64_t v45 = @"CKRetryAfter";
    __int16 v46 = 2048;
    double v47 = v26;
    __int16 v48 = 1024;
    LODWORD(v49[0]) = 0;
    WORD2(v49[0]) = 1024;
    *(_DWORD *)((char *)v49 + 6) = 60;
    _os_log_debug_impl(&dword_18AF10000, v27, OS_LOG_TYPE_DEBUG, "Got a retryable error, found a %{public}@ header with a value %.1f, will now clip it to [%d, %d] range", buf, 0x22u);
  }
  double v28 = 0.0;
  if (v26 >= 0.0)
  {
    double v28 = v26;
    if (v26 > 60.0) {
      double v28 = 60.0;
    }
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  char v29 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    double v34 = *(double *)(a1 + 88);
    *(_DWORD *)buf = 134218498;
    uint64_t v45 = *(__CFString **)&v28;
    __int16 v46 = 2048;
    double v47 = v34;
    __int16 v48 = 2112;
    v49[0] = v3;
    _os_log_debug_impl(&dword_18AF10000, v29, OS_LOG_TYPE_DEBUG, "Got a retryable error, delay is %.1f seconds, retries left %lu, scheduling retry. The error was %@", buf, 0x20u);
  }
  dispatch_time_t v30 = dispatch_time(0, (uint64_t)(v28 * 1000000000.0));
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_18B0FD100;
  v35[3] = &unk_1E54648F8;
  id v36 = *(id *)(a1 + 32);
  id v37 = *(id *)(a1 + 40);
  id v38 = *(id *)(a1 + 48);
  id v31 = *(id *)(a1 + 56);
  uint64_t v32 = *(void *)(a1 + 88);
  id v39 = v31;
  uint64_t v43 = v32;
  id v40 = *(id *)(a1 + 64);
  id v41 = *(id *)(a1 + 80);
  id v42 = *(id *)(a1 + 72);
  dispatch_after(v30, MEMORY[0x1E4F14428], v35);

LABEL_20:
}

void sub_18B0FD100(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "Calling into a retry block for operation %@", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v3 = [CKInitiateParticipantVettingOperation alloc];
  uint64_t v5 = objc_msgSend_initWithShareMetadata_participantID_address_(v3, v4, a1[5], a1[6], a1[7]);
  objc_msgSend_retryTimes_container_participantVettingInitiatedBlock_participantVettingInitiationCompletionBlock_(v5, v6, a1[11], a1[8], a1[9], a1[10]);
}

uint64_t sub_18B0FE940(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FE948(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FE950(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FEBAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FEBB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FEBBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FEBC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FEBCC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FEBD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_zoneID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B0FEE3C(uint64_t a1)
{
  if (byte_1E9124EF0) {
    uint64_t v1 = *(objc_class **)(a1 + 32);
  }
  else {
    uint64_t v1 = NSClassFromString(&cfstr_Ckdthrottleman.isa);
  }
  id v2 = [v1 alloc];
  uint64_t inited = objc_msgSend_initInternal(v2, v3, v4, v5);
  uint64_t v7 = qword_1EB279CC0;
  qword_1EB279CC0 = inited;

  return MEMORY[0x1F41817F8](inited, v7);
}

void sub_18B0FF404(void **a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  if (a1)
  {
    uint64_t v7 = objc_msgSend_mutableCopy(a1[1], v3, v4, v5);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v39 = v6;
    id obj = v6;
    uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v41, (uint64_t)v47, 16);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v42;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v42 != v11) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void **)(*((void *)&v41 + 1) + 8 * v12);
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          int v14 = (void *)ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = v14;
            uint64_t v21 = objc_msgSend_throttleID(v13, v18, v19, v20);
            unint64_t v22 = (void *)v21;
            uint64_t v23 = @"<throttleID unset>";
            if (v21) {
              uint64_t v23 = (__CFString *)v21;
            }
            *(_DWORD *)buf = 138543362;
            __int16 v46 = v23;
            _os_log_impl(&dword_18AF10000, v17, OS_LOG_TYPE_INFO, "removing throttle: %{public}@", buf, 0xCu);
          }
          objc_msgSend_throttleWillBeRemoved_(a1, v15, (uint64_t)v13, v16);
          objc_msgSend_removeObject_(v7, v24, (uint64_t)v13, v25);
          ++v12;
        }
        while (v10 != v12);
        uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v26, (uint64_t)&v41, (uint64_t)v47, 16);
      }
      while (v10);
    }

    if (objc_msgSend_count(v7, v27, v28, v29))
    {
      uint64_t v33 = objc_msgSend_copy(v7, v30, v31, v32);
      double v34 = a1[1];
      a1[1] = (void *)v33;
    }
    else
    {
      char v35 = a1[1];
      a1[1] = 0;

      objc_msgSend_throttleListBecameEmpty(a1, v36, v37, v38);
    }

    id v6 = v39;
  }
}

uint64_t sub_18B0FF6F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_description(a2, (const char *)a2, a3, a4);
}

void sub_18B100478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18B10049C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_18B100954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state)
{
}

void sub_18B100974(uint64_t a1, const char *a2)
{
  uint64_t v3 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, a2, @"CKErrorDomain", 12, @"Cannot append a zero-length segment to a streaming asset.");
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v5 = v3;
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0);
    uint64_t v3 = v5;
  }
}

void sub_18B1009F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_isAppending(*(void **)(a1 + 32), a2, a3, a4))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v8 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v114 = v10;
      _os_log_impl(&dword_18AF10000, v8, OS_LOG_TYPE_INFO, "Trying to append to streaming asset while already appending %@", buf, 0xCu);
    }
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v9, @"CKErrorDomain", 1, @"An append is already in progress. Please wait until the current append has finished before appending again.");
  }
  else
  {
    id v11 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v5, v6, v7);
    int v15 = objc_msgSend_uploadURL(v11, v12, v13, v14);

    if (v15) {
      goto LABEL_19;
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    char v18 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v104 = *(void **)(a1 + 32);
      uint64_t v105 = v18;
      __int16 v109 = objc_msgSend_streamingAsset(v104, v106, v107, v108);
      *(_DWORD *)buf = 138412290;
      uint64_t v114 = v109;
      _os_log_error_impl(&dword_18AF10000, v105, OS_LOG_TYPE_ERROR, "Missing uploadURL appending to streaming asset %@", buf, 0xCu);
    }
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v19, @"CKErrorDomain", 12, @"Missing upload URL for streaming asset. Try saving the streaming asset in a record to the server.");
  uint64_t v20 = };
  if (v20)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v21 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v114 = v20;
      _os_log_impl(&dword_18AF10000, v21, OS_LOG_TYPE_INFO, "Error before starting streaming asset append: %@", buf, 0xCu);
    }
    uint64_t v25 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v22, v23, v24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18B100F74;
    block[3] = &unk_1E54621B0;
    id v26 = *(id *)(a1 + 64);
    id v111 = v20;
    id v112 = v26;
    id v27 = v20;
    dispatch_async(v25, block);

    uint64_t v28 = v112;
    goto LABEL_27;
  }
LABEL_19:
  objc_msgSend_setAppending_(*(void **)(a1 + 32), v16, 1, v17);
  objc_msgSend_setCurrentAppendCancelled_(*(void **)(a1 + 32), v29, 0, v30);
  objc_msgSend_setCompletionHandler_(*(void **)(a1 + 32), v31, *(void *)(a1 + 64), v32);
  uint64_t v33 = objc_opt_class();
  uint64_t v34 = *(void *)(a1 + 40);
  uint64_t v38 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v35, v36, v37);
  long long v42 = objc_msgSend_uploadURL(v38, v39, v40, v41);
  uint64_t v43 = *(void *)(a1 + 48);
  double v47 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v44, v45, v46);
  uint64_t v51 = objc_msgSend_bytesUploaded(v47, v48, v49, v50);
  objc_msgSend_requestToAppendSegmentData_uploadURL_requestUUID_offset_(v33, v52, v34, (uint64_t)v42, v43, v51);
  id v27 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v56 = objc_msgSend_length(*(void **)(a1 + 40), v53, v54, v55);
  objc_msgSend_setCurrentSegmentLength_(*(void **)(a1 + 32), v57, v56, v58);
  uint64_t v62 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v59, v60, v61);
  uint64_t v66 = objc_msgSend_requestOptions(v62, v63, v64, v65);
  uint64_t v67 = v66;
  if (v66) {
    id v68 = v66;
  }
  else {
    id v68 = objc_alloc_init(MEMORY[0x1E4F50D78]);
  }
  uint64_t v28 = v68;

  uint64_t v69 = NSString;
  uint64_t v70 = objc_opt_class();
  uint64_t v73 = objc_msgSend_stringWithFormat_(v69, v71, @"%@ requestUUID:%@", v72, v70, *(void *)(a1 + 48));
  objc_msgSend_setIdentifier_(v28, v74, (uint64_t)v73, v75);

  objc_msgSend_setTlsPinning_(v28, v76, 1, v77);
  uint64_t v81 = objc_msgSend_sharedManager(MEMORY[0x1E4F50D70], v78, v79, v80);
  uint64_t v83 = objc_msgSend_createDataTaskWithRequest_options_delegate_sessionHandle_(v81, v82, (uint64_t)v27, (uint64_t)v28, *(void *)(a1 + 32), 0);
  objc_msgSend_setDataTask_(*(void **)(a1 + 32), v84, (uint64_t)v83, v85);

  objc_msgSend_setRequestUUID_(*(void **)(a1 + 32), v86, *(void *)(a1 + 48), v87);
  objc_msgSend_setOsActivity_(*(void **)(a1 + 32), v88, *(void *)(a1 + 56), v89);
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v90 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v98 = *(void **)(a1 + 32);
    uint64_t v99 = v90;
    uint64_t v103 = objc_msgSend_dataTask(v98, v100, v101, v102);
    *(_DWORD *)buf = 138412290;
    uint64_t v114 = v103;
    _os_log_debug_impl(&dword_18AF10000, v99, OS_LOG_TYPE_DEBUG, "Will resume streaming asset append data task: %@", buf, 0xCu);
  }
  id v94 = objc_msgSend_dataTask(*(void **)(a1 + 32), v91, v92, v93);
  objc_msgSend_resume(v94, v95, v96, v97);

LABEL_27:
}

uint64_t sub_18B100F74(uint64_t a1)
{
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "On callback queue about to call completion handler for before starting append", v4, 2u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18B101450(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v252 = *MEMORY[0x1E4F143B8];
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v5 = objc_msgSend_osActivity(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = v5;
  if (v5)
  {
    os_activity_scope_enter(v5, &state);
  }
  else
  {
    uint64_t v7 = _os_activity_create(&dword_18AF10000, "client/streaming-asset-didComplete", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);
  }
  if (*(void *)(a1 + 40))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v8 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v243 = v12;
      __int16 v244 = 2112;
      *(void *)v245 = v13;
      _os_log_error_impl(&dword_18AF10000, v8, OS_LOG_TYPE_ERROR, "Append task completed with error %@: %@", buf, 0x16u);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v14 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v124 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v243 = v124;
      _os_log_debug_impl(&dword_18AF10000, v14, OS_LOG_TYPE_DEBUG, "Append task completed %@", buf, 0xCu);
    }
  }
  int v15 = *(void **)(a1 + 48);
  uint64_t v16 = objc_msgSend_dataTask(*(void **)(a1 + 32), v9, v10, v11);
  LOBYTE(v15) = v15 == v16;

  if ((v15 & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v20 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v243 = v21;
      _os_log_impl(&dword_18AF10000, v20, OS_LOG_TYPE_INFO, "Received completion callback for task that is not ours: %@", buf, 0xCu);
    }
    goto LABEL_136;
  }
  unint64_t v22 = objc_msgSend_response(*(void **)(a1 + 48), v17, v18, v19);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0
    || (objc_msgSend_response(*(void **)(a1 + 48), v24, v25, v26),
        id v27 = objc_claimAutoreleasedReturnValue(),
        (uint64_t v31 = v27) == 0))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    __int16 v109 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v125 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v243 = v125;
      _os_log_error_impl(&dword_18AF10000, v109, OS_LOG_TYPE_ERROR, "No response for %@", buf, 0xCu);
    }
    if (objc_msgSend_isCurrentAppendCancelled(*(void **)(a1 + 32), v110, v111, v112))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v114 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_18AF10000, v114, OS_LOG_TYPE_DEBUG, "Sending error back that the current append was cancelled", buf, 2u);
      }
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v115, @"CKErrorDomain", 20, @"Append was cancelled");
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v113, @"CKErrorDomain", 34, @"No response appending to streaming asset");
    uint64_t v116 = };
    uint64_t v31 = 0;
    goto LABEL_122;
  }
  uint64_t v32 = objc_msgSend_allHeaderFields(v27, v28, v29, v30);
  char v35 = objc_msgSend_objectForKeyedSubscript_(v32, v33, @"x-apple-sa-status", v34);

  id v39 = objc_msgSend_allHeaderFields(v31, v36, v37, v38);
  long long v42 = objc_msgSend_objectForKeyedSubscript_(v39, v40, @"x-apple-sa-status", v41);
  uint64_t v46 = objc_msgSend_integerValue(v42, v43, v44, v45);

  uint64_t v50 = objc_msgSend_allHeaderFields(v31, v47, v48, v49);
  char v53 = objc_msgSend_objectForKeyedSubscript_(v50, v51, @"x-apple-sa-content-status", v52);

  uint64_t v57 = objc_msgSend_allHeaderFields(v31, v54, v55, v56);
  uint64_t v60 = objc_msgSend_objectForKeyedSubscript_(v57, v58, @"x-apple-sa-content-status", v59);
  uint64_t v231 = objc_msgSend_integerValue(v60, v61, v62, v63);

  uint64_t v67 = objc_msgSend_allHeaderFields(v31, v64, v65, v66);
  uint64_t v70 = objc_msgSend_objectForKeyedSubscript_(v67, v68, @"x-apple-sa-error-code", v69);

  uint64_t v74 = objc_msgSend_allHeaderFields(v31, v71, v72, v73);
  uint64_t v77 = objc_msgSend_objectForKeyedSubscript_(v74, v75, @"x-apple-sa-error-code", v76);
  uint64_t v233 = objc_msgSend_integerValue(v77, v78, v79, v80);

  uint64_t v84 = objc_msgSend_allHeaderFields(v31, v81, v82, v83);
  v234 = objc_msgSend_objectForKeyedSubscript_(v84, v85, @"x-apple-sa-error-description", v86);

  uint64_t v89 = objc_msgSend_valueForHTTPHeaderField_(v31, v87, @"X-Apple-Request-UUID", v88);
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v90 = (id)ck_log_facility_ck;
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
  {
    v230 = objc_msgSend_requestUUID(*(void **)(a1 + 32), v91, v92, v93);
    int v227 = objc_msgSend_statusCode(v31, v160, v161, v162);
    if (v89)
    {
      objc_msgSend_stringWithFormat_(NSString, v163, @" requestUUID=%@", v164, v89);
      v229 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v229 = &stru_1ED7F5C98;
    }
    if (v35)
    {
      objc_msgSend_stringWithFormat_(NSString, v163, @" edgeStatus=%d", v164, v46);
      v228 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v228 = &stru_1ED7F5C98;
    }
    if (v53)
    {
      objc_msgSend_stringWithFormat_(NSString, v163, @" contentStatus=%d", v164, v231);
      v191 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v191 = &stru_1ED7F5C98;
    }
    v232 = v191;
    if (v70)
    {
      objc_msgSend_stringWithFormat_(NSString, v163, @" errorCode=%d errorDescription=\"%@\"", v164, v233, v234);
      v192 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v191 = v232;
    }
    else
    {
      v192 = &stru_1ED7F5C98;
    }
    v226 = v192;
    *(_DWORD *)buf = 138544642;
    uint64_t v243 = (uint64_t)v230;
    __int16 v244 = 1024;
    *(_DWORD *)v245 = v227;
    *(_WORD *)&v245[4] = 2114;
    *(void *)&v245[6] = v229;
    __int16 v246 = 2114;
    v247 = v228;
    __int16 v248 = 2114;
    v249 = v191;
    __int16 v250 = 2114;
    v251 = v192;
    _os_log_debug_impl(&dword_18AF10000, v90, OS_LOG_TYPE_DEBUG, "Append request %{public}@ finished with httpStatus=%d%{public}@%{public}@%{public}@%{public}@", buf, 0x3Au);
    if (v70) {

    }
    if (v53) {
    if (v35)
    }

    if (v89) {
  }
    }

  if (objc_msgSend_statusCode(v31, v94, v95, v96) != 200)
  {
    __int16 v100 = (void *)v89;
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v117 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      uint64_t v190 = objc_msgSend_allHeaderFields(v31, v118, v119, v120);
      *(_DWORD *)buf = 138412290;
      uint64_t v243 = (uint64_t)v190;
      _os_log_error_impl(&dword_18AF10000, v117, OS_LOG_TYPE_ERROR, "Received unknown error appending to streaming asset. Headers=%@", buf, 0xCu);
    }
    uint64_t v104 = CKErrorFromHTTPResponse(v31);
    uint64_t v116 = objc_msgSend_CKClientSuitableError(v104, v121, v122, v123);
    goto LABEL_48;
  }
  __int16 v100 = (void *)v89;
  switch(v46)
  {
    case 0:
      uint64_t v101 = objc_msgSend_allHeaderFields(v31, v97, v98, v99);
      uint64_t v104 = objc_msgSend_objectForKeyedSubscript_(v101, v102, @"x-apple-sa-receipt", v103);

      if (objc_msgSend_fakeMissingUploadReceipt(*(void **)(a1 + 32), v105, v106, v107))
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v108 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18AF10000, v108, OS_LOG_TYPE_INFO, "Pretending like we didn't get an upload receipt", buf, 2u);
        }
      }
      else if (v104)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v165 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v225 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v243 = v225;
          _os_log_debug_impl(&dword_18AF10000, v165, OS_LOG_TYPE_DEBUG, "Successfully appended to streaming asset %@", buf, 0xCu);
        }
        uint64_t v169 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v166, v167, v168);
        objc_msgSend_setUploadReceipt_(v169, v170, (uint64_t)v104, v171);

        v175 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v172, v173, v174);
        uint64_t v179 = objc_msgSend_currentSegmentLength(*(void **)(a1 + 32), v176, v177, v178);
        uint64_t v183 = objc_msgSend_size(v175, v180, v181, v182);
        objc_msgSend_setSize_(v175, v184, v183 + v179, v185);

        uint64_t v116 = 0;
        goto LABEL_90;
      }
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      v188 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_18AF10000, v188, OS_LOG_TYPE_ERROR, "No upload receipt after appending to streaming asset", buf, 2u);
      }
      uint64_t v116 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v189, @"CKErrorDomain", 1, @"Missing upload receipt after appending to streaming asset. Create a new streaming asset to continue: requestUUID=%@", v89);
      uint64_t v104 = 0;
LABEL_90:
      objc_msgSend_setCurrentSegmentLength_(*(void **)(a1 + 32), v186, 0, v187);
      goto LABEL_48;
    case 1:
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      long long v126 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v128 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v243 = v128;
        _os_log_impl(&dword_18AF10000, v126, OS_LOG_TYPE_INFO, "Upload was terminated by the uploader for %@", buf, 0xCu);
      }
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v127, @"CKErrorDomain", 20, @"Streaming asset upload terminated: requestUUID=%@", v89);
      goto LABEL_120;
    case 2:
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v129 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v131 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v243 = v131;
        _os_log_impl(&dword_18AF10000, v129, OS_LOG_TYPE_INFO, "Segment signature mismatch for %@", buf, 0xCu);
      }
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v130, @"CKErrorDomain", 1, @"Segment signature mismatch: requestUUID=%@", v89);
      goto LABEL_120;
    case 3:
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v132 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v134 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v243 = v134;
        _os_log_impl(&dword_18AF10000, v132, OS_LOG_TYPE_INFO, "Vendor upload error for %@", buf, 0xCu);
      }
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v133, @"CKErrorDomain", 1, @"Vendor upload error: requestUUID=%@", v89);
      goto LABEL_120;
    case 4:
      if (v233 == 48)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        v193 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        {
          uint64_t v195 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v243 = v195;
          _os_log_impl(&dword_18AF10000, v193, OS_LOG_TYPE_INFO, "Append would exceed max length for %@", buf, 0xCu);
        }
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v194, @"CKErrorDomain", 27, @"Append would exceed max length of streaming asset: requestUUID=%@", v89);
        goto LABEL_120;
      }
      if (v233 != 42)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        v196 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        {
          uint64_t v198 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v243 = v198;
          _os_log_impl(&dword_18AF10000, v196, OS_LOG_TYPE_INFO, "Content error for %@", buf, 0xCu);
        }
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v197, @"CKErrorDomain", 1, @"Content error: requestUUID=%@", v89);
        uint64_t v116 = LABEL_120:;
        __int16 v100 = (void *)v89;
        goto LABEL_121;
      }
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      char v135 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v139 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v243 = v139;
        _os_log_impl(&dword_18AF10000, v135, OS_LOG_TYPE_INFO, "Stream offset invalid for %@", buf, 0xCu);
      }
      long long v140 = objc_msgSend_allHeaderFields(v31, v136, v137, v138);
      long long v143 = objc_msgSend_objectForKeyedSubscript_(v140, v141, @"x-apple-sa-current-length", v142);

      if (objc_opt_respondsToSelector())
      {
        uint64_t v147 = objc_msgSend_integerValue(v143, v144, v145, v146);
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        long long v148 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v243 = v147;
          _os_log_debug_impl(&dword_18AF10000, v148, OS_LOG_TYPE_DEBUG, "Offset was invalid, and we have a new length of the streaming asset (%ld)", buf, 0xCu);
        }
        long long v152 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v149, v150, v151);
        uint64_t v156 = objc_msgSend_copy(v152, v153, v154, v155);

        objc_msgSend_setSize_(v156, v157, v147, v158);
        v240 = @"CKServerStreamingAsset";
        v241 = v156;
        uint64_t v104 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v159, (uint64_t)&v241, (uint64_t)&v240, 1);
      }
      else
      {
        uint64_t v104 = 0;
      }
      uint64_t v116 = objc_msgSend_errorWithDomain_code_userInfo_format_(CKPrettyError, v144, @"CKErrorDomain", 124, v104, @"Local streaming asset bytes uploaded doesn't match server: requestUUID=%@", v89);

LABEL_48:
LABEL_121:

LABEL_122:
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      v199 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_18AF10000, v199, OS_LOG_TYPE_DEBUG, "Finishing streaming asset append", buf, 2u);
      }
      objc_msgSend_setAppending_(*(void **)(a1 + 32), v200, 0, v201);
      objc_msgSend_setRequestUUID_(*(void **)(a1 + 32), v202, 0, v203);
      objc_msgSend_setOsActivity_(*(void **)(a1 + 32), v204, 0, v205);
      v209 = objc_msgSend_completionHandler(*(void **)(a1 + 32), v206, v207, v208);
      objc_msgSend_setCompletionHandler_(*(void **)(a1 + 32), v210, 0, v211);
      if (v116)
      {
        v215 = 0;
      }
      else
      {
        v216 = objc_msgSend_streamingAsset(*(void **)(a1 + 32), v212, v213, v214);
        v215 = objc_msgSend_copy(v216, v217, v218, v219);
      }
      if (v209)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        v220 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_18AF10000, v220, OS_LOG_TYPE_DEBUG, "About to call back to adopter for streaming asset append completion", buf, 2u);
        }
        v224 = objc_msgSend_callbackQueue(*(void **)(a1 + 32), v221, v222, v223);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_18B1025C0;
        block[3] = &unk_1E5461A70;
        id v236 = v116;
        id v238 = v209;
        id v237 = v215;
        dispatch_async(v224, block);
      }
LABEL_136:
      os_activity_scope_leave(&state);
      return;
    default:
      uint64_t v116 = 0;
      goto LABEL_121;
  }
}

void sub_18B102548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state)
{
}

uint64_t sub_18B1025C0(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(__CFString **)(a1 + 32);
    id v5 = @" with error: ";
    if (!v4)
    {
      id v5 = &stru_1ED7F5C98;
      uint64_t v4 = &stru_1ED7F5C98;
    }
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_debug_impl(&dword_18AF10000, v2, OS_LOG_TYPE_DEBUG, "On callback queue for streaming asset append completion%{public}@%@", (uint8_t *)&v6, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_18B102810(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_osActivity(*(void **)(a1 + 32), a2, a3, a4, 0, 0);
  int v6 = v5;
  if (v5)
  {
    os_activity_scope_enter(v5, &v42);
  }
  else
  {
    uint64_t v7 = _os_activity_create(&dword_18AF10000, "client/streaming-asset-abort", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &v42);
  }
  objc_msgSend_setCurrentAppendCancelled_(*(void **)(a1 + 32), v8, 1, v9);
  uint64_t v13 = objc_msgSend_dataTask(*(void **)(a1 + 32), v10, v11, v12);
  BOOL v14 = v13 == 0;

  if (v14)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v33 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      uint64_t v34 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v44 = v34;
      _os_log_impl(&dword_18AF10000, v33, OS_LOG_TYPE_INFO, "Trying to abort a streaming asset append with no data task %@", buf, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int v15 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v44 = v40;
      _os_log_debug_impl(&dword_18AF10000, v15, OS_LOG_TYPE_DEBUG, "Aborting streaming asset append %@", buf, 0xCu);
    }
    uint64_t v19 = objc_msgSend_dataTask(*(void **)(a1 + 32), v16, v17, v18);
    BOOL v23 = objc_msgSend_state(v19, v20, v21, v22) == 0;

    if (v23)
    {
      char v35 = objc_msgSend_dataTask(*(void **)(a1 + 32), v24, v25, v26);
      objc_msgSend_cancel(v35, v36, v37, v38);

      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v39 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v44 = v41;
        _os_log_debug_impl(&dword_18AF10000, v39, OS_LOG_TYPE_DEBUG, "Did cancel data task for %@", buf, 0xCu);
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v27 = (id)ck_log_facility_ck;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = objc_msgSend_dataTask(*(void **)(a1 + 32), v28, v29, v30);
        uint64_t v32 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v44 = v31;
        __int16 v45 = 2112;
        uint64_t v46 = v32;
        _os_log_impl(&dword_18AF10000, v27, OS_LOG_TYPE_INFO, "Trying to cancel a data task that isn't running %@ for %@", buf, 0x16u);
      }
    }
  }
  os_activity_scope_leave(&v42);
}

void sub_18B102B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CKCodeRecordTransportReadFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = (int *)MEMORY[0x1E4F940E8];
  int v6 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v7 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v7))
      {
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v5;
          unint64_t v14 = *(void *)(a2 + v13);
          if (v14 == -1 || v14 >= *(void *)(a2 + *v6)) {
            break;
          }
          char v15 = *(unsigned char *)(*(void *)(a2 + *v9) + v14);
          *(void *)(a2 + v13) = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0) {
            goto LABEL_12;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v17 = *(unsigned __int8 *)(a2 + *v7);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v7) = 1;
LABEL_12:
        int v17 = *(unsigned __int8 *)(a2 + *v7);
        if (*(unsigned char *)(a2 + *v7)) {
          unint64_t v12 = 0;
        }
LABEL_14:
        uint64_t v18 = v12 & 7;
        if (v17) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v18 == 4;
        }
        if (!v19)
        {
          uint64_t v20 = (const char *)(v12 >> 3);
          switch((v12 >> 3))
          {
            case 0u:
              unsigned int v21 = 0;
              do
              {
                uint64_t v22 = *v5;
                unint64_t v23 = *(void *)(a2 + v22);
                if (v23 == -1 || v23 >= *(void *)(a2 + *v6))
                {
                  *(unsigned char *)(a2 + *v7) = 1;
                  goto LABEL_32;
                }
                unint64_t v24 = v23 + 1;
                int v25 = *(char *)(*(void *)(a2 + *v9) + v23);
                *(void *)(a2 + v22) = v24;
                if ((v25 & 0x80000000) == 0) {
                  break;
                }
              }
              while (v21++ <= 8);
              goto LABEL_32;
            case 1u:
              objc_msgSend_clearOneofValuesForContents((void *)a1, v20, v18, a4);
              *(unsigned char *)(a1 + 40) |= 1u;
              *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x3B0], 8) = 1;
              uint64_t v28 = PBReaderReadData();
              uint64_t v29 = 24;
              goto LABEL_31;
            case 2u:
              objc_msgSend_clearOneofValuesForContents((void *)a1, v20, v18, a4);
              *(unsigned char *)(a1 + 40) |= 1u;
              *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x3B0], 8) = 2;
              uint64_t v28 = PBReaderReadData();
              uint64_t v29 = 32;
              goto LABEL_31;
            case 3u:
              uint64_t v28 = PBReaderReadData();
              uint64_t v29 = 16;
LABEL_31:
              uint64_t v30 = *(void **)(a1 + v29);
              *(void *)(a1 + v29) = v28;

              goto LABEL_32;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_32:
              if (*(void *)(a2 + *v5) >= *(void *)(a2 + *v6)) {
                return *(unsigned char *)(a2 + *v7) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v7) == 0;
}

void *sub_18B103EE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1040C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1040D8(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

id sub_18B1056FC(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    a1 = objc_opt_new();
    objc_msgSend_appendString_(a1, v4, @"{ ", v5);
    uint64_t v9 = objc_msgSend_keyEnumerator(v3, v6, v7, v8);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v23, (uint64_t)v27, 16);
    if (v11)
    {
      uint64_t v14 = v11;
      uint64_t v15 = *(void *)v24;
      char v16 = 1;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v9);
          }
          uint64_t v18 = *(void *)(*((void *)&v23 + 1) + 8 * i);
          if ((v16 & 1) == 0) {
            objc_msgSend_appendString_(a1, v12, @", ", v13);
          }
          BOOL v19 = objc_msgSend_objectForKeyedSubscript_(v3, v12, v18, v13);
          objc_msgSend_appendFormat_(a1, v20, @"%@:%@", v21, v18, v19);

          char v16 = 0;
        }
        uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v23, (uint64_t)v27, 16);
        char v16 = 0;
      }
      while (v14);
    }
    objc_msgSend_appendString_(a1, v12, @" }", v13);
  }

  return a1;
}

void *sub_18B106578(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B106758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B106770(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B1068FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B106ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B106AF4(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B106C80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B106E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B106E78(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B107004(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1071E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1071FC(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B107388(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 552) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 552);
    *(void *)(v8 + 552) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B107568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B107580(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 552));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B10A1AC(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (!v8)
  {
    char v35 = [CKException alloc];
    id v37 = (id)objc_msgSend_initWithName_format_(v35, v36, *MEMORY[0x1E4F1C3C8], @"Container cannot be nil");
    objc_exception_throw(v37);
  }
  uint64_t v14 = v10;
  if (!v9)
  {
    objc_msgSend_standardOptions(CKAllowedSharingOptions, v11, v12, v13);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v15 = objc_msgSend_containerID(v8, v11, v12, v13);
  unint64_t v19 = objc_msgSend_specialContainerType(v15, v16, v17, v18);
  if (v19 <= 0x19 && ((1 << v19) & 0x2200010) != 0)
  {

    objc_msgSend_setSupportAllowingAddedParticipantsToInviteOthers_(v9, v20, 1, v21);
  }
  else
  {
  }
  uint64_t v22 = CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(v8);
  uint64_t v23 = objc_opt_class();
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 3221225472;
  v45[2] = sub_18B10A454;
  v45[3] = &unk_1E5464A68;
  id v24 = v9;
  id v46 = v24;
  objc_msgSend_registerObjectOfClass_visibility_loadHandler_(a1, v25, v23, 0, v45);
  uint64_t v26 = objc_opt_class();
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = sub_18B10A488;
  v43[3] = &unk_1E5464A68;
  id v27 = v22;
  id v44 = v27;
  objc_msgSend_registerObjectOfClass_visibility_loadHandler_(a1, v28, v26, 0, v43);
  uint64_t v29 = objc_opt_class();
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  void v38[2] = sub_18B10A4BC;
  v38[3] = &unk_1E5464AB8;
  id v39 = v8;
  id v40 = v27;
  id v41 = v24;
  id v42 = v14;
  id v30 = v24;
  id v31 = v27;
  id v32 = v8;
  id v33 = v14;
  objc_msgSend_registerObjectOfClass_visibility_loadHandler_(a1, v34, v29, 0, v38);
}

uint64_t sub_18B10A454(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_18B10A488(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_18B10A4BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 56);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_18B10A5AC;
  v8[3] = &unk_1E5464A90;
  id v9 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  uint64_t v5 = *(void (**)(uint64_t, void *))(v4 + 16);
  id v6 = v3;
  v5(v4, v8);

  return 0;
}

void sub_18B10A5AC(void *a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if (v11 && a1[4])
  {
    id v6 = [CKPreSharingContext alloc];
    id v8 = objc_msgSend_initWithShare_containerSetupInfo_allowedOptions_(v6, v7, (uint64_t)v11, a1[5], a1[6]);
    id v9 = *(void (**)(void))(a1[7] + 16);
  }
  else
  {
    uint64_t v10 = a1[7];
    id v8 = CKXPCSuitableError(v5);
    id v9 = *(void (**)(void))(v10 + 16);
  }
  v9();
}

void sub_18B10A67C(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (!v8 || !v9)
  {
    id v37 = [CKException alloc];
    id v39 = (id)objc_msgSend_initWithName_format_(v37, v38, *MEMORY[0x1E4F1C3C8], @"Non-nil share and container are required");
    objc_exception_throw(v39);
  }
  uint64_t v14 = v10;
  if (!v10)
  {
    uint64_t v14 = objc_msgSend_standardOptions(CKAllowedSharingOptions, v11, v12, v13);
  }
  uint64_t v15 = objc_msgSend_containerID(v9, v11, v12, v13);
  unint64_t v19 = objc_msgSend_specialContainerType(v15, v16, v17, v18);
  if (v19 <= 0x19 && ((1 << v19) & 0x2200010) != 0)
  {

    objc_msgSend_setSupportAllowingAddedParticipantsToInviteOthers_(v14, v20, 1, v21);
  }
  else
  {
  }
  uint64_t v22 = objc_opt_class();
  id v24 = objc_msgSend_resolvedOptionsFromOptions_forExistingShare_(v22, v23, (uint64_t)v14, (uint64_t)v8);

  long long v25 = CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(v9);
  uint64_t v26 = objc_opt_class();
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  v46[2] = sub_18B10A938;
  v46[3] = &unk_1E5464A68;
  id v27 = v24;
  id v47 = v27;
  objc_msgSend_registerObjectOfClass_visibility_loadHandler_(a1, v28, v26, 0, v46);
  uint64_t v29 = objc_opt_class();
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 3221225472;
  void v44[2] = sub_18B10A96C;
  v44[3] = &unk_1E5464A68;
  id v30 = v25;
  id v45 = v30;
  objc_msgSend_registerObjectOfClass_visibility_loadHandler_(a1, v31, v29, 0, v44);
  uint64_t v32 = objc_opt_class();
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 3221225472;
  void v40[2] = sub_18B10A9A0;
  v40[3] = &unk_1E5464AE0;
  id v41 = v8;
  id v42 = v30;
  id v43 = v27;
  id v33 = v27;
  id v34 = v30;
  id v35 = v8;
  objc_msgSend_registerObjectOfClass_visibility_loadHandler_(a1, v36, v32, 0, v40);
}

uint64_t sub_18B10A938(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_18B10A96C(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_18B10A9A0(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [CKPostSharingContext alloc];
  id v6 = objc_msgSend_initWithShare_containerSetupInfo_allowedOptions_(v4, v5, a1[4], a1[5], a1[6]);
  v3[2](v3, v6, 0);

  return 0;
}

void sub_18B10C3BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18B10CA30(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = objc_msgSend_numberOfArguments(a1, a2, a3, a4);
  while (--v8 >= 2)
  {
    id v9 = objc_msgSend__signatureForBlockAtArgumentIndex_(a1, v6, v8, v7);
    uint64_t v13 = v9;
    if (v9)
    {
      uint64_t v15 = objc_msgSend_numberOfArguments(v9, v10, v11, v12) - 1;
      do
      {
        BOOL v4 = v15 > 0;
        uint64_t v17 = v15 - 1;
        if (v15 < 1) {
          break;
        }
        uint64_t v18 = objc_msgSend__classForObjectAtArgumentIndex_(v13, v14, v15, v16);
        uint64_t v19 = objc_opt_class();
        int isSubclassOfClass = objc_msgSend_isSubclassOfClass_(v18, v20, v19, v21);
        uint64_t v15 = v17;
      }
      while (!isSubclassOfClass);
    }

    if (v13) {
      return v4;
    }
  }
  return 1;
}

id CKExtendedMethodSignatureForProtocolSelector(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t MethodTypeEncoding = _protocol_getMethodTypeEncoding();
  if (!MethodTypeEncoding
    || (objc_msgSend_signatureWithObjCTypes_(MEMORY[0x1E4F1CA38], v5, MethodTypeEncoding, v6),
        (uint64_t v7 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    unsigned int outCount = 0;
    uint64_t v8 = protocol_copyProtocolList(v3, &outCount);
    id v9 = v8;
    if (outCount)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = CKExtendedMethodSignatureForProtocolSelector(v9[v10], a2);
      }
      while (++v10 < (unint64_t)outCount && v11 == 0);
      uint64_t v13 = (void *)v11;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v7 = 0;
      if (!v8) {
        goto LABEL_12;
      }
    }
    free(v9);
    uint64_t v7 = v13;
  }
LABEL_12:

  return v7;
}

id CKSelectorAndSignaturesIncludingParentProtocols(void *a1, int a2)
{
  id v3 = a1;
  BOOL v4 = objc_opt_new();
  unsigned int outCount = 0;
  id v5 = protocol_copyMethodDescriptionList(v3, 1, 1, &outCount);
  uint64_t v6 = v5;
  if (outCount)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)v5;
    do
    {
      id v9 = (const char *)*v8;
      uint64_t v10 = CKExtendedMethodSignatureForProtocolSelector(v3, *v8);
      if (v10)
      {
        uint64_t v11 = [CKTuple2 alloc];
        uint64_t v12 = NSStringFromSelector(v9);
        uint64_t v14 = objc_msgSend_initWithObject1_object2_(v11, v13, (uint64_t)v12, (uint64_t)v10);
        objc_msgSend_addObject_(v4, v15, (uint64_t)v14, v16);
      }
      ++v7;
      v8 += 2;
    }
    while (v7 < outCount);
  }
  else if (!v5)
  {
    goto LABEL_9;
  }
  free(v6);
LABEL_9:
  if (!a2) {
    goto LABEL_16;
  }
  uint64_t v17 = protocol_copyProtocolList(v3, &outCount);
  uint64_t v18 = v17;
  if (outCount)
  {
    for (unint64_t i = 0; i < outCount; ++i)
    {
      uint64_t v20 = CKSelectorAndSignaturesIncludingParentProtocols(v18[i], 1);
      objc_msgSend_addObjectsFromArray_(v4, v21, (uint64_t)v20, v22);
    }
  }
  else if (!v17)
  {
    goto LABEL_16;
  }
  free(v18);
LABEL_16:

  return v4;
}

void sub_18B10CD70(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v62 = v6;
  unint64_t v7 = a4;
  uint64_t v11 = objc_msgSend_methodSignature(a1, v8, v9, v10);
  uint64_t v15 = objc_msgSend_numberOfArguments(v11, v12, v13, v14);
  while (--v15 >= 2)
  {
    id v16 = v11;
    ArgumentTypeAtIndex = (const char *)objc_msgSend_getArgumentTypeAtIndex_(v16, v17, v15, v18);
    if (!strncmp("@?", ArgumentTypeAtIndex, 2uLL))
    {
      aBlocuint64_t k = 0;
      objc_msgSend_getArgument_atIndex_(a1, v20, (uint64_t)&aBlock, v15);
      _Block_signature(aBlock);
      uint64_t v21 = aBlock;
      uint64_t v25 = objc_msgSend_selector(a1, v22, v23, v24);
      os_log_t log = v7;
      uint64_t v60 = CKExtendedMethodSignatureForProtocolSelector(v7, v25);
      uint64_t v28 = objc_msgSend__signatureForBlockAtArgumentIndex_(v60, v26, v15, v27);
      id v31 = objc_msgSend_invocationWithMethodSignature_(MEMORY[0x1E4F1CA18], v29, (uint64_t)v28, v30);
      objc_msgSend_retainArguments(v31, v32, v33, v34);
      id v35 = v21;
      objc_msgSend_setTarget_(v31, v36, (uint64_t)v21, v37);
      uint64_t v44 = objc_msgSend_numberOfArguments(v28, v38, v39, v40);
      while (--v44 >= 1)
      {
        id v45 = objc_msgSend__classForObjectAtArgumentIndex_(v28, v41, v44, v43);
        uint64_t v46 = objc_opt_class();
        if (objc_msgSend_isSubclassOfClass_(v45, v47, v46, v48))
        {
          objc_msgSend_setArgument_atIndex_(v31, v41, (uint64_t)&v62, v44);
LABEL_13:
          objc_msgSend_invoke(v31, v41, v42, v43);
          uint64_t v49 = v35;
          unint64_t v7 = log;
          goto LABEL_14;
        }
      }
      if (!v6) {
        goto LABEL_13;
      }
      uint64_t v49 = v35;
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      unint64_t v7 = log;
      uint64_t v50 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        loga = v50;
        uint64_t v51 = NSStringFromProtocol((Protocol *)v7);
        uint64_t v55 = (const char *)objc_msgSend_selector(a1, v52, v53, v54);
        uint64_t v56 = NSStringFromSelector(v55);
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v51;
        __int16 v64 = 2114;
        uint64_t v65 = v56;
        __int16 v66 = 2112;
        id v67 = v6;
        _os_log_error_impl(&dword_18AF10000, loga, OS_LOG_TYPE_ERROR, "Asked to invoke reply block of -[%{public}@ %{public}@] with an error, but that reply block doesn't take an error.  Dropping this invocation on the floor.  Error: %@", buf, 0x20u);
      }
LABEL_14:
      *(void *)buf = __NSMakeSpecialForwardingCaptureBlock();
      objc_msgSend_setArgument_atIndex_(a1, v57, (uint64_t)buf, v15);

      break;
    }
  }
}

void sub_18B10D074(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  id v31 = a5;
  uint64_t v13 = a6;
  uint64_t v14 = a7;
  uint64_t v18 = objc_msgSend_methodSignature(a1, v15, v16, v17);
  if (a3 < a3 + a4)
  {
    do
    {
      id v19 = v18;
      ArgumentTypeAtIndex = (char *)objc_msgSend_getArgumentTypeAtIndex_(v19, v20, a3, v21);
      uint64_t v26 = ArgumentTypeAtIndex;
      int v27 = *ArgumentTypeAtIndex;
      if (v27 > 82)
      {
        switch(*ArgumentTypeAtIndex)
        {
          case 'c':
LABEL_10:
            if (v31)
            {
              uint64_t v28 = (void (*)(void))v31[2];
              goto LABEL_19;
            }
            break;
          case 'd':
          case 'l':
          case 'q':
LABEL_14:
            if (v31)
            {
              uint64_t v28 = (void (*)(void))v31[2];
              goto LABEL_19;
            }
            break;
          case 'e':
          case 'g':
          case 'h':
          case 'j':
          case 'k':
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'r':
            goto LABEL_22;
          case 'f':
          case 'i':
LABEL_8:
            if (!v31) {
              break;
            }
            uint64_t v28 = (void (*)(void))v31[2];
            goto LABEL_19;
          case 's':
            goto LABEL_17;
          default:
            if (v27 == 83)
            {
LABEL_17:
              if (v31)
              {
                uint64_t v28 = (void (*)(void))v31[2];
LABEL_19:
                v28();
              }
            }
            else
            {
LABEL_22:
              uint64_t v29 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v23, v24, v25);
              objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v29, v30, a2, (uint64_t)a1, @"CKInvocationUtilities.m", 181, @"Unsuitable argument type %s", v26);
            }
            break;
        }
      }
      else
      {
        switch(*ArgumentTypeAtIndex)
        {
          case '@':
            if (ArgumentTypeAtIndex[1] == 63)
            {
              if (v14) {
                v14[2](v14, a3);
              }
            }
            else if (v13)
            {
              v13[2](v13, a3);
            }
            break;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_22;
          case 'B':
          case 'C':
            goto LABEL_10;
          case 'I':
            goto LABEL_8;
          default:
            if (v27 == 76 || v27 == 81) {
              goto LABEL_14;
            }
            goto LABEL_22;
        }
      }
      ++a3;
      --a4;
    }
    while (a4);
  }
}

id sub_18B10D334(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v53 = a4;
  uint64_t v9 = objc_msgSend_callbackProxyEndpoint(v5, v6, v7, v8);
  uint64_t v13 = objc_msgSend_interface(v9, v10, v11, v12);
  uint64_t v17 = objc_msgSend_protocol(v13, v14, v15, v16);

  objc_msgSend_ckOperationClassName(v5, v18, v19, v20);
  uint64_t v21 = (NSString *)objc_claimAutoreleasedReturnValue();
  Class v22 = NSClassFromString(v21);

  if (v22)
  {
    uint64_t v26 = objc_msgSend_daemonCallbackCompletionSelector(v22, v23, v24, v25);
    int v27 = CKExtendedMethodSignatureForProtocolSelector(v17, v26);
    uint64_t v30 = objc_msgSend_invocationWithMethodSignature_(MEMORY[0x1E4F1CA18], v28, (uint64_t)v27, v29);
    objc_msgSend_retainArguments(v30, v31, v32, v33);
    objc_msgSend_setSelector_(v30, v34, v26, v35);
    uint64_t v41 = objc_msgSend_numberOfArguments(v27, v36, v37, v38);
    while (--v41 >= 2)
    {
      uint64_t v42 = objc_msgSend__classForObjectAtArgumentIndex_(v27, v39, v41, v40);
      uint64_t v43 = objc_opt_class();
      if (objc_msgSend_isSubclassOfClass_(v42, v44, v43, v45))
      {
        objc_msgSend_setArgument_atIndex_(v30, v39, (uint64_t)&v53, v41);
        break;
      }
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v46 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      uint64_t v48 = v46;
      uint64_t v52 = objc_msgSend_ckOperationClassName(v5, v49, v50, v51);
      *(_DWORD *)buf = 138412290;
      uint64_t v55 = v52;
      _os_log_fault_impl(&dword_18AF10000, v48, OS_LOG_TYPE_FAULT, "Class %@ couldn't be created in the daemon", buf, 0xCu);
    }
    uint64_t v30 = 0;
  }

  return v30;
}

uint64_t CKDatabaseScopeFromString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 1;
  if (objc_msgSend_compare_options_(v1, v3, @"Public", 1))
  {
    if (objc_msgSend_compare_options_(v1, v4, @"Private", 1))
    {
      if (objc_msgSend_compare_options_(v1, v5, @"Shared", 1)) {
        uint64_t v2 = 4 * (objc_msgSend_compare_options_(v1, v6, @"Organization", 1) == 0);
      }
      else {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }

  return v2;
}

uint64_t CKIsValidOperationForScope()
{
  return 1;
}

void sub_18B10DAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B10DACC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while counting asset cache items, check your syslog.  Error %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_18B10DBAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v8 = objc_msgSend_scope(v3, v5, v6, v7);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  id v10[2] = sub_18B10DC50;
  v10[3] = &unk_1E5464B28;
  void v10[4] = *(void *)(a1 + 40);
  objc_msgSend_countAssetCacheItemsWithDatabaseScope_completionHandler_(v4, v9, v8, (uint64_t)v10);
}

void sub_18B10DC50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_error_impl(&dword_18AF10000, v6, OS_LOG_TYPE_ERROR, "Error while counting asset cache items, check your syslog %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
}

void sub_18B10DDF4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing asset cache, check your syslog", v4, 2u);
  }
}

void sub_18B10DE9C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v8 = a2;
  uint64_t v6 = objc_msgSend_scope(v2, v3, v4, v5);
  objc_msgSend_clearAssetCacheWithDatabaseScope_completionHandler_(v8, v7, v6, (uint64_t)&unk_1ED7F00B8);
}

void sub_18B10DEFC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v3 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error while clearing record cache, check your syslog %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_18B10E084(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while showing asset cache, check your syslog", v4, 2u);
  }
}

void sub_18B10E12C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v9 = a2;
  uint64_t v6 = objc_msgSend_scope(v2, v3, v4, v5);
  objc_msgSend_showAssetCacheWithDatabaseScope_(v9, v7, v6, v8);
}

void sub_18B10E228(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing record cache, check your syslog", v4, 2u);
  }
}

void sub_18B10E2D0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v9 = a2;
  uint64_t v6 = objc_msgSend_scope(v2, v3, v4, v5);
  objc_msgSend_clearRecordCacheWithDatabaseScope_(v9, v7, v6, v8);
}

void sub_18B10E444(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_error_impl(&dword_18AF10000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing auth tokens for record with id %@, check your syslog", (uint8_t *)&v6, 0xCu);
  }
}

void sub_18B10E534(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v9 = a2;
  uint64_t v7 = objc_msgSend_scope(v3, v4, v5, v6);
  objc_msgSend_clearAuthTokensWithRecordID_databaseScope_(v9, v8, v2, v7);
}

void sub_18B10E654(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while getting Record PCS diagnostics for zones. Check your syslog", v4, 2u);
  }
}

uint64_t sub_18B10E6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_getRecordPCSDiagnosticsForZonesWithCompletionHandler_, *(void *)(a1 + 32), a4);
}

void sub_18B10E7DC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing record cache, check your syslog", v4, 2u);
  }
}

void sub_18B10E884(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = (void *)a1[4];
  id v10 = a2;
  uint64_t v8 = objc_msgSend_scope(v4, v5, v6, v7);
  objc_msgSend_clearCachesWithOptions_databaseScope_completionHandler_(v10, v9, v3, v8, a1[5]);
}

void sub_18B10E9E4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing record cache, check your syslog", v4, 2u);
  }
}

void sub_18B10EA8C(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  id v10 = a2;
  uint64_t v8 = objc_msgSend_scope(v4, v5, v6, v7);
  objc_msgSend_clearCachesForRecordWithRecordID_databaseScope_completionHandler_(v10, v9, v3, v8, a1[6]);
}

void sub_18B10EBE8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing record cache, check your syslog", v4, 2u);
  }
}

void sub_18B10EC90(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  id v10 = a2;
  uint64_t v8 = objc_msgSend_scope(v4, v5, v6, v7);
  objc_msgSend_clearCachesForZoneWithZoneID_databaseScope_completionHandler_(v10, v9, v3, v8, a1[6]);
}

void sub_18B10EDFC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while fetching zone PCS from cache, check your syslog", v4, 2u);
  }
}

void sub_18B10EEA4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v10 = a2;
  uint64_t v8 = objc_msgSend_scope(v4, v5, v6, v7);
  objc_msgSend_fetchPCSFromCacheForZoneWithZoneID_databaseScope_localCacheOnly_completionHandler_(v10, v9, v3, v8, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
}

void sub_18B10F004(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while fetching share PCS from cache, check your syslog", v4, 2u);
  }
}

void sub_18B10F0AC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  id v10 = a2;
  uint64_t v8 = objc_msgSend_scope(v4, v5, v6, v7);
  objc_msgSend_fetchPCSFromCacheForShareWithRecordID_databaseScope_completionHandler_(v10, v9, v3, v8, a1[6]);
}

void sub_18B10F208(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while fetching record PCS from cache, check your syslog", v4, 2u);
  }
}

void sub_18B10F2B0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  id v10 = a2;
  uint64_t v8 = objc_msgSend_scope(v4, v5, v6, v7);
  objc_msgSend_fetchPCSFromCacheForRecordWithRecordID_databaseScope_completionHandler_(v10, v9, v3, v8, a1[6]);
}

void sub_18B10F37C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while fetching zone PCS from cache, check your syslog", v4, 2u);
  }
}

uint64_t sub_18B10F424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_clearInvalidatedPCSCacheEntriesIfNeeded, a3, a4);
}

void sub_18B10F8E4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v10 = objc_msgSend_allValues(v5, v7, v8, v9);
  unint64_t v14 = objc_msgSend_count(v10, v11, v12, v13);

  if (v14 >= 2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v18 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v29 = v18;
      uint64_t v33 = objc_msgSend_allValues(v5, v30, v31, v32);
      int v34 = 138412546;
      uint64_t v35 = v28;
      __int16 v36 = 2112;
      uint64_t v37 = v33;
      _os_log_error_impl(&dword_18AF10000, v29, OS_LOG_TYPE_ERROR, "Fetching record %@, got too many results %@", (uint8_t *)&v34, 0x16u);
    }
  }
  uint64_t v19 = *(void *)(a1 + 40);
  if (v19)
  {
    uint64_t v20 = objc_msgSend_allValues(v5, v15, v16, v17);
    uint64_t v24 = objc_msgSend_firstObject(v20, v21, v22, v23);
    int v27 = objc_msgSend_CKItemErrorForID_(v6, v25, *(void *)(a1 + 32), v26);
    (*(void (**)(uint64_t, void *, void *))(v19 + 16))(v19, v24, v27);
  }
}

void sub_18B10FCA8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  if ((unint64_t)objc_msgSend_count(v6, v8, v9, v10) >= 2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    unint64_t v14 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void **)(a1 + 32);
      uint64_t v25 = v14;
      uint64_t v29 = objc_msgSend_recordID(v24, v26, v27, v28);
      int v30 = 138412546;
      uint64_t v31 = v29;
      __int16 v32 = 2112;
      id v33 = v6;
      _os_log_error_impl(&dword_18AF10000, v25, OS_LOG_TYPE_ERROR, "Saving record %@, got too many results %@", (uint8_t *)&v30, 0x16u);
    }
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15)
  {
    uint64_t v16 = objc_msgSend_firstObject(v6, v11, v12, v13);
    uint64_t v20 = objc_msgSend_recordID(*(void **)(a1 + 32), v17, v18, v19);
    uint64_t v23 = objc_msgSend_CKItemErrorForID_(v7, v21, (uint64_t)v20, v22);
    (*(void (**)(uint64_t, void *, void *))(v15 + 16))(v15, v16, v23);
  }
}

void sub_18B11005C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if ((unint64_t)objc_msgSend_count(v6, v8, v9, v10) >= 2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    unint64_t v14 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      int v21 = 138412546;
      uint64_t v22 = v20;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_error_impl(&dword_18AF10000, v14, OS_LOG_TYPE_ERROR, "Deleting record with id %@, got too many results %@", (uint8_t *)&v21, 0x16u);
    }
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15)
  {
    uint64_t v16 = objc_msgSend_firstObject(v6, v11, v12, v13);
    uint64_t v19 = objc_msgSend_CKItemErrorForID_(v7, v17, *(void *)(a1 + 32), v18);
    (*(void (**)(uint64_t, void *, void *))(v15 + 16))(v15, v16, v19);
  }
}

void sub_18B110410(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    id v9 = *(id *)(a1 + 32);
    objc_sync_enter(v9);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v10, (uint64_t)v7, v11);
    objc_sync_exit(v9);
  }
}

void sub_18B1104A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1104BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_18B1105D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    objc_msgSend_allValues(a2, v6, v7, v8);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v9, v5);
  }
}

void sub_18B110874(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = a3;
    objc_msgSend_objectForKeyedSubscript_(a2, v8, v6, v9);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    id v12 = objc_msgSend_CKItemErrorForID_(v7, v10, *(void *)(a1 + 32), v11);

    (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v13, v12);
  }
}

void sub_18B110B48(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    id v7 = a4;
    objc_msgSend_firstObject(a2, v8, v9, v10);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    unint64_t v14 = objc_msgSend_zoneID(*(void **)(a1 + 32), v11, v12, v13);
    uint64_t v17 = objc_msgSend_CKItemErrorForID_(v7, v15, (uint64_t)v14, v16);

    (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v18, v17);
  }
}

void sub_18B110E1C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    id v7 = a4;
    objc_msgSend_firstObject(a3, v8, v9, v10);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = objc_msgSend_CKItemErrorForID_(v7, v11, *(void *)(a1 + 32), v12);

    (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v14, v13);
  }
}

void sub_18B1110DC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  if ((unint64_t)objc_msgSend_count(v6, v8, v9, v10) >= 2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v14 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      int v25 = 138412546;
      uint64_t v26 = v24;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_error_impl(&dword_18AF10000, v14, OS_LOG_TYPE_ERROR, "Saving subscription %@, got too many results %@", (uint8_t *)&v25, 0x16u);
    }
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15)
  {
    uint64_t v16 = objc_msgSend_firstObject(v6, v11, v12, v13);
    uint64_t v20 = objc_msgSend_subscriptionID(*(void **)(a1 + 32), v17, v18, v19);
    __int16 v23 = objc_msgSend_CKItemErrorForID_(v7, v21, (uint64_t)v20, v22);
    (*(void (**)(uint64_t, void *, void *))(v15 + 16))(v15, v16, v23);
  }
}

void sub_18B111580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B1115A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  unint64_t v11 = a4;
  unint64_t v12 = a5;
  uint64_t v13 = (void *)v12;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (!(v11 | v12))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v14 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v17) = 0;
        _os_log_error_impl(&dword_18AF10000, v14, OS_LOG_TYPE_ERROR, "Handler called wihout both result and error.", (uint8_t *)&v17, 2u);
      }
      uint64_t v13 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v15, @"CKInternalErrorDomain", 1000, @"Unknown failure.");
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v16 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v17 = 138412290;
      id v18 = v9;
      _os_log_impl(&dword_18AF10000, v16, OS_LOG_TYPE_INFO, "Warn: Not invoking completion handler for zoneID: %@", (uint8_t *)&v17, 0xCu);
    }
  }
}

void sub_18B1117A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v9 = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    if (v5)
    {
      id v10 = objc_msgSend_zoneID(*(void **)(a1 + 32), v6, v7, v8);
      uint64_t v13 = objc_msgSend_objectForKey_(v5, v11, (uint64_t)v10, v12);

      if (v13)
      {
        uint64_t v16 = objc_msgSend_objectForKey_(v13, v14, *(void *)(a1 + 40), v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (!(v9 | v16))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      int v17 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v19 = 0;
        _os_log_error_impl(&dword_18AF10000, v17, OS_LOG_TYPE_ERROR, "Handler called wihout both result and error.", v19, 2u);
      }
      uint64_t v9 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v18, @"CKInternalErrorDomain", 1000, @"Unknown failure.");
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
}

void sub_18B111B44(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if ((unint64_t)objc_msgSend_count(v6, v8, v9, v10) >= 2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v14 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      int v21 = 138412546;
      uint64_t v22 = v20;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_error_impl(&dword_18AF10000, v14, OS_LOG_TYPE_ERROR, "Deleting subscription %@, got too many results %@", (uint8_t *)&v21, 0x16u);
    }
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15)
  {
    uint64_t v16 = objc_msgSend_firstObject(v6, v11, v12, v13);
    uint64_t v19 = objc_msgSend_CKItemErrorForID_(v7, v17, *(void *)(a1 + 32), v18);
    (*(void (**)(uint64_t, void *, void *))(v15 + 16))(v15, v16, v19);
  }
}

void sub_18B111EC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if ((unint64_t)objc_msgSend_count(v5, v7, v8, v9) >= 2)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v12 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138412546;
      uint64_t v20 = v18;
      __int16 v21 = 2112;
      id v22 = v5;
      _os_log_error_impl(&dword_18AF10000, v12, OS_LOG_TYPE_ERROR, "Fetching subscription with id %@, got too many results %@", (uint8_t *)&v19, 0x16u);
    }
  }
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    id v14 = objc_msgSend_objectForKeyedSubscript_(v5, v10, *(void *)(a1 + 32), v11);
    int v17 = objc_msgSend_CKItemErrorForID_(v6, v15, *(void *)(a1 + 32), v16);
    (*(void (**)(uint64_t, void *, void *))(v13 + 16))(v13, v14, v17);
  }
}

void sub_18B11212C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    objc_msgSend_allValues(a2, v6, v7, v8);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v9, v5);
  }
}

void *sub_18B113098(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B113278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B113290(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B11341C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1135FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B113614(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B1154C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1155C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18B1156E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1158B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v12 != v13)
  {
  }
  _Unwind_Resume(a1);
}

void sub_18B1159A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B115AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B115C00(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_18B115DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B115EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B115FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B116010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B116190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1162EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B116408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1164E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B11656C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1168AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B1168D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addTimestamp_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

void sub_18B116B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_18B116B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = a3 + a2 - 1;
    id v5 = [CKDistributedTimestamp alloc];
    uint64_t v9 = objc_msgSend_identifier(*(void **)(a1 + 32), v6, v7, v8);
    id v13 = (id)objc_msgSend_initWithSiteIdentifier_clockValue_(v5, v10, (uint64_t)v9, v4);

    objc_msgSend_addTimestamp_(*(void **)(a1 + 40), v11, (uint64_t)v13, v12);
  }
}

void sub_18B116C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_18B116D38(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18B116E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B116E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B116EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B116FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B117004(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = objc_msgSend_siteIdentifier(a2, (const char *)a2, a3, (uint64_t)a4);
  int isEqual = objc_msgSend_isEqual_(v7, v8, *(void *)(a1 + 32), v9);

  if (isEqual)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_18B117074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B117114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1171FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18B117220(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  objc_msgSend_siteIdentifier(a2, (const char *)a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v4, v5, (uint64_t)v7, v6);
}

void sub_18B117278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1172D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B117400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B117448(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v22 = a2;
  unint64_t v9 = objc_msgSend_clockValue(v22, v6, v7, v8);
  uint64_t v10 = *(void **)(a1 + 32);
  id v14 = objc_msgSend_siteIdentifier(v22, v11, v12, v13);
  int v17 = objc_msgSend_timestampForSiteIdentifier_(v10, v15, (uint64_t)v14, v16);
  unint64_t v21 = objc_msgSend_clockValue(v17, v18, v19, v20);

  if (v9 > v21)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_18B1174FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1175AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B117708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B117800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18B117824(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  objc_msgSend_timestampAtIndex_(*(void **)(a1 + 40), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addTimestamp_(v4, v5, (uint64_t)v7, v6);
}

void sub_18B117878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1179E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B117A2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v23 = v3;
  uint64_t v8 = objc_msgSend_siteIdentifier(v3, v5, v6, v7);
  uint64_t v11 = objc_msgSend_timestampForSiteIdentifier_(v4, v9, (uint64_t)v8, v10);

  if (v11)
  {
    unint64_t v15 = objc_msgSend_clockValue(v23, v12, v13, v14);
    unint64_t v21 = objc_msgSend_clockValue(v11, v16, v17, v18);
    id v22 = *(void **)(a1 + 40);
    if (v15 >= v21) {
      objc_msgSend_addTimestamp_(v22, v19, (uint64_t)v11, v20);
    }
    else {
      objc_msgSend_addTimestamp_(v22, v19, (uint64_t)v23, v20);
    }
  }
}

void sub_18B117AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B117BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B117C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B117C90(uint64_t a1, void *a2)
{
  id v6 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= objc_msgSend_hash(v6, v3, v4, v5);
}

void sub_18B117CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B117E54(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_18B117EC0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v8 = objc_msgSend_siteIdentifier(a2, v5, v6, v7);
  uint64_t v12 = objc_msgSend_siteIdentifier(v4, v9, v10, v11);
  uint64_t v15 = objc_msgSend_CKCompare_(v8, v13, (uint64_t)v12, v14);

  return v15;
}

void sub_18B117F30(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18B117F5C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 32);
  id v18 = v5;
  uint64_t v10 = objc_msgSend_description(v5, v7, v8, v9);
  objc_msgSend_appendString_(v6, v11, (uint64_t)v10, v12);

  if (objc_msgSend_count(*(void **)(a1 + 40), v13, v14, v15) - 1 != a3) {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v16, @"|", v17);
  }
}

void sub_18B117FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B118074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_18B118288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B118468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B118480(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B11860C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1187EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B118804(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

id sub_18B119A1C(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_sharedManager(CKProcessScopedStateManager, v8, v9, v10);
  uint64_t v15 = objc_msgSend_untrustedEntitlements(v11, v12, v13, v14);
  BOOL v16 = sub_18AF2E5CC(v15);

  if (v16)
  {
    if (qword_1EB279CE8 != -1) {
      dispatch_once(&qword_1EB279CE8, &unk_1ED7EF3D8);
    }
    id v17 = a1;
    objc_sync_enter(v17);
    id v18 = [CKAPSMachServiceConnectionKey alloc];
    uint64_t v20 = objc_msgSend_initWithEnvironmentName_namedDelegatePort_(v18, v19, (uint64_t)v6, (uint64_t)v7);
    id v23 = objc_msgSend_objectForKeyedSubscript_((void *)qword_1EB279CD0, v21, (uint64_t)v20, v22);

    if (!v23)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v26 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        int v39 = 138543618;
        id v40 = v7;
        __int16 v41 = 2114;
        id v42 = v6;
        _os_log_debug_impl(&dword_18AF10000, v26, OS_LOG_TYPE_DEBUG, "Creating new singleton APSConnection on port %{public}@ with environment %{public}@", (uint8_t *)&v39, 0x16u);
      }
      id v27 = objc_alloc(MEMORY[0x1E4F4E1E8]);
      uint64_t v29 = objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(v27, v28, (uint64_t)v6, (uint64_t)v7, qword_1EB279CE0);
      int v30 = [CKAPSMachServiceConnectionDelegate alloc];
      __int16 v32 = objc_msgSend_initWithConnection_key_(v30, v31, (uint64_t)v29, (uint64_t)v20);
      objc_msgSend_setDelegate_(v29, v33, (uint64_t)v32, v34);
      objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1EB279CD0, v35, (uint64_t)v29, (uint64_t)v20);
      objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1EB279CD8, v36, (uint64_t)v32, (uint64_t)v20);
    }
    uint64_t v37 = objc_msgSend_objectForKeyedSubscript_((void *)qword_1EB279CD0, v24, (uint64_t)v20, v25);

    objc_sync_exit(v17);
  }
  else
  {
    uint64_t v37 = 0;
  }

  return v37;
}

void sub_18B119C90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B119CB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4);
  id v5 = (void *)qword_1EB279CD0;
  qword_1EB279CD0 = v4;

  uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v6, v7, v8);
  uint64_t v10 = (void *)qword_1EB279CD8;
  qword_1EB279CD8 = v9;

  uint64_t v13 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v11 = dispatch_queue_create("com.apple.cloudkit.apsconnection.machservice", v13);
  uint64_t v12 = (void *)qword_1EB279CE0;
  qword_1EB279CE0 = (uint64_t)v11;
}

id sub_18B11AB1C(id result, uint64_t a2)
{
  if (result)
  {
    v2.receiver = result;
    v2.super_class = (Class)CKContainerCallbackProxy;
    return objc_msgSendSuper2(&v2, sel_initWithWeakObject_callbackProtocol_, a2, &unk_1ED8513F0);
  }
  return result;
}

uint64_t CKOperationGroupTransferSizeForBytes(unint64_t a1)
{
  unint64_t v1 = HIDWORD(a1);
  uint64_t v2 = 6;
  unint64_t v3 = a1 >> 31;
  uint64_t v4 = 5;
  unint64_t v5 = a1 >> 30;
  uint64_t v6 = 4;
  unint64_t v7 = a1 >> 22;
  uint64_t v8 = 3;
  unint64_t v9 = a1 >> 21;
  BOOL v10 = a1 >> 20 == 0;
  uint64_t v11 = 1;
  if (!v10) {
    uint64_t v11 = 2;
  }
  if (v9 <= 4) {
    uint64_t v8 = v11;
  }
  if (v7 <= 0x18) {
    uint64_t v6 = v8;
  }
  if (!v5) {
    uint64_t v4 = v6;
  }
  if (v3 <= 4) {
    uint64_t v2 = v4;
  }
  if (v1 <= 0x18) {
    return v2;
  }
  else {
    return 7;
  }
}

void sub_18B11ACE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B11B1DC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  unint64_t v8 = objc_msgSend_unsignedIntegerValue(a3, v5, v6, v7);
  unint64_t v9 = NSString;
  isUplinuint64_t k = objc_msgSend_isUplink(v4, v10, v11, v12);
  unsigned int v17 = objc_msgSend_allowsCellularAccess(v4, v14, v15, v16);

  id v18 = CKStringForNetworkServiceType(v8);
  unint64_t v21 = objc_msgSend_stringWithFormat_(v9, v19, @"(uplink:%d, allowsCellularAccess:%d, ServiceType: %@)", v20, isUplink, v17, v18);

  return v21;
}

void sub_18B11BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_18B11BE10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B11BF88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B11C16C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CKAnyPredicateValidator *sub_18B11C908(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v13 = a1;
  if (!v13)
  {
    id v23 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v10, v11, v12);
    uint64_t v26 = objc_msgSend_stringWithUTF8String_(NSString, v24, (uint64_t)"id<CKObjectValidating> any(__strong id<CKObjectValidating>, ...)", v25);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v23, v27, (uint64_t)v26, @"CKPredicateValidatorConvenienceFunctions.m", 14, @"Invalid parameter not satisfying: %@", @"validator != nil");
  }
  uint64_t v14 = objc_msgSend_arrayWithObject_(MEMORY[0x1E4F1CA48], v10, (uint64_t)v13, v12);
  id v28 = (id *)&a10;
  id v15 = a9;
  if (v15)
  {
    id v18 = v15;
    do
    {
      objc_msgSend_addObject_(v14, v16, (uint64_t)v18, v17);
      uint64_t v19 = v28++;
      id v20 = *v19;

      id v18 = v20;
    }
    while (v20);
  }
  unint64_t v21 = objc_alloc_init(CKAnyPredicateValidator);
  sub_18B159D9C((uint64_t)v21, v14);

  return v21;
}

id sub_18B11CA40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v13 = a1;
  if (!v13)
  {
    uint64_t v26 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v10, v11, v12);
    uint64_t v29 = objc_msgSend_stringWithUTF8String_(NSString, v27, (uint64_t)"id<CKObjectValidating> all(__strong id<CKObjectValidating>, ...)", v28);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v26, v30, (uint64_t)v29, @"CKPredicateValidatorConvenienceFunctions.m", 33, @"Invalid parameter not satisfying: %@", @"validator != nil");
  }
  uint64_t v14 = objc_msgSend_arrayWithObject_(MEMORY[0x1E4F1CA48], v10, (uint64_t)v13, v12);
  uint64_t v31 = (id *)&a10;
  id v15 = a9;
  if (v15)
  {
    id v18 = v15;
    do
    {
      objc_msgSend_addObject_(v14, v16, (uint64_t)v18, v17);
      uint64_t v19 = v31++;
      id v20 = *v19;

      id v18 = v20;
    }
    while (v20);
  }
  unint64_t v21 = [CKAllPredicateValidator alloc];
  id v24 = objc_msgSend_initWithValidators_(v21, v22, (uint64_t)v14, v23);

  return v24;
}

id sub_18B11CB78(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [CKRecursivePredicateValidator alloc];
  unint64_t v5 = objc_msgSend_initWithValidator_(v2, v3, (uint64_t)v1, v4);

  return v5;
}

id sub_18B11CBD0()
{
  if (qword_1EB279CF8 != -1) {
    dispatch_once(&qword_1EB279CF8, &unk_1ED7EF418);
  }
  id v0 = (void *)qword_1EB279CF0;

  return v0;
}

uint64_t sub_18B11CC24()
{
  id v0 = [CKCompoundTypePredicateValidator alloc];
  uint64_t v3 = objc_msgSend_initWithType_(v0, v1, 1, v2);
  uint64_t v4 = qword_1EB279CF0;
  qword_1EB279CF0 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11CC68()
{
  if (qword_1EB279D08 != -1) {
    dispatch_once(&qword_1EB279D08, &unk_1ED7EF978);
  }
  id v0 = (void *)qword_1EB279D00;

  return v0;
}

uint64_t sub_18B11CCBC()
{
  id v0 = [CKCompoundTypePredicateValidator alloc];
  uint64_t v3 = objc_msgSend_initWithType_(v0, v1, 0, v2);
  uint64_t v4 = qword_1EB279D00;
  qword_1EB279D00 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

CKTruePredicateValidator *sub_18B11CD00()
{
  id v0 = objc_alloc_init(CKTruePredicateValidator);

  return v0;
}

id sub_18B11CD30(void *a1)
{
  uint64_t v2 = [CKCompoundSubpredicateValidator alloc];
  uint64_t v3 = sub_18B15E280([CKKindOfClassValidator alloc], a1);
  uint64_t v6 = objc_msgSend_initWithValidator_(v2, v4, (uint64_t)v3, v5);

  return v6;
}

id sub_18B11CDA0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [CKFlipFlopPredicateValidator alloc];
  uint64_t v5 = objc_msgSend_initWithValidator_(v2, v3, (uint64_t)v1, v4);

  return v5;
}

CKComparisonPredicateValidator *sub_18B11CDF8(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v16 = a5;
  if (v10)
  {
    if (v11) {
      goto LABEL_3;
    }
LABEL_14:
    __int16 v41 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v13, v14, v15);
    uint64_t v44 = objc_msgSend_stringWithUTF8String_(NSString, v42, (uint64_t)"id<CKObjectValidating> comparison(__strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>)", v43);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v41, v45, (uint64_t)v44, @"CKPredicateValidatorConvenienceFunctions.m", 93, @"Invalid parameter not satisfying: %@", @"op");

    if (v16) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  __int16 v36 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v13, v14, v15);
  int v39 = objc_msgSend_stringWithUTF8String_(NSString, v37, (uint64_t)"id<CKObjectValidating> comparison(__strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>)", v38);
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v36, v40, (uint64_t)v39, @"CKPredicateValidatorConvenienceFunctions.m", 92, @"Invalid parameter not satisfying: %@", @"lhs");

  if (!v11) {
    goto LABEL_14;
  }
LABEL_3:
  if (v16) {
    goto LABEL_4;
  }
LABEL_15:
  uint64_t v46 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v13, v14, v15);
  uint64_t v49 = objc_msgSend_stringWithUTF8String_(NSString, v47, (uint64_t)"id<CKObjectValidating> comparison(__strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>, __strong id<CKObjectValidating>)", v48);
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v46, v50, (uint64_t)v49, @"CKPredicateValidatorConvenienceFunctions.m", 94, @"Invalid parameter not satisfying: %@", @"rhs");

LABEL_4:
  uint64_t v17 = objc_alloc_init(CKComparisonPredicateValidator);
  id v20 = v17;
  if (v9)
  {
    objc_msgSend_setModifierValidator_(v17, v18, (uint64_t)v9, v19);
  }
  else
  {
    uint64_t v23 = sub_18B11D06C();
    objc_msgSend_setModifierValidator_(v20, v24, (uint64_t)v23, v25);
  }
  objc_msgSend_setLeftExpressionValidator_(v20, v21, (uint64_t)v10, v22);
  objc_msgSend_setOperatorValidator_(v20, v26, (uint64_t)v11, v27);
  if (v12)
  {
    objc_msgSend_setOptionsValidator_(v20, v28, (uint64_t)v12, v29);
  }
  else
  {
    __int16 v32 = sub_18B11D06C();
    objc_msgSend_setOptionsValidator_(v20, v33, (uint64_t)v32, v34);
  }
  objc_msgSend_setRightExpressionValidator_(v20, v30, (uint64_t)v16, v31);

  return v20;
}

id sub_18B11D06C()
{
  if (qword_1EB279E98 != -1) {
    dispatch_once(&qword_1EB279E98, &unk_1ED7EF7B8);
  }
  id v0 = (void *)qword_1EB279E90;

  return v0;
}

id sub_18B11D0C0()
{
  if (qword_1EB279D18 != -1) {
    dispatch_once(&qword_1EB279D18, &unk_1ED7EFE98);
  }
  id v0 = (void *)qword_1EB279D10;

  return v0;
}

uint64_t sub_18B11D114()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 4, v2);
  uint64_t v4 = qword_1EB279D10;
  qword_1EB279D10 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D158()
{
  if (qword_1EB279D28 != -1) {
    dispatch_once(&qword_1EB279D28, &unk_1ED7EFEF8);
  }
  id v0 = (void *)qword_1EB279D20;

  return v0;
}

uint64_t sub_18B11D1AC()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 5, v2);
  uint64_t v4 = qword_1EB279D20;
  qword_1EB279D20 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D1F0()
{
  if (qword_1EB279D38 != -1) {
    dispatch_once(&qword_1EB279D38, &unk_1ED7EFF78);
  }
  id v0 = (void *)qword_1EB279D30;

  return v0;
}

uint64_t sub_18B11D244()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 0, v2);
  uint64_t v4 = qword_1EB279D30;
  qword_1EB279D30 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D288()
{
  if (qword_1EB279D48 != -1) {
    dispatch_once(&qword_1EB279D48, &unk_1ED7F0038);
  }
  id v0 = (void *)qword_1EB279D40;

  return v0;
}

uint64_t sub_18B11D2DC()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 1, v2);
  uint64_t v4 = qword_1EB279D40;
  qword_1EB279D40 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D320()
{
  if (qword_1EB279D58 != -1) {
    dispatch_once(&qword_1EB279D58, &unk_1ED7F00D8);
  }
  id v0 = (void *)qword_1EB279D50;

  return v0;
}

uint64_t sub_18B11D374()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 2, v2);
  uint64_t v4 = qword_1EB279D50;
  qword_1EB279D50 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D3B8()
{
  if (qword_1EB279D68 != -1) {
    dispatch_once(&qword_1EB279D68, &unk_1ED7F01D8);
  }
  id v0 = (void *)qword_1EB279D60;

  return v0;
}

uint64_t sub_18B11D40C()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 3, v2);
  uint64_t v4 = qword_1EB279D60;
  qword_1EB279D60 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D450()
{
  if (qword_1EB279D78 != -1) {
    dispatch_once(&qword_1EB279D78, &unk_1ED7F0338);
  }
  id v0 = (void *)qword_1EB279D70;

  return v0;
}

uint64_t sub_18B11D4A4()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 8, v2);
  uint64_t v4 = qword_1EB279D70;
  qword_1EB279D70 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D4E8()
{
  if (qword_1EB279D88 != -1) {
    dispatch_once(&qword_1EB279D88, &unk_1ED7F03D8);
  }
  id v0 = (void *)qword_1EB279D80;

  return v0;
}

uint64_t sub_18B11D53C()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 10, v2);
  uint64_t v4 = qword_1EB279D80;
  qword_1EB279D80 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D580()
{
  if (qword_1EB279D98 != -1) {
    dispatch_once(&qword_1EB279D98, &unk_1ED7F0418);
  }
  id v0 = (void *)qword_1EB279D90;

  return v0;
}

uint64_t sub_18B11D5D4()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 99, v2);
  uint64_t v4 = qword_1EB279D90;
  qword_1EB279D90 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D618()
{
  if (qword_1EB279DA8 != -1) {
    dispatch_once(&qword_1EB279DA8, &unk_1ED7F0478);
  }
  id v0 = (void *)qword_1EB279DA0;

  return v0;
}

uint64_t sub_18B11D66C()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 100, v2);
  uint64_t v4 = qword_1EB279DA0;
  qword_1EB279DA0 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D6B0()
{
  if (qword_1EB279DB8 != -1) {
    dispatch_once(&qword_1EB279DB8, &unk_1ED7F04B8);
  }
  id v0 = (void *)qword_1EB279DB0;

  return v0;
}

uint64_t sub_18B11D704()
{
  id v0 = [CKComparisonOperatorValidator alloc];
  uint64_t v3 = objc_msgSend_initWithOperatorType_(v0, v1, 1000, v2);
  uint64_t v4 = qword_1EB279DB0;
  qword_1EB279DB0 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D748()
{
  if (qword_1EB279DC8 != -1) {
    dispatch_once(&qword_1EB279DC8, &unk_1ED7F0538);
  }
  id v0 = (void *)qword_1EB279DC0;

  return v0;
}

uint64_t sub_18B11D79C()
{
  id v0 = [CKComparisonModifierValidator alloc];
  uint64_t v3 = objc_msgSend_initWithModifier_(v0, v1, 0, v2);
  uint64_t v4 = qword_1EB279DC0;
  qword_1EB279DC0 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D7E0()
{
  if (qword_1EB279DD8 != -1) {
    dispatch_once(&qword_1EB279DD8, &unk_1ED7F05D8);
  }
  id v0 = (void *)qword_1EB279DD0;

  return v0;
}

uint64_t sub_18B11D834()
{
  id v0 = [CKComparisonModifierValidator alloc];
  uint64_t v3 = objc_msgSend_initWithModifier_(v0, v1, 2, v2);
  uint64_t v4 = qword_1EB279DD0;
  qword_1EB279DD0 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

id sub_18B11D878()
{
  if (qword_1EB279DE8 != -1) {
    dispatch_once(&qword_1EB279DE8, &unk_1ED7F0678);
  }
  id v0 = (void *)qword_1EB279DE0;

  return v0;
}

uint64_t sub_18B11D8CC()
{
  id v0 = [CKComparisonModifierValidator alloc];
  uint64_t v3 = objc_msgSend_initWithModifier_(v0, v1, 1, v2);
  uint64_t v4 = qword_1EB279DE0;
  qword_1EB279DE0 = v3;

  return MEMORY[0x1F41817F8](v3, v4);
}

void *sub_18B11D910(uint64_t a1)
{
  id v1 = sub_18B15C3DC([CKComparisonOptionsValidator alloc], a1);

  return v1;
}

id sub_18B11D954()
{
  if (qword_1EB279DF8 != -1) {
    dispatch_once(&qword_1EB279DF8, &unk_1ED7F07D8);
  }
  id v0 = (void *)qword_1EB279DF0;

  return v0;
}

uint64_t sub_18B11D9A8()
{
  uint64_t v0 = sub_18B11D910(0);
  uint64_t v1 = qword_1EB279DF0;
  qword_1EB279DF0 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id sub_18B11D9E4()
{
  if (qword_1EB279E08 != -1) {
    dispatch_once(&qword_1EB279E08, &unk_1ED7F0898);
  }
  uint64_t v0 = (void *)qword_1EB279E00;

  return v0;
}

uint64_t sub_18B11DA38()
{
  uint64_t v0 = sub_18B11D910(11);
  uint64_t v1 = qword_1EB279E00;
  qword_1EB279E00 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id *sub_18B11DA74(void *a1)
{
  uint64_t v1 = sub_18B15E280([CKKindOfClassValidator alloc], a1);

  return v1;
}

id sub_18B11DAB8()
{
  if (qword_1EB279E18 != -1) {
    dispatch_once(&qword_1EB279E18, &unk_1ED7F0918);
  }
  uint64_t v0 = (void *)qword_1EB279E10;

  return v0;
}

void sub_18B11DB0C()
{
  uint64_t v0 = [CKConstantValueExpressionValidator alloc];
  sub_18B11D06C();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = objc_msgSend_initWithValidator_(v0, v1, (uint64_t)v5, v2);
  uint64_t v4 = (void *)qword_1EB279E10;
  qword_1EB279E10 = v3;
}

id sub_18B11DB7C()
{
  if (qword_1EB279E28 != -1) {
    dispatch_once(&qword_1EB279E28, &unk_1ED7F0978);
  }
  uint64_t v0 = (void *)qword_1EB279E20;

  return v0;
}

void sub_18B11DBD0()
{
  uint64_t v0 = [CKConstantValueExpressionValidator alloc];
  id v5 = objc_alloc_init(CKKindOfCollectionClassValidator);
  uint64_t v3 = objc_msgSend_initWithValidator_(v0, v1, (uint64_t)v5, v2);
  uint64_t v4 = (void *)qword_1EB279E20;
  qword_1EB279E20 = v3;
}

id sub_18B11DC44(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    id v11 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
    uint64_t v14 = objc_msgSend_stringWithUTF8String_(NSString, v12, (uint64_t)"id<CKObjectValidating> cv(__unsafe_unretained Class)", v13);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v11, v15, (uint64_t)v14, @"CKPredicateValidatorConvenienceFunctions.m", 299, @"Invalid parameter not satisfying: %@", @"c != nil");
  }
  id v5 = [CKConstantValueExpressionValidator alloc];
  uint64_t v6 = sub_18B15E280([CKKindOfClassValidator alloc], a1);
  id v9 = objc_msgSend_initWithValidator_(v5, v7, (uint64_t)v6, v8);

  return v9;
}

id sub_18B11DD30(void *a1)
{
  id v4 = a1;
  if (!v4)
  {
    uint64_t v14 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v1, v2, v3);
    uint64_t v17 = objc_msgSend_stringWithUTF8String_(NSString, v15, (uint64_t)"id<CKObjectValidating> cv_Val(NSError *(^__strong)(__strong id))", v16);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v14, v18, (uint64_t)v17, @"CKPredicateValidatorConvenienceFunctions.m", 303, @"Invalid parameter not satisfying: %@", @"validator != nil");
  }
  id v5 = [CKConstantValueExpressionValidator alloc];
  uint64_t v6 = [CKCustomBlockValidator alloc];
  id v9 = objc_msgSend_initWithBlock_(v6, v7, (uint64_t)v4, v8);
  id v12 = objc_msgSend_initWithValidator_(v5, v10, (uint64_t)v9, v11);

  return v12;
}

id sub_18B11DE24()
{
  if (qword_1EB279E38 != -1) {
    dispatch_once(&qword_1EB279E38, &unk_1ED7F0A38);
  }
  uint64_t v0 = (void *)qword_1EB279E30;

  return v0;
}

uint64_t sub_18B11DE78()
{
  uint64_t v0 = objc_opt_class();
  uint64_t v4 = sub_18B11DC44(v0, v1, v2, v3);
  uint64_t v5 = qword_1EB279E30;
  qword_1EB279E30 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

id sub_18B11DEBC()
{
  if (qword_1EB279E48 != -1) {
    dispatch_once(&qword_1EB279E48, &unk_1ED7F0A98);
  }
  uint64_t v0 = (void *)qword_1EB279E40;

  return v0;
}

uint64_t sub_18B11DF10()
{
  uint64_t v0 = objc_opt_class();
  uint64_t v4 = sub_18B11DC44(v0, v1, v2, v3);
  uint64_t v5 = qword_1EB279E40;
  qword_1EB279E40 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

id sub_18B11DF54()
{
  if (qword_1EB279E58 != -1) {
    dispatch_once(&qword_1EB279E58, &unk_1ED7F0AF8);
  }
  uint64_t v0 = (void *)qword_1EB279E50;

  return v0;
}

uint64_t sub_18B11DFA8()
{
  uint64_t v0 = objc_opt_class();
  uint64_t v4 = sub_18B11DC44(v0, v1, v2, v3);
  uint64_t v5 = qword_1EB279E50;
  qword_1EB279E50 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

id sub_18B11DFEC()
{
  if (qword_1EB279E68 != -1) {
    dispatch_once(&qword_1EB279E68, &unk_1ED7F0B58);
  }
  uint64_t v0 = (void *)qword_1EB279E60;

  return v0;
}

void sub_18B11E040()
{
  uint64_t v0 = [CKKeyPathExpressionValidator alloc];
  sub_18B11D06C();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = objc_msgSend_initWithValidator_(v0, v1, (uint64_t)v5, v2);
  uint64_t v4 = (void *)qword_1EB279E60;
  qword_1EB279E60 = v3;
}

id sub_18B11E0B0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [CKKeyPathExpressionValidator alloc];
  uint64_t v3 = [CKStringValueValidator alloc];
  uint64_t v6 = objc_msgSend_initWithValue_(v3, v4, (uint64_t)v1, v5);

  id v9 = objc_msgSend_initWithValidator_(v2, v7, (uint64_t)v6, v8);

  return v9;
}

id sub_18B11E134()
{
  if (qword_1EB279E78 != -1) {
    dispatch_once(&qword_1EB279E78, &unk_1ED7F0BD8);
  }
  uint64_t v0 = (void *)qword_1EB279E70;

  return v0;
}

uint64_t sub_18B11E188()
{
  uint64_t v0 = sub_18B11E0B0(@"allTokens");
  uint64_t v1 = qword_1EB279E70;
  qword_1EB279E70 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id sub_18B11E1C8()
{
  if (qword_1EB279E88 != -1) {
    dispatch_once(&qword_1EB279E88, &unk_1ED7EF778);
  }
  uint64_t v0 = (void *)qword_1EB279E80;

  return v0;
}

uint64_t sub_18B11E21C()
{
  uint64_t v0 = objc_alloc_init(CKEvaluatedObjectExpressionValidator);
  uint64_t v1 = qword_1EB279E80;
  qword_1EB279E80 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id *sub_18B11E258(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v11 = a1;
  id v15 = a2;
  if (!v11)
  {
    uint64_t v28 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v12, v13, v14);
    uint64_t v31 = objc_msgSend_stringWithUTF8String_(NSString, v29, (uint64_t)"id<CKObjectValidating> func(NSString *__strong, __strong id<CKObjectValidating>, ...)", v30);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v28, v32, (uint64_t)v31, @"CKPredicateValidatorConvenienceFunctions.m", 364, @"Invalid parameter not satisfying: %@", @"functionName != nil");
  }
  uint64_t v16 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v12, v13, v14);
  uint64_t v19 = v16;
  if (v15)
  {
    objc_msgSend_addObject_(v16, v17, (uint64_t)v15, v18);
    id v33 = (id *)&a10;
    id v20 = a9;
    if (v20)
    {
      uint64_t v23 = v20;
      do
      {
        objc_msgSend_addObject_(v19, v21, (uint64_t)v23, v22);
        id v24 = v33++;
        id v25 = *v24;

        uint64_t v23 = v25;
      }
      while (v25);
    }
  }
  uint64_t v26 = sub_18B15D83C([CKFunctionExpressionValidator alloc], v11, v19);

  return v26;
}

id sub_18B11E3B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v10 = a1;
  uint64_t v14 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v11, v12, v13);
  uint64_t v17 = v14;
  if (v10)
  {
    objc_msgSend_addObject_(v14, v15, (uint64_t)v10, v16);
    uint64_t v29 = (id *)&a10;
    id v18 = a9;
    if (v18)
    {
      unint64_t v21 = v18;
      do
      {
        objc_msgSend_addObject_(v17, v19, (uint64_t)v21, v20);
        uint64_t v22 = v29++;
        id v23 = *v22;

        unint64_t v21 = v23;
      }
      while (v23);
    }
  }
  id v24 = [CKAggregateExpressionValidator alloc];
  uint64_t v27 = objc_msgSend_initWithValidators_(v24, v25, (uint64_t)v17, v26);

  return v27;
}

uint64_t sub_18B11E490()
{
  uint64_t v0 = objc_alloc_init(CKTrueValidator);
  uint64_t v1 = qword_1EB279E90;
  qword_1EB279E90 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id sub_18B11E4CC()
{
  if (qword_1EB279EA8 != -1) {
    dispatch_once(&qword_1EB279EA8, &unk_1ED7EF818);
  }
  uint64_t v0 = (void *)qword_1EB279EA0;

  return v0;
}

uint64_t sub_18B11E520()
{
  uint64_t v0 = objc_alloc_init(CKNilValidator);
  uint64_t v1 = qword_1EB279EA0;
  qword_1EB279EA0 = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t CKDPLocationCoordinateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = &OBJC_IVAR___CKDirectoryPurger__shouldRemoveFileBlock;
  uint64_t v8 = &OBJC_IVAR___CKDirectoryPurger__shouldRemoveFileBlock;
  id v9 = (int *)MEMORY[0x1E4F940B8];
  id v10 = &OBJC_IVAR___CKDirectoryPurger__shouldRemoveFileBlock;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      if (v12++ >= 9)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + v7[154]) |= 8u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v41 = v8[155];
        goto LABEL_59;
      case 2u:
        *(unsigned char *)(a1 + v7[154]) |= 0x10u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v41 = v10[156];
        goto LABEL_59;
      case 3u:
        *(unsigned char *)(a1 + v7[154]) |= 4u;
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v28);
          *(void *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v41 = 24;
        goto LABEL_59;
      case 4u:
        *(unsigned char *)(a1 + v7[154]) |= 1u;
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v41 = 8;
        goto LABEL_59;
      case 5u:
        *(unsigned char *)(a1 + v7[154]) |= 0x40u;
        uint64_t v31 = *v3;
        unint64_t v32 = *(void *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v32);
          *(void *)(a2 + v31) = v32 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v41 = 56;
        goto LABEL_59;
      case 6u:
        *(unsigned char *)(a1 + v7[154]) |= 2u;
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v34);
          *(void *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v41 = 16;
        goto LABEL_59;
      case 7u:
        *(unsigned char *)(a1 + v7[154]) |= 0x20u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v41 = 48;
LABEL_59:
        *(void *)(a1 + v41) = v23;
        goto LABEL_60;
      case 8u:
        uint64_t v37 = v7;
        uint64_t v38 = v10;
        int v39 = v8;
        id v40 = objc_alloc_init(CKDPDate);
        objc_storeStrong((id *)(a1 + 64), v40);
        if PBReaderPlaceMark() && (CKDPDateReadFrom((uint64_t)v40, a2))
        {
          PBReaderRecallMark();

          uint64_t v8 = v39;
          id v10 = v38;
          uint64_t v7 = v37;
LABEL_60:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_60;
    }
  }
}

uint64_t CKDPIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        id v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x3B0], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_18B1229EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1C9C8];
  objc_msgSend_time(a2, (const char *)a2, a3, a4);

  return objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(v4, v5, v6, v7);
}

uint64_t sub_18B122C5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_CKLocationFromPLocationCoordinate_(MEMORY[0x1E4F1E5F0], a2, (uint64_t)a2, a4);
}

uint64_t sub_18B1233E8(void *a1, void *a2, objc_property *a3)
{
  if (!a1) {
    return 0;
  }
  v106.receiver = a1;
  v106.super_class = (Class)CKObjCProperty;
  uint64_t v5 = (id *)objc_msgSendSuper2(&v106, sel_init);
  uint64_t v6 = (uint64_t)v5;
  if (v5)
  {
    objc_storeStrong(v5 + 1, a2);
    uint64_t v7 = NSString;
    Name = property_getName(a3);
    uint64_t v11 = objc_msgSend_stringWithUTF8String_(v7, v9, (uint64_t)Name, v10);
    unint64_t v12 = *(void **)(v6 + 24);
    *(void *)(v6 + 24) = v11;

    if (!objc_msgSend_length(*(void **)(v6 + 24), v13, v14, v15))
    {
      uint64_t v93 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v16, v17, v18);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v93, v94, (uint64_t)sel_initWithClass_property_, v6, @"CKObjCProperty.m", 19, @"How'd you get a no-length property name in there?");
    }
    id v19 = *(id *)(v6 + 24);
    unsigned int v20 = NSString;
    unint64_t v23 = objc_msgSend_substringToIndex_(*(void **)(v6 + 24), v21, 1, v22);
    uint64_t v27 = objc_msgSend_uppercaseString(v23, v24, v25, v26);
    unint64_t v30 = objc_msgSend_substringFromIndex_(*(void **)(v6 + 24), v28, 1, v29);
    uint64_t v33 = objc_msgSend_stringWithFormat_(v20, v31, @"set%@%@:", v32, v27, v30);

    unsigned int outCount = 0;
    unint64_t v34 = property_copyAttributeList(a3, &outCount);
    uint64_t v37 = v34;
    if (outCount)
    {
      unint64_t v38 = 0;
      p_xpc_object_t value = (uint64_t *)&v34->value;
      do
      {
        uint64_t v40 = *p_value;
        int v41 = *(char *)*(p_value - 1);
        if (v41 <= 77)
        {
          if (v41 == 38)
          {
            uint64_t v42 = *(void *)(v6 + 32) | 4;
          }
          else
          {
            if (v41 != 67)
            {
              if (v41 == 71)
              {
                *(void *)(v6 + 32) |= 0x10uLL;
                uint64_t v43 = objc_msgSend_stringWithUTF8String_(NSString, v35, v40, v36);

                id v19 = (id)v43;
              }
              goto LABEL_22;
            }
            uint64_t v42 = *(void *)(v6 + 32) | 2;
          }
LABEL_21:
          *(void *)(v6 + 32) = v42;
        }
        else
        {
          switch(*(unsigned char *)*(p_value - 1))
          {
            case 'N':
              uint64_t v42 = *(void *)(v6 + 32) | 8;
              goto LABEL_21;
            case 'R':
              uint64_t v42 = *(void *)(v6 + 32) | 1;
              goto LABEL_21;
            case 'S':
              *(void *)(v6 + 32) |= 0x20uLL;
              uint64_t v46 = objc_msgSend_stringWithUTF8String_(NSString, v35, v40, v36);

              uint64_t v33 = (void *)v46;
              break;
            case 'T':
              uint64_t v44 = objc_msgSend_typeForEncoding_(CKObjCType, v35, v40, v36);
              uint64_t v45 = *(void **)(v6 + 16);
              *(void *)(v6 + 16) = v44;
              goto LABEL_18;
            case 'V':
              uint64_t v47 = objc_msgSend_stringWithUTF8String_(NSString, v35, v40, v36);
              uint64_t v45 = *(void **)(v6 + 56);
              *(void *)(v6 + 56) = v47;
LABEL_18:

              break;
            default:
              break;
          }
        }
LABEL_22:
        ++v38;
        p_value += 2;
      }
      while (v38 < outCount);
    }
    free(v37);
    SEL v48 = NSSelectorFromString((NSString *)v19);
    *(void *)(v6 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v48;
    uint64_t v51 = objc_msgSend_instanceMethodSignatureForSelector_(*(void **)(v6 + 8), v49, (uint64_t)v48, v50);
    id v52 = [NSString alloc];
    uint64_t v56 = objc_msgSend_methodReturnType(v51, v53, v54, v55);
    uint64_t v58 = objc_msgSend_initWithCString_encoding_(v52, v57, v56, 4);
    id v62 = objc_msgSend_encoding(*(void **)(v6 + 16), v59, v60, v61);
    uint64_t v65 = objc_msgSend_caseInsensitiveCompare_(v62, v63, @"q", v64);

    if (v65 | objc_msgSend_caseInsensitiveCompare_(v58, v66, @"q", v67))
    {
      uint64_t v71 = objc_msgSend_encoding(*(void **)(v6 + 16), v68, v69, v70);
      char hasPrefix = objc_msgSend_hasPrefix_(v71, v72, (uint64_t)v58, v73);

      if ((hasPrefix & 1) == 0)
      {
        uint64_t v75 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v68, v69, v70);
        uint64_t v79 = objc_msgSend_methodReturnType(v51, v76, v77, v78);
        uint64_t v83 = objc_msgSend_encoding(*(void **)(v6 + 16), v80, v81, v82);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v75, v84, (uint64_t)sel_initWithClass_property_, v6, @"CKObjCProperty.m", 79, @"Getter method signature return type doesn't match property type encoding (%s != %@)", v79, v83);
      }
    }
    uint64_t v85 = objc_msgSend_methodReturnLength(v51, v68, v69, v70);
    if (v85 != objc_msgSend_size(*(void **)(v6 + 16), v86, v87, v88))
    {
      uint64_t v95 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v89, v90, v91);
      uint64_t v99 = objc_msgSend_methodReturnLength(v51, v96, v97, v98);
      uint64_t v103 = objc_msgSend_size(*(void **)(v6 + 16), v100, v101, v102);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v95, v104, (uint64_t)sel_initWithClass_property_, v6, @"CKObjCProperty.m", 81, @"Getter method signature return length doesn't match property type size (%d != %d)", v99, v103);
    }
    *(void *)(v6 + 4_Block_object_dispose(&STACK[0x3B0], 8) = NSSelectorFromString((NSString *)v33);
  }
  return v6;
}

id sub_18B1239E0(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t)a1;
  v29[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = (void *)a1[2];
    id v4 = a2;
    char v8 = (char *)v29 - ((objc_msgSend_size(v3, v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    unsigned int v9 = (void *)MEMORY[0x1E4F1CA18];
    unint64_t v12 = objc_msgSend_instanceMethodSignatureForSelector_(*(void **)(v2 + 8), v10, *(void *)(v2 + 40), v11);
    uint64_t v15 = objc_msgSend_invocationWithMethodSignature_(v9, v13, (uint64_t)v12, v14);

    objc_msgSend_setTarget_(v15, v16, (uint64_t)v4, v17);
    objc_msgSend_setSelector_(v15, v18, *(void *)(v2 + 40), v19);
    objc_msgSend_invoke(v15, v20, v21, v22);
    objc_msgSend_getReturnValue_(v15, v23, (uint64_t)v8, v24);
    uint64_t v2 = sub_18B17D22C(*(void **)(v2 + 16), v8, v25, v26, v27);
  }

  return (id)v2;
}

void sub_18B123B08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v29 = v5;
  if (a1)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4F1CA18];
    uint64_t v7 = *(void **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 48);
    id v9 = a3;
    unint64_t v12 = objc_msgSend_instanceMethodSignatureForSelector_(v7, v10, v8, v11);
    uint64_t v15 = objc_msgSend_invocationWithMethodSignature_(v6, v13, (uint64_t)v12, v14);

    objc_msgSend_setTarget_(v15, v16, (uint64_t)v9, v17);
    objc_msgSend_setSelector_(v15, v18, *(void *)(a1 + 48), v19);
    unint64_t v23 = *(void **)(a1 + 16);
    if (v23 && v23[1] == 15)
    {
      objc_msgSend_setArgument_atIndex_(v15, v20, (uint64_t)&v29, 2);
    }
    else
    {
      double v27 = (char *)&v29 - ((objc_msgSend_size(v23, v20, v21, v22, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_18B17D45C(*(void **)(a1 + 16), (uint64_t)v27, v5);
      objc_msgSend_setArgument_atIndex_(v15, v28, (uint64_t)v27, 2);
    }
    objc_msgSend_invoke(v15, v24, v25, v26, v29);

    id v5 = v29;
  }
}

uint64_t sub_18B123CE0(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E912FE08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_18B123D70()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1E9130660;
  uint64_t v7 = qword_1E9130660;
  if (!qword_1E9130660)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_18B123E54;
    v3[3] = &unk_1E545FF40;
    v3[4] = &v4;
    sub_18B123E54(v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18B123E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_18B123E54(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v20[0] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v2 = qword_1E912FE08;
  uint64_t v26 = qword_1E912FE08;
  if (!qword_1E912FE08)
  {
    v20[1] = (void *)MEMORY[0x1E4F143A8];
    v20[2] = (void *)3221225472;
    v20[3] = sub_18B123CE0;
    void v20[4] = &unk_1E5462930;
    uint64_t v21 = &v23;
    uint64_t v22 = v20;
    long long v27 = xmmword_1E5464EF0;
    long long v28 = *(_OWORD *)&off_1E5464F00;
    v24[3] = _sl_dlopen();
    qword_1E912FE08 = *(void *)(v21[1] + 24);
    uint64_t v2 = v24[3];
  }
  _Block_object_dispose(&v23, 8);
  if (v2)
  {
    uint64_t v6 = v20[0];
    if (!v20[0]) {
      goto LABEL_5;
    }
  }
  else
  {
    a1 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v3, v4, v5);
    char v13 = objc_msgSend_stringWithUTF8String_(NSString, v11, (uint64_t)"void *BackgroundSystemTasksLibrary(void)", v12);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(a1, v14, (uint64_t)v13, @"CKBackgroundSystemTasks.m", 11, @"%s", v20[0]);

    __break(1u);
  }
  free(v6);
LABEL_5:
  Class result = objc_getClass("BGSystemTaskScheduler");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  if (!*(void *)(*(void *)(a1[4] + 8) + 24))
  {
    uint64_t v15 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v8, v9, v10);
    uint64_t v18 = objc_msgSend_stringWithUTF8String_(NSString, v16, (uint64_t)"Class getBGSystemTaskSchedulerClass(void)_block_invoke", v17);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v15, v19, (uint64_t)v18, @"CKBackgroundSystemTasks.m", 13, @"Unable to find class %s", "BGSystemTaskScheduler");

    __break(1u);
  }
  qword_1E9130660 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void sub_18B124084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B12423C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_postNotice(WeakRetained, v1, v2, v3);
}

uint64_t sub_18B1243C4(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1, &unk_1ED7EF458);
  }
  uint64_t v3 = (pthread_mutex_t *)(*(void *)(a1 + 32) + 8);

  return pthread_mutex_unlock(v3);
}

uint64_t sub_18B1244BC(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 32) + 8));
  *(unsigned char *)(*(void *)(a1 + 32) + 73) = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 32);
  if (v5[72])
  {
    objc_msgSend_postFinishedNotice(v5, v2, v3, v4);
  }
  else
  {
    uint64_t v6 = objc_msgSend_processingDelay(v5, v2, v3, v4);
    if (v6) {
      objc_msgSend_delayPostBy_(*(void **)(a1 + 32), v7, v6, v8);
    }
  }
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
  uint64_t v9 = (pthread_mutex_t *)(*(void *)(a1 + 32) + 8);

  return pthread_mutex_unlock(v9);
}

uint64_t sub_18B124664(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_processingComplete(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18B12533C(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  id v3 = a2;
  objc_msgSend_predicateWithFormat_(v2, v4, @"uniquingKey = $KEY", v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v6, (uint64_t)v8, v7);
}

void sub_18B125624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12563C(uint64_t a1, const char *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v14 = @"DATE";
  v15[0] = v3;
  uint64_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v15, (uint64_t)&v14, 1);
  uint64_t v6 = objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(a1 + 40), v5, (uint64_t)v4, (uint64_t)off_1E5464F58, 0, &unk_1ED7EF9B8);
  uint64_t v10 = objc_msgSend_allObjects(v6, v7, v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v10;

  return 0;
}

void sub_18B125718(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F28F60];
  id v12 = a2;
  uint64_t v5 = objc_msgSend_predicateWithFormat_(v2, v3, @"activityEarliestDate < $DATE", v4);
  objc_msgSend_setSearchPredicate_(v12, v6, (uint64_t)v5, v7);

  objc_msgSend_orderAscendingByProperty_(v12, v8, @"databaseID", v9);
  objc_msgSend_orderAscendingByProperty_(v12, v10, @"groupID", v11);
}

uint64_t sub_18B1258B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"activityEarliestDate = NULL AND activityNotBeforeDate < $NOW", a4);
}

uint64_t sub_18B125994(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], a2, @"databaseID = $DATABASEID", a4);
}

void sub_18B125A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18B125A88(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v11 = 0;
  uint64_t v4 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v3, a2, 0, (uint64_t)off_1E5464FD0, &v11, &unk_1ED7EC228);
  id v5 = v11;
  uint64_t v9 = objc_msgSend_nextObject(v4, v6, v7, v8);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v9 != 0;

  return v5;
}

void sub_18B125B2C(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_msgSend_setLimit_(v2, v3, (uint64_t)&unk_1ED846900, v4);
  objc_msgSend_setFetchedProperties_(v2, v5, MEMORY[0x1E4F1CBF0], v6);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E4F28F60], v7, @"activityEarliestDate != NULL", v8);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v2, v9, (uint64_t)v11, v10);
}

void sub_18B126138(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_runActivities(WeakRetained, v1, v2, v3);
}

void sub_18B1262BC(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 32));
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 16);

  os_unfair_lock_unlock(v2);
}

id sub_18B126B18(uint64_t a1, const char *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v54 = 0;
  id v5 = objc_msgSend_activityEntryForTarget_error_(v3, a2, v4, (uint64_t)&v54);
  id v9 = v54;
  if (!v9)
  {
    uint64_t v10 = objc_msgSend_activityEarliestDate(v5, v6, v7, v8);
    id v11 = *(void **)(a1 + 48);
    uint64_t v15 = objc_msgSend_activityNotBeforeDate(v5, v12, v13, v14);
    uint64_t v18 = objc_msgSend_laterDate_(v11, v16, (uint64_t)v15, v17);

    if (v10 && objc_msgSend_compare_(v10, v19, (uint64_t)v18, v20) != 1)
    {
LABEL_9:
      id v9 = 0;
LABEL_19:

      goto LABEL_20;
    }
    objc_msgSend_setSchedulingDataInActivity_date_coalescingInterval_minimumSeparation_(*(void **)(a1 + 32), v19, (uint64_t)v5, (uint64_t)v18, *(double *)(a1 + 56), *(double *)(a1 + 64));
    uint64_t v24 = objc_msgSend_activityStartDate(v5, v21, v22, v23);

    if (v24)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      long long v27 = (void *)ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG))
      {
        int v41 = v27;
        uint64_t v45 = objc_msgSend_targetDescription(v5, v42, v43, v44);
        *(_DWORD *)buf = 138543618;
        uint64_t v56 = v18;
        __int16 v57 = 2114;
        uint64_t v58 = v45;
        _os_log_debug_impl(&dword_18AF10000, v41, OS_LOG_TYPE_DEBUG, "CKSQLiteDatabaseManager scheduled repeating activity: %{public}@ for %{public}@", buf, 0x16u);
      }
      goto LABEL_9;
    }
    objc_msgSend_insertOrUpdateActivityDate_(*(void **)(*(void *)(a1 + 32) + 152), v25, (uint64_t)v5, v26);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    long long v28 = *(void **)(*(void *)(a1 + 32) + 152);
    uint64_t v49 = MEMORY[0x1E4F143A8];
    uint64_t v50 = 3221225472;
    uint64_t v51 = sub_18B126F00;
    id v52 = &unk_1E5460240;
    id v53 = *(id *)(a1 + 40);
    objc_msgSend_addTransactionCompletionHandler_(v28, v29, (uint64_t)&v49, v30);
    if (v9)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v33 = (void *)ck_log_facility_sql;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
      unint64_t v34 = v33;
      unint64_t v38 = objc_msgSend_targetDescription(v5, v35, v36, v37, v49, v50, v51, v52);
      *(_DWORD *)buf = 138543874;
      uint64_t v56 = v18;
      __int16 v57 = 2114;
      uint64_t v58 = v38;
      __int16 v59 = 2112;
      id v60 = v9;
      _os_log_error_impl(&dword_18AF10000, v34, OS_LOG_TYPE_ERROR, "CKSQLiteDatabaseManager failed scheduling: %{public}@ for %{public}@ error = %@", buf, 0x20u);
    }
    else
    {
      objc_msgSend_scheduleActivityDate_(*(void **)(a1 + 32), v31, (uint64_t)v18, v32, v49, v50, v51, v52);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      int v39 = (void *)ck_log_facility_sql;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_18;
      }
      unint64_t v34 = v39;
      unint64_t v38 = objc_msgSend_targetDescription(v5, v46, v47, v48);
      *(_DWORD *)buf = 138543618;
      uint64_t v56 = v18;
      __int16 v57 = 2114;
      uint64_t v58 = v38;
      _os_log_debug_impl(&dword_18AF10000, v34, OS_LOG_TYPE_DEBUG, "CKSQLiteDatabaseManager scheduled: %{public}@ for %{public}@", buf, 0x16u);
    }

LABEL_18:
    goto LABEL_19;
  }
LABEL_20:

  return v9;
}

uint64_t sub_18B126F00(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = result;
    objc_msgSend_setDatabaseManagerData_(*(void **)(result + 32), a2, 0, a4);
    uint64_t v7 = *(void *)(v4 + 32);
    return MEMORY[0x1F4181798](v7, sel_activityTriggerWasRolledBack, v5, v6);
  }
  return result;
}

void sub_18B1270B0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B1273C0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B12748C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B127C88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_db(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = _CKSQLDBSerializerLock((uint64_t)v5 + 8);

  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v20 = 0;
  uint64_t v10 = objc_msgSend_activityEntryForTarget_error_(v7, v9, v8, (uint64_t)&v20);
  id v14 = v20;
  if (v14)
  {
    uint64_t v18 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v11, v12, v13);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v19, *(void *)(a1 + 56), *(void *)(a1 + 32), @"CKSQLiteDatabaseManager.m", 771, @"Unexpected error: %@", v14);
  }
  uint64_t v15 = objc_msgSend_activityEarliestDate(v10, v11, v12, v13);
  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v15;

  if (v6)
  {
    v6[1].__sig = 0;
    pthread_mutex_unlock(v6);
  }
}

void sub_18B127D80(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B1285A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  objc_msgSend_distantFuture(MEMORY[0x1E4F1C9C8], a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_runActivities_(v4, v5, (uint64_t)v7, v6);
}

void sub_18B12A040(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B12A11C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B12A1F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B12A2D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B12B8F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12BAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12BAE8(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12BC74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12BE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12BE6C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12BFF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12C1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12C1F0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12DE38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12E018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12E030(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12E1BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12E39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12E3B4(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12E540(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12E738(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12E8C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12EAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12EABC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12EC48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 552) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 552);
    *(void *)(v8 + 552) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12EE40(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 552));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12EFCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 560) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 560);
    *(void *)(v8 + 56dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12F1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12F1C4(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 560));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12F350(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 568) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 568);
    *(void *)(v8 + 56_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12F530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12F548(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 568));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B12F6D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 576) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 576);
    *(void *)(v8 + 576) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B12F8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B12F8CC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 576));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B1309B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    *(void *)(v4 + 648) += a2;
    uint64_t v5 = *(void *)(result + 32);
    if (v5)
    {
      *(void *)(v5 + 656) += a3;
      uint64_t v6 = *(void *)(result + 32);
      if (v6) {
        *(void *)(v6 + 664) += a4;
      }
    }
  }
  return result;
}

id sub_18B131B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend_zoneID(v3, v4, v5, v6),
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        int isEqual = objc_msgSend_isEqual_(v7, v8, *(void *)(a1 + 32), v9),
        v7,
        isEqual)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && objc_msgSend_isEqual_(v3, v11, *(void *)(a1 + 32), v12))
  {
    uint64_t v13 = [CKTuple2 alloc];
    uint64_t v17 = objc_msgSend_perItemErrors(*(void **)(a1 + 40), v14, v15, v16);
    id v20 = objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)v3, v19);
    uint64_t v22 = objc_msgSend_initWithObject1_object2_(v13, v21, (uint64_t)v3, (uint64_t)v20);
  }
  else
  {
    uint64_t v22 = 0;
  }

  return v22;
}

id sub_18B13312C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v2, v4, (uint64_t)v3, v5);
  uint64_t v10 = objc_msgSend_zoneConfiguration(v6, v7, v8, v9);
  id v11 = [CKTuple2 alloc];
  uint64_t v13 = objc_msgSend_initWithObject1_object2_(v11, v12, (uint64_t)v3, (uint64_t)v10);

  return v13;
}

id sub_18B133294(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v7 = objc_msgSend_configurationsByRecordZoneID(v2, v4, v5, v6);
  uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(v7, v8, (uint64_t)v3, v9);

  id v11 = [CKTuple2 alloc];
  uint64_t v12 = [CKFetchRecordZoneChangesOptions alloc];
  uint64_t v15 = objc_msgSend_initWithZoneConfiguration_(v12, v13, (uint64_t)v10, v14);
  uint64_t v17 = objc_msgSend_initWithObject1_object2_(v11, v16, (uint64_t)v3, (uint64_t)v15);

  return v17;
}

uint64_t sub_18B1333D0(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_zoneConfiguration(a3, a2, (uint64_t)a3, a4);
}

void sub_18B1339BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B13438C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B13456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B134584(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B134710(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1348F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B134908(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B134A94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B134C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B134C8C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B134E18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B134FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B135010(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B13519C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 552) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 552);
    *(void *)(v8 + 552) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B13537C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B135394(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 552));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B135520(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  Class result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 560) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 560);
    *(void *)(v8 + 56dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B135700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B135718(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 560));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B137558(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v9 = objc_msgSend_configuration(*(void **)(a1 + 32), v6, v7, v8);
  uint64_t v13 = objc_msgSend_container(v9, v10, v11, v12);
  uint64_t v17 = objc_msgSend_options(v13, v14, v15, v16);
  int v21 = objc_msgSend_useAnonymousToServerShareParticipants(v17, v18, v19, v20);

  if (v21)
  {
    if (a3)
    {
      uint64_t v25 = objc_msgSend_recordID(*(void **)(a1 + 40), v22, v23, v24);
      long long v27 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v26, @"CKErrorDomain", 12, @"Assets not permitted when using anonymous to server share participants: %@", v25);
      uint64_t v28 = 0;
LABEL_13:
      *a3 = v27;

      goto LABEL_14;
    }
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v29 = objc_msgSend_assetReference(v5, v22, v23, v24);

    if (v29)
    {
      uint64_t v33 = objc_msgSend_configuration(*(void **)(a1 + 32), v30, v31, v32);
      uint64_t v37 = objc_msgSend_container(v33, v34, v35, v36);
      int v41 = objc_msgSend_options(v37, v38, v39, v40);
      if (objc_msgSend_bypassPCSEncryption(v41, v42, v43, v44))
      {
        int v48 = 1;
      }
      else
      {
        uint64_t v49 = objc_msgSend_configuration(*(void **)(a1 + 32), v45, v46, v47);
        id v53 = objc_msgSend_container(v49, v50, v51, v52);
        __int16 v57 = objc_msgSend_options(v53, v54, v55, v56);
        int v48 = objc_msgSend_useClearAssetEncryption(v57, v58, v59, v60);
      }
      uint64_t v28 = v48 ^ 1u;
      if (a3 && v48)
      {
        uint64_t v25 = objc_msgSend_recordID(*(void **)(a1 + 40), v61, v62, v63);
        long long v27 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v64, @"CKErrorDomain", 12, @"Invalid CKAssetReference on record %@", v25);
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v28 = 1;
    }
  }
LABEL_14:

  return v28;
}

void sub_18B137C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_18B137C64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v5, (uint64_t)v4, v6);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v74 = v4;
      id v7 = v4;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      uint64_t v11 = objc_msgSend_deltasToSave(v7, v8, v9, v10);
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v85, (uint64_t)v91, 16);
      if (v13)
      {
        uint64_t v17 = v13;
        uint64_t v18 = *(void *)v86;
        do
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v86 != v18) {
              objc_enumerationMutation(v11);
            }
            uint64_t v20 = *(void **)(*((void *)&v85 + 1) + 8 * i);
            int v21 = objc_msgSend_asset(v20, v14, v15, v16);

            if (v21)
            {
              uint64_t v22 = *(void **)(a1 + 32);
              uint64_t v23 = objc_msgSend_asset(v20, v14, v15, v16);
              objc_msgSend_addObject_(v22, v24, (uint64_t)v23, v25);

              ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            }
          }
          uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v85, (uint64_t)v91, 16);
        }
        while (v17);
      }

      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      uint64_t v73 = v7;
      objc_msgSend_pendingReplacementRequests(v7, v26, v27, v28);
      id obj = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v29, (uint64_t)&v81, (uint64_t)v90, 16);
      if (v30)
      {
        uint64_t v34 = v30;
        uint64_t v76 = *(void *)v82;
        do
        {
          for (uint64_t j = 0; j != v34; ++j)
          {
            if (*(void *)v82 != v76) {
              objc_enumerationMutation(obj);
            }
            uint64_t v36 = *(void **)(*((void *)&v81 + 1) + 8 * j);
            long long v77 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            uint64_t v37 = objc_msgSend_replacementDeltas(v36, v31, v32, v33);
            uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v77, (uint64_t)v89, 16);
            if (v39)
            {
              uint64_t v43 = v39;
              uint64_t v44 = *(void *)v78;
              do
              {
                for (uint64_t k = 0; k != v43; ++k)
                {
                  if (*(void *)v78 != v44) {
                    objc_enumerationMutation(v37);
                  }
                  uint64_t v46 = *(void **)(*((void *)&v77 + 1) + 8 * k);
                  uint64_t v47 = objc_msgSend_asset(v46, v40, v41, v42);

                  if (v47)
                  {
                    uint64_t v51 = *(void **)(a1 + 32);
                    uint64_t v52 = objc_msgSend_asset(v46, v48, v49, v50);
                    objc_msgSend_addObject_(v51, v53, (uint64_t)v52, v54);

                    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
                  }
                  uint64_t v55 = objc_msgSend_replacementDeltas(v36, v48, v49, v50);
                  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += objc_msgSend_count(v55, v56, v57, v58);

                  uint64_t v62 = objc_msgSend_deltaIdentifiersToReplace(v36, v59, v60, v61);
                  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += objc_msgSend_count(v62, v63, v64, v65);
                }
                uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v40, (uint64_t)&v77, (uint64_t)v89, 16);
              }
              while (v43);
            }
          }
          uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v81, (uint64_t)v90, 16);
        }
        while (v34);
      }

      ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      uint64_t v69 = objc_msgSend_deltasToSave(v73, v66, v67, v68);
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += objc_msgSend_count(v69, v70, v71, v72);

      id v4 = v74;
    }
  }
}

id sub_18B138200(uint64_t a1, void *a2)
{
  uint64_t v2 = (objc_class *)NSString;
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v8 = objc_msgSend_recordID(v3, v5, v6, v7);
  uint64_t v12 = objc_msgSend_recordChangeTag(v3, v9, v10, v11);

  uint64_t v15 = objc_msgSend_initWithFormat_(v4, v13, @"%@ etag=%@", v14, v8, v12);

  return v15;
}

void sub_18B138478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1384A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  return result;
}

void sub_18B1384B8(uint64_t a1)
{
}

uint64_t sub_18B1384C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = a3;
  uint64_t v8 = objc_msgSend_packagesToDestroy(v3, v5, v6, v7);
  objc_msgSend_addObject_(v8, v9, (uint64_t)v4, v10);

  return 0;
}

uint64_t sub_18B138514(uint64_t a1, int a2, int a3, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  return 1;
}

uint64_t sub_18B13D348(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_vectors(a2, (const char *)a2, a3, a4);
}

void sub_18B13DB54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B13DC30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B13F124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B13F2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B13F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B13F658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B13F710(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v7 = (void (*)(uint64_t, const char *, uint64_t, uint64_t))off_1E912FE30;
  int v21 = off_1E912FE30;
  if (!off_1E912FE30)
  {
    uint64_t v8 = sub_18B1403F4(a1, a2, a3, a4);
    v19[3] = (uint64_t)dlsym(v8, "MMCSSignatureGeneratorUpdate");
    off_1E912FE30 = (_UNKNOWN *)v19[3];
    uint64_t v7 = (void (*)(uint64_t, const char *, uint64_t, uint64_t))v19[3];
  }
  _Block_object_dispose(&v18, 8);
  if (v7)
  {
    v7(a1, a2, a3, 1);
  }
  else
  {
    uint64_t v12 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10, v11);
    uint64_t v15 = objc_msgSend_stringWithUTF8String_(NSString, v13, (uint64_t)"void __MMCSSignatureGeneratorUpdate(void *, const void *, size_t, Boolean)", v14);
    uint64_t v16 = dlerror();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v12, v17, (uint64_t)v15, @"CKSignatureGenerator.m", 37, @"%s", v16);

    __break(1u);
  }
}

void sub_18B13F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B13F9BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  id v5 = (void (*)(uint64_t))off_1E9129BF8;
  uint64_t v19 = off_1E9129BF8;
  if (!off_1E9129BF8)
  {
    uint64_t v6 = sub_18B1403F4(a1, a2, a3, a4);
    v17[3] = (uint64_t)dlsym(v6, "MMCSSignatureAndSchemeSize");
    off_1E9129BF8 = (_UNKNOWN *)v17[3];
    id v5 = (void (*)(uint64_t))v17[3];
  }
  _Block_object_dispose(&v16, 8);
  if (v5)
  {
    v5(a1);
  }
  else
  {
    uint64_t v10 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v7, v8, v9);
    uint64_t v13 = objc_msgSend_stringWithUTF8String_(NSString, v11, (uint64_t)"size_t __MMCSSignatureAndSchemeSize(const unsigned char *)", v12);
    uint64_t v14 = dlerror();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v10, v15, (uint64_t)v13, @"CKSignatureGenerator.m", 49, @"%s", v14);

    __break(1u);
  }
}

void sub_18B13FB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B13FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B13FEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B1400BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B14027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18B1403A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  Class result = dlsym(v5, "MMCSSignatureGeneratorCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE10 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B1403F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  if (!qword_1E9129BF0)
  {
    v11[1] = (void *)MEMORY[0x1E4F143A8];
    v11[2] = (void *)3221225472;
    void v11[3] = sub_18B140548;
    void v11[4] = &unk_1E545FFA8;
    v11[5] = v11;
    long long v12 = xmmword_1E5465108;
    uint64_t v13 = 0;
    qword_1E9129BF0 = _sl_dlopen();
  }
  id v4 = (void *)qword_1E9129BF0;
  if (!qword_1E9129BF0)
  {
    id v4 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
    uint64_t v9 = objc_msgSend_stringWithUTF8String_(NSString, v7, (uint64_t)"void *MMCSLibrary(void)", v8);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v10, (uint64_t)v9, @"CKSignatureGenerator.m", 22, @"%s", v11[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v5 = v11[0];
  if (v11[0]) {
LABEL_7:
  }
    free(v5);
  return v4;
}

uint64_t sub_18B140548()
{
  uint64_t result = _sl_dlopen();
  qword_1E9129BF0 = result;
  return result;
}

void *sub_18B1405BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureGeneratorCreateWithBoundaryKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE18 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B14060C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureGeneratorCreateWithVerificationKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE20 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B14065C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureGeneratorFinish");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE28 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B1406AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureGeneratorUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE30 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B1406FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureAndSchemeSize");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E9129BF8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B14074C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureCreateFromFileDescriptor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE38 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B14079C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureCreateWithBoundaryKeyFromFileDescriptor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE40 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B1407EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureIsValid");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E912FE48 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18B14083C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = sub_18B1403F4(a1, a2, a3, a4);
  uint64_t result = dlsym(v5, "MMCSSignatureIsValidV2");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E9129C00 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18B14088C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v11 = a3;
  uint64_t v6 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v7 = *MEMORY[0x1E4F1C3C8];
  uint64_t v8 = (objc_class *)objc_opt_class();
  uint64_t v10 = NSStringFromClass(v8);
  if (v11) {
    objc_msgSend_raise_format_(v6, v9, v7, @"Can't bind object %p of type %@ in statement %@ at index %ld", a1, v10, v11[3], a4);
  }
  else {
    objc_msgSend_raise_format_(v6, v9, v7, @"Can't bind object %p of type %@ in statement %@ at index %ld", a1, v10, 0, a4);
  }
}

uint64_t sub_18B140940(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    int v5 = (int)a2;
    uint64_t v6 = (void *)result;
    if (!*(unsigned char *)(result + 8))
    {
      uint64_t v9 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, (uint64_t)sel_bindInt_atIndex_, (uint64_t)v6, @"CKSQLiteStatement.m", 203, @"Statement is not reset: \"%@\"", v6[3]);
    }
    uint64_t result = v6[4];
    if (result)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a3 + 1, v5);
      if (result) {
        return objc_msgSend_invalidate_(v6, v7, @"Error binding int at %ld: \"%@\"", v8, a3, v6[3]);
      }
    }
  }
  return result;
}

uint64_t sub_18B140A08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18B140A18(a3, a1, a4);
}

uint64_t sub_18B140A18(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v8 = v5;
  if (!a1) {
    goto LABEL_10;
  }
  id v23 = (id)v5;
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v20 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], (const char *)v5, v6, v7);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v20, v21, (uint64_t)sel_bindBlob_atIndex_, a1, @"CKSQLiteStatement.m", 227, @"Statement is not reset: \"%@\"", *(void *)(a1 + 24));

    if (v23) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v5 = sub_18B140C14(a1, a3);
    goto LABEL_9;
  }
  if (!v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = (uint64_t)sub_18AF27A7C((void *)a1, v23);
  uint64_t v8 = (uint64_t)v23;
  uint64_t v9 = *(sqlite3_stmt **)(a1 + 32);
  if (v9)
  {
    id v10 = v23;
    uint64_t v14 = (const void *)objc_msgSend_bytes(v10, v11, v12, v13);
    int v18 = objc_msgSend_length(v10, v15, v16, v17);
    uint64_t v5 = sqlite3_bind_blob(v9, a3 + 1, v14, v18, 0);
    uint64_t v8 = (uint64_t)v23;
    if (v5)
    {
      uint64_t v5 = objc_msgSend_invalidate_((void *)a1, (const char *)v23, @"Error binding blob at %ld: \"%@\"", v19, a3, *(void *)(a1 + 24));
LABEL_9:
      uint64_t v8 = (uint64_t)v23;
    }
  }
LABEL_10:

  return MEMORY[0x1F41817F8](v5, v8);
}

void sub_18B140B5C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  v11[1] = 0;
  id v6 = a3;
  objc_msgSend_getUUIDBytes_(a1, v7, (uint64_t)v11, v8);
  id v10 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v9, (uint64_t)v11, 16);
  sub_18B140A18((uint64_t)v6, v10, a4);
}

uint64_t sub_18B140C08(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_18B140C14(a3, a4);
}

uint64_t sub_18B140C14(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    uint64_t result = *(void *)(result + 32);
    if (result)
    {
      uint64_t result = sqlite3_bind_null((sqlite3_stmt *)result, a2 + 1);
      if ((_BYTE)result)
      {
        return objc_msgSend_invalidate_(v2, v3, @"sqlite3_bind_null error", v4);
      }
    }
  }
  return result;
}

uint64_t sub_18B140C78(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v19 = a3;
  uint64_t v9 = objc_msgSend_timeIntervalSinceReferenceDate(a1, v6, v7, v8);
  uint64_t v13 = v19;
  if (v19)
  {
    double v14 = v12;
    if (!v19[8])
    {
      uint64_t v16 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v19, v10, v11);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v16, v17, (uint64_t)sel_bindDouble_atIndex_, (uint64_t)v19, @"CKSQLiteStatement.m", 219, @"Statement is not reset: \"%@\"", *((void *)v19 + 3));

      uint64_t v13 = v19;
    }
    uint64_t v9 = *((void *)v13 + 4);
    if (v9)
    {
      uint64_t v9 = sqlite3_bind_double((sqlite3_stmt *)v9, a4 + 1, v14);
      uint64_t v13 = v19;
      if (v9)
      {
        uint64_t v9 = objc_msgSend_invalidate_(v19, v19, @"Error binding double at %ld: \"%@\"", v15, a4, *((void *)v19 + 3));
        uint64_t v13 = v19;
      }
    }
  }

  return MEMORY[0x1F41817F8](v9, v13);
}

void sub_18B140D78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = (void *)MEMORY[0x1E4F28DB0];
  id v7 = a3;
  objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(v6, v8, a1, 1, 0);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  sub_18B140A18((uint64_t)v7, v9, a4);
}

void sub_18B140E00(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  objc_msgSend_absoluteString(a1, v7, v8, v9);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bindText_atIndex_(v6, v10, (uint64_t)v11, a4);
}

uint64_t sub_18B140FEC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 8))
    {
      uint64_t v5 = *(sqlite3_stmt **)(result + 32);
      if (v5)
      {
        if (sqlite3_reset(v5)) {
          objc_msgSend_invalidate_((void *)v4, a2, @"Error resetting prepared statement: \"%@\"", a4, *(void *)(v4 + 24));
        }
        id v6 = *(sqlite3_stmt **)(v4 + 32);
        if (v6)
        {
          if (sqlite3_clear_bindings(v6)) {
            objc_msgSend_invalidate_((void *)v4, a2, @"Error clearing prepared statement bindings: \"%@\"", a4, *(void *)(v4 + 24));
          }
        }
      }
      uint64_t result = objc_msgSend_removeAllObjects(*(void **)(v4 + 48), a2, a3, a4);
      *(unsigned char *)(v4 + _Block_object_dispose(&STACK[0x3B0], 8) = 1;
    }
  }
  return result;
}

uint64_t sub_18B141084(uint64_t a1, const char *iCol, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  int v4 = (int)iCol;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v8 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], iCol, a3, a4);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v8, v9, (uint64_t)sel_intAtIndex_, a1, @"CKSQLiteStatement.m", 293, @"Statement is reset: \"%@\"", *(void *)(a1 + 24));
  }
  id v6 = *(sqlite3_stmt **)(a1 + 32);
  if (!v6) {
    return 0;
  }

  return sqlite3_column_int(v6, v4);
}

void sub_18B141614(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x3032000000;
  v45[3] = sub_18AF140CC;
  void v45[4] = sub_18AF13990;
  id v46 = 0;
  uint64_t v5 = objc_msgSend_createRepairOperationGroupWithName_(*(void **)(a1 + 56), a2, @"Touch Repair Zone", a4);
  uint64_t v9 = objc_msgSend_repairZoneID(*(void **)(a1 + 32), v6, v7, v8);
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = v9;
  }
  else
  {
    double v12 = [CKRecordZoneID alloc];
    id v11 = (id)objc_msgSend_initWithZoneName_ownerName_(v12, v13, @"RepairZone", @"__defaultOwner__");
  }
  double v14 = v11;

  int v18 = objc_msgSend_container(*(void **)(a1 + 40), v15, v16, v17);
  uint64_t v20 = objc_msgSend_createRepairContainerFromContainer_withOverrides_(*(void **)(a1 + 56), v19, (uint64_t)v18, *(void *)(a1 + 32));
  int v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  uint64_t v22 = [CKModifyRecordZonesOperation alloc];
  v47[0] = v14;
  uint64_t v24 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v23, (uint64_t)v47, 1);
  uint64_t v26 = objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(v22, v25, 0, (uint64_t)v24);

  objc_msgSend_setGroup_(v26, v27, (uint64_t)v5, v28);
  uint64_t v39 = MEMORY[0x1E4F143A8];
  uint64_t v40 = 3221225472;
  uint64_t v41 = sub_18B1418C0;
  uint64_t v42 = &unk_1E5465128;
  uint64_t v44 = v45;
  uint64_t v29 = v21;
  uint64_t v43 = v29;
  objc_msgSend_setModifyRecordZonesCompletionBlock_(v26, v30, (uint64_t)&v39, v31);
  uint64_t v35 = objc_msgSend_privateCloudDatabase(v20, v32, v33, v34, v39, v40, v41, v42);
  objc_msgSend_addOperation_(v35, v36, (uint64_t)v26, v37);

  dispatch_group_wait(v29, 0xFFFFFFFFFFFFFFFFLL);
  id v38 = self;

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  _Block_object_dispose(v45, 8);
}

void sub_18B141890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B1418C0(uint64_t a1, int a2, int a3, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  id v6 = obj;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void *sub_18B143A98(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B143C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B143C90(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B143E1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B143FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B144014(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B146B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_clearAllClouddThrottles, a3, a4);
}

void sub_18B146C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B146C20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_18B146CB8;
  v6[3] = &unk_1E5465198;
  v6[4] = *(void *)(a1 + 40);
  objc_msgSend_allClouddThrottlesWithCompletionHandler_(a2, (const char *)a2, (uint64_t)v6, a4);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B146CB8(uint64_t a1, void *a2)
{
  if (!a2) {
    a2 = (void *)MEMORY[0x1E4F1CBF0];
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
}

uint64_t sub_18B146D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_addClouddThrottle_, *(void *)(a1 + 32), a4);
}

uint64_t sub_18B146DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a2, sel_postClouddWalrusUpdateNotification, a3, a4);
}

void sub_18B146E78(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v7 = a3;
  if (v11)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 48)) {
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    }
    else {
    uint64_t v10 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    }
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_18B14718C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 72));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1471C4(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      id v6 = WeakRetained;
      _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Warn: Connection became invalid: %@", (uint8_t *)&v5, 0xCu);
    }
    objc_msgSend_setHasValidLogicalDeviceScopedDaemonProxyCreator_(WeakRetained, v3, 0, v4);
  }
}

void sub_18B1472B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = *(id *)(a1 + 32);
    objc_sync_enter(v7);
    double v14 = objc_msgSend_logicalDeviceScopedDaemonProxyCreator(*(void **)(a1 + 32), v8, v9, v10);
    if (v14
      && (char hasValidLogicalDeviceScopedDaemonProxyCreator = objc_msgSend_hasValidLogicalDeviceScopedDaemonProxyCreator(*(void **)(a1 + 32), v11, v12, v13), v14, (hasValidLogicalDeviceScopedDaemonProxyCreator & 1) != 0))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v16 = ck_log_facility_ck;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v17 = *(void *)(a1 + 32);
      int v24 = 138412546;
      uint64_t v25 = v17;
      __int16 v26 = 2112;
      id v27 = v5;
      int v18 = "Ignoring superfluous logical device proxy for %@: %@";
    }
    else
    {
      objc_msgSend_setLogicalDeviceScopedDaemonProxyCreator_(*(void **)(a1 + 32), v11, (uint64_t)v5, v13);
      objc_msgSend_setHasValidLogicalDeviceScopedDaemonProxyCreator_(*(void **)(a1 + 32), v19, 1, v20);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v16 = ck_log_facility_ck;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO)) {
        goto LABEL_13;
      }
      uint64_t v21 = *(void *)(a1 + 32);
      int v24 = 138412546;
      uint64_t v25 = v21;
      __int16 v26 = 2112;
      id v27 = v5;
      int v18 = "Got a logical device proxy for %@: %@";
    }
    _os_log_impl(&dword_18AF10000, v16, OS_LOG_TYPE_INFO, v18, (uint8_t *)&v24, 0x16u);
LABEL_13:
    objc_sync_exit(v7);

    goto LABEL_18;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v22 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = *(void *)(a1 + 32);
    int v24 = 138412546;
    uint64_t v25 = v23;
    __int16 v26 = 2112;
    id v27 = v6;
    _os_log_impl(&dword_18AF10000, v22, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get logical device proxy for %@: %@", (uint8_t *)&v24, 0x16u);
  }
LABEL_18:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_18B147550(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1475C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED885878, a4);
  id v5 = (void *)qword_1EB279EB0;
  qword_1EB279EB0 = v4;

  id v6 = (void *)qword_1EB279EB0;
  id v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v6, v12, (uint64_t)v13, (uint64_t)sel_allClouddThrottlesWithCompletionHandler_, 0, 1);
}

uint64_t sub_18B1476D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED86A408, a4);
  uint64_t v5 = qword_1EB279EC0;
  qword_1EB279EC0 = v4;

  return MEMORY[0x1F41817F8](v4, v5);
}

uint64_t sub_18B147828()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = qword_1EB279ED0;
  qword_1EB279ED0 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_18B147A3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B147B7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B147F34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B147F50(uint64_t a1, void *a2, void *a3)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v10 = objc_msgSend_containerInfo(v5, v7, v8, v9);
  double v14 = objc_msgSend_setupInfo(*(void **)(a1 + 32), v11, v12, v13);
  id v15 = v10;
  uint64_t v19 = objc_msgSend_containerID(v15, v16, v17, v18);
  uint64_t v23 = objc_msgSend_containerID(v14, v20, v21, v22);
  int isEqual = objc_msgSend_isEqual_(v19, v24, (uint64_t)v23, v25);

  if (!isEqual) {
    goto LABEL_9;
  }
  uint64_t v30 = objc_msgSend_containerOptions(v15, v27, v28, v29);
  uint64_t v34 = objc_msgSend_containerOptions(v14, v31, v32, v33);
  id v38 = objc_msgSend_accountOverrideInfo(v30, v35, v36, v37);
  uint64_t v42 = objc_msgSend_accountOverrideInfo(v34, v39, v40, v41);
  int v43 = CKObjectsAreBothNilOrEqual(v38, v42);

  if (!v43)
  {

LABEL_9:
    goto LABEL_10;
  }
  uint64_t v47 = objc_msgSend_personaIdentifier(v30, v44, v45, v46);
  uint64_t v51 = objc_msgSend_personaIdentifier(v34, v48, v49, v50);
  char v52 = CKObjectsAreBothNilOrEqual(v47, v51);

  if ((v52 & 1) == 0)
  {
LABEL_10:
    uint64_t v71 = (void *)MEMORY[0x1E4F1CBF0];
    goto LABEL_11;
  }
  uint64_t v56 = objc_msgSend_record(*(void **)(a1 + 40), v53, v54, v55);
  uint64_t v60 = objc_msgSend_recordType(v5, v57, v58, v59);
  uint64_t v64 = (void *)v60;
  if (v56
    && v60
    && (objc_msgSend_recordType(v56, v61, v62, v63),
        uint64_t v65 = objc_claimAutoreleasedReturnValue(),
        int isEqualToString = objc_msgSend_isEqualToString_(v64, v66, (uint64_t)v65, v67),
        v65,
        !isEqualToString))
  {
    uint64_t v71 = (void *)MEMORY[0x1E4F1CBF0];
  }
  else
  {
    uint64_t v69 = _Block_copy(v6);
    v73[0] = v69;
    uint64_t v71 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v70, (uint64_t)v73, 1);
  }
LABEL_11:

  return v71;
}

void sub_18B1481B4(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl(&dword_18AF10000, v2, OS_LOG_TYPE_INFO, "Invoking record change handler with record change: %@", (uint8_t *)&v4, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_18B1482A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *sub_18B14876C(void *a1)
{
  if (a1)
  {
    if ((a1[22] & 8) == 0) {
      a1 = (void *)a1[20];
    }
    a1 = a1;
    uint64_t v1 = vars8;
  }
  return a1;
}

BOOL sub_18B149100()
{
  BOOL result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

id sub_18B14A088(void **a1, const char *a2)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  id v131 = 0;
  uint64_t v113 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v2, a2, 0, 0, &v131, &unk_1ED7F0B98);
  id v3 = v131;
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = v4;
    goto LABEL_66;
  }
  id v115 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  id v116 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  id v7 = v113;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v127, (uint64_t)v136, 16);
  if (v12)
  {
    uint64_t v13 = *(void *)v128;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v128 != v13) {
          objc_enumerationMutation(v7);
        }
        id v15 = *(void **)(*((void *)&v127 + 1) + 8 * i);
        objc_msgSend_creatingClass(v15, v9, v10, v11);
        uint64_t v16 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (NSClassFromString(v16))
        {
          if (objc_msgSend_isExpired(v15, v17, v18, v19))
          {
            objc_msgSend_addObject_(v116, v20, (uint64_t)v15, v22);
            objc_msgSend_addObject_(v6, v23, @"expired", v24);
            goto LABEL_14;
          }
          uint64_t v25 = objc_msgSend_groupID(v15, v20, v21, v22);
          uint64_t v33 = objc_msgSend_unsignedIntegerValue(v25, v30, v31, v32);
          objc_msgSend_addIndex_(v115, v34, v33, v35);
        }
        else
        {
          uint64_t v25 = objc_msgSend_stringWithFormat_(NSString, v17, @"Creating class %@ not found", v19, v16);
          objc_msgSend_addObject_(v116, v26, (uint64_t)v15, v27);
          objc_msgSend_addObject_(v6, v28, (uint64_t)v25, v29);
        }

LABEL_14:
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v9, (uint64_t)&v127, (uint64_t)v136, 16);
    }
    while (v12);
  }

  uint64_t v39 = objc_msgSend_error(v7, v36, v37, v38);
  objc_msgSend_invalidate(v7, v40, v41, v42);
  unint64_t v49 = objc_msgSend_count(v116, v43, v44, v45);
  BOOL v50 = v39 == 0;
  if (v49 && !v39)
  {
    unint64_t v51 = 1;
    do
    {
      char v52 = objc_msgSend_objectAtIndex_(v116, v46, v51 - 1, v48);
      uint64_t v55 = objc_msgSend_objectAtIndex_(v6, v53, v51 - 1, v54);
      uint64_t v39 = objc_msgSend_fetchAllProperties_(a1[4], v56, (uint64_t)v52, v57);
      BOOL v50 = v39 == 0;
      if (!v39) {
        objc_msgSend_expireGroup_reason_database_(CKSQLiteTableGroup, v58, (uint64_t)v52, (uint64_t)v55, a1[5]);
      }
    }
    while (v51++ < v49 && v39 == 0);
  }
  if (v50)
  {
    uint64_t v112 = objc_msgSend_tocTable(a1[6], v46, v47, v48);
    id v126 = 0;
    uint64_t v111 = objc_msgSend_entriesWithValues_label_error_setupBlock_(v112, v60, 0, 0, &v126, &unk_1ED7EF7D8);
    id v61 = v126;
    if (v61)
    {
      id v4 = v61;
      uint64_t v5 = v4;
    }
    else
    {
      id v62 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      long long v124 = 0u;
      long long v125 = 0u;
      long long v122 = 0u;
      long long v123 = 0u;
      id v63 = v111;
      uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v64, (uint64_t)&v122, (uint64_t)v133, 16);
      if (v68)
      {
        uint64_t v69 = *(void *)v123;
        while (2)
        {
          uint64_t v70 = 0;
          do
          {
            if (*(void *)v123 != v69) {
              objc_enumerationMutation(v63);
            }
            uint64_t v71 = *(void **)(*((void *)&v122 + 1) + 8 * v70);
            uint64_t v72 = objc_msgSend_groupID(v71, v65, v66, v67);
            uint64_t v76 = objc_msgSend_dbTableName(v71, v73, v74, v75);
            uint64_t v80 = objc_msgSend_unsignedIntegerValue(v72, v77, v78, v79);
            if (objc_msgSend_containsIndex_(v115, v81, v80, v82))
            {
              objc_msgSend_addObject_(v62, v83, (uint64_t)v76, v84);
            }
            else
            {
              if (ck_log_initialization_predicate != -1) {
                dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
              }
              long long v85 = ck_log_facility_sql;
              if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138543362;
                uint64_t v135 = (uint64_t)v76;
                _os_log_impl(&dword_18AF10000, v85, OS_LOG_TYPE_INFO, "Removing TOC entry for table: %{public}@", buf, 0xCu);
              }
              long long v88 = objc_msgSend_deleteObject_(v112, v86, (uint64_t)v71, v87);
              if (v88)
              {
                id v4 = v88;

                uint64_t v5 = v4;
                goto LABEL_63;
              }
            }

            ++v70;
          }
          while (v68 != v70);
          uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v65, (uint64_t)&v122, (uint64_t)v133, 16);
          if (v68) {
            continue;
          }
          break;
        }
      }

      uint64_t v92 = objc_msgSend_error(v63, v89, v90, v91);
      if (v92)
      {
        id v4 = v92;
        uint64_t v5 = v4;
      }
      else
      {
        uint64_t v95 = a1[5];
        id v121 = 0;
        uint64_t v96 = objc_msgSend_allTableNames_(v95, v93, (uint64_t)&v121, v94);
        id v4 = v121;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        id v97 = v96;
        uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v97, v98, (uint64_t)&v117, (uint64_t)v132, 16);
        if (v5)
        {
          uint64_t v101 = *(void *)v118;
          while (2)
          {
            uint64_t v102 = 0;
            do
            {
              if (*(void *)v118 != v101) {
                objc_enumerationMutation(v97);
              }
              uint64_t v103 = *(void *)(*((void *)&v117 + 1) + 8 * (void)v102);
              uint64_t v104 = objc_msgSend_member_(v62, v99, v103, v100);
              BOOL v105 = v104 == 0;

              if (v105)
              {
                if (ck_log_initialization_predicate != -1) {
                  dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
                }
                objc_super v106 = ck_log_facility_sql;
                if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138543362;
                  uint64_t v135 = v103;
                  _os_log_impl(&dword_18AF10000, v106, OS_LOG_TYPE_INFO, "Dropping db table due to no TOC entry: %{public}@", buf, 0xCu);
                }
                __int16 v109 = objc_msgSend_dropTable_(a1[5], v107, v103, v108);

                if (v109)
                {
                  id v4 = v109;
                  uint64_t v5 = v4;
                  goto LABEL_62;
                }
                id v4 = 0;
              }
              uint64_t v102 = (char *)v102 + 1;
            }
            while (v5 != v102);
            uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v97, v99, (uint64_t)&v117, (uint64_t)v132, 16);
            if (v5) {
              continue;
            }
            break;
          }
        }
LABEL_62:
      }
LABEL_63:
    }
  }
  else
  {
    id v4 = v39;
    uint64_t v5 = v4;
  }

LABEL_66:

  return v5;
}

void sub_18B14A900(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = CKSQLiteTOCTableGroupTableGroupIDPropertyName;
  uint64_t v9 = CKSQLiteTOCTableGroupTableLastUsedPropertyName;
  uint64_t v10 = CKSQLiteTOCTableGroupTableCreatingClassPropertyName;
  uint64_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  uint64_t v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)&v8, 3);
  objc_msgSend_setFetchedProperties_(v3, v6, (uint64_t)v5, v7, v8, v9, v10, v11);
}

void sub_18B14A9B8(uint64_t a1, void *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v8[0] = CKSQLiteTOCTableEntryGroupIDPropertyName;
  v8[1] = CKSQLiteTOCTableEntryDbTablePropertyName;
  uint64_t v2 = (void *)MEMORY[0x1E4F1C978];
  id v3 = a2;
  uint64_t v5 = objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)v8, 2);
  objc_msgSend_setFetchedProperties_(v3, v6, (uint64_t)v5, v7);
}

id sub_18B14B73C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_statementForFetchingAllTableNamesInDatabase_(CKSQLiteCompiledStatement, a2, *(void *)(a1 + 32), a4);
  id v25 = 0;
  int v8 = objc_msgSend_step_(v5, v6, (uint64_t)&v25, v7);
  id v9 = v25;
  uint64_t v13 = v9;
  if (v8) {
    BOOL v14 = v9 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v15 = MEMORY[0x1E4F143A8];
    do
    {
      v23[0] = v15;
      v23[1] = 3221225472;
      v23[2] = sub_18B14B878;
      v23[3] = &unk_1E54603C8;
      id v24 = *(id *)(a1 + 40);
      objc_msgSend_enumerateResultColumnsWithBlock_(v5, v16, (uint64_t)v23, v17);

      id v25 = 0;
      int v20 = objc_msgSend_step_(v5, v18, (uint64_t)&v25, v19);
      id v21 = v25;
      uint64_t v13 = v21;
    }
    while (v20 && !v21);
  }
  objc_msgSend_invalidate(v5, v10, v11, v12);

  return v13;
}

uint64_t sub_18B14B878(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, a4, a4);
}

uint64_t sub_18B14BC60(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1 == 1)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v6 = ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 134218242;
      uint64_t v9 = a2;
      __int16 v10 = 2080;
      uint64_t v11 = a4;
      _os_log_debug_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEBUG, "SQLitDatabase(%p) statement executing: %s", (uint8_t *)&v8, 0x16u);
    }
  }
  return 0;
}

void sub_18B14C954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_mutex_t *a12)
{
  if (v12)
  {
    v12[1].__sig = 0;
    pthread_mutex_unlock(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B14CA38(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B14CBBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B14CC4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B14CCEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B14CF54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B14D134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B14D14C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B14D2D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B14D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B14D4D0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B14D65C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B14D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B14D854(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B14E364(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_metadata(a2, (const char *)a2, a3, a4);
  uint64_t v9 = objc_msgSend_identifier(v5, v6, v7, v8);
  uint64_t isEqual = objc_msgSend_isEqual_(v9, v10, *(void *)(a1 + 32), v11);

  return isEqual;
}

void *sub_18B14ECE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B14EEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B14EEE0(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B14FF58()
{
  uint64_t v0 = [CKLogicalDeviceContext alloc];
  uint64_t v2 = objc_msgSend__initWithTestDeviceReferenceProtocol_useLiveServer_(v0, v1, 0, 1);
  uint64_t v3 = qword_1EB279F08;
  qword_1EB279F08 = v2;

  return MEMORY[0x1F41817F8](v2, v3);
}

void sub_18B150148(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B150264(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1502F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B150380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B15067C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B150714(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *CKPCSKeyToRemoveKeyTypeString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"INVALID";
  }
  else {
    return off_1E54652E8[a1 - 1];
  }
}

uint64_t CKPCSKeyToRemoveKeyTypeFromString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 1;
  if (objc_msgSend_compare_options_(v1, v3, @"Primary", 1))
  {
    if (objc_msgSend_compare_options_(v1, v4, @"KeyPair", 1))
    {
      if (objc_msgSend_compare_options_(v1, v5, @"Sharee", 1)) {
        uint64_t v2 = 2;
      }
      else {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }

  return v2;
}

uint64_t sub_18B1510EC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v9 = objc_msgSend_length(v4, v6, v7, v8);
  uint64_t v13 = objc_msgSend_length(v5, v10, v11, v12);
  if (v9)
  {
    if (v13)
    {
      if (objc_msgSend_isEqualToData_(v4, v14, (uint64_t)v5, v15))
      {
        uint64_t v16 = 0;
        goto LABEL_16;
      }
      id v17 = v4;
      id v21 = (const void *)objc_msgSend_bytes(v17, v18, v19, v20);
      id v22 = v5;
      __int16 v26 = (const void *)objc_msgSend_bytes(v22, v23, v24, v25);
      unint64_t v30 = objc_msgSend_length(v17, v27, v28, v29);
      unint64_t v34 = objc_msgSend_length(v22, v31, v32, v33);
      if (v30 >= v34) {
        size_t v35 = v34;
      }
      else {
        size_t v35 = v30;
      }
      int v36 = memcmp(v21, v26, v35);
      if (v36 < 0
        || !v36 && (unint64_t v40 = objc_msgSend_length(v17, v37, v38, v39), v40 < objc_msgSend_length(v22, v41, v42, v43)))
      {
        uint64_t v16 = -1;
        goto LABEL_16;
      }
    }
    uint64_t v16 = 1;
    goto LABEL_16;
  }
  if (v13) {
    uint64_t v16 = -1;
  }
  else {
    uint64_t v16 = 0;
  }
LABEL_16:

  return v16;
}

void *sub_18B1517B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B151994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1519AC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B151B38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B151D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B151D30(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B153810(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x3B0], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1539F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B153A08(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B153B94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 536);
    *(void *)(v8 + 536) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B153D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B153D8C(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 536));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B153F18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 544) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 544);
    *(void *)(v8 + 544) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1540F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B154110(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 544));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B15429C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 552) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 552);
    *(void *)(v8 + 552) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B15447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B154494(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 552));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B154F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B154FA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  return result;
}

void sub_18B154FB0(uint64_t a1)
{
}

uint64_t sub_18B154FB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v4) {
    objc_msgSend_addObject_(*(void **)(v4 + 576), a2, a3, a4);
  }
  else {
    objc_msgSend_addObject_(0, a2, a3, a4);
  }
  return 0;
}

uint64_t sub_18B154FF8(uint64_t a1, int a2, int a3, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  return 1;
}

uint64_t sub_18B155A9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    *(void *)(v4 + 584) += a2;
    uint64_t v5 = *(void *)(result + 32);
    if (v5)
    {
      *(void *)(v5 + 592) += a3;
      uint64_t v6 = *(void *)(result + 32);
      if (v6) {
        *(void *)(v6 + 600) += a4;
      }
    }
  }
  return result;
}

void sub_18B157E2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B159A58(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_userInfo(a1, a2, a3, a4);
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, @"ck_isComparisonError", v6);
  uint64_t v11 = objc_msgSend_BOOLValue(v7, v8, v9, v10);

  return v11;
}

void sub_18B159D9C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

__CFString *sub_18B15A594(unint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1 > 2)
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"%lu", a4, a1);
    uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v4 = off_1E5465300[a1];
  }

  return v4;
}

__CFString *sub_18B15BD94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1 > 98)
  {
    switch(a1)
    {
      case 99:
        uint64_t v5 = @"CONTAINS";
        break;
      case 100:
        uint64_t v5 = @"BETWEEN";
        break;
      case 1000:
        uint64_t v5 = @"TOKENMATCHES";
        break;
      default:
LABEL_48:
        objc_msgSend_stringWithFormat_(NSString, a2, @"%lu", a4, a1);
        uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        uint64_t v5 = @"<";
        break;
      case 1:
        uint64_t v5 = @"<=";
        break;
      case 2:
        uint64_t v5 = @">";
        break;
      case 3:
        uint64_t v5 = @">=";
        break;
      case 4:
        uint64_t v5 = @"==";
        break;
      case 5:
        uint64_t v5 = @"!=";
        break;
      case 6:
        uint64_t v5 = @"MATCHES";
        break;
      case 7:
        uint64_t v5 = @"LIKE";
        break;
      case 8:
        uint64_t v5 = @"BEGINSWITH";
        break;
      case 9:
        uint64_t v5 = @"ENDSWITH";
        break;
      case 10:
        uint64_t v5 = @"IN";
        break;
      default:
        goto LABEL_48;
    }
  }
  return v5;
}

__CFString *sub_18B15C2E8(unint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1 >= 3)
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"%lu", a4, a1);
    uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v4 = off_1E5465318[a1];
  }

  return v4;
}

void *sub_18B15C3DC(void *result, uint64_t a2)
{
  if (result)
  {
    v3.receiver = result;
    v3.super_class = (Class)CKComparisonOptionsValidator;
    BOOL result = objc_msgSendSuper2(&v3, sel_init);
    if (result) {
      result[1] = a2;
    }
  }
  return result;
}

__CFString *sub_18B15C6B8(char a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_array(MEMORY[0x1E4F1CA48], a2, a3, a4);
  uint64_t v9 = v5;
  if (a1)
  {
    objc_msgSend_addObject_(v5, v6, @"c", v8);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend_addObject_(v9, v6, @"d", v8);
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_10:
  objc_msgSend_addObject_(v9, v6, @"n", v8);
  if ((a1 & 8) != 0) {
LABEL_5:
  }
    objc_msgSend_addObject_(v9, v6, @"l", v8);
LABEL_6:
  if (objc_msgSend_count(v9, v6, v7, v8))
  {
    objc_msgSend_insertObject_atIndex_(v9, v10, @"[", 0);
    objc_msgSend_addObject_(v9, v11, @"]", v12);
    objc_msgSend_componentsJoinedByString_(v9, v13, (uint64_t)&stru_1ED7F5C98, v14);
    uint64_t v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v15 = @"(none)";
  }

  return v15;
}

id *sub_18B15D83C(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  v10.receiver = a1;
  v10.super_class = (Class)CKFunctionExpressionValidator;
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = (id *)objc_msgSendSuper2(&v10, sel_init);
  uint64_t v7 = v6;
  if (v6)
  {
    objc_storeStrong(v6 + 1, a2);

    id v8 = v4;
    id v5 = v7[2];
    v7[2] = v8;
  }

  return v7;
}

id *sub_18B15E280(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  v6.receiver = a1;
  v6.super_class = (Class)CKKindOfClassValidator;
  objc_super v3 = (id *)objc_msgSendSuper2(&v6, sel_init);
  id v4 = v3;
  if (v3) {
    objc_storeStrong(v3 + 1, a2);
  }
  return v4;
}

void *sub_18B15F0C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B15F2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B15F2B8(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B15FE5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B15FF5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1605B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B160718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

BOOL CKDPDistributedTimestampsReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(CKDPSiteIdentifier);
        objc_msgSend_addSiteIdentifiers_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || !CKDPSiteIdentifierReadFrom((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    id v17 = objc_alloc_init(CKDPDistributedTimestampsSiteVersionVectors);
    objc_msgSend_addSiteVersionVectors_(a1, v20, (uint64_t)v17, v21);
    if (!PBReaderPlaceMark() || !CKDPDistributedTimestampsSiteVersionVectorsReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id sub_18B162BCC()
{
  uint64_t v0 = objc_opt_class();
  uint64_t v4 = sub_18B11DC44(v0, v1, v2, v3);
  id v5 = sub_18B11DD30(&unk_1ED7EF598);
  v356 = sub_18B11CA40(v4, v6, v7, v8, v9, v10, v11, v12, v5, 0);

  char v13 = sub_18B11DE24();
  uint64_t v20 = sub_18B11E258(@"tokenize:using:", v13, v14, v15, v16, v17, v18, v19, v356, 0);

  uint64_t v21 = sub_18B11DFEC();
  id v22 = objc_opt_class();
  __int16 v26 = sub_18B11DC44(v22, v23, v24, v25);
  unint64_t v34 = sub_18B11C908(v21, v27, v28, v29, v30, v31, v32, v33, v26, 0);
  size_t v35 = sub_18B11DFEC();
  int v36 = objc_opt_class();
  unint64_t v40 = sub_18B11DC44(v36, v37, v38, v39);
  uint64_t v48 = sub_18B11C908(v35, v41, v42, v43, v44, v45, v46, v47, v40, 0);
  v290 = sub_18B11E258(@"distanceToLocation:fromLocation:", v34, v49, v50, v51, v52, v53, v54, v48, 0);

  v364 = sub_18B11E258(@"now", 0, v55, v56, v57, v58, v59, v60, v197, v198);
  v355 = sub_18B11D748();
  v354 = sub_18B11DE24();
  v353 = sub_18B11D6B0();
  v352 = sub_18B11D9E4();
  v351 = sub_18B11E134();
  v379 = sub_18B11CDF8(v355, v354, v353, v352, v351);
  v350 = sub_18B11D748();
  v349 = sub_18B11D7E0();
  v348 = sub_18B11C908(v350, v61, v62, v63, v64, v65, v66, v67, v349, 0);
  v347 = sub_18B11E134();
  v346 = sub_18B11D6B0();
  v345 = sub_18B11D9E4();
  v344 = sub_18B11DE24();
  v378 = sub_18B11CDF8(v348, v347, v346, v345, v344);
  v342 = sub_18B11D7E0();
  v341 = sub_18B11E134();
  v340 = sub_18B11D4E8();
  v339 = sub_18B11D954();
  v377 = sub_18B11CDF8(v342, v341, v340, v339, v20);
  v338 = sub_18B11D878();
  v337 = sub_18B11D7E0();
  v336 = sub_18B11C908(v338, v68, v69, v70, v71, v72, v73, v74, v337, 0);
  v335 = sub_18B11D4E8();
  v334 = sub_18B11D954();
  v333 = sub_18B11E134();
  v343 = v20;
  v376 = sub_18B11CDF8(v336, v20, v335, v334, v333);
  v332 = sub_18B11D878();
  v331 = sub_18B11D6B0();
  v330 = sub_18B11D9E4();
  v329 = sub_18B11E134();
  v375 = sub_18B11CDF8(v332, v20, v331, v330, v329);
  v328 = sub_18B11D748();
  v327 = sub_18B11D7E0();
  v326 = sub_18B11D878();
  v325 = sub_18B11C908(v328, v75, v76, v77, v78, v79, v80, v81, v327, (uint64_t)v326);
  v324 = sub_18B11E1C8();
  v323 = sub_18B11D580();
  v322 = sub_18B11D954();
  v321 = sub_18B11DE24();
  v374 = sub_18B11CDF8(v325, v324, v323, v322, v321);
  v320 = sub_18B11D748();
  v319 = sub_18B11DAB8();
  v318 = sub_18B11D4E8();
  v317 = sub_18B11D954();
  v316 = sub_18B11DFEC();
  v373 = sub_18B11CDF8(v320, v319, v318, v317, v316);
  v315 = sub_18B11D748();
  v314 = sub_18B11DFEC();
  v313 = sub_18B11D580();
  v312 = sub_18B11D954();
  v311 = sub_18B11DAB8();
  v372 = sub_18B11CDF8(v315, v314, v313, v312, v311);
  v310 = sub_18B11D7E0();
  v309 = sub_18B11DFEC();
  v308 = sub_18B11D0C0();
  v307 = sub_18B11D954();
  v306 = sub_18B11DAB8();
  v371 = sub_18B11CDF8(v310, v309, v308, v307, v306);
  v305 = sub_18B11D748();
  v304 = sub_18B11D7E0();
  v303 = sub_18B11C908(v305, v82, v83, v84, v85, v86, v87, v88, v304, 0);
  v302 = sub_18B11DFEC();
  v301 = sub_18B11D4E8();
  v300 = sub_18B11D954();
  v299 = sub_18B11DB7C();
  v370 = sub_18B11CDF8(v303, v302, v301, v300, v299);
  v298 = sub_18B11D748();
  v297 = sub_18B11D7E0();
  v296 = sub_18B11C908(v298, v89, v90, v91, v92, v93, v94, v95, v297, 0);
  v295 = sub_18B11DFEC();
  v294 = sub_18B11D4E8();
  v292 = sub_18B11D954();
  v293 = sub_18B11DAB8();
  v291 = sub_18B11E3B8(v293, v96, v97, v98, v99, v100, v101, v102, 0, v199);
  v369 = sub_18B11CDF8(v296, v295, v294, v292, v291);
  v289 = sub_18B11D7E0();
  v288 = sub_18B11DB7C();
  v287 = sub_18B11D0C0();
  v286 = sub_18B11D954();
  v285 = sub_18B11DFEC();
  v368 = sub_18B11CDF8(v289, v288, v287, v286, v285);
  v283 = sub_18B11D7E0();
  v284 = sub_18B11DAB8();
  v282 = sub_18B11E3B8(v284, v103, v104, v105, v106, v107, v108, v109, 0, v200);
  v281 = sub_18B11D0C0();
  v280 = sub_18B11D954();
  v279 = sub_18B11DFEC();
  v367 = sub_18B11CDF8(v283, v282, v281, v280, v279);
  v278 = sub_18B11D748();
  v277 = sub_18B11DB7C();
  v276 = sub_18B11D580();
  v275 = sub_18B11D954();
  v274 = sub_18B11DFEC();
  v366 = sub_18B11CDF8(v278, v277, v276, v275, v274);
  v272 = sub_18B11D748();
  v273 = sub_18B11DAB8();
  v271 = sub_18B11E3B8(v273, v110, v111, v112, v113, v114, v115, v116, 0, v201);
  v270 = sub_18B11D580();
  v269 = sub_18B11D954();
  v268 = sub_18B11DFEC();
  v365 = sub_18B11CDF8(v272, v271, v270, v269, v268);
  v267 = sub_18B11D7E0();
  v266 = sub_18B11D878();
  v264 = sub_18B11C908(v267, v117, v118, v119, v120, v121, v122, v123, v266, 0);
  v263 = sub_18B11DB7C();
  v262 = sub_18B11D4E8();
  v261 = sub_18B11D954();
  v260 = sub_18B11DFEC();
  v363 = sub_18B11CDF8(v264, v263, v262, v261, v260);
  v259 = sub_18B11D7E0();
  v258 = sub_18B11D878();
  v256 = sub_18B11C908(v259, v124, v125, v126, v127, v128, v129, v130, v258, 0);
  v257 = sub_18B11DAB8();
  v255 = sub_18B11E3B8(v257, v131, v132, v133, v134, v135, v136, v137, 0, v202);
  v254 = sub_18B11D4E8();
  v253 = sub_18B11D954();
  uint64_t v252 = sub_18B11DFEC();
  v362 = sub_18B11CDF8(v256, v255, v254, v253, v252);
  v251 = sub_18B11D748();
  __int16 v250 = sub_18B11DFEC();
  v249 = sub_18B11D450();
  __int16 v246 = sub_18B11D954();
  __int16 v248 = sub_18B11DE24();
  v247 = sub_18B11DEBC();
  v245 = sub_18B11C908(v248, v138, v139, v140, v141, v142, v143, v144, v247, 0);
  v361 = sub_18B11CDF8(v251, v250, v249, v246, v245);
  __int16 v244 = sub_18B11D748();
  uint64_t v243 = sub_18B11DFEC();
  v242 = sub_18B11D618();
  v239 = sub_18B11D954();
  v241 = sub_18B11DF54();
  v240 = sub_18B11DF54();
  id v238 = sub_18B11E3B8(v241, v145, v146, v147, v148, v149, v150, v151, v240, 0);
  v360 = sub_18B11CDF8(v244, v243, v242, v239, v238);
  id v237 = sub_18B11D748();
  id v236 = sub_18B11D1F0();
  v235 = sub_18B11D954();
  v234 = sub_18B11DF54();
  uint64_t v233 = sub_18B11CDF8(v237, v290, v236, v235, v234);
  v359 = sub_18B11CDA0(v233);
  v232 = sub_18B11D748();
  uint64_t v231 = sub_18B11E0B0(@"___share");
  v230 = sub_18B11D158();
  v229 = sub_18B11D954();
  v228 = sub_18B11E4CC();
  v358 = sub_18B11CDF8(v232, v231, v230, v229, v228);
  int v227 = sub_18B11D748();
  v226 = sub_18B11E0B0(@"___parent");
  uint64_t v225 = sub_18B11D158();
  v224 = sub_18B11D954();
  uint64_t v223 = sub_18B11E4CC();
  v357 = sub_18B11CDF8(v227, v226, v225, v224, v223);
  v220 = sub_18B11D748();
  uint64_t v222 = sub_18B11DFEC();
  v221 = sub_18B11E1C8();
  v215 = sub_18B11C908(v222, v152, v153, v154, v155, v156, v157, v158, v221, 0);
  uint64_t v219 = sub_18B11D0C0();
  uint64_t v218 = sub_18B11D158();
  v217 = sub_18B11D1F0();
  v216 = sub_18B11D288();
  uint64_t v214 = sub_18B11D320();
  uint64_t v213 = sub_18B11D3B8();
  v212 = sub_18B11C908(v219, v159, v160, v161, v162, v163, v164, v165, v218, (uint64_t)v217);
  uint64_t v211 = sub_18B11D954();
  v210 = sub_18B11DAB8();
  v209 = sub_18B11CDF8(v220, v215, v212, v211, v210);
  id v166 = sub_18B11CDA0(v209);
  v206 = sub_18B11D748();
  uint64_t v208 = sub_18B11DFEC();
  uint64_t v207 = sub_18B11E1C8();
  v204 = sub_18B11C908(v208, v167, v168, v169, v170, v171, v172, v173, v207, 0);
  uint64_t v205 = sub_18B11D0C0();
  uint64_t v174 = sub_18B11D158();
  v175 = sub_18B11D1F0();
  id v176 = sub_18B11D288();
  uint64_t v177 = sub_18B11D320();
  uint64_t v178 = sub_18B11D3B8();
  v186 = sub_18B11C908(v205, v179, v180, v181, v182, v183, v184, v185, v174, (uint64_t)v175);
  uint64_t v187 = sub_18B11D954();
  v188 = sub_18B11CDF8(v206, v204, v186, v187, v364);
  uint64_t v203 = sub_18B11CDA0(v188);
  sub_18B11C908(v379, v189, v190, v191, v192, v193, v194, v195, v378, (uint64_t)v377);
  id v265 = (id)objc_claimAutoreleasedReturnValue();

  return v265;
}

id sub_18B1640F0(uint64_t a1, void *a2)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v6 = objc_msgSend_lowercaseString(v2, v3, v4, v5);
  uint64_t v9 = objc_msgSend_rangeOfString_(v6, v7, @"c", v8);
  uint64_t v12 = objc_msgSend_rangeOfString_(v6, v10, @"d", v11);
  uint64_t v15 = objc_msgSend_rangeOfString_(v6, v13, @"l", v14);
  if (v9 == 0x7FFFFFFFFFFFFFFFLL || v12 == 0x7FFFFFFFFFFFFFFFLL || v15 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v19 = objc_msgSend_stringWithFormat_(NSString, v16, @"Invalid argument value: %@", v17, v2);
    uint64_t v20 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v25 = *MEMORY[0x1E4F28568];
    v26[0] = v19;
    id v22 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v21, (uint64_t)v26, (uint64_t)&v25, 1);
    uint64_t v18 = objc_msgSend_errorWithDomain_code_userInfo_(v20, v23, @"CKErrorDomain", 12, v22);
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void *sub_18B164790(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B164970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B164988(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B164B14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B164CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B164D0C(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B165FB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B166148(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1661BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B166474(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1664E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B166570(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1665E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18B1669FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B166F18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B167014(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B167108(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B167340(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B167438(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B167514(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1675E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B167650(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1676D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1677C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1677D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_errorInducerID(a2, (const char *)a2, a3, a4);
  uint64_t v8 = objc_msgSend_isEqualToString_(v5, v6, *(void *)(a1 + 32), v7) ^ 1;

  return v8;
}

void sub_18B1678B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1678D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_hasFired(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B1678D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_hasFired(a2, (const char *)a2, a3, a4) ^ 1;
}

void sub_18B167964(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B167A54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B167A68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_testResultOverlayID(a2, (const char *)a2, a3, a4);
  uint64_t v8 = objc_msgSend_isEqualToString_(v5, v6, *(void *)(a1 + 32), v7) ^ 1;

  return v8;
}

void sub_18B167E48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B168990(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B168B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B168B88(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B16C7EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_objectForKey_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

uint64_t sub_18B16D238(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_replacementDeltas(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18B16D240(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_metadata(a2, (const char *)a2, a3, a4);
}

void sub_18B16D608(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    uint64_t v8 = objc_msgSend_valueID(v3, v5, v6, v7);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2048;
    uint64_t v12 = 300;
    _os_log_fault_impl(&dword_18AF10000, v4, OS_LOG_TYPE_FAULT, "Mergeable %@ exceeded high limit of %lu site identifiers", (uint8_t *)&v9, 0x16u);
  }
}

void sub_18B16D714(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    uint64_t v8 = objc_msgSend_valueID(v3, v5, v6, v7);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2048;
    uint64_t v12 = 100;
    _os_log_fault_impl(&dword_18AF10000, v4, OS_LOG_TYPE_FAULT, "Mergeable %@ exceeded medium limit of %lu site identifiers", (uint8_t *)&v9, 0x16u);
  }
}

void sub_18B16D820(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    uint64_t v8 = objc_msgSend_valueID(v3, v5, v6, v7);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2048;
    uint64_t v12 = 50;
    _os_log_fault_impl(&dword_18AF10000, v4, OS_LOG_TYPE_FAULT, "Mergeable %@ exceeded low limit of %lu site identifiers", (uint8_t *)&v9, 0x16u);
  }
}

void sub_18B16F6C4(_Unwind_Exception *a1)
{
}

void sub_18B16F788(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v12 = objc_msgSend_removableDeltaMetadatas(*(void **)(a1 + 32), v9, v10, v11);
  int v15 = objc_msgSend_containsObject_(v12, v13, (uint64_t)v7, v14);

  if (v15)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v16 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v65 = v7;
      _os_log_debug_impl(&dword_18AF10000, v16, OS_LOG_TYPE_DEBUG, "Will fold delta %@ into new delta", buf, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v17 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      id v65 = v7;
      __int16 v66 = 2112;
      id v67 = v8;
      _os_log_debug_impl(&dword_18AF10000, v17, OS_LOG_TYPE_DEBUG, "Generating replacement for delta %@: %@", buf, 0x16u);
    }
    uint64_t v19 = *(void **)(a1 + 40);
    uint64_t v20 = *(void *)(*(void *)(a1 + 64) + 8);
    id obj = *(id *)(v20 + 40);
    uint64_t v21 = objc_msgSend_mergeableDeltasForMetadata_error_(v19, v18, (uint64_t)v8, (uint64_t)&obj);
    objc_storeStrong((id *)(v20 + 40), obj);
    if (v21 && !*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
    {
      uint64_t v25 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v22, (uint64_t)v7, v23);
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id v26 = v21;
      uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v58, (uint64_t)v63, 16);
      if (v28)
      {
        uint64_t v32 = v28;
        uint64_t v33 = *(void *)v59;
        do
        {
          for (uint64_t i = 0; i != v32; ++i)
          {
            if (*(void *)v59 != v33) {
              objc_enumerationMutation(v26);
            }
            size_t v35 = objc_msgSend_metadata(*(void **)(*((void *)&v58 + 1) + 8 * i), v29, v30, v31, (void)v58);
            objc_msgSend_setReplacedDeltaIdentifiers_(v35, v36, (uint64_t)v25, v37);
          }
          uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v29, (uint64_t)&v58, (uint64_t)v63, 16);
        }
        while (v32);
      }

      uint64_t v38 = [CKReplaceDeltasRequest alloc];
      uint64_t v42 = objc_msgSend_valueID(*(void **)(a1 + 48), v39, v40, v41);
      uint64_t v46 = objc_msgSend_allObjects(v25, v43, v44, v45);
      uint64_t v48 = objc_msgSend_initWithValueID_deltaIdentifiersToReplace_replacementDeltas_replacementDeltasContainNewData_(v38, v47, (uint64_t)v42, (uint64_t)v46, v26, 1);

      objc_msgSend_addObject_(*(void **)(a1 + 56), v49, (uint64_t)v48, v50);
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v24 = (void *)ck_log_facility_distributed_sync;
      if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = *(void **)(a1 + 48);
        uint64_t v52 = v24;
        uint64_t v56 = objc_msgSend_valueID(v51, v53, v54, v55);
        uint64_t v57 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        id v65 = v56;
        __int16 v66 = 2112;
        id v67 = v57;
        _os_log_error_impl(&dword_18AF10000, v52, OS_LOG_TYPE_ERROR, "Error generating replacement deltas for %@: %@", buf, 0x16u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
      *a4 = 1;
    }
  }
}

void *sub_18B1706F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1708D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1708F0(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B170A7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B170C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B170C74(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B170E00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 528);
    *(void *)(v8 + 52_Block_object_dispose(&STACK[0x280], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B170FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B170FF8(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 528));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B172EFC(uint64_t a1, void *a2)
{
  return objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(a2, (const char *)a2, 1, 1, 1);
}

uint64_t sub_18B172F10(uint64_t a1, void *a2)
{
  return objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(a2, (const char *)a2, 1, 1, 1);
}

void sub_18B174884(uint64_t a1, void *a2)
{
  id v2 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_18B174928;
  v6[3] = &unk_1E5465560;
  id v7 = v2;
  id v8 = &unk_1ED846AE8;
  id v3 = v2;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(&unk_1ED846AC0, v4, (uint64_t)v6, v5);
}

void sub_18B174928(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_18B1749F0;
  v9[3] = &unk_1E5465538;
  id v10 = *(id *)(a1 + 32);
  id v11 = v5;
  id v12 = *(id *)(a1 + 40);
  id v6 = v5;
  objc_msgSend_enumerateObjectsUsingBlock_(a3, v7, (uint64_t)v9, v8);
}

void sub_18B1749F0(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v5 = objc_msgSend_columnNamesForTable_(*(void **)(a1 + 32), v3, *(void *)(a1 + 40), v4);
  char v8 = objc_msgSend_containsObject_(v5, v6, (uint64_t)v16, v7);

  if ((v8 & 1) == 0)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 48), v9, (uint64_t)v16, v10);
    objc_msgSend_executeSQL_(v11, v14, @"ALTER TABLE %@ ADD COLUMN %@ %@", v15, v12, v16, v13);
  }
}

void sub_18B175C74(uint64_t a1)
{
  id v2 = NSHomeDirectory();
  int isEqualToString = objc_msgSend_isEqualToString_(v2, v3, @"/var/empty", v4);

  if (isEqualToString)
  {
    id v16 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7, v8);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v16, v17, *(void *)(a1 + 32), *(void *)(a1 + 40), @"CKPackage.m", 457, @"You cannot use CKPackage from a process with $HOME=/var/empty");

    __break(1u);
  }
  else
  {
    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = objc_msgSend_objectAtIndexedSubscript_(v18, v9, 0, v10);
    uint64_t v14 = objc_msgSend_stringByAppendingPathComponent_(v11, v12, @"CloudKit", v13);
    uint64_t v15 = (void *)qword_1EB279F10;
    qword_1EB279F10 = v14;
  }
}

id sub_18B175D60(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = self;
  if (a3 <= 0xC && ((1 << a3) & 0x19E6) != 0)
  {
    if ((a3 & 0xFFFFFFFFFFFFFFFBLL) - 1 >= 2)
    {
      uint64_t v9 = v5;
      if (a3 - 7 < 6 && ((0x33u >> (a3 - 7)) & 1) != 0)
      {
        objc_msgSend_stringByAppendingPathComponent_(v4, v6, @"DaemonPackages", v8);
      }
      else
      {
        uint64_t v10 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v6, v7, v8);
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v10, v11, (uint64_t)sel__packageDatabaseDirectoryWithBasePath_state_, v9, @"CKPackage.m", 496, @"Missing states in _packageDatabasePath entry assert, for package: %@", v9);

        objc_msgSend_stringByAppendingPathComponent_(v4, v12, 0, v13);
      }
    }
    else
    {
      objc_msgSend_stringByAppendingPathComponent_(v4, v6, @"ClientPackages", v8);
    uint64_t v15 = };
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v14 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v18 = a3;
      _os_log_fault_impl(&dword_18AF10000, v14, OS_LOG_TYPE_FAULT, "CKPackage (%ld) in bad state. Package needs to be claimed", buf, 0xCu);
    }
    uint64_t v15 = 0;
  }

  return v15;
}

id sub_18B175F2C(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  self;
  if (a4 <= 0xC && ((1 << a4) & 0x19E6) != 0)
  {
    uint64_t v8 = sub_18B175D60((uint64_t)CKPackage, v6, a4);
    id v11 = objc_msgSend_stringByAppendingPathComponent_(v8, v9, (uint64_t)v7, v10);
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v13 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      int v14 = 138412546;
      id v15 = v7;
      __int16 v16 = 2048;
      unint64_t v17 = a4;
      _os_log_fault_impl(&dword_18AF10000, v13, OS_LOG_TYPE_FAULT, "CKPackage (%@, %ld) in bad state. Package needs to be claimed", (uint8_t *)&v14, 0x16u);
    }
    id v11 = 0;
  }

  return v11;
}

void sub_18B176D78(uint64_t a1, void *a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_18B176E14;
  v7[3] = &unk_1E5462D98;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = v4;
  uint64_t v9 = v5;
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v6, @"update Packages set archiverInfo = ? where packageID = ?", (uint64_t)v7);
}

void sub_18B176E14(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v9 = a2;
  sub_18B140A18((uint64_t)v9, v3, 0);
  id v7 = (const char *)objc_msgSend_packageID(*(void **)(a1 + 40), v4, v5, v6);
  sub_18B140940((uint64_t)v9, v7, 1, v8);
  sub_18AF27740((uint64_t)v9);
}

void sub_18B176F9C(uint64_t a1, void *a2)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  v16[0] = @"packageID";
  id v3 = NSNumber;
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v9 = objc_msgSend_packageID(v4, v6, v7, v8);
  uint64_t v12 = objc_msgSend_numberWithInteger_(v3, v10, v9, v11);
  v16[1] = @"archiverInfo";
  v17[0] = v12;
  v17[1] = *(void *)(a1 + 40);
  int v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v13, (uint64_t)v17, (uint64_t)v16, 2);
  objc_msgSend_insertOrReplaceInto_values_(v5, v15, @"Packages", (uint64_t)v14);
}

id sub_18B177088(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [CKSQLite alloc];
  id v5 = objc_msgSend_initWithPath_schema_(v3, v4, (uint64_t)v2, @"create table if not exists Packages (\n    packageID      integer primary key,\n    signature      blob,\n    verificationKey   blob,\n    archiverInfo   blob\n);\ncreate table if not exists Sections (\n    packageID      integer,\n    packageIndex   integer,\n    signature      blob,\n    verificationKey   blob,\n    size           integer,\n    paddedSize           integer,\n    foreign key (packageID) references Packages(packageID),\n    primary key (packageID, packageIndex)\n);\ncreate table if not exists Items (\n    packageID      integer,\n    packageIndex   integer primary key,\n    itemID         integer,\n    fileURL        text,\n    signature      blob,\n    deviceID       integer,\n    fileID         integer,\n    generationID   integer,\n    size           integer,\n    paddedSize     integer,\n    offset         integer,\n    sectionIndex   integer,\n    itemTypeHint   text,\n    foreign key (packageID) references Packages(packageID)\n);\n");

  uint64_t v6 = objc_opt_new();
  objc_msgSend_setDelegate_(v5, v7, (uint64_t)v6, v8);

  return v5;
}

void sub_18B17798C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B177BFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B177CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_18B178620(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__itemWithColumnsByName_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

uint64_t sub_18B178830(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__itemWithColumnsByName_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

void sub_18B178A30(void *a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_18B178AD0;
  v6[3] = &unk_1E54655D0;
  id v4 = (void *)a1[5];
  uint64_t v3 = a1[6];
  void v6[4] = a1[4];
  uint64_t v8 = v3;
  id v7 = v4;
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v5, @"insert into Items (packageID, packageIndex, itemID, fileURL, signature, deviceID, fileID, generationID, size, paddedSize, offset, sectionIndex, itemTypeHint) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (uint64_t)v6);
}

void sub_18B178AD0(uint64_t a1, void *a2)
{
  id v96 = a2;
  uint64_t v6 = (const char *)objc_msgSend_packageID(*(void **)(a1 + 32), v3, v4, v5);
  sub_18AF286F4((uint64_t)v96, v6, 0, v7);
  sub_18AF286F4((uint64_t)v96, *(const char **)(a1 + 48), 1, v8);
  uint64_t v12 = (const char *)objc_msgSend_itemID(*(void **)(a1 + 40), v9, v10, v11);
  sub_18AF286F4((uint64_t)v96, v12, 2, v13);
  unint64_t v17 = objc_msgSend_fileURL(*(void **)(a1 + 40), v14, v15, v16);
  uint64_t v21 = objc_msgSend_absoluteString(v17, v18, v19, v20);
  objc_msgSend_bindText_atIndex_(v96, v22, (uint64_t)v21, 3);

  id v26 = objc_msgSend_signature(*(void **)(a1 + 40), v23, v24, v25);
  sub_18B140A18((uint64_t)v96, v26, 4);

  uint64_t v30 = objc_msgSend_deviceID(*(void **)(a1 + 40), v27, v28, v29);
  if (v30
    && (unint64_t v34 = (void *)v30,
        objc_msgSend_fileID(*(void **)(a1 + 40), v31, v32, v33),
        size_t v35 = objc_claimAutoreleasedReturnValue(),
        v35,
        v34,
        v35))
  {
    uint64_t v39 = objc_msgSend_deviceID(*(void **)(a1 + 40), v36, v37, v38);
    uint64_t v43 = (const char *)objc_msgSend_unsignedLongLongValue(v39, v40, v41, v42);
    sub_18AF286F4((uint64_t)v96, v43, 5, v44);

    uint64_t v48 = objc_msgSend_fileID(*(void **)(a1 + 40), v45, v46, v47);
    uint64_t v52 = (const char *)objc_msgSend_unsignedLongLongValue(v48, v49, v50, v51);
    sub_18AF286F4((uint64_t)v96, v52, 6, v53);
  }
  else
  {
    sub_18B140C14((uint64_t)v96, 5);
    sub_18B140C14((uint64_t)v96, 6);
  }
  uint64_t v57 = objc_msgSend_generationID(*(void **)(a1 + 40), v54, v55, v56);

  if (v57)
  {
    long long v61 = objc_msgSend_generationID(*(void **)(a1 + 40), v58, v59, v60);
    id v65 = (const char *)objc_msgSend_unsignedLongLongValue(v61, v62, v63, v64);
    sub_18AF286F4((uint64_t)v96, v65, 7, v66);
  }
  else
  {
    sub_18B140C14((uint64_t)v96, 7);
  }
  uint64_t v70 = (const char *)objc_msgSend_size(*(void **)(a1 + 40), v67, v68, v69);
  sub_18AF286F4((uint64_t)v96, v70, 8, v71);
  uint64_t v75 = (const char *)objc_msgSend_paddedSize(*(void **)(a1 + 40), v72, v73, v74);
  sub_18AF286F4((uint64_t)v96, v75, 9, v76);
  uint64_t v80 = (const char *)objc_msgSend_offset(*(void **)(a1 + 40), v77, v78, v79);
  sub_18AF286F4((uint64_t)v96, v80, 10, v81);
  int v85 = objc_msgSend_sectionIndex(*(void **)(a1 + 40), v82, v83, v84);
  sub_18AF286F4((uint64_t)v96, (const char *)v85, 11, v86);
  uint64_t v90 = objc_msgSend_itemTypeHint(*(void **)(a1 + 40), v87, v88, v89);

  if (v90)
  {
    uint64_t v94 = objc_msgSend_itemTypeHint(*(void **)(a1 + 40), v91, v92, v93);
    objc_msgSend_bindText_atIndex_(v96, v95, (uint64_t)v94, 12);
  }
  else
  {
    sub_18B140C14((uint64_t)v96, 12);
  }
  sub_18AF27740((uint64_t)v96);
}

void sub_18B178F30(uint64_t a1, void *a2)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_18B178FE0;
  void v8[3] = &unk_1E5465620;
  id v4 = *(id *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v12 = v5;
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v10 = v6;
  uint64_t v13 = *(void *)(a1 + 80);
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v7, @"update Items set signature = ?, size = ?, paddedSize = ?, itemID = ?, sectionIndex = ? where packageID = ? and packageIndex = ?", (uint64_t)v8);
}

void sub_18B178FE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v14 = a2;
  sub_18B140A18((uint64_t)v14, v3, 0);
  sub_18AF286F4((uint64_t)v14, *(const char **)(a1 + 48), 1, v4);
  sub_18AF286F4((uint64_t)v14, *(const char **)(a1 + 56), 2, v5);
  sub_18AF286F4((uint64_t)v14, *(const char **)(a1 + 64), 3, v6);
  sub_18B140940((uint64_t)v14, (const char *)*(unsigned int *)(a1 + 72), 4, v7);
  long long v11 = (const char *)objc_msgSend_packageID(*(void **)(a1 + 40), v8, v9, v10);
  sub_18B140940((uint64_t)v14, v11, 5, v12);
  sub_18B140940((uint64_t)v14, (const char *)*(unsigned int *)(a1 + 80), 6, v13);
  sub_18AF27740((uint64_t)v14);
}

void sub_18B179258(uint64_t a1, void *a2)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_18B1792F8;
  void v8[3] = &unk_1E54655D0;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v7, @"update Items set fileURL = ? where packageID = ? and packageIndex = ?", (uint64_t)v8);
}

void sub_18B1792F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v18 = a2;
  uint64_t v7 = objc_msgSend_absoluteString(v3, v4, v5, v6);
  objc_msgSend_bindText_atIndex_(v18, v8, (uint64_t)v7, 0);

  uint64_t v12 = (const char *)objc_msgSend_packageID(*(void **)(a1 + 40), v9, v10, v11);
  sub_18B140940((uint64_t)v18, v12, 1, v13);
  sub_18B140940((uint64_t)v18, (const char *)*(unsigned int *)(a1 + 48), 2, v14);
  sub_18AF27740((uint64_t)v18);
  sub_18B140FEC((uint64_t)v18, v15, v16, v17);
}

void sub_18B1795D0(uint64_t a1, void *a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_18B179680;
  v7[3] = &unk_1E5465670;
  id v8 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v9 = v4;
  uint64_t v10 = v5;
  objc_msgSend_usingStatementForSQL_performBlock_(a2, v6, @"update Items set fileURL = ? where packageID = ? and packageIndex = ?", (uint64_t)v7);
}

void sub_18B179680(id *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v4 = a1[4];
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v33, (uint64_t)v37, 16);
  if (v6)
  {
    uint64_t v9 = v6;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)v34;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v34 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v33 + 1) + 8 * v12);
        uint64_t v14 = objc_msgSend_objectAtIndex_(a1[5], v7, v10 + v12, v8, (void)v33);
        sub_18B140FEC((uint64_t)v3, v15, v16, v17);
        uint64_t v21 = objc_msgSend_absoluteString(v14, v18, v19, v20);
        objc_msgSend_bindText_atIndex_(v3, v22, (uint64_t)v21, 0);

        id v26 = (const char *)objc_msgSend_packageID(a1[6], v23, v24, v25);
        sub_18B140940((uint64_t)v3, v26, 1, v27);
        uint64_t v31 = (const char *)objc_msgSend_unsignedIntegerValue(v13, v28, v29, v30);
        sub_18B140940((uint64_t)v3, v31, 2, v32);
        sub_18AF27740((uint64_t)v3);

        ++v12;
      }
      while (v9 != v12);
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v33, (uint64_t)v37, 16);
      v10 += v12;
    }
    while (v9);
  }
}

uint64_t sub_18B17A110(uint64_t a1, void *a2)
{
  return objc_msgSend_insertOrReplaceInto_values_(a2, (const char *)a2, @"Sections", *(void *)(a1 + 32));
}

uint64_t sub_18B17A58C(uint64_t a1, void *a2)
{
  return objc_msgSend_insertOrReplaceInto_values_(a2, (const char *)a2, @"Sections", *(void *)(a1 + 32));
}

void sub_18B17A698(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    uint64_t v5 = objc_msgSend_sqlite(*(void **)(a1 + 32), v2, v3, v4);
    id v8 = (id)objc_msgSend_handleError_(v5, v6, (uint64_t)v9, v7);
  }
}

void sub_18B17A8E8(uint64_t a1, void *a2)
{
  uint64_t v3 = NSString;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v8 = objc_msgSend_stringWithFormat_(v3, v6, @"update Packages set %@ = ? where packageID = ?", v7, v4);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = sub_18B17A9BC;
  v12[3] = &unk_1E5462D98;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v13 = v9;
  uint64_t v14 = v10;
  objc_msgSend_usingStatementForSQL_performBlock_(v5, v11, (uint64_t)v8, (uint64_t)v12);
}

void sub_18B17A9BC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v9 = a2;
  sub_18B140A18((uint64_t)v9, v3, 0);
  uint64_t v7 = (const char *)objc_msgSend_packageID(*(void **)(a1 + 40), v4, v5, v6);
  sub_18B140940((uint64_t)v9, v7, 1, v8);
  sub_18AF27740((uint64_t)v9);
}

uint64_t sub_18B17B6E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v6 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    int v8 = 138543618;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_error_impl(&dword_18AF10000, v6, OS_LOG_TYPE_ERROR, "Failed to enumerate package URL: %{public}@, error: %@. Ignoring.", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

id sub_18B17B7F0(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v5 = objc_msgSend_objectForKeyedSubscript_(v2, v3, @"packageID", v4);
  int v8 = objc_msgSend_objectForKeyedSubscript_(v2, v6, @"archiverInfo", v7);

  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v11 = v9;
  if (v5) {
    objc_msgSend_setObject_forKey_(v9, v10, (uint64_t)v5, @"packageID");
  }
  if (v8) {
    objc_msgSend_setObject_forKey_(v11, v10, (uint64_t)v8, @"archiverInfo");
  }

  return v11;
}

void *sub_18B17BD58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B17BF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B17BF50(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B17D22C(void *a1, const char *a2, uint64_t a3, uint64_t a4, double a5)
{
  if (a1)
  {
    switch(a1[1])
    {
      case 0:
        a1 = objc_msgSend_numberWithChar_(NSNumber, a2, *a2, a4);
        break;
      case 1:
        a1 = objc_msgSend_numberWithShort_(NSNumber, a2, *(__int16 *)a2, a4);
        break;
      case 2:
        a1 = objc_msgSend_numberWithInt_(NSNumber, a2, *(unsigned int *)a2, a4);
        break;
      case 3:
        a1 = objc_msgSend_numberWithLong_(NSNumber, a2, *(void *)a2, a4);
        break;
      case 4:
        a1 = objc_msgSend_numberWithLongLong_(NSNumber, a2, *(void *)a2, a4);
        break;
      case 5:
        a1 = objc_msgSend_numberWithUnsignedChar_(NSNumber, a2, *(unsigned __int8 *)a2, a4);
        break;
      case 6:
        a1 = objc_msgSend_numberWithUnsignedShort_(NSNumber, a2, *(unsigned __int16 *)a2, a4);
        break;
      case 7:
        a1 = objc_msgSend_numberWithUnsignedInt_(NSNumber, a2, *(unsigned int *)a2, a4);
        break;
      case 8:
        a1 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, *(void *)a2, a4);
        break;
      case 9:
        a1 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, *(void *)a2, a4);
        break;
      case 0xALL:
        LODWORD(a5) = *(_DWORD *)a2;
        a1 = objc_msgSend_numberWithFloat_(NSNumber, a2, a3, a4, a5);
        break;
      case 0xBLL:
        a1 = objc_msgSend_numberWithDouble_(NSNumber, a2, a3, a4, *(double *)a2);
        break;
      case 0xCLL:
        a1 = objc_msgSend_numberWithBool_(NSNumber, a2, *(unsigned __int8 *)a2, a4);
        break;
      case 0xFLL:
        a1 = *(id *)a2;
        break;
      default:
        uint64_t v6 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v7 = *MEMORY[0x1E4F1C3B8];
        uint64_t v8 = objc_msgSend_name(a1, a2, a3, a4);
        objc_msgSend_raise_format_(v6, v9, v7, @"Unsupported boxing type: %@", v8);

        a1 = 0;
        break;
    }
    uint64_t v5 = vars8;
  }
  return a1;
}

void sub_18B17D45C(void *a1, uint64_t a2, void *a3)
{
  id v12 = a3;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      objc_msgSend_getValue_(v12, v5, a2, v7);
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v9 = *MEMORY[0x1E4F1C3B8];
      __int16 v10 = objc_msgSend_name(a1, v5, v6, v7);
      objc_msgSend_raise_format_(v8, v11, v9, @"Unsupported unboxing type: %@", v10);
    }
  }
}

void *sub_18B17D8C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B17DAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B17DABC(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B17DC48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B17DE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B17DE40(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B17FF24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18B17FF60(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_18B180350(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void *sub_18B180360(void *result)
{
  if (result) {
    return sub_18AF2D364(result, @"com.apple.private.cloudkit.notifyOnAccountWarmup");
  }
  return result;
}

void sub_18B180384(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((CKCurrentProcessIsDaemon() & 1) == 0)
  {
    uint64_t v5 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v2, v3, v4);
    uint64_t v9 = objc_msgSend_bundleIdentifier(v5, v6, v7, v8);

    __int16 v10 = *(void **)(a1 + 32);
    if (v10) {
      __int16 v10 = (void *)v10[2];
    }
    id v11 = v10;
    uint64_t v14 = v11;
    if (v9) {
      BOOL v15 = v11 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15
      && (objc_msgSend_isEqual_(v9, v12, (uint64_t)v11, v13) & 1) == 0
      && objc_msgSend_hasSuffix_(v9, v16, @".xctrunner", v17))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v18 = ck_log_facility_notification_listener;
      if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_FAULT))
      {
        int v19 = 138412290;
        uint64_t v20 = @"application-identifier";
        _os_log_fault_impl(&dword_18AF10000, v18, OS_LOG_TYPE_FAULT, "BUG IN CLIENT OF CLOUDKIT: Trying to listen for push notifications in an XCTestRunner, but the bundle identifier does not match your entitlements. Please append '.xctrunner' to your %@ entitlement, otherwise you may not properly receive push notifications.", (uint8_t *)&v19, 0xCu);
      }
    }
  }
}

void sub_18B18223C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1822D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B182424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B182514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1825AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B182650(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1827AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_18B1828E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_18B182918(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= objc_msgSend_hash(v12, v6, v7, v8);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= objc_msgSend_hash(v5, v9, v10, v11);
}

void sub_18B1829A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B182A4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B182B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_18B182B84(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_count(v7, v4, v5, v6);
}

void sub_18B182BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B182C7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_18B182D6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_18B182EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B182F1C(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  if (objc_msgSend_containsObject_(*(void **)(a1 + 32), v6, (uint64_t)v17, v7))
  {
    uint64_t v11 = objc_msgSend_mutableCopy(v5, v8, v9, v10);
    BOOL v15 = objc_msgSend_clockValues(*(void **)(a1 + 40), v12, v13, v14);
    objc_msgSend_setObject_forKeyedSubscript_(v15, v16, (uint64_t)v11, (uint64_t)v17);
  }
}

void sub_18B182FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18B183108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B183164(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v5 = a3;
  uint64_t v9 = objc_msgSend_modifier(v22, v6, v7, v8);
  int isEqual = objc_msgSend_isEqual_(v9, v10, *(void *)(a1 + 32), v11);

  if (isEqual)
  {
    uint64_t v16 = objc_msgSend_mutableCopy(v5, v13, v14, v15);
    uint64_t v20 = objc_msgSend_clockValues(*(void **)(a1 + 40), v17, v18, v19);
    objc_msgSend_setObject_forKeyedSubscript_(v20, v21, (uint64_t)v16, (uint64_t)v22);
  }
}

void sub_18B183214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v11;

  _Unwind_Resume(a1);
}

void sub_18B1832D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_18B1832EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_msgSend_conformsToProtocol_(v2, v3, (uint64_t)&unk_1ED875568, v4)) {
    uint64_t v8 = objc_msgSend_mutableCopy(v2, v5, v6, v7);
  }
  else {
    uint64_t v8 = objc_msgSend_copy(v2, v5, v6, v7);
  }
  uint64_t v9 = (void *)v8;

  return v9;
}

void sub_18B183350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1833D0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1834F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_sync_exit(v15);
  objc_sync_exit(v14);

  _Unwind_Resume(a1);
}

void sub_18B183528(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = v5;
  objc_sync_enter(v8);
  id v9 = v6;
  objc_sync_enter(v9);
  if (objc_msgSend_timestampCount(v8, v10, v11, v12) || objc_msgSend_timestampCount(v9, v13, v14, v15))
  {
    uint64_t v16 = objc_msgSend_allSiteIdentifiers(v8, v13, v14, v15);
    uint64_t v20 = objc_msgSend_allSiteIdentifiers(v9, v17, v18, v19);
    uint64_t v24 = objc_msgSend_mutableCopy(v16, v21, v22, v23);
    uint64_t v27 = v24;
    if (v20) {
      objc_msgSend_unionSet_(v24, v25, (uint64_t)v20, v26);
    }
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_18B18E024;
    void v32[3] = &unk_1E5465C10;
    id v35 = v7;
    id v28 = v16;
    id v33 = v28;
    id v29 = v20;
    id v34 = v29;
    objc_msgSend_enumerateObjectsUsingBlock_(v27, v30, (uint64_t)v32, v31);
  }
  objc_sync_exit(v9);

  objc_sync_exit(v8);
}

void sub_18B1836A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_18B183720(uint64_t a1, void *a2, int a3, int a4)
{
  id v31 = a2;
  if (a3 && a4)
  {
    uint64_t v10 = objc_msgSend_clockValues(*(void **)(a1 + 32), v7, v8, v9);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)v31, v12);

    id v17 = objc_msgSend_clockValues(*(void **)(a1 + 40), v14, v15, v16);
    uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)v31, v19);
    objc_msgSend_removeIndexes_(v13, v21, (uint64_t)v20, v22);

    if (!objc_msgSend_count(v13, v23, v24, v25))
    {
      id v29 = objc_msgSend_clockValues(*(void **)(a1 + 32), v26, v27, v28);
      objc_msgSend_setObject_forKeyedSubscript_(v29, v30, 0, (uint64_t)v31);
    }
  }
}

void sub_18B183804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B183954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_sync_exit(v15);
  objc_sync_exit(v14);

  _Unwind_Resume(a1);
}

void sub_18B183998(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  if (a3)
  {
    id v34 = v7;
    uint64_t v11 = *(void **)(a1 + 32);
    if (a4)
    {
      uint64_t v12 = objc_msgSend_clockValues(v11, v8, v9, v10);
      uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)v34, v14);

      uint64_t v19 = objc_msgSend_clockValues(*(void **)(a1 + 40), v16, v17, v18);
      uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v19, v20, (uint64_t)v34, v21);
      objc_msgSend_CKIntersectIndexes_(v15, v23, (uint64_t)v22, v24);

      if (!objc_msgSend_count(v15, v25, v26, v27))
      {
        id v31 = objc_msgSend_clockValues(*(void **)(a1 + 32), v28, v29, v30);
        objc_msgSend_setObject_forKeyedSubscript_(v31, v32, 0, (uint64_t)v34);
      }
    }
    else
    {
      uint64_t v15 = objc_msgSend_clockValues(v11, v8, v9, v10);
      objc_msgSend_setObject_forKeyedSubscript_(v15, v33, 0, (uint64_t)v34);
    }

    id v7 = v34;
  }
}

void sub_18B183A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B183B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18B183B98(uint64_t a1, void *a2, int a3, int a4)
{
  id v32 = a2;
  if (a3)
  {
    if (!a4) {
      goto LABEL_6;
    }
    uint64_t v10 = objc_msgSend_clockValues(*(void **)(a1 + 32), v7, v8, v9);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)v32, v12);
    uint64_t v17 = objc_msgSend_clockValues(*(void **)(a1 + 40), v14, v15, v16);
    uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(v17, v18, (uint64_t)v32, v19);
    objc_msgSend_addIndexes_(v13, v21, (uint64_t)v20, v22);
  }
  else
  {
    uint64_t v10 = objc_msgSend_clockValues(*(void **)(a1 + 40), v7, v8, v9);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v23, (uint64_t)v32, v24);
    uint64_t v17 = objc_msgSend_mutableCopy(v13, v25, v26, v27);
    uint64_t v20 = objc_msgSend_clockValues(*(void **)(a1 + 32), v28, v29, v30);
    objc_msgSend_setObject_forKeyedSubscript_(v20, v31, (uint64_t)v17, (uint64_t)v32);
  }

LABEL_6:
}

void sub_18B183C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_18B183E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v12;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_18B183F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_18B184060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1840FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B184248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B184338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1843D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B184474(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1845D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_18B184710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_18B184740(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= objc_msgSend_hash(v12, v6, v7, v8);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^= objc_msgSend_hash(v5, v9, v10, v11);
}

void sub_18B1847CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1848C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B1848FC(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  objc_msgSend_allSiteIdentifiers(a3, a2, (uint64_t)a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_unionSet_(v4, v5, (uint64_t)v7, v6);
}

void sub_18B184954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B184AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B184BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_18B184BEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_timestampCount(v7, v4, v5, v6);
}

void sub_18B184C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B184D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_18B184D98(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += objc_msgSend_timestampCountForSiteIdentifier_(v6, v4, *(void *)(a1 + 32), v5);
}

void sub_18B184DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B184FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_18B185150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B185194(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  objc_msgSend_clockValuesForSiteIdentifier_(a3, a2, *(void *)(a1 + 40), a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addIndexes_(v4, v5, (uint64_t)v7, v6);
}

void sub_18B1851F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1854B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id obj, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v30 - 184), 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18B185550(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v8 = objc_msgSend_clockValuesForSiteIdentifier_(a3, v6, *(void *)(a1 + 32), v7);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = sub_18B185658;
  v13[3] = &unk_1E5465938;
  long long v15 = *(_OWORD *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 56);
  id v11 = v5;
  id v14 = v11;
  objc_msgSend_enumerateRangesInRange_options_usingBlock_(v8, v12, v9, v10, 0, v13);
}

void sub_18B185634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B185658(uint64_t result, const char *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = (void *)result;
  uint64_t v8 = *(void *)(*(void *)(result + 40) + 8);
  if (*(unsigned char *)(v8 + 24) || (unint64_t)a2 < *(void *)(*(void *)(*(void *)(result + 48) + 8) + 48))
  {
    BOOL result = objc_msgSend_unsignedShortValue(*(void **)(result + 32), a2, a3, (uint64_t)a4);
    *(_WORD *)(*(void *)(v7[7] + 8) + 24) = result;
    uint64_t v9 = *(void *)(v7[6] + 8);
    *(void *)(v9 + 4_Block_object_dispose(&STACK[0x280], 8) = a2;
    *(void *)(v9 + 56) = a3;
    uint64_t v8 = *(void *)(v7[5] + 8);
  }
  *(unsigned char *)(v8 + 24) = 0;
  *a4 = 1;
  return result;
}

void sub_18B1858C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_18B185920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a5 = 1;
  }
  return result;
}

void sub_18B185A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_18B185AC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_unionVector_(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18B185BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B185C40(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  uint64_t v7 = objc_msgSend_vectorFilteredBySiteIdentifiers_(a3, v5, *(void *)(a1 + 32), v6);
  if (objc_msgSend_timestampCount(v7, v8, v9, v10))
  {
    id v14 = objc_msgSend_mutableCopy(v7, v11, v12, v13);
    uint64_t v18 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 40), v15, v16, v17);
    objc_msgSend_setObject_forKeyedSubscript_(v18, v19, (uint64_t)v14, (uint64_t)v20);
  }
}

void sub_18B185CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18B185E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B185E94(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  uint64_t v7 = objc_msgSend_vectorFilteredByModifier_(a3, v5, *(void *)(a1 + 32), v6);
  if (objc_msgSend_timestampCount(v7, v8, v9, v10))
  {
    id v14 = objc_msgSend_mutableCopy(v7, v11, v12, v13);
    uint64_t v18 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 40), v15, v16, v17);
    objc_msgSend_setObject_forKeyedSubscript_(v18, v19, (uint64_t)v14, (uint64_t)v20);
  }
}

void sub_18B185F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18B18608C(_Unwind_Exception *a1)
{
  uint64_t v9 = v6;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B186218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B186274(uint64_t a1, void *a2, void *a3)
{
  id v33 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  unsigned __int16 v10 = objc_msgSend_shortValue(v33, v7, v8, v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(v6 + 16))(v6, v10);
  long long v15 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 32), v12, v13, v14);
  uint64_t v18 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v16, v11, v17);
  uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v15, v19, (uint64_t)v18, v20);

  if (!v21)
  {
    uint64_t v24 = objc_opt_new();
    uint64_t v28 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 32), v25, v26, v27);
    id v31 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v29, v11, v30);
    objc_msgSend_setObject_forKeyedSubscript_(v28, v32, v24, (uint64_t)v31);

    uint64_t v21 = (void *)v24;
  }
  objc_msgSend_unionVector_(v21, v22, (uint64_t)v5, v23);
}

void sub_18B1863B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_18B186410(void *a1, int a2, void *a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v65 = a3;
  id v8 = v7;
  objc_sync_enter(v8);
  id v68 = v8;
  uint64_t v12 = objc_msgSend_allSiteIdentifiers(v8, v9, v10, v11);
  uint64_t v62 = objc_msgSend_allObjects(v12, v13, v14, v15);

  id v67 = objc_opt_new();
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id obj = v62;
  uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v82, (uint64_t)v87, 16);
  if (v20)
  {
    uint64_t v21 = *(void *)v83;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v83 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = *(void *)(*((void *)&v82 + 1) + 8 * i);
        if (a2)
        {
          uint64_t v4 = objc_msgSend_descriptionWithStringSiteIdentifiers(*(void **)(*((void *)&v82 + 1) + 8 * i), v17, v18, v19);
          objc_msgSend_setObject_forKeyedSubscript_(v67, v24, v4, v23);
        }
        else
        {
          uint64_t v3 = objc_msgSend_description(*(void **)(*((void *)&v82 + 1) + 8 * i), v17, v18, v19);
          objc_msgSend_setObject_forKeyedSubscript_(v67, v25, v3, v23);
        }
        if (a2) {
          uint64_t v26 = (void *)v4;
        }
        else {
          uint64_t v26 = (void *)v3;
        }
      }
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v82, (uint64_t)v87, 16);
    }
    while (v20);
  }

  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 3221225472;
  v80[2] = sub_18B18E0C0;
  v80[3] = &unk_1E5465C38;
  id v27 = v67;
  id v81 = v27;
  long long v61 = objc_msgSend_sortedArrayUsingComparator_(obj, v28, (uint64_t)v80, v29);
  id v66 = (id)objc_opt_new();
  objc_msgSend_appendFormat_(v66, v30, @"[", v31);
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  id v63 = v61;
  uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v32, (uint64_t)&v76, (uint64_t)v86, 16);
  if (v33)
  {
    uint64_t v34 = *(void *)v77;
    char v35 = 1;
    do
    {
      for (uint64_t j = 0; j != v33; ++j)
      {
        if (*(void *)v77 != v34) {
          objc_enumerationMutation(v63);
        }
        uint64_t v37 = *(void *)(*((void *)&v76 + 1) + 8 * j);
        uint64_t v38 = objc_opt_new();
        uint64_t v41 = v38;
        if ((v35 & 1) == 0) {
          objc_msgSend_appendFormat_(v38, v39, @"|", v40);
        }
        uint64_t v42 = objc_msgSend_objectForKeyedSubscript_(v27, v39, v37, v40);
        objc_msgSend_appendFormat_(v41, v43, @"%@:", v44, v42);

        if (objc_msgSend_timestampCountForSiteIdentifier_(v68, v45, v37, v46))
        {
          uint64_t v49 = objc_opt_new();
          v74[0] = 0;
          v74[1] = v74;
          v74[2] = 0x2020000000;
          char v75 = 1;
          v69[0] = MEMORY[0x1E4F143A8];
          v69[1] = 3221225472;
          v69[2] = sub_18B18E168;
          v69[3] = &unk_1E5465C60;
          uint64_t v73 = v74;
          id v50 = v49;
          id v70 = v50;
          id v51 = v65;
          uint64_t v71 = v37;
          id v72 = v51;
          objc_msgSend_enumerateClockValuesForSiteIdentifier_usingBlock_(v68, v52, v37, (uint64_t)v69);
          objc_msgSend_appendString_(v41, v53, (uint64_t)v50, v54);

          _Block_object_dispose(v74, 8);
        }
        else
        {
          objc_msgSend_appendFormat_(v41, v47, @"∅", v48);
        }
        objc_msgSend_appendString_(v66, v55, (uint64_t)v41, v56);

        char v35 = 0;
      }
      uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v57, (uint64_t)&v76, (uint64_t)v86, 16);
      char v35 = 0;
    }
    while (v33);
  }

  objc_msgSend_appendFormat_(v66, v58, @"]", v59);
  objc_sync_exit(v68);

  return v66;
}

void sub_18B18686C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, id obj, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_18B186990(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  id v5 = objc_msgSend_stringWithFormat_(NSString, a2, @"(%d)", a4, a5);

  return v5;
}

void sub_18B186A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_18B186A8C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_msgSend_conformsToProtocol_(v2, v3, (uint64_t)&unk_1ED875568, v4)) {
    uint64_t v8 = objc_msgSend_mutableCopy(v2, v5, v6, v7);
  }
  else {
    uint64_t v8 = objc_msgSend_copy(v2, v5, v6, v7);
  }
  uint64_t v9 = (void *)v8;

  return v9;
}

void sub_18B186AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B186B70(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B186C14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B186CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  uint64_t v13 = v12;

  objc_sync_exit(obj);
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_18B186E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  objc_sync_exit(v14);

  _Unwind_Resume(a1);
}

uint64_t sub_18B186E74(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_intersectVector_(a3, a2, *(void *)(a1 + 32), a4);
}

void sub_18B186F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  objc_sync_exit(v14);

  _Unwind_Resume(a1);
}

uint64_t sub_18B186FB4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_minusVector_(a3, a2, *(void *)(a1 + 32), a4);
}

void sub_18B187084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_18B1871B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  objc_sync_exit(v14);

  _Unwind_Resume(a1);
}

void sub_18B1871FC(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  uint64_t v9 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 32), v6, v7, v8);
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)v18, v11);

  if (v12)
  {
    objc_msgSend_intersectVector_(v5, v13, (uint64_t)v12, v14);
  }
  else
  {
    uint64_t v15 = objc_opt_new();
    objc_msgSend_intersectVector_(v5, v16, (uint64_t)v15, v17);
  }
}

void sub_18B1872B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18B1874BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_18B187544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a3, sel_removeClockValuesInIndexSet_forSiteIdentifier_, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_18B18764C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_18B187690(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v5 = a3;
  uint64_t v9 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 32), v6, v7, v8);
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)v22, v11);

  if (v12)
  {
    objc_msgSend_unionVector_(v12, v13, (uint64_t)v5, v15);
  }
  else
  {
    uint64_t v16 = objc_msgSend_mutableCopy(v5, v13, v14, v15);
    uint64_t v20 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 32), v17, v18, v19);
    objc_msgSend_setObject_forKeyedSubscript_(v20, v21, (uint64_t)v16, (uint64_t)v22);
  }
}

void sub_18B187758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v12;

  _Unwind_Resume(a1);
}

void sub_18B1878C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  id v22 = v21;

  _Block_object_dispose(&a15, 8);
  objc_sync_exit(v20);

  _Unwind_Resume(a1);
}

uint64_t sub_18B187908(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  return result;
}

void sub_18B187918(uint64_t a1)
{
}

void sub_18B187920(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  if (!objc_msgSend_timestampCount(v5, v6, v7, v8))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void **)(v9 + 40);
      *(void *)(v9 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v11;
    }
    else
    {
      uint64_t v13 = objc_opt_new();
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v12 = *(void **)(v14 + 40);
      *(void *)(v14 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v13;
    }

    objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v15, (uint64_t)v17, v16);
  }
}

void sub_18B1879D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B187AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B187B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B187D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B187EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B187F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B187FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B188128(_Unwind_Exception *a1)
{
  objc_sync_exit(v4);
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_18B1881D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B188230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B188278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1882E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B188354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1883CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CKDistributedTimestampVectorClockTypeFromTuple(unsigned int a1)
{
  return a1 >> 8;
}

void sub_18B18846C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B188530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1885CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1886B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B1886D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B1887A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18B1887C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B18884C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1888EC(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18B1889B0(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18B188A6C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18B188B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B188C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_18B188C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v7 = objc_opt_new();
  uint64_t v10 = v7;
  int v11 = *(unsigned __int8 *)(a1 + 32);
  if ((a5 & 0xFF00) != 0x200 || *(unsigned char *)(a1 + 32))
  {
    if ((a5 & 0xFF00) != 0x200) {
      goto LABEL_12;
    }
  }
  else
  {
    objc_msgSend_appendString_(v7, v8, @"("), v9;
    int v11 = *(unsigned __int8 *)(a1 + 32);
  }
  if (v11)
  {
    objc_msgSend_CKSuperscriptForLetter_(NSString, v8, 76, v9);
    uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendString_(v10, v13, (uint64_t)v12, v14);
  }
  else
  {
    uint64_t v12 = @"L";
    objc_msgSend_appendString_(v10, v8, @"L", v9);
  }
  if (v11) {

  }
  if (!*(unsigned char *)(a1 + 32)) {
    objc_msgSend_appendString_(v10, v15, @""), v16);
  }
LABEL_12:

  return v10;
}

void sub_18B188D04(_Unwind_Exception *a1)
{
  if (v3) {

  }
  _Unwind_Resume(a1);
}

void sub_18B188DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B188E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B188EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B188F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B1890B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_18B18920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

uint64_t CKDistributedTimestampVectorTuple(int a1, int a2)
{
  return __rev16(a1 | (a2 << 8));
}

void sub_18B189314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B1893B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189478(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_18B1896D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B189890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B189920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189A7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v4);
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_18B189B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CKDistributedTimestampVectorAtomStateFromTuple(uint64_t result)
{
  return result;
}

void sub_18B189E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B189F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18A010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18A0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B18A11C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B18A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18B18A214(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_18B18A2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B18A2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18A394(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18B18A458(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18B18A514(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18B18A5C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18B18A66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18A71C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_18B18A758(uint64_t a1, __int16 a2)
{
  return a2 & 0xFF00;
}

void sub_18B18A814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_18B18A824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v7 = objc_opt_new();
  uint64_t v10 = v7;
  if (!*(unsigned char *)(a1 + 32)) {
    objc_msgSend_appendString_(v7, v8, @"("), v9;
  }
  if ((a5 & 0xFF00) == 0x200)
  {
    int v11 = *(unsigned __int8 *)(a1 + 32);
    if (*(unsigned char *)(a1 + 32))
    {
      objc_msgSend_CKSuperscriptForLetter_(NSString, v8, 76, v9);
      uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendString_(v10, v13, (uint64_t)v12, v14);
    }
    else
    {
      uint64_t v12 = @"L";
      objc_msgSend_appendString_(v10, v8, @"L", v9);
    }
    if (v11) {
  }
    }
  if (*(unsigned char *)(a1 + 32)) {
    objc_msgSend_CKSuperscriptForNumber_(NSString, v8, a5, v9);
  }
  else {
  uint64_t v15 = objc_msgSend_stringWithFormat_(NSString, v8, @"%lu", v9, a5);
  }
  objc_msgSend_appendString_(v10, v16, (uint64_t)v15, v17);

  if (!*(unsigned char *)(a1 + 32)) {
    objc_msgSend_appendString_(v10, v18, @""), v19);
  }

  return v10;
}

void sub_18B18A94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18A9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B18AA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18AB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B18ABCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B18AF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj, id a10, uint64_t a11, uint64_t a12)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_18B18B044(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unsigned __int8 v9 = (unsigned __int16)objc_msgSend_shortValue(v4, v6, v7, v8) >> 8;
  unsigned __int8 v13 = (unsigned __int16)objc_msgSend_shortValue(v5, v10, v11, v12) >> 8;
  unsigned __int8 v17 = objc_msgSend_shortValue(v4, v14, v15, v16);
  unsigned __int8 v21 = objc_msgSend_shortValue(v5, v18, v19, v20);
  uint64_t v22 = v9 > v13;
  if (v9 < v13) {
    uint64_t v22 = -1;
  }
  if (v17 > v21) {
    uint64_t v22 = 1;
  }
  if (v17 >= v21) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = -1;
  }

  return v23;
}

void sub_18B18B0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18B448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, id a11, uint64_t a12, void *a13, uint64_t a14)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_18B18B588(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unsigned __int8 v9 = (unsigned __int16)objc_msgSend_shortValue(v4, v6, v7, v8) >> 8;
  unsigned __int8 v13 = (unsigned __int16)objc_msgSend_shortValue(v5, v10, v11, v12) >> 8;
  unsigned __int8 v17 = objc_msgSend_shortValue(v4, v14, v15, v16);
  unsigned __int8 v21 = objc_msgSend_shortValue(v5, v18, v19, v20);
  uint64_t v22 = v9 > v13;
  if (v9 < v13) {
    uint64_t v22 = -1;
  }
  if (v17 > v21) {
    uint64_t v22 = 1;
  }
  if (v17 >= v21) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = -1;
  }

  return v23;
}

void sub_18B18B638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18B80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_18B18B9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B18BAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

void sub_18B18BB28(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  if (*(unsigned __int8 *)(a1 + 40) == (objc_msgSend_shortValue(v18, v6, v7, v8) & 0xFF00) >> 8)
  {
    uint64_t v12 = objc_msgSend_mutableCopy(v5, v9, v10, v11);
    uint64_t v16 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 32), v13, v14, v15);
    objc_msgSend_setObject_forKeyedSubscript_(v16, v17, (uint64_t)v12, (uint64_t)v18);
  }
}

void sub_18B18BBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned __int8 v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18B18BCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

void sub_18B18BD40(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  if (*(unsigned __int8 *)(a1 + 40) == objc_msgSend_shortValue(v18, v6, v7, v8))
  {
    uint64_t v12 = objc_msgSend_mutableCopy(v5, v9, v10, v11);
    uint64_t v16 = objc_msgSend_mutableAttributeToSparseVector(*(void **)(a1 + 32), v13, v14, v15);
    objc_msgSend_setObject_forKeyedSubscript_(v16, v17, (uint64_t)v12, (uint64_t)v18);
  }
}

void sub_18B18BDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned __int8 v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18B18BFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_18B18C01C()
{
}

void sub_18B18C024()
{
}

void sub_18B18C02C()
{
}

void sub_18B18C034(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v21 = v3;
  uint64_t v8 = objc_msgSend_modifier(v3, v5, v6, v7);
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v4, v9, (uint64_t)v8, v10);

  if (!v11)
  {
    uint64_t v14 = objc_opt_new();
    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v19 = objc_msgSend_modifier(v21, v16, v17, v18);
    objc_msgSend_setObject_forKeyedSubscript_(v15, v20, v14, (uint64_t)v19);

    uint64_t v11 = (void *)v14;
  }
  objc_msgSend_addObject_(v11, v12, (uint64_t)v21, v13);
}

void sub_18B18C0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v10;

  _Unwind_Resume(a1);
}

void sub_18B18C138(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if (a4)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    id v38 = v7;
    uint64_t v12 = objc_msgSend_modifier(v7, v8, v9, v10);
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v11, v13, (uint64_t)v12, v14);

    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id obj = v15;
    uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v39, (uint64_t)v43, 16);
    if (v20)
    {
      uint64_t v21 = a3 + a4;
      uint64_t v22 = a3 + a4 - 1;
      uint64_t v23 = *(void *)v40;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v40 != v23) {
            objc_enumerationMutation(obj);
          }
          uint64_t v25 = *(void **)(*((void *)&v39 + 1) + 8 * i);
          uint64_t v26 = objc_msgSend_identifier(v25, v17, v18, v19);
          uint64_t v30 = objc_msgSend_identifier(v38, v27, v28, v29);
          uint64_t v31 = CKDistributedTimestampLWWCompare(v26, 0, v30, 0);

          if (v31 == -1) {
            uint64_t v33 = v21;
          }
          else {
            uint64_t v33 = v22;
          }
          uint64_t v34 = *(void **)(a1 + 40);
          char v35 = objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E4F28D60], v32, 0, v33);
          objc_msgSend_addClockValuesInIndexSet_withAttribute_forSiteIdentifier_(v34, v36, (uint64_t)v35, bswap32((*(unsigned __int8 *)(a1 + 48) << 8) | 2) >> 16, v25);
        }
        uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v39, (uint64_t)v43, 16);
      }
      while (v20);
    }

    id v7 = v38;
  }
}

void sub_18B18C314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t CKDistributedTimestampLWWCompare(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  id v7 = a1;
  id v10 = a3;
  if (a2 <= a4)
  {
    if (a4 <= a2) {
      uint64_t v11 = objc_msgSend_CKCompare_(v7, v8, (uint64_t)v10, v9);
    }
    else {
      uint64_t v11 = -1;
    }
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_18B18C404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_18B18C528(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if (*(unsigned __int8 *)(a1 + 40) == objc_msgSend_shortValue(v12, v6, v7, v8)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += objc_msgSend_timestampCount(v5, v9, v10, v11);
  }
}

void sub_18B18C5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B18C758(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_18B18C8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_18B18C924(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  objc_sync_enter(v8);
  id v12 = objc_msgSend_clockValues(v8, v9, v10, v11);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = sub_18B18CA60;
  void v17[3] = &unk_1E5465B98;
  id v18 = *(id *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = *(void *)(a1 + 40);
  id v19 = v13;
  uint64_t v20 = v14;
  uint64_t v21 = a4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v12, v15, (uint64_t)v17, v16);

  objc_sync_exit(v8);
}

void sub_18B18CA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B18CA60(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = objc_msgSend_modifier(a2, (const char *)a2, a3, (uint64_t)a4);
  int isEqual = objc_msgSend_isEqual_(v6, v7, *(void *)(a1 + 32), v8);

  if (isEqual)
  {
    uint64_t v13 = objc_msgSend_shortValue(*(void **)(a1 + 40), v10, v11, v12);
    uint64_t v14 = *(unsigned char **)(a1 + 56);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = BYTE1(v13);
    *uint64_t v14 = 1;
    *a4 = 1;
  }
}

void sub_18B18CAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18CBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B18CBFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_sync_enter(v6);
  uint64_t v10 = objc_msgSend_clockValues(v6, v7, v8, v9);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  _DWORD v14[2] = sub_18B18CD2C;
  v14[3] = &unk_1E5465878;
  id v11 = v5;
  id v15 = v11;
  id v16 = *(id *)(a1 + 32);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v10, v12, (uint64_t)v14, v13);

  objc_sync_exit(v6);
}

void sub_18B18CCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_18B18CD2C(uint64_t a1, void *a2)
{
  id v32 = a2;
  unsigned __int8 v6 = (unsigned __int16)objc_msgSend_shortValue(*(void **)(a1 + 32), v3, v4, v5) >> 8;
  id v7 = *(void **)(a1 + 40);
  id v11 = objc_msgSend_modifier(v32, v8, v9, v10);
  uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(v7, v12, (uint64_t)v11, v13);
  uint64_t v15 = v6;

  if (v14)
  {
    if (objc_msgSend_shortValue(v14, v16, v17, v18) == v15) {
      goto LABEL_6;
    }
    uint64_t v22 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v19, v20, v21);
    uint64_t v25 = objc_msgSend_stringWithUTF8String_(NSString, v23, (uint64_t)"-[CKDistributedTimestampAttributedVector(ClockVectorSupport) clockVector_clockTypesForAllModifiers]_block_invoke_2", v24);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v22, v26, (uint64_t)v25, @"CKDistributedTimestampVector.mm", 1754, @"It is not possible to mix and match regular and lwwPerModifier clock types for a given site identifier modifier (rdar://84695941)");
  }
  else
  {
    uint64_t v22 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v16, v15, v18);
    id v27 = *(void **)(a1 + 40);
    uint64_t v25 = objc_msgSend_modifier(v32, v28, v29, v30);
    objc_msgSend_setObject_forKeyedSubscript_(v27, v31, (uint64_t)v22, (uint64_t)v25);
  }

LABEL_6:
}

void sub_18B18CE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18B18D0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);

  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Block_object_dispose((const void *)(v37 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_18B18D128(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, __int16 a5, unsigned char *a6)
{
  id v12 = a2;
  if (a4)
  {
    id v29 = v12;
    if ((a5 & 0xFF00) == 0x200) {
      uint64_t v16 = a1[5];
    }
    else {
      uint64_t v16 = a1[6];
    }
    *(unsigned char *)(*(void *)(v16 + 8) + 24) = 1;
    if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24) && *(unsigned char *)(*(void *)(a1[6] + 8) + 24))
    {
      id v27 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v13, v14, v15);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v27, v28, a1[10], a1[4], @"CKDistributedTimestampVector.mm", 1792, @"It is not possible to mix and match regular and lwwPerModifier clock types for a given site identifier modifier (rdar://84695941)");
    }
    if ((a5 & 0xFF00) == 0x200)
    {
      unint64_t v17 = a4 + a3 - 1;
      uint64_t v18 = *(void *)(a1[7] + 8);
      id v19 = *(void **)(v18 + 40);
      if (v19)
      {
        uint64_t v20 = objc_msgSend_identifier(v19, v13, v14, v15);
        unint64_t v21 = *(void *)(*(void *)(a1[8] + 8) + 24);
        uint64_t v25 = objc_msgSend_identifier(v29, v22, v23, v24);
        uint64_t v26 = CKDistributedTimestampLWWCompare(v20, v21, v25, v17);

        id v12 = v29;
        if (v26 != -1) {
          goto LABEL_15;
        }
        uint64_t v18 = *(void *)(a1[7] + 8);
      }
      objc_storeStrong((id *)(v18 + 40), a2);
      *(void *)(*(void *)(a1[8] + 8) + 24) = v17;
      *(_WORD *)(*(void *)(a1[9] + 8) + 24) = a5;
    }
    else
    {
      *a6 = 1;
    }
    id v12 = v29;
  }
LABEL_15:
}

void sub_18B18D2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18B18D3C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B18D45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18B18D5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_18B18D76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_18B18D9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

void sub_18B18DCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, void *a12, void *a13, id obj)
{
  objc_sync_exit(obj);
  objc_sync_exit(a10);

  _Unwind_Resume(a1);
}

void sub_18B18DE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18B18DEB4(void *a1, uint64_t a2, void *a3)
{
  id v12 = a3;
  id v7 = objc_msgSend_mutableCopy(a1, v4, v5, v6);
  objc_msgSend_removeIndexes_(v7, v8, (uint64_t)v12, v9);
  objc_msgSend_removeIndexes_(a1, v10, (uint64_t)v7, v11);
}

void sub_18B18DF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *sub_18B18DF3C(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 0xA)
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"(%lu)", a4, a3);
    uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v4 = off_1E5465C80[a3];
  }

  return v4;
}

__CFString *sub_18B18DF9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (int)a3 - 65;
  if v4 < 0x37 && ((0x7AFFDB007AFFDBuLL >> v4))
  {
    uint64_t v5 = off_1E5465CD0[v4];
  }
  else
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"(%c)", a4, a3);
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_18B18E024(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  id v11 = v3;
  uint64_t v7 = objc_msgSend_containsObject_(*(void **)(a1 + 32), v5, (uint64_t)v3, v6);
  uint64_t v10 = objc_msgSend_containsObject_(*(void **)(a1 + 40), v8, (uint64_t)v11, v9);
  (*(void (**)(uint64_t, id, uint64_t, uint64_t))(v4 + 16))(v4, v11, v7, v10);
}

void sub_18B18E0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B18E0C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v6, a2, v7);
  id v11 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v9, (uint64_t)v5, v10);
  uint64_t v14 = objc_msgSend_compare_(v8, v12, (uint64_t)v11, v13);

  return v14;
}

void sub_18B18E13C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18B18E168(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  if (*(unsigned char *)(v7 + 24)) {
    *(unsigned char *)(v7 + 24) = 0;
  }
  else {
    objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, @",", a4);
  }
  if (a3 == 1) {
    objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, @"%lu", a4, a2);
  }
  else {
    objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, @"%lu-%lu", a4, a2, &a2[a3 - 1]);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  if (v10) {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v8, (uint64_t)v10, v9);
  }
}

void sub_18B18E24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18B18FA20()
{
  int v0 = CKShouldUseNewPredicateValidation();
  uint64_t v1 = off_1E545EA30;
  if (!v0) {
    uint64_t v1 = off_1E545EC58;
  }
  id v2 = objc_alloc_init(*v1);
  uint64_t v3 = qword_1EB279F20;
  qword_1EB279F20 = (uint64_t)v2;

  return MEMORY[0x1F41817F8](v2, v3);
}

__CFString *stringForCKUnderlyingErrorCode(uint64_t a1)
{
  if (a1 > 2999)
  {
    if (a1 > 5999)
    {
      if (a1 > 8999)
      {
        switch(a1)
        {
          case 10000:
            uint64_t result = @"UploadRequestCacheOpenFailed";
            break;
          case 10001:
            uint64_t result = @"UploadRequestNotEnoughSpace";
            break;
          case 10002:
            uint64_t result = @"UploadRequestInvalidStateTransition";
            break;
          case 10003:
            uint64_t result = @"UploadRequestTryAgainLater";
            break;
          case 10004:
            uint64_t result = @"UploadRequestInvalidRetrievedAsset";
            break;
          case 10005:
            uint64_t result = @"UploadRequestZeroLengthAsset";
            break;
          case 10006:
            uint64_t result = @"DBRAccountNeedsReauthentication";
            break;
          default:
            if (a1 == 9000)
            {
              uint64_t result = @"PCCServerDidNotSendAttestation";
            }
            else if (a1 == 9001)
            {
              uint64_t result = @"PCCAttestationVerificationFailed";
            }
            else
            {
LABEL_190:
              uint64_t result = @"Unknown Error";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 8000:
            uint64_t result = @"EmailVettingRequired";
            break;
          case 8001:
            uint64_t result = @"EmailVettingFailed";
            break;
          case 8002:
            uint64_t result = @"EmailVettingTokenInvalid";
            break;
          case 8003:
            uint64_t result = @"EmailVettingRecordInvalid";
            break;
          case 8004:
            uint64_t result = @"EmailVettingRecordMissing";
            break;
          case 8005:
            uint64_t result = @"EmailVettingEmailMismatch";
            break;
          case 8006:
            uint64_t result = @"EmailVettingAccountDenied";
            break;
          case 8007:
            uint64_t result = @"EmailVettingVettedToCaller";
            break;
          case 8008:
            uint64_t result = @"EmailVettingVettedToOther";
            break;
          case 8009:
            uint64_t result = @"EmailVettingDryrunKeyswapFailed";
            break;
          case 8010:
            uint64_t result = @"EmailVettingServerError";
            break;
          case 8011:
            uint64_t result = @"EmailVettingTokenAuthFailed";
            break;
          case 8012:
            uint64_t result = @"EmailVettingForcedShareMetedataFetchFailed";
            break;
          case 8013:
            uint64_t result = @"OONMetadataWithheld";
            break;
          case 8014:
            uint64_t result = @"OONUserUnsupported";
            break;
          default:
            switch(a1)
            {
              case 7000:
                uint64_t result = @"PackageDBOpenFailed";
                break;
              case 7001:
                uint64_t result = @"PackageDBBusy";
                break;
              case 7002:
                uint64_t result = @"PackageDBCopyFailed";
                break;
              case 7003:
                uint64_t result = @"PackageDBCheckpointFailed";
                break;
              case 7004:
                uint64_t result = @"PackageDBCloseFailed";
                break;
              default:
                if (a1 != 6000) {
                  goto LABEL_190;
                }
                uint64_t result = @"PluginError";
                break;
            }
            break;
        }
      }
    }
    else if (a1 <= 4001)
    {
      switch(a1)
      {
        case 3000:
          uint64_t result = @"MMCSChunkingError";
          break;
        case 3001:
          uint64_t result = @"MMCSGenericError";
          break;
        case 3002:
          uint64_t result = @"MMCSItemNotFound";
          break;
        case 3003:
          uint64_t result = @"MMCSItemModified";
          break;
        case 3004:
          uint64_t result = @"MMCSAuthMissing";
          break;
        case 3005:
          uint64_t result = @"PutReceiptExpired";
          break;
        case 3006:
          uint64_t result = @"MMCSItemStale";
          break;
        case 3007:
          uint64_t result = @"MMCSDiscQuotaExceeded";
          break;
        case 3008:
          uint64_t result = @"MMCSNoSpaceLeftOnDevice";
          break;
        case 3009:
          uint64_t result = @"MMCSItemNotValid";
          break;
        case 3010:
          uint64_t result = @"MMCSItemNotAvailable";
          break;
        case 3011:
          uint64_t result = @"ReferencedAssetNotFound";
          break;
        case 3012:
          uint64_t result = @"RepairAssetSignatureMismatch";
          break;
        case 3013:
          uint64_t result = @"MMCSInsufficientDiskSpace";
          break;
        case 3014:
          uint64_t result = @"ParticipantIDMismatch";
          break;
        case 3015:
          uint64_t result = @"AssetHandleUnregistered";
          break;
        default:
          if (a1 == 4000)
          {
            uint64_t result = @"CouldntInitializeMescal";
          }
          else
          {
            if (a1 != 4001) {
              goto LABEL_190;
            }
            uint64_t result = @"BadSignature";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 5000:
          uint64_t result = @"PCSNoPublicIdentity";
          break;
        case 5001:
          uint64_t result = @"CouldntFetchPCSData";
          break;
        case 5002:
          uint64_t result = @"CouldntSavePCSData";
          break;
        case 5003:
          uint64_t result = @"CouldntWrapPCSData";
          break;
        case 5004:
          uint64_t result = @"PCSDecryptFailed";
          break;
        case 5005:
          uint64_t result = @"CouldntCreatePCSData";
          break;
        case 5006:
          uint64_t result = @"iCDPRequired";
          break;
        case 5007:
          uint64_t result = @"PCSDataNotFoundLocally";
          break;
        case 5008:
          uint64_t result = @"UnsyncedKeychain";
          break;
        case 5009:
          uint64_t result = @"KeyRegistrySyncFailed";
          break;
        case 5010:
          uint64_t result = @"RequiredPCSDataNotFoundLocally";
          break;
        case 5011:
          uint64_t result = @"MissingManateeIdentity";
          break;
        case 5012:
          uint64_t result = @"PCSKeySyncStateThrottled";
          break;
        case 5013:
          uint64_t result = @"WalrusEnabled";
          break;
        case 5014:
          uint64_t result = @"WalrusIdentityICDPRequired";
          break;
        case 5015:
          uint64_t result = @"MissingAnonymousID";
          break;
        case 5016:
          uint64_t result = @"PerRecordPCSKeyRollFailed";
          break;
        case 5017:
          uint64_t result = @"ZoneishPCSKeyRollFailed";
          break;
        case 5018:
          uint64_t result = @"ZonePCSKeyRollFailed";
          break;
        case 5019:
          uint64_t result = @"SharePCSKeyRollFailed";
          break;
        case 5020:
          uint64_t result = @"GenericPCSKeyRollFailed";
          break;
        case 5021:
          uint64_t result = @"IncompatibleOSVersion";
          break;
        case 5022:
          uint64_t result = @"SignatureValidationFailed";
          break;
        case 5023:
          uint64_t result = @"SignatureCreationFailed";
          break;
        default:
          if (a1 != 4002) {
            goto LABEL_190;
          }
          uint64_t result = @"MescalNotInitialized";
          break;
      }
    }
  }
  else if (a1 <= 1999)
  {
    switch(a1)
    {
      case 1000:
        return @"GenericError";
      case 1001:
        return @"NotImplemented";
      case 1002:
        return @"NoAccountExists";
      case 1003:
        return @"AccountMoved";
      case 1004:
        return @"AuthenticationSkipped";
      case 1005:
        return @"ParseError";
      case 1006:
        return @"BadValueClass";
      case 1007:
        return @"InvalidRecordBatch";
      case 1008:
        return @"FailedIDFetch";
      case 1009:
        return @"InvalidPredicate";
      case 1010:
        return @"UserRejectedLogin";
      case 1011:
        return @"PartialFailure";
      case 1012:
        return @"NetworkUnavailable";
      case 1013:
        return @"NetworkFailure";
      case 1014:
        return @"BadContainer";
      case 1015:
        return @"NoPushToken";
      case 1016:
        return @"ChangeTokenExpired";
      case 1017:
        return @"InvalidArguments";
      case 1018:
        return @"AccountAccessRestricted";
      case 1019:
        return @"BadDatabase";
      case 1020:
        return @"BatchTooLarge";
      case 1021:
        return @"AssetSaveFailed";
      case 1022:
        return @"ParticipantsListConflict";
      case 1023:
        return @"AppDisabledInSettings";
      case 1024:
        return @"AppNotInAppStore";
      case 1025:
        return @"XPCActivityNotContinue";
      case 1026:
        return @"XPCActivityShouldDefer";
      case 1027:
        return @"SQLiteError";
      case 1028:
        return @"AccountUnavailableDueToBadAuthToken";
      case 1029:
        return @"InvalidDSID";
      case 1030:
      case 1031:
      case 1032:
      case 1033:
      case 1034:
      case 1035:
      case 1036:
      case 1037:
      case 1038:
      case 1039:
      case 1040:
      case 1041:
      case 1042:
      case 1043:
      case 1044:
      case 1045:
      case 1046:
      case 1047:
      case 1048:
      case 1049:
        goto LABEL_190;
      case 1050:
        return @"NoMatchingRow";
      case 1051:
        return @"NoUniqueRow";
      default:
        if (a1)
        {
          if (a1 != 1) {
            goto LABEL_190;
          }
          uint64_t result = @"Cancelled";
        }
        else
        {
          uint64_t result = @"Success";
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 2000:
        uint64_t result = @"ServerInternalError";
        break;
      case 2001:
        uint64_t result = @"ServerHTTPError";
        break;
      case 2002:
        uint64_t result = @"ServerOverloaded";
        break;
      case 2003:
        uint64_t result = @"ObjectNotFound";
        break;
      case 2004:
        uint64_t result = @"OpLockFailed";
        break;
      case 2005:
        uint64_t result = @"ClientInternalError";
        break;
      case 2006:
        uint64_t result = @"BadSyntax";
        break;
      case 2007:
        uint64_t result = @"Forbidden";
        break;
      case 2008:
        uint64_t result = @"Throttled";
        break;
      case 2009:
        uint64_t result = @"ServerThrottled";
        break;
      case 2010:
        uint64_t result = @"Refused";
        break;
      case 2011:
        uint64_t result = @"AuthTokenError";
        break;
      case 2012:
        uint64_t result = @"AuthenticationNeeded";
        break;
      case 2013:
        uint64_t result = @"ExpiredAppConfig";
        break;
      case 2014:
        uint64_t result = @"ExpiredGlobalConfig";
        break;
      case 2015:
        uint64_t result = @"FieldNotQueryable";
        break;
      case 2016:
        uint64_t result = @"FieldNotSortable";
        break;
      case 2017:
        uint64_t result = @"ObjectAlreadyExists";
        break;
      case 2018:
        uint64_t result = @"BadKeyName";
        break;
      case 2019:
        uint64_t result = @"BadFieldValue";
        break;
      case 2020:
        uint64_t result = @"BadIdentifier";
        break;
      case 2021:
        uint64_t result = @"FieldsPerTypeExceeded";
        break;
      case 2022:
        uint64_t result = @"ServerBusy";
        break;
      case 2023:
        uint64_t result = @"LimitExceeded";
        break;
      case 2024:
        uint64_t result = @"AtomicFailure";
        break;
      case 2025:
        uint64_t result = @"ValidatingReferenceFailure";
        break;
      case 2026:
        uint64_t result = @"ContainerReset";
        break;
      case 2027:
        uint64_t result = @"NotSupported";
        break;
      case 2028:
        uint64_t result = @"AlreadyShared";
        break;
      case 2029:
        uint64_t result = @"ZoneBusy";
        break;
      case 2030:
        uint64_t result = @"ZoneUnavailable";
        break;
      case 2031:
        uint64_t result = @"ContainerUnavailable";
        break;
      case 2032:
        uint64_t result = @"DuplicateSubscription";
        break;
      case 2033:
        uint64_t result = @"EmailOutOfNetwork";
        break;
      case 2034:
        uint64_t result = @"ExpiredPutReceipt";
        break;
      case 2035:
        uint64_t result = @"QuotaExceeded";
        break;
      case 2036:
        uint64_t result = @"ZoneNotFound";
        break;
      case 2037:
        uint64_t result = @"PCSOplockFailed";
        break;
      case 2038:
        uint64_t result = @"AssetTooLarge";
        break;
      case 2039:
        uint64_t result = @"DeviceNotSupported";
        break;
      case 2040:
        uint64_t result = @"RequestAlreadyProcessed";
        break;
      case 2041:
        uint64_t result = @"StaleRecordUpdate";
        break;
      case 2042:
        uint64_t result = @"UserDeletedData";
        break;
      case 2043:
        uint64_t result = @"ShareParticipantMissing";
        break;
      case 2044:
        uint64_t result = @"InvalidPCSChain";
        break;
      case 2045:
        uint64_t result = @"TooManyParticipants";
        break;
      case 2046:
        uint64_t result = @"HierarchyAlreadyShared";
        break;
      case 2047:
        uint64_t result = @"U13Restricted";
        break;
      case 2048:
        uint64_t result = @"ManagedAppleIDRestricted";
        break;
      case 2049:
        uint64_t result = @"InvalidEmailAddress";
        break;
      case 2050:
        uint64_t result = @"RecordArchived";
        break;
      case 2051:
        uint64_t result = @"DatabaseAccessDenied";
        break;
      case 2052:
        uint64_t result = @"ParentHierarchyDepthLimitExceeded";
        break;
      case 2053:
        uint64_t result = @"ZonePCSUserIdentityUnknown";
        break;
      case 2054:
        uint64_t result = @"ManagedAppleIdBackupBlocked";
        break;
      case 2055:
        uint64_t result = @"RetryableModificationFailure";
        break;
      case 2056:
        uint64_t result = @"UserDidResetEncryptedData";
        break;
      case 2057:
        uint64_t result = @"ShareRegionUnsupported";
        break;
      case 2060:
        uint64_t result = @"a2aSignatureValidationError";
        break;
      case 2061:
        uint64_t result = @"ThrottledByHTTP503";
        break;
      case 2062:
        uint64_t result = @"ThrottledByHTTP429";
        break;
      case 2063:
        uint64_t result = @"ThrottledByServer";
        break;
      default:
        goto LABEL_190;
    }
  }
  return result;
}

void sub_18B191C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18B191C6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend_code(v6, v7, v8, v9) == 2)
  {
    if (objc_msgSend_code(v6, v10, v11, v12) == 2)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      uint64_t v16 = objc_msgSend_userInfo(v6, v13, v14, v15);
      id v19 = objc_msgSend_objectForKeyedSubscript_(v16, v17, @"CKPartialErrors", v18);

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v19, v20, (uint64_t)v5, v21);
        if (objc_msgSend_code(v22, v23, v24, v25) == 2)
        {
          if (ck_log_initialization_predicate != -1) {
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          }
          id v27 = ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
          {
            int v39 = 138412290;
            long long v40 = v22;
            _os_log_fault_impl(&dword_18AF10000, v27, OS_LOG_TYPE_FAULT, "There are too many layers of nested partial failure errors to fully flatten. Adding this error without flattening: %@", (uint8_t *)&v39, 0xCu);
          }
        }
        objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v26, (uint64_t)v22, (uint64_t)v5);
      }
    }
  }
  else
  {
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v6, (uint64_t)v5);
    uint64_t v31 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v34 = *(void **)(v31 + 40);
    id v32 = (id *)(v31 + 40);
    uint64_t v33 = v34;
    if (v34)
    {
      uint64_t v35 = objc_msgSend_code(v33, v28, v29, v30);
      if (v35 != objc_msgSend_code(v6, v36, v37, v38)) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      }
    }
    else
    {
      objc_storeStrong(v32, a3);
    }
  }
}

void sub_18B192050(uint64_t a1, void *a2, void *a3)
{
  id v24 = a2;
  id v5 = a3;
  uint64_t v9 = v5;
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v10 = objc_msgSend_userInfo(v5, v6, v7, v8);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, @"RequestUUID", v12);
    uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v13;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v16 = objc_msgSend_userInfo(v9, v6, v7, v8);
    uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v16, v17, @"ContainerID", v18);
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v19;
  }
  uint64_t v22 = objc_msgSend_CKClientSuitableError(v9, v6, v7, v8);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v23, (uint64_t)v22, (uint64_t)v24);
}

uint64_t CKErrorCodeForNSURLErrorCode(uint64_t a1)
{
  uint64_t result = 3;
  if ((unint64_t)(a1 + 1020) > 0x11 || ((1 << (a1 - 4)) & 0x34805) == 0)
  {
    uint64_t v3 = 4;
    if (a1 == -1) {
      uint64_t v3 = 3;
    }
    if (a1 != -2000) {
      return v3;
    }
  }
  return result;
}

id sub_18B1921B0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_userInfo(a1, a2, a3, a4);
  uint64_t v6 = *MEMORY[0x1E4F28A50];
  uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(v5, v7, *MEMORY[0x1E4F28A50], v8);

  if (!v9) {
    goto LABEL_10;
  }
  id v13 = 0;
  do
  {
    uint64_t v14 = objc_msgSend_domain(v9, v10, v11, v12);
    if (objc_msgSend_isEqualToString_(v14, v15, @"CKInternalErrorDomain", v16))
    {
      unint64_t v17 = CKTopLevelUnderlyingErrorCodes();
      uint64_t v18 = NSNumber;
      uint64_t v22 = objc_msgSend_code(v9, v19, v20, v21);
      uint64_t v25 = objc_msgSend_numberWithInteger_(v18, v23, v22, v24);
      int v28 = objc_msgSend_containsObject_(v17, v26, (uint64_t)v25, v27);

      if (!v28) {
        goto LABEL_7;
      }
      uint64_t v14 = v13;
      id v13 = v9;
    }

LABEL_7:
    id v32 = objc_msgSend_userInfo(v9, v29, v30, v31);
    uint64_t v35 = objc_msgSend_objectForKeyedSubscript_(v32, v33, v6, v34);

    uint64_t v9 = (void *)v35;
  }
  while (v35);
  if (v13)
  {
    uint64_t v36 = objc_msgSend_code(v13, v10, v11, v12);
    long long v40 = objc_msgSend_userInfo(v13, v37, v38, v39);
    objc_msgSend_errorWithDomain_code_userInfo_error_path_URL_description_(CKPrettyError, v41, @"CKInternalErrorDomain", v36, v40, a1, 0, 0, 0);
    id v42 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_11;
  }
LABEL_10:
  id v42 = a1;
LABEL_11:

  return v42;
}

id sub_18B192360(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_domain(a1, a2, a3, a4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"CKInternalErrorDomain", v7);

  if (isEqualToString && objc_msgSend_code(a1, v9, v10, v11) == 2056)
  {
    uint64_t v15 = @"CKUserDidResetEncryptedData";
    v16[0] = MEMORY[0x1E4F1CC38];
    id v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v12, (uint64_t)v16, (uint64_t)&v15, 1);
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

BOOL sub_18B19243C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_domain(a1, a2, a3, a4);
  if (objc_msgSend_isEqualToString_(v5, v6, @"CKInternalErrorDomain", v7)) {
    BOOL v20 = objc_msgSend_code(a1, v8, v9, v10) == 2003
  }
       || objc_msgSend_code(a1, v11, v12, v13) == 2036
       || objc_msgSend_code(a1, v14, v15, v16) == 2042
       || objc_msgSend_code(a1, v17, v18, v19) == 2056;
  else {
    BOOL v20 = 0;
  }

  return v20;
}

BOOL sub_18B1924D0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend_domain(a1, a2, a3, a4);
  if (objc_msgSend_isEqualToString_(v5, v6, @"CKInternalErrorDomain", v7)) {
    BOOL v11 = objc_msgSend_code(a1, v8, v9, v10) == 2003;
  }
  else {
    BOOL v11 = 0;
  }

  return v11;
}

uint64_t sub_18B19252C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_userInfo(a1, a2, a3, a4);
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, *MEMORY[0x1E4F28A50], v6);

  BOOL v11 = objc_msgSend_domain(v7, v8, v9, v10);
  if (objc_msgSend_isEqualToString_(v11, v12, @"CKInternalErrorDomain", v13))
  {
    uint64_t v14 = CKTopLevelUnderlyingErrorCodes();
    uint64_t v15 = NSNumber;
    uint64_t v19 = objc_msgSend_code(v7, v16, v17, v18);
    uint64_t v22 = objc_msgSend_numberWithInteger_(v15, v20, v19, v21);
    uint64_t v25 = objc_msgSend_containsObject_(v14, v23, (uint64_t)v22, v24);
  }
  else
  {
    uint64_t v25 = 0;
  }

  return v25;
}

id sub_18B1925FC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v8 = objc_msgSend_domain(a1, v5, v6, v7);
  if (objc_msgSend_isEqualToString_(v8, v9, @"CKErrorDomain", v10))
  {
    uint64_t v14 = objc_msgSend_code(a1, v11, v12, v13);

    if (v14 == 2)
    {
      uint64_t v17 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], v15, (uint64_t)v4, v16);
      uint64_t v21 = objc_msgSend_userInfo(a1, v18, v19, v20);
      uint64_t v24 = objc_msgSend_objectForKeyedSubscript_(v21, v22, @"CKPartialErrors", v23);

      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 3221225472;
      v52[2] = sub_18B1927E0;
      void v52[3] = &unk_1E5465F60;
      id v25 = v17;
      id v53 = v25;
      int v28 = objc_msgSend_CKFilter_(v24, v26, (uint64_t)v52, v27);
      if (objc_msgSend_count(v28, v29, v30, v31))
      {
        uint64_t v35 = objc_msgSend_userInfo(a1, v32, v33, v34);
        uint64_t v39 = objc_msgSend_mutableCopy(v35, v36, v37, v38);

        objc_msgSend_setObject_forKeyedSubscript_(v39, v40, (uint64_t)v28, @"CKPartialErrors");
        uint64_t v44 = objc_msgSend_domain(a1, v41, v42, v43);
        uint64_t v48 = objc_msgSend_code(a1, v45, v46, v47);
        objc_msgSend_errorWithDomain_code_userInfo_(CKPrettyError, v49, (uint64_t)v44, v48, v39);
        id v50 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v50 = 0;
      }

      goto LABEL_9;
    }
  }
  else
  {
  }
  id v50 = a1;
LABEL_9:

  return v50;
}

uint64_t sub_18B1927E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_zoneID(v3, v4, v5, v6);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_7:
      uint64_t v11 = 0;
      goto LABEL_8;
    }
    id v7 = v3;
  }
  uint64_t v10 = v7;
  if (!v7) {
    goto LABEL_7;
  }
  uint64_t v11 = objc_msgSend_containsObject_(*(void **)(a1 + 32), v8, (uint64_t)v7, v9);

LABEL_8:
  return v11;
}

id sub_18B192888(void *a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = objc_msgSend_domain(a1, v4, v5, v6);
    char isEqualToString = objc_msgSend_isEqualToString_(v8, v9, @"CKErrorDomain", v10);

    if ((isEqualToString & 1) == 0 || objc_msgSend_code(a1, v12, v13, v14) != 2)
    {
      id v31 = a1;
      goto LABEL_8;
    }
    uint64_t v18 = objc_msgSend_userInfo(a1, v15, v16, v17);
    uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v18, v19, @"CKPartialErrors", v20);

    if (v21)
    {
      id v25 = objc_msgSend_userInfo(a1, v22, v23, v24);
      int v28 = objc_msgSend_objectForKeyedSubscript_(v25, v26, @"CKPartialErrors", v27);
      objc_msgSend_objectForKeyedSubscript_(v28, v29, (uint64_t)v7, v30);
      id v31 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_8;
    }
  }
  id v31 = 0;
LABEL_8:

  return v31;
}

BOOL CKErrorIsCode(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v7 = objc_msgSend_code(v3, v4, v5, v6);
  uint64_t v11 = objc_msgSend_domain(v3, v8, v9, v10);
  int isEqualToString = objc_msgSend_isEqualToString_(v11, v12, @"CKInternalErrorDomain", v13);

  if (isEqualToString)
  {
    uint64_t v18 = objc_msgSend_code(v3, v15, v16, v17);

    uint64_t v7 = CKErrorCodeForUnderlyingErrorCode(v18, v19, v20, v21);
    return v7 == a2;
  }
  uint64_t v22 = objc_msgSend_domain(v3, v15, v16, v17);

  int v25 = objc_msgSend_isEqualToString_(v22, v23, @"CKErrorDomain", v24);
  if (v25) {
    return v7 == a2;
  }
  return 0;
}

uint64_t CKCanRetryForError(void *a1)
{
  id v1 = a1;
  unint64_t v5 = objc_msgSend_code(v1, v2, v3, v4);
  uint64_t v9 = objc_msgSend_domain(v1, v6, v7, v8);
  int isEqualToString = objc_msgSend_isEqualToString_(v9, v10, @"CKInternalErrorDomain", v11);

  if (isEqualToString)
  {
    uint64_t v16 = objc_msgSend_code(v1, v13, v14, v15);

    unint64_t v5 = CKErrorCodeForUnderlyingErrorCode(v16, v17, v18, v19);
  }
  else
  {
    uint64_t v20 = objc_msgSend_domain(v1, v13, v14, v15);

    int v23 = objc_msgSend_isEqualToString_(v20, v21, @"CKErrorDomain", v22);
    if (!v23) {
      return 0;
    }
  }
  uint64_t result = 1;
  if ((v5 > 0x19 || ((1 << v5) & 0x29002F8) == 0) && v5 != 115) {
    return 0;
  }
  return result;
}

void sub_18B192B2C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  unint64_t v5 = objc_msgSend_userInfo(a3, a2, (uint64_t)a3, a4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, @"CKRetryAfter", v7);
  id obj = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v11 = obj;
  if (obj)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(void *)(v12 + 40))
    {
      objc_msgSend_doubleValue(obj, v8, v9, v10);
      double v14 = v13;
      objc_msgSend_doubleValue(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v15, v16, v17);
      uint64_t v11 = obj;
      if (v14 >= v18) {
        goto LABEL_6;
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
    }
    objc_storeStrong((id *)(v12 + 40), obj);
    uint64_t v11 = obj;
  }
LABEL_6:
}

id sub_18B192BE8(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v6 = objc_msgSend_CKStringForWellKnownCKErrors(v2, v3, v4, v5);
  uint64_t v8 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v6, v7, @" ", (uint64_t)&stru_1ED7F5C98);

  if (!v8)
  {
    uint64_t v12 = NSString;
    uint64_t v13 = objc_msgSend_code(v2, v9, v10, v11);
    uint64_t v8 = objc_msgSend_stringWithFormat_(v12, v14, @"%ld", v15, v13);
  }
  uint64_t v16 = NSString;
  uint64_t v17 = objc_msgSend_domain(v2, v9, v10, v11);
  uint64_t v20 = objc_msgSend_stringWithFormat_(v16, v18, @"%@.%@", v19, v17, v8);

  return v20;
}

void sub_18B192CE0(uint64_t a1, const char *a2)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = *MEMORY[0x1E4F28A50];
  v9[0] = @"CKPartialErrors";
  v9[1] = v3;
  v9[2] = *MEMORY[0x1E4F28750];
  v9[3] = @"CKFunctionError";
  void v9[4] = @"AncestorRecord";
  void v9[5] = @"ServerRecord";
  v9[6] = @"ClientRecord";
  v9[7] = @"NotFoundItemID";
  v9[8] = @"CKRecordMovedDestinationID";
  uint64_t v4 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v9, 9);
  uint64_t v7 = objc_msgSend_setWithArray_(v2, v5, (uint64_t)v4, v6);
  uint64_t v8 = (void *)qword_1EB279F38;
  qword_1EB279F38 = v7;
}

BOOL CKShouldWrapErrorFetchingRecords(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_domain(v1, v2, v3, v4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"CKInternalErrorDomain", v7);

  if (isEqualToString)
  {
    uint64_t v12 = objc_msgSend_code(v1, v9, v10, v11);
    if ((unint64_t)(v12 - 5006) > 8 || (BOOL v13 = 0, ((1 << (v12 + 114)) & 0x10D) == 0)) {
      BOOL v13 = v12 != 10006;
    }
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

void CKAddResponseHeaderValuesToUserInfoDictionary(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v10 = objc_msgSend_statusCode(v3, v5, v6, v7);
  if ((unint64_t)(v10 - 200) >= 0x64)
  {
    uint64_t v11 = objc_msgSend_numberWithInteger_(NSNumber, v8, v10, v9);
    objc_msgSend_setObject_forKeyedSubscript_(v4, v12, (uint64_t)v11, @"CKHTTPStatus");
  }
  BOOL v13 = objc_msgSend_valueForHTTPHeaderField_(v3, v8, @"Retry-After", v9);
  uint64_t v17 = v13;
  if (v13 || v10 == 503 || v10 == 429)
  {
    int v18 = objc_msgSend_intValue(v13, v14, v15, v16);
    if (v18 >= 86400) {
      int v21 = 86400;
    }
    else {
      int v21 = v18;
    }
    if (v21 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v21;
    }
    if (v22 != v18)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      int v23 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        int v33 = 138412546;
        uint64_t v34 = v17;
        __int16 v35 = 1024;
        int v36 = v22;
        _os_log_error_impl(&dword_18AF10000, v23, OS_LOG_TYPE_ERROR, "Invalid or out of range Retry-After header value: %@. Used %d", (uint8_t *)&v33, 0x12u);
      }
    }
    uint64_t v24 = objc_msgSend_numberWithInt_(NSNumber, v19, v22, v20);
    objc_msgSend_setObject_forKeyedSubscript_(v4, v25, (uint64_t)v24, @"CKRetryAfter");
  }
  uint64_t v26 = objc_msgSend_valueForHTTPHeaderField_(v3, v14, @"X-Apple-Request-UUID", v16);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v27, (uint64_t)v26, @"RequestUUID");

  id v31 = objc_msgSend_allHeaderFields(v3, v28, v29, v30);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v32, (uint64_t)v31, @"CKDHTTPHeaders");
}

id CKErrorFromHTTPResponse(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v5 = objc_msgSend_statusCode(v1, v2, v3, v4);
  if ((unint64_t)(v5 - 200) <= 0x63)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v14 = v5;
      _os_log_fault_impl(&dword_18AF10000, v6, OS_LOG_TYPE_FAULT, "Expected failure HTTP status code (%ld)", buf, 0xCu);
    }
  }
  if (v5 == 503 || v5 == 429) {
    uint64_t v8 = 2009;
  }
  else {
    uint64_t v8 = 2001;
  }
  uint64_t v9 = objc_opt_new();
  CKAddResponseHeaderValuesToUserInfoDictionary(v1, v9);

  uint64_t v11 = objc_msgSend_errorWithDomain_code_userInfo_format_(CKPrettyError, v10, @"CKInternalErrorDomain", v8, v9, @"Request failed with http status code %ld", v5);

  return v11;
}

uint64_t CKErrorShouldDefer(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_domain(v1, v2, v3, v4);
  uint64_t isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"CKErrorDomain", v7);

  if (isEqualToString)
  {
    uint64_t v12 = objc_msgSend_code(v1, v9, v10, v11);
    if (v12 == 132)
    {
      uint64_t isEqualToString = 1;
    }
    else
    {
      if (v12 == 20)
      {
        uint64_t v16 = objc_msgSend_userInfo(v1, v13, v14, v15);
        uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v16, v17, *MEMORY[0x1E4F28A50], v18);

        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          int v23 = objc_msgSend_domain(v19, v20, v21, v22);
          int v26 = objc_msgSend_isEqualToString_(v23, v24, @"CKErrorDomain", v25);

          if (v26)
          {
            uint64_t v30 = objc_msgSend_code(v19, v27, v28, v29);
            if (v30 == 131)
            {
              uint64_t isEqualToString = 1;
              goto LABEL_14;
            }
            if (v30 == 130)
            {
              uint64_t isEqualToString = 0;
LABEL_14:

              goto LABEL_12;
            }
          }
        }
      }
      uint64_t isEqualToString = 0;
    }
  }
LABEL_12:

  return isEqualToString;
}

void sub_18B195CD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B19705C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  objc_sync_exit(v19);
  os_activity_scope_leave((os_activity_scope_state_t)(v20 - 80));
  _Unwind_Resume(a1);
}

void sub_18B197094(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v3 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_error_impl(&dword_18AF10000, v3, OS_LOG_TYPE_ERROR, "Error getting proxy for max mergeable delta size: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_18B197174(uint64_t a1, void *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_18B197220;
  v6[3] = &unk_1E5465FE0;
  uint64_t v9 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  objc_msgSend_suggestedMergeableDeltaSizeWithCompletionHandler_(a2, v4, (uint64_t)v6, v5);
}

void sub_18B197220(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_numberWithInteger_(NSNumber, a2, (uint64_t)a2, a4);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v5;

  uint64_t v11 = objc_msgSend_mutableCopy((void *)qword_1EB2796E0, v8, v9, v10);
  objc_msgSend_setObject_forKeyedSubscript_(v11, v12, *(void *)(*(void *)(a1[6] + 8) + 40), a1[4]);
  uint64_t v16 = objc_msgSend_copy(v11, v13, v14, v15);
  uint64_t v17 = (void *)qword_1EB2796E0;
  qword_1EB2796E0 = v16;

  uint64_t v21 = objc_msgSend_mutableCopy((void *)qword_1EB2796E8, v18, v19, v20);
  uint64_t v22 = NSNumber;
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v23, v24, v25);
  uint64_t v29 = objc_msgSend_numberWithDouble_(v22, v26, v27, v28);
  objc_msgSend_setObject_forKeyedSubscript_(v21, v30, (uint64_t)v29, a1[4]);

  uint64_t v34 = objc_msgSend_copy(v21, v31, v32, v33);
  __int16 v35 = (void *)qword_1EB2796E8;
  qword_1EB2796E8 = v34;

  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  int v36 = (void *)ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
  {
    uint64_t v37 = (void *)a1[5];
    uint64_t v38 = v36;
    uint64_t v42 = objc_msgSend_containerIdentifier(v37, v39, v40, v41);
    uint64_t v46 = objc_msgSend_integerValue(*(void **)(*(void *)(a1[6] + 8) + 40), v43, v44, v45);
    int v47 = 138412546;
    uint64_t v48 = v42;
    __int16 v49 = 2048;
    uint64_t v50 = v46;
    _os_log_impl(&dword_18AF10000, v38, OS_LOG_TYPE_INFO, "Fetched suggested delta size from daemon for container %@: %ld", (uint8_t *)&v47, 0x16u);
  }
}

void sub_18B197AFC(uint64_t a1)
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.cloudkit.sync-engine.state", v2);
  int v4 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v3;

  uint64_t v7 = objc_msgSend_stringWithFormat_(NSString, v5, @" %p", v6, a1);
  id v8 = *(void **)(a1 + 160);
  *(void *)(a1 + 16dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;

  uint64_t v9 = *(NSObject **)(a1 + 56);

  dispatch_queue_set_specific(v9, (const void *)(a1 + 56), (void *)1, 0);
}

uint64_t sub_18B197C64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 64), a2, a3, a4);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 32), v5, v6, v7);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 80), v8, v9, v10);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 88), v11, v12, v13);
  uint64_t result = objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 72), v14, v15, v16);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += result;
  return result;
}

void sub_18B197EBC(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;

  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 32);
  *(void *)(v6 + 32) = v5;

  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 80);
  *(void *)(v9 + 8dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v8;

  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 88);
  *(void *)(v12 + 8_Block_object_dispose(&STACK[0x280], 8) = v11;

  id v14 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void **)(v15 + 72);
  *(void *)(v15 + 72) = v14;

  *(unsigned char *)(*(void *)(a1 + 32) + 11) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 12) = 0;
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void **)(v17 + 16);
  *(void *)(v17 + 16) = 0;

  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void **)(v19 + 24);
  *(void *)(v19 + 24) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 1dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x280], 8) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
}

void sub_18B1980A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5 = NSNumber;
  uint64_t DatabaseChanges = objc_msgSend_needsToFetchDatabaseChanges(*(void **)(a1 + 40), a2, a3, a4);
  uint64_t v9 = objc_msgSend_numberWithBool_(v5, v7, DatabaseChanges, v8);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v9, @"needsToFetchDatabaseChanges");

  id v11 = NSNumber;
  uint64_t v15 = objc_msgSend_needsToSaveDatabaseSubscription(*(void **)(a1 + 40), v12, v13, v14);
  uint64_t v18 = objc_msgSend_numberWithBool_(v11, v16, v15, v17);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v19, (uint64_t)v18, @"needsToSaveDatabaseSubscription");

  if (objc_msgSend_hasPendingUntrackedChanges(*(void **)(a1 + 40), v20, v21, v22))
  {
    int v26 = NSNumber;
    uint64_t hasPendingUntrackedChanges = objc_msgSend_hasPendingUntrackedChanges(*(void **)(a1 + 40), v23, v24, v25);
    uint64_t v30 = objc_msgSend_numberWithBool_(v26, v28, hasPendingUntrackedChanges, v29);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v31, (uint64_t)v30, @"hasPendingUntrackedChanges");
  }
  if (objc_msgSend_hasInFlightUntrackedChanges(*(void **)(a1 + 40), v23, v24, v25))
  {
    __int16 v35 = NSNumber;
    uint64_t v36 = objc_msgSend_hasInFlightUntrackedChanges(*(void **)(a1 + 40), v32, v33, v34);
    uint64_t v39 = objc_msgSend_numberWithBool_(v35, v37, v36, v38);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v40, (uint64_t)v39, @"hasInFlightUntrackedChanges");
  }
  uint64_t v41 = *(void **)(a1 + 32);
  uint64_t v42 = objc_msgSend_serverChangeTokenForDatabase(*(void **)(a1 + 40), v32, v33, v34);
  objc_msgSend_CKAddPropertySafelyForKey_value_(v41, v43, @"serverChangeTokenForDatabase", (uint64_t)v42);

  if ((objc_msgSend_didPerformInitialUserRecordIDFetch(*(void **)(a1 + 40), v44, v45, v46) & 1) == 0)
  {
    uint64_t v50 = NSNumber;
    uint64_t v51 = objc_msgSend_didPerformInitialUserRecordIDFetch(*(void **)(a1 + 40), v47, v48, v49);
    uint64_t v54 = objc_msgSend_numberWithBool_(v50, v52, v51, v53);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v55, (uint64_t)v54, @"didPerformInitialUserRecordIDFetch");
  }
  uint64_t v56 = *(void **)(a1 + 32);
  uint64_t v57 = objc_msgSend_lastFetchDatabaseChangesDate(*(void **)(a1 + 40), v47, v48, v49);
  objc_msgSend_CKAddPropertySafelyForKey_value_(v56, v58, @"lastFetchDatabaseChangesDate", (uint64_t)v57);

  uint64_t v59 = *(void **)(a1 + 32);
  id v63 = objc_msgSend_existingDatabaseSubscriptionID(*(void **)(a1 + 40), v60, v61, v62);
  objc_msgSend_CKAddPropertySafelyForKey_value_(v59, v64, @"existingDatabaseSubscriptionID", (uint64_t)v63);

  id v65 = *(void **)(a1 + 32);
  uint64_t v69 = objc_msgSend_lastKnownUserRecordID(*(void **)(a1 + 40), v66, v67, v68);
  uint64_t v71 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v69, v70, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50));
  objc_msgSend_CKAddPropertySafelyForKey_value_(v65, v72, @"lastKnownUserRecordID", (uint64_t)v71);

  uint64_t v73 = *(void **)(a1 + 40);
  if (*(unsigned char *)(a1 + 50))
  {
    uint64_t v74 = *(void **)(a1 + 32);
    if (v73) {
      uint64_t v73 = (void *)v73[8];
    }
    char v75 = v73;
    long long v79 = objc_msgSend_array(v75, v76, v77, v78);
    id v81 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v79, v80, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50));
    objc_msgSend_CKAddPropertySafelyForKey_value_(v74, v82, @"zoneIDsWithUnfetchedServerChanges", (uint64_t)v81);

    long long v83 = *(void **)(a1 + 32);
    uint64_t v87 = objc_msgSend_mServerChangeTokensByZoneID(*(void **)(a1 + 40), v84, v85, v86);
    uint64_t v89 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v87, v88, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50));
    objc_msgSend_CKAddPropertySafelyForKey_value_(v83, v90, @"serverChangeTokensByZoneID", (uint64_t)v89);

    uint64_t v92 = *(void **)(a1 + 32);
    uint64_t v91 = *(void **)(a1 + 40);
    if (v91) {
      uint64_t v91 = (void *)v91[10];
    }
    uint64_t v93 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v94 = *(unsigned __int8 *)(a1 + 49);
    uint64_t v95 = *(unsigned __int8 *)(a1 + 50);
    id v96 = v91;
    uint64_t v98 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v96, v97, v93, v94, v95);
    objc_msgSend_CKAddPropertySafelyForKey_value_(v92, v99, @"pendingRecordZoneChanges", (uint64_t)v98);

    uint64_t v103 = *(void *)(a1 + 40);
    if (v103) {
      uint64_t v104 = objc_msgSend_count(*(void **)(v103 + 88), v100, v101, v102);
    }
    else {
      uint64_t v104 = objc_msgSend_count(0, v100, v101, v102);
    }
    if (v104)
    {
      uint64_t v106 = *(void **)(a1 + 32);
      uint64_t v105 = *(void **)(a1 + 40);
      if (v105) {
        uint64_t v105 = (void *)v105[11];
      }
      uint64_t v107 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v108 = *(unsigned __int8 *)(a1 + 49);
      uint64_t v109 = *(unsigned __int8 *)(a1 + 50);
      uint64_t v110 = v105;
      uint64_t v112 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v110, v111, v107, v108, v109);
      objc_msgSend_CKAddPropertySafelyForKey_value_(v106, v113, @"inFlightRecordZoneChanges", (uint64_t)v112);
    }
    uint64_t v115 = *(void **)(a1 + 32);
    uint64_t v114 = *(void **)(a1 + 40);
    if (v114) {
      uint64_t v114 = (void *)v114[9];
    }
    uint64_t v116 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v117 = *(unsigned __int8 *)(a1 + 49);
    uint64_t v118 = *(unsigned __int8 *)(a1 + 50);
    uint64_t v119 = v114;
    objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v119, v120, v116, v117, v118);
    id v183 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKAddPropertySafelyForKey_value_(v115, v121, @"pendingDatabaseChanges", (uint64_t)v183);
  }
  else
  {
    uint64_t v122 = NSNumber;
    if (v73) {
      uint64_t v73 = (void *)v73[8];
    }
    uint64_t v123 = v73;
    uint64_t v127 = objc_msgSend_count(v123, v124, v125, v126);
    uint64_t v130 = objc_msgSend_numberWithUnsignedInteger_(v122, v128, v127, v129);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v131, (uint64_t)v130, @"zoneIDsWithUnfetchedServerChanges.count");

    uint64_t v132 = NSNumber;
    uint64_t v136 = objc_msgSend_mServerChangeTokensByZoneID(*(void **)(a1 + 40), v133, v134, v135);
    uint64_t v140 = objc_msgSend_count(v136, v137, v138, v139);
    uint64_t v143 = objc_msgSend_numberWithUnsignedInteger_(v132, v141, v140, v142);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v144, (uint64_t)v143, @"serverChangeTokensByZoneID.count");

    uint64_t v145 = NSNumber;
    uint64_t v146 = *(void **)(a1 + 40);
    if (v146) {
      uint64_t v146 = (void *)v146[10];
    }
    uint64_t v147 = v146;
    uint64_t v151 = objc_msgSend_count(v147, v148, v149, v150);
    uint64_t v154 = objc_msgSend_numberWithUnsignedInteger_(v145, v152, v151, v153);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v155, (uint64_t)v154, @"pendingRecordZoneChanges.count");

    uint64_t v159 = *(void *)(a1 + 40);
    if (v159) {
      uint64_t v160 = objc_msgSend_count(*(void **)(v159 + 88), v156, v157, v158);
    }
    else {
      uint64_t v160 = objc_msgSend_count(0, v156, v157, v158);
    }
    if (v160)
    {
      uint64_t v164 = NSNumber;
      uint64_t v165 = *(void **)(a1 + 40);
      if (v165) {
        uint64_t v165 = (void *)v165[11];
      }
      id v166 = v165;
      uint64_t v170 = objc_msgSend_count(v166, v167, v168, v169);
      uint64_t v173 = objc_msgSend_numberWithUnsignedInteger_(v164, v171, v170, v172);
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v174, (uint64_t)v173, @"inFlightRecordZoneChanges.count");
    }
    v175 = NSNumber;
    objc_msgSend_pendingDatabaseChanges(*(void **)(a1 + 40), v161, v162, v163);
    id v183 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v179 = objc_msgSend_count(v183, v176, v177, v178);
    uint64_t v119 = objc_msgSend_numberWithUnsignedInteger_(v175, v180, v179, v181);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v182, (uint64_t)v119, @"pendingDatabaseChanges.count");
  }
}

id sub_18B1992EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [CKSyncEnginePendingZoneSave alloc];
  int v4 = [CKRecordZone alloc];
  uint64_t v7 = objc_msgSend_initWithZoneID_(v4, v5, (uint64_t)v2, v6);

  uint64_t v10 = objc_msgSend_initWithZone_(v3, v8, (uint64_t)v7, v9);

  return v10;
}

id sub_18B199370(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [CKSyncEnginePendingZoneDelete alloc];
  uint64_t v6 = objc_msgSend_initWithZoneID_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

void sub_18B1995F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18B19961C(void *a1, const char *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 96);
  }
  *(void *)(*(void *)(a1[5] + 8) + 24) = v3;
  uint64_t v4 = a1[4];
  id v10 = 0;
  uint64_t v5 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E4F28DB0], a2, v4, 1, &v10);
  id v6 = v10;
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v5;

  if (v6)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v6;
      _os_log_fault_impl(&dword_18AF10000, v9, OS_LOG_TYPE_FAULT, "BUG IN CLOUDKIT: Error serializing sync engine metadata: %@", buf, 0xCu);
    }
  }
}

void sub_18B199874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19988C(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], a2, a1[4], a4);
  uint64_t v9 = a1[5];
  if (v9) {
    objc_msgSend_set(*(void **)(v9 + 80), v5, v6, v7);
  }
  else {
  id v10 = objc_msgSend_set(0, v5, v6, v7);
  }
  char isSubsetOfSet = objc_msgSend_isSubsetOfSet_(v8, v11, (uint64_t)v10, v12);

  if ((isSubsetOfSet & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v22 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = (void *)a1[5];
      uint64_t v37 = v22;
      uint64_t v41 = objc_msgSend_shortDescription(v36, v38, v39, v40);
      uint64_t v42 = a1[4];
      int v43 = 138543618;
      uint64_t v44 = v41;
      __int16 v45 = 2112;
      uint64_t v46 = v42;
      _os_log_debug_impl(&dword_18AF10000, v37, OS_LOG_TYPE_DEBUG, "%{public}@ adding pending record zone changes: %@", (uint8_t *)&v43, 0x16u);
    }
    uint64_t v25 = (void *)MEMORY[0x1E4F1CAD0];
    int v26 = objc_msgSend_recordChangesWithOppositeTypeFromRecordChanges_(CKSyncEnginePendingRecordZoneChange, v23, a1[4], v24);
    uint64_t v16 = objc_msgSend_setWithArray_(v25, v27, (uint64_t)v26, v28);

    uint64_t v31 = a1[5];
    if (v31) {
      objc_msgSend_minusSet_(*(void **)(v31 + 80), v29, (uint64_t)v16, v30);
    }
    else {
      objc_msgSend_minusSet_(0, v29, (uint64_t)v16, v30);
    }
    uint64_t v34 = a1[5];
    if (v34) {
      objc_msgSend_addObjectsFromArray_(*(void **)(v34 + 80), v32, a1[4], v33);
    }
    else {
      objc_msgSend_addObjectsFromArray_(0, v32, a1[4], v33);
    }
    uint64_t v35 = a1[5];
    if (v35) {
      ++*(void *)(v35 + 96);
    }
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    goto LABEL_19;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v14 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = (void *)a1[5];
    uint64_t v16 = v14;
    uint64_t v20 = objc_msgSend_shortDescription(v15, v17, v18, v19);
    uint64_t v21 = a1[4];
    int v43 = 138543618;
    uint64_t v44 = v20;
    __int16 v45 = 2112;
    uint64_t v46 = v21;
    _os_log_debug_impl(&dword_18AF10000, v16, OS_LOG_TYPE_DEBUG, "%{public}@ no new record zone changes to add: %@", (uint8_t *)&v43, 0x16u);

LABEL_19:
  }
}

void sub_18B199C08(uint64_t a1)
{
  *(void *)&v88[13] = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
  {
    id v65 = *(void **)(a1 + 32);
    id v66 = v2;
    id v70 = objc_msgSend_shortDescription(v65, v67, v68, v69);
    int v71 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v72 = *(void *)(a1 + 40);
    int v85 = 138543874;
    uint64_t v86 = v70;
    __int16 v87 = 1024;
    *(_DWORD *)uint64_t v88 = v71;
    v88[2] = 2112;
    *(void *)&v88[3] = v72;
    _os_log_debug_impl(&dword_18AF10000, v66, OS_LOG_TYPE_DEBUG, "%{public}@ marking record zone changes inFlight=%d: %@", (uint8_t *)&v85, 0x1Cu);
  }
  id v3 = objc_alloc(MEMORY[0x1E4F1CA70]);
  uint64_t v6 = objc_msgSend_initWithArray_(v3, v4, *(void *)(a1 + 40), v5);
  int v7 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v13 = objc_msgSend_count(v6, v8, v9, v10);
  uint64_t v14 = *(void *)(a1 + 32);
  if (v7)
  {
    if (v14) {
      objc_msgSend_intersectOrderedSet_(v6, v11, *(void *)(v14 + 80), v12);
    }
    else {
      objc_msgSend_intersectOrderedSet_(v6, v11, 0, v12);
    }
    uint64_t v18 = objc_msgSend_count(v6, v15, v16, v17);
    uint64_t v21 = v18 - v13;
    if (v18 != v13)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v22 = (void *)ck_log_facility_engine;
      if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v73 = *(void **)(a1 + 32);
        uint64_t v74 = v22;
        uint64_t v78 = objc_msgSend_shortDescription(v73, v75, v76, v77);
        int v85 = 138543618;
        uint64_t v86 = v78;
        __int16 v87 = 2048;
        *(void *)uint64_t v88 = v21;
        _os_log_debug_impl(&dword_18AF10000, v74, OS_LOG_TYPE_DEBUG, "%{public}@ trying to mark %ld changes in flight that aren't pending", (uint8_t *)&v85, 0x16u);
      }
    }
    uint64_t v23 = *(void *)(a1 + 32);
    if (v23) {
      objc_msgSend_minusOrderedSet_(*(void **)(v23 + 80), v19, (uint64_t)v6, v20);
    }
    else {
      objc_msgSend_minusOrderedSet_(0, v19, (uint64_t)v6, v20);
    }
    uint64_t v26 = *(void *)(a1 + 32);
    if (v26) {
      objc_msgSend_unionOrderedSet_(*(void **)(v26 + 88), v24, (uint64_t)v6, v25);
    }
    else {
      objc_msgSend_unionOrderedSet_(0, v24, (uint64_t)v6, v25);
    }
  }
  else
  {
    if (v14) {
      objc_msgSend_intersectOrderedSet_(v6, v11, *(void *)(v14 + 88), v12);
    }
    else {
      objc_msgSend_intersectOrderedSet_(v6, v11, 0, v12);
    }
    uint64_t v30 = objc_msgSend_count(v6, v27, v28, v29);
    uint64_t v33 = v30 - v13;
    if (v30 != v13)
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v34 = (void *)ck_log_facility_engine;
      if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
      {
        long long v79 = *(void **)(a1 + 32);
        uint64_t v80 = v34;
        long long v84 = objc_msgSend_shortDescription(v79, v81, v82, v83);
        int v85 = 138543618;
        uint64_t v86 = v84;
        __int16 v87 = 2048;
        *(void *)uint64_t v88 = v33;
        _os_log_debug_impl(&dword_18AF10000, v80, OS_LOG_TYPE_DEBUG, "%{public}@ trying to mark %ld changes as no longer in flight that aren't in flight", (uint8_t *)&v85, 0x16u);
      }
    }
    uint64_t v35 = *(void *)(a1 + 32);
    if (v35) {
      objc_msgSend_minusOrderedSet_(*(void **)(v35 + 88), v31, (uint64_t)v6, v32);
    }
    else {
      objc_msgSend_minusOrderedSet_(0, v31, (uint64_t)v6, v32);
    }
    uint64_t v39 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v40 = *(void *)(a1 + 32);
    if (v40) {
      objc_msgSend_array(*(void **)(v40 + 80), v36, v37, v38);
    }
    else {
    uint64_t v41 = objc_msgSend_array(0, v36, v37, v38);
    }
    uint64_t v44 = objc_msgSend_recordChangesWithOppositeTypeFromRecordChanges_(CKSyncEnginePendingRecordZoneChange, v42, (uint64_t)v41, v43);
    uint64_t v47 = objc_msgSend_setWithArray_(v39, v45, (uint64_t)v44, v46);

    objc_msgSend_minusSet_(v6, v48, (uint64_t)v47, v49);
    uint64_t v50 = *(void **)(a1 + 32);
    if (v50) {
      uint64_t v50 = (void *)v50[10];
    }
    uint64_t v51 = v50;
    uint64_t v55 = objc_msgSend_array(v6, v52, v53, v54);
    uint64_t v56 = (void *)MEMORY[0x1E4F28D60];
    uint64_t v60 = objc_msgSend_count(v6, v57, v58, v59);
    uint64_t v62 = objc_msgSend_indexSetWithIndexesInRange_(v56, v61, 0, v60);
    objc_msgSend_insertObjects_atIndexes_(v51, v63, (uint64_t)v55, (uint64_t)v62);
  }
  uint64_t v64 = *(void *)(a1 + 32);
  if (v64) {
    ++*(void *)(v64 + 96);
  }
}

void sub_18B19A040(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], a2, a1[4], a4);
  uint64_t v9 = a1[5];
  if (v9) {
    objc_msgSend_set(*(void **)(v9 + 80), v5, v6, v7);
  }
  else {
  uint64_t v10 = objc_msgSend_set(0, v5, v6, v7);
  }
  int v13 = objc_msgSend_intersectsSet_(v8, v11, (uint64_t)v10, v12);

  if (v13)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v14 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)a1[5];
      uint64_t v18 = v14;
      uint64_t v22 = objc_msgSend_shortDescription(v17, v19, v20, v21);
      uint64_t v23 = a1[4];
      int v26 = 138543618;
      uint64_t v27 = v22;
      __int16 v28 = 2112;
      uint64_t v29 = v23;
      _os_log_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ removing pending record zone changes: %@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v24 = a1[5];
    if (v24) {
      objc_msgSend_minusSet_(*(void **)(v24 + 80), v15, (uint64_t)v8, v16);
    }
    else {
      objc_msgSend_minusSet_(0, v15, (uint64_t)v8, v16);
    }
    uint64_t v25 = a1[5];
    if (v25) {
      ++*(void *)(v25 + 96);
    }
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
}

uint64_t sub_18B19A2B4(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = v2;
    int v13 = objc_msgSend_shortDescription(v8, v10, v11, v12);
    uint64_t v14 = *(void *)(a1 + 40);
    int v15 = 138543618;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    uint64_t v18 = v14;
    _os_log_debug_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEBUG, "%{public}@ removing in flight record zone changes: %@", (uint8_t *)&v15, 0x16u);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    uint64_t result = objc_msgSend_removeObjectsInArray_(*(void **)(v5 + 88), v3, *(void *)(a1 + 40), v4);
  }
  else {
    uint64_t result = objc_msgSend_removeObjectsInArray_(0, v3, *(void *)(a1 + 40), v4);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    ++*(void *)(v7 + 96);
  }
  return result;
}

void sub_18B19A4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19A514(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2) {
    id v2 = (void *)v2[11];
  }
  uint64_t v3 = a1[5];
  uint64_t v6 = v2;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = objc_msgSend_containsObject_(v6, v4, v3, v5);
}

void sub_18B19A680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19A698(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2) {
    id v2 = (void *)v2[10];
  }
  uint64_t v3 = a1[5];
  uint64_t v6 = v2;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = objc_msgSend_containsObject_(v6, v4, v3, v5);
}

void sub_18B19A8A0(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void **)(a1 + 32);
    int v26 = v2;
    uint64_t v30 = objc_msgSend_shortDescription(v25, v27, v28, v29);
    uint64_t v31 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v38 = v30;
    __int16 v39 = 2112;
    uint64_t v40 = v31;
    _os_log_debug_impl(&dword_18AF10000, v26, OS_LOG_TYPE_DEBUG, "%{public}@ setting pending record zone changes: %@", buf, 0x16u);
  }
  id v3 = objc_alloc(MEMORY[0x1E4F1CA70]);
  uint64_t v6 = objc_msgSend_initWithArray_(v3, v4, *(void *)(a1 + 40), v5);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v10 = objc_msgSend_reverseObjectEnumerator(*(void **)(a1 + 40), v7, v8, v9, 0);
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v32, (uint64_t)v36, 16);
  if (v12)
  {
    uint64_t v15 = v12;
    uint64_t v16 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v33 != v16) {
          objc_enumerationMutation(v10);
        }
        uint64_t v18 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        if (objc_msgSend_containsObject_(v6, v13, (uint64_t)v18, v14))
        {
          uint64_t v20 = objc_msgSend_oppositeTypeChange(v18, v13, v19, v14);
          objc_msgSend_removeObject_(v6, v21, (uint64_t)v20, v22);
        }
      }
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v32, (uint64_t)v36, 16);
    }
    while (v15);
  }

  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v24 = *(void **)(v23 + 80);
  *(void *)(v23 + 8dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v6;
}

void sub_18B19ABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19ABD8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[11];
  }
  id v3 = v2;
  objc_msgSend_array(v3, v4, v5, v6);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_copy(v13, v7, v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v10;
}

uint64_t sub_18B19ACD4(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    uint64_t v8 = objc_msgSend_shortDescription(v3, v5, v6, v7);
    int v27 = 138543362;
    uint64_t v28 = v8;
    _os_log_impl(&dword_18AF10000, v4, OS_LOG_TYPE_INFO, "%{public}@ moving in flight changes to pending", (uint8_t *)&v27, 0xCu);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    uint64_t v10 = *(void **)(v9 + 80);
    uint64_t v11 = *(void *)(v9 + 88);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  id v12 = v10;
  objc_msgSend_unionOrderedSet_(v12, v13, v11, v14);

  uint64_t v18 = *(void *)(a1 + 32);
  if (v18) {
    objc_msgSend_removeAllObjects(*(void **)(v18 + 88), v15, v16, v17);
  }
  else {
    objc_msgSend_removeAllObjects(0, v15, v16, v17);
  }
  uint64_t result = objc_msgSend_hasInFlightUntrackedChanges(*(void **)(a1 + 32), v19, v20, v21);
  if (result)
  {
    objc_msgSend_setHasPendingUntrackedChanges_(*(void **)(a1 + 32), v23, 1, v24);
    return objc_msgSend_setHasInFlightUntrackedChanges_(*(void **)(a1 + 32), v25, 0, v26);
  }
  return result;
}

void sub_18B19AF30(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1[4] + 32), a2, a1[5], a4);
  uint64_t v8 = (void *)a1[6];
  if (v8 != v7 && (objc_msgSend_isEqual_(v8, v5, (uint64_t)v7, v6) & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v9 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = (void *)a1[4];
      id v12 = v9;
      uint64_t v16 = objc_msgSend_shortDescription(v11, v13, v14, v15);
      uint64_t v17 = a1[6];
      uint64_t v21 = objc_msgSend_ckShortDescription((void *)a1[5], v18, v19, v20);
      int v23 = 138543874;
      uint64_t v24 = v16;
      __int16 v25 = 2112;
      uint64_t v26 = v17;
      __int16 v27 = 2112;
      uint64_t v28 = v21;
      _os_log_impl(&dword_18AF10000, v12, OS_LOG_TYPE_INFO, "%{public}@ setting server change token %@ for zone ID %@", (uint8_t *)&v23, 0x20u);
    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1[4] + 32), v10, a1[6], a1[5]);
    uint64_t v22 = a1[4];
    if (v22) {
      ++*(void *)(v22 + 96);
    }
  }
}

void sub_18B19B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B19B1E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 32), a2, a3, a4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  *(void *)(v6 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v5;

  return MEMORY[0x1F41817F8](v5, v7);
}

void sub_18B19B374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B19B38C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1[4] + 32), a2, a1[5], a4);
  uint64_t v6 = *(void *)(a1[6] + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  *(void *)(v6 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v5;

  return MEMORY[0x1F41817F8](v5, v7);
}

uint64_t sub_18B19B4A8(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = v2;
    uint64_t v10 = objc_msgSend_shortDescription(v5, v7, v8, v9);
    int v11 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v15 = objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v12, v13, v14);
    int v25 = 138543874;
    uint64_t v26 = v10;
    __int16 v27 = 1024;
    int v28 = v11;
    __int16 v29 = 2112;
    uint64_t v30 = v15;
    _os_log_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ setting needs to fetch changes %d for zone %@", (uint8_t *)&v25, 0x1Cu);
  }
  uint64_t v16 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 48))
  {
    if (v16) {
      uint64_t result = objc_msgSend_containsObject_(*(void **)(v16 + 64), v3, *(void *)(a1 + 40), v4);
    }
    else {
      uint64_t result = objc_msgSend_containsObject_(0, v3, *(void *)(a1 + 40), v4);
    }
    if ((result & 1) == 0)
    {
      uint64_t v20 = *(void *)(a1 + 32);
      if (v20) {
        uint64_t result = objc_msgSend_addObject_(*(void **)(v20 + 64), v18, *(void *)(a1 + 40), v19);
      }
      else {
        uint64_t result = objc_msgSend_addObject_(0, v18, *(void *)(a1 + 40), v19);
      }
LABEL_16:
      uint64_t v24 = *(void *)(a1 + 32);
      if (v24) {
        ++*(void *)(v24 + 96);
      }
    }
  }
  else
  {
    if (v16) {
      uint64_t result = objc_msgSend_containsObject_(*(void **)(v16 + 64), v3, *(void *)(a1 + 40), v4);
    }
    else {
      uint64_t result = objc_msgSend_containsObject_(0, v3, *(void *)(a1 + 40), v4);
    }
    if (result)
    {
      uint64_t v23 = *(void *)(a1 + 32);
      if (v23) {
        uint64_t result = objc_msgSend_removeObject_(*(void **)(v23 + 64), v21, *(void *)(a1 + 40), v22);
      }
      else {
        uint64_t result = objc_msgSend_removeObject_(0, v21, *(void *)(a1 + 40), v22);
      }
      goto LABEL_16;
    }
  }
  return result;
}

void sub_18B19B778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19B790(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2) {
    id v2 = (void *)v2[8];
  }
  uint64_t v3 = a1[5];
  uint64_t v6 = v2;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = objc_msgSend_containsObject_(v6, v4, v3, v5);
}

void sub_18B19B998(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  id v2 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
  {
    int v25 = *(void **)(a1 + 32);
    uint64_t v26 = v2;
    uint64_t v30 = objc_msgSend_shortDescription(v25, v27, v28, v29);
    uint64_t v31 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v38 = v30;
    __int16 v39 = 2112;
    uint64_t v40 = v31;
    _os_log_debug_impl(&dword_18AF10000, v26, OS_LOG_TYPE_DEBUG, "%{public}@ setting pending zone changes: %@", buf, 0x16u);
  }
  id v3 = objc_alloc(MEMORY[0x1E4F1CA70]);
  uint64_t v6 = objc_msgSend_initWithArray_(v3, v4, *(void *)(a1 + 40), v5);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v10 = objc_msgSend_reverseObjectEnumerator(*(void **)(a1 + 40), v7, v8, v9, 0);
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v32, (uint64_t)v36, 16);
  if (v12)
  {
    uint64_t v15 = v12;
    uint64_t v16 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v33 != v16) {
          objc_enumerationMutation(v10);
        }
        uint64_t v18 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        if (objc_msgSend_containsObject_(v6, v13, (uint64_t)v18, v14))
        {
          uint64_t v20 = objc_msgSend_oppositeTypeChange(v18, v13, v19, v14);
          objc_msgSend_removeObject_(v6, v21, (uint64_t)v20, v22);
        }
      }
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v32, (uint64_t)v36, 16);
    }
    while (v15);
  }

  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v24 = *(void **)(v23 + 72);
  *(void *)(v23 + 72) = v6;
}

void sub_18B19BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19BDAC(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], a2, a1[4], a4);
  uint64_t v9 = a1[5];
  if (v9) {
    objc_msgSend_set(*(void **)(v9 + 72), v5, v6, v7);
  }
  else {
  uint64_t v10 = objc_msgSend_set(0, v5, v6, v7);
  }
  int v13 = objc_msgSend_intersectsSet_(v8, v11, (uint64_t)v10, v12);

  if (v13)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v14 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)a1[5];
      uint64_t v18 = v14;
      uint64_t v22 = objc_msgSend_shortDescription(v17, v19, v20, v21);
      uint64_t v23 = a1[4];
      int v26 = 138543618;
      __int16 v27 = v22;
      __int16 v28 = 2112;
      uint64_t v29 = v23;
      _os_log_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ removing pending database changes: %@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v24 = a1[5];
    if (v24) {
      objc_msgSend_minusSet_(*(void **)(v24 + 72), v15, (uint64_t)v8, v16);
    }
    else {
      objc_msgSend_minusSet_(0, v15, (uint64_t)v8, v16);
    }
    uint64_t v25 = a1[5];
    if (v25) {
      ++*(void *)(v25 + 96);
    }
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
}

void sub_18B19C298(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = *(id *)(*(void *)(a1 + 32) + 16);
  id v5 = *(id *)(a1 + 40);
  if (v5 != v4 && (objc_msgSend_isEqual_(v5, v2, (uint64_t)v4, v3) & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v6 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void **)(a1 + 32);
      uint64_t v9 = v6;
      int v13 = objc_msgSend_shortDescription(v8, v10, v11, v12);
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138543618;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_debug_impl(&dword_18AF10000, v9, OS_LOG_TYPE_DEBUG, "%{public}@ setting server change token for database: (%@)", (uint8_t *)&v15, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), *(id *)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      ++*(void *)(v7 + 96);
    }
  }
}

void sub_18B19C50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19C524(uint64_t a1)
{
}

void sub_18B19C5D0(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(void *)(a1 + 32) + 8))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v2 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      id v4 = *(void **)(a1 + 32);
      id v5 = v2;
      uint64_t v9 = objc_msgSend_shortDescription(v4, v6, v7, v8);
      int v10 = *(unsigned __int8 *)(a1 + 40);
      int v11 = 138543618;
      uint64_t v12 = v9;
      __int16 v13 = 1024;
      int v14 = v10;
      _os_log_debug_impl(&dword_18AF10000, v5, OS_LOG_TYPE_DEBUG, "%{public}@ setting needs to fetch database changes %d", (uint8_t *)&v11, 0x12u);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x280], 8) = *(unsigned char *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      ++*(void *)(v3 + 96);
    }
  }
}

void sub_18B19C7B0(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(void *)(a1 + 32) + 9))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v2 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      id v4 = *(void **)(a1 + 32);
      id v5 = v2;
      uint64_t v9 = objc_msgSend_shortDescription(v4, v6, v7, v8);
      int v10 = *(unsigned __int8 *)(a1 + 40);
      int v11 = 138543618;
      uint64_t v12 = v9;
      __int16 v13 = 1024;
      int v14 = v10;
      _os_log_debug_impl(&dword_18AF10000, v5, OS_LOG_TYPE_DEBUG, "%{public}@ setting needs to save database subscription %d", (uint8_t *)&v11, 0x12u);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 9) = *(unsigned char *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      ++*(void *)(v3 + 96);
    }
  }
}

void sub_18B19C9BC(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  if ((objc_msgSend_isEqual_(*(void **)(a1 + 40), v3, (uint64_t)v2, v4) & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v5 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      int v10 = v5;
      int v14 = objc_msgSend_shortDescription(v9, v11, v12, v13);
      uint64_t v18 = objc_msgSend_recordName(*(void **)(a1 + 40), v15, v16, v17);
      int v23 = 138543618;
      uint64_t v24 = v14;
      __int16 v25 = 2112;
      int v26 = v18;
      _os_log_impl(&dword_18AF10000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ setting lastKnownUserRecordID %@", (uint8_t *)&v23, 0x16u);
    }
    uint64_t v19 = objc_msgSend_copy(*(void **)(a1 + 40), v6, v7, v8);
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void **)(v20 + 24);
    *(void *)(v20 + 24) = v19;

    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      ++*(void *)(v22 + 96);
    }
  }
}

void sub_18B19CC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19CC2C(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(*(void *)(a1 + 32) + 11))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v2 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void **)(a1 + 32);
      uint64_t v4 = v2;
      uint64_t v8 = objc_msgSend_shortDescription(v3, v5, v6, v7);
      int v9 = *(unsigned __int8 *)(a1 + 48);
      int v11 = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 1024;
      int v14 = v9;
      _os_log_impl(&dword_18AF10000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ setting has pending untracked changes %d", (uint8_t *)&v11, 0x12u);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 11) = *(unsigned char *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10) {
      ++*(void *)(v10 + 96);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(unsigned char *)(a1 + 48);
  }
}

void sub_18B19CE18(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(void *)(a1 + 32) + 12))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v2 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void **)(a1 + 32);
      id v5 = v2;
      int v9 = objc_msgSend_shortDescription(v4, v6, v7, v8);
      int v10 = *(unsigned __int8 *)(a1 + 40);
      int v11 = 138543618;
      uint64_t v12 = v9;
      __int16 v13 = 1024;
      int v14 = v10;
      _os_log_debug_impl(&dword_18AF10000, v5, OS_LOG_TYPE_DEBUG, "%{public}@ setting has in-flight untracked changes %d", (uint8_t *)&v11, 0x12u);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 12) = *(unsigned char *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      ++*(void *)(v3 + 96);
    }
  }
}

void sub_18B19D030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B19D048(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 12);
  return result;
}

void sub_18B19D12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B19D144(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 10);
  return result;
}

void sub_18B19D20C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 40), *(id *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    ++*(void *)(v2 + 96);
  }
}

void sub_18B19D360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B19D378(uint64_t a1)
{
}

void sub_18B19D440(uint64_t a1)
{
}

BOOL CKSyncEnginePendingRecordZoneChangeTypeOpposite(uint64_t a1)
{
  return a1 == 0;
}

__CFString *CKSyncEnginePendingRecordZoneChangeTypeString(uint64_t a1)
{
  if (a1) {
    return @"Delete";
  }
  else {
    return @"Save";
  }
}

uint64_t sub_18B19D914(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_oppositeTypeChange(a2, (const char *)a2, a3, a4);
}

BOOL CKSyncEnginePendingDatabaseChangeTypeOpposite(uint64_t a1)
{
  return a1 == 0;
}

__CFString *CKSyncEnginePendingDatabaseChangeTypeString(uint64_t a1)
{
  if (a1) {
    return @"Delete";
  }
  else {
    return @"Save";
  }
}

uint64_t sub_18B19DC74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_oppositeTypeChange(a2, (const char *)a2, a3, a4);
}

id sub_18B19E464(void *a1)
{
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_CKShortDescriptionRedact_(a1, v2, 1, v3);
  }
  else {
  uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, v2, @"<%@: %p>", v3, a1, a1);
  }

  return v4;
}

uint64_t sub_18B19E4DC(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_CKObjectDescriptionRedact_avoidShortDescription_(a1, a2, a3, 0);
}

id sub_18B19E634(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  if (objc_msgSend_BOOLValue(a3, v5, v6, v7)) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;

  return v9;
}

uint64_t sub_18B19E780(uint64_t a1, const char *a2)
{
  return objc_msgSend__propertyDescriptionForProperty_shouldRedact_(*(void **)(a1 + 32), a2, (uint64_t)a2, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_18B19E820(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__propertyDescriptionForProperty_shouldRedact_(*(void **)(a1 + 32), a2, a3, *(unsigned __int8 *)(a1 + 40));
}

void sub_18B19EF20(void *a1, uint64_t a2, void *a3)
{
  id v27 = a3;
  objc_msgSend_setPrintAsDictionary_(v27, v4, 1, v5);
  if (objc_msgSend_avoidShortDescription(v27, v6, v7, v8)) {
    objc_msgSend_addProperty_value_shouldRedact_(v27, v9, @"type", @"data", 0);
  }
  uint64_t v12 = NSNumber;
  uint64_t v13 = objc_msgSend_length(a1, v9, v10, v11);
  uint64_t v16 = objc_msgSend_numberWithUnsignedInteger_(v12, v14, v13, v15);
  objc_msgSend_addProperty_value_shouldRedact_(v27, v17, @"length", (uint64_t)v16, 0);

  if ((unint64_t)objc_msgSend_length(a1, v18, v19, v20) < 0x19)
  {
    uint64_t v24 = objc_msgSend_base64EncodedStringWithOptions_(a1, v21, 32, v23);
    objc_msgSend_addProperty_value_shouldRedact_(v27, v26, @"data", (uint64_t)v24, 1);
  }
  else
  {
    uint64_t v24 = objc_msgSend_CKSHA256(a1, v21, v22, v23);
    objc_msgSend_addProperty_value_shouldRedact_(v27, v25, @"sha256", (uint64_t)v24, 1);
  }
}

__CFString *sub_18B19F030(uint64_t a1, const char *a2, char a3)
{
  if (a3)
  {
    uint64_t v5 = @"<private>";
  }
  else
  {
    objc_msgSend_localizedStringFromPersonNameComponents_style_options_(MEMORY[0x1E4F28F38], a2, a1, 1, 0, v3);
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v5;
}

void sub_18B19F090(void *a1, uint64_t a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_msgSend_setPrintAsDictionary_(v4, v5, 1, v6);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1ED8460A8, v7, (uint64_t)&v19, (uint64_t)v23, 16);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(&unk_1ED8460A8);
        }
        uint64_t v12 = *(NSString **)(*((void *)&v19 + 1) + 8 * i);
        SEL v13 = NSSelectorFromString(v12);
        uint64_t v16 = objc_msgSend_performSelector_(a1, v14, (uint64_t)v13, v15);
        objc_msgSend_addProperty_value_shouldRedact_(v4, v17, (uint64_t)v12, v16, 1);
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1ED8460A8, v18, (uint64_t)&v19, (uint64_t)v23, 16);
    }
    while (v9);
  }
}

__CFString *CKStringFromCapabilities(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    uint64_t v2 = objc_opt_new();
    uint64_t v5 = v2;
    if ((v1 & 2) != 0)
    {
      objc_msgSend_addObject_(v2, v3, @"Atomic", v4);
      if ((v1 & 1) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((v1 & 1) == 0)
    {
      goto LABEL_4;
    }
    objc_msgSend_addObject_(v5, v3, @"Sync", v4);
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0)
      {
LABEL_7:
        uint64_t v6 = NSString;
        uint64_t v7 = objc_msgSend_componentsJoinedByString_(v5, v3, @",", v4);
        objc_msgSend_stringWithFormat_(v6, v8, @"(%@)", v9, v7);
        uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

        goto LABEL_9;
      }
LABEL_6:
      objc_msgSend_addObject_(v5, v3, @"Zone-Wide Sharing", v4);
      goto LABEL_7;
    }
LABEL_14:
    objc_msgSend_addObject_(v5, v3, @"Share", v4);
    if ((v1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v10 = @"(none)";
LABEL_9:

  return v10;
}

void sub_18B19FDD0()
{
  int v0 = [CKRecordZoneID alloc];
  id v4 = (id)objc_msgSend_initWithZoneName_ownerName_(v0, v1, @"_defaultZone", @"__defaultOwner__");
  id v2 = sub_18AF44B54([CKRecordZone alloc], v4, 0);
  uint64_t v3 = (void *)qword_1EB279F40;
  qword_1EB279F40 = (uint64_t)v2;
}

void sub_18B19FEA4()
{
  int v0 = [CKRecordZoneID alloc];
  id v4 = (id)objc_msgSend_initWithZoneName_ownerName_(v0, v1, @"_systemZone", @"__defaultOwner__");
  id v2 = sub_18AF44B54([CKRecordZone alloc], v4, 0);
  uint64_t v3 = (void *)qword_1EB279F50;
  qword_1EB279F50 = (uint64_t)v2;
}

void sub_18B1A015C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1A01E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1A03A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1A1488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1A14A0(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a4 = 1;
  return result;
}

void sub_18B1A1B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18B1A1B64(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = a3;
  uint64_t v12 = objc_msgSend_objectForKey_(v8, v10, (uint64_t)v7, v11);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_18B1A1C8C;
  v19[3] = &unk_1E5466190;
  id v20 = v12;
  id v21 = v7;
  char v26 = *(unsigned char *)(a1 + 56);
  id v22 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 48);
  id v23 = v13;
  uint64_t v24 = v14;
  uint64_t v25 = a4;
  id v15 = v12;
  id v16 = v7;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v9, v17, (uint64_t)v19, v18);
}

void sub_18B1A1C8C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = v7;
  id v10 = v8;
  uint64_t v14 = objc_msgSend_assetContent(v10, v11, v12, v13);

  if (v14)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v15 = *(id *)(a1 + 32);
      if (objc_msgSend_integerValue(v9, v16, v17, v18) < 0
        || (uint64_t v22 = objc_msgSend_integerValue(v9, v19, v20, v21), v22 >= objc_msgSend_count(v15, v23, v24, v25)))
      {
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v19, @"CKErrorDomain", 1, @"arrayIndex out of bounds");
        id v46 = (id)objc_claimAutoreleasedReturnValue();

        if (v46)
        {
          id v31 = 0;
          goto LABEL_24;
        }
        goto LABEL_16;
      }
      uint64_t v28 = objc_msgSend_integerValue(v9, v19, v26, v27);
      objc_msgSend_objectAtIndexedSubscript_(v15, v29, v28, v30);
      id v31 = (id)objc_claimAutoreleasedReturnValue();

      if (!v31)
      {
LABEL_16:
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v32, @"CKInternalErrorDomain", 1, @"Record has orphaned asset content for field %@", *(void *)(a1 + 40));
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        id v31 = 0;
        if (!v46) {
          goto LABEL_29;
        }
        goto LABEL_24;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_16;
      }
      id v31 = *(id *)(a1 + 32);
      if (!v31) {
        goto LABEL_16;
      }
    }
    long long v35 = objc_msgSend_signature(v31, v32, v33, v34);
    __int16 v39 = v35;
    if (!*(unsigned char *)(a1 + 80))
    {

      __int16 v39 = 0;
    }
    uint64_t v40 = objc_msgSend_verificationKey(v31, v36, v37, v38);
    id v76 = 0;
    uint64_t v42 = objc_msgSend_assetContentWithExpectedSignature_verificationKey_error_(v10, v41, (uint64_t)v39, (uint64_t)v40, &v76);
    id v46 = v76;
    if (__sTestOverridesAvailable
      && objc_msgSend_shouldFailInMemoryAssets(*(void **)(a1 + 48), v43, v44, v45))
    {
      objc_msgSend_setAssetContent_(v31, v43, 0, v45);

      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v47, @"CKErrorDomain", 4, &stru_1ED7F5C98);
      uint64_t v42 = v46;
      id v46 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!v42) {
        goto LABEL_23;
      }
      uint64_t v48 = objc_msgSend_length(v42, v43, v44, v45);
      if (v48 == objc_msgSend_size(v31, v49, v50, v51))
      {
        uint64_t v55 = objc_msgSend_assetContent(v10, v52, v53, v54);
        objc_msgSend_setAssetContent_(v31, v56, (uint64_t)v55, v57);
      }
      else
      {
        uint64_t v74 = objc_msgSend_size(v31, v52, v53, v54);
        uint64_t v61 = objc_msgSend_assetContent(v31, v58, v59, v60);
        uint64_t v65 = objc_msgSend_length(v61, v62, v63, v64);
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v66, @"CKInternalErrorDomain", 1, @"asset size differs; got %llu expected %lu",
          v74,
        uint64_t v75 = v65);

        id v46 = (id)v75;
      }
    }

LABEL_23:
    if (!v46)
    {
LABEL_29:

      goto LABEL_30;
    }
LABEL_24:
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v67 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      uint64_t v68 = *(void **)(a1 + 56);
      uint64_t v69 = v67;
      uint64_t v73 = objc_msgSend_recordID(v68, v70, v71, v72);
      *(_DWORD *)buf = 138412546;
      uint64_t v78 = v73;
      __int16 v79 = 2112;
      id v80 = v46;
      _os_log_error_impl(&dword_18AF10000, v69, OS_LOG_TYPE_ERROR, "Error wiring up asset content for recordID %@: %@", buf, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v46);
    **(unsigned char **)(a1 + 72) = 1;
    *a4 = 1;
    goto LABEL_29;
  }
LABEL_30:
}

void *sub_18B1A2354(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 8) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)(v8 + _Block_object_dispose(&STACK[0x280], 8) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1A24D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1A24F0(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 8));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B1A2620(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 16) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 16);
    *(void *)(v8 + 16) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1A27A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1A27BC(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 16));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t sub_18B1A2910(void *a1)
{
  return MEMORY[0x1F4181798](a1[4], sel__locked_handleSharingUIUpdatedShare_recordID_isDeleted_error_, a1[5], a1[6]);
}

void sub_18B1A3B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_18B1A3CE0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v54, (uint64_t)v58, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v55;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v55 != v17) {
          objc_enumerationMutation(v13);
        }
        id v19 = *(id *)(*((void *)&v54 + 1) + 8 * i);
        id v20 = v4;
        if (objc_msgSend_conformsToProtocol_(v19, v21, (uint64_t)&unk_1ED871C10, v22))
        {
          uint64_t v26 = objc_msgSend_CKDeepCopy(v19, v23, v24, v25);
LABEL_14:
          uint64_t v29 = (void *)v26;
          goto LABEL_15;
        }
        if (objc_msgSend_conformsToProtocol_(v19, v23, (uint64_t)&unk_1ED84EF78, v25))
        {
          uint64_t v40 = NSString;
          uint64_t v41 = (objc_class *)objc_opt_class();
          uint64_t v42 = NSStringFromClass(v41);
          uint64_t v43 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
          uint64_t v46 = objc_msgSend_stringWithFormat_(v40, v44, @"Collection with class %@ does not support %@", v45, v42, v43, (void)v54);

          goto LABEL_22;
        }
        if (!v4)
        {
          if (!objc_msgSend_conformsToProtocol_(v19, v27, (uint64_t)&unk_1ED848860, v28))
          {
LABEL_21:
            uint64_t v47 = NSString;
            uint64_t v48 = (objc_class *)objc_opt_class();
            uint64_t v42 = NSStringFromClass(v48);
            uint64_t v46 = objc_msgSend_stringWithFormat_(v47, v49, @"Object with class %@ cannot be copied", v50, v42);
LABEL_22:

            uint64_t v51 = [CKException alloc];
            id v53 = (id)objc_msgSend_initWithName_format_(v51, v52, *MEMORY[0x1E4F1C3C8], @"%@", v46);
            objc_exception_throw(v53);
          }
          uint64_t v26 = objc_msgSend_copyWithZone_(v19, v30, 0, v31);
          goto LABEL_14;
        }
        uint64_t v29 = (*((void (**)(id, id))v4 + 2))(v20, v19);
        if (!v29) {
          goto LABEL_21;
        }
LABEL_15:

        objc_msgSend_addObject_(v12, v32, (uint64_t)v29, v33);
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v34, (uint64_t)&v54, (uint64_t)v58, 16);
    }
    while (v16);
  }

  uint64_t v38 = objc_msgSend_copy(v12, v35, v36, v37);

  return v38;
}

id sub_18B1A3F98(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_dictionaryWithCapacity_(v5, v10, v9, v11);
  uint64_t v22 = MEMORY[0x1E4F143A8];
  uint64_t v23 = 3221225472;
  uint64_t v24 = sub_18B1A4090;
  uint64_t v25 = &unk_1E5463B40;
  id v26 = v12;
  id v27 = v4;
  id v13 = v4;
  id v14 = v12;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)&v22, v16);
  id v20 = objc_msgSend_copy(v14, v17, v18, v19, v22, v23, v24, v25);

  return v20;
}

void sub_18B1A4090(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = v6;
  uint64_t v9 = v7;
  if (!objc_msgSend_conformsToProtocol_(v8, v10, (uint64_t)&unk_1ED871C10, v11))
  {
    if (objc_msgSend_conformsToProtocol_(v8, v12, (uint64_t)&unk_1ED84EF78, v14))
    {
      uint64_t v36 = NSString;
      goto LABEL_25;
    }
    if (v9)
    {
      uint64_t v18 = v9[2](v9, v8);
      if (v18) {
        goto LABEL_10;
      }
    }
    else if (objc_msgSend_conformsToProtocol_(v8, v16, (uint64_t)&unk_1ED848860, v17))
    {
      uint64_t v15 = objc_msgSend_copyWithZone_(v8, v19, 0, v20);
      goto LABEL_9;
    }
    uint64_t v37 = NSString;
LABEL_27:
    uint64_t v44 = (objc_class *)objc_opt_class();
    __int16 v39 = NSStringFromClass(v44);
    uint64_t v43 = objc_msgSend_stringWithFormat_(v37, v45, @"Object with class %@ cannot be copied", v46, v39);
LABEL_28:

    uint64_t v47 = [CKException alloc];
    id v49 = (id)objc_msgSend_initWithName_format_(v47, v48, *MEMORY[0x1E4F1C3C8], @"%@", v43);
    objc_exception_throw(v49);
  }
  uint64_t v15 = objc_msgSend_CKDeepCopy(v8, v12, v13, v14);
LABEL_9:
  uint64_t v18 = (void *)v15;
LABEL_10:

  uint64_t v22 = *(void **)(a1 + 32);
  uint64_t v21 = *(void **)(a1 + 40);
  id v50 = v5;
  uint64_t v23 = v21;
  if (!objc_msgSend_conformsToProtocol_(v50, v24, (uint64_t)&unk_1ED871C10, v25))
  {
    if (!objc_msgSend_conformsToProtocol_(v50, v26, (uint64_t)&unk_1ED84EF78, v28))
    {
      if (v23)
      {
        long long v32 = v23[2](v23, v50);
        if (v32) {
          goto LABEL_19;
        }
      }
      else if (objc_msgSend_conformsToProtocol_(v50, v30, (uint64_t)&unk_1ED848860, v31))
      {
        uint64_t v29 = objc_msgSend_copyWithZone_(v50, v33, 0, v34);
        goto LABEL_18;
      }
      uint64_t v37 = NSString;
      goto LABEL_27;
    }
    uint64_t v36 = NSString;
LABEL_25:
    uint64_t v38 = (objc_class *)objc_opt_class();
    __int16 v39 = NSStringFromClass(v38);
    uint64_t v40 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
    uint64_t v43 = objc_msgSend_stringWithFormat_(v36, v41, @"Collection with class %@ does not support %@", v42, v39, v40);

    goto LABEL_28;
  }
  uint64_t v29 = objc_msgSend_CKDeepCopy(v50, v26, v27, v28);
LABEL_18:
  long long v32 = (void *)v29;
LABEL_19:

  objc_msgSend_setObject_forKeyedSubscript_(v22, v35, (uint64_t)v18, (uint64_t)v32);
}

id sub_18B1A4324(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x1E4F1CA80];
  uint64_t v6 = objc_msgSend_count(a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_setWithCapacity_(v5, v7, v6, v8);
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v10 = a1;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v50, (uint64_t)v54, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v51 != v14) {
          objc_enumerationMutation(v10);
        }
        id v16 = *(id *)(*((void *)&v50 + 1) + 8 * i);
        if (objc_msgSend_conformsToProtocol_(v16, v17, (uint64_t)&unk_1ED871C10, v18))
        {
          uint64_t v22 = objc_msgSend_CKDeepCopy(v16, v19, v20, v21);
        }
        else
        {
          if (objc_msgSend_conformsToProtocol_(v16, v19, (uint64_t)&unk_1ED84EF78, v21))
          {
            uint64_t v36 = NSString;
            uint64_t v37 = (objc_class *)objc_opt_class();
            uint64_t v38 = NSStringFromClass(v37);
            __int16 v39 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
            uint64_t v42 = objc_msgSend_stringWithFormat_(v36, v40, @"Collection with class %@ does not support %@", v41, v38, v39, (void)v50);

            goto LABEL_18;
          }
          if (!objc_msgSend_conformsToProtocol_(v16, v23, (uint64_t)&unk_1ED848860, v24))
          {
            uint64_t v43 = NSString;
            uint64_t v44 = (objc_class *)objc_opt_class();
            uint64_t v38 = NSStringFromClass(v44);
            uint64_t v42 = objc_msgSend_stringWithFormat_(v43, v45, @"Object with class %@ cannot be copied", v46, v38);
LABEL_18:

            uint64_t v47 = [CKException alloc];
            id v49 = (id)objc_msgSend_initWithName_format_(v47, v48, *MEMORY[0x1E4F1C3C8], @"%@", v42);
            objc_exception_throw(v49);
          }
          uint64_t v22 = objc_msgSend_copyWithZone_(v16, v25, 0, v26);
        }
        uint64_t v27 = (void *)v22;

        objc_msgSend_addObject_(v9, v28, (uint64_t)v27, v29);
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v30, (uint64_t)&v50, (uint64_t)v54, 16);
    }
    while (v13);
  }

  uint64_t v34 = objc_msgSend_copy(v9, v31, v32, v33);

  return v34;
}

id sub_18B1A4590(void *a1, uint64_t a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA80];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_setWithCapacity_(v5, v10, v9, v11);
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v54, (uint64_t)v58, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v55;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v55 != v17) {
          objc_enumerationMutation(v13);
        }
        id v19 = *(id *)(*((void *)&v54 + 1) + 8 * i);
        id v20 = v4;
        if (objc_msgSend_conformsToProtocol_(v19, v21, (uint64_t)&unk_1ED871C10, v22))
        {
          uint64_t v26 = objc_msgSend_CKDeepCopy(v19, v23, v24, v25);
LABEL_14:
          uint64_t v29 = (void *)v26;
          goto LABEL_15;
        }
        if (objc_msgSend_conformsToProtocol_(v19, v23, (uint64_t)&unk_1ED84EF78, v25))
        {
          uint64_t v40 = NSString;
          uint64_t v41 = (objc_class *)objc_opt_class();
          uint64_t v42 = NSStringFromClass(v41);
          uint64_t v43 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
          uint64_t v46 = objc_msgSend_stringWithFormat_(v40, v44, @"Collection with class %@ does not support %@", v45, v42, v43, (void)v54);

          goto LABEL_22;
        }
        if (!v4)
        {
          if (!objc_msgSend_conformsToProtocol_(v19, v27, (uint64_t)&unk_1ED848860, v28))
          {
LABEL_21:
            uint64_t v47 = NSString;
            uint64_t v48 = (objc_class *)objc_opt_class();
            uint64_t v42 = NSStringFromClass(v48);
            uint64_t v46 = objc_msgSend_stringWithFormat_(v47, v49, @"Object with class %@ cannot be copied", v50, v42);
LABEL_22:

            long long v51 = [CKException alloc];
            id v53 = (id)objc_msgSend_initWithName_format_(v51, v52, *MEMORY[0x1E4F1C3C8], @"%@", v46);
            objc_exception_throw(v53);
          }
          uint64_t v26 = objc_msgSend_copyWithZone_(v19, v30, 0, v31);
          goto LABEL_14;
        }
        uint64_t v29 = (*((void (**)(id, id))v4 + 2))(v20, v19);
        if (!v29) {
          goto LABEL_21;
        }
LABEL_15:

        objc_msgSend_addObject_(v12, v32, (uint64_t)v29, v33);
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v34, (uint64_t)&v54, (uint64_t)v58, 16);
    }
    while (v16);
  }

  uint64_t v38 = objc_msgSend_copy(v12, v35, v36, v37);

  return v38;
}

id sub_18B1A4848(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x1E4F1CA70];
  uint64_t v6 = objc_msgSend_count(a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_orderedSetWithCapacity_(v5, v7, v6, v8);
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v10 = a1;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v50, (uint64_t)v54, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v51 != v14) {
          objc_enumerationMutation(v10);
        }
        id v16 = *(id *)(*((void *)&v50 + 1) + 8 * i);
        if (objc_msgSend_conformsToProtocol_(v16, v17, (uint64_t)&unk_1ED871C10, v18))
        {
          uint64_t v22 = objc_msgSend_CKDeepCopy(v16, v19, v20, v21);
        }
        else
        {
          if (objc_msgSend_conformsToProtocol_(v16, v19, (uint64_t)&unk_1ED84EF78, v21))
          {
            uint64_t v36 = NSString;
            uint64_t v37 = (objc_class *)objc_opt_class();
            uint64_t v38 = NSStringFromClass(v37);
            __int16 v39 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
            uint64_t v42 = objc_msgSend_stringWithFormat_(v36, v40, @"Collection with class %@ does not support %@", v41, v38, v39, (void)v50);

            goto LABEL_18;
          }
          if (!objc_msgSend_conformsToProtocol_(v16, v23, (uint64_t)&unk_1ED848860, v24))
          {
            uint64_t v43 = NSString;
            uint64_t v44 = (objc_class *)objc_opt_class();
            uint64_t v38 = NSStringFromClass(v44);
            uint64_t v42 = objc_msgSend_stringWithFormat_(v43, v45, @"Object with class %@ cannot be copied", v46, v38);
LABEL_18:

            uint64_t v47 = [CKException alloc];
            id v49 = (id)objc_msgSend_initWithName_format_(v47, v48, *MEMORY[0x1E4F1C3C8], @"%@", v42);
            objc_exception_throw(v49);
          }
          uint64_t v22 = objc_msgSend_copyWithZone_(v16, v25, 0, v26);
        }
        uint64_t v27 = (void *)v22;

        objc_msgSend_addObject_(v9, v28, (uint64_t)v27, v29);
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v30, (uint64_t)&v50, (uint64_t)v54, 16);
    }
    while (v13);
  }

  uint64_t v34 = objc_msgSend_copy(v9, v31, v32, v33);

  return v34;
}

id sub_18B1A4AB4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA70];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  uint64_t v12 = objc_msgSend_orderedSetWithCapacity_(v5, v10, v9, v11);
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v54, (uint64_t)v58, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v55;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v55 != v17) {
          objc_enumerationMutation(v13);
        }
        id v19 = *(id *)(*((void *)&v54 + 1) + 8 * i);
        id v20 = v4;
        if (objc_msgSend_conformsToProtocol_(v19, v21, (uint64_t)&unk_1ED871C10, v22))
        {
          uint64_t v26 = objc_msgSend_CKDeepCopy(v19, v23, v24, v25);
LABEL_14:
          uint64_t v29 = (void *)v26;
          goto LABEL_15;
        }
        if (objc_msgSend_conformsToProtocol_(v19, v23, (uint64_t)&unk_1ED84EF78, v25))
        {
          uint64_t v40 = NSString;
          uint64_t v41 = (objc_class *)objc_opt_class();
          uint64_t v42 = NSStringFromClass(v41);
          uint64_t v43 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
          uint64_t v46 = objc_msgSend_stringWithFormat_(v40, v44, @"Collection with class %@ does not support %@", v45, v42, v43, (void)v54);

          goto LABEL_22;
        }
        if (!v4)
        {
          if (!objc_msgSend_conformsToProtocol_(v19, v27, (uint64_t)&unk_1ED848860, v28))
          {
LABEL_21:
            uint64_t v47 = NSString;
            uint64_t v48 = (objc_class *)objc_opt_class();
            uint64_t v42 = NSStringFromClass(v48);
            uint64_t v46 = objc_msgSend_stringWithFormat_(v47, v49, @"Object with class %@ cannot be copied", v50, v42);
LABEL_22:

            long long v51 = [CKException alloc];
            id v53 = (id)objc_msgSend_initWithName_format_(v51, v52, *MEMORY[0x1E4F1C3C8], @"%@", v46);
            objc_exception_throw(v53);
          }
          uint64_t v26 = objc_msgSend_copyWithZone_(v19, v30, 0, v31);
          goto LABEL_14;
        }
        uint64_t v29 = (*((void (**)(id, id))v4 + 2))(v20, v19);
        if (!v29) {
          goto LABEL_21;
        }
LABEL_15:

        objc_msgSend_addObject_(v12, v32, (uint64_t)v29, v33);
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v34, (uint64_t)&v54, (uint64_t)v58, 16);
    }
    while (v16);
  }

  uint64_t v38 = objc_msgSend_copy(v12, v35, v36, v37);

  return v38;
}

id sub_18B1A4D6C(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F29258];
  uint64_t v3 = CKAcceptablePredicateValueClasses();
  objc_msgSend__testEncodeAndDecodeObject_allowedClasses_(v2, v4, (uint64_t)a1, (uint64_t)v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    id v6 = 0;
  }
  else
  {
    id v6 = (id)*MEMORY[0x1E4F1C3C8];
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412802;
      id v13 = a1;
      __int16 v14 = 2112;
      id v15 = v6;
      __int16 v16 = 2112;
      uint64_t v17 = @"NSXPCCoder unexpectedly returned nil while encoding/decoding predicate";
      _os_log_error_impl(&dword_18AF10000, v7, OS_LOG_TYPE_ERROR, "Predicate <%@> cannot be deep copied due to %@ (%@)", (uint8_t *)&v12, 0x20u);
    }
    if (CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9())
    {
      uint64_t v9 = [CKException alloc];
      id v11 = (id)objc_msgSend_initWithName_format_(v9, v10, *MEMORY[0x1E4F1C3C8], @"Predicate format incompatible with CloudKit");
      objc_exception_throw(v11);
    }
    id v5 = a1;
  }

  return v5;
}

void *sub_18B1A5368(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1A5548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1A5560(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B1A56EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1A58CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1A58E4(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B1A5A70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1A5C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1A5C68(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B1A74AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18B1A7B1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1A7CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1A7D14(uint64_t a1)
{
  id v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

BOOL CKCodeProto2AnyReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        id v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x280], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_18B1A9790(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (!byte_1E9124EF0)
  {
    uint64_t v11 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v11, v12, *(void *)(a1 + 32), *(void *)(a1 + 40), @"CKXPCConnection.m", 41, @"The daemon shouldn't be using XPC to talk to itself");
  }
  id v5 = objc_alloc(*(Class *)(a1 + 40));
  uint64_t inited = objc_msgSend_initInternal(v5, v6, v7, v8);
  uint64_t v10 = qword_1EB279F68;
  qword_1EB279F68 = inited;

  return MEMORY[0x1F41817F8](inited, v10);
}

void sub_18B1A99C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B1A9A20(void *a1, unsigned char *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    objc_sync_enter(v3);
    if (a2)
    {
      id v4 = v3[2];
      if (v4) {
        LOBYTE(v4) = (_BYTE)v3[1] & 1;
      }
      *a2 = (_BYTE)v4;
    }
    id v5 = v3[2];
    objc_sync_exit(v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t sub_18B1A9BC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_18B1A9BD8(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = sub_18B1AA280(a1);
    unsigned int v9 = v6;
    if (v6)
    {
      if (a2) {
        objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v6, v7, (uint64_t)v5, v8);
      }
      else {
      char v13 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v6, v7, (uint64_t)v5, v8);
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v10 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v15 = 0;
        _os_log_error_impl(&dword_18AF10000, v10, OS_LOG_TYPE_ERROR, "Couldn't get connection to daemon", v15, 2u);
      }
      unint64_t v12 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, @"CKErrorDomain", 1, @"Couldn't get connection to daemon");
      if (v5) {
        v5[2](v5, v12);
      }

      char v13 = 0;
    }
  }
  else
  {
    char v13 = 0;
  }

  return v13;
}

uint64_t sub_18B1A9D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_18B1A9E90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_18B1A9EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_18B1A9FB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_18B1AA14C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_18B1AA164(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_18B1AA280(void *a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    char v1 = a1;
    objc_sync_enter(v1);
    id v2 = v1[2];
    uint64_t v3 = v2;
    if (((_BYTE)v1[1] & 1) != 0 && v2)
    {
      id v4 = v2;
    }
    else
    {
      if (qword_1EB279FA0 != -1) {
        dispatch_once(&qword_1EB279FA0, &unk_1ED7EFED8);
      }
      self;
      id v5 = @"com.apple.cloudd";
      if (__sTestOverridesAvailable)
      {
        uint64_t v6 = @"com.apple.cloudkit.partlycloudd";

        id v5 = v6;
      }
      else
      {
        self;
      }
      if (_sCKUseSystemInstalledBinariesPredicate != -1) {
        dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1ED7EF718);
      }
      if (!_sCKUseSystemInstalledBinaries)
      {
        uint64_t v48 = objc_msgSend_stringByAppendingString_(v5, v7, @".debug", v8);

        id v5 = (__CFString *)v48;
      }
      id v9 = objc_alloc(MEMORY[0x1E4F29268]);
      id v4 = objc_msgSend_initWithMachServiceName_options_(v9, v10, (uint64_t)v5, 0);

      objc_initWeak(&location, v1);
      v58[0] = 0;
      v58[1] = v58;
      v58[2] = 0x2020000000;
      v58[3] = v4;
      v56[0] = MEMORY[0x1E4F143A8];
      v56[1] = 3221225472;
      v56[2] = sub_18B1AA714;
      v56[3] = &unk_1E5466268;
      objc_copyWeak(&v57, &location);
      v56[4] = v58;
      objc_msgSend_setInterruptionHandler_(v4, v11, (uint64_t)v56, v12);
      uint64_t v49 = MEMORY[0x1E4F143A8];
      uint64_t v50 = 3221225472;
      long long v51 = sub_18B1AA890;
      long long v52 = &unk_1E5466290;
      objc_copyWeak(&v55, &location);
      id v53 = v1;
      long long v54 = v58;
      objc_msgSend_setInvalidationHandler_(v4, v13, (uint64_t)&v49, v14);
      uint64_t v18 = objc_msgSend_CKXPCClientToDaemonMuxerInterface(CKXPCConnection, v15, v16, v17, v49, v50, v51, v52);
      objc_msgSend_setRemoteObjectInterface_(v4, v19, (uint64_t)v18, v20);

      uint64_t v24 = objc_msgSend_CKXPCDaemonToClientMuxerInterface(CKXPCConnection, v21, v22, v23);
      objc_msgSend_setExportedInterface_(v4, v25, (uint64_t)v24, v26);

      objc_msgSend_setExportedObject_(v4, v27, (uint64_t)v1, v28);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v29 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v61 = v4;
        _os_log_impl(&dword_18AF10000, v29, OS_LOG_TYPE_INFO, "Created a new connection: %@", buf, 0xCu);
      }
      objc_msgSend_invalidate(v1[2], v30, v31, v32);
      objc_storeStrong(v1 + 2, v4);
      *((unsigned char *)v1 + _Block_object_dispose(&STACK[0x280], 8) = v4 != 0;
      objc_msgSend_resume(v4, v33, v34, v35);
      __int16 v39 = objc_msgSend_sharedManager(CKProcessScopedStateManager, v36, v37, v38);
      uint64_t v40 = sub_18B047ADC((uint64_t)v39);

      uint64_t v44 = objc_msgSend_remoteObjectProxy(v4, v41, v42, v43);
      objc_msgSend_noteClientProcessScopedMetadata_(v44, v45, (uint64_t)v40, v46);

      objc_destroyWeak(&v55);
      objc_destroyWeak(&v57);
      _Block_object_dispose(v58, 8);
      objc_destroyWeak(&location);
    }
    objc_sync_exit(v1);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_18B1AA694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  _Block_object_dispose(&a22, 8);
  objc_destroyWeak((id *)(v25 - 120));
  objc_sync_exit(v22);
  _Unwind_Resume(a1);
}

BOOL sub_18B1AA6F0()
{
  BOOL result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

void sub_18B1AA714(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_sync_enter(v4);
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v5 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        int v12 = 138543618;
        char v13 = v4;
        __int16 v14 = 2048;
        uint64_t v15 = v6;
        _os_log_impl(&dword_18AF10000, v5, OS_LOG_TYPE_INFO, "Warn: %{public}@: NSXPCConnection %p was interrupted", (uint8_t *)&v12, 0x16u);
      }
      v4[8] = 0;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      objc_sync_exit(v4);

      uint64_t v10 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v7, v8, v9);
      objc_msgSend_postNotificationName_object_(v10, v11, @"CKXPCConnectionInterrupted", (uint64_t)v4);
    }
    else
    {
      objc_sync_exit(v4);
    }
  }
}

void sub_18B1AA890(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    objc_sync_enter(v4);
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v5 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        *(_DWORD *)buf = 138543618;
        uint64_t v31 = v4;
        __int16 v32 = 2048;
        uint64_t v33 = v6;
        _os_log_impl(&dword_18AF10000, v5, OS_LOG_TYPE_INFO, "Warn: %{public}@: NSXPCConnection %p became invalid", buf, 0x16u);
      }
      v4[8] = 0;
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      objc_sync_exit(v4);

      uint64_t v10 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v7, v8, v9);
      objc_msgSend_postNotificationName_object_(v10, v11, @"CKXPCConnectionInvalidated", (uint64_t)v4);

      uint64_t v15 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v12, v13, v14);
      objc_msgSend_postNotificationName_object_(v15, v16, @"CKXPCConnectionInterrupted", (uint64_t)v4);

      id v17 = *(id *)(a1 + 32);
      objc_sync_enter(v17);
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      uint64_t v18 = *(void **)(a1 + 32);
      if (v18) {
        uint64_t v18 = (void *)v18[4];
      }
      id v19 = v18;
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v25, (uint64_t)v29, 16);
      if (v21)
      {
        uint64_t v22 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v26 != v22) {
              objc_enumerationMutation(v19);
            }
            (*(void (**)(void))(*(void *)(*((void *)&v25 + 1) + 8 * i) + 16))(*(void *)(*((void *)&v25 + 1) + 8 * i));
          }
          uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v24, (uint64_t)&v25, (uint64_t)v29, 16);
        }
        while (v21);
      }

      sub_18B1AAB2C(*(void *)(a1 + 32), 0);
      objc_sync_exit(v17);
    }
    else
    {
      objc_sync_exit(v4);
    }
  }
}

void sub_18B1AAB08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1AAB2C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_18B1AAB3C()
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v0 = NSHomeDirectory();
  int isEqualToString = objc_msgSend_isEqualToString_(v0, v1, @"/var/empty", v2);

  if (isEqualToString)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_18AF10000, v7, OS_LOG_TYPE_DEBUG, "Not attempting to create Caches directory for /var/empty process", buf, 2u);
    }
  }
  else
  {
    uint64_t v8 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v4, v5, v6);
    id v33 = 0;
    uint64_t v10 = objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(v8, v9, 13, 1, 0, 0, &v33);
    id v11 = v33;

    uint64_t v15 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v12, v13, v14);
    id v19 = objc_msgSend_path(v10, v16, v17, v18);
    char v22 = objc_msgSend_fileExistsAtPath_(v15, v20, (uint64_t)v19, v21);

    if (v22)
    {
      id v23 = v11;
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v24 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18AF10000, v24, OS_LOG_TYPE_INFO, "Warn: Caches directory does not exist, creating one", buf, 2u);
      }
      long long v28 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v25, v26, v27);
      id v32 = v11;
      uint64_t v30 = objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(v28, v29, 13, 1, 0, 1, &v32);
      id v23 = v32;

      if (!v30)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v31 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v35 = v23;
          _os_log_error_impl(&dword_18AF10000, v31, OS_LOG_TYPE_ERROR, "Couldn't create caches directory, %@", buf, 0xCu);
        }
      }
    }
  }
}

void sub_18B1AAF3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1AAFA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED8858D8, a4);
  uint64_t v5 = (void *)qword_1EB279F70;
  qword_1EB279F70 = v4;

  uint64_t v6 = (void *)qword_1EB279F70;
  uint64_t v7 = sub_18B03DBC0();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v6, v8, (uint64_t)v7, (uint64_t)sel_getContainerScopedDaemonProxyCreatorForSetupInfo_containerScopedClientProxy_completionHandler_, 1, 0);

  uint64_t v9 = (void *)qword_1EB279F70;
  uint64_t v10 = sub_18B03E234();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v9, v11, (uint64_t)v10, (uint64_t)sel_getContainerScopedDaemonProxyCreatorForSetupInfo_containerScopedClientProxy_completionHandler_, 0, 1);

  int v12 = (void *)qword_1EB279F70;
  uint64_t v16 = objc_msgSend_CKXPCClientToDaemonLogicalDeviceScopedInterface(CKLogicalDeviceScopedDaemonProxy, v13, v14, v15);
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v12, v17, (uint64_t)v16, (uint64_t)sel_getLogicalDeviceScopedDaemonProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 1);

  if (__sTestOverridesAvailable)
  {
    Class v21 = NSClassFromString(&cfstr_Cktestdevicere.isa);
    char v22 = (void *)qword_1EB279F70;
    long long v25 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v23, (uint64_t)v21, v24);
    objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v22, v26, (uint64_t)v25, (uint64_t)sel_getLogicalDeviceScopedDaemonProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 0);
  }
  uint64_t v27 = (void *)qword_1EB279F70;
  long long v28 = objc_msgSend_CKXPCClientToDaemonProcessScopedInterface(CKProcessScopedDaemonProxy, v18, v19, v20);
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v27, v29, (uint64_t)v28, (uint64_t)sel_getProcessScopedDaemonProxyCreatorWithCompletionHandler_, 0, 1);

  if (__sTestOverridesAvailable)
  {
    Class v30 = NSClassFromString(&cfstr_Cktestserverma.isa);
    uint64_t v31 = (void *)qword_1EB279F70;
    objc_msgSend_CKXPCClientToDaemonTestServerManagerInterface(v30, v32, v33, v34);
    id v36 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v31, v35, (uint64_t)v36, (uint64_t)sel_getDaemonTestServerManagerProxyCreatorWithCompletionHandler_, 0, 1);
  }
}

void sub_18B1AB1F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E4F29280], a2, (uint64_t)&unk_1ED879B20, a4);
  uint64_t v5 = (void *)qword_1EB279F80;
  qword_1EB279F80 = v4;

  uint64_t v6 = (void *)qword_1EB279F80;
  uint64_t v10 = objc_msgSend_CKXPCDaemonToClientLogicalDeviceScopedInterface(CKLogicalDeviceScopedDaemonProxy, v7, v8, v9);
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v6, v11, (uint64_t)v10, (uint64_t)sel_getLogicalDeviceScopedClientProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 1);

  if (__sTestOverridesAvailable)
  {
    Class v15 = NSClassFromString(&cfstr_Cktestdevicere.isa);
    uint64_t v16 = (void *)qword_1EB279F80;
    uint64_t v17 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v18 = objc_opt_class();
    Class v21 = objc_msgSend_setWithObjects_(v17, v19, (uint64_t)v15, v20, v18, 0);
    objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v16, v22, (uint64_t)v21, (uint64_t)sel_getLogicalDeviceScopedClientProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 0);
  }
  id v23 = (void *)qword_1EB279F80;
  objc_msgSend_CKXPCDaemonToClientProcessScopedInterface(CKProcessScopedDaemonProxy, v12, v13, v14);
  id v25 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v23, v24, (uint64_t)v25, (uint64_t)sel_getProcessScopedClientProxyCreatorWithCompletionHandler_, 0, 1);
}

void *sub_18B1AB8C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1ABAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1ABABC(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B1ABC48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 520);
    *(void *)(v8 + 52dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1ABE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1ABE40(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 520));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void sub_18B1ADA14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1ADA80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1ADB08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1ADBD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1ADD9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18B1AE158(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18B1AFAD4(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v7 = objc_msgSend_name(v3, v4, v5, v6);
  uint64_t v8 = sub_18B1239E0(v3, *(void **)(a1 + 32));

  if (!v8)
  {
    uint64_t v16 = [CKTuple2 alloc];
    uint64_t v17 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v19, v20, v21);
    goto LABEL_5;
  }
  int v11 = objc_msgSend_conformsToProtocol_(v8, v9, (uint64_t)&unk_1ED87A2C0, v10);
  int v12 = [CKTuple2 alloc];
  uint64_t v16 = v12;
  if (v11)
  {
    uint64_t v17 = objc_msgSend_dictionaryPropertyEncoding(v8, v13, v14, v15);
LABEL_5:
    char v22 = (void *)v17;
    id v23 = objc_msgSend_initWithObject1_object2_(v16, v18, (uint64_t)v7, v17);

    goto LABEL_7;
  }
  id v23 = objc_msgSend_initWithObject1_object2_(v12, v13, (uint64_t)v7, (uint64_t)v8);
LABEL_7:

  return v23;
}

void sub_18B1AFFDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1B0500()
{
  int v0 = [CKTapToRadarManager alloc];
  uint64_t inited = objc_msgSend_initInternal(v0, v1, v2, v3);
  uint64_t v5 = qword_1EB279F90;
  qword_1EB279F90 = inited;

  return MEMORY[0x1F41817F8](inited, v5);
}

void sub_18B1B0E88(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_18B1B0E9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend__lockedTriggerTapToRadarWithRequest_(WeakRetained, v2, *(void *)(a1 + 32), v3);
}

void *sub_18B1B1198(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 504);
    *(void *)(v8 + 504) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1B1378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1B1390(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

void *sub_18B1B151C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL result = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != result)
  {
    uint64_t v7 = objc_msgSend_copy(result, a2, a3, a4);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(v8 + 512);
    *(void *)(v8 + 512) = v7;
    return (void *)MEMORY[0x1F41817F8](v7, v9);
  }
  return result;
}

void sub_18B1B16FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18B1B1714(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 512));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 4dispatch_queue_set_specific(MEMORY[0x1E4F14428], &unk_1E9128299, &unk_1E9128299, 0) = v2;

  return MEMORY[0x1F41817F8](v2, v4);
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)()
{
  return MEMORY[0x1F40E2EE8]();
}

uint64_t type metadata accessor for URLRequest()
{
  return MEMORY[0x1F40E2F60]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E3550]();
}

uint64_t Notification.object.getter()
{
  return MEMORY[0x1F40E3578]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x1F40E35A8]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x1F40E37F0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x1F40E3820]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1F40E3B70]();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return MEMORY[0x1F40E44C8]();
}

uint64_t _BridgedStoredNSError.userInfo.getter()
{
  return MEMORY[0x1F40E44E0]();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return MEMORY[0x1F40E44F8]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return MEMORY[0x1F40E46B8]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x1F40E46D0]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x1F40E48D8]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x1F40E4B20]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x1F40E4B30]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x1F40E4B68]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t Data.InlineData.init(_:)()
{
  return MEMORY[0x1F40E4BB0]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.LargeSlice.init(_:)()
{
  return MEMORY[0x1F40E4BD8]();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return MEMORY[0x1F40E4C18]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x1F40E4CA8]();
}

uint64_t Data._Representation.subscript.getter()
{
  return MEMORY[0x1F40E4CF8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1F40E4D48]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = MEMORY[0x1F40E4D58](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t Data.init(count:)()
{
  return MEMORY[0x1F40E4DE8]();
}

uint64_t Data.count.getter()
{
  return MEMORY[0x1F40E4DF0]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x1F40E4E10]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x1F40E4E30]();
}

uint64_t Data.subdata(in:)()
{
  return MEMORY[0x1F40E4E48]();
}

uint64_t static Date.distantPast.getter()
{
  return MEMORY[0x1F40E5088]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x1F40E5188]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x1F40E51A8]();
}

uint64_t static Date.+ infix(_:_:)()
{
  return MEMORY[0x1F40E51C0]();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return MEMORY[0x1F40E51F0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E52E0]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t static URLError.Code.badURL.getter()
{
  return MEMORY[0x1F40E5DF8]();
}

uint64_t type metadata accessor for URLError.Code()
{
  return MEMORY[0x1F40E5E28]();
}

uint64_t URLError._nsError.getter()
{
  return MEMORY[0x1F40E5E38]();
}

uint64_t type metadata accessor for URLError()
{
  return MEMORY[0x1F40E5E48]();
}

uint64_t dispatch thunk of static PlayerItem.makePlayerItem(with:delegate:)()
{
  return MEMORY[0x1F4111C88]();
}

uint64_t type metadata accessor for PlayerItem()
{
  return MEMORY[0x1F4111C90]();
}

uint64_t static AssetStreamHandle.makeAssetStreamHandle(partition:owner:accessToken:requestorID:signature:referenceSignature:size:assetKey:filenameExtension:applicationID:)()
{
  return MEMORY[0x1F4111CA0]();
}

uint64_t AssetStreamHandle.makeAVPlayerItem(with:options:)()
{
  return MEMORY[0x1F4111CB8]();
}

uint64_t AssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)()
{
  return MEMORY[0x1F4111CC0]();
}

uint64_t AssetStreamHandle.init(from:)()
{
  return MEMORY[0x1F4111CC8]();
}

uint64_t AssetExportSession.init(avAsset:presetName:delegate:)()
{
  return MEMORY[0x1F4111CE8]();
}

uint64_t type metadata accessor for AssetExportSession()
{
  return MEMORY[0x1F4111CF0]();
}

uint64_t LoadingRequestHandler.init(streamHandle:type:)()
{
  return MEMORY[0x1F4111CF8]();
}

uint64_t type metadata accessor for LoadingRequestHandler()
{
  return MEMORY[0x1F4111D00]();
}

uint64_t DataRepresentation.init(exportedContentType:exporting:)()
{
  return MEMORY[0x1F40DFA38]();
}

uint64_t type metadata accessor for DataRepresentation()
{
  return MEMORY[0x1F40DFA40]();
}

uint64_t ProxyRepresentation.init(exporting:)()
{
  return MEMORY[0x1F40DFA60]();
}

uint64_t type metadata accessor for ProxyRepresentation()
{
  return MEMORY[0x1F40DFA68]();
}

uint64_t static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)()
{
  return MEMORY[0x1F40DFA90]();
}

uint64_t TransferRepresentation.exportingCondition(_:)()
{
  return MEMORY[0x1F40DFA98]();
}

uint64_t type metadata accessor for TupleTransferRepresentation()
{
  return MEMORY[0x1F40DFAA8]();
}

uint64_t TupleTransferRepresentation.init(_:)()
{
  return MEMORY[0x1F40DFAB0]();
}

uint64_t type metadata accessor for _ConditionalTransferRepresentation()
{
  return MEMORY[0x1F40DFB20]();
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)()
{
  return MEMORY[0x1F41126B0]();
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)()
{
  return MEMORY[0x1F41126B8]();
}

uint64_t _HashTable.UnsafeHandle.subscript.setter()
{
  return MEMORY[0x1F41126C0]();
}

uint64_t _HashTable.BucketIterator.currentValue.getter()
{
  return MEMORY[0x1F41126E8]();
}

uint64_t _HashTable.BucketIterator.currentValue.setter()
{
  return MEMORY[0x1F41126F0]();
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
}

uint64_t static _HashTable.maximumCapacity(forScale:)()
{
  return MEMORY[0x1F4112708]();
}

uint64_t static _HashTable.minimumCapacity(forScale:)()
{
  return MEMORY[0x1F4112710]();
}

uint64_t _HashTable.copy()()
{
  return MEMORY[0x1F4112720]();
}

uint64_t static _HashTable.scale(forCapacity:)()
{
  return MEMORY[0x1F4112728]();
}

uint64_t _HashTable.init(scale:reservedScale:)()
{
  return MEMORY[0x1F4112730]();
}

uint64_t _emptyDequeStorage.unsafeMutableAddressor()
{
  return MEMORY[0x1F4112860]();
}

Swift::Int __swiftcall Deque._Storage._growCapacity(to:linearly:)(Swift::Int to, Swift::Bool linearly)
{
  return MEMORY[0x1F4112868](to, linearly);
}

uint64_t UTType.init(exportedAs:conformingTo:)()
{
  return MEMORY[0x1F4187850]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x1F4187A18]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1F4188570]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x1F4188578]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1F4188580]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x1F4188590]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1F41885E0]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1F4188650]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1F4188658]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1F4188660]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1F4188668]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1F4188680]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x1F40DFF38]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x1F40DFF40]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x1F40DFF58]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x1F40DFF70]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x1F40E04A8]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1F4183270]();
}

uint64_t Array.init()()
{
  return MEMORY[0x1F4183280]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x1F4187BE8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1F4183318]();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return MEMORY[0x1F4183320]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4183358]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x1F41833D0]();
}

uint64_t Dictionary.isEmpty.getter()
{
  return MEMORY[0x1F4183440]();
}

uint64_t Dictionary.mapValues<A>(_:)()
{
  return MEMORY[0x1F4183498]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t Dictionary.subscript.modify()
{
  return MEMORY[0x1F41834F0]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1F4183880]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183898]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1F4183958]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183A10]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x1F4183A28]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x1F4183A78]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4183A98]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t String.UTF8View.subscript.getter()
{
  return MEMORY[0x1F4183AB8]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1F4183B58]();
}

{
  return MEMORY[0x1F4183BA0]();
}

uint64_t String.init(_:)()
{
  return MEMORY[0x1F4183B68]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1F4183C08]();
}

uint64_t Sequence._copyToContiguousArray()()
{
  return MEMORY[0x1F4183C10]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t Sequence.lazy.getter()
{
  return MEMORY[0x1F4183C38]();
}

uint64_t Sequence.sorted(by:)()
{
  return MEMORY[0x1F4183C70]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t Sequence.contains(where:)()
{
  return MEMORY[0x1F4183C88]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x1F4183CE0]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183D98]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183E10]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4183E80]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1F40E6338]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t Array.startIndex.getter()
{
  return MEMORY[0x1F4183E88]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1F4183F08]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t Array.append<A>(contentsOf:)()
{
  return MEMORY[0x1F4183F58]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t Array.remove(at:)()
{
  return MEMORY[0x1F4183F70]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1F4183F78]();
}

Swift::Void __swiftcall Array.formIndex(after:)(Swift::Int *after)
{
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t CheckedContinuation.init(continuation:function:)()
{
  return MEMORY[0x1F4187BF8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1F4187C10]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x1F4187C18]();
}

uint64_t static TaskPriority.background.getter()
{
  return MEMORY[0x1F4187CA8]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x1F4187CB0]();
}

uint64_t static TaskPriority.> infix(_:_:)()
{
  return MEMORY[0x1F4187CB8]();
}

uint64_t static TaskPriority.low.getter()
{
  return MEMORY[0x1F4187CD8]();
}

uint64_t static TaskPriority.utility.getter()
{
  return MEMORY[0x1F4187CE8]();
}

uint64_t TaskPriority.init(rawValue:)()
{
  return MEMORY[0x1F4187CF0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1F4187D00]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.currentPriority.getter()
{
  return MEMORY[0x1F4187DD0]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x1F4187DD8]();
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter()
{
  return MEMORY[0x1F4187EA8]();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return MEMORY[0x1F4187EB8]();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return MEMORY[0x1F4187EC0]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1F40E6430]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1F4184100]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1F4184138]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1F41841D0]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6478]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1F4184338]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t Collection<>.firstIndex(of:)()
{
  return MEMORY[0x1F4184418]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1F4184440]();
}

uint64_t NSFileHandle.read(upToCount:)()
{
  return MEMORY[0x1F40E6590]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1F4188700]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1F4187100]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1F4188708]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1F4188710]();
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return MEMORY[0x1F40E6748]();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return MEMORY[0x1F40E6758]();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return MEMORY[0x1F40E6778]();
}

uint64_t NSArray.makeIterator()()
{
  return MEMORY[0x1F40E6840]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x1F40E6858]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F41874A8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x1F41874D0]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x1F41874E0]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1F4188720]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x1F40E6BB0]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x1F4184B28]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t _expectEnd<A>(of:is:)()
{
  return MEMORY[0x1F4184BE0]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F4184C18](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t Identifiable<>.id.getter()
{
  return MEMORY[0x1F4184D10]();
}

uint64_t type metadata accessor for LazySequence()
{
  return MEMORY[0x1F4184D18]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return MEMORY[0x1F4184EA8]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1F4184ED8]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return MEMORY[0x1F4187F70]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x1F4187F78]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x1F4187F80]();
}

uint64_t type metadata accessor for FlattenSequence()
{
  return MEMORY[0x1F4184F90]();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return MEMORY[0x1F4184F98]();
}

uint64_t type metadata accessor for LazyMapSequence()
{
  return MEMORY[0x1F4184FC0]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x1F41851A0](isUnique, capacity);
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x1F41851C0]();
}

uint64_t _NativeDictionary._insert(at:key:value:)()
{
  return MEMORY[0x1F41851C8]();
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return MEMORY[0x1F41851E0]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x1F4185238]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x1F4185260]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x1F4185270]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x1F4185358]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4185378]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

uint64_t LazySequenceProtocol.map<A>(_:)()
{
  return MEMORY[0x1F4185410]();
}

uint64_t LazySequenceProtocol.flatMap<A>(_:)()
{
  return MEMORY[0x1F4185420]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185568]();
}

{
  return MEMORY[0x1F4185588]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185690]();
}

{
  return MEMORY[0x1F41856B0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4185730]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1F4185740](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1F41859E8]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return MEMORY[0x1F4188170]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t static Duration.seconds(_:)()
{
  return MEMORY[0x1F41861A8]();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return MEMORY[0x1F4188198]();
}

uint64_t TaskLocal.get()()
{
  return MEMORY[0x1F41881A8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1F41138A0]();
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1F40C94C0](*(void *)&op, *(void *)&mode, *(void *)&alg, *(void *)&padding, iv, key, keyLength, tweak);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1F40C9528](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C9538](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9710](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x1F40D80A0](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1F40D8A20](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1F40D8A28](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8A40](allocator, userNotification, callout, order);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1F40D8A68](userNotification, responseFlags, timeout);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  MEMORY[0x1F40DB5A0](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MKBBackupClose()
{
  return MEMORY[0x1F412F8F8]();
}

uint64_t MKBBackupGetFileDescriptors()
{
  return MEMORY[0x1F412F908]();
}

uint64_t MKBBackupOpen()
{
  return MEMORY[0x1F412F910]();
}

uint64_t MKBBackupSize()
{
  return MEMORY[0x1F412F920]();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1F40E6FD8](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.id location = v2;
  return result;
}

Protocol *__cdecl NSProtocolFromString(NSString *namestr)
{
  return (Protocol *)MEMORY[0x1F40E71E8](namestr);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1F40E7298](proto);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

int32_t NSVersionOfRunTimeLibrary(const char *libraryName)
{
  return MEMORY[0x1F40C99B8](libraryName);
}

uint64_t PBDataWriterPlaceMark()
{
  return MEMORY[0x1F4147180]();
}

uint64_t PBDataWriterRecallMark()
{
  return MEMORY[0x1F4147188]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1F41471C0]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1F41471F0]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1F4147248]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t PBRepeatedDoubleAdd()
{
  return MEMORY[0x1F41472F0]();
}

uint64_t PBRepeatedDoubleClear()
{
  return MEMORY[0x1F41472F8]();
}

uint64_t PBRepeatedDoubleCopy()
{
  return MEMORY[0x1F4147300]();
}

uint64_t PBRepeatedDoubleHash()
{
  return MEMORY[0x1F4147308]();
}

uint64_t PBRepeatedDoubleIsEqual()
{
  return MEMORY[0x1F4147310]();
}

uint64_t PBRepeatedDoubleNSArray()
{
  return MEMORY[0x1F4147318]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1F4147360]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1F4147368]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1F4147370]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1F4147378]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1F4147380]();
}

uint64_t PBRepeatedInt64Add()
{
  return MEMORY[0x1F4147398]();
}

uint64_t PBRepeatedInt64Clear()
{
  return MEMORY[0x1F41473A0]();
}

uint64_t PBRepeatedInt64Copy()
{
  return MEMORY[0x1F41473A8]();
}

uint64_t PBRepeatedInt64Hash()
{
  return MEMORY[0x1F41473B0]();
}

uint64_t PBRepeatedInt64IsEqual()
{
  return MEMORY[0x1F41473B8]();
}

uint64_t PBRepeatedInt64NSArray()
{
  return MEMORY[0x1F41473C0]();
}

uint64_t PBRepeatedUInt32Add()
{
  return MEMORY[0x1F41473D0]();
}

uint64_t PBRepeatedUInt32Clear()
{
  return MEMORY[0x1F41473D8]();
}

uint64_t PBRepeatedUInt32Copy()
{
  return MEMORY[0x1F41473E0]();
}

uint64_t PBRepeatedUInt32Hash()
{
  return MEMORY[0x1F41473E8]();
}

uint64_t PBRepeatedUInt32IsEqual()
{
  return MEMORY[0x1F41473F0]();
}

uint64_t PBRepeatedUInt32NSArray()
{
  return MEMORY[0x1F41473F8]();
}

uint64_t PBRepeatedUInt64Add()
{
  return MEMORY[0x1F4147408]();
}

uint64_t PBRepeatedUInt64Clear()
{
  return MEMORY[0x1F4147410]();
}

uint64_t PBRepeatedUInt64Copy()
{
  return MEMORY[0x1F4147418]();
}

uint64_t PBRepeatedUInt64Hash()
{
  return MEMORY[0x1F4147420]();
}

uint64_t PBRepeatedUInt64IsEqual()
{
  return MEMORY[0x1F4147428]();
}

uint64_t PBRepeatedUInt64NSArray()
{
  return MEMORY[0x1F4147430]();
}

uint64_t PCSCloudKitShareTokenCopyDecryptedData()
{
  return MEMORY[0x1F4146E10]();
}

uint64_t PCSCloudKitShareTokenCopyEncryptedData()
{
  return MEMORY[0x1F4146E18]();
}

uint64_t PCSCopyUnwrappedKey()
{
  return MEMORY[0x1F4146E20]();
}

uint64_t PCSIdentityCreateFromRaw()
{
  return MEMORY[0x1F4146FD0]();
}

uint64_t PCSServiceItemGetCKKSViewByName()
{
  return MEMORY[0x1F4147130]();
}

uint64_t PCSServiceItemTypeIsManatee()
{
  return MEMORY[0x1F4147148]();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithName(CFAllocatorRef allocator, const char *nodename)
{
  return (SCNetworkReachabilityRef)MEMORY[0x1F4101EF8](allocator, nodename);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return MEMORY[0x1F4101F08](target, flags);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return MEMORY[0x1F4101F20](target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return MEMORY[0x1F4101F28](target, queue);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

CFDictionaryRef SecTaskCopyValuesForEntitlements(SecTaskRef task, CFArrayRef entitlements, CFErrorRef *error)
{
  return (CFDictionaryRef)MEMORY[0x1F40F7150](task, entitlements, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint64_t TCCAccessPreflight()
{
  return MEMORY[0x1F415CBB8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

const char *__cdecl _Block_signature(void *aBlock)
{
  return (const char *)MEMORY[0x1F40C9AB0](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

uint64_t __NSMakeSpecialForwardingCaptureBlock()
{
  return MEMORY[0x1F40D9630]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return (const mach_header *)MEMORY[0x1F40C9E08](*(void *)&image_index);
}

uint64_t _dyld_get_image_uuid()
{
  return MEMORY[0x1F40C9E20]();
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1F40C9E60]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40C9FA0]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _protocol_getMethodTypeEncoding()
{
  return MEMORY[0x1F41814B8]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _sqlite3_db_clone()
{
  return MEMORY[0x1F4181F28]();
}

uint64_t _sqlite3_maintain_load_factor()
{
  return MEMORY[0x1F4181F50]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t ccnistkdf_ctr_hmac()
{
  return MEMORY[0x1F40CB000]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1F40CB148]();
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814E0](cls, protocol);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1F4181500](cls, outCount);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1F4181550](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CB438](*(void *)&a1, a2, a3);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

uint64_t dispatch_block_create_with_voucher()
{
  return MEMORY[0x1F40CB9D0]();
}

uint64_t dispatch_block_create_with_voucher_and_qos_class()
{
  return MEMORY[0x1F40CB9D8]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1F40CBA68](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD50](label);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1F40CBE28]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

long double erf(long double __x)
{
  MEMORY[0x1F40CBF50](__x);
  return result;
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC0D8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC0E0](*(void *)&a1, a2, a3, a4, *(void *)&a5);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC590](path, name, value, size, *(void *)&position, *(void *)&options);
}

IMP imp_implementationWithBlock(id block)
{
  return (IMP)MEMORY[0x1F4181598](block);
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1F40CC728](*(void *)&a1, *(void *)&a2);
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

uint64_t mach_continuous_approximate_time(void)
{
  return MEMORY[0x1F40CC928]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

const char *__cdecl macho_arch_name_for_cpu_type(cpu_type_t type, cpu_subtype_t subtype)
{
  return (const char *)MEMORY[0x1F40CCAD8](*(void *)&type, *(void *)&subtype);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCDE0](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint64_t nw_endpoint_copy_dictionary()
{
  return MEMORY[0x1F40F2E48]();
}

uint64_t nw_endpoint_create_from_dictionary()
{
  return MEMORY[0x1F40F2EA0]();
}

uint64_t nw_parameters_copy_dictionary()
{
  return MEMORY[0x1F40F3420]();
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1F40F3488]();
}

uint64_t nw_parameters_set_source_application_by_bundle_id()
{
  return MEMORY[0x1F40F3790]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1F4181650](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1F4181750](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)((uint64_t (*)(id, SEL))MEMORY[0x1F4181798])(a1, a2);
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_registerClassPair(Class cls)
{
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

uint64_t openbyid_np()
{
  return MEMORY[0x1F40CD118]();
}

unsigned int os_activity_get_active(os_activity_id_t *entries, unsigned int *count)
{
  return MEMORY[0x1F40CD138](entries, count);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

objc_property_attribute_t *__cdecl property_copyAttributeList(objc_property_t property, unsigned int *outCount)
{
  return (objc_property_attribute_t *)MEMORY[0x1F4181AB8](property, outCount);
}

char *__cdecl property_copyAttributeValue(objc_property_t property, const char *attributeName)
{
  return (char *)MEMORY[0x1F4181AC0](property, attributeName);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1F4181AD0](property);
}

objc_method_description *__cdecl protocol_copyMethodDescriptionList(Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount)
{
  return (objc_method_description *)MEMORY[0x1F4181AE8](p, isRequiredMethod, isInstanceMethod, outCount);
}

Protocol **__cdecl protocol_copyProtocolList(Protocol *proto, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1F4181B00](proto, outCount);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  uint64_t v4 = (const char *)MEMORY[0x1F4181B08](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC98](a1, a2);
}

int removexattr(const char *path, const char *name, int options)
{
  return MEMORY[0x1F40CDD48](path, name, *(void *)&options);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1F40CDE50]();
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1F4181B48](str);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CDFD8](path, name, value, size, *(void *)&position, *(void *)&options);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F98](a1, *(void *)&a2, a3, a4, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1F4181FD0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FF0](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1F4182048](a1, *(void *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1F4182050](a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x1F4182058](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1F41820B0](a1, *(void *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x1F4182190](db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return MEMORY[0x1F41821C0](db);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return MEMORY[0x1F41821C8](a1, *(void *)&onoff);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x1F4182230](a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  return MEMORY[0x1F41823F8](a1, *(void *)&uMask, xCallback, pCtx);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x1F4182490](db, zDb, *(void *)&eMode, pnLog, pnCkpt);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1F4188218]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1F4188220]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1F4186618]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1F4186648]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1F41866E8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_task_isCurrentExecutor()
{
  return MEMORY[0x1F4188278]();
}

uint64_t swift_task_reportUnexpectedExecutor()
{
  return MEMORY[0x1F4188290]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

uint64_t xpc_activity_add_eligibility_changed_handler()
{
  return MEMORY[0x1F40CE968]();
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1F40CE978](activity);
}

uint64_t xpc_activity_copy_identifier()
{
  return MEMORY[0x1F40CE980]();
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

uint64_t xpc_activity_remove_eligibility_changed_handler()
{
  return MEMORY[0x1F40CE9A8]();
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

uint64_t xpc_activity_should_be_data_budgeted()
{
  return MEMORY[0x1F40CE9D8]();
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE9E8](activity);
}

void xpc_activity_unregister(const char *identifier)
{
}

xpc_object_t xpc_array_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1F40CEA38]();
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1F40CEA90](xarray, index);
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CED00](object);
}

uint64_t xpc_copy_short_description()
{
  return MEMORY[0x1F40CED60]();
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1F40CEE30]();
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEE68](xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEEA8](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  MEMORY[0x1F40CEEB8](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF040](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1F40CF310](type);
}