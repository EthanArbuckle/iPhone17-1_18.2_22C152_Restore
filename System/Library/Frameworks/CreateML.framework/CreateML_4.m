uint64_t OUTLINED_FUNCTION_97_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_100_1()
{
  return type metadata accessor for Tensor();
}

void OUTLINED_FUNCTION_101_1()
{
  *(void *)(v1 - 112) = v0;
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_104_1()
{
  return *(void *)(v0 - 264);
}

uint64_t OUTLINED_FUNCTION_105_1()
{
  uint64_t v2 = *(void *)(*(void *)(v0 - 96) + 16);
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
}

uint64_t OUTLINED_FUNCTION_108_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_109_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_110_2()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_111_1()
{
  return 0xD000000000000012;
}

unint64_t OUTLINED_FUNCTION_117_1()
{
  uint64_t v1 = *(void *)(v0 - 208);
  *(void *)(v0 - 216) = *(void *)(v0 - 216);
  *(void *)(v0 - 208) = v1;
  return 0xD00000000000003DLL;
}

uint64_t OUTLINED_FUNCTION_118_1()
{
  uint64_t v3 = *(void *)(v1 - 800) + 40 * v0;
  return outlined init with copy of TrainingSessionDelegate(v3, v1 - 216);
}

uint64_t OUTLINED_FUNCTION_119_0()
{
  return v0 + *(void *)(v2 - 152) + v1 * *(void *)(v2 - 160);
}

uint64_t OUTLINED_FUNCTION_121()
{
  return static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
}

uint64_t OUTLINED_FUNCTION_122_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_123_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_124_0()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_125_0()
{
  return *(void *)(v0 - 248);
}

uint64_t OUTLINED_FUNCTION_126_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_127_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_129_0()
{
  *(void *)(v0 + 16) = v1;
  return v0 + *(void *)(v3 - 152) + v2 * *(void *)(v3 - 160);
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  return *(void *)(v0 - 416);
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  return *(void *)(v0 - 304);
}

uint64_t OUTLINED_FUNCTION_133_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_134_0()
{
  return outlined init with copy of TrainingSessionDelegate(v0 - 192, v0 - 272);
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_136()
{
  *(void *)(v0 - 216) = 0;
  *(void *)(v0 - 208) = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
}

uint64_t OUTLINED_FUNCTION_137_0()
{
  return 0x746867696577;
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_143_0(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 - 116) = a2;
  return 0;
}

uint64_t OUTLINED_FUNCTION_145_0()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, *(void *)(v1 - 136));
  return v0;
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  return 0x6C61756469736572;
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  return type metadata accessor for NeuralNetwork.WeightParameters();
}

uint64_t static BatchNorm.loadLayer(from:layerName:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x270FA5388](v6 - 8);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Tensor();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v51 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v50 = (uint64_t)&v44 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v54 = (uint64_t)&v44 - v15;
  MEMORY[0x270FA5388](v14);
  v17 = (char *)&v44 - v16;
  OUTLINED_FUNCTION_5_59();
  v18._countAndFlagsBits = 0x74657366666F2ELL;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  uint64_t v19 = OUTLINED_FUNCTION_1_60();
  swift_bridgeObjectRelease();
  if (!v19)
  {
    OUTLINED_FUNCTION_3_72();
    _StringGuts.grow(_:)(39);
    OUTLINED_FUNCTION_4_66();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_36();
    uint64_t v33 = v32 + 21;
    v34 = ".offset not found in state dictionary";
LABEL_20:
    unint64_t v40 = (unint64_t)(v34 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v33);
    uint64_t v42 = v52;
    unint64_t v41 = v53;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v43 = v42;
    *(void *)(v43 + 8) = v41;
    *(_OWORD *)(v43 + 16) = 0u;
    *(_OWORD *)(v43 + 32) = 0u;
    *(unsigned char *)(v43 + 48) = 2;
    return swift_willThrow();
  }
  v49 = v8;
  OUTLINED_FUNCTION_5_59();
  v20._countAndFlagsBits = 0x656C6163732ELL;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  uint64_t v21 = OUTLINED_FUNCTION_1_60();
  swift_bridgeObjectRelease();
  if (!v21)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_72();
    _StringGuts.grow(_:)(38);
    OUTLINED_FUNCTION_4_66();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_36();
    uint64_t v33 = v35 + 20;
    v34 = ".scale not found in state dictionary";
    goto LABEL_20;
  }
  v47 = v17;
  OUTLINED_FUNCTION_5_59();
  v22._countAndFlagsBits = 0x676E696E6E75722ELL;
  v22._object = (void *)0xEC0000006E61654DLL;
  String.append(_:)(v22);
  uint64_t v23 = OUTLINED_FUNCTION_1_60();
  swift_bridgeObjectRelease();
  uint64_t v48 = v23;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_72();
    _StringGuts.grow(_:)(44);
    OUTLINED_FUNCTION_4_66();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_36();
    uint64_t v33 = v36 + 26;
    v34 = ".runningMean not found in state dictionary";
    goto LABEL_20;
  }
  uint64_t v46 = a3;
  uint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_4_66();
  swift_bridgeObjectRelease();
  uint64_t v52 = a1;
  unint64_t v53 = a2;
  v24._object = (void *)0x80000002272DC040;
  v24._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v24);
  uint64_t v25 = OUTLINED_FUNCTION_1_60();
  swift_bridgeObjectRelease();
  if (!v25)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v52 = 0;
    unint64_t v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    OUTLINED_FUNCTION_4_66();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_36();
    uint64_t v33 = v37 + 30;
    v34 = ".runningVariance not found in state dictionary";
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_5_59();
  v26._countAndFlagsBits = 0x75746E656D6F6D2ELL;
  v26._object = (void *)0xE90000000000006DLL;
  String.append(_:)(v26);
  uint64_t v27 = OUTLINED_FUNCTION_1_60();
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_72();
    _StringGuts.grow(_:)(41);
    OUTLINED_FUNCTION_4_66();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_36();
    uint64_t v33 = v38 + 23;
    v34 = ".momentum not found in state dictionary";
    goto LABEL_20;
  }
  if (*(void *)(v27 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_5_59();
  v28._countAndFlagsBits = 0x6E6F6C697370652ELL;
  v28._object = (void *)0xE800000000000000;
  String.append(_:)(v28);
  uint64_t v29 = OUTLINED_FUNCTION_1_60();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_72();
    _StringGuts.grow(_:)(40);
    OUTLINED_FUNCTION_4_66();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_36();
    uint64_t v33 = v39 + 22;
    v34 = ".epsilon not found in state dictionary";
    goto LABEL_20;
  }
  if (*(void *)(v29 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (*(void *)(v27 + 16))
  {
    uint64_t v45 = v25;
    swift_bridgeObjectRelease();
    type metadata accessor for TensorShape();
    uint64_t v31 = (uint64_t)v49;
    OUTLINED_FUNCTION_2_68();
    Array<A>.floatTensor(shape:)(v31, v19, (uint64_t)v47);
    swift_bridgeObjectRelease();
    outlined destroy of TensorShape?(v31);
    OUTLINED_FUNCTION_2_68();
    Array<A>.floatTensor(shape:)(v31, v21, v54);
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of TensorShape?(v31);
    if (*(void *)(v29 + 16))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_68();
      Array<A>.floatTensor(shape:)(v31, v48, v50);
      swift_bridgeObjectRelease();
      outlined destroy of TensorShape?(v31);
      OUTLINED_FUNCTION_2_68();
      Array<A>.floatTensor(shape:)(v31, v45, v51);
      swift_bridgeObjectRelease();
      outlined destroy of TensorShape?(v31);
      return BatchNorm.init(momentum:offset:scale:epsilon:runningMean:runningVariance:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void OUTLINED_FUNCTION_0_36()
{
  *(void *)(v2 - 112) = v1;
  *(void *)(v2 - 104) = v0;
}

uint64_t OUTLINED_FUNCTION_1_60()
{
  uint64_t v3 = *(void *)(v1 - 112);
  uint64_t v4 = *(void *)(v1 - 104);
  return specialized Dictionary.subscript.getter(v3, v4, v0);
}

uint64_t OUTLINED_FUNCTION_2_68()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

void OUTLINED_FUNCTION_3_72()
{
  *(void *)(v0 - 112) = 0;
  *(void *)(v0 - 104) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_4_66()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_5_59()
{
  *(void *)(v2 - 112) = v1;
  *(void *)(v2 - 104) = v0;
  return swift_bridgeObjectRetain();
}

uint64_t MLImageClassifier.FeatureExtractor.init(type:)(uint64_t a1, uint64_t a2)
{
  v2[12] = a1;
  v2[13] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor>);
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  v2[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](MLImageClassifier.FeatureExtractor.init(type:), 0, 0);
}

uint64_t MLImageClassifier.FeatureExtractor.init(type:)()
{
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v0[13], v0[19]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v0[19], v0[17]);
    uint64_t v1 = (void *)swift_task_alloc();
    v0[20] = v1;
    *uint64_t v1 = v0;
    v1[1] = MLImageClassifier.FeatureExtractor.init(type:);
    uint64_t v2 = v0[16];
    return MLImageClassifier.CustomFeatureExtractor.buildTransformer()(v2);
  }
  else
  {
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    objc_msgSend(objc_allocWithZone(MEMORY[0x263F00628]), sel_init);
    uint64_t v6 = type metadata accessor for ImageFeaturePrint();
    uint64_t v7 = MEMORY[0x263F04378];
    v0[5] = v6;
    v0[6] = v7;
    __swift_allocate_boxed_opaque_existential_0(v0 + 2);
    ImageFeaturePrint.init(revision:cropAndScale:context:)();
    outlined destroy of MLImageClassifier.FeatureExtractorType(v4, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    outlined init with take of BinaryFloatingPoint((long long *)v0 + 1, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = MLImageClassifier.FeatureExtractor.init(type:);
  }
  else {
    uint64_t v2 = MLImageClassifier.FeatureExtractor.init(type:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_0;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  v0[10] = v3;
  v0[11] = lazy protocol witness table accessor for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 32))(boxed_opaque_existential_0, v2, v3);
  outlined destroy of MLImageClassifier.FeatureExtractorType(v5, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined destroy of MLImageClassifier.FeatureExtractorType(v1, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  outlined init with take of BinaryFloatingPoint((long long *)(v0 + 7), v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[17];
  outlined destroy of MLImageClassifier.FeatureExtractorType(v0[13], type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined destroy of MLImageClassifier.FeatureExtractorType(v1, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t outlined destroy of MLImageClassifier.FeatureExtractorType(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>;
  if (!lazy protocol witness table cache variable for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>);
  }
  return result;
}

uint64_t initializeWithCopy for MLImageClassifier.FeatureExtractor(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for MLImageClassifier.FeatureExtractor(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MLImageClassifier.FeatureExtractor(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.FeatureExtractor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.FeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.FeatureExtractor()
{
  return &type metadata for MLImageClassifier.FeatureExtractor;
}

uint64_t MLImageClassifier.init(_:parameters:)()
{
  OUTLINED_FUNCTION_11();
  v0[3] = v1;
  v0[4] = v2;
  v0[2] = v3;
  uint64_t v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_17(v4);
  v0[5] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_17(v5);
  v0[6] = swift_task_alloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[2];
  outlined destroy of MLImageClassifier.ModelParameters(v0[4]);
  _s8CreateML12MLCheckpointVWOhTm_0(v3, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  _s8CreateML12MLCheckpointVWOhTm_0(v2, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *uint64_t v4 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v3 + 8;
  uint64_t v5 = v3 + *(int *)(v0 + 88);
  uint64_t v6 = v3 + *(int *)(v0 + 84);
  uint64_t v7 = v3 + *(int *)(v0 + 80);
  outlined destroy of MLImageClassifier.ModelParameters(*(void *)(v0 + 32));
  _s8CreateML12MLCheckpointVWOhTm_0(v2, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  _s8CreateML12MLCheckpointVWOhTm_0(v1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined destroy of MLImageClassifier.ModelParameters(v4);
  _s8CreateML12MLCheckpointVWOhTm_0(v7, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  _s8CreateML12MLCheckpointVWOhTm_0(v6, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  _s8CreateML12MLCheckpointVWOhTm_0(v5, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v8();
}

#error "22727BB34: call analysis failed (funcsize=93)"

uint64_t MLImageClassifier.init(_:parameters:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_6();
  *uint64_t v7 = v6;
  *(void *)(v5 + 64) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v5 + 72) = a1;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

uint64_t MLImageClassifier.init(checkpoint:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  uint64_t v111 = v7;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_50_0();
  uint64_t v113 = v8;
  uint64_t v112 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_106();
  uint64_t v114 = v11;
  OUTLINED_FUNCTION_65();
  uint64_t v12 = type metadata accessor for MLImageClassifier.Model();
  uint64_t v13 = OUTLINED_FUNCTION_1(v12);
  uint64_t v108 = v14;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_50_0();
  uint64_t v110 = v15;
  uint64_t v109 = v16;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_106();
  uint64_t v130 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v128 = v20;
  uint64_t v129 = v19;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_33_0();
  uint64_t v127 = v21;
  uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v124 = v22;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_106();
  uint64_t v122 = v25;
  OUTLINED_FUNCTION_65();
  uint64_t v126 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_106();
  uint64_t v132 = v28;
  OUTLINED_FUNCTION_65();
  uint64_t v29 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_106();
  uint64_t v119 = v33;
  OUTLINED_FUNCTION_65();
  uint64_t v117 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_106();
  uint64_t v118 = v36;
  OUTLINED_FUNCTION_65();
  uint64_t v115 = type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_33_0();
  v135 = v38;
  OUTLINED_FUNCTION_65();
  uint64_t v133 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v40 = v39;
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_33();
  uint64_t v44 = v42 - v43;
  uint64_t v46 = MEMORY[0x270FA5388](v45);
  uint64_t v47 = MEMORY[0x270FA5388](v46);
  v141 = (char *)&v102 - v48;
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_106();
  uint64_t v134 = v49;
  OUTLINED_FUNCTION_65();
  uint64_t v50 = type metadata accessor for MLImageClassifier();
  uint64_t v137 = (uint64_t)a2 + *(int *)(v50 + 24);
  MLClassifierMetrics.init()(v50, v51, v52, v53, v54, v55, v56, v57, v102, v103, (uint64_t)v104, v105, v106, v107, v108, v109, v110, v111, v112,
    v113);
  uint64_t v106 = v50;
  uint64_t v58 = *(int *)(v50 + 28);
  v131 = a2;
  v59 = (char *)a2 + v58;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v60 = swift_allocError();
  uint64_t v62 = OUTLINED_FUNCTION_7_56(v60, v61, 0xD0000000000000C0);
  type metadata accessor for MLClassifierMetrics.Contents(v62);
  uint64_t v136 = (uint64_t)v59;
  swift_storeEnumTagMultiPayload();
  uint64_t v63 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for MLCheckpoint() + 20));
  uint64_t v138 = a1;
  switch(v63)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v64)
      {
LABEL_4:
        uint64_t v105 = v29;
        uint64_t v65 = v134;
        uint64_t v66 = v138;
        URL.deletingLastPathComponent()();
        URL.appendingPathComponent(_:)();
        URL.appendingPathExtension(_:)();
        v67 = *(void (**)(void))(v40 + 8);
        uint64_t v68 = v133;
        OUTLINED_FUNCTION_15_36();
        v67();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v44, v65, v68);
        v69 = v135;
        MLImageClassifier.PersistentParameters.init(sessionDirectory:)(v44, v135);
        if (!v2)
        {
          uint64_t v103 = v40 + 8;
          v104 = v67;
          v71 = (int *)v115;
          uint64_t v72 = v118;
          _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0((uint64_t)v69 + *(int *)(v115 + 20), v118, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
          uint64_t v73 = *(void *)((char *)v69 + v71[8]);
          uint64_t v74 = *(void *)((char *)v69 + v71[9]);
          uint64_t v75 = (uint64_t)v69 + v71[6];
          uint64_t v76 = v119;
          _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v75, v119, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
          v77 = v131;
          v131[1] = v73;
          *((_OWORD *)++v77 + 2) = 0u;
          *((_OWORD *)v77 + 4) = 0u;
          *((_OWORD *)v77 + 3) = 0u;
          *((_OWORD *)v77 + 1) = 0u;
          v77[1] = v74;
          uint64_t v78 = v116;
          _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v72, v116, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
          uint64_t v140 = v117;
          v79 = __swift_allocate_boxed_opaque_existential_0(&v139);
          outlined init with take of MLImageClassifier.ModelParameters.ValidationData(v78, (uint64_t)v79, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
          outlined assign with take of Any?((uint64_t)&v139, (uint64_t)(v77 + 2));
          uint64_t v80 = v120;
          _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v76, v120, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
          uint64_t v140 = v105;
          v81 = __swift_allocate_boxed_opaque_existential_0(&v139);
          outlined init with take of MLImageClassifier.ModelParameters.ValidationData(v80, (uint64_t)v81, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
          outlined assign with take of Any?((uint64_t)&v139, (uint64_t)(v77 + 6));
          _s8CreateML12MLCheckpointVWOhTm_0(v76, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
          _s8CreateML12MLCheckpointVWOhTm_0(v72, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
          outlined init with copy of MLImageClassifier.ModelParameters((long long *)v77, (uint64_t)&v139);
          MLImageClassifier.ModelParameters.algorithm.getter(v80);
          lazy protocol witness table accessor for type Float and conformance Float();
          uint64_t v82 = v122;
          LogisticRegressionClassifier.Configuration.init()();
          uint64_t v83 = v125;
          LogisticRegressionClassifier.Configuration.maximumIterations.setter();
          uint64_t v84 = v124;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v121, v82, v83);
          uint64_t v85 = v127;
          LogisticRegressionClassifier.init(labels:configuration:)();
          outlined destroy of MLImageClassifier.ModelParameters((uint64_t)&v139);
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v83);
          uint64_t v86 = v123;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 32))(v123, v85, v129);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
          swift_storeEnumTagMultiPayload();
          _s8CreateML12MLCheckpointVWOhTm_0(v80, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
          outlined init with take of MLImageClassifier.ModelParameters.ValidationData(v86, v132, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
          lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier();
          uint64_t v87 = v130;
          UpdatableSupervisedEstimator.readWithOptimizer(from:)();
          uint64_t v88 = v107;
          MLImageClassifier.ModelParameters.algorithm.getter(v107);
          uint64_t v89 = v114;
          outlined init with take of MLImageClassifier.ModelParameters.ValidationData(v88, v114, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
          uint64_t v90 = v110;
          _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v87, v110, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
          uint64_t v91 = v89;
          uint64_t v92 = v113;
          _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(v91, v113, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
          unint64_t v93 = (*(unsigned __int8 *)(v108 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
          unint64_t v94 = (v109 + *(unsigned __int8 *)(v111 + 80) + v93) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
          uint64_t v95 = swift_allocObject();
          outlined init with take of MLImageClassifier.ModelParameters.ValidationData(v90, v95 + v93, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
          outlined init with take of MLImageClassifier.ModelParameters.ValidationData(v92, v95 + v94, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
          specialized blockAwait<A>(_:)();
          uint64_t v98 = v97;
          swift_release();
          _s8CreateML12MLCheckpointVWOhTm_0(v138, (void (*)(void))type metadata accessor for MLCheckpoint);
          _s8CreateML12MLCheckpointVWOhTm_0(v114, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
          _s8CreateML12MLCheckpointVWOhTm_0(v132, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
          _s8CreateML12MLCheckpointVWOhTm_0((uint64_t)v135, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
          v99 = v104;
          OUTLINED_FUNCTION_11_3();
          v99();
          OUTLINED_FUNCTION_11_3();
          v99();
          v100 = v131;
          void *v131 = v98;
          return outlined init with take of MLImageClassifier.ModelParameters.ValidationData(v87, (uint64_t)v100 + *(int *)(v106 + 32), (void (*)(void))type metadata accessor for MLImageClassifier.Model);
        }
        _s8CreateML12MLCheckpointVWOhTm_0(v66, (void (*)(void))type metadata accessor for MLCheckpoint);
        OUTLINED_FUNCTION_15_36();
        v67();
        OUTLINED_FUNCTION_15_36();
        v67();
      }
      else
      {
        swift_allocError();
        *(void *)uint64_t v70 = 0xD00000000000003CLL;
        *(void *)(v70 + 8) = 0x80000002272DC0F0;
        *(_OWORD *)(v70 + 16) = 0u;
        *(_OWORD *)(v70 + 32) = 0u;
        *(unsigned char *)(v70 + 48) = 0;
        swift_willThrow();
        _s8CreateML12MLCheckpointVWOhTm_0(v138, (void (*)(void))type metadata accessor for MLCheckpoint);
      }
      uint64_t v96 = v136;
      _s8CreateML12MLCheckpointVWOhTm_0(v137, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      return _s8CreateML12MLCheckpointVWOhTm_0(v96, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  }
}

unint64_t lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier()
{
  unint64_t result = lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier)
  {
    type metadata accessor for MLImageClassifier.Classifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier);
  }
  return result;
}

uint64_t closure #1 in MLImageClassifier.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLImageClassifier.init(checkpoint:);
  return MLImageClassifier.Model.exportAsCompiledMLModel(featureExtractorType:)();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_6();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v6 + 8);
    return v8();
  }
  else
  {
    *(void *)(v5 + 32) = a1;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v10, v11, v12);
  }
}

uint64_t sub_22727CEF4()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_1(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for MLImageClassifier.FeatureExtractorType(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (((v3 + 16) & ~v3) + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v10 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v10 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  __swift_instantiateConcreteTypeFromMangledName(v10);
  OUTLINED_FUNCTION_8();
  uint64_t v11 = OUTLINED_FUNCTION_22_1();
  v12(v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for URL();
    OUTLINED_FUNCTION_8();
    uint64_t v13 = OUTLINED_FUNCTION_22_1();
    v14(v13);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    swift_bridgeObjectRelease();
  }

  return MEMORY[0x270FA0238](v0, v8 + v9, v3 | v7 | 7);
}

uint64_t outlined init with take of MLImageClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in MLImageClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_1(v3);
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLImageClassifier.init(checkpoint:)(a1);
}

uint64_t _s8CreateML12MLCheckpointVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  uint64_t v3 = OUTLINED_FUNCTION_22_1();
  v4(v3);
  return a1;
}

void static MLImageClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, long long *a2, uint64_t a3)
{
  static MLImageClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLImageClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLImageClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33();
  uint64_t v11 = v9 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v17 - v13;
  static _ImageUtilities.getImageURLsAndLabels(from:)(a1);
  if (!v3)
  {
    outlined init with copy of MLImageClassifier.ModelParameters(a2, (uint64_t)v17);
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(a3, (uint64_t)v14, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    uint64_t v15 = type metadata accessor for ImageClassifierTrainingSessionDelegate();
    OUTLINED_FUNCTION_31_0();
    ImageClassifierTrainingSessionDelegate.init(filesByLabel:modelParameters:sessionParameters:)();
    v17[3] = v15;
    v17[4] = &protocol witness table for ImageClassifierTrainingSessionDelegate;
    v17[0] = v16;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(a3, v11, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v17, v11, 12);
  }
}

uint64_t static MLImageClassifier.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLImageClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v14[-1] - v9;
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(a1, (uint64_t)&v14[-1] - v9, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v11 = type metadata accessor for ImageClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v12 = ImageClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v10);
  if (!v1)
  {
    v14[3] = v11;
    v14[4] = &protocol witness table for ImageClassifierTrainingSessionDelegate;
    v14[0] = v12;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(a1, v7, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, v7, 12);
  }
}

uint64_t closure #1 in closure #1 in static MLImageClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = &v23[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a2)
  {
    *uint64_t v12 = a1;
    swift_storeEnumTagMultiPayload();
    id v21 = a1;
    a4(v12);
    return outlined destroy of Result<MLImageClassifier, Error>((uint64_t)v12);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for ImageClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v17 = v22;
    uint64_t v18 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v18);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v17;
    v19[5] = a4;
    v19[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:), (uint64_t)v19);
    return swift_release();
  }
}

uint64_t closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:);
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of Result<MLImageClassifier, Error>(v1);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Result<MLImageClassifier, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22727DABC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t OUTLINED_FUNCTION_7_56@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a2 = a3;
  *(void *)(a2 + 8) = (v3 - 32) | 0x8000000000000000;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  *uint64_t v4 = a1;
  return 0;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t MLHandPoseClassifier.ImageAugmentationOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void specialized OptionSet.union(_:)(void *a1@<X8>)
{
}

void specialized OptionSet.symmetricDifference(_:)(void *a1@<X8>)
{
}

BOOL specialized OptionSet<>.insert(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

void specialized OptionSet<>.remove(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  if ((*v2 & a2) != 0) {
    *v2 &= ~a2;
  }
  OUTLINED_FUNCTION_1_61(a1);
}

void specialized OptionSet<>.update(with:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  *v2 |= a2;
  OUTLINED_FUNCTION_1_61(a1);
}

void specialized OptionSet<>.formUnion(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2_69(*v1 | a1);
}

void specialized OptionSet<>.formSymmetricDifference(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2_69(*v1 ^ a1);
}

void specialized SetAlgebra.subtracting(_:)(void *a1@<X8>)
{
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

void specialized SetAlgebra.subtract(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2_69(*v1 & ~a1);
}

uint64_t MLHandPoseClassifier.ImageAugmentationOptions.rawValue.getter()
{
  return *(void *)v0;
}

void static MLHandPoseClassifier.ImageAugmentationOptions.horizontallyFlip.getter(void *a1@<X8>)
{
}

void static MLHandPoseClassifier.ImageAugmentationOptions.rotate.getter(void *a1@<X8>)
{
}

void static MLHandPoseClassifier.ImageAugmentationOptions.translate.getter(void *a1@<X8>)
{
}

void static MLHandPoseClassifier.ImageAugmentationOptions.scale.getter(void *a1@<X8>)
{
}

unint64_t lazy protocol witness table accessor for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return MLHandPoseClassifier.ImageAugmentationOptions.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLHandPoseClassifier.ImageAugmentationOptions()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLHandPoseClassifier.ImageAugmentationOptions()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for SetAlgebra.remove(_:) in conformance MLHandPoseClassifier.ImageAugmentationOptions(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void protocol witness for SetAlgebra.update(with:) in conformance MLHandPoseClassifier.ImageAugmentationOptions(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = MLHandPoseClassifier.ImageAugmentationOptions.init(rawValue:)(*a1, (void *)a2);
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLHandPoseClassifier.ImageAugmentationOptions.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized SetAlgebra<>.init(arrayLiteral:)(a1, a2);
}

ValueMetadata *type metadata accessor for MLHandPoseClassifier.ImageAugmentationOptions()
{
  return &type metadata for MLHandPoseClassifier.ImageAugmentationOptions;
}

void OUTLINED_FUNCTION_1_61(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v2;
}

void OUTLINED_FUNCTION_2_69(uint64_t a1@<X8>)
{
  *uint64_t v1 = a1;
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  a1(&v3, &v2);
  return v3;
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X8>)
{
  return _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5Tm(a1, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>, a2);
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML22MLHandActionClassifierV_s5Error_pTgm5@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X8>)
{
  return _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5Tm(a1, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>, a2);
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5Tm@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_24_4();
  a1(&v9);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of (offset: Int, element: Layer)?(v3, a3, a2);
}

uint64_t MLUntypedColumn.init<A>(_:)()
{
  OUTLINED_FUNCTION_58_8();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_46_17();
  uint64_t v3 = OUTLINED_FUNCTION_56_16();
  uint64_t result = v4(v3);
  *(void *)uint64_t v0 = v1;
  *(unsigned char *)(v0 + 8) = v2 & 1;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;

  OUTLINED_FUNCTION_58_8();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_46_17();
  uint64_t v3 = OUTLINED_FUNCTION_56_16();
  uint64_t result = v4(v3);
  *(void *)uint64_t v0 = v1;
  *(unsigned char *)(v0 + 8) = v2 & 1;
  return result;
}

void MLUntypedColumn.type.getter()
{
  OUTLINED_FUNCTION_20_40();
  if (v1)
  {
    char v2 = 6;
  }
  else
  {
    swift_retain();
    _UntypedColumn.type.getter(&v3);
    OUTLINED_FUNCTION_6_49();
  }
  *uint64_t v0 = v2;
}

uint64_t MLUntypedColumn.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLUntypedColumn.map<A>(_:)(a1, a2, a3, a4, 1);
}

uint64_t MLUntypedColumn.count.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    return -1;
  }
  swift_retain();
  uint64_t v2 = CMLColumn.size.getter();
  OUTLINED_FUNCTION_21_13();
  return v2;
}

#error "22727E31C: call analysis failed (funcsize=53)"

void MLUntypedColumn.ints.getter()
{
  OUTLINED_FUNCTION_20_40();
  if ((v1 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(*v0, 0), _UntypedColumn.type.getter(&v5),
                                                            OUTLINED_FUNCTION_6_49(),
                                                            v2))
  {
    OUTLINED_FUNCTION_15_37();
  }
  else
  {
    char v3 = (void *)OUTLINED_FUNCTION_7_57();
    outlined copy of Result<_DataTable, Error>(v3, v4);
  }
}

void static MLUntypedColumn.== infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_29_8();
  char v3 = v2;
  char v5 = *(void **)v4;
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v6 = v5;
    uint64_t v7 = 1;
LABEL_7:
    *(void *)char v3 = v5;
    *(unsigned char *)(v3 + 8) = v7;
    OUTLINED_FUNCTION_28_8();
    return;
  }
  uint64_t v8 = *(void **)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    uint64_t v9 = v8;
    uint64_t v7 = 1;
    char v5 = v8;
    goto LABEL_7;
  }
  uint64_t v10 = v1;
  uint64_t v11 = *(void *)(v5[2] + 16);
  uint64_t v12 = *(void *)(v8[2] + 16);
  outlined copy of Result<_DataTable, Error>(*(id *)v0, 0);
  outlined copy of Result<_DataTable, Error>(v5, 0);
  if (specialized handling<A, B, C, D>(_:_:_:_:)(v11, v10, v12))
  {
    type metadata accessor for CMLColumn();
    uint64_t v13 = OUTLINED_FUNCTION_70();
    OUTLINED_FUNCTION_59_9(v13);
    uint64_t v14 = OUTLINED_FUNCTION_70();
    *(void *)(v14 + 16) = v13;
    OUTLINED_FUNCTION_34_22();
    uint64_t v7 = 0;
    char v5 = (void *)v14;
    goto LABEL_7;
  }
  __break(1u);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  char v8;

  OUTLINED_FUNCTION_45_19();
  if (v3)
  {
    OUTLINED_FUNCTION_30_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_25_29();
    }
    else
    {
      OUTLINED_FUNCTION_85();
      *uint64_t v7 = v0;
    }
    OUTLINED_FUNCTION_25_29();
  }
  else
  {
    char v4 = v2;
    type metadata accessor for _UntypedColumn();
    OUTLINED_FUNCTION_30_29();
    char v5 = OUTLINED_FUNCTION_44_19();
    v1(v5);
    OUTLINED_FUNCTION_54_12();
    static _UntypedColumn.performRightScalar(op:a:b:)(v4, v0);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_57_13();
    outlined consume of Result<_DataTable, Error>(v6, v8);
  }
  OUTLINED_FUNCTION_63_6();
}

{
  uint64_t v0;
  char v1;
  uint64_t *v2;

  OUTLINED_FUNCTION_45_19();
  if (v1)
  {
    OUTLINED_FUNCTION_30_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_25_29();
    }
    else
    {
      OUTLINED_FUNCTION_85();
      *int v2 = v0;
    }
    OUTLINED_FUNCTION_25_29();
  }
  else
  {
    type metadata accessor for _UntypedColumn();
    swift_retain();
    static _UntypedColumn.performRightScalar(op:a:b:)(4, v0);
    OUTLINED_FUNCTION_26_8();
  }
  OUTLINED_FUNCTION_63_6();
}

void MLUntypedColumn.subscript.getter()
{
  OUTLINED_FUNCTION_20_40();
  if (v2)
  {
    long long v3 = 0uLL;
    char v4 = 6;
  }
  else
  {
    uint64_t v5 = v1;
    swift_retain();
    _UntypedColumn.valueAtIndex(index:)(v5, (uint64_t)&v6);
    OUTLINED_FUNCTION_26_9();
    long long v3 = v6;
    char v4 = v7;
  }
  *(_OWORD *)uint64_t v0 = v3;
  *(unsigned char *)(v0 + 16) = v4;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  char v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_29_8();
  char v4 = v3;
  uint64_t v5 = *(void **)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    long long v6 = v5;
    char v7 = 1;
LABEL_10:
    *(void *)char v4 = v5;
    *(unsigned char *)(v4 + 8) = v7;
    OUTLINED_FUNCTION_28_8();
    return;
  }
  OUTLINED_FUNCTION_45_19();
  if (v8)
  {
    uint64_t v9 = v2;
    char v7 = 1;
    uint64_t v5 = v2;
    goto LABEL_10;
  }
  uint64_t v10 = OUTLINED_FUNCTION_14_36();
  if (v1)
  {
    OUTLINED_FUNCTION_17_36();
    char v7 = 1;
LABEL_9:
    uint64_t v5 = (void *)v1;
    goto LABEL_10;
  }
  if (v10)
  {
    type metadata accessor for CMLColumn();
    uint64_t v11 = OUTLINED_FUNCTION_70();
    OUTLINED_FUNCTION_59_9(v11);
    uint64_t v1 = OUTLINED_FUNCTION_70();
    *(void *)(v1 + 16) = v11;
    OUTLINED_FUNCTION_17_36();
    char v7 = 0;
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_29_8();
  char v4 = v3;
  uint64_t v5 = *(void **)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    long long v6 = v5;
    char v7 = 1;
LABEL_10:
    *(void *)char v4 = v5;
    *(unsigned char *)(v4 + 8) = v7;
    OUTLINED_FUNCTION_28_8();
    return;
  }
  OUTLINED_FUNCTION_45_19();
  if (v8)
  {
    char v7 = 1;
    outlined copy of Result<_DataTable, Error>(v2, 1);
    uint64_t v5 = v2;
    goto LABEL_10;
  }
  uint64_t v9 = OUTLINED_FUNCTION_14_36();
  if (v1)
  {
    OUTLINED_FUNCTION_17_36();
    char v7 = 1;
LABEL_9:
    uint64_t v5 = (void *)v1;
    goto LABEL_10;
  }
  if (v9)
  {
    type metadata accessor for CMLColumn();
    uint64_t v10 = OUTLINED_FUNCTION_70();
    OUTLINED_FUNCTION_59_9(v10);
    uint64_t v1 = OUTLINED_FUNCTION_70();
    *(void *)(v1 + 16) = v10;
    OUTLINED_FUNCTION_17_36();
    char v7 = 0;
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v0;
  id *v1;
  char v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_20_40();
  if ((v2 & 1) != 0
    || (long long v3 = *v1,
        outlined copy of Result<_DataTable, Error>(*v1, 0),
        char v4 = CMLColumn.size.getter(),
        outlined consume of Result<_DataTable, Error>(v3, 0),
        v4 < 0))
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    MLUntypedColumn.subscript.getter(v5, v6, v0);
  }
}

void MLUntypedColumn.strings.getter()
{
  OUTLINED_FUNCTION_20_40();
  if ((v1 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(*v0, 0),
        _UntypedColumn.type.getter(&v5),
        OUTLINED_FUNCTION_6_49(),
        v2 != 2))
  {
    OUTLINED_FUNCTION_15_37();
  }
  else
  {
    long long v3 = (void *)OUTLINED_FUNCTION_7_57();
    outlined copy of Result<_DataTable, Error>(v3, v4);
  }
}

void static MLUntypedColumn.!= infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.> infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.< infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.>= infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.<= infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 4);
}

void static MLUntypedColumn.!= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 5);
}

void static MLUntypedColumn.== infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2[1])
  {
    uint64_t v10 = *a2;
    OUTLINED_FUNCTION_30_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_25_29();
    }
    else
    {
      OUTLINED_FUNCTION_85();
      *char v7 = v10;
    }
    OUTLINED_FUNCTION_25_29();
  }
  else
  {
    type metadata accessor for _UntypedColumn();
    OUTLINED_FUNCTION_30_29();
    uint64_t v5 = OUTLINED_FUNCTION_44_19();
    v3(v5);
    OUTLINED_FUNCTION_54_12();
    static _UntypedColumn.performLeftScalar(op:a:b:)(a3, (uint64_t)v9);
    long long v6 = (void *)OUTLINED_FUNCTION_57_13();
    outlined consume of Result<_DataTable, Error>(v6, v8);
  }
  OUTLINED_FUNCTION_63_6();
}

void static MLUntypedColumn.> infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 7);
}

void static MLUntypedColumn.< infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 6);
}

void static MLUntypedColumn.>= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 9);
}

void static MLUntypedColumn.<= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 8);
}

void static MLUntypedColumn.+ infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.- infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.* infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn./ infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void MLUntypedColumn.map<A>(to:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v81 = a3;
  uint64_t v82 = a2;
  uint64_t v83 = a1;
  uint64_t v4 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_15();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v80 - v8;
  uint64_t v10 = *(void **)v3;
  char v11 = *(unsigned char *)(v3 + 8);
  uint64_t v84 = 0;
  uint64_t v85 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v84 = 0xD000000000000016;
  uint64_t v85 = 0x80000002272DC150;
  v12._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t v14 = v84;
  uint64_t v15 = v85;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v16 = (void *)OUTLINED_FUNCTION_85();
  uint64_t *v17 = v14;
  v17[1] = v15;
  OUTLINED_FUNCTION_20_34((uint64_t)v16, (uint64_t)v17);
  if (swift_dynamicCastMetatype())
  {
    if (v11) {
      goto LABEL_13;
    }
    uint64_t v18 = OUTLINED_FUNCTION_5_60();
    OUTLINED_FUNCTION_40_17(v18, 0, v19, v20, v21, v22, v23, v24, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      vars0,
      vars8);
    if (v14) {
      goto LABEL_28;
    }
    uint64_t v26 = v25;
    if (v25)
    {
LABEL_26:
      type metadata accessor for CMLColumn();
      uint64_t v49 = OUTLINED_FUNCTION_70();
      *(void *)(v49 + 16) = v26;
      type metadata accessor for _UntypedColumn();
      uint64_t v14 = OUTLINED_FUNCTION_70();
      *(void *)(v14 + 16) = v49;

      outlined consume of Result<_DataTable, Error>(v10, 0);
      char v38 = 0;
LABEL_29:
      uint64_t v84 = v14;
      LOBYTE(v85) = v38;
      MLDataColumn.init(from:)((uint64_t)&v84, v81);
      return;
    }
    __break(1u);
  }
  if (!swift_dynamicCastMetatype()) {
    goto LABEL_11;
  }
  if (v11)
  {
LABEL_13:
    uint64_t v84 = (uint64_t)v10;
    outlined copy of Result<_DataTable, Error>(v10, 1);
    id v35 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v36 = _getErrorEmbeddedNSError<A>(_:)();
    if (v36)
    {
      uint64_t v14 = v36;
      OUTLINED_FUNCTION_56_11();
    }
    else
    {
      uint64_t v14 = OUTLINED_FUNCTION_85();
      *uint64_t v37 = v84;
    }
    LOBYTE(v89) = 1;

    OUTLINED_FUNCTION_56_11();
    char v38 = v89;
    goto LABEL_29;
  }
  uint64_t v27 = OUTLINED_FUNCTION_5_60();
  OUTLINED_FUNCTION_40_17(v27, 1, v28, v29, v30, v31, v32, v33, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98,
    v99,
    vars0,
    vars8);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v26 = v34;
  if (v34) {
    goto LABEL_26;
  }
  __break(1u);
LABEL_11:
  if (!swift_dynamicCastMetatype())
  {
    if (!swift_dynamicCastMetatype())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      if (!swift_dynamicCastMetatype())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (!swift_dynamicCastMetatype())
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
          if (!swift_dynamicCastMetatype())
          {
            if (swift_dynamicCastMetatype())
            {
              if (v11) {
                goto LABEL_13;
              }
              uint64_t v72 = OUTLINED_FUNCTION_5_60();
              OUTLINED_FUNCTION_40_17(v72, 5, v73, v74, v75, v76, v77, v78, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
                v91,
                v92,
                v93,
                v94,
                v95,
                v96,
                v97,
                v98,
                v99,
                vars0,
                vars8);
              if (v14) {
                goto LABEL_28;
              }
              uint64_t v26 = v79;
              if (v79) {
                goto LABEL_26;
              }
              __break(1u);
            }
            char v38 = 1;
            uint64_t v14 = (uint64_t)v16;
            goto LABEL_29;
          }
        }
      }
    }
    if (v11)
    {
      uint64_t v84 = (uint64_t)v10;
      outlined copy of Result<_DataTable, Error>(v10, 1);
      id v39 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v40 = _getErrorEmbeddedNSError<A>(_:)();
      if (v40)
      {
        uint64_t v14 = v40;
        OUTLINED_FUNCTION_56_11();
      }
      else
      {
        uint64_t v14 = OUTLINED_FUNCTION_85();
        *uint64_t v58 = v84;
      }
      char v38 = 1;
      LOBYTE(v89) = 1;

      OUTLINED_FUNCTION_56_11();
      uint64_t v59 = v82;
      if (v89) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
    uint64_t v50 = OUTLINED_FUNCTION_5_60();
    OUTLINED_FUNCTION_40_17(v50, 4, v51, v52, v53, v54, v55, v56, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      vars0,
      vars8);
    if (!v14)
    {
      uint64_t v60 = v57;
      if (!v57) {
        goto LABEL_46;
      }
      type metadata accessor for CMLColumn();
      uint64_t v61 = OUTLINED_FUNCTION_70();
      *(void *)(v61 + 16) = v60;
      uint64_t v62 = v61;
      type metadata accessor for _UntypedColumn();
      uint64_t v14 = OUTLINED_FUNCTION_70();
      *(void *)(v14 + 16) = v62;

      outlined consume of Result<_DataTable, Error>(v10, 0);
      uint64_t v59 = v82;
LABEL_35:
      swift_retain_n();
      uint64_t v63 = CMLColumn.size.getter();
      OUTLINED_FUNCTION_41_19();
      if (v63 <= 0) {
        goto LABEL_38;
      }
      swift_retain();
      _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v84);
      OUTLINED_FUNCTION_41_19();
      uint64_t v64 = v83;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v59 + 16))(&v84, v83, v59);
      char v38 = 1;
      LODWORD(v64) = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v64);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
      if (v64 == 1)
      {
        uint64_t v84 = 0;
        uint64_t v85 = 0xE000000000000000;
        _StringGuts.grow(_:)(60);
        v65._countAndFlagsBits = 0xD000000000000039;
        v65._object = (void *)0x80000002272DC170;
        String.append(_:)(v65);
        v66._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v66);
        swift_bridgeObjectRelease();
        v67._countAndFlagsBits = 46;
        v67._object = (void *)0xE100000000000000;
        String.append(_:)(v67);
        uint64_t v68 = v84;
        uint64_t v69 = v85;
        uint64_t v70 = OUTLINED_FUNCTION_85();
        *(void *)uint64_t v71 = v68;
        *(void *)(v71 + 8) = v69;
        *(_OWORD *)(v71 + 16) = 0u;
        *(_OWORD *)(v71 + 32) = 0u;
        *(unsigned char *)(v71 + 48) = 1;
        OUTLINED_FUNCTION_41_19();
        OUTLINED_FUNCTION_41_19();
        uint64_t v14 = v70;
      }
      else
      {
LABEL_38:
        OUTLINED_FUNCTION_41_19();
        char v38 = 0;
      }
      goto LABEL_29;
    }
LABEL_28:

    outlined consume of Result<_DataTable, Error>(v10, 0);
    char v38 = 1;
    goto LABEL_29;
  }
  if (v11) {
    goto LABEL_13;
  }
  uint64_t v41 = OUTLINED_FUNCTION_5_60();
  OUTLINED_FUNCTION_40_17(v41, 2, v42, v43, v44, v45, v46, v47, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98,
    v99,
    vars0,
    vars8);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v26 = v48;
  if (v48) {
    goto LABEL_26;
  }
  __break(1u);
LABEL_46:
  __break(1u);
}

void static MLUntypedColumn.+ infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 0);
}

void static MLUntypedColumn.- infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 1);
}

void static MLUntypedColumn.* infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 3);
}

void static MLUntypedColumn./ infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 2);
}

void static MLUntypedColumn.|| infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.&& infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

void MLUntypedColumn.doubles.getter()
{
  OUTLINED_FUNCTION_20_40();
  if ((v1 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(*v0, 0),
        _UntypedColumn.type.getter(&v5),
        OUTLINED_FUNCTION_6_49(),
        v2 != 1))
  {
    OUTLINED_FUNCTION_15_37();
  }
  else
  {
    uint64_t v3 = (void *)OUTLINED_FUNCTION_7_57();
    outlined copy of Result<_DataTable, Error>(v3, v4);
  }
}

void MLUntypedColumn.sequences.getter()
{
  OUTLINED_FUNCTION_20_40();
  if ((v1 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(*v0, 0),
        _UntypedColumn.type.getter(&v5),
        OUTLINED_FUNCTION_6_49(),
        v2 != 3))
  {
    OUTLINED_FUNCTION_15_37();
  }
  else
  {
    uint64_t v3 = (void *)OUTLINED_FUNCTION_7_57();
    outlined copy of Result<_DataTable, Error>(v3, v4);
  }
}

void MLUntypedColumn.dictionaries.getter()
{
  OUTLINED_FUNCTION_20_40();
  if ((v1 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(*v0, 0),
        _UntypedColumn.type.getter(&v5),
        OUTLINED_FUNCTION_6_49(),
        v2 != 4))
  {
    OUTLINED_FUNCTION_15_37();
  }
  else
  {
    uint64_t v3 = (void *)OUTLINED_FUNCTION_7_57();
    outlined copy of Result<_DataTable, Error>(v3, v4);
  }
}

void MLUntypedColumn.multiArrays.getter()
{
  OUTLINED_FUNCTION_20_40();
  if ((v1 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(*v0, 0),
        _UntypedColumn.type.getter(&v5),
        OUTLINED_FUNCTION_6_49(),
        v2 != 5))
  {
    OUTLINED_FUNCTION_15_37();
  }
  else
  {
    uint64_t v3 = (void *)OUTLINED_FUNCTION_7_57();
    outlined copy of Result<_DataTable, Error>(v3, v4);
  }
}

id MLUntypedColumn.error.getter()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    return 0;
  }
  id v1 = *(id *)v0;
  id v2 = *(id *)v0;
  return v1;
}

BOOL MLUntypedColumn.isValid.getter()
{
  return (*(unsigned char *)(v0 + 8) & 1) == 0;
}

uint64_t MLUntypedColumn.init(repeating:count:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *((unsigned char *)a1 + 16);
  long long v7 = *a1;
  char v8 = v5;
  type metadata accessor for _UntypedColumn();
  OUTLINED_FUNCTION_70();
  uint64_t result = _UntypedColumn.init(repeating:count:)((uint64_t)&v7, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

uint64_t MLUntypedColumn.init<A>(repeating:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  OUTLINED_FUNCTION_0_15();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_24_4();
  type metadata accessor for _UntypedColumn();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v5, a1, a3);
  uint64_t v14 = _UntypedColumn.__allocating_init<A>(repeating:count:)(v5, a2, a3, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  *(void *)a5 = v14;
  *(unsigned char *)(a5 + 8) = 0;
  return result;
}

void MLUntypedColumn.init()(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v2 = OUTLINED_FUNCTION_85();
  *uint64_t v3 = 0xD00000000000001DLL;
  v3[1] = 0x80000002272D7200;
  OUTLINED_FUNCTION_20_34(v2, (uint64_t)v3);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
}

void MLUntypedColumn.append(contentsOf:)()
{
  OUTLINED_FUNCTION_29_8();
  uint64_t v2 = v0;
  uint64_t v3 = *v0;
  if ((_BYTE)v2[1])
  {
    char v4 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_45_19();
    if (v5)
    {
      char v4 = 1;
      outlined copy of Result<_DataTable, Error>(v1, 1);
      OUTLINED_FUNCTION_26_9();
      uint64_t v3 = v1;
    }
    else
    {
      outlined copy of Result<_DataTable, Error>(v1, 0);
      outlined copy of Result<_DataTable, Error>(v3, 0);
      uint64_t v6 = _UntypedColumn.appending(contentsOf:)((uint64_t)v1);
      OUTLINED_FUNCTION_34_22();
      outlined consume of Result<_DataTable, Error>(v3, 0);
      uint64_t v3 = (void *)v6;
      char v4 = 0;
    }
  }
  *uint64_t v2 = v3;
  *((unsigned char *)v2 + 8) = v4;
  OUTLINED_FUNCTION_28_8();
}

void MLUntypedColumn.materialize()(uint64_t a1@<X8>)
{
  id v3 = *(id *)v1;
  if (*(unsigned char *)(v1 + 8))
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v1, 1);
    swift_willThrow();
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v3, 0);
    CMLColumn.materialize()();
    outlined consume of Result<_DataTable, Error>(v3, 0);
    if (!v4)
    {
      *(void *)a1 = v3;
      *(unsigned char *)(a1 + 8) = 0;
      outlined copy of Result<_DataTable, Error>(v3, 0);
    }
  }
}

void MLUntypedColumn.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *(void **)v3;
  char v8 = *(unsigned char *)(v3 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = 7106403;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = v7;
  *(unsigned char *)(inited + 56) = v8;
  outlined copy of Result<_DataTable, Error>(v7, v8);
  uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v10, (uint64_t)&v14);
  uint64_t v11 = v14;
  char v12 = v15;
  MLDataTable.subscript.getter(&v14, a1, a2);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  uint64_t v13 = v14;
  LOBYTE(a2) = v15;
  MLDataTable.subscript.getter(7106403, (void *)0xE300000000000000, a3);
  outlined consume of Result<_DataTable, Error>(v13, a2);
}

void Array<A>.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_23_26();
  a23 = v24;
  a24 = v25;
  uint64_t v27 = *(void **)v26;
  char v38 = *(unsigned char *)(v26 + 8);
  if (v38)
  {
LABEL_10:
    outlined consume of Result<_DataTable, Error>(v27, v38);
    OUTLINED_FUNCTION_24_35();
    return;
  }
  outlined copy of Result<_DataTable, Error>(v27, 0);
  uint64_t v28 = CMLColumn.size.getter();
  OUTLINED_FUNCTION_21_13();
  if ((v28 & 0x8000000000000000) == 0)
  {
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v30 = MEMORY[0x263F8EE78];
      do
      {
        outlined copy of Result<_DataTable, Error>(v27, 0);
        _UntypedColumn.valueAtIndex(index:)(v29, (uint64_t)&a10);
        OUTLINED_FUNCTION_21_13();
        uint64_t v31 = a10;
        uint64_t v32 = a11;
        char v33 = a12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v30 = v36;
        }
        unint64_t v34 = *(void *)(v30 + 16);
        if (v34 >= *(void *)(v30 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v30 = v37;
        }
        ++v29;
        *(void *)(v30 + 16) = v34 + 1;
        uint64_t v35 = v30 + 24 * v34;
        *(void *)(v35 + 32) = v31;
        *(void *)(v35 + 40) = v32;
        *(unsigned char *)(v35 + 48) = v33;
      }
      while (v28 != v29);
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t MLUntypedColumn.init(doubles:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 1);
}

void MLUntypedColumn.column<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)v3;
  char v7 = *(unsigned char *)(v3 + 8);
  if (v7)
  {
    uint64_t v8 = 6;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v3, 0);
    _UntypedColumn.type.getter(&v11);
    OUTLINED_FUNCTION_41_19();
    uint64_t v8 = v11;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v11, a2, a3);
  if (v8 == v11)
  {
    id v9 = v6;
    char v10 = v7;
    MLDataColumn.init(from:)((uint64_t)&v9, (uint64_t)&v11);
    outlined copy of Result<_DataTable, Error>(v6, v7);
  }
  OUTLINED_FUNCTION_63_6();
}

BOOL MLUntypedColumn.isEmpty.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 1;
  }
  outlined copy of Result<_DataTable, Error>(*(id *)v0, 0);
  uint64_t v2 = CMLColumn.size.getter();
  OUTLINED_FUNCTION_21_13();
  return v2 < 1;
}

uint64_t closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _UntypedColumn();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  uint64_t result = _UntypedColumn.__allocating_init<A>(_:)((uint64_t)v11, a2);
  if (v4) {
    *a3 = v4;
  }
  else {
    *a4 = result;
  }
  return result;
}

uint64_t closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v17 = a6;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _UntypedColumn();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a2);
  uint64_t result = _UntypedColumn.__allocating_init<A>(_:)((uint64_t)v14, a2, a3, a4);
  if (v6) {
    *a5 = v6;
  }
  else {
    uint64_t *v17 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in MLUntypedColumn.init<A>(_:)(v2[5], v2[2], v2[3], v2[4], a1, a2);
}

{
  uint64_t v2;

  return closure #1 in MLUntypedColumn.init<A>(_:)(*(void *)(v2 + 32), *(void *)(v2 + 16), a1, a2);
}

uint64_t MLUntypedColumn.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for _UntypedColumn();
  uint64_t v6 = OUTLINED_FUNCTION_70();
  type metadata accessor for CMLColumn();
  uint64_t result = CMLColumn.__allocating_init(_:)(a1, a2);
  *(void *)(v6 + 16) = result;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for _UntypedColumn();
  OUTLINED_FUNCTION_70();
  uint64_t result = _UntypedColumn.init(_:)(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

void MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_23_26();
  a23 = v25;
  a24 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  char v36 = v35;
  uint64_t v38 = v37;
  id v39 = *(void **)v24;
  char v40 = *(unsigned char *)(v24 + 8);
  uint64_t v41 = (void *)swift_allocObject();
  v41[2] = v30;
  v41[3] = v28;
  v41[4] = v34;
  v41[5] = v32;
  if (v40)
  {
    a11 = (uint64_t)v39;
    outlined copy of Result<_DataTable, Error>(v39, 1);
    swift_retain();
    outlined copy of Result<_DataTable, Error>(v39, 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v42 = _getErrorEmbeddedNSError<A>(_:)();
    if (v42)
    {
      uint64_t v43 = v42;
      OUTLINED_FUNCTION_4_26();
    }
    else
    {
      uint64_t v43 = OUTLINED_FUNCTION_85();
      *uint64_t v44 = a11;
    }
    char v45 = 1;
    OUTLINED_FUNCTION_4_26();
    swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Result<_DataTable, Error>(v39, 0);
    closure #2 in MLUntypedColumn.map<A>(skipUndefined:_:)((uint64_t)partial apply for closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:), (uint64_t)v41, v36 & 1, v30, v28, &a11);
    outlined consume of Result<_DataTable, Error>(v39, 0);
    swift_release();
    char v45 = 0;
    uint64_t v43 = a11;
  }
  a11 = v43;
  a12 = v45;
  MLDataColumn.init(from:)((uint64_t)&a11, v38);
  OUTLINED_FUNCTION_24_35();
}

uint64_t closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_retain();
  MLDataValue.init(_:)(v14, (uint64_t)v23);
  char v15 = (void *)v23[0];
  uint64_t v16 = (void *)v23[1];
  char v17 = v24;
  v22(v23);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    type metadata accessor for CMLFeatureValue();
    uint64_t v18 = CMLFeatureValue.__allocating_init()();
    outlined consume of MLDataValue(v15, v16, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a4);
    uint64_t v18 = MLDataValueConvertible.featureValue.getter(a4, v21);
    outlined consume of MLDataValue(v15, v16, v17);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }
  return v18;
}

uint64_t closure #2 in MLUntypedColumn.map<A>(skipUndefined:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 8))(&v11, a4, a5);
  uint64_t result = _UntypedColumn.map(_:skipUndefined:outputType:)(a1, a2, a3, &v11);
  *a6 = result;
  return result;
}

#error "227280348: call analysis failed (funcsize=49)"

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed MLDataValue) -> (@out A)@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  a1();

  return __swift_storeEnumTagSinglePayload(a3, 0, 1, a2);
}

uint64_t MLUntypedColumn.mapMissing<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLUntypedColumn.map<A>(_:)(a1, a2, a3, a4, 0);
}

#error "22728041C: call analysis failed (funcsize=21)"

uint64_t MLUntypedColumn.dropMissing()()
{
  return MLUntypedColumn.dropMissing()(specialized handling<A, B>(_:_:));
}

void MLUntypedColumn.fillMissing(with:)()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    uint64_t v7 = *v0;
    OUTLINED_FUNCTION_30_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_25_29();
    }
    else
    {
      OUTLINED_FUNCTION_85();
      *char v5 = v7;
    }
    OUTLINED_FUNCTION_25_29();
    goto LABEL_9;
  }
  uint64_t v2 = swift_retain();
  uint64_t v4 = MLDataValue.featureValue.getter(v2, v3);
  if (specialized handling<A, B, C>(_:_:_:)(*(void *)(*(void *)(v1 + 16) + 16), *(void *)(v4 + 16)))
  {
    type metadata accessor for CMLColumn();
    uint64_t v6 = OUTLINED_FUNCTION_70();
    OUTLINED_FUNCTION_59_9(v6);
    *(void *)(OUTLINED_FUNCTION_70() + 16) = v6;
    swift_release();
    OUTLINED_FUNCTION_26_8();
LABEL_9:
    OUTLINED_FUNCTION_19_13();
    return;
  }
  __break(1u);
}

uint64_t MLUntypedColumn.prefix(_:)(uint64_t a1)
{
  return MLUntypedColumn.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

uint64_t MLUntypedColumn.suffix(_:)(uint64_t a1)
{
  return MLUntypedColumn.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

#error "2272806AC: call analysis failed (funcsize=78)"

#error "22728076C: call analysis failed (funcsize=56)"

uint64_t MLUntypedColumn.copy()()
{
  return MLUntypedColumn.dropMissing()(specialized handling<A, B>(_:_:));
}

#error "22728088C: call analysis failed (funcsize=56)"

uint64_t MLUntypedColumn.init(ints:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 0);
}

#error "227280950: call analysis failed (funcsize=64)"

uint64_t MLUntypedColumn.init(strings:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 2);
}

uint64_t MLUntypedColumn.init(sequences:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 4);
}

uint64_t MLUntypedColumn.init(dictionaries:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 5);
}

uint64_t MLUntypedColumn.init(multiArrays:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 9);
}

uint64_t MLUntypedColumn.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  OUTLINED_FUNCTION_0_15();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void **)v0;
  char v11 = *(unsigned char *)(v0 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2272CB4D0;
  *(void *)(v12 + 32) = 0x746E756F63;
  *(void *)(v12 + 40) = 0xE500000000000000;
  if (v11)
  {
    uint64_t v13 = -1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v10, 0);
    uint64_t v13 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v10, 0);
  }
  uint64_t v14 = MEMORY[0x263F8D6C8];
  *(void *)(v12 + 48) = v13;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = 1701869940;
  *(void *)(v12 + 88) = 0xE400000000000000;
  *(void *)(v12 + 120) = &type metadata for MLDataValue.ValueType;
  if (v11)
  {
    *(unsigned char *)(v12 + 96) = 6;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v10, 0);
    _UntypedColumn.type.getter(&v20);
    *(unsigned char *)(v12 + 96) = v20;
    outlined consume of Result<_DataTable, Error>(v10, 0);
  }
  uint64_t v21 = &type metadata for MLUntypedColumn;
  uint64_t v15 = *MEMORY[0x263F8E7F0];
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  OUTLINED_FUNCTION_8();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 104))(v9, v15, v16);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v16);
  (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F8E828], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLUntypedColumn.Type);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t MLUntypedColumn.description.getter()
{
  if (*(unsigned char *)(v0 + 8))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    return 0;
  }
  else
  {
    swift_retain();
    uint64_t v1 = _UntypedColumn.description.getter();
    OUTLINED_FUNCTION_26_8();
  }
  return v1;
}

unint64_t MLUntypedColumn.playgroundDescription.getter@<X0>(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    uint64_t v4 = 0xE000000000000000;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v1, 0);
    uint64_t v3 = _UntypedColumn.description.getter();
    uint64_t v4 = v5;
    OUTLINED_FUNCTION_26_8();
  }
  id v6 = objc_allocWithZone(MEMORY[0x263F086A0]);
  id v7 = @nonobjc NSAttributedString.init(string:attributes:)(v3, v4, 0);
  unint64_t result = type metadata accessor for NSAttributedString();
  a1[3] = result;
  *a1 = v7;
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_64_7();
  if (v3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_11_24();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_36_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    id v6 = (void *)OUTLINED_FUNCTION_28_0();
    id v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 16);
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_66_5();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    char v11 = OUTLINED_FUNCTION_32_28();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  void (*v0)(uint64_t);
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t *v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  OUTLINED_FUNCTION_8_47();
  if (v3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_11_24();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(v6);
    id v7 = (const void *)OUTLINED_FUNCTION_28_0();
    uint64_t v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_35_24(v8 - 32);
  }
  if (v1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_53_15();
    v0(v9);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_65_6();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t *v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8_47();
  if (v4)
  {
    OUTLINED_FUNCTION_7_29();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_11_24();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(v7);
    uint64_t v8 = (const void *)OUTLINED_FUNCTION_28_0();
    uint64_t v9 = _swift_stdlib_malloc_size(v8);
    OUTLINED_FUNCTION_35_24(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = OUTLINED_FUNCTION_53_15();
    v1(v10);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    char v11 = OUTLINED_FUNCTION_33_25();
    v0(v11);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(unint64_t, uint64_t, unint64_t);
  void (*v3)(unint64_t, uint64_t, unint64_t);
  void (*v4)(void);
  void (*v5)(void);
  uint64_t (*v6)(void);
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  size_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  OUTLINED_FUNCTION_23_26();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  id v7 = v6;
  uint64_t v9 = v8;
  char v11 = v10;
  if (v12)
  {
    OUTLINED_FUNCTION_7_29();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_11_24();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    uint64_t v13 = v0;
  }
  uint64_t v16 = *(void *)(v9 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(v1);
  uint64_t v18 = v7(0);
  OUTLINED_FUNCTION_1(v18);
  char v20 = *(void *)(v19 + 72);
  uint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (void *)swift_allocObject();
  char v24 = _swift_stdlib_malloc_size(v23);
  if (!v20 || (v24 - v22 == 0x8000000000000000 ? (uint64_t v25 = v20 == -1) : (uint64_t v25 = 0), v25))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_18();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  void v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(void *)(v7(0) - 8);
  uint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = (unint64_t)v23 + v27;
  if (v11)
  {
    v3(v9 + v27, v16, v28);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v16, v28, v9, v5);
  }
  OUTLINED_FUNCTION_24_35();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_64_7();
  if (v3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_11_24();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_36_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Layer>);
    id v6 = (void *)swift_allocObject();
    id v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 40);
  }
  if (v0)
  {
    uint64_t v8 = OUTLINED_FUNCTION_66_5();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_32_28();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_64_7();
  if (v3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_11_24();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_36_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlobMetadata>);
    id v6 = (void *)swift_allocObject();
    id v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 64);
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_66_5();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    char v11 = OUTLINED_FUNCTION_32_28();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(unint64_t, uint64_t, char *);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  size_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  OUTLINED_FUNCTION_23_26();
  OUTLINED_FUNCTION_8_47();
  if (v6)
  {
    OUTLINED_FUNCTION_7_29();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_11_24();
      if (v8)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    id v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    char v11 = *(void *)(v0 + 16);
  }
  else {
    char v11 = v7;
  }
  if (!v11)
  {
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(v5);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(v1);
  OUTLINED_FUNCTION_1(v12);
  uint64_t v14 = *(void *)(v13 + 72);
  uint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v14 || (v18 - v16 == 0x8000000000000000 ? (uint64_t v19 = v14 == -1) : (uint64_t v19 = 0), v19))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_18();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v17[2] = v10;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v14);
LABEL_18:
  char v20 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(v1) - 8);
  if (v3)
  {
    uint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v2(v0 + v21, v10, (char *)v17 + v21);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    uint64_t v22 = OUTLINED_FUNCTION_65_6();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v22, v23, v24, v25, v26);
  }
  OUTLINED_FUNCTION_24_35();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_8_47();
  if (v5)
  {
    OUTLINED_FUNCTION_7_29();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_11_24();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    uint64_t v9 = (void *)swift_allocObject();
    uint64_t v10 = _swift_stdlib_malloc_size(v9);
    v9[2] = v3;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 24);
  }
  if (v2)
  {
    char v11 = OUTLINED_FUNCTION_53_15();
    v1(v11);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_33_25();
    v0(v12);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t *v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8_47();
  if (v4)
  {
    OUTLINED_FUNCTION_7_29();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_11_24();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(v7);
    uint64_t v8 = (const void *)OUTLINED_FUNCTION_28_0();
    uint64_t v9 = _swift_stdlib_malloc_size(v8);
    OUTLINED_FUNCTION_35_24(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = OUTLINED_FUNCTION_53_15();
    v1(v10);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    char v11 = OUTLINED_FUNCTION_33_25();
    v0(v11);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t *v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8_47();
  if (v4)
  {
    OUTLINED_FUNCTION_7_29();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_11_24();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_20_20();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(v7);
    uint64_t v8 = (const void *)OUTLINED_FUNCTION_28_0();
    uint64_t v9 = _swift_stdlib_malloc_size(v8);
    OUTLINED_FUNCTION_35_24(v9 - 32);
  }
  if (v2)
  {
    uint64_t v10 = OUTLINED_FUNCTION_53_15();
    v1(v10);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    char v11 = OUTLINED_FUNCTION_33_25();
    v0(v11);
  }
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_64_7();
  if (v3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_11_24();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  OUTLINED_FUNCTION_36_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    id v6 = (void *)swift_allocObject();
    id v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * v7 - 64;
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_66_5();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    char v11 = OUTLINED_FUNCTION_32_28();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

uint64_t sub_227281000()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed MLDataValue) -> (@out A)@<X0>(uint64_t a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed MLDataValue) -> (@out A)(*(void (**)(void))(v1 + 32), *(void *)(v1 + 16), a1);
}

ValueMetadata *type metadata accessor for MLUntypedColumn()
{
  return &type metadata for MLUntypedColumn;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_7_29();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_11_24();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_31();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v14 = (char *)OUTLINED_FUNCTION_28_0();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    uint64_t v14 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v16 = v14 + 32;
  if (a1)
  {
    a6(a4 + 32, v12, v16);
    OUTLINED_FUNCTION_12_39();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v16, a4);
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (windowKeypoints: MLMultiArray, range: Range<Int>));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (predicted: String, label: String));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
    goto LABEL_11;
  }
  unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v6 = &__dst[8 * v4];
  if (v5 >= v6 || &v5[8 * v4] <= __dst)
  {
    memcpy(__dst, v5, 8 * v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  uint64_t result = (char *)OUTLINED_FUNCTION_3_40();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + (a1 << 6) + 32);
    unint64_t v6 = &__dst[64 * v4];
    if (v5 >= v6 || &v5[64 * v4] <= __dst)
    {
      memcpy(__dst, v5, v4 << 6);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
    goto LABEL_11;
  }
  a5(0);
  OUTLINED_FUNCTION_57_5();
  OUTLINED_FUNCTION_49_13();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_40();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v5;
  if (v6 >= v7 || v6 + 8 * v5 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_40();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  char v8;
  BOOL v9;
  uint64_t result;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_18();
    OUTLINED_FUNCTION_4_38();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  OUTLINED_FUNCTION_57_5();
  OUTLINED_FUNCTION_49_13();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_40();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1)
{
  return closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(a1, *(void (**)(void *))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t OUTLINED_FUNCTION_5_60()
{
  uint64_t v1 = *(void *)(v0[2] + 16);
  outlined copy of Result<_DataTable, Error>(v0, 0);
  return v1;
}

void OUTLINED_FUNCTION_6_49()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_7_57()
{
  *(void *)uint64_t v0 = v1;
  *(unsigned char *)(v0 + 8) = 0;
  return v1;
}

uint64_t OUTLINED_FUNCTION_12_39()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_13_47()
{
  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_36()
{
  uint64_t v2 = *(void *)(v1[2] + 16);
  uint64_t v3 = *(void *)(v0[2] + 16);
  outlined copy of Result<_DataTable, Error>(v0, 0);
  outlined copy of Result<_DataTable, Error>(v1, 0);
  return specialized handling<A, B, C>(_:_:_:)(v2, v3);
}

void OUTLINED_FUNCTION_15_37()
{
  *(void *)uint64_t v0 = 0;
  *(unsigned char *)(v0 + 8) = -1;
}

void OUTLINED_FUNCTION_17_36()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v1, 0);
}

uint64_t OUTLINED_FUNCTION_30_29()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_32_28()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_33_25()
{
  return 0;
}

void OUTLINED_FUNCTION_34_22()
{
  outlined consume of Result<_DataTable, Error>(v1, 0);
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

void OUTLINED_FUNCTION_35_24(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

void OUTLINED_FUNCTION_38_21(void *a1)
{
}

void OUTLINED_FUNCTION_40_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, 0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

void OUTLINED_FUNCTION_41_19()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_44_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_53_15()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_56_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57_13()
{
  outlined consume of MLDataValue(v1, v2, v3);
  return v0;
}

uint64_t OUTLINED_FUNCTION_59_9(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return type metadata accessor for _UntypedColumn();
}

void OUTLINED_FUNCTION_63_6()
{
  *(void *)uint64_t v0 = v1;
  *(unsigned char *)(v0 + 8) = v2;
}

uint64_t OUTLINED_FUNCTION_65_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_66_5()
{
  return v0 + 32;
}

uint64_t specialized MLTrainingSession.resume(job:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v5;
  void v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v15 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v12, a5, (uint64_t)v14);
  _s10Foundation3URLVSgWOhTm_0((uint64_t)v12, &demangling cache variable for type metadata for TaskPriority?);
  return v15;
}

uint64_t specialized closure #1 in MLTrainingSession.resume(job:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  void *v7;
  void *v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v7[2] = a6;
  v7[3] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  BOOL v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *BOOL v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

uint64_t specialized closure #1 in MLTrainingSession.resume(job:completion:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 40) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *char v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 40) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_11();
  (*(void (**)(void, void))(v0 + 16))(0, 0);
  OUTLINED_FUNCTION_12();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, uint64_t);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = *(void (**)(void *, uint64_t))(v0 + 16);
  char v3 = v1;
  v2(v1, 1);

  OUTLINED_FUNCTION_12();
  return v4();
}

uint64_t specialized MLTrainingSession.resumeAsync(job:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.resumeAsync(job:), 0, 0);
}

uint64_t specialized MLTrainingSession.resumeAsync(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v14 = *(void *)(v12 + 56);
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_30_30();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
  OUTLINED_FUNCTION_133_1(v15);
  OUTLINED_FUNCTION_21_41();
  if (v16)
  {
    _s10Foundation3URLVSgWOhTm_0(*(void *)(v12 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v17 = OUTLINED_FUNCTION_24_36(direct field offset for MLTrainingSession.delegate);
    v18(v17);
    if (v14)
    {
LABEL_7:
      OUTLINED_FUNCTION_219();
      swift_task_dealloc();
      OUTLINED_FUNCTION_59_4();
      OUTLINED_FUNCTION_38_6();
      return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
    }
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_241();
    outlined init with take of MLCheckpoint(v19, v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_34_23(direct field offset for MLTrainingSession.delegate);
    OUTLINED_FUNCTION_106_1();
    v13();
    uint64_t v21 = *(void *)(v12 + 72);
    if (v14)
    {
      _s8CreateML12MLCheckpointVWOhTm_1(*(void *)(v12 + 72), (void (*)(void))type metadata accessor for MLCheckpoint);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_239();
    OUTLINED_FUNCTION_82_4();
    _s8CreateML12MLCheckpointVWOhTm_1(v21, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_237();
  }
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)OUTLINED_FUNCTION_78_3(v31);
  *uint64_t v32 = v33;
  v32[1] = specialized MLTrainingSession.resumeAsync(job:);
  OUTLINED_FUNCTION_4_67();
  OUTLINED_FUNCTION_38_6();
  return specialized MLTrainingSession.execute(job:)(v34);
}

uint64_t specialized MLTrainingSession.resumeAsync(job:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_235();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_235();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  if (objc_msgSend(*(id *)(*(void *)(v0 + 40) + direct field offset for MLJob.progress), sel_isCancelled))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(unsigned char *)(v1 + 48) = 4;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
  }
  else
  {
    OUTLINED_FUNCTION_219();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
  }
  return v2();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    _s10Foundation3URLVSgWOhTm_0((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v11 = v10;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  if (v11 | v9)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v9;
    v13[3] = v11;
  }
  return swift_task_create();
}

uint64_t specialized MLTrainingSession.execute(job:)(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.execute(job:), 0, 0);
}

uint64_t specialized MLTrainingSession.execute(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_94_2();
  uint64_t v15 = direct field offset for MLJob.progress;
  v13[7] = *(void *)(v14 + 112);
  v13[8] = v15;
  v13[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_90_2();
    switch(v16)
    {
      case 1:
        uint64_t v17 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v17 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v17);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_170_0(v13[8]) & 1) == 0)
        {
          uint64_t v12 = v13[6];
          OUTLINED_FUNCTION_169_0();
          switch(v18)
          {
            case 1:
              uint64_t v22 = swift_task_alloc();
              uint64_t v23 = (void *)OUTLINED_FUNCTION_78_3(v22);
              *uint64_t v23 = v24;
              v23[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v25);
            case 2:
              uint64_t v28 = swift_task_alloc();
              uint64_t v29 = (void *)OUTLINED_FUNCTION_93_2(v28);
              *uint64_t v29 = v30;
              v29[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v31);
            case 3:
              uint64_t v33 = swift_task_alloc();
              uint64_t v34 = (void *)OUTLINED_FUNCTION_92_2(v33);
              void *v34 = v35;
              v34[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v36);
            case 4:
              continue;
            default:
              uint64_t v19 = v12 + v13[9];
              OUTLINED_FUNCTION_89_2();
              uint64_t v20 = OUTLINED_FUNCTION_18_30();
              v21(v20);
              if (!v19) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_94_2();
  uint64_t v15 = direct field offset for MLJob.progress;
  v13[7] = *(void *)(v14 + 112);
  v13[8] = v15;
  v13[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_90_2();
    switch(v16)
    {
      case 1:
        uint64_t v17 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v17 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v17);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_170_0(v13[8]) & 1) == 0)
        {
          uint64_t v12 = v13[6];
          OUTLINED_FUNCTION_169_0();
          switch(v18)
          {
            case 1:
              uint64_t v22 = swift_task_alloc();
              uint64_t v23 = (void *)OUTLINED_FUNCTION_78_3(v22);
              *uint64_t v23 = v24;
              v23[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v25);
            case 2:
              uint64_t v28 = swift_task_alloc();
              uint64_t v29 = (void *)OUTLINED_FUNCTION_93_2(v28);
              *uint64_t v29 = v30;
              v29[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v31);
            case 3:
              uint64_t v33 = swift_task_alloc();
              uint64_t v34 = (void *)OUTLINED_FUNCTION_92_2(v33);
              void *v34 = v35;
              v34[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v36);
            case 4:
              continue;
            default:
              uint64_t v19 = v12 + v13[9];
              OUTLINED_FUNCTION_89_2();
              uint64_t v20 = OUTLINED_FUNCTION_18_30();
              v21(v20);
              if (!v19) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_94_2();
  uint64_t v15 = direct field offset for MLJob.progress;
  v13[7] = *(void *)(v14 + 112);
  v13[8] = v15;
  v13[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_90_2();
    switch(v16)
    {
      case 1:
        uint64_t v17 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v17 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v17);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_170_0(v13[8]) & 1) == 0)
        {
          uint64_t v12 = v13[6];
          OUTLINED_FUNCTION_169_0();
          switch(v18)
          {
            case 1:
              uint64_t v22 = swift_task_alloc();
              uint64_t v23 = (void *)OUTLINED_FUNCTION_78_3(v22);
              *uint64_t v23 = v24;
              v23[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v25);
            case 2:
              uint64_t v28 = swift_task_alloc();
              uint64_t v29 = (void *)OUTLINED_FUNCTION_93_2(v28);
              *uint64_t v29 = v30;
              v29[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v31);
            case 3:
              uint64_t v33 = swift_task_alloc();
              uint64_t v34 = (void *)OUTLINED_FUNCTION_92_2(v33);
              void *v34 = v35;
              v34[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v36);
            case 4:
              continue;
            default:
              uint64_t v19 = v12 + v13[9];
              OUTLINED_FUNCTION_89_2();
              uint64_t v20 = OUTLINED_FUNCTION_18_30();
              v21(v20);
              if (!v19) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_94_2();
  uint64_t v15 = direct field offset for MLJob.progress;
  v13[7] = *(void *)(v14 + 112);
  v13[8] = v15;
  v13[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_90_2();
    switch(v16)
    {
      case 1:
        uint64_t v17 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v17 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v17);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_170_0(v13[8]) & 1) == 0)
        {
          uint64_t v12 = v13[6];
          OUTLINED_FUNCTION_169_0();
          switch(v18)
          {
            case 1:
              uint64_t v22 = swift_task_alloc();
              uint64_t v23 = (void *)OUTLINED_FUNCTION_78_3(v22);
              *uint64_t v23 = v24;
              v23[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v25);
            case 2:
              uint64_t v28 = swift_task_alloc();
              uint64_t v29 = (void *)OUTLINED_FUNCTION_93_2(v28);
              *uint64_t v29 = v30;
              v29[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v31);
            case 3:
              uint64_t v33 = swift_task_alloc();
              uint64_t v34 = (void *)OUTLINED_FUNCTION_92_2(v33);
              void *v34 = v35;
              v34[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v36);
            case 4:
              continue;
            default:
              uint64_t v19 = v12 + v13[9];
              OUTLINED_FUNCTION_89_2();
              uint64_t v20 = OUTLINED_FUNCTION_18_30();
              v21(v20);
              if (!v19) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_94_2();
  uint64_t v15 = direct field offset for MLJob.progress;
  v13[7] = *(void *)(v14 + 112);
  v13[8] = v15;
  v13[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_90_2();
    switch(v16)
    {
      case 1:
        uint64_t v17 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v17 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v17);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_170_0(v13[8]) & 1) == 0)
        {
          uint64_t v12 = v13[6];
          OUTLINED_FUNCTION_169_0();
          switch(v18)
          {
            case 1:
              uint64_t v22 = swift_task_alloc();
              uint64_t v23 = (void *)OUTLINED_FUNCTION_78_3(v22);
              *uint64_t v23 = v24;
              v23[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v25);
            case 2:
              uint64_t v28 = swift_task_alloc();
              uint64_t v29 = (void *)OUTLINED_FUNCTION_93_2(v28);
              *uint64_t v29 = v30;
              v29[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v31);
            case 3:
              uint64_t v33 = swift_task_alloc();
              uint64_t v34 = (void *)OUTLINED_FUNCTION_92_2(v33);
              void *v34 = v35;
              v34[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v36);
            case 4:
              continue;
            default:
              uint64_t v19 = v12 + v13[9];
              OUTLINED_FUNCTION_89_2();
              uint64_t v20 = OUTLINED_FUNCTION_18_30();
              v21(v20);
              if (!v19) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_91_3();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && (OUTLINED_FUNCTION_58_9(*(void *)(v13 + 64)) & 1) == 0)
        {
          uint64_t v12 = *(void *)(v13 + 48);
          OUTLINED_FUNCTION_57_14();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_213();
  *(void *)(v13 + 56) = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_206(direct field offset for MLJob.progress);
  OUTLINED_FUNCTION_229();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_90_2();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_171_0(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_228();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_170_0(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_144_0();
          switch(v16)
          {
            case 1:
              uint64_t v20 = swift_task_alloc();
              uint64_t v21 = (void *)OUTLINED_FUNCTION_78_3(v20);
              *uint64_t v21 = v22;
              v21[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.extractFeatures(job:)(v23);
            case 2:
              uint64_t v26 = swift_task_alloc();
              uint64_t v27 = (void *)OUTLINED_FUNCTION_93_2(v26);
              *uint64_t v27 = v28;
              v27[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.train(job:)(v29);
            case 3:
              uint64_t v31 = swift_task_alloc();
              uint64_t v32 = (void *)OUTLINED_FUNCTION_92_2(v31);
              *uint64_t v32 = v33;
              v32[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_20_41();
              return specialized MLTrainingSession.evaluate(job:)(v34);
            case 4:
              continue;
            default:
              uint64_t v17 = v12 + *(void *)(v13 + 56);
              OUTLINED_FUNCTION_89_2();
              uint64_t v18 = OUTLINED_FUNCTION_18_30();
              v19(v18);
              if (!v17) {
                continue;
              }
              OUTLINED_FUNCTION_59_4();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_20_41();
        return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_231();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_232();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_121_0();
  while (2)
  {
    OUTLINED_FUNCTION_41_20();
    OUTLINED_FUNCTION_59_10();
    switch(v14)
    {
      case 1:
        uint64_t v15 = OUTLINED_FUNCTION_27_29();
        goto LABEL_6;
      case 2:
        OUTLINED_FUNCTION_155();
        goto LABEL_7;
      case 3:
        uint64_t v15 = OUTLINED_FUNCTION_26_23();
LABEL_6:
        OUTLINED_FUNCTION_25_34(v15);
        goto LABEL_7;
      case 4:
        OUTLINED_FUNCTION_36_23();
        goto LABEL_22;
      default:
LABEL_7:
        OUTLINED_FUNCTION_3_73();
        OUTLINED_FUNCTION_122_1();
        if ((v12 & 1) == 0 && !OUTLINED_FUNCTION_58_9(*(void *)(v13 + 72)))
        {
          OUTLINED_FUNCTION_44_20();
          switch(v16)
          {
            case 1:
              uint64_t v19 = swift_task_alloc();
              uint64_t v20 = (void *)OUTLINED_FUNCTION_78_3(v19);
              *uint64_t v20 = v21;
              v20[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.extractFeatures(job:)(v22);
            case 2:
              uint64_t v25 = swift_task_alloc();
              uint64_t v26 = (void *)OUTLINED_FUNCTION_93_2(v25);
              *uint64_t v26 = v27;
              v26[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.train(job:)(v28);
            case 3:
              uint64_t v30 = swift_task_alloc();
              uint64_t v31 = (void *)OUTLINED_FUNCTION_92_2(v30);
              *uint64_t v31 = v32;
              v31[1] = specialized MLTrainingSession.execute(job:);
              OUTLINED_FUNCTION_4_67();
              OUTLINED_FUNCTION_38_6();
              return specialized MLTrainingSession.evaluate(job:)(v33);
            case 4:
              continue;
            default:
              OUTLINED_FUNCTION_56_17();
              uint64_t v17 = OUTLINED_FUNCTION_2_70();
              v18(v17);
              OUTLINED_FUNCTION_124_1();
              if (!v12) {
                continue;
              }
              OUTLINED_FUNCTION_30();
              goto LABEL_23;
          }
        }
LABEL_22:
        OUTLINED_FUNCTION_12();
LABEL_23:
        OUTLINED_FUNCTION_38_6();
        return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12);
    }
  }
}

uint64_t specialized MLTrainingSession.execute(job:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_30();
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

id MLJob.isCanceled.getter()
{
  return objc_msgSend(*(id *)(v0 + direct field offset for MLJob.progress), sel_isCancelled);
}

uint64_t specialized MLTrainingSession.transition(to:)(char a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(v2 + direct field offset for MLTrainingSession.delegate + 24);
  uint64_t v6 = *(void *)(v2 + direct field offset for MLTrainingSession.delegate + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + direct field offset for MLTrainingSession.delegate), v5);
  uint64_t v7 = v2 + *(void *)(*(void *)v2 + 112);
  swift_beginAccess();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  char v12 = *(unsigned char *)(v7 + *(int *)(v8 + 28));
  char v11 = a1;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v6 + 80))(&v12, &v11, v5, v6);
  uint64_t v10 = *(int *)(v8 + 28);
  if (result)
  {
    *(unsigned char *)(v7 + v10) = a1;
    *(void *)(v7 + *(int *)(v8 + 32)) = 0;
  }
  else
  {
    *(unsigned char *)(v7 + v10) = 4;
  }
  return result;
}

uint64_t specialized MLTrainingSession.extractFeatures(job:)(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.extractFeatures(job:), 0, 0);
}

uint64_t specialized MLTrainingSession.extractFeatures(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x227292BB8);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 152);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v67 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_254();
          _s8CreateML12MLCheckpointVWOhTm_1(v67, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v28 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v28, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_260();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_286(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_141_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_10_40();
    uint64_t v68 = (char *)v55 + *v55;
    uint64_t v69 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_158_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
  OUTLINED_FUNCTION_50_15(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x2272936D8);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 152);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v67 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_254();
          _s8CreateML12MLCheckpointVWOhTm_1(v67, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v28 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v28, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_260();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_286(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_141_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_10_40();
    uint64_t v68 = (char *)v55 + *v55;
    uint64_t v69 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_158_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
  OUTLINED_FUNCTION_50_15(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x2272941F8);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 152);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v67 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_254();
          _s8CreateML12MLCheckpointVWOhTm_1(v67, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v28 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v28, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_260();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_286(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_141_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_10_40();
    uint64_t v68 = (char *)v55 + *v55;
    uint64_t v69 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_158_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x227294D18);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 152);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v67 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_254();
          _s8CreateML12MLCheckpointVWOhTm_1(v67, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v28 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v28, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_260();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_286(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_141_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_10_40();
    uint64_t v68 = (char *)v55 + *v55;
    uint64_t v69 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_158_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_50_15(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x227295838);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 152);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v67 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_254();
          _s8CreateML12MLCheckpointVWOhTm_1(v67, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v28 = *(void *)(v17 + 152);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v28, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_260();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_286(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_141_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_10_40();
    uint64_t v68 = (char *)v55 + *v55;
    uint64_t v69 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_158_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x22729636CLL);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x227296E90);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272979B4);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272984D8);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x227298FFCLL);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x227299B20);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x22729A644);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x22729B168);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 176) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
  OUTLINED_FUNCTION_50_15(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    while (2)
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x22729BC8CLL);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 88);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          OUTLINED_FUNCTION_207();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          break;
        case 2:
          OUTLINED_FUNCTION_100_2();
          goto LABEL_9;
        case 3:
          OUTLINED_FUNCTION_25_34(0x61756C617665);
          goto LABEL_9;
        case 4:
          OUTLINED_FUNCTION_67_7();
          goto LABEL_9;
        default:
LABEL_9:
          uint64_t v20 = *(void *)(v17 + 88);
          OUTLINED_FUNCTION_47_20();
          OUTLINED_FUNCTION_153();
          _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
          if ((v19 & 1) == 0 && v16) {
            continue;
          }
          OUTLINED_FUNCTION_152();
          break;
      }
      break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_95_3(v29);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), v30, v31, v32);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = OUTLINED_FUNCTION_73_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v33, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v34, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v35 = *(void *)(v17 + 64);
  uint64_t v36 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 192) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v35 + v36), *(void *)(v35 + v36 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 200) = v37();
  *(unsigned char *)(v17 + 264) = v38;
  unint64_t v39 = OUTLINED_FUNCTION_61_11();
  OUTLINED_FUNCTION_256(v39);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_285(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_80_5();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 64);
    *(void *)(v17 + 224) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 232) = v20;
    OUTLINED_FUNCTION_14_37((void *)(v54 + *(void *)(v17 + 192)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_158_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.extractFeatures(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

uint64_t specialized MLTrainingSession.extractFeatures(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_215();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_215();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_215();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_215();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_215();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_2();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_7();
  *uint64_t v14 = v13;
  *uint64_t v14 = *v11;
  OUTLINED_FUNCTION_181(v15, v16);
  if (v10)
  {
    OUTLINED_FUNCTION_147_1();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_29();
    return MEMORY[0x270FA2498](v26, v27, v28);
  }
}

#error "227293000: call analysis failed (funcsize=259)"

#error "227293B20: call analysis failed (funcsize=259)"

#error "227294640: call analysis failed (funcsize=259)"

#error "227295160: call analysis failed (funcsize=259)"

#error "227295C80: call analysis failed (funcsize=259)"

#error "2272967AC: call analysis failed (funcsize=255)"

#error "2272972D0: call analysis failed (funcsize=255)"

#error "227297DF4: call analysis failed (funcsize=255)"

#error "227298918: call analysis failed (funcsize=255)"

#error "22729943C: call analysis failed (funcsize=255)"

#error "227299F60: call analysis failed (funcsize=255)"

#error "22729AA84: call analysis failed (funcsize=255)"

#error "22729B5A8: call analysis failed (funcsize=255)"

#error "22729C0CC: call analysis failed (funcsize=255)"

uint64_t specialized MLTrainingSession.train(job:)(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLTrainingSession.train(job:), 0, 0);
}

uint64_t specialized MLTrainingSession.train(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x22729C804);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 216);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v28 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_310();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v28 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v28);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v29 = *(void *)(v17 + 216);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v29, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_275(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_117_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_9_48();
    uint64_t v67 = (char *)v55 + *v55;
    uint64_t v68 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_160_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v67, v68, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
  OUTLINED_FUNCTION_49_14(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x22729D470);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 216);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v28 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_310();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v28 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v28);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v29 = *(void *)(v17 + 216);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v29, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_275(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_117_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_9_48();
    uint64_t v67 = (char *)v55 + *v55;
    uint64_t v68 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_160_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v67, v68, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
  OUTLINED_FUNCTION_49_14(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x22729E0DCLL);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 216);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v28 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_310();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v28 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v28);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v29 = *(void *)(v17 + 216);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v29, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_275(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_117_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_9_48();
    uint64_t v67 = (char *)v55 + *v55;
    uint64_t v68 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_160_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v67, v68, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x22729ED48);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 216);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v28 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_310();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v28 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v28);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v29 = *(void *)(v17 + 216);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v29, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_275(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_117_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_9_48();
    uint64_t v67 = (char *)v55 + *v55;
    uint64_t v68 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_160_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v67, v68, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v20 + 112);
  OUTLINED_FUNCTION_30_30();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_49_14(v21);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v23 ^ v24 | v22))
      {
        __break(1u);
        JUMPOUT(0x22729F9B4);
      }
      --v16;
      uint64_t v25 = *(void *)(v17 + 216);
      uint64_t v26 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v26, v25, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v27)
      {
        case 1:
          uint64_t v28 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_310();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v28 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v28);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v29 = *(void *)(v17 + 216);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v29, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v22)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_119_1(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_275(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_117_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_9_48();
    uint64_t v67 = (char *)v55 + *v55;
    uint64_t v68 = v54;
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)OUTLINED_FUNCTION_160_0(v56);
    *uint64_t v57 = v58;
    v57[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v63(v59, v60, v61, v62, v63, v64, v65, v66, a9, v67, v68, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A0638);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A126CLL);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A1EA0);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A2AD4);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A3708);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A433CLL);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A4F70);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A5BA4);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_94_2();
  *(void *)(v17 + 232) = *(void *)(v21 + 112);
  OUTLINED_FUNCTION_30_30();
  char v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
  OUTLINED_FUNCTION_49_14(v22);
  if (v16)
  {
    a10 = v18;
    OUTLINED_FUNCTION_38_22();
    do
    {
      OUTLINED_FUNCTION_156_0();
      if (!(v24 ^ v25 | v23))
      {
        __break(1u);
        JUMPOUT(0x2272A67D8);
      }
      --v16;
      uint64_t v26 = *(void *)(v17 + 136);
      uint64_t v27 = OUTLINED_FUNCTION_155_0();
      _s8CreateML12MLCheckpointVWOcTm_0(v27, v26, (void (*)(void))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_154_0();
      switch(v28)
      {
        case 1:
          uint64_t v29 = OUTLINED_FUNCTION_27_29();
          goto LABEL_8;
        case 2:
          OUTLINED_FUNCTION_280();
          _s8CreateML12MLCheckpointVWOhTm_1(0xEB0000000064657ALL, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_164_0();
          goto LABEL_14;
        case 3:
          uint64_t v29 = OUTLINED_FUNCTION_26_23();
LABEL_8:
          OUTLINED_FUNCTION_25_34(v29);
          break;
        case 4:
          OUTLINED_FUNCTION_65_7();
          break;
        default:
          break;
      }
      uint64_t v20 = *(void *)(v17 + 136);
      OUTLINED_FUNCTION_68_6();
      OUTLINED_FUNCTION_153();
      _s8CreateML12MLCheckpointVWOhTm_1(v20, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    while ((v19 & 1) == 0 && v16);
    OUTLINED_FUNCTION_152();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
LABEL_14:
  uint64_t v30 = OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_95_3(v30);
  OUTLINED_FUNCTION_39_22((void *(*)(void *__return_ptr, uint64_t *))closure #1 in BidirectionalCollection.last(where:)specialized partial apply, v31, v32, v33);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v34 = OUTLINED_FUNCTION_74_3();
  if (v23)
  {
    _s10Foundation3URLVSgWOhTm_0(v34, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v20 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_151_0();
    _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
  }
  uint64_t v36 = *(void *)(v17 + 88);
  uint64_t v37 = direct field offset for MLTrainingSession.delegate;
  *(void *)(v17 + 248) = direct field offset for MLTrainingSession.delegate;
  __swift_project_boxed_opaque_existential_1((void *)(v36 + v37), *(void *)(v36 + v37 + 24));
  OUTLINED_FUNCTION_7_58();
  *(void *)(v17 + 256) = v38();
  *(unsigned char *)(v17 + 321) = v39;
  OUTLINED_FUNCTION_61_11();
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_54_13(v40, v41, v42, v43, v44, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_284(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_53_16();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_24();
    return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v54 = *(void *)(v17 + 88);
    *(void *)(v17 + 272) = direct field offset for MLTrainingSession.parameters;
    *(void *)(v17 + 280) = v20;
    OUTLINED_FUNCTION_13_48((void *)(v54 + *(void *)(v17 + 248)));
    uint64_t v68 = (char *)v56 + *v56;
    uint64_t v69 = v55;
    uint64_t v57 = swift_task_alloc();
    uint64_t v58 = (void *)OUTLINED_FUNCTION_160_0(v57);
    *uint64_t v58 = v59;
    v58[1] = specialized MLTrainingSession.train(job:);
    OUTLINED_FUNCTION_11_48();
    OUTLINED_FUNCTION_3_24();
    return v64(v60, v61, v62, v63, v64, v65, v66, v67, a9, v68, v69, a12, a13, a14, a15, a16);
  }
}

uint64_t specialized MLTrainingSession.train(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_189();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_189();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_189();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_189();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_189();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_2();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_7();
  *uint64_t v16 = v15;
  *uint64_t v16 = *v13;
  OUTLINED_FUNCTION_132_1(v17, v18, v19);
  if (v12)
  {
    OUTLINED_FUNCTION_114_2();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_38_6();
    return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_38_6();
    return MEMORY[0x270FA2498](v29, v30, v31);
  }
}

#error "22729CD78: call analysis failed (funcsize=310)"

#error "22729D9E4: call analysis failed (funcsize=310)"

#error "22729E650: call analysis failed (funcsize=310)"

#error "22729F2BC: call analysis failed (funcsize=310)"

#error "22729FF28: call analysis failed (funcsize=310)"

#error "2272A0B5C: call analysis failed (funcsize=292)"

#error "2272A1790: call analysis failed (funcsize=292)"

#error "2272A23C4: call analysis failed (funcsize=292)"

#error "2272A2FF8: call analysis failed (funcsize=292)"

#error "2272A3C2C: call analysis failed (funcsize=292)"

#error "2272A4860: call analysis failed (funcsize=292)"

#error "2272A5494: call analysis failed (funcsize=292)"

#error "2272A60C8: call analysis failed (funcsize=292)"

#error "2272A6CFC: call analysis failed (funcsize=292)"

uint64_t specialized MLTrainingSession.evaluate(job:)(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x270FA2498](specialized MLTrainingSession.evaluate(job:), 0, 0);
}

uint64_t specialized MLTrainingSession.evaluate(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_202(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_202(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_202(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_202(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_202(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_52_15(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_83_4(*(void *)(v12 + 112));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
  OUTLINED_FUNCTION_22_30(v13);
  uint64_t v15 = v14();
  unint64_t v17 = OUTLINED_FUNCTION_71_8(v15, v16);
  OUTLINED_FUNCTION_255(v17);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_130_0(v18, v19, v20, v21, v22, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (objc_msgSend((id)OUTLINED_FUNCTION_249(direct field offset for MLJob.progress), sel_isCancelled))
  {
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_104_2();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
  }
  else
  {
    OUTLINED_FUNCTION_5_61();
    uint64_t v45 = (char *)v33 + *v33;
    uint64_t v46 = v32;
    uint64_t v34 = swift_task_alloc();
    uint64_t v35 = (void *)OUTLINED_FUNCTION_159_0(v34);
    *uint64_t v35 = v36;
    v35[1] = specialized MLTrainingSession.evaluate(job:);
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104_2();
    return v41(v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, a11, a12);
  }
}

uint64_t specialized MLTrainingSession.evaluate(job:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  OUTLINED_FUNCTION_236(v9, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_33_5();
    return v11();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v13, v14, v15);
  }
}

void specialized MLTrainingSession.evaluate(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_139_1(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_139_1(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_139_1(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_139_1(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_139_1(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  void (*v27)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_69_8();
  if (v18)
  {
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_48_15();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_79_5(v19, v20, v21, v22, v23, (void (*)(uint64_t))specialized MLJob.currentPhase.setter);
  swift_bridgeObjectRelease();
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_176_0();
    OUTLINED_FUNCTION_233(v24, &demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_12_40();
    v25();
    if (v15)
    {
      OUTLINED_FUNCTION_59_4();
LABEL_7:
      OUTLINED_FUNCTION_101_2();
      v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14);
      return;
    }
LABEL_6:
    OUTLINED_FUNCTION_12();
    goto LABEL_7;
  }
  if (objc_msgSend(*(id *)(v16 + 96), sel_isCancelled)) {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_5_61();
  uint64_t v47 = (char *)v35 + *v35;
  uint64_t v48 = v34;
  uint64_t v36 = swift_task_alloc();
  uint64_t v37 = (void *)OUTLINED_FUNCTION_159_0(v36);
  *uint64_t v37 = v38;
  v37[1] = specialized MLTrainingSession.evaluate(job:);
  OUTLINED_FUNCTION_11_48();
  OUTLINED_FUNCTION_101_2();
  v43(v39, v40, v41, v42, v43, v44, v45, v46, a9, v47, v48, a12, a13, a14);
}

id specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, void (*a6)(uint64_t))
{
  uint64_t v9 = v6;
  LOBYTE(v11) = a4;
  uint64_t v14 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_299();
  char v18 = specialized == infix<A>(_:_:)(a2, v52[0]);
  uint64_t v19 = (void *)&unk_268176000;
  uint64_t v51 = v6;
  if ((v18 & 1) == 0 || !*(void *)(v6 + direct field offset for MLJob.phaseProgress))
  {
    switch((char)a2)
    {
      case 1:
      case 3:
      case 4:
        uint64_t v22 = (void *)OUTLINED_FUNCTION_295();
        id v21 = OUTLINED_FUNCTION_294(v22);
        goto LABEL_9;
      case 2:
        if (v11) {
          uint64_t v20 = -1;
        }
        else {
          uint64_t v20 = a3;
        }
        id v21 = objc_msgSend((id)OUTLINED_FUNCTION_295(), (SEL)0x1F72DEC14, v20, v6, 7);
LABEL_9:
        id v23 = v21;
        uint64_t v24 = *(void **)(a3 + direct field offset for MLJob.phaseProgress);
        *(void *)(a3 + direct field offset for MLJob.phaseProgress) = v23;

        break;
      default:
        break;
    }
    uint64_t v9 = v6;
    a6(a2);
    uint64_t v19 = &unk_268176000;
  }
  uint64_t v25 = *(void **)(v9 + v19[509]);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v27 = v26;
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v7, v14);
  uint64_t v29 = MEMORY[0x22A674EA0](v28, v27);
  isa = (void *)v29;
  if (one-time initialization token for elapsedTimeKey == -1) {
    goto LABEL_12;
  }
LABEL_72:
  uint64_t v29 = swift_once();
LABEL_12:
  OUTLINED_FUNCTION_289(v29, sel_setUserInfoObject_forKey_);

  LOBYTE(v52[0]) = a2;
  uint64_t v31 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  if (one-time initialization token for phaseKey != -1) {
    uint64_t v31 = swift_once();
  }
  OUTLINED_FUNCTION_289(v31, sel_setUserInfoObject_forKey_);
  swift_unknownObjectRelease();
  v32.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  isa = v32.super.super.isa;
  if (one-time initialization token for itemCountKey != -1) {
    v32.super.super.isa = (Class)swift_once();
  }
  OUTLINED_FUNCTION_289((uint64_t)v32.super.super.isa, sel_setUserInfoObject_forKey_);

  if ((v11 & 1) == 0)
  {
    v33.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    isa = v33.super.super.isa;
    if (one-time initialization token for totalItemCountKey != -1) {
LABEL_74:
    }
      v33.super.super.isa = (Class)swift_once();
    OUTLINED_FUNCTION_289((uint64_t)v33.super.super.isa, sel_setUserInfoObject_forKey_);
  }
  OUTLINED_FUNCTION_273();
  unint64_t v36 = v35 & v34;
  int64_t v38 = (unint64_t)(v37 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (v36)
  {
LABEL_20:
    unint64_t v39 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    unint64_t v40 = v39 | (v11 << 6);
    goto LABEL_39;
  }
  while (1)
  {
    int64_t v41 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_72;
    }
    if (v41 >= v38) {
      break;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v41);
    ++v11;
    if (v42) {
      goto LABEL_38;
    }
    int64_t v11 = v41 + 1;
    if (v41 + 1 >= v38) {
      break;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v11);
    if (v42) {
      goto LABEL_38;
    }
    int64_t v11 = v41 + 2;
    if (v41 + 2 >= v38) {
      break;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v11);
    if (v42) {
      goto LABEL_38;
    }
    int64_t v11 = v41 + 3;
    if (v41 + 3 >= v38) {
      break;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v11);
    if (v42) {
      goto LABEL_38;
    }
    int64_t v11 = v41 + 4;
    if (v41 + 4 >= v38) {
      break;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v11);
    if (v42) {
      goto LABEL_38;
    }
    int64_t v43 = v41 + 5;
    if (v43 >= v38) {
      break;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v43);
    if (!v42)
    {
      while (1)
      {
        int64_t v11 = v43 + 1;
        if (__OFADD__(v43, 1)) {
          break;
        }
        if (v11 >= v38) {
          goto LABEL_68;
        }
        unint64_t v42 = *(void *)(a2 + 8 * v11);
        ++v43;
        if (v42) {
          goto LABEL_38;
        }
      }
      __break(1u);
      goto LABEL_74;
    }
    int64_t v11 = v43;
LABEL_38:
    unint64_t v36 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v11 << 6);
LABEL_39:
    uint64_t v44 = *(unsigned __int8 *)(a5[6] + v40);
    if (a5[2] && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v44), (v46 & 1) != 0))
    {
      outlined init with copy of Any(a5[7] + 32 * v45, (uint64_t)v52);
      __swift_project_boxed_opaque_existential_1(v52, v52[3]);
      isa = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
    }
    else
    {
      isa = 0;
    }
    switch(v44)
    {
      case 1:
        uint64_t v47 = &static MLProgress.contentLossKey;
        if (one-time initialization token for contentLossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.contentLossKey;
        }
        break;
      case 2:
        uint64_t v47 = &static MLProgress.styleLossKey;
        if (one-time initialization token for styleLossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.styleLossKey;
        }
        break;
      case 3:
        uint64_t v47 = &static MLProgress.accuracyKey;
        if (one-time initialization token for accuracyKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.accuracyKey;
        }
        break;
      case 4:
        uint64_t v47 = &static MLProgress.validationLossKey;
        if (one-time initialization token for validationLossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationLossKey;
        }
        break;
      case 5:
        uint64_t v47 = &static MLProgress.validationAccuracyKey;
        if (one-time initialization token for validationAccuracyKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationAccuracyKey;
        }
        break;
      case 6:
        uint64_t v47 = &static MLProgress.stylizedImageKey;
        if (one-time initialization token for stylizedImageKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.stylizedImageKey;
        }
        break;
      case 7:
        uint64_t v47 = &static MLProgress.rootMeanSquaredErrorKey;
        if (one-time initialization token for rootMeanSquaredErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.rootMeanSquaredErrorKey;
        }
        break;
      case 8:
        uint64_t v47 = &static MLProgress.maximumErrorKey;
        if (one-time initialization token for maximumErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.maximumErrorKey;
        }
        break;
      case 9:
        uint64_t v47 = &static MLProgress.validationRootMeanSquaredErrorKey;
        if (one-time initialization token for validationRootMeanSquaredErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationRootMeanSquaredErrorKey;
        }
        break;
      case 10:
        uint64_t v47 = &static MLProgress.validationMaximumErrorKey;
        if (one-time initialization token for validationMaximumErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationMaximumErrorKey;
        }
        break;
      default:
        uint64_t v47 = &static MLProgress.lossKey;
        if (one-time initialization token for lossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.lossKey;
        }
        break;
    }
    id v48 = (id)*v47;
    objc_msgSend(v25, sel_setUserInfoObject_forKey_, isa, v48);
    swift_unknownObjectRelease();

    if (v36) {
      goto LABEL_20;
    }
  }
LABEL_68:
  swift_release();
  id result = *(id *)(v51 + direct field offset for MLJob.phaseProgress);
  if (result) {
    return objc_msgSend(result, sel_setCompletedUnitCount_, a1);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  id v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  void *isa;
  uint64_t v30;
  NSNumber v31;
  NSNumber v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  id result;
  void v51[4];

  uint64_t v9 = v6;
  LOBYTE(v11) = a4;
  uint64_t v13 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_299();
  uint64_t v17 = specialized == infix<A>(_:_:)(a2, v51[0]);
  char v18 = (void *)&unk_268176000;
  if ((v17 & 1) == 0 || !*(void *)(v6 + direct field offset for MLJob.phaseProgress))
  {
    switch((char)a2)
    {
      case 1:
      case 3:
      case 4:
        id v21 = (void *)OUTLINED_FUNCTION_319();
        uint64_t v20 = OUTLINED_FUNCTION_293(v21);
        goto LABEL_8;
      case 2:
        uint64_t v19 = a3;
        if (v11) {
          uint64_t v19 = -1;
        }
        uint64_t v20 = objc_msgSend((id)OUTLINED_FUNCTION_319(), (SEL)0x1F72DEC14, v19, v6, 7);
LABEL_8:
        uint64_t v22 = v20;
        id v23 = *(void **)(v6 + direct field offset for MLJob.phaseProgress);
        *(void *)(v6 + direct field offset for MLJob.phaseProgress) = v22;

        break;
      default:
        break;
    }
    a6(a2);
    char v18 = &unk_268176000;
  }
  uint64_t v24 = *(void **)(v6 + v18[509]);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v26 = v25;
  double v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v7, v13);
  uint64_t v28 = MEMORY[0x22A674EA0](v27, v26);
  isa = (void *)v28;
  if (one-time initialization token for elapsedTimeKey == -1) {
    goto LABEL_11;
  }
LABEL_74:
  uint64_t v28 = swift_once();
LABEL_11:
  OUTLINED_FUNCTION_289(v28, sel_setUserInfoObject_forKey_);

  LOBYTE(v51[0]) = a2;
  uint64_t v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  if (one-time initialization token for phaseKey != -1) {
    uint64_t v30 = swift_once();
  }
  OUTLINED_FUNCTION_289(v30, sel_setUserInfoObject_forKey_);
  swift_unknownObjectRelease();
  v31.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  isa = v31.super.super.isa;
  if (one-time initialization token for itemCountKey != -1) {
    v31.super.super.isa = (Class)swift_once();
  }
  OUTLINED_FUNCTION_289((uint64_t)v31.super.super.isa, sel_setUserInfoObject_forKey_);

  if ((v11 & 1) == 0)
  {
    v32.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    isa = v32.super.super.isa;
    if (one-time initialization token for totalItemCountKey != -1) {
      v32.super.super.isa = (Class)swift_once();
    }
    OUTLINED_FUNCTION_289((uint64_t)v32.super.super.isa, sel_setUserInfoObject_forKey_);
  }
  OUTLINED_FUNCTION_273();
  uint64_t v35 = v34 & v33;
  uint64_t v37 = (unint64_t)(v36 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v38 = 0;
  if (v35)
  {
LABEL_20:
    unint64_t v39 = __clz(__rbit64(v35));
    v35 &= v35 - 1;
    unint64_t v40 = v39 | (v38 << 6);
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v41 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    if (v41 >= v37) {
      goto LABEL_70;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v41);
    ++v38;
    if (!v42)
    {
      int64_t v38 = v41 + 1;
      if (v41 + 1 >= v37) {
        goto LABEL_70;
      }
      unint64_t v42 = *(void *)(a2 + 8 * v38);
      if (!v42)
      {
        int64_t v38 = v41 + 2;
        if (v41 + 2 >= v37) {
          goto LABEL_70;
        }
        unint64_t v42 = *(void *)(a2 + 8 * v38);
        if (!v42)
        {
          int64_t v38 = v41 + 3;
          if (v41 + 3 >= v37) {
            goto LABEL_70;
          }
          unint64_t v42 = *(void *)(a2 + 8 * v38);
          if (!v42)
          {
            int64_t v38 = v41 + 4;
            if (v41 + 4 >= v37) {
              goto LABEL_70;
            }
            unint64_t v42 = *(void *)(a2 + 8 * v38);
            if (!v42)
            {
              int64_t v38 = v41 + 5;
              if (v41 + 5 >= v37) {
                goto LABEL_70;
              }
              unint64_t v42 = *(void *)(a2 + 8 * v38);
              if (!v42) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_40:
    uint64_t v35 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v38 << 6);
LABEL_41:
    uint64_t v44 = *(unsigned __int8 *)(a5[6] + v40);
    if (a5[2] && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v44), (v46 & 1) != 0))
    {
      outlined init with copy of Any(a5[7] + 32 * v45, (uint64_t)v51);
      __swift_project_boxed_opaque_existential_1(v51, v51[3]);
      isa = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
    }
    else
    {
      isa = 0;
    }
    switch(v44)
    {
      case 1:
        uint64_t v47 = &static MLProgress.contentLossKey;
        if (one-time initialization token for contentLossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.contentLossKey;
        }
        break;
      case 2:
        uint64_t v47 = &static MLProgress.styleLossKey;
        if (one-time initialization token for styleLossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.styleLossKey;
        }
        break;
      case 3:
        uint64_t v47 = &static MLProgress.accuracyKey;
        if (one-time initialization token for accuracyKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.accuracyKey;
        }
        break;
      case 4:
        uint64_t v47 = &static MLProgress.validationLossKey;
        if (one-time initialization token for validationLossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationLossKey;
        }
        break;
      case 5:
        uint64_t v47 = &static MLProgress.validationAccuracyKey;
        if (one-time initialization token for validationAccuracyKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationAccuracyKey;
        }
        break;
      case 6:
        uint64_t v47 = &static MLProgress.stylizedImageKey;
        if (one-time initialization token for stylizedImageKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.stylizedImageKey;
        }
        break;
      case 7:
        uint64_t v47 = &static MLProgress.rootMeanSquaredErrorKey;
        if (one-time initialization token for rootMeanSquaredErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.rootMeanSquaredErrorKey;
        }
        break;
      case 8:
        uint64_t v47 = &static MLProgress.maximumErrorKey;
        if (one-time initialization token for maximumErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.maximumErrorKey;
        }
        break;
      case 9:
        uint64_t v47 = &static MLProgress.validationRootMeanSquaredErrorKey;
        if (one-time initialization token for validationRootMeanSquaredErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationRootMeanSquaredErrorKey;
        }
        break;
      case 10:
        uint64_t v47 = &static MLProgress.validationMaximumErrorKey;
        if (one-time initialization token for validationMaximumErrorKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.validationMaximumErrorKey;
        }
        break;
      default:
        uint64_t v47 = &static MLProgress.lossKey;
        if (one-time initialization token for lossKey != -1)
        {
          swift_once();
          uint64_t v47 = &static MLProgress.lossKey;
        }
        break;
    }
    int64_t v11 = (id)*v47;
    objc_msgSend(v24, sel_setUserInfoObject_forKey_, isa, v11);
    swift_unknownObjectRelease();

    if (v35) {
      goto LABEL_20;
    }
  }
  int64_t v43 = v41 + 6;
  if (v43 >= v37) {
    goto LABEL_70;
  }
  unint64_t v42 = *(void *)(a2 + 8 * v43);
  if (v42)
  {
    int64_t v38 = v43;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v38 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      JUMPOUT(0x2272ABCECLL);
    }
    if (v38 >= v37) {
      break;
    }
    unint64_t v42 = *(void *)(a2 + 8 * v38);
    ++v43;
    if (v42) {
      goto LABEL_40;
    }
  }
LABEL_70:
  swift_release();
  id result = *(id *)(v9 + direct field offset for MLJob.phaseProgress);
  if (result) {
    return objc_msgSend(result, sel_setCompletedUnitCount_, a1);
  }
  return result;
}

uint64_t specialized MLTrainingSession.saveFeatureExtractionCheckpoint(to:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  OUTLINED_FUNCTION_303(a1, a2);
  v72[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_296(v9, v60);
  OUTLINED_FUNCTION_0();
  uint64_t v65 = v11;
  uint64_t v66 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_298(v12, v60);
  OUTLINED_FUNCTION_0();
  uint64_t v68 = v14;
  uint64_t v69 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v70 = OUTLINED_FUNCTION_297(v15, v60);
  OUTLINED_FUNCTION_0();
  uint64_t v63 = v16;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_300(v18, v60);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_59_6();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v60 - v21;
  OUTLINED_FUNCTION_320(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_305();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(v5);
  uint64_t v24 = OUTLINED_FUNCTION_257(v23);
  uint64_t result = v25(v24);
  if (!v2)
  {
    OUTLINED_FUNCTION_291();
    if ((v27 & 1) == 0)
    {
      uint64_t v36 = 1;
      uint64_t v37 = v67;
      uint64_t v6 = v70;
      return __swift_storeEnumTagSinglePayload(v37, v36, 1, v6);
    }
    uint64_t v28 = OUTLINED_FUNCTION_265();
    ((void (*)(uint64_t))v6)(v28);
    OUTLINED_FUNCTION_302();
    uint64_t v29 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v30 = OUTLINED_FUNCTION_290(v29);
    ((void (*)(uint64_t))v6)(v30);
    OUTLINED_FUNCTION_267();
    uint64_t v31 = OUTLINED_FUNCTION_301();
    v32(v31);
    OUTLINED_FUNCTION_118_2();
    v33();
    OUTLINED_FUNCTION_322();
    uint64_t v34 = v7;
    uint64_t v35 = v61;
    outlined init with take of MLCheckpoint(v34, v61, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_318();
    if (__swift_getEnumTagSinglePayload(0, 1, v6) == 1)
    {
      _s10Foundation3URLVSgWOhTm_0(0, &demangling cache variable for type metadata for MLCheckpoint?);
      OUTLINED_FUNCTION_321();
    }
    else
    {
      uint64_t v38 = v62;
      outlined init with take of MLCheckpoint(0, v62, (void (*)(void))type metadata accessor for MLCheckpoint);
      switch(*(unsigned char *)(v38 + *(int *)(v6 + 20)))
      {
        case 1:
          swift_bridgeObjectRelease();
          goto LABEL_12;
        case 2:
          OUTLINED_FUNCTION_311();
          goto LABEL_11;
        case 3:
          OUTLINED_FUNCTION_304();
          goto LABEL_11;
        case 4:
          OUTLINED_FUNCTION_292();
          goto LABEL_11;
        default:
LABEL_11:
          char v39 = OUTLINED_FUNCTION_287();
          swift_bridgeObjectRelease();
          if (v39)
          {
LABEL_12:
            id v40 = objc_msgSend(self, sel_defaultManager);
            URL._bridgeToObjectiveC()(v41);
            int64_t v43 = v42;
            v72[0] = 0;
            unsigned __int8 v44 = objc_msgSend(v40, sel_removeItemAtURL_error_, v42, v72);

            if (v44)
            {
              id v45 = v72[0];
              uint64_t v4 = v60;
            }
            else
            {
              id v50 = v72[0];
              uint64_t v51 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              uint64_t v4 = 0;
            }
            uint64_t v52 = v71;
            unint64_t v53 = *(void *)(*(void *)(v3 + *(int *)(v71 + 44)) + 16);
            OUTLINED_FUNCTION_266();
            uint64_t v54 = *(int *)(v52 + 44);
            uint64_t v55 = *(void *)(v3 + v54);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v3 + v54) = v55;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew()();
              uint64_t v55 = v59;
              *(void *)(v3 + v54) = v59;
            }
            uint64_t v57 = v64;
            if (v53)
            {
              if (v53 <= *(void *)(v55 + 16))
              {
                OUTLINED_FUNCTION_288();
                swift_endAccess();
                uint64_t ML12MLCheckpointVWOhTm_1 = _s8CreateML12MLCheckpointVWOhTm_1(v38, (void (*)(void))type metadata accessor for MLCheckpoint);
                v57(ML12MLCheckpointVWOhTm_1);
                goto LABEL_22;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
          }
          _s8CreateML12MLCheckpointVWOhTm_1(v38, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_314();
          break;
      }
    }
    OUTLINED_FUNCTION_266();
    uint64_t v46 = v3 + *((int *)v22 + 11);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v47 = *(void *)(*(void *)v46 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
    *(void *)(*(void *)v46 + 16) = v47 + 1;
    OUTLINED_FUNCTION_112_2();
    _s8CreateML12MLCheckpointVWOcTm_0(v35, v48, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v49 = swift_endAccess();
    v64(v49);
LABEL_22:
    if (v4) {
      return _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    uint64_t v37 = v67;
    outlined init with take of MLCheckpoint(v35, v67, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v36 = 0;
    return __swift_storeEnumTagSinglePayload(v37, v36, 1, v6);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t result;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  void (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  id v40;
  NSURL *v41;
  void *v42;
  void *v43;
  unsigned __int8 v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  void (*v57)(uint64_t);
  uint64_t ML12MLCheckpointVWOhTm_1;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72[8];

  OUTLINED_FUNCTION_303(a1, a2);
  v72[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_296(v9, v60);
  OUTLINED_FUNCTION_0();
  uint64_t v65 = v11;
  uint64_t v66 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_298(v12, v60);
  OUTLINED_FUNCTION_0();
  uint64_t v68 = v14;
  uint64_t v69 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v70 = OUTLINED_FUNCTION_297(v15, v60);
  OUTLINED_FUNCTION_0();
  uint64_t v63 = v16;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_300(v18, v60);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_59_6();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v60 - v21;
  OUTLINED_FUNCTION_320(direct field offset for MLTrainingSession.delegate);
  OUTLINED_FUNCTION_305();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(v5);
  uint64_t v24 = OUTLINED_FUNCTION_257(v23);
  uint64_t result = v25(v24);
  if (!v2)
  {
    OUTLINED_FUNCTION_291();
    if ((v27 & 1) == 0)
    {
      uint64_t v36 = 1;
      uint64_t v37 = v67;
      uint64_t v6 = v70;
      return __swift_storeEnumTagSinglePayload(v37, v36, 1, v6);
    }
    uint64_t v28 = OUTLINED_FUNCTION_265();
    ((void (*)(uint64_t))v6)(v28);
    OUTLINED_FUNCTION_302();
    uint64_t v29 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v30 = OUTLINED_FUNCTION_290(v29);
    ((void (*)(uint64_t))v6)(v30);
    OUTLINED_FUNCTION_267();
    uint64_t v31 = OUTLINED_FUNCTION_301();
    v32(v31);
    OUTLINED_FUNCTION_118_2();
    v33();
    OUTLINED_FUNCTION_322();
    uint64_t v34 = v7;
    uint64_t v35 = v61;
    outlined init with take of MLCheckpoint(v34, v61, (void (*)(void))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_318();
    if (__swift_getEnumTagSinglePayload(0, 1, v6) == 1)
    {
      _s10Foundation3URLVSgWOhTm_0(0, &demangling cache variable for type metadata for MLCheckpoint?);
      OUTLINED_FUNCTION_321();
    }
    else
    {
      uint64_t v38 = v62;
      outlined init with take of MLCheckpoint(0, v62, (void (*)(void))type metadata accessor for MLCheckpoint);
      switch(*(unsigned char *)(v38 + *(int *)(v6 + 20)))
      {
        case 1:
          swift_bridgeObjectRelease();
          goto LABEL_12;
        case 2:
          OUTLINED_FUNCTION_311();
          goto LABEL_11;
        case 3:
          OUTLINED_FUNCTION_304();
          goto LABEL_11;
        case 4:
          OUTLINED_FUNCTION_292();
          goto LABEL_11;
        default:
LABEL_11:
          char v39 = OUTLINED_FUNCTION_287();
          swift_bridgeObjectRelease();
          if (v39)
          {
LABEL_12:
            id v40 = objc_msgSend(self, sel_defaultManager);
            URL._bridgeToObjectiveC()(v41);
            int64_t v43 = v42;
            v72[0] = 0;
            unsigned __int8 v44 = objc_msgSend(v40, sel_removeItemAtURL_error_, v42, v72);

            if (v44)
            {
              id v45 = v72[0];
              uint64_t v4 = v60;
            }
            else
            {
              id v50 = v72[0];
              uint64_t v51 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              uint64_t v4 = 0;
            }
            uint64_t v52 = v71;
            unint64_t v53 = *(void *)(*(void *)(v3 + *(int *)(v71 + 44)) + 16);
            OUTLINED_FUNCTION_266();
            uint64_t v54 = *(int *)(v52 + 44);
            uint64_t v55 = *(void *)(v3 + v54);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v3 + v54) = v55;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew()();
              uint64_t v55 = v59;
              *(void *)(v3 + v54) = v59;
            }
            uint64_t v57 = v64;
            if (v53)
            {
              if (v53 <= *(void *)(v55 + 16))
              {
                OUTLINED_FUNCTION_288();
                swift_endAccess();
                uint64_t ML12MLCheckpointVWOhTm_1 = _s8CreateML12MLCheckpointVWOhTm_1(v38, (void (*)(void))type metadata accessor for MLCheckpoint);
                v57(ML12MLCheckpointVWOhTm_1);
                goto LABEL_22;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
          }
          _s8CreateML12MLCheckpointVWOhTm_1(v38, (void (*)(void))type metadata accessor for MLCheckpoint);
          OUTLINED_FUNCTION_314();
          break;
      }
    }
    OUTLINED_FUNCTION_266();
    uint64_t v46 = v3 + *((int *)v22 + 11);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v47 = *(void *)(*(void *)v46 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
    *(void *)(*(void *)v46 + 16) = v47 + 1;
    OUTLINED_FUNCTION_112_2();
    _s8CreateML12MLCheckpointVWOcTm_0(v35, v48, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v49 = swift_endAccess();
    v64(v49);
LABEL_22:
    if (v4) {
      return _s8CreateML12MLCheckpointVWOhTm_1(v35, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    uint64_t v37 = v67;
    outlined init with take of MLCheckpoint(v35, v67, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v36 = 0;
    return __swift_storeEnumTagSinglePayload(v37, v36, 1, v6);
  }
  return result;
}

uint64_t MLJob.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for MLJob.startDate;
  type metadata accessor for Date();
  OUTLINED_FUNCTION_8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

id MLJob.progress.getter()
{
  return *(id *)(v0 + direct field offset for MLJob.progress);
}

uint64_t MLJob.checkpoints.getter()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t MLJob.result.getter()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PassthroughSubject();
  swift_getWitnessTable();
  uint64_t Connectable = type metadata accessor for Publishers.MakeConnectable();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v11 = *(void *)(v0 + 24);
  swift_retain();
  Publishers.MakeConnectable.init(upstream:)();
  swift_getWitnessTable();
  uint64_t v7 = ConnectablePublisher.autoconnect()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, Connectable);
  uint64_t v11 = v7;
  type metadata accessor for Publishers.Autoconnect();
  swift_getWitnessTable();
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v8;
}

uint64_t MLJob.phase.getter()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t specialized MLJob.currentPhase.setter()
{
  return CurrentValueSubject.value.setter();
}

Swift::Void __swiftcall MLJob.cancel()()
{
  objc_msgSend(*(id *)(v0 + direct field offset for MLJob.progress), sel_cancel);
}

uint64_t specialized MLJob.init(_:)()
{
  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLHandPoseClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:), v14, (uint64_t)&unk_26DB45550, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLRandomForestRegressor, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:), v14, (uint64_t)&unk_26DB45500, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLStyleTransfer, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLStyleTransfer.resume(_:), v14, (uint64_t)&unk_26DB454B0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLLogisticRegressionClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLLogisticRegressionClassifier.resume(_:), v14, (uint64_t)&unk_26DB45460, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLDecisionTreeRegressor, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLDecisionTreeRegressor.resume(_:), v14, (uint64_t)&unk_26DB45410, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLHandActionClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLHandActionClassifier.resume(_:), v14, (uint64_t)&unk_26DB453C0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLRandomForestClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:), v14, (uint64_t)&unk_26DB45370, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLBoostedTreeRegressor, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:), v14, (uint64_t)&unk_26DB45320, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLDecisionTreeClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:), v14, (uint64_t)&unk_26DB452D0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLSoundClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLSoundClassifier.resume(_:), v14, (uint64_t)&unk_26DB45280, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLBoostedTreeClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:), v14, (uint64_t)&unk_26DB451E0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLLinearRegressor, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLLinearRegressor.resume(_:), v14, (uint64_t)&unk_26DB45190, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v2 = direct field offset for MLJob.progress;
  *(void *)(v0 + v2) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLImageClassifier, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v3 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v0 + 32) = OUTLINED_FUNCTION_244(v4, v5, v6, v7, v8, v9, v10, v11, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  uint64_t v12 = OUTLINED_FUNCTION_55_7();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = partial apply for specialized closure #1 in MLJob.init(_:);
  OUTLINED_FUNCTION_191(v12);
  uint64_t v13 = swift_retain();
  OUTLINED_FUNCTION_196(v13, (uint64_t)partial apply for closure #1 in closure #1 in static MLImageClassifier.resume(_:), v14, (uint64_t)&unk_26DB45140, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t specialized MLJob.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_246();
  Date.init()();
  uint64_t v6 = direct field offset for MLJob.progress;
  *(void *)(v3 + v6) = objc_msgSend(self, sel_progressWithTotalUnitCount_, 10);
  *(void *)(v3 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_31_0();
  *(void *)(v3 + 16) = PassthroughSubject.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLSoundClassifier.DataSource, Error>);
  OUTLINED_FUNCTION_31_0();
  uint64_t v7 = PassthroughSubject.init()();
  OUTLINED_FUNCTION_245(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  uint64_t v8 = OUTLINED_FUNCTION_31_0();
  *(void *)(v3 + 32) = OUTLINED_FUNCTION_244(v8, v9, v10, v11, v12, v13, v14, v15, v19, v20, SWORD2(v20), SBYTE6(v20), SHIBYTE(v20));
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v4;
  long long v17 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v16 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v16 + 40) = v17;
  *(unsigned char *)(v16 + 56) = *(unsigned char *)(a3 + 32);
  *(void *)(v16 + 64) = partial apply for specialized closure #1 in MLJob.init(_:);
  *(void *)(v16 + 72) = v3;
  swift_retain_n();
  swift_retain();
  specialized MLTrainingSession.resume(job:completion:)(v3, (uint64_t)partial apply for closure #1 in closure #1 in static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:), v16, (uint64_t)&unk_26DB45230, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_243();
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

void specialized closure #1 in MLJob.init(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4, void (*a5)(void))
{
  uint64_t v8 = a3(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v16 - v9;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (id *)((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of URL?(a1, (uint64_t)v13, a4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v17 = *v13;
    id v14 = v17;
    id v15 = v17;
    PassthroughSubject.send(completion:)();
  }
  else
  {
    outlined init with take of MLCheckpoint((uint64_t)v13, (uint64_t)v10, a5);
    PassthroughSubject.send(_:)();
    id v17 = 0;
    PassthroughSubject.send(completion:)();
    _s8CreateML12MLCheckpointVWOhTm_1((uint64_t)v10, a5);
  }
}

uint64_t MLJob.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_8();
  uint64_t v1 = OUTLINED_FUNCTION_22_1();
  v2(v1);

  return v0;
}

uint64_t MLJob.__deallocating_deinit()
{
  MLJob.deinit();

  return swift_deallocClassInstance();
}

void protocol witness for Cancellable.cancel() in conformance MLJob<A>()
{
}

uint64_t type metadata instantiation function for MLJob()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for MLJob()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MLJob()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for MLJob(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MLJob);
}

void partial apply for specialized closure #1 in MLJob.init(_:)(uint64_t a1)
{
  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLImageClassifier, &demangling cache variable for type metadata for Result<MLImageClassifier, Error>, (void (*)(void))type metadata accessor for MLImageClassifier);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLLinearRegressor, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>, (void (*)(void))type metadata accessor for MLLinearRegressor);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLBoostedTreeClassifier, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>, (void (*)(void))type metadata accessor for MLBoostedTreeClassifier);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLSoundClassifier.DataSource, &demangling cache variable for type metadata for Result<MLSoundClassifier.DataSource, Error>, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLSoundClassifier, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>, (void (*)(void))type metadata accessor for MLSoundClassifier);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLDecisionTreeClassifier, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>, (void (*)(void))type metadata accessor for MLDecisionTreeClassifier);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLBoostedTreeRegressor, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>, (void (*)(void))type metadata accessor for MLBoostedTreeRegressor);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLRandomForestClassifier, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>, (void (*)(void))type metadata accessor for MLRandomForestClassifier);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLHandActionClassifier, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>, (void (*)(void))type metadata accessor for MLHandActionClassifier);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLDecisionTreeRegressor, &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>, (void (*)(void))type metadata accessor for MLDecisionTreeRegressor);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLLogisticRegressionClassifier, &demangling cache variable for type metadata for Result<MLLogisticRegressionClassifier, Error>, (void (*)(void))type metadata accessor for MLLogisticRegressionClassifier);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, type metadata accessor for MLStyleTransfer, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>, (void (*)(void))type metadata accessor for MLStyleTransfer);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLRandomForestRegressor, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>, (void (*)(void))type metadata accessor for MLRandomForestRegressor);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(void))type metadata accessor for MLHandPoseClassifier, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>, (void (*)(void))type metadata accessor for MLHandPoseClassifier);
}

uint64_t partial apply for closure #1 in closure #1 in static MLImageClassifier.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLImageClassifier.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:)()
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t _s8CreateML12MLCheckpointVWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t outlined assign with copy of MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in static MLLinearRegressor.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLLinearRegressor.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_2272AE504()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

void partial apply for closure #1 in closure #1 in static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:)()
{
}

uint64_t partial apply for closure #1 in closure #1 in static MLSoundClassifier.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLSoundClassifier.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)()
{
}

uint64_t partial apply for closure #1 in closure #1 in static MLDecisionTreeRegressor.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLDecisionTreeRegressor.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in static MLLogisticRegressionClassifier.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLLogisticRegressionClassifier.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24));
}

void partial apply for closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
}

uint64_t partial apply for closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t objectdestroyTm_7()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t objectdestroy_2Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t outlined init with take of MLCheckpoint(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t _s8CreateML12MLCheckpointVWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  uint64_t v3 = OUTLINED_FUNCTION_22_1();
  v4(v3);
  return a1;
}

unint64_t closure #1 in BidirectionalCollection.last(where:)specialized partial apply@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in BidirectionalCollection.last(where:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_2_70()
{
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(unsigned char *)(v1 + 128) = v3;
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_73()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_4_67()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_5_61()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 48) + *(void *)(v0 + 56));
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  return v2 + 64;
}

uint64_t OUTLINED_FUNCTION_9_48()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 88) + *(void *)(v0 + 248));
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  return v2 + 56;
}

uint64_t OUTLINED_FUNCTION_10_40()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 64) + *(void *)(v0 + 192));
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  return v2 + 48;
}

uint64_t OUTLINED_FUNCTION_11_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_48(void *a1)
{
  uint64_t v1 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return v1 + 56;
}

uint64_t OUTLINED_FUNCTION_14_37(void *a1)
{
  uint64_t v1 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return v1 + 48;
}

uint64_t OUTLINED_FUNCTION_17_37()
{
  return *(void *)(v0 + 200);
}

uint64_t OUTLINED_FUNCTION_18_30()
{
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(unsigned char *)(v2 + 128) = v3;
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_41()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

void OUTLINED_FUNCTION_22_30(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
}

uint64_t OUTLINED_FUNCTION_23_27()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  *(unsigned char *)(v2 - 81) = v1;
  return v2 - 81;
}

uint64_t OUTLINED_FUNCTION_24_36@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + a1 + 24);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + a1), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_25_34(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
}

uint64_t OUTLINED_FUNCTION_26_23()
{
  return 0x61756C617665;
}

uint64_t OUTLINED_FUNCTION_27_29()
{
  return 0x636172747865;
}

uint64_t OUTLINED_FUNCTION_28_24()
{
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  *(unsigned char *)(v1 + 320) = *(unsigned char *)(v3 + *(int *)(v2 + 28));
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_30()
{
  return swift_beginAccess();
}

__n128 *OUTLINED_FUNCTION_32_29(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_33_26(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) = v1;
}

uint64_t OUTLINED_FUNCTION_34_23@<X0>(uint64_t a1@<X8>)
{
  __swift_project_boxed_opaque_existential_1((void *)(v1 + a1), *(void *)(v1 + a1 + 24));
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_36_23()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_38_22()
{
  return swift_bridgeObjectRetain();
}

void *OUTLINED_FUNCTION_39_22(void *(*a1)(void *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5(a1, v4, a4, v5);
}

uint64_t OUTLINED_FUNCTION_40_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_20()
{
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_42_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_16@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + a2) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_46_18()
{
  return *(void *)(v0 + 216);
}

uint64_t OUTLINED_FUNCTION_47_20()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_48_15()
{
  *(void *)(v0 + v1) = v2;
}

uint64_t OUTLINED_FUNCTION_49_14(uint64_t result)
{
  *(void *)(v2 + 240) = result;
  *(void *)(v2 + 64) = *(void *)(v1 + *(int *)(result + 44));
  return result;
}

uint64_t OUTLINED_FUNCTION_50_15(uint64_t result)
{
  *(void *)(v2 + 184) = result;
  *(void *)(v2 + 40) = *(void *)(v1 + *(int *)(result + 44));
  return result;
}

void *OUTLINED_FUNCTION_52_15@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 56) = a1;
  return __swift_project_boxed_opaque_existential_1((void *)(v2 + a1), *(void *)(v2 + a1 + 24));
}

uint64_t OUTLINED_FUNCTION_53_16()
{
  return swift_task_dealloc();
}

id OUTLINED_FUNCTION_54_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  return specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)(v8, v6, v7, v9, v10, a6);
}

uint64_t OUTLINED_FUNCTION_55_13()
{
  return *(void *)(v0 + 160);
}

uint64_t OUTLINED_FUNCTION_56_17()
{
  return specialized MLTrainingSession.transition(to:)(1, v0);
}

id OUTLINED_FUNCTION_58_9@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void **)(*(void *)(v1 + 40) + a1);
  return [v4 (SEL)(v2 + 2712)];
}

unint64_t OUTLINED_FUNCTION_61_11()
{
  return lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
}

__n128 *OUTLINED_FUNCTION_63_7(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_65_7()
{
  return 0x636E657265666E69;
}

uint64_t OUTLINED_FUNCTION_66_6()
{
  return *(void *)(v0[11] + v0[29] + *(int *)(v0[30] + 32)) + v0[37];
}

uint64_t OUTLINED_FUNCTION_67_7()
{
  return 0x636E657265666E69;
}

uint64_t OUTLINED_FUNCTION_68_6()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t OUTLINED_FUNCTION_71_8(uint64_t a1, char a2)
{
  *(void *)(v2 + 80) = a1;
  *(unsigned char *)(v2 + 128) = a2;
  return lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
}

uint64_t OUTLINED_FUNCTION_73_3()
{
  __swift_getEnumTagSinglePayload(v1, 1, v2);
  return *(void *)(v0 + 168);
}

uint64_t OUTLINED_FUNCTION_74_3()
{
  __swift_getEnumTagSinglePayload(v1, 1, v2);
  return *(void *)(v0 + 224);
}

void OUTLINED_FUNCTION_75_3()
{
  *(void *)(*(void *)v1 + 16) = v0 + 1;
}

uint64_t OUTLINED_FUNCTION_76_4()
{
  return *(void *)(v0 + 64) + *(void *)(v0 + 224);
}

uint64_t OUTLINED_FUNCTION_78_3(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

id OUTLINED_FUNCTION_79_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  return specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)(v7, v9, v6, v8, v10, a6);
}

uint64_t OUTLINED_FUNCTION_80_5()
{
  return swift_task_dealloc();
}

BOOL OUTLINED_FUNCTION_81_5(Swift::Double a1)
{
  uint64_t v3 = 0x676E696E69617254;
  unint64_t v4 = 0xE800000000000000;
  return AnalyticsReporter.reportEventDuration(model:task:startTime:)(v1, *(Swift::String *)&v3, a1);
}

void OUTLINED_FUNCTION_82_4()
{
  *(unsigned char *)(v0 + *(int *)(v3 + 28)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
}

uint64_t OUTLINED_FUNCTION_83_4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 64) = a1;
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_84_2()
{
  return *(void *)(v1 + 64) + v0;
}

uint64_t OUTLINED_FUNCTION_85_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_87_3()
{
  return *(void *)(v0 + 88) + *(void *)(v0 + 272);
}

uint64_t OUTLINED_FUNCTION_89_2()
{
  return specialized MLTrainingSession.transition(to:)(1, v0);
}

uint64_t OUTLINED_FUNCTION_91_3()
{
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_92_2(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_93_2(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_95_3(uint64_t result)
{
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_98_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  return *(void *)(v1 + 88) + v0;
}

uint64_t OUTLINED_FUNCTION_100_2()
{
  return 0x676E696E69617274;
}

uint64_t OUTLINED_FUNCTION_102_0()
{
  return String.init(format:_:)();
}

uint64_t OUTLINED_FUNCTION_103_2()
{
  return String.init(format:_:)();
}

uint64_t OUTLINED_FUNCTION_109_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_110_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_113_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_114_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_115_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_117_2()
{
  return swift_task_dealloc();
}

id OUTLINED_FUNCTION_119_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  return specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)(v8, v6, v7, v9, v10, a6);
}

uint64_t OUTLINED_FUNCTION_122_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_128_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_129_1()
{
  *(unsigned char *)(v3 + *(int *)(v2 + 20)) = v0;
  *(void *)(v3 + *(int *)(v2 + 24)) = v1;
  return Date.init()();
}

id OUTLINED_FUNCTION_130_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  return specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)(v8, v9, v6, v7, v10, a6);
}

uint64_t OUTLINED_FUNCTION_132_1(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v3 + 296) = a1;
  *(void *)(v3 + 304) = a2;
  *(unsigned char *)(v3 + 322) = a3;
  *(void *)(v3 + 312) = v4;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_133_1(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + *(int *)(a1 + 44));
  return specialized BidirectionalCollection.last.getter(v4, v2);
}

__n128 *OUTLINED_FUNCTION_138_1(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

id OUTLINED_FUNCTION_139_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  return specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)(v7, v9, v6, v8, v10, a6);
}

void OUTLINED_FUNCTION_140_1()
{
  *(void *)(*(void *)v0 + 16) = v1 + 1;
}

uint64_t OUTLINED_FUNCTION_141_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_143_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_147_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_148_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_153()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_155_0()
{
  return v1 + *(void *)(v2 + 72) * v0;
}

uint64_t OUTLINED_FUNCTION_158_0(uint64_t result)
{
  *(void *)(v1 + 240) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_159_0(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_160_0(uint64_t result)
{
  *(void *)(v1 + 288) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_161_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_162_0()
{
  return outlined init with take of URL?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_167()
{
  return AnalyticsReporter.reportTemplateUsed(model:mode:)(v0, 0);
}

id OUTLINED_FUNCTION_170_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void **)(*(void *)(v1 + 40) + a1);
  return [v4 (SEL)(v2 + 2712)];
}

uint64_t OUTLINED_FUNCTION_171_0(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
}

uint64_t OUTLINED_FUNCTION_179()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_181(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 265) = a2;
  *(void *)(v2 + 248) = a1;
  *(void *)(v2 + 256) = v3;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_182()
{
  return PassthroughSubject.send(_:)();
}

uint64_t OUTLINED_FUNCTION_183()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_184()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_185()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_186()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_187()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_188()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_189()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized MLTrainingSession.saveFeatureExtractionCheckpoint(to:)(a3, a10);
}

uint64_t OUTLINED_FUNCTION_191(uint64_t a1)
{
  *(void *)(a1 + 32) = v1;
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_196(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized MLTrainingSession.resume(job:completion:)(v5, a2, v6, a4, a5);
}

uint64_t OUTLINED_FUNCTION_198()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_199()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_200()
{
  *(unsigned char *)(v2 + *(int *)(v3 + 20)) = v0;
  *(void *)(v2 + *(int *)(v3 + 24)) = v1;
  return Date.init()();
}

id OUTLINED_FUNCTION_202(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  return specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)(v8, v9, v6, v7, v10, a6);
}

uint64_t OUTLINED_FUNCTION_203()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_205()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_206@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 64) = v1;
  *(void *)(v2 + 72) = a1;
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_207()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_209()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_212(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v16 + *(int *)(v15 + 32)) = a15;
}

uint64_t OUTLINED_FUNCTION_214()
{
  return *(void *)(v0 + 216);
}

uint64_t OUTLINED_FUNCTION_215()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_216()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
}

uint64_t OUTLINED_FUNCTION_217()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_219()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_221@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[8] = result;
  v3[9] = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_222(uint64_t a1, uint64_t *a2)
{
  return specialized MLTrainingSession.transition(to:)(3, a2);
}

uint64_t OUTLINED_FUNCTION_228()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_233(uint64_t a1, uint64_t *a2)
{
  return specialized MLTrainingSession.transition(to:)(4, a2);
}

uint64_t OUTLINED_FUNCTION_235()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_236(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 129) = a2;
  *(void *)(v3 + 112) = v2;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_237()
{
  *(void *)(v0 + *(int *)(v2 + 32)) = v1;
}

uint64_t OUTLINED_FUNCTION_238()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_239()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_240@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[8] = result;
  v3[9] = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_241()
{
  return *(void *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_243()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  return MEMORY[0x270EE3CB8](&a13);
}

uint64_t OUTLINED_FUNCTION_245(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_249@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v1 + a1);
  *(void *)(v2 + 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_250(uint64_t a1, uint64_t *a2)
{
  return specialized MLTrainingSession.transition(to:)(2, a2);
}

uint64_t OUTLINED_FUNCTION_254()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_255(uint64_t result)
{
  *(void *)(v1 + 88) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_256(uint64_t result)
{
  *(void *)(v1 + 208) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_257(uint64_t a1)
{
  *(unsigned char *)(v3 - 144) = *(unsigned char *)(v2 + *(int *)(a1 + 28));
  return v1;
}

uint64_t OUTLINED_FUNCTION_258()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_259()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_260()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_261(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized MLTrainingSession.saveFeatureExtractionCheckpoint(to:)(a3, a10);
}

uint64_t OUTLINED_FUNCTION_263(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *(void *)(v11 + 232) = *a11;
  return *(void *)(v11 + 224);
}

uint64_t OUTLINED_FUNCTION_264()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_265()
{
  *(void *)(v2 - 288) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_266()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_267()
{
  uint64_t v4 = *(void *)(v2 - 160);
  *(unsigned char *)(v1 + *(int *)(v4 + 20)) = v0;
  *(void *)(v1 + *(int *)(v4 + 24)) = *(void *)(v2 - 280);
  return Date.init()();
}

void OUTLINED_FUNCTION_268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v14 + *(int *)(v15 + 32)) = a14;
}

uint64_t OUTLINED_FUNCTION_270()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_271()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_274(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return outlined init with take of MLCheckpoint(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_275@<X0>(uint64_t a1@<X8>)
{
  v3[33] = v1;
  uint64_t result = *(void *)(v2 + a1);
  v3[34] = result;
  v3[35] = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_277()
{
  return PassthroughSubject.send(_:)();
}

uint64_t OUTLINED_FUNCTION_278()
{
  return _s8CreateML12MLCheckpointVWOhTm_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_280()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_281()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_283()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
}

uint64_t OUTLINED_FUNCTION_284@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v1 + a1);
  *(void *)(v2 + 264) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_285@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v1 + a1);
  *(void *)(v2 + 216) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_286@<X0>(uint64_t a1@<X8>)
{
  v3[27] = v1;
  uint64_t result = *(void *)(v2 + a1);
  v3[28] = result;
  v3[29] = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_287()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_288()
{
  uint64_t v5 = v1
     + ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))
     + *(void *)(v0 + 72) * (v2 - 1);
  return outlined assign with copy of MLCheckpoint(v3, v5);
}

id OUTLINED_FUNCTION_289(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_290(uint64_t a1)
{
  *(void *)(v2 - 272) = a1;
  return v1;
}

void OUTLINED_FUNCTION_291()
{
  *(void *)(v3 - 152) = v1;
  *(void *)(v3 - 256) = v0;
  *(void *)(v3 - 264) = v2;
}

uint64_t OUTLINED_FUNCTION_292()
{
  return 0x636E657265666E69;
}

id OUTLINED_FUNCTION_293(void *a1)
{
  uint64_t v5 = *(void *)(v3 - 152);
  return objc_msgSend(a1, (SEL)(v1 + 3092), v5, v2, 1);
}

id OUTLINED_FUNCTION_294(void *a1)
{
  uint64_t v5 = *(void *)(v3 - 160);
  return objc_msgSend(a1, (SEL)(v1 + 3092), v5, v2, 1);
}

uint64_t OUTLINED_FUNCTION_295()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_296@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_297@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for MLCheckpoint();
}

uint64_t OUTLINED_FUNCTION_298@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 224) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_299()
{
  return MEMORY[0x270EE3C98]();
}

void OUTLINED_FUNCTION_300(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_301()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_302()
{
  *(void *)(v1 - 280) = *(void *)(v0 + *(int *)(*(void *)(v1 - 152) + 32));
  return lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
}

void OUTLINED_FUNCTION_303(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 232) = a1;
  *(void *)(v3 - 152) = v2;
  *(void *)(v3 - 192) = a2;
}

uint64_t OUTLINED_FUNCTION_304()
{
  return 0x697461756C617665;
}

uint64_t OUTLINED_FUNCTION_305()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_306()
{
  *(void *)(v0 + 280) = v1;
  return *(void *)(v0 + 272);
}

uint64_t OUTLINED_FUNCTION_307()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_310()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_311()
{
  return 0x676E696E69617274;
}

uint64_t OUTLINED_FUNCTION_312()
{
  return PassthroughSubject.send(_:)();
}

uint64_t OUTLINED_FUNCTION_315()
{
  return _s8CreateML12MLCheckpointVWOhTm_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_317(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return outlined init with take of MLCheckpoint(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_318()
{
  uint64_t v4 = *(void *)(v1 + *(int *)(v0 + 44));
  uint64_t v5 = *(void *)(v2 - 200);
  return specialized BidirectionalCollection.last.getter(v4, v5);
}

uint64_t OUTLINED_FUNCTION_319()
{
  return self;
}

void *OUTLINED_FUNCTION_320@<X0>(uint64_t a1@<X8>)
{
  return __swift_project_boxed_opaque_existential_1((void *)(v1 + a1), *(void *)(v1 + a1 + 24));
}

void OUTLINED_FUNCTION_322()
{
  *(void *)(v1 + *(int *)(v0 + 32)) = *(void *)(v2 - 272);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.ModelParameters.ModelAlgorithmType.validate()()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t v2 = OUTLINED_FUNCTION_17(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(v0, v9 - v8);
  outlined init with take of MLImageClassifier.FeatureExtractorType(v10, v5);
  MLImageClassifier.FeatureExtractorType.validate()();
  outlined destroy of MLImageClassifier.FeatureExtractorType(v5);
}

uint64_t MLImageClassifier.ModelParameters.ModelAlgorithmType.description.getter()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t v2 = OUTLINED_FUNCTION_17(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(v0, v9 - v8);
  outlined init with take of MLImageClassifier.FeatureExtractorType(v10, v5);
  uint64_t v14 = MLImageClassifier.FeatureExtractorType.description.getter();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 2108704;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._object = (void *)0x80000002272D6480;
  v12._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  outlined destroy of MLImageClassifier.FeatureExtractorType(v5);
  return v14;
}

uint64_t type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType()
{
  uint64_t result = type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ModelAlgorithmType;
  if (!type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ModelAlgorithmType) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      uint64_t v9 = (uint64_t *)((char *)a1 + v8);
      uint64_t v10 = (uint64_t *)((char *)a2 + v8);
      uint64_t v11 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    uint64_t v9 = *((void *)v8 + 1);
    *(void *)uint64_t v7 = *(void *)v8;
    *((void *)v7 + 1) = v9;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.FeatureExtractorType((uint64_t)a1);
    uint64_t v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      uint64_t v7 = &a1[v6];
      uint64_t v8 = &a2[v6];
      *(void *)uint64_t v7 = *(void *)v8;
      *((void *)v7 + 1) = *((void *)v8 + 1);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.FeatureExtractorType((uint64_t)a1);
    uint64_t v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      uint64_t v6 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType));

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType));

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v6);
}

uint64_t type metadata completion function for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLImageClassifier.FeatureExtractorType(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = v4;
  }
  return result;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(char a1)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7630409;
  switch(a1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x656C62756F44;
      break;
    case 2:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x676E69727453;
      break;
    case 3:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x65636E6575716553;
      break;
    case 4:
      unint64_t v2 = 0xEA00000000007972;
      uint64_t v3 = 0x616E6F6974636944;
      break;
    case 5:
      uint64_t v3 = 0x72724169746C754DLL;
      unint64_t v2 = 0xEA00000000007961;
      break;
    case 6:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x676E697373694DLL;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);

  return swift_bridgeObjectRelease();
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML10_DataTableC_s5Error_pTgm503_s8c10ML11MLDataf74V4pack12columnsNamed2to4type7fillingACSSd_SSAC8PackTypeOAA0C5ValueOtFAA05_E10D0CyKXEfU_AgE11CMLSequenceCSSAE0jS0O0sP0OAMTf1c_n(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7, char a8)
{
  closure #1 in MLDataTable.pack(columnsNamed:to:type:filling:)(a1, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, &v14, &v13);
  swift_release();
  uint64_t v11 = v14;
  swift_bridgeObjectRelease();
  outlined consume of MLDataValue(a6, a7, a8);
  return v11;
}

void specialized Array<A>.featureSequence.getter(uint64_t a1)
{
  if (MEMORY[0x22A676370](0))
  {
    type metadata accessor for CMLSequence();
    uint64_t v2 = swift_allocObject();
    OUTLINED_FUNCTION_0_9(v2);
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain();
      unint64_t v4 = (uint64_t *)(a1 + 40);
      uint64_t v5 = MEMORY[0x263F8D310];
      do
      {
        uint64_t v6 = *(v4 - 1);
        uint64_t v7 = *v4;
        v9[3] = v5;
        v9[4] = &protocol witness table for String;
        v9[0] = v6;
        v9[1] = v7;
        __swift_project_boxed_opaque_existential_1(v9, v5);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v8 = CMLFeatureValue.__allocating_init(_:)();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
        CMLSequence.append(_:)(v8);
        swift_release();
        v4 += 2;
        swift_bridgeObjectRelease();
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_55_9();
  }
  else
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }
}

void MLDataTable.pack(columnsNamed:to:type:filling:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = *(void *)v6;
  if (*(unsigned char *)(v6 + 8))
  {
    *(void *)a6 = v8;
    *(unsigned char *)(a6 + 8) = 1;
    OUTLINED_FUNCTION_55_9();
    id v11 = v9;
  }
  else
  {
    int v14 = *a4;
    uint64_t v15 = *(void **)a5;
    uint64_t v16 = *(void **)(a5 + 8);
    char v17 = *(unsigned char *)(a5 + 16);
    swift_retain();
    uint64_t v18 = MEMORY[0x22A676370](0);
    if (v18)
    {
      uint64_t v19 = v18;
      type metadata accessor for CMLSequence();
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = v19;
      *(unsigned char *)(inited + 24) = 1;
      if (*(void *)(a1 + 16))
      {
        specialized Array<A>.featureSequence.getter(a1);
        uint64_t v22 = v21;
        swift_release();
      }
      else
      {
        _DataTable.columnNames.getter(&v28);
        swift_release();
        uint64_t v22 = v28;
      }
      uint64_t v28 = v22;
      swift_bridgeObjectRetain();
      outlined copy of MLDataValue(v15, v16, v17);
      if (v14) {
        char v23 = 4;
      }
      else {
        char v23 = 3;
      }
      uint64_t v24 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML10_DataTableC_s5Error_pTgm503_s8c10ML11MLDataf74V4pack12columnsNamed2to4type7fillingACSSd_SSAC8PackTypeOAA0C5ValueOtFAA05_E10D0CyKXEfU_AgE11CMLSequenceCSSAE0jS0O0sP0OAMTf1c_n(v8, &v28, a2, a3, v23, v15, v16, v17);
      char v26 = v25;
      swift_release();
      *(void *)a6 = v24;
      *(unsigned char *)(a6 + 8) = v26 & 1;
      OUTLINED_FUNCTION_55_9();
    }
    else
    {
      __break(1u);
    }
  }
}

BOOL static MLDataTable.PackType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t closure #1 in MLDataTable.pack(columnsNamed:to:type:filling:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, void *a10)
{
  char v26 = a9;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *a2;
  unint64_t v15 = 0x5060403020100uLL >> (8 * a5);
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  char v25 = a8;
  uint64_t v16 = swift_retain();
  v20[2] = v13;
  v20[3] = v14;
  char v21 = v15;
  uint64_t v22 = MLDataValue.featureValue.getter(v16, v17);
  uint64_t v18 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.pack(columnNames:newColumnName:type:value:), (uint64_t)v20, a3, a4);
  swift_release();
  uint64_t result = swift_release();
  if (v10)
  {
    *a10 = v10;
  }
  else
  {
    type metadata accessor for _DataTable();
    swift_allocObject();
    uint64_t result = (uint64_t)_DataTable.init(impl:)((uint64_t)v18);
    *char v26 = result;
  }
  return result;
}

id MLDataTable.unpack(columnNamed:valueTypes:indexSubset:keySubset:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = a6;
  uint64_t v8 = *(void **)v6;
  if ((*(unsigned char *)(v6 + 8) & 1) == 0)
  {
    uint64_t v61 = a5;
    outlined copy of Result<_DataTable, Error>(v8, 0);
    if (!MEMORY[0x22A676370](0))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      id result = (id)swift_unexpectedError();
      __break(1u);
      return result;
    }
    type metadata accessor for CMLSequence();
    uint64_t inited = swift_initStackObject();
    uint64_t v15 = OUTLINED_FUNCTION_0_9(inited);
    if (a4)
    {
      uint64_t v60 = v15;
      OUTLINED_FUNCTION_3_74();
      outlined consume of Result<_DataTable, Error>(v8, 0);
      if (v67 == 1)
      {
        outlined consume of Result<_DataTable, Error>(v66, 1);
        goto LABEL_17;
      }
      swift_retain();
      _UntypedColumn.type.getter(&v72);
      OUTLINED_FUNCTION_9_49();
      if (v17 != 3)
      {
LABEL_17:
        OUTLINED_FUNCTION_7_59();
        OUTLINED_FUNCTION_6_50((uint64_t)"Index subset specified on non-Sequence typed column. Column '");
        v34._countAndFlagsBits = a1;
        v34._object = a2;
        String.append(_:)(v34);
        OUTLINED_FUNCTION_1_62();
        OUTLINED_FUNCTION_2_71();
        outlined consume of Result<_DataTable, Error>(v8, 0);
        if ((v73 & 1) == 0)
        {
          swift_retain();
          _UntypedColumn.type.getter(v71);
          char v35 = OUTLINED_FUNCTION_8_48();
LABEL_37:
          specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v35);
          v49._countAndFlagsBits = 39;
          v49._object = (void *)0xE100000000000000;
          String.append(_:)(v49);
          char v50 = (char)v66;
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          uint64_t v51 = swift_allocError();
          OUTLINED_FUNCTION_0_37(v51, v52);
          id result = (id)swift_release();
          *(void *)uint64_t v7 = a4;
          *(unsigned char *)(v7 + 8) = v50;
          return result;
        }
LABEL_35:
        outlined consume of Result<_DataTable, Error>(v72, 1);
        char v35 = 6;
        goto LABEL_37;
      }
      uint64_t v59 = a1;
      if (!MEMORY[0x22A676370](0)) {
        goto LABEL_41;
      }
      uint64_t v16 = swift_allocObject();
      OUTLINED_FUNCTION_0_9(v16);
      uint64_t v18 = *(void *)(a4 + 16);
      if (v18)
      {
        uint64_t v58 = v8;
        uint64_t v19 = v16;
        uint64_t v56 = a2;
        uint64_t v57 = v7;
        swift_bridgeObjectRetain();
        uint64_t v20 = 0;
        uint64_t v21 = MEMORY[0x263F8D6C8];
        while (1)
        {
          uint64_t v22 = *(void **)(a4 + 8 * v20 + 32);
          uint64_t v69 = v21;
          uint64_t v70 = &protocol witness table for Int;
          id v66 = v22;
          uint64_t v23 = __swift_project_boxed_opaque_existential_1(&v66, v21);
          specialized handling<A, B>(_:_:)(*v23, v24, v25, v26, v27, v28, v29, v30, (uint64_t)v56, v57, (uint64_t)v58, v59, v60, v61, v62, v63, v64, v65, (uint64_t)v66,
            v67,
            v68,
            v69,
            (uint64_t)v70,
            v71[0],
            v71[1],
            (uint64_t)v72,
            v73,
            v74,
            v75,
            v76);
          uint64_t v32 = v31;
          if (!v31) {
            break;
          }
          type metadata accessor for CMLFeatureValue();
          swift_initStackObject();
          uint64_t v33 = CMLFeatureValue.init(rawValue:ownsValue:)(v32, 1);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v66);
          CMLSequence.append(_:)(v33);
          swift_release();
          if (v18 == ++v20)
          {
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v7 = v57;
            a2 = v56;
            uint64_t v16 = v19;
            uint64_t v8 = v58;
            goto LABEL_20;
          }
        }
        __break(1u);
        goto LABEL_39;
      }
      swift_release();
LABEL_20:
      a1 = v59;
    }
    else
    {
      uint64_t v16 = v15;
    }
    if (v61)
    {
      OUTLINED_FUNCTION_3_74();
      outlined consume of Result<_DataTable, Error>(v8, 0);
      if (v67 == 1)
      {
        outlined consume of Result<_DataTable, Error>(v66, 1);
        goto LABEL_34;
      }
      swift_retain();
      _UntypedColumn.type.getter(&v72);
      OUTLINED_FUNCTION_9_49();
      if (v36 != 4)
      {
LABEL_34:
        OUTLINED_FUNCTION_7_59();
        OUTLINED_FUNCTION_6_50((uint64_t)"Key subset specified on non-Dictionary typed column. Column '");
        v48._countAndFlagsBits = a1;
        v48._object = a2;
        String.append(_:)(v48);
        OUTLINED_FUNCTION_1_62();
        OUTLINED_FUNCTION_2_71();
        outlined consume of Result<_DataTable, Error>(v8, 0);
        if ((v73 & 1) == 0)
        {
          swift_retain();
          _UntypedColumn.type.getter(v71);
          char v35 = OUTLINED_FUNCTION_8_48();
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      specialized Array<A>.featureSequence.getter(v61);
      uint64_t v38 = v37;
      swift_release();
      uint64_t v16 = v38;
    }
    uint64_t v39 = MEMORY[0x22A676360](0);
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v59 = a1;
      type metadata accessor for CMLFVTypeSequence();
      uint64_t v41 = swift_initStackObject();
      uint64_t v42 = v41;
      *(void *)(v41 + 16) = v40;
      if (!a3 || (uint64_t v43 = *(void *)(a3 + 16)) == 0)
      {
LABEL_33:
        MEMORY[0x270FA5388](v41);
        v55[2] = v47;
        v55[3] = v42;
        v55[4] = v16;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        unint64_t v53 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.unpack(columnName:types:limit:), (uint64_t)v55, v59, (uint64_t)a2);
        swift_release();
        type metadata accessor for _DataTable();
        swift_allocObject();
        uint64_t v54 = _DataTable.init(impl:)((uint64_t)v53);
        outlined consume of Result<_DataTable, Error>(v8, 0);
        swift_release();
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        tc_v1_release();
        id result = (id)swift_release();
        *(void *)uint64_t v7 = v54;
        *(unsigned char *)(v7 + 8) = 0;
        return result;
      }
      uint64_t v58 = v8;
      uint64_t v44 = v16;
      swift_bridgeObjectRetain();
      uint64_t v45 = 0;
      while (1)
      {
        CMLFVTypeSequence.append(_:)((CreateML::CMLFeatureValueType)(0x5060403020100uLL >> (8 * *(unsigned char *)(a3 + v45 + 32))));
        if (v46) {
          goto LABEL_42;
        }
        if (v43 == ++v45)
        {
          uint64_t v41 = swift_bridgeObjectRelease();
          uint64_t v16 = v44;
          uint64_t v8 = v58;
          goto LABEL_33;
        }
      }
    }
    goto LABEL_40;
  }
  *(void *)a6 = v8;
  *(unsigned char *)(a6 + 8) = 1;

  return outlined copy of Result<_DataTable, Error>(v8, 1);
}

void *partial apply for closure #1 in CMLTable.unpack(columnName:types:limit:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in CMLTable.unpack(columnName:types:limit:)(a1, v2[2], v2[3], v2[4], a2);
}

void MLDataTable.PackType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MLDataTable.PackType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type MLDataTable.PackType and conformance MLDataTable.PackType()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.PackType and conformance MLDataTable.PackType;
  if (!lazy protocol witness table cache variable for type MLDataTable.PackType and conformance MLDataTable.PackType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.PackType and conformance MLDataTable.PackType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MLDataTable.PackType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2272B290CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.PackType()
{
  return &type metadata for MLDataTable.PackType;
}

uint64_t partial apply for closure #1 in CMLTable.pack(columnNames:newColumnName:type:value:)(uint64_t a1)
{
  return closure #1 in CMLTable.pack(columnNames:newColumnName:type:value:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

void OUTLINED_FUNCTION_0_37(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 1;
  outlined consume of Result<_DataTable, Error>(v4, 0);
}

void OUTLINED_FUNCTION_1_62()
{
  uint64_t v1 = 0x20666F2073692027;
  unint64_t v2 = 0xEE00272065707974;
  String.append(_:)(*(Swift::String *)&v1);
}

void OUTLINED_FUNCTION_2_71()
{
  *(void *)(v3 - 184) = v0;
  *(unsigned char *)(v3 - 176) = 0;
  outlined copy of Result<_DataTable, Error>(v0, 0);
  MLDataTable.subscript.getter(v1, v2, v3 - 168);
}

void OUTLINED_FUNCTION_3_74()
{
  *(void *)(v3 - 168) = v0;
  *(unsigned char *)(v3 - 160) = 0;
  outlined copy of Result<_DataTable, Error>(v0, 0);
  MLDataTable.subscript.getter(v1, v2, v3 - 224);
}

void OUTLINED_FUNCTION_6_50(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD00000000000003DLL;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

void OUTLINED_FUNCTION_7_59()
{
  *(void *)(v0 - 224) = 0;
  *(void *)(v0 - 216) = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
}

uint64_t OUTLINED_FUNCTION_8_48()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v0, 0);
  return *(unsigned __int8 *)(v1 - 184);
}

void OUTLINED_FUNCTION_9_49()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_10_41()
{
  return v0;
}

uint64_t static _AudioUtilities.validateAudioURLs(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unsigned int v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  id v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v36 = a1;
  if (v12)
  {
    uint64_t v14 = *(void *)(v3 + 16);
    uint64_t v13 = v3 + 16;
    unint64_t v38 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
    uint64_t v15 = a1 + v38;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v46 = v14;
    uint64_t v43 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v44 = v16;
    swift_bridgeObjectRetain();
    uint64_t v47 = MEMORY[0x263F8EE78];
    unint64_t v37 = 0x80000002272DC320;
    long long v42 = xmmword_2272CB370;
    uint64_t v39 = v6;
    uint64_t v40 = v13;
    while (1)
    {
      OUTLINED_FUNCTION_0_38();
      v18(v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v2) == 1) {
        break;
      }
      uint64_t v19 = *v45;
      (*v45)(v8, v11, v2);
      if (static _AudioUtilities.validateOneAudioURL(from:)((uint64_t)v8))
      {
        OUTLINED_FUNCTION_0_38();
        v21(v20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = v33;
        }
        unint64_t v22 = *(void *)(v47 + 16);
        if (v22 >= *(void *)(v47 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = v34;
        }
        uint64_t v23 = v47;
        *(void *)(v47 + 16) = v22 + 1;
        uint64_t v24 = v44;
        v19((char *)(v23 + v38 + v22 * v44), v6, v2);
      }
      else
      {
        unint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        unint64_t v48 = 0xD000000000000020;
        unint64_t v49 = v37;
        v25._countAndFlagsBits = URL.path.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._countAndFlagsBits = 46;
        v26._object = (void *)0xE100000000000000;
        String.append(_:)(v26);
        unint64_t v27 = v48;
        unint64_t v28 = v49;
        int v41 = static os_log_type_t.info.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = v42;
        uint64_t v30 = MEMORY[0x263F8D310];
        *(void *)(v29 + 56) = MEMORY[0x263F8D310];
        *(void *)(v29 + 32) = v27;
        *(void *)(v29 + 40) = v28;
        swift_bridgeObjectRetain();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        type metadata accessor for OS_os_log();
        uint64_t v31 = (void *)static OS_os_log.default.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = v42;
        *(void *)(v32 + 56) = v30;
        *(void *)(v32 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v32 + 32) = v27;
        *(void *)(v32 + 40) = v28;
        swift_bridgeObjectRetain();
        unsigned int v6 = v39;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        uint64_t v24 = v44;
        swift_bridgeObjectRelease();
      }
      (*v43)(v8, v2);
      v15 += v24;
      if (!--v12) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v47 = MEMORY[0x263F8EE78];
LABEL_14:
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v47;
}

uint64_t static _AudioUtilities.validateOneAudioURL(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v4, a1, v2);
  id v6 = objc_allocWithZone(MEMORY[0x263EF9380]);
  id v7 = @nonobjc AVAudioFile.init(forReading:)((uint64_t)v4);
  id v8 = objc_msgSend(v7, sel_fileFormat);
  objc_msgSend(v8, sel_sampleRate);
  double v10 = v9;

  if (v10 <= 0.0)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v12._countAndFlagsBits = 0xD00000000000002BLL;
    v12._object = (void *)0x80000002272DC350;
    String.append(_:)(v12);
    lazy protocol witness table accessor for type URL and conformance URL();
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._object = (void *)0x80000002272DC380;
    v14._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v14);
    id v15 = objc_msgSend(v7, sel_fileFormat);
    objc_msgSend(v15, sel_sampleRate);

    Double.write<A>(to:)();
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t v17 = v22;
    uint64_t v18 = (void *)v23;
    os_log_type_t v19 = static os_log_type_t.default.getter();
    v20._countAndFlagsBits = v17;
    v20._object = v18;
    log(_:type:)(v20, v19);
    swift_bridgeObjectRelease();

    return 0;
  }
  else
  {

    return 1;
  }
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = v2;
  v1[5] = v4;
  v1[6] = v0;
  v1[3] = v5;
  v1[4] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v1[7] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[8] = v8;
  v1[9] = OUTLINED_FUNCTION_5();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v1[10] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[11] = v10;
  v1[12] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v1[13] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[14] = v12;
  v1[15] = OUTLINED_FUNCTION_5();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v1[16] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[17] = v14;
  v1[18] = OUTLINED_FUNCTION_5();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v1[19] = v15;
  OUTLINED_FUNCTION_17(v15);
  v1[20] = OUTLINED_FUNCTION_5();
  v1[2] = v3;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v16, v17, v18);
}

{
  uint64_t *v0;
  void (*v1)(void);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  outlined init with copy of URL?(v0[6], v0[20], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3_4();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_10_10();
    v1();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[23] = (uint64_t)v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *uint64_t v2 = v0;
    v2[1] = specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_25_32();
    return MEMORY[0x270EEA8D8](v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    OUTLINED_FUNCTION_10_10();
    v11();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[21] = (uint64_t)v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *uint64_t v12 = v0;
    v12[1] = specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_25_32();
    return MEMORY[0x270EEA880](v13, v14, v15, v16, v17, v18, v19);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_9();
  v10();
  uint64_t v11 = OUTLINED_FUNCTION_22();
  v12(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  void (*v10)(void);
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_9();
  v10();
  uint64_t v11 = OUTLINED_FUNCTION_23();
  v12(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v1[6] = v6;
  v1[7] = v0;
  v1[4] = v7;
  v1[5] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v1[8] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[9] = v10;
  v1[10] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v1[11] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[12] = v12;
  v1[13] = OUTLINED_FUNCTION_5();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v1[14] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[15] = v14;
  v1[16] = OUTLINED_FUNCTION_5();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v1[17] = v15;
  OUTLINED_FUNCTION_1(v15);
  v1[18] = v16;
  v1[19] = OUTLINED_FUNCTION_5();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v1[20] = v17;
  OUTLINED_FUNCTION_17(v17);
  v1[21] = OUTLINED_FUNCTION_5();
  v1[2] = v5;
  v1[3] = v3;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v18, v19, v20);
}

{
  void *v0;
  void *v1;
  void *v2;
  void (*v3)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0 + 3;
  outlined init with copy of URL?(v0[7], v0[21], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_10_10();
    v3();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[24] = v4;
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *uint64_t v4 = v0;
    v4[1] = specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    uint64_t v6 = v0[11];
    uint64_t v7 = v0[5];
    uint64_t v8 = v0[6];
    uint64_t v9 = v0[10];
    return MEMORY[0x270EEA8D0](v9, v1, v2, v7, v8, v6, v5, v5);
  }
  else
  {
    OUTLINED_FUNCTION_10_10();
    v10();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[22] = v11;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *uint64_t v11 = v0;
    v11[1] = specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    uint64_t v13 = v0[17];
    uint64_t v14 = v0[5];
    uint64_t v15 = v0[6];
    uint64_t v16 = v0[16];
    return MEMORY[0x270EEA878](v16, v1, v2, v14, v15, v13, v12, v12);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_9();
  v10();
  uint64_t v11 = OUTLINED_FUNCTION_22();
  v12(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  void (*v10)(void);
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_9();
  v10();
  uint64_t v11 = OUTLINED_FUNCTION_23();
  v12(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a3);
    OUTLINED_FUNCTION_1(v7);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v11 = *(void *)(v10 + 72);
    do
    {
      swift_getKeyPath();
      OUTLINED_FUNCTION_115_3();
      swift_getAtKeyPath();
      swift_release();
      uint64_t v4 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v4 = v17;
      }
      unint64_t v12 = *(void *)(v4 + 16);
      if (v12 >= *(void *)(v4 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v4 = v17;
      }
      *(void *)(v4 + 16) = v12 + 1;
      uint64_t v13 = v4 + 16 * v12;
      *(void *)(v13 + 32) = v15;
      *(void *)(v13 + 40) = v16;
      v9 += v11;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_18CreateMLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f80ML17MLImageClassifierV10DataSourceO17annotatedFeatures4fromSay0A12MLComponents16hI60Vy10Foundation3URLVSSGGSDySSSayAMGG_tFZAOSS_APtXEfU_AnMXEfU_SSTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v24 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  uint64_t v8 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v19[1] = v3;
    uint64_t v29 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v12 = v29;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v20 = *(void *)(v13 + 56);
    uint64_t v21 = v14;
    v19[2] = v8 + 32;
    uint64_t v22 = v13;
    uint64_t v16 = v24;
    do
    {
      v21(v16, v15, v25);
      uint64_t v27 = v26;
      uint64_t v28 = a3;
      swift_bridgeObjectRetain();
      AnnotatedFeature.init(feature:annotation:)();
      uint64_t v29 = v12;
      unint64_t v17 = *(void *)(v12 + 16);
      if (v17 >= *(void *)(v12 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v12 = v29;
      }
      *(void *)(v12 + 16) = v17 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v17, v10, v23);
      v15 += v20;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v12;
}

double specialized AnnotatedFeatureStore.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BlobsFile.init()((uint64_t)&v29);
  uint64_t v36 = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = v9 + 16;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v28 = v9 + 16;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = *(void *)(v13 + 56);
    uint64_t v25 = a2;
    uint64_t v26 = v15;
    uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
    v24[1] = a1;
    swift_bridgeObjectRetain_n();
    do
    {
      v27(v11, v14, v8);
      AnnotatedFeature.feature.getter();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      uint64_t v17 = MLShapedArrayProtocol.scalars.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      BlobsFile.appendBlob(_:)((Swift::OpaquePointer)v17);
      swift_bridgeObjectRelease();
      (*v16)(v11, v8);
      v14 += v26;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease_n();
    a1 = v36;
    a2 = v25;
  }
  uint64_t v18 = v34;
  uint64_t v19 = v35;
  double result = v30;
  long long v21 = v31;
  long long v22 = v32;
  long long v23 = v33;
  *(_OWORD *)a2 = v29;
  *(double *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 24) = v21;
  *(_OWORD *)(a2 + 40) = v22;
  *(_OWORD *)(a2 + 56) = v23;
  *(void *)(a2 + 72) = v18;
  *(void *)(a2 + 80) = v19;
  *(void *)(a2 + 88) = a1;
  return result;
}

uint64_t specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v2 = v1;
  v0[38] = v3;
  v0[39] = v4;
  v0[37] = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  v0[40] = v5;
  OUTLINED_FUNCTION_1(v5);
  v0[41] = v6;
  v0[42] = OUTLINED_FUNCTION_5();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>?);
  OUTLINED_FUNCTION_17(v7);
  v0[43] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>);
  v0[44] = v8;
  OUTLINED_FUNCTION_1(v8);
  v0[45] = v9;
  v0[46] = OUTLINED_FUNCTION_5();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator);
  v0[47] = v10;
  OUTLINED_FUNCTION_1(v10);
  v0[48] = v11;
  v0[49] = OUTLINED_FUNCTION_5();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Augmenter<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator>);
  v0[50] = v12;
  OUTLINED_FUNCTION_1(v12);
  v0[51] = v13;
  v0[52] = OUTLINED_FUNCTION_5();
  v0[35] = v2;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v14, v15, v16);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (v0[39] && (uint64_t v1 = v0[38]) != 0)
  {
    uint64_t v2 = swift_allocEmptyBox();
    v0[53] = v2;
    uint64_t v43 = OUTLINED_FUNCTION_27_6();
    *(void *)(v43 + 16) = v1;
    *(void *)(v43 + 24) = v2;
    swift_bridgeObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    uint64_t v3 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for CIImage);
    long long v42 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    int v41 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    unint64_t v38 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    unint64_t v37 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    uint64_t v9 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[32] = v3;
    v0[33] = v8;
    v0[34] = v9;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v11 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[12] = v3;
    v0[13] = v7;
    v0[14] = v6;
    v0[15] = OpaqueTypeConformance2;
    v0[16] = v11;
    uint64_t v12 = swift_getOpaqueTypeConformance2();
    v0[17] = v3;
    v0[18] = v5;
    v0[19] = v6;
    v0[20] = v12;
    v0[21] = v11;
    uint64_t v13 = OUTLINED_FUNCTION_45_20();
    uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[2] = v3;
    v0[3] = v36;
    v0[4] = v4;
    v0[5] = v13;
    v0[6] = v14;
    uint64_t v15 = OUTLINED_FUNCTION_45_20();
    uint64_t v16 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[27] = v3;
    v0[28] = v38;
    v0[29] = v37;
    v0[30] = v15;
    v0[31] = v16;
    uint64_t v17 = OUTLINED_FUNCTION_45_20();
    uint64_t v18 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[7] = v3;
    v0[8] = v40;
    v0[9] = v39;
    v0[10] = v17;
    v0[11] = v18;
    uint64_t v19 = OUTLINED_FUNCTION_45_20();
    uint64_t v20 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[22] = v3;
    v0[23] = v42;
    v0[24] = v41;
    v0[25] = v19;
    v0[26] = v20;
    OUTLINED_FUNCTION_45_20();
    Augmenter.init<A>(generator:_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<CIImage, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<CIImage, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<CIImage, String>]);
    Augmenter.applied<A, B>(to:upsampledBy:)();
    UpsampledAugmentationSequence.makeAsyncIterator()();
    OUTLINED_FUNCTION_25_0();
    v21();
    v0[54] = v0[37];
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator and conformance UpsampledAugmentationSequence<A, B, C, D>.AsyncIterator, &demangling cache variable for type metadata for UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator);
    long long v22 = swift_task_alloc();
    long long v23 = (void *)OUTLINED_FUNCTION_89_3(v22);
    *long long v23 = v24;
    v23[1] = specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:);
    uint64_t v25 = OUTLINED_FUNCTION_88_3();
    return MEMORY[0x270FA1E80](v25, v26, v27, v28, v29, v30, v31, v32);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v33 = OUTLINED_FUNCTION_174();
    return v34(v33);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 448) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(void);
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[40];
  uint64_t v3 = OUTLINED_FUNCTION_133();
  OUTLINED_FUNCTION_57_4(v3, v4, v2);
  if (v5)
  {
    OUTLINED_FUNCTION_29_24();
    v6();
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_11_3();
    v7();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_174();
    OUTLINED_FUNCTION_25_32();
    return v10(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    uint64_t v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0[41] + 32);
    v17(v0[42], v1, v2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = v0[54];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v19 = v35;
    }
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20 >= *(void *)(v19 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v19 = v36;
    }
    long long v22 = v0[41];
    long long v21 = v0[42];
    long long v23 = v0[40];
    *(void *)(v19 + 16) = v20 + 1;
    v17(v19+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v20, v21, v23);
    v0[54] = v19;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator and conformance UpsampledAugmentationSequence<A, B, C, D>.AsyncIterator, &demangling cache variable for type metadata for UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator);
    uint64_t v24 = swift_task_alloc();
    uint64_t v25 = (void *)OUTLINED_FUNCTION_89_3(v24);
    *uint64_t v25 = v26;
    v25[1] = specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:);
    OUTLINED_FUNCTION_88_3();
    OUTLINED_FUNCTION_25_32();
    return MEMORY[0x270FA1E80](v27, v28, v29, v30, v31, v32, v33, v34);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  *(void *)(v0 + 288) = *(void *)(v0 + 448);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_9();
  v10();
  uint64_t v11 = OUTLINED_FUNCTION_3_4();
  v12(v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_29();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t specialized Collection.randomSplit<A, B>(strategy:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if ((a3 & 0x100) == 0)
  {
    OUTLINED_FUNCTION_103_3();
    if (!v4) {
      goto LABEL_6;
    }
LABEL_5:
    swift_bridgeObjectRetain();
    return MEMORY[0x263F8EE78];
  }
  if (*(void *)(a4 + 16) < 0x32uLL) {
    goto LABEL_5;
  }
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
  return OUTLINED_FUNCTION_82_5(v6);
}

{
  char v4;
  __n128 v6;

  if ((a3 & 0x100) == 0)
  {
    OUTLINED_FUNCTION_103_3();
    if (!v4) {
      goto LABEL_6;
    }
LABEL_5:
    swift_bridgeObjectRetain();
    return MEMORY[0x263F8EE78];
  }
  if (*(void *)(a4 + 16) < 0x32uLL) {
    goto LABEL_5;
  }
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<URL, String>]);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<URL, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<URL, String>]);
  return OUTLINED_FUNCTION_82_5(v6);
}

uint64_t specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:)()
{
  OUTLINED_FUNCTION_34();
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 24), *(void *)(*(void *)(v0 + 24) + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<CIImage, String>]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<CIImage, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<CIImage, String>]);
  *uint64_t v1 = v0;
  v1[1] = specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:);
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270EEA458]();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *__n128 v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  char *v8 = v7;
  *(void *)(v5 + 40) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 48) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 48));
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_30();
  return v0();
}

uint64_t specialized Transformer.applied<A, B>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[11] = a6;
  v7[12] = v6;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  v7[6] = a1;
  uint64_t v8 = type metadata accessor for ImageReader();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Event();
  v7[16] = v9;
  v7[17] = *(void *)(v9 - 8);
  v7[18] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  v7[19] = v10;
  v7[20] = *(void *)(v10 - 8);
  v7[21] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  v7[22] = v11;
  v7[23] = *(void *)(v11 - 8);
  v7[24] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v7[25] = v12;
  v7[26] = *(void *)(v12 - 8);
  v7[27] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized Transformer.applied<A, B>(to:eventHandler:), 0, 0);
}

uint64_t specialized Transformer.applied<A, B>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  OUTLINED_FUNCTION_72_5();
  uint64_t v40 = v15;
  OUTLINED_FUNCTION_25();
  uint64_t v24 = v13[8];
  uint64_t v25 = v13[9] >> 1;
  v13[28] = v25 - v24;
  if (__OFSUB__(v25, v24))
  {
    __break(1u);
    goto LABEL_11;
  }
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (v25 != v24)
  {
    uint64_t v36 = v13[26];
    uint64_t v37 = v13[8];
    unint64_t v38 = v13[9];
    v13[29] = v37;
    v13[30] = v26;
    uint64_t v16 = swift_unknownObjectRetain();
    if (v37 < (uint64_t)(v38 >> 1))
    {
      (*(void (**)(void, uint64_t, void))(v36 + 16))(v13[27], v13[7] + *(void *)(v36 + 72) * v37, v13[25]);
      static Task<>.checkCancellation()();
      AnnotatedFeature.feature.getter();
      uint64_t v39 = (void *)swift_task_alloc();
      v13[31] = v39;
      *uint64_t v39 = v13;
      v39[1] = specialized Transformer.applied<A, B>(to:eventHandler:);
      OUTLINED_FUNCTION_25_32();
      return MEMORY[0x270EEA448](v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, v13, v14, v40);
    }
LABEL_11:
    __break(1u);
    return MEMORY[0x270EEA448](v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, v13, v14, v40);
  }
  OUTLINED_FUNCTION_91_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_174();
  OUTLINED_FUNCTION_25_32();
  return v29(v27, v28, v29, v30, v31, v32, v33, v34);
}

uint64_t specialized Transformer.applied<A, B>(to:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_29_24();
  v7();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  void (*v0)(void);
  uint64_t v1;
  uint64_t (*v2)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_29_24();
  v0();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_91_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_25_32();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  OUTLINED_FUNCTION_11();
  v1[8] = v2;
  v1[9] = v0;
  v1[6] = v3;
  v1[7] = v4;
  uint64_t v5 = type metadata accessor for ImageReader();
  v1[10] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[11] = v6;
  v1[12] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for Event();
  v1[13] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[14] = v8;
  v1[15] = OUTLINED_FUNCTION_5();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  v1[16] = v9;
  OUTLINED_FUNCTION_1(v9);
  v1[17] = v10;
  v1[18] = OUTLINED_FUNCTION_5();
  uint64_t v11 = type metadata accessor for URL();
  v1[19] = v11;
  OUTLINED_FUNCTION_1(v11);
  v1[20] = v12;
  v1[21] = OUTLINED_FUNCTION_5();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v1[22] = v13;
  OUTLINED_FUNCTION_1(v13);
  v1[23] = v14;
  v1[24] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 248) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_29_24();
  v7();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  void (*v0)(void);
  uint64_t v1;
  uint64_t (*v2)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_29_24();
  v0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_98_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_25_32();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

#error "2272B6074: call analysis failed (funcsize=237)"

uint64_t specialized Transformer.applied<A, B>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_34();
  uint64_t v17 = *(void *)(*(void *)(v16 + 48) + 16);
  *(void *)(v16 + 200) = v17;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v19 = v18;
  if (v17)
  {
    uint64_t v20 = *(void *)(v16 + 48);
    uint64_t v21 = *(void *)(v16 + 176);
    uint64_t v22 = *(void *)(v16 + 184);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    v22 += 16;
    int v24 = *(_DWORD *)(v22 + 64);
    *(_DWORD *)(v16 + 256) = v24;
    *(void *)(v16 + 208) = *(void *)(v22 + 56);
    *(void *)(v16 + 216) = v23;
    *(void *)(v16 + 224) = 0;
    *(void *)(v16 + 232) = v19;
    uint64_t v25 = *(void *)(v16 + 192);
    uint64_t v26 = v20 + ((v24 + 32) & ~(unint64_t)v24);
    swift_bridgeObjectRetain();
    v23(v25, v26, v21);
    static Task<>.checkCancellation()();
    AnnotatedFeature.feature.getter();
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v16 + 240) = v30;
    *uint64_t v30 = v16;
    v30[1] = specialized Transformer.applied<A, B>(to:eventHandler:);
    uint64_t v33 = *(void *)(v16 + 168);
    uint64_t v34 = *(void *)(v16 + 80);
    uint64_t v35 = *(void *)(v16 + 56);
    uint64_t v36 = *(void *)(v16 + 64);
    uint64_t v37 = MEMORY[0x263F042F8];
    return MEMORY[0x270EEA448](v16 + 32, v33, v35, v36, v34, v37, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_98_3();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = OUTLINED_FUNCTION_174();
    return v28(v27);
  }
}

#error "2272B6954: call analysis failed (funcsize=235)"

uint64_t ImageClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  OUTLINED_FUNCTION_108_0();
  uint64_t v3 = type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_42_5(v3);
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles) = MEMORY[0x263F8EE78];
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles) = v4;
  uint64_t v5 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
  BlobsFile.init()((uint64_t)&v17);
  uint64_t v6 = v22;
  uint64_t v7 = v23;
  *(_OWORD *)uint64_t v5 = v17;
  *(void *)(v5 + 16) = v18;
  *(_OWORD *)(v5 + 24) = v19;
  *(_OWORD *)(v5 + 40) = v20;
  *(_OWORD *)(v5 + 56) = v21;
  *(void *)(v5 + 72) = v6;
  *(void *)(v5 + 80) = v7;
  *(void *)(v5 + 88) = v4;
  uint64_t v8 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  BlobsFile.init()((uint64_t)&v24);
  uint64_t v9 = v29;
  uint64_t v10 = v30;
  *(_OWORD *)uint64_t v8 = v24;
  *(void *)(v8 + 16) = v25;
  *(_OWORD *)(v8 + 24) = v26;
  *(_OWORD *)(v8 + 40) = v27;
  *(_OWORD *)(v8 + 56) = v28;
  *(void *)(v8 + 72) = v9;
  *(void *)(v8 + 80) = v10;
  *(void *)(v8 + 88) = v4;
  OUTLINED_FUNCTION_108_0();
  uint64_t v11 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_42_5(v11);
  OUTLINED_FUNCTION_108_0();
  uint64_t v12 = type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_42_5(v12);
  uint64_t v13 = OUTLINED_FUNCTION_108_0();
  type metadata accessor for MLClassifierMetrics(v13);
  OUTLINED_FUNCTION_67(v4);
  OUTLINED_FUNCTION_67(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics);
  uint64_t v14 = OUTLINED_FUNCTION_108_0();
  uint64_t v15 = type metadata accessor for TrainingTablePrinter(v14);
  OUTLINED_FUNCTION_42_5(v15);
  outlined init with take of MLImageClassifier.Model(a1, v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

void ImageClassifierTrainingSessionDelegate.init(filesByLabel:modelParameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v24 = v1;
  uint64_t v25 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  uint64_t v10 = type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_67(v9);
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles) = MEMORY[0x263F8EE78];
  *(void *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles) = v11;
  uint64_t v12 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
  BlobsFile.init()((uint64_t)&v27);
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  *(_OWORD *)uint64_t v12 = v27;
  *(void *)(v12 + 16) = v28;
  *(_OWORD *)(v12 + 24) = v29;
  *(_OWORD *)(v12 + 40) = v30;
  *(_OWORD *)(v12 + 56) = v31;
  *(void *)(v12 + 72) = v13;
  *(void *)(v12 + 80) = v14;
  *(void *)(v12 + 88) = v11;
  uint64_t v15 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  BlobsFile.init()((uint64_t)&v34);
  uint64_t v16 = v39;
  uint64_t v17 = v40;
  *(_OWORD *)uint64_t v15 = v34;
  *(void *)(v15 + 16) = v35;
  *(_OWORD *)(v15 + 24) = v36;
  *(_OWORD *)(v15 + 40) = v37;
  *(_OWORD *)(v15 + 56) = v38;
  *(void *)(v15 + 72) = v16;
  *(void *)(v15 + 80) = v17;
  *(void *)(v15 + 88) = v11;
  OUTLINED_FUNCTION_105_3();
  uint64_t v18 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_65_8(v18);
  OUTLINED_FUNCTION_105_3();
  uint64_t v19 = type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_65_8(v19);
  uint64_t v20 = OUTLINED_FUNCTION_105_3();
  uint64_t v21 = type metadata accessor for MLClassifierMetrics(v20);
  __swift_storeEnumTagSinglePayload((uint64_t)&v27, 1, 1, v21);
  __swift_storeEnumTagSinglePayload(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics, 1, 1, v21);
  uint64_t v22 = OUTLINED_FUNCTION_105_3();
  uint64_t v23 = type metadata accessor for TrainingTablePrinter(v22);
  OUTLINED_FUNCTION_65_8(v23);
  outlined init with copy of MLImageClassifier.ModelParameters(v4, (uint64_t)v26);
  MLImageClassifier.PersistentParameters.init(trainingData:modelParameters:)(v24, v26, v8);
  outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v8, v9, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  swift_endAccess();
  outlined init with take of MLImageClassifier.Model(v25, v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_8_1();
}

uint64_t ImageClassifierTrainingSessionDelegate.populateFiles(parameters:)(Swift::OpaquePointer *a1)
{
  type metadata accessor for MLImageClassifier.PersistentParameters();
  Swift::tuple_training_OpaquePointer_validation_OpaquePointer v4 = MLImageClassifier.ModelParameters.ValidationData.extractFilesByLabel(trainingFiles:)((Swift::OpaquePointer)a1->_rawValue);
  uint64_t result = (uint64_t)v4.training._rawValue;
  if (!v5)
  {
    uint64_t v6 = specialized Sequence.flatMap<A>(_:)((uint64_t)v4.training._rawValue);
    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles) = v6;
    swift_bridgeObjectRelease();
    uint64_t v7 = specialized Sequence.flatMap<A>(_:)((uint64_t)v4.validation._rawValue);
    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles) = v7;
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ImageClassifierTrainingSessionDelegate.setUp()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v112 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_32();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v110 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v109 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v107 = v11;
  uint64_t v108 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_49();
  uint64_t v104 = v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_113_3(v14, v15, v16, v17, v18, v19, v20, v21, v90);
  uint64_t v22 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_33_0();
  uint64_t v105 = v24;
  uint64_t v100 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_49();
  uint64_t v103 = v26;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_106();
  uint64_t v101 = v28;
  uint64_t v98 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_49();
  uint64_t v97 = v30;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_106();
  uint64_t v99 = v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  uint64_t v34 = OUTLINED_FUNCTION_17(v33);
  MEMORY[0x270FA5388](v34);
  uint64_t v106 = (uint64_t)&v90 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_106();
  uint64_t v102 = v37;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  uint64_t v39 = OUTLINED_FUNCTION_17(v38);
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_14_0();
  uint64_t v40 = (int *)type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_33_0();
  v131 = v42;
  uint64_t v43 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess();
  outlined init with copy of URL?(v43, v2, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v2, 1, (uint64_t)v40);
  if (!v44)
  {
    outlined init with take of MLImageClassifier.Model(v2, (uint64_t)v131, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
    uint64_t v45 = v112;
    ImageClassifierTrainingSessionDelegate.populateFiles(parameters:)(v131);
    if (v45)
    {
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0((uint64_t)v131, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
LABEL_6:
      OUTLINED_FUNCTION_8_1();
      return;
    }
    uint64_t v91 = v3;
    BlobsFile.init()((uint64_t)v119);
    uint64_t v95 = v6;
    uint64_t v96 = v22;
    uint64_t v46 = v119[0];
    uint64_t v47 = v119[1];
    long long v93 = v121;
    long long v94 = v120;
    long long v92 = v122;
    uint64_t v112 = v0;
    uint64_t v48 = v123;
    uint64_t v49 = v124;
    char v50 = (void *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
    OUTLINED_FUNCTION_64_9();
    uint64_t v111 = 0;
    *char v50 = v46;
    v50[1] = v47;
    OUTLINED_FUNCTION_66_7(*(double *)&v119[2]);
    v50[9] = v48;
    v50[10] = v49;
    v50[11] = MEMORY[0x263F8EE78];
    outlined consume of Data._Representation(v51, v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BlobsFile.init()((uint64_t)v125);
    uint64_t v53 = v125[0];
    uint64_t v54 = v125[1];
    long long v93 = v127;
    long long v94 = v126;
    long long v92 = v128;
    uint64_t v56 = v129;
    uint64_t v55 = v130;
    uint64_t v57 = (void *)(v112 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
    OUTLINED_FUNCTION_64_9();
    *uint64_t v57 = v53;
    v57[1] = v54;
    OUTLINED_FUNCTION_66_7(*(double *)&v125[2]);
    v57[9] = v56;
    v57[10] = v55;
    v57[11] = MEMORY[0x263F8EE78];
    outlined consume of Data._Representation(v58, v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v60 = swift_bridgeObjectRetain();
    uint64_t v61 = v111;
    MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v60, (uint64_t)&v118, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    uint64_t v111 = v61;
    swift_bridgeObjectRelease();
    *(void *)&long long v94 = specialized Set.init<A>(_:)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm);
    uint64_t v63 = v99;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1((uint64_t)v131 + v40[5], v99, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    uint64_t v64 = *(uint64_t *)((char *)&v131->_rawValue + v40[8]);
    uint64_t v65 = *(uint64_t *)((char *)&v131->_rawValue + v40[9]);
    uint64_t v66 = v101;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1((uint64_t)v131 + v40[6], v101, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    memset(v116, 0, sizeof(v116));
    memset(v117, 0, sizeof(v117));
    v115[0] = v64;
    v115[1] = v65;
    uint64_t v67 = v97;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v63, v97, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    uint64_t v114 = v98;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v113);
    outlined init with take of MLImageClassifier.Model(v67, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v113, (uint64_t)v116, &demangling cache variable for type metadata for Any?);
    uint64_t v69 = v103;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v66, v103, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    uint64_t v114 = v100;
    uint64_t v70 = __swift_allocate_boxed_opaque_existential_0(v113);
    outlined init with take of MLImageClassifier.Model(v69, (uint64_t)v70, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v113, (uint64_t)v117, &demangling cache variable for type metadata for Any?);
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v66, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v63, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    MLImageClassifier.ModelParameters.algorithm.getter(v69);
    lazy protocol witness table accessor for type Float and conformance Float();
    LogisticRegressionClassifier.Configuration.init()();
    LogisticRegressionClassifier.Configuration.maximumIterations.setter();
    uint64_t v71 = OUTLINED_FUNCTION_115_3();
    v72(v71);
    uint64_t v73 = v109;
    uint64_t v74 = v112;
    LogisticRegressionClassifier.init(labels:configuration:)();
    outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v115);
    OUTLINED_FUNCTION_11_3();
    v75();
    uint64_t v76 = v105;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v105, v73, v95);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    swift_storeEnumTagMultiPayload();
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v69, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    outlined init with take of MLImageClassifier.Model(v76, v102, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
    uint64_t v77 = OUTLINED_FUNCTION_31_14();
    uint64_t v2 = v96;
    __swift_storeEnumTagSinglePayload(v77, v78, v79, v96);
    uint64_t v80 = v74 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_64_6();
    uint64_t v81 = OUTLINED_FUNCTION_94_3();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v81, v82, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
    swift_endAccess();
    uint64_t v83 = v80;
    uint64_t v84 = v106;
    outlined init with copy of URL?(v83, v106, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
    uint64_t v85 = OUTLINED_FUNCTION_133();
    OUTLINED_FUNCTION_57_4(v85, v86, v2);
    if (!v44)
    {
      uint64_t v87 = v91;
      MLImageClassifier.Classifier.makeTransformer()(v91);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0((uint64_t)v131, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v84, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
      uint64_t v88 = type metadata accessor for MLImageClassifier.Model();
      OUTLINED_FUNCTION_161(v88);
      uint64_t v89 = v74 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
      OUTLINED_FUNCTION_64_6();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v87, v89, &demangling cache variable for type metadata for MLImageClassifier.Model?);
      swift_endAccess();
      goto LABEL_6;
    }
    __break(1u);
  }
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_42_9();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ImageClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v189 = v2;
  uint64_t v192 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  v176 = (char *)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_113_3(v9, v10, v11, v12, v13, v14, v15, v16, v156);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v172 = v18;
  uint64_t v173 = v17;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_33_0();
  uint64_t v171 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v169 = v21;
  uint64_t v170 = v20;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_49();
  uint64_t v165 = v22;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  uint64_t v166 = v24;
  uint64_t v181 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_49();
  uint64_t v175 = v26;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_106();
  uint64_t v167 = v28;
  uint64_t v161 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_49();
  uint64_t v164 = v30;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_106();
  uint64_t v162 = v32;
  uint64_t v159 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_49();
  uint64_t v158 = v34;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_106();
  uint64_t v160 = v36;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  uint64_t v38 = OUTLINED_FUNCTION_17(v37);
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_49();
  uint64_t v180 = v39;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_45_3();
  uint64_t v168 = v41;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_106();
  uint64_t v163 = v43;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v187 = v44;
  uint64_t v188 = v45;
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_49();
  uint64_t v179 = v46;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_45_3();
  uint64_t v186 = v48;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_45_3();
  uint64_t v177 = v50;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_106();
  uint64_t v182 = v52;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  uint64_t v54 = OUTLINED_FUNCTION_17(v53);
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_49();
  v183 = v55;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v56);
  uint64_t v58 = (char *)&v156 - v57;
  uint64_t v59 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_0();
  uint64_t v185 = v60;
  MEMORY[0x270FA5388](v61);
  OUTLINED_FUNCTION_49();
  uint64_t v178 = v62;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v63);
  OUTLINED_FUNCTION_45_3();
  uint64_t v184 = v64;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v65);
  OUTLINED_FUNCTION_106();
  uint64_t v191 = v66;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  uint64_t v68 = OUTLINED_FUNCTION_17(v67);
  MEMORY[0x270FA5388](v68);
  OUTLINED_FUNCTION_32();
  uint64_t v69 = type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v70);
  OUTLINED_FUNCTION_3_0();
  uint64_t v73 = (Swift::OpaquePointer *)(v72 - v71);
  uint64_t v190 = v1;
  uint64_t v74 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess();
  outlined init with copy of URL?(v74, v3, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  v157 = (int *)v69;
  OUTLINED_FUNCTION_57_4(v3, 1, v69);
  if (v75) {
    goto LABEL_42;
  }
  outlined init with take of MLImageClassifier.Model(v3, (uint64_t)v73, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  uint64_t v76 = v192;
  specialized BidirectionalCollection.last.getter(v192, (uint64_t)v58);
  OUTLINED_FUNCTION_57_4((uint64_t)v58, 1, v59);
  uint64_t v77 = (uint64_t)v73;
  if (!v75)
  {
    uint64_t v79 = v59;
    uint64_t v80 = v191;
    outlined init with take of MLImageClassifier.Model((uint64_t)v58, v191, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v81 = v189;
    uint64_t v82 = v190;
    uint64_t ML17MLImageClassifierV5ModelVWOhTm_0 = ImageClassifierTrainingSessionDelegate.populateFiles(parameters:)(v73);
    uint64_t v84 = v81;
    if (v81) {
      goto LABEL_6;
    }
    int v86 = *(unsigned __int8 *)(v80 + *(int *)(v59 + 20));
    if (v86 == 2)
    {
      v195[0] = v76;
      uint64_t v92 = *(void *)(v76 + 16);
      if (v92)
      {
        uint64_t v189 = 0;
        uint64_t v93 = v77;
        uint64_t v94 = *(void *)(v185 + 72);
        uint64_t v95 = v92 - 1;
        uint64_t v96 = v76
            + ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))
            + v94 * (v92 - 1);
        uint64_t v97 = -v94;
        uint64_t v98 = v178;
        while (1)
        {
          _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v96, v98, (void (*)(void))type metadata accessor for MLCheckpoint);
          switch(*(unsigned char *)(v98 + *(int *)(v79 + 20)))
          {
            case 1:
              swift_bridgeObjectRelease();
              uint64_t ML17MLImageClassifierV5ModelVWOhTm_0 = _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v98, (void (*)(void))type metadata accessor for MLCheckpoint);
              uint64_t v77 = v93;
              uint64_t v84 = v189;
              uint64_t v82 = v190;
              uint64_t v80 = v191;
              goto LABEL_25;
            case 2:
              OUTLINED_FUNCTION_155();
              break;
            case 3:
              OUTLINED_FUNCTION_154();
              break;
            case 4:
              OUTLINED_FUNCTION_55_0();
              break;
            default:
              break;
          }
          char v99 = OUTLINED_FUNCTION_87_0();
          swift_bridgeObjectRelease();
          uint64_t ML17MLImageClassifierV5ModelVWOhTm_0 = _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v98, (void (*)(void))type metadata accessor for MLCheckpoint);
          if (v99) {
            break;
          }
          --v95;
          v96 += v97;
          if (v95 == -1)
          {
            uint64_t v95 = 0;
            break;
          }
        }
        uint64_t v77 = v93;
        uint64_t v80 = v191;
        uint64_t v100 = v184;
        uint64_t v84 = v189;
        uint64_t v82 = v190;
      }
      else
      {
        uint64_t v95 = 0;
LABEL_25:
        uint64_t v100 = v184;
      }
      MEMORY[0x270FA5388](ML17MLImageClassifierV5ModelVWOhTm_0);
      uint64_t v103 = v95;
      uint64_t v104 = v183;
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5((void *(*)(void *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), v103, v102 & 1, v183);
      OUTLINED_FUNCTION_57_4((uint64_t)v104, 1, v79);
      if (v75)
      {
        outlined destroy of URL?((uint64_t)v104, &demangling cache variable for type metadata for MLCheckpoint?);
        uint64_t v105 = v188;
      }
      else
      {
        outlined init with take of MLImageClassifier.Model((uint64_t)v104, v100, (void (*)(void))type metadata accessor for MLCheckpoint);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLCheckpoint>);
        unint64_t v106 = (*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80);
        uint64_t v107 = swift_allocObject();
        *(_OWORD *)(v107 + 16) = xmmword_2272CB370;
        _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v100, v107 + v106, (void (*)(void))type metadata accessor for MLCheckpoint);
        ImageClassifierTrainingSessionDelegate.resume(from:)((Swift::OpaquePointer)v107);
        uint64_t v84 = v108;
        uint64_t v105 = v188;
        if (v108)
        {
          swift_setDeallocating();
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v100, (void (*)(void))type metadata accessor for MLCheckpoint);
          uint64_t v85 = v80;
          goto LABEL_7;
        }
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v100, (void (*)(void))type metadata accessor for MLCheckpoint);
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
      }
      OUTLINED_FUNCTION_144();
      URL.appendingPathComponent(_:)();
      URL.appendingPathExtension(_:)();
      uint64_t v111 = *(void (**)(void))(v105 + 8);
      uint64_t v109 = v105 + 8;
      uint64_t v110 = v111;
      OUTLINED_FUNCTION_11_3();
      v111();
      uint64_t v112 = v82 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
      OUTLINED_FUNCTION_27_30();
      uint64_t v113 = v180;
      outlined init with copy of URL?(v112, v180, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
      OUTLINED_FUNCTION_57_4(v113, 1, v181);
      if (v75)
      {
        OUTLINED_FUNCTION_11_3();
        v110();
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v80, (void (*)(void))type metadata accessor for MLCheckpoint);
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v77, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
        outlined destroy of URL?(v113, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
        goto LABEL_9;
      }
      uint64_t v192 = (uint64_t)v110;
      uint64_t v188 = v109;
      uint64_t v114 = v113;
      uint64_t v115 = v175;
      outlined init with take of MLImageClassifier.Model(v114, v175, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
      lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier((unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
      UpdatableSupervisedEstimator.readWithOptimizer(from:)();
      if (!v84)
      {
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v115, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
        OUTLINED_FUNCTION_25_0();
        v148();
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v80, (void (*)(void))type metadata accessor for MLCheckpoint);
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v77, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
        type metadata accessor for MLImageClassifier.Model();
        uint64_t v149 = OUTLINED_FUNCTION_31_14();
        __swift_storeEnumTagSinglePayload(v149, v150, v151, v152);
        OUTLINED_FUNCTION_64_6();
        uint64_t v153 = OUTLINED_FUNCTION_94_3();
        outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v153, v154, v155);
        swift_endAccess();
        goto LABEL_9;
      }
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v115, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
      OUTLINED_FUNCTION_25_0();
      v116();
    }
    else
    {
      if (v86 == 1)
      {
        uint64_t v87 = v182;
        OUTLINED_FUNCTION_83_5();
        URL.appendingPathComponent(_:isDirectory:)();
        AnnotatedFeatureStore.init(contentsOf:)(v87, (uint64_t)v199);
        uint64_t v88 = (uint64_t *)(v82 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
        OUTLINED_FUNCTION_64_9();
        uint64_t v89 = *v88;
        unint64_t v90 = v88[1];
        memcpy(v88, v199, 0x60uLL);
        outlined consume of Data._Representation(v89, v90);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v91 = v177;
        OUTLINED_FUNCTION_172();
        URL.appendingPathComponent(_:isDirectory:)();
        AnnotatedFeatureStore.init(contentsOf:)(v91, (uint64_t)v200);
        uint64_t v117 = (uint64_t *)(v82 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
        OUTLINED_FUNCTION_64_9();
        uint64_t v118 = *v117;
        unint64_t v119 = v117[1];
        memcpy(v117, v200, 0x60uLL);
        outlined consume of Data._Representation(v118, v119);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v120 = swift_bridgeObjectRetain();
        MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v120, (uint64_t)&v198, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
        uint64_t v189 = 0;
        swift_bridgeObjectRelease();
        uint64_t v192 = specialized Set.init<A>(_:)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm);
        long long v122 = v157;
        uint64_t v123 = v160;
        _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v77 + v157[5], v160, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
        uint64_t v124 = *(void *)(v77 + v122[8]);
        uint64_t v125 = *(void *)(v77 + v122[9]);
        uint64_t v126 = v122[6];
        uint64_t v188 = v77;
        uint64_t v127 = v162;
        _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v77 + v126, v162, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
        memset(v196, 0, sizeof(v196));
        memset(v197, 0, sizeof(v197));
        v195[0] = v124;
        v195[1] = v125;
        uint64_t v128 = v158;
        _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v123, v158, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
        uint64_t v194 = v159;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v193);
        outlined init with take of MLImageClassifier.Model(v128, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
        outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v193, (uint64_t)v196, &demangling cache variable for type metadata for Any?);
        uint64_t v3 = v164;
        _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v127, v164, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
        uint64_t v194 = v161;
        uint64_t v130 = __swift_allocate_boxed_opaque_existential_0(v193);
        outlined init with take of MLImageClassifier.Model(v3, (uint64_t)v130, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
        outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v193, (uint64_t)v197, &demangling cache variable for type metadata for Any?);
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v127, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v123, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
        MLImageClassifier.ModelParameters.algorithm.getter(v3);
        lazy protocol witness table accessor for type Float and conformance Float();
        uint64_t v131 = v166;
        LogisticRegressionClassifier.Configuration.init()();
        uint64_t v132 = v170;
        LogisticRegressionClassifier.Configuration.maximumIterations.setter();
        uint64_t v133 = v169;
        OUTLINED_FUNCTION_97_4();
        v134();
        uint64_t v135 = v171;
        uint64_t v136 = v190;
        LogisticRegressionClassifier.init(labels:configuration:)();
        outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v195);
        (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v131, v132);
        uint64_t v137 = v167;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 32))(v167, v135, v173);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
        swift_storeEnumTagMultiPayload();
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v3, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
        uint64_t v138 = v163;
        outlined init with take of MLImageClassifier.Model(v137, v163, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
        uint64_t v139 = v181;
        __swift_storeEnumTagSinglePayload(v138, 0, 1, v181);
        uint64_t v140 = v136 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
        OUTLINED_FUNCTION_64_6();
        uint64_t v141 = OUTLINED_FUNCTION_115_3();
        outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v141, v142, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
        swift_endAccess();
        uint64_t v143 = v140;
        uint64_t v144 = v168;
        outlined init with copy of URL?(v143, v168, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
        OUTLINED_FUNCTION_57_4(v144, 1, v139);
        if (!v75)
        {
          uint64_t v145 = v174;
          MLImageClassifier.Classifier.makeTransformer()(v174);
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v191, (void (*)(void))type metadata accessor for MLCheckpoint);
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v188, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v144, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
          uint64_t v146 = type metadata accessor for MLImageClassifier.Model();
          OUTLINED_FUNCTION_161(v146);
          uint64_t v147 = v136 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
          OUTLINED_FUNCTION_64_6();
          outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v145, v147, &demangling cache variable for type metadata for MLImageClassifier.Model?);
          swift_endAccess();
          goto LABEL_9;
        }
        __break(1u);
LABEL_42:
        outlined destroy of URL?(v3, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
        OUTLINED_FUNCTION_42_9();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x2272B8B18);
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v101, 0xD00000000000003ELL);
    }
LABEL_6:
    uint64_t v85 = v80;
LABEL_7:
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v85, (void (*)(void))type metadata accessor for MLCheckpoint);
    goto LABEL_8;
  }
  outlined destroy of URL?((uint64_t)v58, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_19_0(v78, 0xD00000000000001DLL);
LABEL_8:
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v77, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
LABEL_9:
  OUTLINED_FUNCTION_8_1();
}

Swift::Int_optional __swiftcall ImageClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  uint64_t v2 = *(unsigned __int8 *)phase;
  Swift::Bool v3 = 0;
  Swift::Int v4 = 0;
  switch(v2)
  {
    case 1:
      uint64_t v5 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles)
                     + 16);
      uint64_t v6 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles)
                     + 16);
      Swift::Int v4 = v5 + v6;
      if (__OFADD__(v5, v6))
      {
        __break(1u);
        JUMPOUT(0x2272B8BD8);
      }
      Swift::Bool v3 = 0;
      break;
    case 2:
      uint64_t v7 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters;
      uint64_t v8 = type metadata accessor for MLTrainingSessionParameters();
      Swift::Bool v3 = 0;
      Swift::Int v4 = *(void *)(v7 + *(int *)(v8 + 28));
      break;
    case 3:
      break;
    default:
      Swift::Int v4 = 0;
      Swift::Bool v3 = 1;
      break;
  }
  result.value = v4;
  result.is_nil = v3;
  return result;
}

uint64_t ImageClassifierTrainingSessionDelegate.extractFeatures(from:)()
{
  OUTLINED_FUNCTION_11();
  v1[34] = v2;
  v1[35] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v1[36] = v3;
  OUTLINED_FUNCTION_1(v3);
  v1[37] = v4;
  v1[38] = OUTLINED_FUNCTION_5();
  uint64_t v5 = type metadata accessor for ImageReader();
  v1[39] = v5;
  OUTLINED_FUNCTION_1(v5);
  v1[40] = v6;
  v1[41] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_17(v7);
  v1[42] = OUTLINED_FUNCTION_5();
  uint64_t v8 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v1[43] = v8;
  OUTLINED_FUNCTION_17(v8);
  v1[44] = OUTLINED_FUNCTION_24();
  v1[45] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  v1[46] = v9;
  OUTLINED_FUNCTION_17(v9);
  v1[47] = OUTLINED_FUNCTION_24();
  v1[48] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_17(v10);
  v1[49] = OUTLINED_FUNCTION_5();
  uint64_t v11 = type metadata accessor for MLImageClassifier.PersistentParameters();
  v1[50] = v11;
  OUTLINED_FUNCTION_17(v11);
  v1[51] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 448) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;

  OUTLINED_FUNCTION_34();
  uint64_t v1 = v0[52];
  uint64_t v3 = v0[34];
  uint64_t v2 = v0[35];
  ImageReader.init()();
  uint64_t v4 = *(void *)(v2 + v1);
  v0[57] = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = v2 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters;
  Swift::Int_optional result = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v8 = *(void *)(v6 + *(int *)(result + 20));
  uint64_t v9 = __OFADD__(v3, v8);
  uint64_t v10 = v3 + v8;
  uint64_t v11 = v9;
  if (v5 <= v3)
  {
    if ((v11 & 1) == 0)
    {
      uint64_t v22 = v0[34];
      if (v0[54] < v10) {
        uint64_t v10 = v0[54];
      }
      v0[68] = v10;
      uint64_t v23 = v10 - v5;
      if (!__OFSUB__(v10, v5))
      {
        uint64_t v24 = v22 - v5;
        if (v23 >= v22 - v5)
        {
          uint64_t v25 = *(void *)(v0[35] + v0[53]);
          v0[69] = v25;
          if ((v24 & 0x8000000000000000) == 0)
          {
            uint64_t v26 = *(void *)(v25 + 16);
            if (v26 >= v24 && (uint64_t)v26 >= v23)
            {
              uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
              OUTLINED_FUNCTION_39_0(v28);
              uint64_t v32 = (char *)&async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:)
                  + async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:);
              uint64_t v30 = v25 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
              swift_bridgeObjectRetain();
              uint64_t v31 = (void *)swift_task_alloc();
              v0[70] = v31;
              *uint64_t v31 = v0;
              v31[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
              uint64_t v19 = v25;
              uint64_t v20 = v30;
              uint64_t v18 = v24;
              uint64_t v21 = (2 * v23) | 1;
              goto LABEL_23;
            }
LABEL_33:
            __break(1u);
            return result;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v11)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v12 = v0[34];
  if (v5 >= v10) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v5;
  }
  v0[58] = v13;
  if (v13 < v12) {
    goto LABEL_27;
  }
  if (v12 < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  OUTLINED_FUNCTION_39_0(v14);
  uint64_t v32 = (char *)&async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:)
      + async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:);
  uint64_t v16 = v4 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[59] = v17;
  uint64_t *v17 = v0;
  v17[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
  uint64_t v18 = v0[34];
  uint64_t v19 = v4;
  uint64_t v20 = v16;
  uint64_t v21 = (2 * v13) | 1;
LABEL_23:
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, void, void))v32)(v19, v20, v18, v21, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  v5[60] = v3;
  v5[61] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_25_32();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
  else
  {
    uint64_t v13 = (void *)OUTLINED_FUNCTION_16_15();
    v5[62] = v13;
    *uint64_t v13 = v7;
    v13[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
    OUTLINED_FUNCTION_25_32();
    return v17(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_25();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  v5[63] = v3;
  v5[64] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_35_9();
    v5[65] = v12;
    *uint64_t v12 = v7;
    v12[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
    return v14(v3);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 528) = v5;
  *(void *)(v3 + 536) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  v5[71] = v3;
  v5[72] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_25_32();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
  else
  {
    uint64_t v13 = (void *)OUTLINED_FUNCTION_16_15();
    v5[73] = v13;
    *uint64_t v13 = v7;
    v13[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
    OUTLINED_FUNCTION_25_32();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 592) = v5;
  *(void *)(v3 + 600) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

void ImageClassifierTrainingSessionDelegate.extractFeatures(from:)()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 280) + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v1, 1, v2);
  if (v4)
  {
    outlined destroy of URL?(*(void *)(v0 + 392), &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_42_9();
    OUTLINED_FUNCTION_77_6();
    OUTLINED_FUNCTION_104_3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 280);
    outlined init with take of MLImageClassifier.Model(*(void *)(v0 + 392), *(void *)(v0 + 408), (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
    uint64_t v6 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles;
    *(void *)(v0 + 416) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles;
    uint64_t v7 = *(void *)(*(void *)(v5 + v6) + 16);
    uint64_t v8 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
    *(void *)(v0 + 424) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
    uint64_t v9 = *(void *)(*(void *)(v5 + v8) + 16);
    BOOL v10 = __OFADD__(v7, v9);
    uint64_t v11 = v7 + v9;
    *(void *)(v0 + 432) = v11;
    if (v10)
    {
      __break(1u);
    }
    else
    {
      if (v11 <= *(void *)(v0 + 272))
      {
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(*(void *)(v0 + 408), (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        OUTLINED_FUNCTION_101_3();
        OUTLINED_FUNCTION_104_3();
        __asm { BRAA            X3, X16 }
      }
      uint64_t v13 = *(int **)(v0 + 400);
      uint64_t v12 = *(void *)(v0 + 408);
      uint64_t v15 = *(void *)(v0 + 376);
      uint64_t v14 = *(void *)(v0 + 384);
      uint64_t v16 = *(void *)(v0 + 360);
      uint64_t v31 = *(void *)(v0 + 368);
      uint64_t v17 = *(void *)(v0 + 352);
      uint64_t v32 = *(void *)(v0 + 344);
      uint64_t v33 = *(void *)(v0 + 336);
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v12 + v13[5], v14, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      uint64_t v18 = v13[9];
      uint64_t v19 = *(void *)(v12 + v13[8]);
      *(_DWORD *)(v0 + 608) = v18;
      uint64_t v20 = *(void *)(v12 + v18);
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v12 + v13[6], v16, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
      *(_OWORD *)(v0 + 48) = 0u;
      *(_OWORD *)(v0 + 80) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      *(void *)(v0 + 16) = v19;
      *(void *)(v0 + 24) = v20;
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v14, v15, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      *(void *)(v0 + 160) = v31;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 136));
      outlined init with take of MLImageClassifier.Model(v15, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 136, v0 + 32, &demangling cache variable for type metadata for Any?);
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v16, v17, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
      *(void *)(v0 + 192) = v32;
      uint64_t v22 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 168));
      outlined init with take of MLImageClassifier.Model(v17, (uint64_t)v22, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 168, v0 + 64, &demangling cache variable for type metadata for Any?);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v16, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      MLImageClassifier.ModelParameters.algorithm.getter(v17);
      outlined init with take of MLImageClassifier.Model(v17, v33, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
      outlined destroy of MLImageClassifier.ModelParameters(v0 + 16);
      uint64_t v23 = swift_task_alloc();
      uint64_t v24 = (void *)OUTLINED_FUNCTION_89_3(v23);
      *uint64_t v24 = v25;
      v24[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
      OUTLINED_FUNCTION_104_3();
      MLImageClassifier.FeatureExtractor.init(type:)(v26, v27);
    }
  }
}

uint64_t ImageClassifierTrainingSessionDelegate.extractFeatures(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = (uint64_t)(v14 + 12);
  uint64_t v16 = v14[66];
  OUTLINED_FUNCTION_81_2();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    a9 = v14 + 31;
    a10 = v14 + 12;
    uint64_t v18 = v14[66];
    a11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    OUTLINED_FUNCTION_57_5();
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v22 = *(void *)(v21 + 72);
    swift_bridgeObjectRetain();
    do
    {
      OUTLINED_FUNCTION_80_6();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      uint64_t v23 = MLShapedArrayProtocol.scalars.getter();
      OUTLINED_FUNCTION_11_3();
      v24();
      BlobsFile.appendBlob(_:)((Swift::OpaquePointer)v23);
      swift_bridgeObjectRelease();
      v20 += v22;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    uint64_t v15 = (uint64_t)(v14 + 12);
  }
  swift_endAccess();
  uint64_t v25 = v14[58];
  uint64_t v26 = v14[51];
  uint64_t v27 = v14[34];
  OUTLINED_FUNCTION_29_24();
  v28();
  outlined destroy of MLImageClassifier.FeatureExtractor(v15);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v26, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v25, v27))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_31_22();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_100_3();
    OUTLINED_FUNCTION_19_9();
    return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
  }
  return result;
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = (uint64_t)(v14 + 12);
  uint64_t v16 = v14[74];
  OUTLINED_FUNCTION_81_2();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    a9 = v14 + 28;
    a10 = v14 + 12;
    uint64_t v18 = v14[74];
    a11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    OUTLINED_FUNCTION_57_5();
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v22 = *(void *)(v21 + 72);
    swift_bridgeObjectRetain();
    do
    {
      OUTLINED_FUNCTION_80_6();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      uint64_t v23 = MLShapedArrayProtocol.scalars.getter();
      OUTLINED_FUNCTION_11_3();
      v24();
      BlobsFile.appendBlob(_:)((Swift::OpaquePointer)v23);
      swift_bridgeObjectRelease();
      v20 += v22;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    uint64_t v15 = (uint64_t)(v14 + 12);
  }
  swift_endAccess();
  uint64_t v25 = v14[68];
  uint64_t v26 = v14[51];
  uint64_t v27 = v14[34];
  OUTLINED_FUNCTION_29_24();
  v28();
  outlined destroy of MLImageClassifier.FeatureExtractor(v15);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v26, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v25, v27))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_31_22();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_100_3();
    OUTLINED_FUNCTION_19_9();
    return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
  }
  return result;
}

uint64_t ImageClassifierTrainingSessionDelegate.extractFeatures(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(*(void *)(v12 + 408), (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_14_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_38_6();
  return v15(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v13 = *(void *)(v12 + 408);
  OUTLINED_FUNCTION_29_24();
  v14();
  outlined destroy of MLImageClassifier.FeatureExtractor(v12 + 96);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v13, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_14_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_38_6();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v13 = *(void *)(v12 + 408);
  OUTLINED_FUNCTION_29_24();
  v14();
  outlined destroy of MLImageClassifier.FeatureExtractor(v12 + 96);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v13, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_38_6();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v13 = *(void *)(v12 + 408);
  OUTLINED_FUNCTION_29_24();
  v14();
  outlined destroy of MLImageClassifier.FeatureExtractor(v12 + 96);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v13, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_38_6();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v13 = *(void *)(v12 + 408);
  OUTLINED_FUNCTION_29_24();
  v14();
  outlined destroy of MLImageClassifier.FeatureExtractor(v12 + 96);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v13, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_14_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_38_6();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v13 = *(void *)(v12 + 408);
  OUTLINED_FUNCTION_29_24();
  v14();
  outlined destroy of MLImageClassifier.FeatureExtractor(v12 + 96);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v13, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_38_6();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ImageClassifierTrainingSessionDelegate.transitionTo(phase:)(CreateML::MLPhase phase)
{
  uint64_t v3 = (unsigned char *)phase;
  uint64_t v4 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_41_0();
  if (*v3 == 3)
  {
    uint64_t v6 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
    OUTLINED_FUNCTION_27_30();
    uint64_t v7 = OUTLINED_FUNCTION_133();
    if (!__swift_getEnumTagSinglePayload(v7, v8, v4))
    {
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v6, v2, (void (*)(void))type metadata accessor for TrainingTablePrinter);
      static os_log_type_t.info.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_2272CB370;
      uint64_t v10 = MEMORY[0x263F8D750];
      *(void *)(v9 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v9 + 64) = v10;
      *(void *)(v9 + 32) = 3;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v2, (void (*)(void))type metadata accessor for TrainingTablePrinter);
    }
  }
}

uint64_t ImageClassifierTrainingSessionDelegate.train(from:)()
{
  OUTLINED_FUNCTION_11();
  v1[53] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  OUTLINED_FUNCTION_17(v2);
  v1[54] = OUTLINED_FUNCTION_24();
  v1[55] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_17(v3);
  v1[56] = OUTLINED_FUNCTION_24();
  v1[57] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_17(v4);
  v1[58] = OUTLINED_FUNCTION_24();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  v1[61] = v5;
  OUTLINED_FUNCTION_17(v5);
  v1[62] = OUTLINED_FUNCTION_5();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_17(v6);
  v1[63] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for MLImageClassifier.PersistentParameters();
  v1[64] = v7;
  OUTLINED_FUNCTION_17(v7);
  v1[65] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 568) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v0) {
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(*(void *)(v3 + 440), (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[53];
  uint64_t v3 = type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_162(v3);
  uint64_t v4 = v2 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_81_2();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v1, v4, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  swift_endAccess();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[75] = v5;
  *uint64_t v5 = v0;
  v5[1] = ImageClassifierTrainingSessionDelegate.train(from:);
  uint64_t v6 = OUTLINED_FUNCTION_116_2();
  return ImageClassifierTrainingSessionDelegate.buildMetrics(eventCollector:)(v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 592) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0) {
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(*(void *)(v3 + 432), (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_25_32();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = v0[56];
  uint64_t v2 = v0[53];
  uint64_t v3 = type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_162(v3);
  uint64_t v4 = v2 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_81_2();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v1, v4, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  swift_endAccess();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[75] = v5;
  *uint64_t v5 = v0;
  v5[1] = ImageClassifierTrainingSessionDelegate.train(from:);
  uint64_t v6 = OUTLINED_FUNCTION_116_2();
  return ImageClassifierTrainingSessionDelegate.buildMetrics(eventCollector:)(v6);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 608) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

void ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  uint64_t v17 = v16[63];
  uint64_t v18 = v16[64];
  uint64_t v19 = v16[53] + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v19, v17, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v17, 1, v18);
  if (v20)
  {
    outlined destroy of URL?(v16[63], &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_42_9();
    OUTLINED_FUNCTION_77_6();
    OUTLINED_FUNCTION_3_24();
    return;
  }
  uint64_t v21 = v16[53];
  outlined init with take of MLImageClassifier.Model(v16[63], v16[65], (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  uint64_t v22 = (uint64_t *)(v21 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
  OUTLINED_FUNCTION_94_3();
  swift_beginAccess();
  uint64_t v23 = v22[11];
  uint64_t v24 = (uint64_t *)(v21 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
  swift_beginAccess();
  uint64_t v25 = v24[11];
  if (*(void *)(v25 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v16[65] + *(int *)(v16[64] + 20), v16[62], (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v27 = v16[62];
    if (EnumCaseMultiPayload)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v27, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    }
    else
    {
      a12 = v16 + 2;
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = *(void *)(v27 + 8);
      __int16 v30 = *(unsigned __int8 *)(v27 + 16);
      __int16 v31 = *(unsigned __int8 *)(v27 + 17);
      swift_bridgeObjectRetain();
      uint64_t v25 = specialized Collection.randomSplit<A, B>(strategy:)(v28, v29, v30 | (unsigned __int16)(v31 << 8), v23);
      a11 = v32;
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_bridgeObjectRetain();
      specialized AnnotatedFeatureStore.init<A>(_:)(v33, (uint64_t)(v16 + 14));
      uint64_t v34 = *v22;
      unint64_t v35 = v22[1];
      memcpy(v22, v16 + 14, 0x60uLL);
      outlined consume of Data._Representation(v34, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v36 = swift_bridgeObjectRetain();
      specialized AnnotatedFeatureStore.init<A>(_:)(v36, (uint64_t)(v16 + 2));
      uint64_t v37 = *v24;
      unint64_t v38 = v24[1];
      memcpy(v24, v16 + 2, 0x60uLL);
      outlined consume of Data._Representation(v37, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = a11;
    }
  }
  v16[67] = v23;
  v16[66] = v25;
  uint64_t v39 = v16[60];
  uint64_t v40 = v16[53];
  type metadata accessor for EventCollector();
  OUTLINED_FUNCTION_27_6();
  uint64_t v41 = EventCollector.init()();
  v16[68] = v41;
  uint64_t v42 = v40 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v42, v39, &demangling cache variable for type metadata for TrainingTablePrinter?);
  uint64_t v43 = type metadata accessor for TrainingTablePrinter(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v39, 1, v43);
  outlined destroy of URL?(v39, &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v46 = v16[58];
    uint64_t v45 = v16[59];
    ImageClassifierTrainingSessionDelegate.createTablePrinter()(v45);
    __swift_storeEnumTagSinglePayload(v45, 0, 1, v43);
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v45, v42, &demangling cache variable for type metadata for TrainingTablePrinter?);
    swift_endAccess();
    outlined init with copy of URL?(v42, v46, &demangling cache variable for type metadata for TrainingTablePrinter?);
    OUTLINED_FUNCTION_57_4(v46, 1, v43);
    if (v20)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v47 = v16[58];
    TrainingTablePrinter.beginTable()();
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v47, (void (*)(void))type metadata accessor for TrainingTablePrinter);
  }
  uint64_t v48 = v16[53];
  if (*(void *)(v25 + 16))
  {
    OUTLINED_FUNCTION_53();
    uint64_t v49 = OUTLINED_FUNCTION_115_3();
    outlined init with copy of URL?(v49, v50, v51);
    type metadata accessor for MLImageClassifier.Classifier();
    uint64_t v52 = OUTLINED_FUNCTION_133();
    OUTLINED_FUNCTION_57_4(v52, v53, v54);
    if (!v20)
    {
      uint64_t v55 = v16[53];
      uint64_t v56 = OUTLINED_FUNCTION_27_6();
      v16[72] = v56;
      *(void *)(v56 + 16) = v41;
      *(void *)(v56 + 24) = v55;
      OUTLINED_FUNCTION_118_3();
      swift_retain();
      uint64_t v57 = (void *)swift_task_alloc();
      v16[73] = v57;
      *uint64_t v57 = v16;
      v57[1] = ImageClassifierTrainingSessionDelegate.train(from:);
      OUTLINED_FUNCTION_3_24();
      v63(v58, v59, v60, v61, v62, v63, v64, v65, a9, a10, a11, a12, a13, a14, a15, a16);
      return;
    }
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v66 = v16[55];
  swift_bridgeObjectRelease();
  uint64_t v67 = v48 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v67, v66, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  uint64_t v68 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_57_4(v66, 1, v68);
  if (v20)
  {
LABEL_23:
    __break(1u);
    return;
  }
  uint64_t v69 = v16[53];
  uint64_t v70 = OUTLINED_FUNCTION_27_6();
  v16[69] = v70;
  *(void *)(v70 + 16) = v41;
  *(void *)(v70 + 24) = v69;
  OUTLINED_FUNCTION_118_3();
  swift_retain();
  uint64_t v71 = (void *)swift_task_alloc();
  v16[70] = v71;
  void *v71 = v16;
  v71[1] = ImageClassifierTrainingSessionDelegate.train(from:);
  OUTLINED_FUNCTION_3_24();
  v76(v72, v73, v74, v75, v76, v77, v78, v79, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_113_0();
  uint64_t v17 = *(void *)(v16 + 520);
  uint64_t v27 = *(void *)(v16 + 448);
  uint64_t v28 = *(void *)(v16 + 440);
  uint64_t v29 = *(void *)(v16 + 432);
  uint64_t v31 = *(void *)(v17 + *(int *)(*(void *)(v16 + 512) + 32));
  __int16 v30 = specialized _dictionaryUpCast<A, B, C, D>(_:)(*(void **)(v16 + 608));
  swift_bridgeObjectRelease();
  swift_release();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v17, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_3_24();
  return v22(v18, v19, v20, v21, v22, v23, v24, v25, v27, v28, v29, v30, v31, a14, a15, a16);
}

uint64_t ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_93_3();
  uint64_t v16 = *(void *)(v15 + 440);
  uint64_t v27 = *(void *)(v15 + 432);
  uint64_t v28 = v17;
  swift_release();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v16, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_114_3();
  OUTLINED_FUNCTION_19_9();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, v27, v28, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_93_3();
  uint64_t v16 = *(void *)(v15 + 432);
  uint64_t v27 = *(void *)(v15 + 440);
  uint64_t v28 = v17;
  swift_release();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v16, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_114_3();
  OUTLINED_FUNCTION_19_9();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, v27, v28, a12, a13, a14);
}

uint64_t ImageClassifierTrainingSessionDelegate.createTablePrinter()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey))
                 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2272CB370;
  uint64_t v9 = (void *)(v8 + v7);
  *uint64_t v9 = 0xD000000000000011;
  v9[1] = 0x80000002272DA5F0;
  static MetricsKey.trainingAccuracy.getter();
  uint64_t v10 = type metadata accessor for MetricsKey();
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v16 = v11;
  uint64_t v12 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  swift_beginAccess();
  if (*(void *)(*(void *)(v12 + 88) + 16))
  {
    static MetricsKey.validationAccuracy.getter();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v10);
    specialized Dictionary.subscript.setter();
    uint64_t v11 = v16;
  }
  uint64_t v13 = type metadata accessor for TrainingTablePrinter(0);
  *(void *)(a1 + *(int *)(v13 + 24)) = v11;
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(a1 + *(int *)(v13 + 20)) = OS_os_log.init(subsystem:category:)();
  return Date.init()();
}

uint64_t closure #1 in ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  uint64_t v9 = v8 - v7;
  EventCollector.add(_:)();
  uint64_t v10 = a3 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v10, v9, &demangling cache variable for type metadata for TrainingTablePrinter?);
  uint64_t v11 = type metadata accessor for TrainingTablePrinter(0);
  uint64_t result = OUTLINED_FUNCTION_57_4(v9, 1, v11);
  if (v13)
  {
    __break(1u);
  }
  else
  {
    TrainingTablePrinter.print(_:)(a1);
    return _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v9, (void (*)(void))type metadata accessor for TrainingTablePrinter);
  }
  return result;
}

uint64_t ImageClassifierTrainingSessionDelegate.buildMetrics(eventCollector:)(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for MetricsKey();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](ImageClassifierTrainingSessionDelegate.buildMetrics(eventCollector:), 0, 0);
}

uint64_t ImageClassifierTrainingSessionDelegate.buildMetrics(eventCollector:)()
{
  OUTLINED_FUNCTION_91_0();
  uint64_t v2 = *(void *)(v0 + 32);
  static MetricsKey.trainingAccuracy.getter();
  specialized EventCollector.getLast<A>(metric:type:)();
  char v4 = v3;
  uint64_t v5 = *(void (**)(void))(v2 + 8);
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_5_4();
  v5();
  uint64_t v6 = MEMORY[0x263F8EE80];
  if ((v4 & 1) == 0)
  {
    OUTLINED_FUNCTION_141();
    double v7 = OUTLINED_FUNCTION_67_2();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, v8, v7);
    OUTLINED_FUNCTION_140();
  }
  OUTLINED_FUNCTION_118_0();
  static MetricsKey.validationAccuracy.getter();
  specialized EventCollector.getLast<A>(metric:type:)();
  uint64_t v9 = OUTLINED_FUNCTION_62_2();
  ((void (*)(uint64_t))v5)(v9);
  if ((v1 & 1) == 0)
  {
    OUTLINED_FUNCTION_141();
    double v10 = OUTLINED_FUNCTION_67_2();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v11, v10);
    OUTLINED_FUNCTION_140();
  }
  OUTLINED_FUNCTION_118_0();
  static MetricsKey.trainingLoss.getter();
  specialized EventCollector.getLast<A>(metric:type:)();
  uint64_t v12 = OUTLINED_FUNCTION_62_2();
  ((void (*)(uint64_t))v5)(v12);
  if ((v1 & 1) == 0)
  {
    OUTLINED_FUNCTION_141();
    double v13 = OUTLINED_FUNCTION_67_2();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v14, v13);
    OUTLINED_FUNCTION_140();
  }
  OUTLINED_FUNCTION_118_0();
  static MetricsKey.validationLoss.getter();
  specialized EventCollector.getLast<A>(metric:type:)();
  uint64_t v15 = OUTLINED_FUNCTION_62_2();
  ((void (*)(uint64_t))v5)(v15);
  if ((v1 & 1) == 0)
  {
    OUTLINED_FUNCTION_141();
    double v16 = OUTLINED_FUNCTION_67_2();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(4, v17, v16);
    OUTLINED_FUNCTION_140();
  }
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v18(v6);
}

void ImageClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  v40[1] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_14_0();
  uint64_t v41 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33();
  uint64_t v19 = v17 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v40 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v40 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v40 - v27;
  int v29 = *v5;
  if (v29 != 2)
  {
    if (v29 == 1)
    {
      __int16 v30 = (const void *)(v3 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
      OUTLINED_FUNCTION_27_30();
      memcpy(v43, v30, 0x60uLL);
      outlined retain of AnnotatedFeatureStore((uint64_t)v43);
      OUTLINED_FUNCTION_83_5();
      URL.appendingPathComponent(_:isDirectory:)();
      AnnotatedFeatureStore.write(to:)((uint64_t)v28);
      if (v1)
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v41);
        outlined release of AnnotatedFeatureStore((uint64_t)v43);
      }
      else
      {
        unint64_t v38 = *(void (**)(void))(v15 + 8);
        OUTLINED_FUNCTION_5_4();
        v38();
        outlined release of AnnotatedFeatureStore((uint64_t)v43);
        uint64_t v39 = (const void *)(v3
                           + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
        OUTLINED_FUNCTION_27_30();
        memcpy(v42, v39, sizeof(v42));
        outlined retain of AnnotatedFeatureStore((uint64_t)v42);
        OUTLINED_FUNCTION_172();
        URL.appendingPathComponent(_:isDirectory:)();
        AnnotatedFeatureStore.write(to:)((uint64_t)v25);
        OUTLINED_FUNCTION_5_4();
        v38();
        outlined release of AnnotatedFeatureStore((uint64_t)v42);
      }
    }
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_144();
  URL.appendingPathComponent(_:)();
  URL.appendingPathExtension(_:)();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  uint64_t v32 = v41;
  v31(v19, v41);
  uint64_t v33 = v3 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_27_30();
  outlined init with copy of URL?(v33, v2, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  uint64_t v34 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_57_4(v2, 1, v34);
  if (v35)
  {
    __break(1u);
  }
  else
  {
    uint64_t v36 = v3 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
    swift_beginAccess();
    outlined init with copy of URL?(v36, v11, &demangling cache variable for type metadata for MLImageClassifier.Model?);
    uint64_t v37 = type metadata accessor for MLImageClassifier.Model();
    OUTLINED_FUNCTION_57_4(v11, 1, v37);
    if (!v35)
    {
      lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier((unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
      UpdatableSupervisedEstimator.writeWithOptimizer(_:to:overwrite:)();
      v31((uint64_t)v22, v32);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v11, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v2, (void (*)(void))type metadata accessor for MLImageClassifier.Classifier);
LABEL_10:
      OUTLINED_FUNCTION_8_1();
      return;
    }
  }
  __break(1u);
}

uint64_t ImageClassifierTrainingSessionDelegate.save(to:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_0();
  uint64_t v9 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_27_30();
  outlined init with copy of URL?(v9, v6, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v6, 1, v7);
  if (v10)
  {
    outlined destroy of URL?(v6, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v11 = 0xD000000000000031;
    *(void *)(v11 + 8) = 0x80000002272D70A0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(unsigned char *)(v11 + 48) = 2;
    return swift_willThrow();
  }
  else
  {
    outlined init with take of MLImageClassifier.Model(v6, v1, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
    MLImageClassifier.PersistentParameters.save(toSessionDirectory:)();
    return _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v1, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  }
}

void ImageClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v31 = v0;
  uint64_t v32 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_41_0();
  uint64_t v18 = type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_33();
  uint64_t v22 = v20 - v21;
  __n128 v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (uint64_t *)((char *)&v31 - v25);
  char v27 = *v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16))(v2, v32, v14, v24);
  MLImageClassifier.PersistentParameters.init(sessionDirectory:)(v2, v26);
  if (!v1)
  {
    uint64_t v28 = v10;
    uint64_t v29 = v31 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_27_30();
    outlined init with copy of URL?(v29, (uint64_t)v13, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_57_4((uint64_t)v13, 1, v18);
    if (v30)
    {
      outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
      outlined init with take of MLImageClassifier.Model((uint64_t)v26, v28, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v28, 0, 1, v18);
      OUTLINED_FUNCTION_64_6();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v28, v29, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLImageClassifier.Model((uint64_t)v13, v22, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
      char v33 = v27;
      ImageClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)();
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v22, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0((uint64_t)v26, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

void ImageClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v65 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_49();
  uint64_t v70 = v10;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_45_3();
  uint64_t v71 = v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_45_3();
  uint64_t v72 = v14;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_106();
  uint64_t v73 = v16;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_33();
  uint64_t v20 = v18 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v64 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLImageClassifier.FeatureExtractorType, MLImageClassifier.FeatureExtractorType));
  uint64_t v25 = v24 - 8;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_41_0();
  uint64_t v66 = *v3;
  uint64_t v67 = type metadata accessor for MLImageClassifier.PersistentParameters();
  uint64_t v68 = v7;
  uint64_t v26 = *(int *)(v67 + 24);
  uint64_t v69 = v5;
  uint64_t v27 = (uint64_t)v5 + v26;
  uint64_t v28 = v1 + *(int *)(v25 + 56);
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1((uint64_t)v7 + v26, v1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v27, v28, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  OUTLINED_FUNCTION_94_3();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v1, v20, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = v73;
      outlined init with take of MLImageClassifier.Model(v20, v73, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
      uint64_t v30 = v72;
      outlined init with take of MLImageClassifier.Model(v28, v72, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
      type metadata accessor for URL();
      lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v32 = v71;
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v29, v71, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
      uint64_t v33 = v70;
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v30, v70, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
      if (v31)
      {
        uint64_t v34 = *(int *)(v8 + 20);
        char v35 = (void *)(v32 + v34);
        uint64_t v36 = *(void *)(v32 + v34 + 8);
        uint64_t v37 = (void *)(v33 + v34);
        uint64_t v38 = v37[1];
        if (v36)
        {
          if (v38)
          {
            if (*v35 != *v37 || v36 != v38)
            {
              char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRetain();
              _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v33, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
              _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v32, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
              swift_bridgeObjectRelease();
              if (v40) {
                goto LABEL_30;
              }
              goto LABEL_27;
            }
            swift_bridgeObjectRetain();
            _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v33, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
            _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v32, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
            swift_bridgeObjectRelease();
LABEL_30:
            _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v30, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
            _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v29, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
            goto LABEL_31;
          }
          swift_bridgeObjectRetain();
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v33, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v32, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
        }
        else
        {
          swift_bridgeObjectRetain();
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v33, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
          _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v32, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
          if (!v38) {
            goto LABEL_30;
          }
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v33, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
        _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v32, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
      }
LABEL_27:
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_69_9();
      OUTLINED_FUNCTION_19_0(v47, v48);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v30, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
      _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v29, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
      goto LABEL_28;
    }
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v20, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
LABEL_17:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_69_9();
    OUTLINED_FUNCTION_19_0(v43, v44);
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for (MLImageClassifier.FeatureExtractorType, MLImageClassifier.FeatureExtractorType));
    goto LABEL_45;
  }
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v1, (uint64_t)v23, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  uint64_t v41 = *(void *)v23;
  if (swift_getEnumCaseMultiPayload() == 1) {
    goto LABEL_17;
  }
  char v42 = *(unsigned char *)(v28 + 8);
  if ((v23[8] & 1) == 0)
  {
    if (v41 != *(void *)v28) {
      char v42 = 1;
    }
    if ((v42 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_22;
  }
  if ((*(unsigned char *)(v28 + 8) & 1) == 0)
  {
LABEL_22:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_69_9();
    OUTLINED_FUNCTION_19_0(v45, v46);
LABEL_28:
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    goto LABEL_45;
  }
LABEL_31:
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  uint64_t v50 = v67;
  uint64_t v49 = v68;
  uint64_t v51 = v69;
  if (*(void **)((char *)v68 + *(int *)(v67 + 32)) != *(void **)((char *)v69 + *(int *)(v67 + 32)))
  {
    switch(v66)
    {
      case 1:
        swift_bridgeObjectRelease();
        goto LABEL_38;
      case 2:
        OUTLINED_FUNCTION_155();
        break;
      case 3:
        OUTLINED_FUNCTION_154();
        break;
      case 4:
        OUTLINED_FUNCTION_55_0();
        break;
      default:
        break;
    }
    char v52 = OUTLINED_FUNCTION_87_0();
    swift_bridgeObjectRelease();
    if ((v52 & 1) == 0)
    {
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v60 = v59;
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v63 = v62;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(_OWORD *)uint64_t v54 = xmmword_2272CD530;
      *(void *)(v54 + 16) = v58;
      *(void *)(v54 + 24) = v60;
      *(void *)(v54 + 32) = v61;
      *(void *)(v54 + 40) = v63;
      char v55 = 3;
      goto LABEL_43;
    }
  }
LABEL_38:
  if (*(void **)((char *)v49 + *(int *)(v50 + 36)) != *(void **)((char *)v51 + *(int *)(v50 + 36)))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_69_9();
    *(void *)uint64_t v57 = v56 + 3;
    *(void *)(v57 + 8) = 0x80000002272DC4D0;
    *(_OWORD *)(v57 + 16) = 0u;
    *(_OWORD *)(v57 + 32) = 0u;
    *(unsigned char *)(v57 + 48) = 0;
LABEL_44:
    swift_willThrow();
    goto LABEL_45;
  }
  specialized static Dictionary<>.== infix(_:_:)(*v49, *v51);
  if ((v53 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v54 = 1;
    *(_OWORD *)(v54 + 8) = 0u;
    *(_OWORD *)(v54 + 24) = 0u;
    *(void *)(v54 + 40) = 0;
    char v55 = 4;
LABEL_43:
    *(unsigned char *)(v54 + 48) = v55;
    goto LABEL_44;
  }
LABEL_45:
  OUTLINED_FUNCTION_8_1();
}

uint64_t ImageClassifierTrainingSessionDelegate.evaluate(from:)()
{
  OUTLINED_FUNCTION_11();
  v1[69] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v1[70] = v2;
  OUTLINED_FUNCTION_1(v2);
  v1[71] = v3;
  v1[72] = OUTLINED_FUNCTION_5();
  uint64_t v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_17(v4);
  v1[73] = OUTLINED_FUNCTION_5();
  uint64_t v5 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v1[74] = v5;
  OUTLINED_FUNCTION_17(v5);
  v1[75] = OUTLINED_FUNCTION_24();
  v1[76] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  v1[77] = v6;
  OUTLINED_FUNCTION_17(v6);
  v1[78] = OUTLINED_FUNCTION_24();
  v1[79] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ImageReader();
  v1[80] = v7;
  OUTLINED_FUNCTION_1(v7);
  v1[81] = v8;
  v1[82] = OUTLINED_FUNCTION_5();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  OUTLINED_FUNCTION_17(v9);
  v1[83] = OUTLINED_FUNCTION_5();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_17(v10);
  v1[84] = OUTLINED_FUNCTION_5();
  uint64_t v11 = type metadata accessor for MLImageClassifier.PersistentParameters();
  v1[85] = v11;
  OUTLINED_FUNCTION_17(v11);
  v1[86] = OUTLINED_FUNCTION_5();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_17(v12);
  v1[87] = OUTLINED_FUNCTION_5();
  uint64_t v13 = type metadata accessor for MLImageClassifier.Model();
  v1[88] = v13;
  OUTLINED_FUNCTION_17(v13);
  v1[89] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_55_5();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  *(void *)(v4 + 744) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 752) = v1;
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_25_32();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v2 = (void *)*v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = (void *)*v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  *(void *)(v8 + 824) = v7;
  *(void *)(v8 + 832) = v0;
  swift_task_dealloc();
  uint64_t v9 = v2[82];
  uint64_t v10 = v2[81];
  uint64_t v11 = v2[80];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_25_32();
  return MEMORY[0x270FA2498](v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v3 = *(void *)(v0 + 552);
  if (!*(void *)(*(void *)(v3 + *(void *)(v0 + 800)) + 16))
  {
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t v6 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
    *(void *)(v0 + 888) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
    uint64_t v7 = v3 + v6;
    OUTLINED_FUNCTION_53();
    uint64_t v8 = *(void *)(v7 + 88);
    *(void *)(v0 + 896) = v8;
    if (*(void *)(v8 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 904) = v9;
      *uint64_t v9 = v0;
      v9[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_4_31();
      __asm { BR              X3 }
    }
    uint64_t v12 = OUTLINED_FUNCTION_81_6();
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v12, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v8, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
    OUTLINED_FUNCTION_112_3();
    uint64_t v13 = v2 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v1, v13, &demangling cache variable for type metadata for MLClassifierMetrics?);
    swift_endAccess();
    OUTLINED_FUNCTION_29_30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_135();
    OUTLINED_FUNCTION_4_31();
    __asm { BRAA            X3, X16 }
  }
  uint64_t v4 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  *(void *)(v0 + 840) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  uint64_t v5 = v3 + v4;
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 88) + 16))
  {
    uint64_t v3 = *(void *)(v0 + 552);
    goto LABEL_4;
  }
  uint64_t v16 = *(void *)(v0 + 688);
  uint64_t v17 = *(int **)(v0 + 680);
  uint64_t v18 = *(void *)(v0 + 632);
  uint64_t v19 = *(void *)(v0 + 624);
  char v31 = *(void *)(v0 + 616);
  uint64_t v20 = *(void *)(v0 + 608);
  uint64_t v21 = *(void *)(v0 + 600);
  uint64_t v32 = *(void *)(v0 + 592);
  uint64_t v33 = *(void *)(v0 + 584);
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v16 + v17[5], v18, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  uint64_t v22 = *(void *)(v16 + v17[8]);
  uint64_t v23 = *(void *)(v16 + v17[9]);
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v16 + v17[6], v20, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(void *)(v0 + 112) = v22;
  *(void *)(v0 + 120) = v23;
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v18, v19, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  *(void *)(v0 + 288) = v31;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 264));
  outlined init with take of MLImageClassifier.Model(v19, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 264, v0 + 128, &demangling cache variable for type metadata for Any?);
  _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(v20, v21, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  *(void *)(v0 + 256) = v32;
  uint64_t v25 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 232));
  outlined init with take of MLImageClassifier.Model(v21, (uint64_t)v25, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 232, v0 + 160, &demangling cache variable for type metadata for Any?);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v20, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v18, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  MLImageClassifier.ModelParameters.algorithm.getter(v21);
  outlined init with take of MLImageClassifier.Model(v21, v33, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined destroy of MLImageClassifier.ModelParameters(v0 + 112);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 848) = v26;
  *uint64_t v26 = v0;
  v26[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
  OUTLINED_FUNCTION_4_31();
  return MLImageClassifier.FeatureExtractor.init(type:)(v27, v28);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  v3[107] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)OUTLINED_FUNCTION_35_9();
    v3[108] = v10;
    *uint64_t v10 = v5;
    v10[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
    uint64_t v11 = v3[103];
    return v13(v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_7();
  void *v8 = v7;
  *(void *)(v5 + 872) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of MLImageClassifier.FeatureExtractor(v5 + 192);
  }
  else
  {
    *(void *)(v5 + 880) = v3;
    outlined destroy of MLImageClassifier.FeatureExtractor(v5 + 192);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_55_5();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  *(void *)(v4 + 912) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 920) = v1;
  }
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_25_32();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v15 = v0[99];
  uint64_t v11 = v0[86];
  uint64_t v12 = v0[89];
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[72];
  uint64_t v3 = v0[71];
  uint64_t v14 = v0[69];
  uint64_t v13 = v0[70];
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v0[115], (uint64_t)(v0 + 64), &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  swift_bridgeObjectRelease();
  v0[68] = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v5, (uint64_t)(v0 + 61), &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  swift_bridgeObjectRelease();
  v0[62] = v6;
  ClassificationMetrics.init<A, B>(_:_:)();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v11, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v12, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v13);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v15);
  uint64_t v7 = v14 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics;
  OUTLINED_FUNCTION_81_2();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v1, v7, &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_endAccess();
  OUTLINED_FUNCTION_29_30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = OUTLINED_FUNCTION_135();
  return v9(v8);
}

uint64_t ImageClassifierTrainingSessionDelegate.evaluate(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = v14[88];
  uint64_t v16 = v14[87];
  uint64_t v17 = v14[69] + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v17, v16, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_57_4(v16, 1, v15);
  if (v24)
  {
    uint64_t v18 = v14[87];
    uint64_t v19 = &demangling cache variable for type metadata for MLImageClassifier.Model?;
  }
  else
  {
    uint64_t v20 = v14[85];
    uint64_t v21 = v14[84];
    uint64_t v22 = v14[69];
    outlined init with take of MLImageClassifier.Model(v14[87], v14[89], (void (*)(void))type metadata accessor for MLImageClassifier.Model);
    uint64_t v23 = v22 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_94_3();
    OUTLINED_FUNCTION_53();
    outlined init with copy of URL?(v23, v21, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_57_4(v21, 1, v20);
    if (!v24)
    {
      uint64_t v26 = v14[69];
      outlined init with take of MLImageClassifier.Model(v14[84], v14[86], (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
      uint64_t v27 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
      v14[90] = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
      uint64_t v28 = v26 + v27;
      OUTLINED_FUNCTION_53();
      v14[91] = *(void *)(v28 + 88);
      OUTLINED_FUNCTION_86_4();
      uint64_t v29 = (void *)swift_task_alloc();
      v14[92] = v29;
      *uint64_t v29 = v14;
      v29[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
      OUTLINED_FUNCTION_73_4();
      OUTLINED_FUNCTION_19_9();
      return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
    }
    uint64_t v25 = v14[84];
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14[89], (void (*)(void))type metadata accessor for MLImageClassifier.Model);
    uint64_t v19 = &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?;
    uint64_t v18 = v25;
  }
  outlined destroy of URL?(v18, v19);
  OUTLINED_FUNCTION_25_35();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_101_3();
  OUTLINED_FUNCTION_19_9();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = v14[83];
  uint64_t v16 = v14[69];
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v14[94], (uint64_t)(v14 + 63), &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  swift_bridgeObjectRelease();
  v14[67] = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v18, (uint64_t)(v14 + 66), &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  swift_bridgeObjectRelease();
  v14[65] = v19;
  v14[95] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v14[96] = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  ClassificationMetrics.init<A, B>(_:_:)();
  v14[97] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  swift_storeEnumTagMultiPayload();
  v14[98] = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  v14[99] = type metadata accessor for MLClassifierMetrics(0);
  uint64_t v20 = OUTLINED_FUNCTION_31_14();
  __swift_storeEnumTagSinglePayload(v20, v21, v22, v23);
  char v24 = v16 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_81_2();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v15, v24, &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_endAccess();
  ImageReader.init()();
  uint64_t v25 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
  v14[100] = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
  v14[101] = *(void *)(v16 + v25);
  uint64_t v36 = (char *)&async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:)
      + async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:);
  swift_bridgeObjectRetain();
  uint64_t v26 = (void *)swift_task_alloc();
  v14[102] = v26;
  *uint64_t v26 = v14;
  v26[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_19_9();
  return v30(v27, v28, v29, v30, v31, v32, v33, v34, v14 + 46, v36, a11, a12, a13, a14);
}

{
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = (uint64_t *)(v14[69] + v14[105]);
  specialized AnnotatedFeatureStore.init<A>(_:)(v14[110], (uint64_t)(v14 + 2));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  memcpy(v15, v14 + 2, 0x60uLL);
  outlined consume of Data._Representation(v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v14[69];
  swift_bridgeObjectRelease();
  uint64_t v19 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  v14[111] = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  uint64_t v20 = v18 + v19;
  OUTLINED_FUNCTION_53();
  uint64_t v21 = *(void *)(v20 + 88);
  v14[112] = v21;
  if (*(void *)(v21 + 16))
  {
    OUTLINED_FUNCTION_86_4();
    uint64_t v22 = (void *)swift_task_alloc();
    v14[113] = v22;
    *uint64_t v22 = v14;
    v22[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
    OUTLINED_FUNCTION_73_4();
    OUTLINED_FUNCTION_19_9();
  }
  else
  {
    uint64_t v31 = OUTLINED_FUNCTION_81_6();
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v31, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
    _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v21, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
    OUTLINED_FUNCTION_112_3();
    uint64_t v32 = v17 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_81_2();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v16, v32, &demangling cache variable for type metadata for MLClassifierMetrics?);
    swift_endAccess();
    OUTLINED_FUNCTION_25_35();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_135();
    OUTLINED_FUNCTION_19_9();
  }
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = OUTLINED_FUNCTION_108_3();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v15, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_3_75();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_19_9();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = OUTLINED_FUNCTION_108_3();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v15, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_3_75();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_19_9();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = OUTLINED_FUNCTION_108_3();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v15, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_3_75();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_19_9();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = *(void *)(v14 + 712);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(*(void *)(v14 + 688), (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v15, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_75();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_19_9();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_138();
  uint64_t v15 = OUTLINED_FUNCTION_108_3();
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v15, (void (*)(void))type metadata accessor for MLImageClassifier.PersistentParameters);
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v14, (void (*)(void))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_3_75();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_26_24();
  OUTLINED_FUNCTION_19_9();
  return v18(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

uint64_t ImageClassifierTrainingSessionDelegate.deinit()
{
  _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore), *(void *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter, &demangling cache variable for type metadata for TrainingTablePrinter?);
  return v0;
}

uint64_t ImageClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  ImageClassifierTrainingSessionDelegate.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ImageClassifierTrainingSessionDelegate()
{
  return type metadata accessor for ImageClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for ImageClassifierTrainingSessionDelegate()
{
  uint64_t result = type metadata singleton initialization cache for ImageClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for ImageClassifierTrainingSessionDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ImageClassifierTrainingSessionDelegate()
{
  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLImageClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLImageClassifier.PersistentParameters?, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.PersistentParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for MLImageClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLImageClassifier.Classifier?, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLImageClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLImageClassifier.Model?, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Model);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLImageClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLClassifierMetrics?, (void (*)(uint64_t))type metadata accessor for MLClassifierMetrics);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLImageClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for TrainingTablePrinter?, (void (*)(uint64_t))type metadata accessor for TrainingTablePrinter);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for MLImageClassifier.PersistentParameters?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance ImageClassifierTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance ImageClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance ImageClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)ImageClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

void protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance ImageClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance ImageClassifierTrainingSessionDelegate()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance ImageClassifierTrainingSessionDelegate;
  return ImageClassifierTrainingSessionDelegate.extractFeatures(from:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_2();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v7 = v6;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (v0)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = v3 & 1;
    uint64_t v8 = v5;
  }
  return v9(v8, v10);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance ImageClassifierTrainingSessionDelegate()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance ImageClassifierTrainingSessionDelegate;
  return ImageClassifierTrainingSessionDelegate.train(from:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_2();
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v9 = v8;
  uint64_t v10 = swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  if (v0)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = v3 & 1;
    uint64_t v10 = v7;
    uint64_t v11 = v5;
  }
  return v12(v10, v11, v13);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance ImageClassifierTrainingSessionDelegate()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance ImageClassifierTrainingSessionDelegate;
  return ImageClassifierTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance ImageClassifierTrainingSessionDelegate()
{
  ImageClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance ImageClassifierTrainingSessionDelegate()
{
  return ImageClassifierTrainingSessionDelegate.save(to:)();
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance ImageClassifierTrainingSessionDelegate()
{
}

uint64_t sub_2272BEFC4()
{
  return MEMORY[0x263F8D320];
}

uint64_t partial apply for closure #2 in ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  return closure #1 in ImageClassifierTrainingSessionDelegate.train(from:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroyTm_8()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2272BF038()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)(a1);
}

uint64_t lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOcTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t _s8CreateML17MLImageClassifierV5ModelVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t outlined init with take of MLImageClassifier.Model(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_3_75()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_38()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_25_35()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_26_24()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_27_30()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_29_30()
{
  return *(void *)(v0 + 712);
}

uint64_t OUTLINED_FUNCTION_31_22()
{
  return swift_task_dealloc();
}

unint64_t OUTLINED_FUNCTION_38_23@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  return v3
       + ((*(unsigned __int8 *)(a1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a1 + 80))
       + *(void *)(a1 + 72) * v1;
}

uint64_t OUTLINED_FUNCTION_45_20()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t OUTLINED_FUNCTION_60_8()
{
  return Event.init(origin:itemCount:totalItemCount:metrics:)();
}

uint64_t OUTLINED_FUNCTION_64_9()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_65_8(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

__n128 OUTLINED_FUNCTION_66_7(double a1)
{
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(v1 + 32);
  __n128 result = *(__n128 *)(v1 + 16);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

void OUTLINED_FUNCTION_71_9()
{
  *(void *)(v0 + 40) = *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_73_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_77_6()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_80_6()
{
  return AnnotatedFeature.feature.getter();
}

uint64_t OUTLINED_FUNCTION_81_6()
{
  return *(void *)(v0 + 688);
}

uint64_t OUTLINED_FUNCTION_82_5(__n128 a1)
{
  a1.n128_u64[0] = v5;
  return MEMORY[0x270EEA990](v1, 0, v2, v3, a1);
}

uint64_t OUTLINED_FUNCTION_83_5()
{
  return 0x676E696E69617274;
}

uint64_t OUTLINED_FUNCTION_86_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_88_3()
{
  return *(void *)(v0 + 344);
}

uint64_t OUTLINED_FUNCTION_89_3(uint64_t result)
{
  *(void *)(v1 + 440) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_91_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_92_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_93_3()
{
  return *(void *)(v0 + 544);
}

uint64_t OUTLINED_FUNCTION_94_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_98_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_99_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_100_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_101_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_105_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_108_3()
{
  return *(void *)(v0 + 688);
}

uint64_t OUTLINED_FUNCTION_109_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

uint64_t OUTLINED_FUNCTION_112_3()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

void OUTLINED_FUNCTION_113_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 144) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_114_3()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_115_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_116_2()
{
  return *(void *)(v0 + 544);
}

uint64_t OUTLINED_FUNCTION_118_3()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_121_1()
{
  return type metadata accessor for MetricsKey();
}

char *initializeBufferWithCopyOfBuffer for MLSoundClassifier.Model(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
    return a1;
  }
  uint64_t v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *a2;
    swift_bridgeObjectRetain();
LABEL_13:
    swift_storeEnumTagMultiPayload();
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v11 = *a2;
        char v12 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v12);
        *(void *)a1 = v11;
        a1[8] = v12;
        uint64_t v13 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v13;
        uint64_t v14 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v14;
        long long v15 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v15;
        a1[80] = *((unsigned char *)a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v16 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v18 = v17[12];
        uint64_t v19 = &a1[v18];
        uint64_t v20 = (uint64_t *)((char *)a2 + v18);
        uint64_t v22 = *v20;
        uint64_t v21 = v20[1];
        *(void *)uint64_t v19 = v22;
        *((void *)v19 + 1) = v21;
        uint64_t v23 = v17[16];
        char v24 = &a1[v23];
        uint64_t v25 = (char **)((char *)a2 + v23);
        uint64_t v26 = v25[1];
        *(void *)char v24 = *v25;
        *((void *)v24 + 1) = v26;
        uint64_t v27 = v17[20];
        uint64_t v28 = &a1[v27];
        uint64_t v29 = (uint64_t)a2 + v27;
        long long v30 = *(_OWORD *)(v29 + 16);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
        *((_OWORD *)v28 + 1) = v30;
        v28[32] = *(unsigned char *)(v29 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        break;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_14:
  uint64_t v31 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&a1[v31[5]] = *(char **)((char *)a2 + v31[5]);
  *(void *)&a1[v31[6]] = *(char **)((char *)a2 + v31[6]);
  uint64_t v32 = v31[7];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = (_OWORD *)((char *)a2 + v32);
  uint64_t v35 = *(uint64_t *)((char *)a2 + v32 + 24);
  if (v35)
  {
    *((void *)v33 + 3) = v35;
    (**(void (***)(void))(v35 - 8))();
  }
  else
  {
    long long v36 = v34[1];
    *(_OWORD *)uint64_t v33 = *v34;
    *((_OWORD *)v33 + 1) = v36;
  }
  uint64_t v37 = v31[8];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = (uint64_t)a2 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = *(unsigned char *)(v39 + 8);
  *(void *)&a1[v31[9]] = *(char **)((char *)a2 + v31[9]);
  uint64_t v40 = *(int *)(a3 + 20);
  uint64_t v41 = &a1[v40];
  uint64_t v42 = (uint64_t)a2 + v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  }
  else {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for MLSoundClassifier.Model(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        uint64_t v12 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      default:
        break;
    }
  }
  uint64_t v6 = a1 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters() + 28);
  if (*(void *)(v6 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v8 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v8 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v7, v9);
}

void *initializeWithCopy for MLSoundClassifier.Model(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *(void *)a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_12;
    }
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v9 = *(void *)a2;
        char v10 = a2[8];
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v10);
        *a1 = v9;
        *((unsigned char *)a1 + 8) = v10;
        uint64_t v11 = *((void *)a2 + 3);
        a1[2] = *((void *)a2 + 2);
        a1[3] = v11;
        uint64_t v12 = *((void *)a2 + 5);
        a1[4] = *((void *)a2 + 4);
        a1[5] = v12;
        long long v13 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v13;
        *((unsigned char *)a1 + 80) = a2[80];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v14 = type metadata accessor for DataFrame();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        long long v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v16 = v15[12];
        uint64_t v17 = (void *)((char *)a1 + v16);
        uint64_t v18 = &a2[v16];
        uint64_t v20 = *(void *)v18;
        uint64_t v19 = *((void *)v18 + 1);
        void *v17 = v20;
        v17[1] = v19;
        uint64_t v21 = v15[16];
        uint64_t v22 = (void *)((char *)a1 + v21);
        uint64_t v23 = &a2[v21];
        uint64_t v24 = *((void *)v23 + 1);
        *uint64_t v22 = *(void *)v23;
        v22[1] = v24;
        uint64_t v25 = v15[20];
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = &a2[v25];
        long long v28 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v28;
        v26[32] = v27[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_12:
  uint64_t v29 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)((char *)a1 + v29[5]) = *(void *)&a2[v29[5]];
  *(void *)((char *)a1 + v29[6]) = *(void *)&a2[v29[6]];
  uint64_t v30 = v29[7];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)&a2[v30 + 24];
  if (v33)
  {
    *((void *)v31 + 3) = v33;
    (**(void (***)(void))(v33 - 8))();
  }
  else
  {
    long long v34 = *((_OWORD *)v32 + 1);
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v34;
  }
  uint64_t v35 = v29[8];
  long long v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  *(void *)long long v36 = *(void *)v37;
  v36[8] = v37[8];
  *(void *)((char *)a1 + v29[9]) = *(void *)&a2[v29[9]];
  uint64_t v38 = *(int *)(a3 + 20);
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = &a2[v38];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v41 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v41 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v41);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v39, v40, v42);
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MLSoundClassifier.Model(void *a1, char *a2, uint64_t a3)
{
  if (a1 != (void *)a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1);
    uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *(void *)a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_13;
      }
      type metadata accessor for MLSoundClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *a1 = *(void *)a2;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v9 = *(void *)a2;
          char v10 = a2[8];
          outlined copy of Result<_DataTable, Error>(*(id *)a2, v10);
          *a1 = v9;
          *((unsigned char *)a1 + 8) = v10;
          a1[2] = *((void *)a2 + 2);
          a1[3] = *((void *)a2 + 3);
          a1[4] = *((void *)a2 + 4);
          a1[5] = *((void *)a2 + 5);
          long long v11 = *((_OWORD *)a2 + 3);
          long long v12 = *((_OWORD *)a2 + 4);
          *((unsigned char *)a1 + 80) = a2[80];
          *((_OWORD *)a1 + 3) = v11;
          *((_OWORD *)a1 + 4) = v12;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          uint64_t v13 = type metadata accessor for DataFrame();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
          uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v15 = v14[12];
          uint64_t v16 = (void *)((char *)a1 + v15);
          uint64_t v17 = &a2[v15];
          *uint64_t v16 = *(void *)v17;
          v16[1] = *((void *)v17 + 1);
          uint64_t v18 = v14[16];
          uint64_t v19 = (void *)((char *)a1 + v18);
          uint64_t v20 = &a2[v18];
          *uint64_t v19 = *(void *)v20;
          v19[1] = *((void *)v20 + 1);
          uint64_t v21 = v14[20];
          uint64_t v22 = (char *)a1 + v21;
          uint64_t v23 = &a2[v21];
          char v24 = v23[32];
          long long v25 = *((_OWORD *)v23 + 1);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
          *((_OWORD *)v22 + 1) = v25;
          v22[32] = v24;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v8 = type metadata accessor for URL();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_13:
  uint64_t v26 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)((char *)a1 + v26[5]) = *(void *)&a2[v26[5]];
  *(void *)((char *)a1 + v26[6]) = *(void *)&a2[v26[6]];
  uint64_t v27 = v26[7];
  uint64_t v28 = (uint64_t)a1 + v27;
  uint64_t v29 = (uint64_t *)&a2[v27];
  uint64_t v30 = *(void *)&a2[v27 + 24];
  if (*(void *)((char *)a1 + v27 + 24))
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_20;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(void *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_20;
  }
  long long v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_20:
  uint64_t v32 = v26[8];
  uint64_t v33 = (char *)a1 + v32;
  long long v34 = &a2[v32];
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  *(void *)((char *)a1 + v26[9]) = *(void *)&a2[v26[9]];
  if (a1 != (void *)a2)
  {
    uint64_t v36 = *(int *)(a3 + 20);
    uint64_t v37 = &a2[v36];
    uint64_t v38 = (char *)a1 + v36;
    outlined destroy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>((uint64_t)a1 + v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v39 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    }
    else {
      uint64_t v39 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    }
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v37, v40);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLSoundClassifier.Model(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    goto LABEL_10;
  }
  uint64_t v7 = type metadata accessor for MLSoundClassifier.DataSource();
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v9 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    char v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
    *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
    uint64_t v11 = v10[20];
    long long v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    long long v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)long long v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
    v12[32] = v13[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      goto LABEL_9;
    }
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
  }
  swift_storeEnumTagMultiPayload();
LABEL_9:
  swift_storeEnumTagMultiPayload();
LABEL_10:
  uint64_t v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&a1[v16[5]] = *(void *)&a2[v16[5]];
  *(void *)&a1[v16[6]] = *(void *)&a2[v16[6]];
  uint64_t v17 = v16[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  uint64_t v21 = v16[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)&a1[v16[9]] = *(void *)&a2[v16[9]];
  uint64_t v24 = *(int *)(a3 + 20);
  long long v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v27 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v25, v26, v28);
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier.Model(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1);
    uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_11;
    }
    uint64_t v7 = type metadata accessor for MLSoundClassifier.DataSource();
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      char v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
      *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
      uint64_t v11 = v10[20];
      long long v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      long long v14 = *((_OWORD *)v13 + 1);
      *(_OWORD *)long long v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v14;
      v12[32] = v13[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_10;
      }
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
    }
    swift_storeEnumTagMultiPayload();
LABEL_10:
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  uint64_t v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&a1[v16[5]] = *(void *)&a2[v16[5]];
  *(void *)&a1[v16[6]] = *(void *)&a2[v16[6]];
  uint64_t v17 = v16[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (*(void *)&a1[v17 + 24]) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  }
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  uint64_t v21 = v16[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)&a1[v16[9]] = *(void *)&a2[v16[9]];
  if (a1 != a2)
  {
    uint64_t v24 = *(int *)(a3 + 20);
    long long v25 = &a2[v24];
    uint64_t v26 = &a1[v24];
    outlined destroy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>((uint64_t)&a1[v24]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    }
    else {
      uint64_t v27 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    }
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2272C0C14);
}

uint64_t sub_2272C0C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2272C0CA8);
}

uint64_t sub_2272C0CA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata accessor for MLSoundClassifier.Model()
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.Model;
  if (!type metadata singleton initialization cache for MLSoundClassifier.Model) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MLSoundClassifier.Model()
{
  type metadata accessor for MLSoundClassifier.ModelParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t MLSoundClassifier.Model.applied(to:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v1[7] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[8] = v7;
  v1[9] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v1[10] = v8;
  OUTLINED_FUNCTION_1(v8);
  v1[11] = v9;
  v1[12] = swift_task_alloc();
  v1[13] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v1[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](MLSoundClassifier.Model.applied(to:eventHandler:), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v3 = v2;
  *(void *)(v4 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = MLSoundClassifier.Model.applied(to:eventHandler:);
  }
  else {
    uint64_t v5 = MLImageClassifier.Model.applied(to:eventHandler:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v3 = v2;
  *(void *)(v4 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = MLSoundClassifier.Model.applied(to:eventHandler:);
  }
  else {
    uint64_t v5 = MLImageClassifier.Model.applied(to:eventHandler:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_60_0();
  unint64_t v1 = OUTLINED_FUNCTION_3_57();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_60_0();
  unint64_t v1 = OUTLINED_FUNCTION_3_57();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t MLSoundClassifier.Model.applied(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v17 = v16[14];
  uint64_t v18 = v16[6];
  uint64_t v19 = type metadata accessor for MLSoundClassifier.Model();
  outlined init with copy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(v18 + *(int *)(v19 + 20), v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v21 = v16[14];
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(void, uint64_t, void))(v16[8] + 32))(v16[9], v21, v16[7]);
    long long v25 = (void *)swift_task_alloc();
    v16[17] = v25;
    *long long v25 = v16;
    v25[1] = MLSoundClassifier.Model.applied(to:eventHandler:);
    uint64_t v26 = v16[7];
    uint64_t v27 = v16[4];
    uint64_t v28 = v16[5];
    uint64_t v29 = v16[2];
    uint64_t v30 = v16[3];
    return MEMORY[0x270EEA930](v29, v30, v27, v28, v26, v22, v23, v24, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(v16[11] + 32))(v16[12], v21, v16[10]);
    long long v34 = (void *)swift_task_alloc();
    v16[15] = v34;
    void *v34 = v16;
    v34[1] = MLSoundClassifier.Model.applied(to:eventHandler:);
    uint64_t v35 = v16[10];
    uint64_t v36 = v16[4];
    uint64_t v37 = v16[5];
    uint64_t v38 = v16[2];
    uint64_t v39 = v16[3];
    return MEMORY[0x270EEA920](v38, v39, v36, v37, v35, v31, v32, v33, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance MLSoundClassifier.Model()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in MLLogisticRegressionClassifier.init(checkpoint:);
  return MLSoundClassifier.Model.applied(to:eventHandler:)();
}

unint64_t lazy protocol witness table accessor for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model()
{
  unint64_t result = lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model;
  if (!lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model)
  {
    type metadata accessor for MLSoundClassifier.Model();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model);
  }
  return result;
}

uint64_t Heap._UnsafeHandle.buffer.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*Heap._UnsafeHandle.buffer.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void *Heap._update<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v6 = *(void *)(*(void *)v3 + 16);
  v8[0] = *(void *)v3
        + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
  v8[1] = v6;
  a1(v8[0], v6);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v8, v8[0], v6);
}

uint64_t Heap._UnsafeHandle.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Heap._UnsafeHandle.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, a2 + *(void *)(*(void *)(a3 - 8) + 72) * a1, a3);
}

void (*Heap._UnsafeHandle.subscript.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = UnsafeMutableBufferPointer.subscript.modify();
  return Heap._UnsafeHandle.subscript.modify;
}

void Heap._UnsafeHandle.subscript.modify(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t Heap._UnsafeHandle.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 40))(a4 + *(void *)(*(void *)(a6 - 8) + 72) * a2, a1, a6);
}

uint64_t Heap._UnsafeHandle.ptr(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = MEMORY[0x22A675170](a3, a4, a5);
  if (result) {
    result += *(void *)(*(void *)(a5 - 8) + 72) * a1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t Heap._UnsafeHandle.extract(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = MEMORY[0x22A675170](a3, a4, a5);
  if (v7)
  {
    v7 += *(void *)(*(void *)(a5 - 8) + 72) * a1;
    uint64_t v8 = a5;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x270F9E388](v7, v8);
}

uint64_t Heap._UnsafeHandle.initialize(_:to:)()
{
  OUTLINED_FUNCTION_83_6();
  OUTLINED_FUNCTION_0_15();
  uint64_t v4 = v3;
  __n128 v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x22A675170](v9, v6);
  if (result)
  {
    uint64_t v11 = result + *(void *)(v4 + 72) * v2;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, v1, v0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v11, v8, v0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void Heap._UnsafeHandle.swapAt(_:_:)(Swift::Int a1, int a2, Swift::Int a3)
{
}

uint64_t Heap._UnsafeHandle.swapAt(_:with:)()
{
  OUTLINED_FUNCTION_83_6();
  MEMORY[0x22A675170](v0);

  return swap<A>(_:_:)();
}

void Heap._UnsafeHandle.minValue(_:_:)()
{
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_11_49(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_58_10();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_63_8();
  uint64_t v13 = OUTLINED_FUNCTION_46_19();
  v0(v13);
  uint64_t v14 = OUTLINED_FUNCTION_65_9();
  v0(v14);
  OUTLINED_FUNCTION_28_25();
  uint64_t v15 = *(void (**)(void))(v10 + 8);
  OUTLINED_FUNCTION_48_16();
  v15();
  OUTLINED_FUNCTION_48_16();
  v15();
  OUTLINED_FUNCTION_12_4();
}

void Heap._UnsafeHandle.maxValue(_:_:)()
{
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_11_49(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_58_10();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_63_8();
  uint64_t v13 = OUTLINED_FUNCTION_46_19();
  v0(v13);
  uint64_t v14 = OUTLINED_FUNCTION_65_9();
  v0(v14);
  OUTLINED_FUNCTION_28_25();
  uint64_t v15 = *(void (**)(void))(v10 + 8);
  OUTLINED_FUNCTION_48_16();
  v15();
  OUTLINED_FUNCTION_48_16();
  v15();
  OUTLINED_FUNCTION_12_4();
}

void Heap._UnsafeHandle.bubbleUp(_:)()
{
  OUTLINED_FUNCTION_19_4();
  char v1 = v0;
  Swift::Int v3 = v2;
  OUTLINED_FUNCTION_0_15();
  MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  if (v7)
  {
    uint64_t v8 = v6 + 16;
    uint64_t v9 = *(void (**)(void))(v6 + 16);
    OUTLINED_FUNCTION_79_2();
    v9();
    uint64_t v18 = v9;
    OUTLINED_FUNCTION_79_2();
    v9();
    uint64_t v10 = (void (**)(void))(v8 - 8);
    if (v1) {
      char v11 = dispatch thunk of static Comparable.< infix(_:_:)();
    }
    else {
      char v11 = dispatch thunk of static Comparable.> infix(_:_:)();
    }
    char v12 = v11;
    uint64_t v13 = *v10;
    OUTLINED_FUNCTION_25_10();
    v13();
    OUTLINED_FUNCTION_25_10();
    v13();
    if (v12)
    {
      --v1;
      OUTLINED_FUNCTION_70_9(v3, (v3 - 1) / 2);
      Swift::Int v3 = (v3 - 1) / 2;
    }
    if (v1)
    {
      if (v3 >= 3)
      {
        do
        {
          unint64_t v16 = v3 - 3;
          OUTLINED_FUNCTION_23_28();
          v18();
          OUTLINED_FUNCTION_16_43();
          v18();
          OUTLINED_FUNCTION_72_8();
          char v17 = dispatch thunk of static Comparable.> infix(_:_:)();
          OUTLINED_FUNCTION_25_10();
          v13();
          OUTLINED_FUNCTION_25_10();
          v13();
          if ((v17 & 1) == 0) {
            break;
          }
          OUTLINED_FUNCTION_70_9(v3, (unint64_t)(v3 - 3) >> 2);
          Swift::Int v3 = (unint64_t)(v3 - 3) >> 2;
        }
        while (v16 > 0xB);
      }
    }
    else if (v3 >= 3)
    {
      do
      {
        unint64_t v14 = v3 - 3;
        OUTLINED_FUNCTION_23_28();
        v18();
        OUTLINED_FUNCTION_16_43();
        v18();
        OUTLINED_FUNCTION_72_8();
        char v15 = dispatch thunk of static Comparable.< infix(_:_:)();
        OUTLINED_FUNCTION_25_10();
        v13();
        OUTLINED_FUNCTION_25_10();
        v13();
        if ((v15 & 1) == 0) {
          break;
        }
        OUTLINED_FUNCTION_70_9(v3, (unint64_t)(v3 - 3) >> 2);
        Swift::Int v3 = (unint64_t)(v3 - 3) >> 2;
      }
      while (v14 > 0xB);
    }
  }
  OUTLINED_FUNCTION_12_4();
}

void Heap._UnsafeHandle.trickleDownMin(_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v83 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_0_15();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  v69[0] = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_81_7();
  MEMORY[0x270FA5388](v17);
  v69[1] = (char *)v69 - v18;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v19);
  v69[6] = (char *)v69 - v20;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v21);
  v69[7] = (char *)v69 - v22;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v23);
  uint64_t v72 = (char *)v69 - v24;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_42_23(v26, v27, v28);
  if (!v29)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  OUTLINED_FUNCTION_75_4(v29);
  OUTLINED_FUNCTION_55_14();
  uint64_t v80 = v2;
  uint64_t v84 = v5;
  if (v30 != v31)
  {
    OUTLINED_FUNCTION_25_36();
    while (1)
    {
      uint64_t v77 = v32;
      uint64_t v78 = v11;
      uint64_t v81 = v33;
      uint64_t v74 = v9;
      uint64_t v0 = v73;
      uint64_t v9 = v70;
      OUTLINED_FUNCTION_19_36();
      v9();
      OUTLINED_FUNCTION_19_36();
      v9();
      char v34 = OUTLINED_FUNCTION_41_21();
      uint64_t v7 = *v75;
      OUTLINED_FUNCTION_3_76();
      v7();
      OUTLINED_FUNCTION_3_76();
      v7();
      if (v34) {
        uint64_t v35 = v77;
      }
      else {
        uint64_t v35 = (void (*)(void))((char *)v77 + 1);
      }
      uint64_t v82 = v35;
      uint64_t v77 = (void (*)(void))((char *)v77 + 2);
      OUTLINED_FUNCTION_7_60();
      v9();
      OUTLINED_FUNCTION_7_60();
      v9();
      char v36 = OUTLINED_FUNCTION_68_7();
      OUTLINED_FUNCTION_3_76();
      v7();
      OUTLINED_FUNCTION_3_76();
      v7();
      if (v36) {
        uint64_t v37 = v77;
      }
      else {
        uint64_t v37 = v81;
      }
      uint64_t v81 = v37;
      OUTLINED_FUNCTION_7_60();
      v9();
      OUTLINED_FUNCTION_7_60();
      v9();
      char v38 = OUTLINED_FUNCTION_67_8();
      OUTLINED_FUNCTION_3_76();
      v7();
      OUTLINED_FUNCTION_3_76();
      v7();
      if (v38) {
        uint64_t v13 = v82;
      }
      else {
        uint64_t v13 = v81;
      }
      Swift::Int v2 = (void (*)(void))((void)v13 * (void)v2);
      OUTLINED_FUNCTION_7_60();
      v9();
      uint64_t v39 = OUTLINED_FUNCTION_41_21();
      uint64_t v5 = v84;
      uint64_t v1 = v39;
      OUTLINED_FUNCTION_24_5();
      v7();
      if ((v1 & 1) == 0)
      {
        OUTLINED_FUNCTION_45_21();
        goto LABEL_31;
      }
      uint64_t v11 = v71;
      OUTLINED_FUNCTION_39_23();
      if (!v40) {
        break;
      }
      OUTLINED_FUNCTION_61_12(v40);
      OUTLINED_FUNCTION_39_23();
      if (!v41) {
        goto LABEL_39;
      }
      uint64_t v13 = v76;
      OUTLINED_FUNCTION_6_51();
      v9();
      OUTLINED_FUNCTION_31_23();
      v42();
      OUTLINED_FUNCTION_24_5();
      v7();
      OUTLINED_FUNCTION_1_63();
      v9();
      uint64_t v0 = v79;
      uint64_t v43 = OUTLINED_FUNCTION_41_21();
      uint64_t v5 = v84;
      uint64_t v1 = v43;
      OUTLINED_FUNCTION_24_5();
      v7();
      if (v1)
      {
        OUTLINED_FUNCTION_39_23();
        swap<A>(_:_:)();
      }
      OUTLINED_FUNCTION_30_31();
      Swift::Int v2 = v80;
      if (v30 == v31)
      {
        OUTLINED_FUNCTION_82_6();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_21:
  uint64_t v44 = OUTLINED_FUNCTION_80_7();
  if (v30 == v31)
  {
    OUTLINED_FUNCTION_71_10();
    goto LABEL_31;
  }
  OUTLINED_FUNCTION_38_24(v44, v45, v46);
  Heap._UnsafeHandle._minDescendant(c0:gc0:)();
  uint64_t v48 = OUTLINED_FUNCTION_14_39(v47);
  v49(v48);
  uint64_t v79 = v1;
  char v50 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v5 = v84;
  char v51 = v50;
  char v52 = (void (*)(void))*((void *)v13 + 1);
  OUTLINED_FUNCTION_18_31();
  v52();
  if ((v51 & 1) == 0)
  {
    uint64_t v1 = v69[4];
    uint64_t v0 = v79;
LABEL_30:
    uint64_t v7 = v70;
    goto LABEL_31;
  }
  uint64_t v76 = (void (*)(void))((char *)v13 + 8);
  uint64_t v81 = v52;
  OUTLINED_FUNCTION_44_21();
  if (!v53)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  OUTLINED_FUNCTION_54_14(v53);
  OUTLINED_FUNCTION_44_21();
  if (!v54)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v1 = v54 + v78 * (void)v80;
  uint64_t v7 = v70;
  OUTLINED_FUNCTION_79_2();
  v7();
  uint64_t v55 = OUTLINED_FUNCTION_49_15();
  v2(v55);
  uint64_t v56 = v81;
  OUTLINED_FUNCTION_10_4();
  v56();
  if ((uint64_t)v82 < (uint64_t)v77)
  {
    OUTLINED_FUNCTION_69_10();
    goto LABEL_31;
  }
  uint64_t v61 = OUTLINED_FUNCTION_20_42();
  ((void (*)(uint64_t))v7)(v61);
  uint64_t v62 = OUTLINED_FUNCTION_41_21();
  uint64_t v5 = v84;
  uint64_t v1 = v62;
  OUTLINED_FUNCTION_6_26();
  v56();
  if ((v1 & 1) == 0)
  {
    OUTLINED_FUNCTION_29_31();
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_79_6();
  if (!v63)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  OUTLINED_FUNCTION_52_16(v63);
  OUTLINED_FUNCTION_79_6();
  if (v64)
  {
    Swift::Int v2 = (void (*)(void))((char *)v75 + v64);
    uint64_t v7 = v70;
    OUTLINED_FUNCTION_79_2();
    v7();
    uint64_t v65 = OUTLINED_FUNCTION_50_16();
    v66(v65);
    uint64_t v67 = OUTLINED_FUNCTION_56_18();
    v68(v67);
    OUTLINED_FUNCTION_29_31();
LABEL_31:
    ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v1, v0, v5);
    if (MEMORY[0x22A675170](v73, v2, v5))
    {
      uint64_t v57 = OUTLINED_FUNCTION_66_8();
      ((void (*)(uint64_t))v7)(v57);
      uint64_t v58 = OUTLINED_FUNCTION_47_21();
      v59(v58);
      uint64_t v60 = (void (*)(void))*((void *)v13 + 1);
      OUTLINED_FUNCTION_4_29();
      v60();
      OUTLINED_FUNCTION_4_29();
      v60();
      OUTLINED_FUNCTION_12_4();
      return;
    }
    goto LABEL_41;
  }
LABEL_45:
  __break(1u);
}

void Heap._UnsafeHandle._trickleDownMin(node:value:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v85 = v1;
  uint64_t v3 = v2;
  uint64_t v81 = v4;
  OUTLINED_FUNCTION_0_15();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  v70[1] = (uint64_t)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v9);
  v70[2] = (uint64_t)v70 - v10;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v11);
  uint64_t v72 = (char *)v70 - v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v13);
  uint64_t v73 = (char *)v70 - v14;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_22_31(v16, v17, v18, v19, v20, v21, v22, v23, v70[0]);
  uint64_t v79 = v25;
  uint64_t v71 = v6;
  if (v26 != v27)
  {
    OUTLINED_FUNCTION_32_30();
    while (1)
    {
      uint64_t v82 = v28;
      uint64_t v29 = v78;
      char v30 = v75;
      char v31 = v76;
      OUTLINED_FUNCTION_6_51();
      v31();
      OUTLINED_FUNCTION_1_63();
      v31();
      char v32 = OUTLINED_FUNCTION_28_25();
      uint64_t v33 = *v77;
      OUTLINED_FUNCTION_2_72();
      v33();
      OUTLINED_FUNCTION_2_72();
      v33();
      if (v32) {
        char v34 = (void (*)(void))v0;
      }
      else {
        char v34 = (void (*)(void))(v0 + 1);
      }
      uint64_t v83 = v34;
      uint64_t v74 = (void (*)(void))(v0 + 2);
      OUTLINED_FUNCTION_1_63();
      v31();
      OUTLINED_FUNCTION_1_63();
      v31();
      char v35 = OUTLINED_FUNCTION_60_9();
      OUTLINED_FUNCTION_2_72();
      v33();
      OUTLINED_FUNCTION_2_72();
      v33();
      if (v35) {
        char v36 = v74;
      }
      else {
        char v36 = v82;
      }
      uint64_t v82 = v36;
      OUTLINED_FUNCTION_1_63();
      v31();
      OUTLINED_FUNCTION_1_63();
      v31();
      char v37 = OUTLINED_FUNCTION_73_5();
      OUTLINED_FUNCTION_2_72();
      v33();
      OUTLINED_FUNCTION_2_72();
      v33();
      char v38 = v83;
      if ((v37 & 1) == 0) {
        char v38 = v82;
      }
      uint64_t v83 = v38;
      uint64_t v0 = (void)v38 * (void)v29;
      OUTLINED_FUNCTION_1_63();
      v31();
      char v39 = OUTLINED_FUNCTION_28_25();
      OUTLINED_FUNCTION_2_72();
      v33();
      if ((v39 & 1) == 0) {
        goto LABEL_28;
      }
      OUTLINED_FUNCTION_40_19();
      if (!v40)
      {
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      OUTLINED_FUNCTION_78_4(v40);
      OUTLINED_FUNCTION_40_19();
      if (!v41) {
        goto LABEL_30;
      }
      uint64_t v42 = OUTLINED_FUNCTION_34_24();
      v30(v42);
      OUTLINED_FUNCTION_31_23();
      v43();
      uint64_t v44 = OUTLINED_FUNCTION_64_10();
      ((void (*)(uint64_t))v33)(v44);
      uint64_t v45 = OUTLINED_FUNCTION_21_42();
      v30(v45);
      char v46 = OUTLINED_FUNCTION_28_25();
      OUTLINED_FUNCTION_2_72();
      v33();
      uint64_t v3 = v79;
      if (v46)
      {
        OUTLINED_FUNCTION_39_23();
        swap<A>(_:_:)();
      }
      OUTLINED_FUNCTION_35_25();
      if (v26 == v27)
      {
        uint64_t v24 = *v80;
        break;
      }
    }
  }
  if (((2 * v24) | 1) >= v3) {
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_33_27();
  Heap._UnsafeHandle._minDescendant(c0:gc0:)();
  uint64_t v83 = (void (*)(void))(v47 * *(void *)(v71 + 72));
  uint64_t v84 = v48;
  uint64_t v49 = *(void (**)(void))(v71 + 16);
  OUTLINED_FUNCTION_16_43();
  v49();
  char v50 = dispatch thunk of static Comparable.< infix(_:_:)();
  OUTLINED_FUNCTION_18_31();
  v51();
  if ((v50 & 1) == 0)
  {
LABEL_28:
    OUTLINED_FUNCTION_12_4();
    return;
  }
  OUTLINED_FUNCTION_37_20();
  if (!v52)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_62_7(v52);
  OUTLINED_FUNCTION_84_3();
  uint64_t v53 = v78;
  if (!v54)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  OUTLINED_FUNCTION_6_51();
  v53();
  uint64_t v55 = OUTLINED_FUNCTION_36_24();
  v56(v55);
  OUTLINED_FUNCTION_10_4();
  v57();
  OUTLINED_FUNCTION_59_11();
  if (v26 != v27) {
    goto LABEL_28;
  }
  uint64_t v59 = (v58 - 1) / 2;
  OUTLINED_FUNCTION_1_63();
  v60();
  char v61 = OUTLINED_FUNCTION_28_25();
  uint64_t v62 = v82;
  OUTLINED_FUNCTION_18_31();
  v62();
  if ((v61 & 1) == 0) {
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_40_19();
  if (!v63) {
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_74_4(v63);
  OUTLINED_FUNCTION_40_19();
  if (v64)
  {
    uint64_t v65 = v84 - 1;
    OUTLINED_FUNCTION_16_43();
    v66();
    uint64_t v67 = OUTLINED_FUNCTION_43_17();
    v68(v67);
    OUTLINED_FUNCTION_18_31();
    v62();
    uint64_t v69 = v80;
    *uint64_t v80 = v59;
    v69[1] = v65;
    goto LABEL_28;
  }
LABEL_34:
  __break(1u);
}

void Heap._UnsafeHandle._minDescendant(c0:gc0:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_0_15();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_4_21();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_76_5();
  if (v15 != v16)
  {
    OUTLINED_FUNCTION_53_17(v11, v12, v13, v14);
    if (v15 != v16)
    {
      OUTLINED_FUNCTION_15_38();
      v0();
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_77_7();
      uint64_t v17 = *v21;
      OUTLINED_FUNCTION_6_26();
      v17();
      OUTLINED_FUNCTION_6_26();
      v17();
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_4_68();
      OUTLINED_FUNCTION_6_26();
      v17();
      OUTLINED_FUNCTION_6_26();
      v17();
    }
    else
    {
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_15_38();
      v0();
      OUTLINED_FUNCTION_4_68();
      uint64_t v20 = *v21;
      OUTLINED_FUNCTION_4_29();
      v20();
      OUTLINED_FUNCTION_4_29();
      v20();
      if (v4 + 1 < v2)
      {
        OUTLINED_FUNCTION_15_38();
        v0();
        OUTLINED_FUNCTION_8_49();
        v0();
        OUTLINED_FUNCTION_4_68();
        OUTLINED_FUNCTION_25_10();
        v20();
        OUTLINED_FUNCTION_25_10();
        v20();
      }
    }
  }
  else if (v6 + 1 < v2)
  {
    uint64_t v18 = *(void (**)(void))(v8 + 16);
    OUTLINED_FUNCTION_23_28();
    v18();
    OUTLINED_FUNCTION_16_43();
    v18();
    OUTLINED_FUNCTION_4_68();
    uint64_t v19 = *(void (**)(void))(v8 + 8);
    OUTLINED_FUNCTION_24_5();
    v19();
    OUTLINED_FUNCTION_24_5();
    v19();
  }
  OUTLINED_FUNCTION_12_4();
}

void Heap._UnsafeHandle.trickleDownMax(_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v83 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_0_15();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  v69[0] = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_81_7();
  MEMORY[0x270FA5388](v17);
  v69[1] = (char *)v69 - v18;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v19);
  v69[6] = (char *)v69 - v20;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v21);
  v69[7] = (char *)v69 - v22;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v23);
  uint64_t v72 = (char *)v69 - v24;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_42_23(v26, v27, v28);
  if (!v29)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  OUTLINED_FUNCTION_75_4(v29);
  OUTLINED_FUNCTION_55_14();
  uint64_t v80 = v2;
  uint64_t v84 = v5;
  if (v30 != v31)
  {
    OUTLINED_FUNCTION_25_36();
    while (1)
    {
      uint64_t v77 = v32;
      uint64_t v78 = v11;
      uint64_t v81 = v33;
      uint64_t v74 = v9;
      uint64_t v0 = v73;
      uint64_t v9 = v70;
      OUTLINED_FUNCTION_19_36();
      v9();
      OUTLINED_FUNCTION_19_36();
      v9();
      char v34 = OUTLINED_FUNCTION_41_21();
      uint64_t v7 = *v75;
      OUTLINED_FUNCTION_3_76();
      v7();
      OUTLINED_FUNCTION_3_76();
      v7();
      if (v34) {
        char v35 = (void (*)(void))((char *)v77 + 1);
      }
      else {
        char v35 = v77;
      }
      uint64_t v82 = v35;
      uint64_t v77 = (void (*)(void))((char *)v77 + 2);
      OUTLINED_FUNCTION_7_60();
      v9();
      OUTLINED_FUNCTION_7_60();
      v9();
      char v36 = OUTLINED_FUNCTION_68_7();
      OUTLINED_FUNCTION_3_76();
      v7();
      OUTLINED_FUNCTION_3_76();
      v7();
      if (v36) {
        char v37 = v81;
      }
      else {
        char v37 = v77;
      }
      uint64_t v81 = v37;
      OUTLINED_FUNCTION_7_60();
      v9();
      OUTLINED_FUNCTION_7_60();
      v9();
      char v38 = OUTLINED_FUNCTION_67_8();
      OUTLINED_FUNCTION_3_76();
      v7();
      OUTLINED_FUNCTION_3_76();
      v7();
      if (v38) {
        uint64_t v13 = v81;
      }
      else {
        uint64_t v13 = v82;
      }
      uint64_t v2 = (void (*)(void))((void)v13 * (void)v2);
      OUTLINED_FUNCTION_7_60();
      v9();
      uint64_t v39 = OUTLINED_FUNCTION_41_21();
      uint64_t v5 = v84;
      uint64_t v1 = v39;
      OUTLINED_FUNCTION_24_5();
      v7();
      if ((v1 & 1) == 0)
      {
        OUTLINED_FUNCTION_45_21();
        goto LABEL_31;
      }
      uint64_t v11 = v71;
      OUTLINED_FUNCTION_39_23();
      if (!v40) {
        break;
      }
      OUTLINED_FUNCTION_61_12(v40);
      OUTLINED_FUNCTION_39_23();
      if (!v41) {
        goto LABEL_39;
      }
      uint64_t v13 = v76;
      OUTLINED_FUNCTION_6_51();
      v9();
      OUTLINED_FUNCTION_31_23();
      v42();
      OUTLINED_FUNCTION_24_5();
      v7();
      OUTLINED_FUNCTION_1_63();
      v9();
      uint64_t v0 = v79;
      uint64_t v43 = OUTLINED_FUNCTION_41_21();
      uint64_t v5 = v84;
      uint64_t v1 = v43;
      OUTLINED_FUNCTION_24_5();
      v7();
      if (v1)
      {
        OUTLINED_FUNCTION_39_23();
        swap<A>(_:_:)();
      }
      OUTLINED_FUNCTION_30_31();
      uint64_t v2 = v80;
      if (v30 == v31)
      {
        OUTLINED_FUNCTION_82_6();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_21:
  uint64_t v44 = OUTLINED_FUNCTION_80_7();
  if (v30 == v31)
  {
    OUTLINED_FUNCTION_71_10();
    goto LABEL_31;
  }
  OUTLINED_FUNCTION_38_24(v44, v45, v46);
  Heap._UnsafeHandle._maxDescendant(c0:gc0:)();
  uint64_t v48 = OUTLINED_FUNCTION_14_39(v47);
  v49(v48);
  uint64_t v79 = v1;
  char v50 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v5 = v84;
  char v51 = v50;
  uint64_t v52 = (void (*)(void))*((void *)v13 + 1);
  OUTLINED_FUNCTION_18_31();
  v52();
  if ((v51 & 1) == 0)
  {
    uint64_t v1 = v69[4];
    uint64_t v0 = v79;
LABEL_30:
    uint64_t v7 = v70;
    goto LABEL_31;
  }
  uint64_t v76 = (void (*)(void))((char *)v13 + 8);
  uint64_t v81 = v52;
  OUTLINED_FUNCTION_44_21();
  if (!v53)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  OUTLINED_FUNCTION_54_14(v53);
  OUTLINED_FUNCTION_44_21();
  if (!v54)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v1 = v54 + v78 * (void)v80;
  uint64_t v7 = v70;
  OUTLINED_FUNCTION_79_2();
  v7();
  uint64_t v55 = OUTLINED_FUNCTION_49_15();
  v2(v55);
  uint64_t v56 = v81;
  OUTLINED_FUNCTION_10_4();
  v56();
  if ((uint64_t)v82 < (uint64_t)v77)
  {
    OUTLINED_FUNCTION_69_10();
    goto LABEL_31;
  }
  uint64_t v61 = OUTLINED_FUNCTION_20_42();
  ((void (*)(uint64_t))v7)(v61);
  uint64_t v62 = OUTLINED_FUNCTION_41_21();
  uint64_t v5 = v84;
  uint64_t v1 = v62;
  OUTLINED_FUNCTION_6_26();
  v56();
  if ((v1 & 1) == 0)
  {
    OUTLINED_FUNCTION_29_31();
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_79_6();
  if (!v63)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  OUTLINED_FUNCTION_52_16(v63);
  OUTLINED_FUNCTION_79_6();
  if (v64)
  {
    uint64_t v2 = (void (*)(void))((char *)v75 + v64);
    uint64_t v7 = v70;
    OUTLINED_FUNCTION_79_2();
    v7();
    uint64_t v65 = OUTLINED_FUNCTION_50_16();
    v66(v65);
    uint64_t v67 = OUTLINED_FUNCTION_56_18();
    v68(v67);
    OUTLINED_FUNCTION_29_31();
LABEL_31:
    ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v1, v0, v5);
    if (MEMORY[0x22A675170](v73, v2, v5))
    {
      uint64_t v57 = OUTLINED_FUNCTION_66_8();
      ((void (*)(uint64_t))v7)(v57);
      uint64_t v58 = OUTLINED_FUNCTION_47_21();
      v59(v58);
      uint64_t v60 = (void (*)(void))*((void *)v13 + 1);
      OUTLINED_FUNCTION_4_29();
      v60();
      OUTLINED_FUNCTION_4_29();
      v60();
      OUTLINED_FUNCTION_12_4();
      return;
    }
    goto LABEL_41;
  }
LABEL_45:
  __break(1u);
}

void Heap._UnsafeHandle._trickleDownMax(node:value:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v85 = v1;
  uint64_t v3 = v2;
  uint64_t v81 = v4;
  OUTLINED_FUNCTION_0_15();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  v70[1] = (uint64_t)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v9);
  v70[2] = (uint64_t)v70 - v10;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v11);
  uint64_t v72 = (char *)v70 - v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v13);
  uint64_t v73 = (char *)v70 - v14;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_22_31(v16, v17, v18, v19, v20, v21, v22, v23, v70[0]);
  uint64_t v79 = v25;
  uint64_t v71 = v6;
  if (v26 != v27)
  {
    OUTLINED_FUNCTION_32_30();
    while (1)
    {
      uint64_t v82 = v28;
      uint64_t v29 = v78;
      char v30 = v75;
      char v31 = v76;
      OUTLINED_FUNCTION_6_51();
      v31();
      OUTLINED_FUNCTION_1_63();
      v31();
      char v32 = OUTLINED_FUNCTION_28_25();
      uint64_t v33 = *v77;
      OUTLINED_FUNCTION_2_72();
      v33();
      OUTLINED_FUNCTION_2_72();
      v33();
      if (v32) {
        char v34 = (void (*)(void))(v0 + 1);
      }
      else {
        char v34 = (void (*)(void))v0;
      }
      uint64_t v83 = v34;
      uint64_t v74 = (void (*)(void))(v0 + 2);
      OUTLINED_FUNCTION_1_63();
      v31();
      OUTLINED_FUNCTION_1_63();
      v31();
      char v35 = OUTLINED_FUNCTION_60_9();
      OUTLINED_FUNCTION_2_72();
      v33();
      OUTLINED_FUNCTION_2_72();
      v33();
      if (v35) {
        char v36 = v82;
      }
      else {
        char v36 = v74;
      }
      uint64_t v82 = v36;
      OUTLINED_FUNCTION_1_63();
      v31();
      OUTLINED_FUNCTION_1_63();
      v31();
      char v37 = OUTLINED_FUNCTION_73_5();
      OUTLINED_FUNCTION_2_72();
      v33();
      OUTLINED_FUNCTION_2_72();
      v33();
      char v38 = v83;
      if (v37) {
        char v38 = v82;
      }
      uint64_t v83 = v38;
      uint64_t v0 = (void)v38 * (void)v29;
      OUTLINED_FUNCTION_1_63();
      v31();
      char v39 = OUTLINED_FUNCTION_28_25();
      OUTLINED_FUNCTION_2_72();
      v33();
      if ((v39 & 1) == 0) {
        goto LABEL_28;
      }
      OUTLINED_FUNCTION_40_19();
      if (!v40)
      {
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      OUTLINED_FUNCTION_78_4(v40);
      OUTLINED_FUNCTION_40_19();
      if (!v41) {
        goto LABEL_30;
      }
      uint64_t v42 = OUTLINED_FUNCTION_34_24();
      v30(v42);
      OUTLINED_FUNCTION_31_23();
      v43();
      uint64_t v44 = OUTLINED_FUNCTION_64_10();
      ((void (*)(uint64_t))v33)(v44);
      uint64_t v45 = OUTLINED_FUNCTION_21_42();
      v30(v45);
      char v46 = OUTLINED_FUNCTION_28_25();
      OUTLINED_FUNCTION_2_72();
      v33();
      uint64_t v3 = v79;
      if (v46)
      {
        OUTLINED_FUNCTION_39_23();
        swap<A>(_:_:)();
      }
      OUTLINED_FUNCTION_35_25();
      if (v26 == v27)
      {
        uint64_t v24 = *v80;
        break;
      }
    }
  }
  if (((2 * v24) | 1) >= v3) {
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_33_27();
  Heap._UnsafeHandle._maxDescendant(c0:gc0:)();
  uint64_t v83 = (void (*)(void))(v47 * *(void *)(v71 + 72));
  uint64_t v84 = v48;
  uint64_t v49 = *(void (**)(void))(v71 + 16);
  OUTLINED_FUNCTION_16_43();
  v49();
  char v50 = dispatch thunk of static Comparable.< infix(_:_:)();
  OUTLINED_FUNCTION_18_31();
  v51();
  if ((v50 & 1) == 0)
  {
LABEL_28:
    OUTLINED_FUNCTION_12_4();
    return;
  }
  OUTLINED_FUNCTION_37_20();
  if (!v52)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_62_7(v52);
  OUTLINED_FUNCTION_84_3();
  uint64_t v53 = v78;
  if (!v54)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  OUTLINED_FUNCTION_6_51();
  v53();
  uint64_t v55 = OUTLINED_FUNCTION_36_24();
  v56(v55);
  OUTLINED_FUNCTION_10_4();
  v57();
  OUTLINED_FUNCTION_59_11();
  if (v26 != v27) {
    goto LABEL_28;
  }
  uint64_t v59 = (v58 - 1) / 2;
  OUTLINED_FUNCTION_1_63();
  v60();
  char v61 = OUTLINED_FUNCTION_28_25();
  uint64_t v62 = v82;
  OUTLINED_FUNCTION_18_31();
  v62();
  if ((v61 & 1) == 0) {
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_40_19();
  if (!v63) {
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_74_4(v63);
  OUTLINED_FUNCTION_40_19();
  if (v64)
  {
    uint64_t v65 = v84 - 1;
    OUTLINED_FUNCTION_16_43();
    v66();
    uint64_t v67 = OUTLINED_FUNCTION_43_17();
    v68(v67);
    OUTLINED_FUNCTION_18_31();
    v62();
    uint64_t v69 = v80;
    *uint64_t v80 = v59;
    v69[1] = v65;
    goto LABEL_28;
  }
LABEL_34:
  __break(1u);
}

void Heap._UnsafeHandle._maxDescendant(c0:gc0:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_0_15();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_4_21();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_76_5();
  if (v15 != v16)
  {
    OUTLINED_FUNCTION_53_17(v11, v12, v13, v14);
    if (v15 != v16)
    {
      OUTLINED_FUNCTION_15_38();
      v0();
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_77_7();
      uint64_t v17 = *v21;
      OUTLINED_FUNCTION_6_26();
      v17();
      OUTLINED_FUNCTION_6_26();
      v17();
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_4_68();
      OUTLINED_FUNCTION_6_26();
      v17();
      OUTLINED_FUNCTION_6_26();
      v17();
    }
    else
    {
      OUTLINED_FUNCTION_8_49();
      v0();
      OUTLINED_FUNCTION_15_38();
      v0();
      OUTLINED_FUNCTION_4_68();
      uint64_t v20 = *v21;
      OUTLINED_FUNCTION_4_29();
      v20();
      OUTLINED_FUNCTION_4_29();
      v20();
      if (v4 + 1 < v2)
      {
        OUTLINED_FUNCTION_15_38();
        v0();
        OUTLINED_FUNCTION_8_49();
        v0();
        OUTLINED_FUNCTION_4_68();
        OUTLINED_FUNCTION_25_10();
        v20();
        OUTLINED_FUNCTION_25_10();
        v20();
      }
    }
  }
  else if (v6 + 1 < v2)
  {
    uint64_t v18 = *(void (**)(void))(v8 + 16);
    OUTLINED_FUNCTION_23_28();
    v18();
    OUTLINED_FUNCTION_16_43();
    v18();
    OUTLINED_FUNCTION_4_68();
    uint64_t v19 = *(void (**)(void))(v8 + 8);
    OUTLINED_FUNCTION_24_5();
    v19();
    OUTLINED_FUNCTION_24_5();
    v19();
  }
  OUTLINED_FUNCTION_12_4();
}

Swift::Void __swiftcall Heap._UnsafeHandle.heapify()()
{
  if (v0 < 2)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_19_4();
    uint64_t v2 = v1 / 2;
    uint64_t v3 = v1 / 2 - 1;
    int64_t v4 = 63 - __clz(v1 / 2);
    do
    {
      uint64_t v5 = ~(-1 << v4);
      uint64_t v6 = (1 << (v4 + 1)) - 2;
      if (v6 >= v2) {
        uint64_t v6 = v3;
      }
      if (v2 > v5) {
        uint64_t v7 = ~(-1 << v4);
      }
      else {
        uint64_t v7 = 0;
      }
      if (v2 > v5) {
        uint64_t v8 = v6;
      }
      else {
        uint64_t v8 = 0;
      }
      BOOL v9 = v2 <= v5 || v8 < v7;
      char v10 = v9;
      if (v4)
      {
        if ((v10 & 1) == 0)
        {
          do
          {
            OUTLINED_FUNCTION_51_15();
            Heap._UnsafeHandle.trickleDownMax(_:)();
            ++v7;
          }
          while (v8 >= v7);
        }
      }
      else if ((v10 & 1) == 0)
      {
        do
        {
          OUTLINED_FUNCTION_51_15();
          Heap._UnsafeHandle.trickleDownMin(_:)();
          ++v7;
        }
        while (v8 >= v7);
      }
      BOOL v9 = v4-- <= 0;
    }
    while (!v9);
    OUTLINED_FUNCTION_12_4();
  }
}

void *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3) {
        return (void *)type metadata accessor for ContiguousArray();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Heap._UnsafeHandle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OUTLINED_FUNCTION_4_68()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

void OUTLINED_FUNCTION_11_49(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 - 104) = a8;
  *(void *)(v8 - 96) = a2;
  *(void *)(v8 - 88) = a4;
}

uint64_t OUTLINED_FUNCTION_14_39(uint64_t a1)
{
  *(void *)(v2 - 112) = a1;
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v2 - 248) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t result = *(void *)(v2 - 192);
  *(void *)(v2 - 208) = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_42()
{
  *(void *)(v4 - 152) = v1;
  *(void *)(v4 - 144) = (v0 - 1) / 2 * v3;
  return v2;
}

uint64_t OUTLINED_FUNCTION_21_42()
{
  uint64_t v2 = *(void **)(v1 - 144);
  uint64_t v3 = *(void *)(v1 - 112);
  *uint64_t v2 = *(void *)(v1 - 120);
  v2[1] = v3;
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_31(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 152) = (char *)&a9 - v9;
  *(void *)(v10 - 144) = result;
  *(void *)(v10 - 112) = *(void *)(result + 8) + 2;
  return result;
}

void OUTLINED_FUNCTION_25_36()
{
  *(void *)(v3 - 256) = v2;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = v2 + 16;
  *(void *)(v3 - 208) = v5;
  *(void *)(v3 - 248) = v4 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  *(void *)(v3 - 240) = v1;
  *(void *)(v3 - 168) = v4 - 8;
  *(void *)(v3 - 160) = v4;
  *(void *)(v3 - 232) = v4 + 16;
  *(void *)(v3 - 136) = v0;
}

uint64_t OUTLINED_FUNCTION_28_25()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

void OUTLINED_FUNCTION_32_30()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = v1 + 16;
  *(void *)(v2 - 168) = *(void *)(v3 + 56);
  *(void *)(v2 - 184) = v4;
  *(void *)(v2 - 176) = v3 - 8;
  *(void *)(v2 - 192) = v3;
  *(void *)(v2 - 224) = v3 + 16;
  *(void *)(v2 - 96) = v0;
}

uint64_t OUTLINED_FUNCTION_34_24()
{
  return *(void *)(v0 - 152);
}

void OUTLINED_FUNCTION_35_25()
{
  *(void *)(v0 - 112) += 2;
}

uint64_t OUTLINED_FUNCTION_36_24()
{
  uint64_t v2 = *(void *)(v1 - 232);
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t result = v0;
  *(void *)(v1 - 232) = v2 + 32;
  *(void *)(v1 - 120) = v3;
  return result;
}

void OUTLINED_FUNCTION_37_20()
{
  *(void *)(v5 - 192) = v1;
  *(void *)(v5 - 184) = v4;
  *(void *)(v5 - 128) = v2;
  *(void *)(v5 - 176) = v0;
  *(void *)(v5 - 168) = v3;
  JUMPOUT(0x22A675170);
}

void OUTLINED_FUNCTION_38_24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v5 - 152) = a3;
  *(void *)(v5 - 144) = v4;
  *(void *)(v5 - 240) = v3;
}

void OUTLINED_FUNCTION_39_23()
{
  JUMPOUT(0x22A675170);
}

void OUTLINED_FUNCTION_40_19()
{
  JUMPOUT(0x22A675170);
}

uint64_t OUTLINED_FUNCTION_41_21()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

void OUTLINED_FUNCTION_42_23(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 - 184) = a3;
  JUMPOUT(0x22A675170);
}

uint64_t OUTLINED_FUNCTION_43_17()
{
  return v0;
}

void OUTLINED_FUNCTION_44_21()
{
  JUMPOUT(0x22A675170);
}

uint64_t OUTLINED_FUNCTION_46_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_47_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_49_15()
{
  *(void *)(v2 - 256) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_50_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_16(uint64_t a1)
{
  uint64_t v4 = a1 + *(void *)(v2 - 144);
  return MEMORY[0x270F9E388](v4, v1);
}

void OUTLINED_FUNCTION_53_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 - 104) = v4 + 8;
  *(void *)(v5 - 96) = a4;
}

uint64_t OUTLINED_FUNCTION_54_14(uint64_t a1)
{
  *(void *)(v3 - 168) = v2;
  uint64_t v5 = a1 + v2;
  return MEMORY[0x270F9E388](v5, v1);
}

void OUTLINED_FUNCTION_55_14()
{
  *(void *)(v1 - 200) = v0;
}

uint64_t OUTLINED_FUNCTION_56_18()
{
  return v0;
}

void OUTLINED_FUNCTION_59_11()
{
  uint64_t v1 = *(void **)(v0 - 144);
  uint64_t v2 = *(void *)(v0 - 112);
  *uint64_t v1 = *(void *)(v0 - 192);
  v1[1] = v2;
}

uint64_t OUTLINED_FUNCTION_60_9()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_61_12(uint64_t a1)
{
  *(void *)(v4 - 112) = v2;
  uint64_t v6 = a1 + v3;
  return MEMORY[0x270F9E388](v6, v1);
}

uint64_t OUTLINED_FUNCTION_62_7(uint64_t a1)
{
  uint64_t v4 = a1 + *(void *)(v2 - 120);
  return MEMORY[0x270F9E388](v4, v1);
}

uint64_t OUTLINED_FUNCTION_64_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_65_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_66_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_67_8()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_68_7()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

void OUTLINED_FUNCTION_70_9(Swift::Int a1, Swift::Int a2)
{
  UnsafeMutableBufferPointer.swapAt(_:_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_72_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_73_5()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_74_4(uint64_t a1)
{
  uint64_t v4 = a1 + v2;
  return MEMORY[0x270F9E388](v4, v1);
}

uint64_t OUTLINED_FUNCTION_75_4(uint64_t a1)
{
  uint64_t v5 = a1 + *(void *)(v2 + 72) * v3;
  return MEMORY[0x270F9E388](v5, v1);
}

uint64_t OUTLINED_FUNCTION_77_7()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_78_4(uint64_t a1)
{
  uint64_t v4 = a1 + v2;
  return MEMORY[0x270F9E388](v4, v1);
}

void OUTLINED_FUNCTION_79_6()
{
  JUMPOUT(0x22A675170);
}

uint64_t OUTLINED_FUNCTION_80_7()
{
  return (2 * v0) | 1;
}

void OUTLINED_FUNCTION_84_3()
{
  *(void *)(v1 - 96) = v0;
  JUMPOUT(0x22A675170);
}

uint64_t Heap._storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Heap._storage.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t Heap.init()(uint64_t a1)
{
  uint64_t v2 = static Array._allocateUninitialized(_:)();

  return MEMORY[0x270F9EBC8](v2, a1);
}

Swift::Void __swiftcall Heap.reserveCapacity(_:)(Swift::Int a1)
{
  type metadata accessor for ContiguousArray();

  ContiguousArray.reserveCapacity(_:)(a1);
}

uint64_t Heap.isEmpty.getter()
{
  return Collection.isEmpty.getter() & 1;
}

uint64_t Heap.unordered.getter()
{
  return Array.init<A>(_:)();
}

void *Heap.insert(_:)()
{
  OUTLINED_FUNCTION_0_15();
  uint64_t v2 = v1;
  __n128 v4 = MEMORY[0x270FA5388](v3);
  (*(void (**)(char *, __n128))(v2 + 16))((char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  type metadata accessor for ContiguousArray();
  ContiguousArray.append(_:)();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v6 = *(void *)(*(void *)v0 + 16);
  uint64_t v7 = *(void *)v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v9[0] = v7;
  v9[1] = v6;
  closure #1 in Heap.insert(_:)(v7, v6);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v9, v7, v6);
}

void closure #1 in Heap.insert(_:)(uint64_t a1, uint64_t a2)
{
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else if ((unint64_t)(a2 - 1) <= 0x7FFFFFFFFFFFFFFELL)
  {
    Heap._UnsafeHandle.bubbleUp(_:)();
    return;
  }
  __break(1u);
}

uint64_t Heap.min()()
{
  return Collection.first.getter();
}

uint64_t Heap.max()()
{
  return ContiguousArray.withUnsafeBufferPointer<A>(_:)();
}

uint64_t closure #1 in Heap.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void **)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v13 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v20 - v12;
  if (v10 < 3)
  {
    v20[2] = a1;
    v20[3] = v10;
    type metadata accessor for UnsafeBufferPointer();
    swift_getWitnessTable();
    return BidirectionalCollection.last.getter();
  }
  else
  {
    uint64_t v15 = v6[9];
    uint64_t v21 = a3;
    char v16 = (void (*)(char *, uint64_t, uint64_t, __n128))v6[2];
    v20[1] = v11;
    v16((char *)v20 - v12, a1 + v15, a2, v13);
    ((void (*)(char *, uint64_t, uint64_t))v16)(v8, a1 + 2 * v15, a2);
    uint64_t v17 = v21;
    max<A>(_:_:)();
    uint64_t v18 = (void (*)(char *, uint64_t))v6[1];
    v18(v8, a2);
    v18(v14, a2);
    return __swift_storeEnumTagSinglePayload(v17, 0, 1, a2);
  }
}

uint64_t Heap.popMin()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  OUTLINED_FUNCTION_0_15();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  if (OUTLINED_FUNCTION_1_64() < 1)
  {
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v5);
  }
  else
  {
    type metadata accessor for ContiguousArray();
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.removeLast()();
    if (ContiguousArray.count.getter() >= 1)
    {
      ContiguousArray._makeMutableAndUnique()();
      uint64_t v9 = *(void *)(*(void *)v2 + 16);
      v17[0] = *(void *)v2
             + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      v17[1] = v9;
      uint64_t v10 = OUTLINED_FUNCTION_4_69();
      closure #1 in Heap.popMin()(v10, v11, v12, v13);
      OUTLINED_FUNCTION_6_52(v17);
    }
    uint64_t v14 = OUTLINED_FUNCTION_2_73();
    v15(v14);
    OUTLINED_FUNCTION_7_61();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v5);
  }
}

void closure #1 in Heap.popMin()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x22A675170](a1, a2, a4);
  swap<A>(_:_:)();

  Heap._UnsafeHandle.trickleDownMin(_:)();
}

uint64_t Heap.popMax()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  OUTLINED_FUNCTION_0_15();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_1_64();
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  swift_getWitnessTable();
  if (v7 < 3)
  {
    JUMPOUT(0x22A674FF0);
  }
  RangeReplaceableCollection<>.removeLast()();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v8 = *(void *)(*(void *)v1 + 16);
  v16[0] = *(void *)v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v16[1] = v8;
  uint64_t v9 = OUTLINED_FUNCTION_4_69();
  closure #1 in Heap.popMax()(v9, v10, v11, v12);
  OUTLINED_FUNCTION_6_52(v16);
  uint64_t v13 = OUTLINED_FUNCTION_2_73();
  v14(v13);
  OUTLINED_FUNCTION_7_61();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
}

void closure #1 in Heap.popMax()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v13 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v23 - v12;
  uint64_t v16 = *(void *)(v15 + 72);
  if (v17 == 2)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v18((char *)v23 - v12, a1 + v16, a4, v13);
    ((void (*)(char *, uint64_t, uint64_t))v18)(v10, a3, a4);
    char v19 = dispatch thunk of static Comparable.> infix(_:_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v10, a4);
    v20(v14, a4);
    if (v19)
    {
      MEMORY[0x22A675170](a1, 2, a4);
      swap<A>(_:_:)();
    }
  }
  else
  {
    v23[1] = a3;
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v21((char *)v23 - v12, a1 + 2 * v16, a4, v13);
    ((void (*)(char *, uint64_t, uint64_t))v21)(v10, a1 + v16, a4);
    dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v10, a4);
    v22(v14, a4);
    MEMORY[0x22A675170](a1, a2, a4);
    swap<A>(_:_:)();
    Heap._UnsafeHandle.trickleDownMax(_:)();
  }
}

uint64_t Heap.removeMin()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Heap.removeMin()(a1, (void (*)(uint64_t, __n128))Heap.popMin(), a2);
}

uint64_t Heap.removeMax()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Heap.removeMin()(a1, (void (*)(uint64_t, __n128))Heap.popMax(), a2);
}

uint64_t Heap.removeMin()@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, __n128)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  __n128 v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v12 - v9;
  a2(a1, v8);
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v6);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a3, v10, v6);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Heap.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  type metadata accessor for ContiguousArray();

  ContiguousArray.removeAll(keepingCapacity:)(keepingCapacity);
}

uint64_t Heap.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_15();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8 - v7, a1);
  uint64_t v9 = Array.init<A>(_:)();
  uint64_t v18 = v9;
  swift_retain();
  uint64_t v10 = ContiguousArray.count.getter();
  swift_release();
  if (v10 < 2)
  {
    uint64_t v14 = OUTLINED_FUNCTION_5_62();
    v15(v14);
  }
  else
  {
    type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v11 = *(void *)(v18 + 16);
    v17[0] = v18
           + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
    v17[1] = v11;
    Heap._UnsafeHandle.heapify()();
    $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v17, v17[0], v11);
    uint64_t v12 = OUTLINED_FUNCTION_5_62();
    v13(v12);
    return v18;
  }
  return v9;
}

uint64_t Heap.insert<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v39 = a1;
  uint64_t v9 = *(void *)(a2 + 16);
  OUTLINED_FUNCTION_0_15();
  uint64_t v37 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t AssociatedConformanceWitness = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_0_15();
  uint64_t v38 = v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v41 = (char *)&v34 - v21;
  uint64_t v22 = a3;
  uint64_t v23 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_3_0();
  uint64_t v27 = v26 - v25;
  if (ContiguousArray.count.getter())
  {
    uint64_t v35 = v23;
    uint64_t v36 = a2;
    uint64_t v28 = ContiguousArray.count.getter();
    uint64_t result = dispatch thunk of Sequence.underestimatedCount.getter();
    Swift::Int v30 = v28 + result;
    if (__OFADD__(v28, result))
    {
      __break(1u);
    }
    else
    {
      type metadata accessor for ContiguousArray();
      ContiguousArray.reserveCapacity(_:)(v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v27, v39, v22);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v9);
      uint64_t v32 = v37;
      if (EnumTagSinglePayload != 1)
      {
        uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 32);
        do
        {
          v33(v14, v17, v9);
          Heap.insert(_:)();
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v14, v9);
          dispatch thunk of IteratorProtocol.next()();
        }
        while (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v9) != 1);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v41, AssociatedTypeWitness);
    }
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v27, v39, v22);
    uint64_t result = Heap.init<A>(_:)(v27, v9);
    *uint64_t v5 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in Heap.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Heap.max()(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for Heap()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OUTLINED_FUNCTION_1_64()
{
  return ContiguousArray.count.getter();
}

uint64_t OUTLINED_FUNCTION_2_73()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_69()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_62()
{
  return v0;
}

void *OUTLINED_FUNCTION_6_52(void *a1)
{
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_7_61()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x270EEE618]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x270EEE688]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270EEEA60]();
}

uint64_t URLResourceValues.isReadable.getter()
{
  return MEMORY[0x270EEEEE0]();
}

uint64_t URLResourceValues.isDirectory.getter()
{
  return MEMORY[0x270EEEEF0]();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return MEMORY[0x270EEEFF8]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEF238]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return MEMORY[0x270EEF240]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x270EEF250]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x270EEF268]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEF288]();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.modify()
{
  return MEMORY[0x270EEF290]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x270EEF2A8]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x270EEF2B8]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x270EEFBC0]();
}

uint64_t URL.absoluteURL.getter()
{
  return MEMORY[0x270EEFBD0]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x270EEFC10]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x270EEFC48]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x270EEFC58]();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return MEMORY[0x270EEFC88]();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return MEMORY[0x270EEFCA0]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x270EEFCB0]();
}

uint64_t URL.hasDirectoryPath.getter()
{
  return MEMORY[0x270EEFCD0]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x270EEFCE0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall URL.appendPathExtension(_:)(Swift::String a1)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x270EEFD70]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x270EEFD78]();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return MEMORY[0x270EEFD90]();
}

uint64_t URL.resolvingSymlinksInPath()()
{
  return MEMORY[0x270EEFDA8]();
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x270EEFDC0]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x270EEFDF0]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = MEMORY[0x270EEFE68](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x270EEFF00]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x270EEFF18]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x270EEFF58]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t Data.InlineData.init(_:)()
{
  return MEMORY[0x270EEFF98]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.LargeSlice.init(_:)()
{
  return MEMORY[0x270EEFFB8]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x270EEFFC8]();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return MEMORY[0x270EF0008]();
}

uint64_t Data._Representation.resetBytes(in:)()
{
  return MEMORY[0x270EF0078]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x270EF0090]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x270EF00B0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Data.count.getter()
{
  return MEMORY[0x270EF01B0]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x270EF01C0]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return MEMORY[0x270EF09E0]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x270EF0AF8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t dispatch thunk of DataFrameProtocol.rows.getter()
{
  return MEMORY[0x270F05800]();
}

uint64_t DataFrameProtocol.randomSplit(by:seed:)()
{
  return MEMORY[0x270F05810]();
}

uint64_t DataFrameProtocol.isEmpty.getter()
{
  return MEMORY[0x270F05828]();
}

uint64_t DataFrameProtocol.writeCSV(to:options:)()
{
  return MEMORY[0x270F05830]();
}

uint64_t dispatch thunk of DataFrameProtocol.subscript.getter()
{
  return MEMORY[0x270F05838]();
}

Swift::Void __swiftcall DataFrame.renameColumn(_:to:)(Swift::String _, Swift::String to)
{
}

Swift::Int_optional __swiftcall DataFrame.indexOfColumn(_:)(Swift::String a1)
{
  Swift::Int v1 = MEMORY[0x270F05850](a1._countAndFlagsBits, a1._object);
  result.value = v1;
  result.is_nil = v2;
  return result;
}

uint64_t DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)()
{
  return MEMORY[0x270F05870]();
}

uint64_t DataFrame.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F05878]();
}

uint64_t DataFrame.init(contentsOfJSONFile:columns:types:options:)()
{
  return MEMORY[0x270F05880]();
}

uint64_t DataFrame.init(contentsOfSFrameDirectory:columns:rows:)()
{
  return MEMORY[0x270F05888]();
}

uint64_t DataFrame.Rows.count.getter()
{
  return MEMORY[0x270F058B8]();
}

uint64_t type metadata accessor for DataFrame.Rows()
{
  return MEMORY[0x270F058C8]();
}

uint64_t DataFrame.rows.getter()
{
  return MEMORY[0x270F058D8]();
}

uint64_t type metadata accessor for DataFrame.Slice()
{
  return MEMORY[0x270F05900]();
}

uint64_t DataFrame.Slice.subscript.getter()
{
  return MEMORY[0x270F05908]();
}

uint64_t DataFrame.shape.getter()
{
  return MEMORY[0x270F05918]();
}

uint64_t DataFrame.append<A>(column:)()
{
  return MEMORY[0x270F05930]();
}

uint64_t DataFrame.subscript.getter()
{
  return MEMORY[0x270F05940]();
}

{
  return MEMORY[0x270F05998]();
}

{
  return MEMORY[0x270F059A0]();
}

{
  return MEMORY[0x270F059A8]();
}

uint64_t DataFrame.filter<A>(on:_:_:)()
{
  return MEMORY[0x270F05958]();
}

uint64_t DataFrame.init<A>(columns:)()
{
  return MEMORY[0x270F05960]();
}

uint64_t DataFrame.columns.getter()
{
  return MEMORY[0x270F05968]();
}

uint64_t DataFrame.selecting<A>(columnNames:)()
{
  return MEMORY[0x270F05978]();
}

uint64_t DataFrame.init()()
{
  return MEMORY[0x270F05980]();
}

uint64_t type metadata accessor for DataFrame()
{
  return MEMORY[0x270F05988]();
}

uint64_t DataFrame.init(_:)()
{
  return MEMORY[0x270F05990]();
}

uint64_t DataFrame.subscript.setter()
{
  return MEMORY[0x270F059B0]();
}

{
  return MEMORY[0x270F059B8]();
}

uint64_t FilledColumn.defaultValue.getter()
{
  return MEMORY[0x270F059C0]();
}

uint64_t FilledColumn.base.getter()
{
  return MEMORY[0x270F059C8]();
}

uint64_t CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)()
{
  return MEMORY[0x270F059F8]();
}

uint64_t type metadata accessor for CSVReadingOptions()
{
  return MEMORY[0x270F05A00]();
}

uint64_t type metadata accessor for CSVWritingOptions()
{
  return MEMORY[0x270F05A10]();
}

uint64_t JSONReadingOptions.init()()
{
  return MEMORY[0x270F05A28]();
}

uint64_t type metadata accessor for JSONReadingOptions()
{
  return MEMORY[0x270F05A30]();
}

uint64_t OptionalColumnProtocol.filled(with:)()
{
  return MEMORY[0x270F05A40]();
}

uint64_t Column.eraseToAnyColumn()()
{
  return MEMORY[0x270F05A50]();
}

uint64_t Column.map<A>(_:)()
{
  return MEMORY[0x270F05A58]();
}

uint64_t Column.init(name:capacity:)()
{
  return MEMORY[0x270F05A60]();
}

uint64_t Column.init<A>(name:contents:)()
{
  return MEMORY[0x270F05A68]();
}

{
  return MEMORY[0x270F05A70]();
}

uint64_t Column.name.getter()
{
  return MEMORY[0x270F05A78]();
}

uint64_t Column.count.getter()
{
  return MEMORY[0x270F05A88]();
}

uint64_t Column.append<A>(contentsOf:)()
{
  return MEMORY[0x270F05A90]();
}

uint64_t Column.append(_:)()
{
  return MEMORY[0x270F05A98]();
}

{
  return MEMORY[0x270F05AA0]();
}

uint64_t Column.decoded<A, B>(_:using:)()
{
  return MEMORY[0x270F05AA8]();
}

uint64_t Column.mapNonNil<A>(_:)()
{
  return MEMORY[0x270F05AB0]();
}

uint64_t Column<A>.sum()()
{
  return MEMORY[0x270F05AB8]();
}

uint64_t Column.init(_:capacity:)()
{
  return MEMORY[0x270F05AC8]();
}

uint64_t Column.subscript.getter()
{
  return MEMORY[0x270F05AD0]();
}

uint64_t type metadata accessor for CSVType()
{
  return MEMORY[0x270F05AD8]();
}

uint64_t ColumnID.name.getter()
{
  return MEMORY[0x270F05AE0]();
}

uint64_t ColumnID.init(_:_:)()
{
  return MEMORY[0x270F05AF0]();
}

uint64_t type metadata accessor for JSONType()
{
  return MEMORY[0x270F05AF8]();
}

uint64_t AnyColumn.assumingType<A>(_:)()
{
  return MEMORY[0x270F05B08]();
}

uint64_t AnyColumn.wrappedElementType.getter()
{
  return MEMORY[0x270F05B10]();
}

uint64_t AnyColumn.name.getter()
{
  return MEMORY[0x270F05B18]();
}

uint64_t AnyColumn.count.getter()
{
  return MEMORY[0x270F05B20]();
}

uint64_t type metadata accessor for AnyColumn()
{
  return MEMORY[0x270F05B28]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x270FA06C8]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x270FA06D8]();
}

uint64_t DataSample.labels.getter()
{
  return MEMORY[0x270F4DD50]();
}

uint64_t DataSample.init(features:labels:)()
{
  return MEMORY[0x270F4DD58]();
}

uint64_t DataSample.features.getter()
{
  return MEMORY[0x270F4DD60]();
}

uint64_t LayerState.id.getter()
{
  return MEMORY[0x270F4DD68]();
}

uint64_t LayerState.value.getter()
{
  return MEMORY[0x270F4DD70]();
}

uint64_t type metadata accessor for LayerState()
{
  return MEMORY[0x270F4DD78]();
}

uint64_t static ScalarType.int.getter()
{
  return MEMORY[0x270F4DD90]();
}

uint64_t type metadata accessor for ScalarType()
{
  return MEMORY[0x270F4DD98]();
}

uint64_t TensorShape.dimensions.getter()
{
  return MEMORY[0x270F4DDA0]();
}

uint64_t TensorShape.contiguousSize.getter()
{
  return MEMORY[0x270F4DDA8]();
}

uint64_t type metadata accessor for TensorShape()
{
  return MEMORY[0x270F4DDB0]();
}

uint64_t TensorShape.init(_:)()
{
  return MEMORY[0x270F4DDB8]();
}

uint64_t TensorShape.subscript.getter()
{
  return MEMORY[0x270F4DDC0]();
}

uint64_t static ComputeDevice.cpu.getter()
{
  return MEMORY[0x270F4DDD8]();
}

uint64_t static ComputeDevice.gpu.getter()
{
  return MEMORY[0x270F4DDE0]();
}

uint64_t type metadata accessor for ComputeDevice()
{
  return MEMORY[0x270F4DDF0]();
}

uint64_t type metadata accessor for LearningPhase()
{
  return MEMORY[0x270F4DDF8]();
}

uint64_t type metadata accessor for LossReduction()
{
  return MEMORY[0x270F4DE00]();
}

uint64_t withoutGradient<A>(_:)()
{
  return MEMORY[0x270F4DE18]();
}

uint64_t valueWithGradient<A>(at:of:)()
{
  return MEMORY[0x270F4DE28]();
}

uint64_t type metadata accessor for RegularizationKind()
{
  return MEMORY[0x270F4DE38]();
}

uint64_t GlobalAveragePool2D.init()()
{
  return MEMORY[0x270F4DE48]();
}

uint64_t softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)()
{
  return MEMORY[0x270F4DE60]();
}

uint64_t type metadata accessor for GradientClippingMode()
{
  return MEMORY[0x270F4DE68]();
}

uint64_t static ParameterInitializer.randomNormal(mean:standardDeviation:seed:scalarType:on:)()
{
  return MEMORY[0x270F4DE70]();
}

uint64_t static ParameterInitializer.glorotUniform(seed:scalarType:on:)()
{
  return MEMORY[0x270F4DE78]();
}

uint64_t static ParameterInitializer.ones.getter()
{
  return MEMORY[0x270F4DE88]();
}

uint64_t static ParameterInitializer.zeros.getter()
{
  return MEMORY[0x270F4DE90]();
}

uint64_t type metadata accessor for ParameterInitializer()
{
  return MEMORY[0x270F4DEA8]();
}

uint64_t static MLPackageWritingOptions.default.getter()
{
  return MEMORY[0x270F4DEC8]();
}

uint64_t type metadata accessor for MLPackageWritingOptions()
{
  return MEMORY[0x270F4DED0]();
}

uint64_t OptimizerStateDictionary.subscript.getter()
{
  return MEMORY[0x270F4DEE0]();
}

uint64_t OptimizerStateDictionary.subscript.setter()
{
  return MEMORY[0x270F4DEE8]();
}

uint64_t SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)()
{
  return MEMORY[0x270F4DEF0]();
}

uint64_t SGD.update(_:with:)()
{
  return MEMORY[0x270F4DEF8]();
}

uint64_t type metadata accessor for SGD()
{
  return MEMORY[0x270F4DF00]();
}

uint64_t Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)()
{
  return MEMORY[0x270F4DF08]();
}

uint64_t Adam.update(_:with:)()
{
  return MEMORY[0x270F4DF18]();
}

uint64_t type metadata accessor for Adam()
{
  return MEMORY[0x270F4DF20]();
}

uint64_t type metadata accessor for LSTM()
{
  return MEMORY[0x270F4DF78]();
}

uint64_t relu(_:)()
{
  return MEMORY[0x270F4DF80]();
}

uint64_t sqrt(_:)()
{
  return MEMORY[0x270F4DF88]();
}

uint64_t Dense.bias.getter()
{
  return MEMORY[0x270F4DFB0]();
}

uint64_t Dense.$bias.getter()
{
  return MEMORY[0x270F4DFB8]();
}

uint64_t Dense.init(weight:bias:)()
{
  return MEMORY[0x270F4DFC0]();
}

uint64_t Dense.weight.getter()
{
  return MEMORY[0x270F4DFC8]();
}

uint64_t Dense.$weight.getter()
{
  return MEMORY[0x270F4DFD0]();
}

uint64_t Dense.init(unitCount:weightInitializer:biasInitializer:)()
{
  return MEMORY[0x270F4DFD8]();
}

uint64_t Dense.unitCount.getter()
{
  return MEMORY[0x270F4DFE0]();
}

uint64_t type metadata accessor for Dense()
{
  return MEMORY[0x270F4DFE8]();
}

uint64_t Layer.namedLayerStateKeyPaths(recursively:)()
{
  return MEMORY[0x270F4DFF0]();
}

uint64_t Layer.parameters(recursively:)()
{
  return MEMORY[0x270F4DFF8]();
}

uint64_t Layer.updateValue<A>(_:for:)()
{
  return MEMORY[0x270F4E008]();
}

uint64_t Layer.callAsFunction(_:)()
{
  return MEMORY[0x270F4E010]();
}

uint64_t Layer.parameterKeyPaths(recursively:)()
{
  return MEMORY[0x270F4E018]();
}

uint64_t Layer.layerStateKeyPaths(recursively:)()
{
  return MEMORY[0x270F4E020]();
}

uint64_t Layer.namedParameterKeyPaths(recursively:)()
{
  return MEMORY[0x270F4E030]();
}

uint64_t Layer.place(on:)()
{
  return MEMORY[0x270F4E040]();
}

uint64_t Layer.placed(on:)()
{
  return MEMORY[0x270F4E050]();
}

uint64_t Layer.prepare(for:)()
{
  return MEMORY[0x270F4E058]();
}

uint64_t Layer.sublayers(recursively:)()
{
  return MEMORY[0x270F4E068]();
}

uint64_t Layer<>.writeMLPackage(withInput:output:to:options:)()
{
  return MEMORY[0x270F4E070]();
}

uint64_t Conv1D.groupCount.getter()
{
  return MEMORY[0x270F4E078]();
}

uint64_t Conv1D.kernelSize.getter()
{
  return MEMORY[0x270F4E080]();
}

uint64_t Conv1D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)()
{
  return MEMORY[0x270F4E088]();
}

uint64_t Conv1D.bias.getter()
{
  return MEMORY[0x270F4E098]();
}

uint64_t Conv1D.stride.getter()
{
  return MEMORY[0x270F4E0A0]();
}

uint64_t Conv1D.init(weight:bias:stride:padding:dilation:groupCount:)()
{
  return MEMORY[0x270F4E0A8]();
}

uint64_t Conv1D.weight.getter()
{
  return MEMORY[0x270F4E0B0]();
}

uint64_t Conv1D.dilation.getter()
{
  return MEMORY[0x270F4E0B8]();
}

uint64_t type metadata accessor for Conv1D()
{
  return MEMORY[0x270F4E0C0]();
}

uint64_t Conv2D.groupCount.getter()
{
  return MEMORY[0x270F4E0C8]();
}

uint64_t Conv2D.kernelSize.getter()
{
  return MEMORY[0x270F4E0D0]();
}

uint64_t Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)()
{
  return MEMORY[0x270F4E0D8]();
}

uint64_t Conv2D.filterCount.getter()
{
  return MEMORY[0x270F4E0E0]();
}

uint64_t Conv2D.bias.getter()
{
  return MEMORY[0x270F4E0E8]();
}

uint64_t Conv2D.$bias.getter()
{
  return MEMORY[0x270F4E0F0]();
}

uint64_t Conv2D.stride.getter()
{
  return MEMORY[0x270F4E0F8]();
}

uint64_t Conv2D.init(weight:bias:stride:padding:dilation:groupCount:)()
{
  return MEMORY[0x270F4E100]();
}

uint64_t Conv2D.weight.getter()
{
  return MEMORY[0x270F4E108]();
}

uint64_t Conv2D.$weight.getter()
{
  return MEMORY[0x270F4E110]();
}

uint64_t Conv2D.padding.getter()
{
  return MEMORY[0x270F4E118]();
}

uint64_t Conv2D.dilation.getter()
{
  return MEMORY[0x270F4E120]();
}

uint64_t type metadata accessor for Conv2D()
{
  return MEMORY[0x270F4E128]();
}

uint64_t Tensor.scalarType.getter()
{
  return MEMORY[0x270F4E138]();
}

uint64_t Tensor.transposed(permutation:)()
{
  return MEMORY[0x270F4E140]();
}

uint64_t Tensor.elementType.getter()
{
  return MEMORY[0x270F4E150]();
}

uint64_t Tensor.concatenated(with:alongAxis:)()
{
  return MEMORY[0x270F4E160]();
}

uint64_t Tensor.init(floatLiteral:)()
{
  return MEMORY[0x270F4E168]();
}

uint64_t Tensor.init(concatenating:alongAxis:scalarType:)()
{
  return MEMORY[0x270F4E170]();
}

uint64_t Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)()
{
  return MEMORY[0x270F4E178]();
}

uint64_t Tensor.expandingShape(at:)()
{
  return MEMORY[0x270F4E190]();
}

uint64_t Tensor.squeezingShape(at:)()
{
  return MEMORY[0x270F4E198]();
}

{
  return MEMORY[0x270F4E1A0]();
}

uint64_t Tensor.init<A>(oneHotAtIndices:depth:onValue:offValue:on:)()
{
  return MEMORY[0x270F4E1A8]();
}

uint64_t Tensor.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270F4E1B0]();
}

uint64_t static Tensor./ infix(_:_:)()
{
  return MEMORY[0x270F4E1B8]();
}

uint64_t static Tensor.* infix(_:_:)()
{
  return MEMORY[0x270F4E1C0]();
}

uint64_t static Tensor.+ infix(_:_:)()
{
  return MEMORY[0x270F4E1C8]();
}

uint64_t static Tensor.+ infix<A>(_:_:)()
{
  return MEMORY[0x270F4E1D0]();
}

uint64_t static Tensor.- infix(_:_:)()
{
  return MEMORY[0x270F4E1D8]();
}

uint64_t Tensor.init(unsafeUninitializedShape:scalarType:computeDevice:initializingWith:)()
{
  return MEMORY[0x270F4E1E0]();
}

uint64_t static Tensor.+= infix(_:_:)()
{
  return MEMORY[0x270F4E1E8]();
}

uint64_t Tensor.max(alongAxes:)()
{
  return MEMORY[0x270F4E1F0]();
}

uint64_t Tensor.sum(squeezingAxes:)()
{
  return MEMORY[0x270F4E1F8]();
}

uint64_t Tensor.sum(alongAxes:)()
{
  return MEMORY[0x270F4E200]();
}

{
  return MEMORY[0x270F4E208]();
}

uint64_t Tensor.sum()()
{
  return MEMORY[0x270F4E210]();
}

uint64_t Tensor.cast(to:roundingRule:)()
{
  return MEMORY[0x270F4E218]();
}

uint64_t Tensor.mean()()
{
  return MEMORY[0x270F4E220]();
}

uint64_t Tensor.rank.getter()
{
  return MEMORY[0x270F4E228]();
}

uint64_t Tensor.init<A>(shape:scalars:on:)()
{
  return MEMORY[0x270F4E248]();
}

uint64_t Tensor.shape.getter()
{
  return MEMORY[0x270F4E250]();
}

uint64_t Tensor.slice(lowerBounds:sizes:)()
{
  return MEMORY[0x270F4E260]();
}

uint64_t Tensor.init(zeros:scalarType:on:)()
{
  return MEMORY[0x270F4E280]();
}

uint64_t Tensor.argmax(squeezingAxis:)()
{
  return MEMORY[0x270F4E288]();
}

uint64_t Tensor.scalar<A>(as:)()
{
  return MEMORY[0x270F4E2A0]();
}

uint64_t Tensor.scalars<A>(as:)()
{
  return MEMORY[0x270F4E2B0]();
}

uint64_t Tensor.squared()()
{
  return MEMORY[0x270F4E2B8]();
}

uint64_t Tensor.init(coercing:scalarType:on:)()
{
  return MEMORY[0x270F4E2C0]();
}

uint64_t Tensor.reshaped(to:)()
{
  return MEMORY[0x270F4E2C8]();
}

uint64_t Tensor.init(stacking:alongAxis:scalarType:)()
{
  return MEMORY[0x270F4E2E0]();
}

uint64_t type metadata accessor for Tensor()
{
  return MEMORY[0x270F4E2F8]();
}

uint64_t Tensor.subscript.getter()
{
  return MEMORY[0x270F4E318]();
}

uint64_t Dataset.makeIterator()()
{
  return MEMORY[0x270F4E330]();
}

uint64_t Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)()
{
  return MEMORY[0x270F4E340]();
}

uint64_t Dropout.init(probability:seed:)()
{
  return MEMORY[0x270F4E348]();
}

uint64_t type metadata accessor for Dropout()
{
  return MEMORY[0x270F4E358]();
}

uint64_t softmax(_:alongAxis:)()
{
  return MEMORY[0x270F4E368]();
}

uint64_t gradient(at:of:)()
{
  return MEMORY[0x270F4E370]();
}

uint64_t BatchNorm.runningMean.getter()
{
  return MEMORY[0x270F4E378]();
}

uint64_t BatchNorm.$runningMean.getter()
{
  return MEMORY[0x270F4E380]();
}

uint64_t BatchNorm.runningVariance.getter()
{
  return MEMORY[0x270F4E388]();
}

uint64_t BatchNorm.$runningVariance.getter()
{
  return MEMORY[0x270F4E390]();
}

uint64_t BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)()
{
  return MEMORY[0x270F4E398]();
}

uint64_t BatchNorm.scale.getter()
{
  return MEMORY[0x270F4E3A0]();
}

uint64_t BatchNorm.$scale.getter()
{
  return MEMORY[0x270F4E3A8]();
}

uint64_t BatchNorm.offset.getter()
{
  return MEMORY[0x270F4E3B0]();
}

uint64_t BatchNorm.$offset.getter()
{
  return MEMORY[0x270F4E3B8]();
}

uint64_t BatchNorm.epsilon.getter()
{
  return MEMORY[0x270F4E3C0]();
}

uint64_t BatchNorm.init(momentum:offset:scale:epsilon:runningMean:runningVariance:)()
{
  return MEMORY[0x270F4E3C8]();
}

uint64_t BatchNorm.momentum.getter()
{
  return MEMORY[0x270F4E3D0]();
}

uint64_t type metadata accessor for BatchNorm()
{
  return MEMORY[0x270F4E3D8]();
}

uint64_t LeakyReLU.init(alpha:)()
{
  return MEMORY[0x270F4E3E0]();
}

uint64_t Parameter.id.getter()
{
  return MEMORY[0x270F4E3E8]();
}

uint64_t Parameter.shape.getter()
{
  return MEMORY[0x270F4E3F0]();
}

uint64_t Parameter.value.getter()
{
  return MEMORY[0x270F4E3F8]();
}

uint64_t type metadata accessor for Parameter()
{
  return MEMORY[0x270F4E400]();
}

uint64_t ZeroPad1D.init(size:)()
{
  return MEMORY[0x270F4E408]();
}

uint64_t static MetricsKey.trainingLoss.getter()
{
  return MEMORY[0x270EEA3A8]();
}

uint64_t static MetricsKey.trainingError.getter()
{
  return MEMORY[0x270EEA3B0]();
}

uint64_t static MetricsKey.validationLoss.getter()
{
  return MEMORY[0x270EEA3B8]();
}

uint64_t static MetricsKey.trainingAccuracy.getter()
{
  return MEMORY[0x270EEA3C8]();
}

uint64_t static MetricsKey.validationAccuracy.getter()
{
  return MEMORY[0x270EEA3D0]();
}

uint64_t static MetricsKey.trainingMaximumError.getter()
{
  return MEMORY[0x270EEA3D8]();
}

uint64_t type metadata accessor for MetricsKey()
{
  return MEMORY[0x270EEA3E0]();
}

uint64_t DenseMatrix.columnCount.getter()
{
  return MEMORY[0x270EEA3E8]();
}

uint64_t DenseMatrix.layout.getter()
{
  return MEMORY[0x270EEA3F0]();
}

uint64_t DenseMatrix.storage.modify()
{
  return MEMORY[0x270EEA3F8]();
}

uint64_t DenseMatrix.init(rowCount:columnCount:layout:repeating:)()
{
  return MEMORY[0x270EEA400]();
}

uint64_t DenseMatrix.rowCount.getter()
{
  return MEMORY[0x270EEA408]();
}

uint64_t type metadata accessor for DenseMatrix()
{
  return MEMORY[0x270EEA410]();
}

uint64_t DenseMatrix.subscript.setter()
{
  return MEMORY[0x270EEA418]();
}

uint64_t static ImageReader.read(url:)()
{
  return MEMORY[0x270EEA420]();
}

uint64_t ImageReader.init()()
{
  return MEMORY[0x270EEA428]();
}

uint64_t type metadata accessor for ImageReader()
{
  return MEMORY[0x270EEA430]();
}

uint64_t ImageScaler.init(targetSize:)()
{
  return MEMORY[0x270EEA438]();
}

uint64_t type metadata accessor for ImageScaler()
{
  return MEMORY[0x270EEA440]();
}

uint64_t Transformer.export(to:)()
{
  return MEMORY[0x270EEA450]();
}

uint64_t Transformer.appending<A>(_:)()
{
  return MEMORY[0x270EEA460]();
}

uint64_t type metadata accessor for ImageFlipper.Orientation()
{
  return MEMORY[0x270EEA468]();
}

uint64_t ImageFlipper.init(orientation:)()
{
  return MEMORY[0x270EEA470]();
}

uint64_t type metadata accessor for ImageFlipper()
{
  return MEMORY[0x270EEA478]();
}

uint64_t ImageRotator.init(angle:)()
{
  return MEMORY[0x270EEA480]();
}

uint64_t type metadata accessor for ImageRotator()
{
  return MEMORY[0x270EEA488]();
}

uint64_t ApplyRandomly.init<A>(probability:_:)()
{
  return MEMORY[0x270EEA490]();
}

uint64_t Classification.probability.getter()
{
  return MEMORY[0x270EEA4A0]();
}

uint64_t Classification.init(label:probability:)()
{
  return MEMORY[0x270EEA4A8]();
}

uint64_t Classification.label.getter()
{
  return MEMORY[0x270EEA4B0]();
}

uint64_t LinearRegressor.Configuration.maximumIterations.setter()
{
  return MEMORY[0x270EEA4C0]();
}

uint64_t LinearRegressor.Configuration.convergenceThreshold.setter()
{
  return MEMORY[0x270EEA4C8]();
}

uint64_t LinearRegressor.Configuration.stepSize.setter()
{
  return MEMORY[0x270EEA4D0]();
}

uint64_t LinearRegressor.Configuration.l1Penalty.setter()
{
  return MEMORY[0x270EEA4D8]();
}

uint64_t LinearRegressor.Configuration.l2Penalty.setter()
{
  return MEMORY[0x270EEA4E0]();
}

uint64_t LinearRegressor.Configuration.init()()
{
  return MEMORY[0x270EEA4E8]();
}

uint64_t AnnotatedFeature.annotation.getter()
{
  return MEMORY[0x270EEA4F0]();
}

uint64_t AnnotatedFeature.annotation.setter()
{
  return MEMORY[0x270EEA4F8]();
}

uint64_t AnnotatedFeature.init(feature:annotation:)()
{
  return MEMORY[0x270EEA500]();
}

uint64_t AnnotatedFeature.feature.getter()
{
  return MEMORY[0x270EEA508]();
}

uint64_t AnnotatedFeature.feature.setter()
{
  return MEMORY[0x270EEA510]();
}

uint64_t dispatch thunk of EstimatorDecoder.decode<A>(_:)()
{
  return MEMORY[0x270EEA518]();
}

uint64_t dispatch thunk of EstimatorEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEA520]();
}

uint64_t AudioFeaturePrint.init(windowDuration:overlapFactor:)()
{
  return MEMORY[0x270EEA528]();
}

uint64_t type metadata accessor for AudioFeaturePrint()
{
  return MEMORY[0x270EEA530]();
}

uint64_t BaseTreeRegressor.configuration.setter()
{
  return MEMORY[0x270EEA538]();
}

uint64_t BaseTreeRegressor.init(configuration:)()
{
  return MEMORY[0x270EEA540]();
}

uint64_t BaseTreeRegressor.makeTransformer()()
{
  return MEMORY[0x270EEA548]();
}

uint64_t BaseTreeRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)()
{
  return MEMORY[0x270EEA550]();
}

uint64_t BaseTreeRegressor.fitted(features:annotations:eventHandler:)()
{
  return MEMORY[0x270EEA558]();
}

uint64_t BaseTreeRegressor.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x270EEA560]();
}

uint64_t type metadata accessor for BaseTreeRegressor()
{
  return MEMORY[0x270EEA568]();
}

uint64_t ImageFeaturePrint.init(revision:cropAndScale:context:)()
{
  return MEMORY[0x270EEA570]();
}

uint64_t type metadata accessor for ImageFeaturePrint()
{
  return MEMORY[0x270EEA578]();
}

uint64_t BaseTreeClassifier.configuration.setter()
{
  return MEMORY[0x270EEA580]();
}

uint64_t BaseTreeClassifier.init(configuration:)()
{
  return MEMORY[0x270EEA588]();
}

uint64_t BaseTreeClassifier.makeTransformer(classCount:featureCount:)()
{
  return MEMORY[0x270EEA590]();
}

uint64_t BaseTreeClassifier.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:classCount:eventHandler:)()
{
  return MEMORY[0x270EEA598]();
}

uint64_t BaseTreeClassifier.fitted(features:annotations:classCount:eventHandler:)()
{
  return MEMORY[0x270EEA5A0]();
}

uint64_t BaseTreeClassifier.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x270EEA5A8]();
}

uint64_t type metadata accessor for BaseTreeClassifier()
{
  return MEMORY[0x270EEA5B0]();
}

uint64_t RandomImageCropper.init(scale:aspectRatio:)()
{
  return MEMORY[0x270EEA5B8]();
}

uint64_t type metadata accessor for RandomImageCropper()
{
  return MEMORY[0x270EEA5C0]();
}

uint64_t AnnotatedPrediction.prediction.getter()
{
  return MEMORY[0x270EEA5D8]();
}

uint64_t AnnotatedPrediction.prediction.setter()
{
  return MEMORY[0x270EEA5E0]();
}

uint64_t static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
  return MEMORY[0x270EEA5E8]();
}

uint64_t static AugmentationBuilder.buildPartialBlock<A>(first:)()
{
  return MEMORY[0x270EEA5F0]();
}

{
  return MEMORY[0x270EEA5F8]();
}

uint64_t BaseLinearRegressor.init(configuration:)()
{
  return MEMORY[0x270EEA600]();
}

uint64_t BaseLinearRegressor.makeTransformer()()
{
  return MEMORY[0x270EEA608]();
}

uint64_t BaseLinearRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)()
{
  return MEMORY[0x270EEA610]();
}

uint64_t BaseLinearRegressor.fitted(features:annotations:eventHandler:)()
{
  return MEMORY[0x270EEA618]();
}

uint64_t BaseLinearRegressor.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x270EEA620]();
}

uint64_t type metadata accessor for BaseLinearRegressor()
{
  return MEMORY[0x270EEA628]();
}

uint64_t SupervisedEstimator<>.encode(_:to:)()
{
  return MEMORY[0x270EEA640]();
}

uint64_t TemporalTransformer.export(to:)()
{
  return MEMORY[0x270EEA648]();
}

uint64_t maximumAbsoluteError<A, B, C>(_:_:)()
{
  return MEMORY[0x270EEA658]();
}

uint64_t rootMeanSquaredError<A, B, C>(_:_:)()
{
  return MEMORY[0x270EEA660]();
}

uint64_t ClassificationMetrics.recallScore(label:)()
{
  return MEMORY[0x270EEA668]();
}

uint64_t ClassificationMetrics.exampleCount.getter()
{
  return MEMORY[0x270EEA670]();
}

uint64_t ClassificationMetrics.precisionScore(label:)()
{
  return MEMORY[0x270EEA678]();
}

uint64_t ClassificationMetrics.truePositiveCount(of:)()
{
  return MEMORY[0x270EEA680]();
}

uint64_t ClassificationMetrics.falseNegativeCount(of:)()
{
  return MEMORY[0x270EEA688]();
}

uint64_t ClassificationMetrics.falsePositiveCount(of:)()
{
  return MEMORY[0x270EEA690]();
}

uint64_t ClassificationMetrics.makeConfusionMatrix<>()()
{
  return MEMORY[0x270EEA698]();
}

uint64_t ClassificationMetrics.count(label:)()
{
  return MEMORY[0x270EEA6A0]();
}

uint64_t ClassificationMetrics.labels.getter()
{
  return MEMORY[0x270EEA6A8]();
}

uint64_t ClassificationMetrics.accuracy.getter()
{
  return MEMORY[0x270EEA6B0]();
}

uint64_t ClassificationMetrics.init<A, B>(predicted:groundTruth:labels:)()
{
  return MEMORY[0x270EEA6B8]();
}

uint64_t ClassificationMetrics.init()()
{
  return MEMORY[0x270EEA6C0]();
}

uint64_t ClassificationMetrics.init<A, B>(_:_:)()
{
  return MEMORY[0x270EEA6C8]();
}

uint64_t ClassificationMetrics.init<A>(_:)()
{
  return MEMORY[0x270EEA6D0]();
}

uint64_t ImageExposureAdjuster.init(amount:)()
{
  return MEMORY[0x270EEA6D8]();
}

uint64_t type metadata accessor for ImageExposureAdjuster()
{
  return MEMORY[0x270EEA6E0]();
}

uint64_t BaseTreeRegressorModel.export(to:)()
{
  return MEMORY[0x270EEA6E8]();
}

uint64_t BaseTreeRegressorModel.applied(features:eventHandler:)()
{
  return MEMORY[0x270EEA6F0]();
}

uint64_t type metadata accessor for BaseTreeRegressorModel()
{
  return MEMORY[0x270EEA6F8]();
}

uint64_t BaseTreeClassifierModel.export(to:)()
{
  return MEMORY[0x270EEA700]();
}

uint64_t BaseTreeClassifierModel.applied(features:eventHandler:)()
{
  return MEMORY[0x270EEA708]();
}

uint64_t type metadata accessor for BaseTreeClassifierModel()
{
  return MEMORY[0x270EEA710]();
}

uint64_t BaseLinearRegressorModel.export(to:)()
{
  return MEMORY[0x270EEA718]();
}

uint64_t BaseLinearRegressorModel.applied(features:eventHandler:)()
{
  return MEMORY[0x270EEA720]();
}

uint64_t type metadata accessor for BaseLinearRegressorModel()
{
  return MEMORY[0x270EEA728]();
}

uint64_t BoostedTreeConfiguration.parallelTreeCount.getter()
{
  return MEMORY[0x270EEA730]();
}

uint64_t BoostedTreeConfiguration.parallelTreeCount.setter()
{
  return MEMORY[0x270EEA738]();
}

uint64_t BoostedTreeConfiguration.randomSeed.getter()
{
  return MEMORY[0x270EEA740]();
}

uint64_t BoostedTreeConfiguration.randomSeed.setter()
{
  return MEMORY[0x270EEA748]();
}

uint64_t BoostedTreeConfiguration.learningRate.getter()
{
  return MEMORY[0x270EEA750]();
}

uint64_t BoostedTreeConfiguration.learningRate.setter()
{
  return MEMORY[0x270EEA758]();
}

uint64_t BoostedTreeConfiguration.maximumDepth.getter()
{
  return MEMORY[0x270EEA760]();
}

uint64_t BoostedTreeConfiguration.maximumDepth.setter()
{
  return MEMORY[0x270EEA768]();
}

uint64_t BoostedTreeConfiguration.rowSubsample.getter()
{
  return MEMORY[0x270EEA770]();
}

uint64_t BoostedTreeConfiguration.rowSubsample.setter()
{
  return MEMORY[0x270EEA778]();
}

uint64_t BoostedTreeConfiguration.columnSubsample.getter()
{
  return MEMORY[0x270EEA780]();
}

uint64_t BoostedTreeConfiguration.columnSubsample.setter()
{
  return MEMORY[0x270EEA788]();
}

uint64_t BoostedTreeConfiguration.maximumIterations.getter()
{
  return MEMORY[0x270EEA790]();
}

uint64_t BoostedTreeConfiguration.maximumIterations.setter()
{
  return MEMORY[0x270EEA798]();
}

uint64_t BoostedTreeConfiguration.minimumChildWeight.getter()
{
  return MEMORY[0x270EEA7A0]();
}

uint64_t BoostedTreeConfiguration.minimumChildWeight.setter()
{
  return MEMORY[0x270EEA7A8]();
}

uint64_t BoostedTreeConfiguration.minimumLossReduction.getter()
{
  return MEMORY[0x270EEA7B0]();
}

uint64_t BoostedTreeConfiguration.minimumLossReduction.setter()
{
  return MEMORY[0x270EEA7B8]();
}

uint64_t BoostedTreeConfiguration.earlyStoppingIterationCount.getter()
{
  return MEMORY[0x270EEA7C0]();
}

uint64_t BoostedTreeConfiguration.earlyStoppingIterationCount.setter()
{
  return MEMORY[0x270EEA7C8]();
}

uint64_t BoostedTreeConfiguration.init()()
{
  return MEMORY[0x270EEA7D0]();
}

uint64_t type metadata accessor for BoostedTreeConfiguration()
{
  return MEMORY[0x270EEA7D8]();
}

uint64_t RandomImageNoiseGenerator.init(intensity:)()
{
  return MEMORY[0x270EEA7E0]();
}

uint64_t type metadata accessor for RandomImageNoiseGenerator()
{
  return MEMORY[0x270EEA7E8]();
}

uint64_t ClassificationDistribution.mostLikelyLabel.getter()
{
  return MEMORY[0x270EEA7F8]();
}

uint64_t ClassificationDistribution.map<A>(_:)()
{
  return MEMORY[0x270EEA800]();
}

uint64_t type metadata accessor for ClassificationDistribution()
{
  return MEMORY[0x270EEA808]();
}

uint64_t SupervisedTabularEstimator.read(from:)()
{
  return MEMORY[0x270EEA818]();
}

uint64_t SupervisedTabularEstimator.write(_:to:overwrite:)()
{
  return MEMORY[0x270EEA820]();
}

uint64_t LogisticRegressionClassifier.Configuration.maximumIterations.setter()
{
  return MEMORY[0x270EEA828]();
}

uint64_t LogisticRegressionClassifier.Configuration.convergenceThreshold.setter()
{
  return MEMORY[0x270EEA830]();
}

uint64_t LogisticRegressionClassifier.Configuration.stepSize.setter()
{
  return MEMORY[0x270EEA838]();
}

uint64_t LogisticRegressionClassifier.Configuration.l1Penalty.setter()
{
  return MEMORY[0x270EEA840]();
}

uint64_t LogisticRegressionClassifier.Configuration.l2Penalty.setter()
{
  return MEMORY[0x270EEA848]();
}

uint64_t LogisticRegressionClassifier.Configuration.init()()
{
  return MEMORY[0x270EEA850]();
}

uint64_t LogisticRegressionClassifier.makeTransformer()()
{
  return MEMORY[0x270EEA860]();
}

uint64_t LogisticRegressionClassifier.encodeWithOptimizer(_:to:)()
{
  return MEMORY[0x270EEA868]();
}

uint64_t LogisticRegressionClassifier.encode(_:to:)()
{
  return MEMORY[0x270EEA870]();
}

uint64_t LogisticRegressionClassifier.init(labels:configuration:)()
{
  return MEMORY[0x270EEA888]();
}

uint64_t MLModelImageFeatureExtractor.init(model:inputName:outputName:context:)()
{
  return MEMORY[0x270EEA898]();
}

uint64_t type metadata accessor for MLModelImageFeatureExtractor()
{
  return MEMORY[0x270EEA8A0]();
}

uint64_t UpdatableSupervisedEstimator.readWithOptimizer(from:)()
{
  return MEMORY[0x270EEA8A8]();
}

uint64_t UpdatableSupervisedEstimator.writeWithOptimizer(_:to:overwrite:)()
{
  return MEMORY[0x270EEA8B0]();
}

uint64_t UpsampledAugmentationSequence.makeAsyncIterator()()
{
  return MEMORY[0x270EEA8B8]();
}

uint64_t FullyConnectedNetworkClassifier.makeTransformer()()
{
  return MEMORY[0x270EEA8C0]();
}

uint64_t FullyConnectedNetworkClassifier.encodeWithOptimizer(_:to:)()
{
  return MEMORY[0x270EEA8C8]();
}

uint64_t BaseLogisticRegressionClassifier.init(configuration:)()
{
  return MEMORY[0x270EEA8E8]();
}

uint64_t BaseLogisticRegressionClassifier.makeTransformer(classCount:)()
{
  return MEMORY[0x270EEA8F0]();
}

uint64_t BaseLogisticRegressionClassifier.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:classCount:eventHandler:)()
{
  return MEMORY[0x270EEA8F8]();
}

uint64_t BaseLogisticRegressionClassifier.fitted(features:annotations:classCount:eventHandler:)()
{
  return MEMORY[0x270EEA900]();
}

uint64_t BaseLogisticRegressionClassifier.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x270EEA908]();
}

uint64_t type metadata accessor for BaseLogisticRegressionClassifier()
{
  return MEMORY[0x270EEA910]();
}

uint64_t UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)()
{
  return MEMORY[0x270EEA928]();
}

uint64_t BaseLogisticRegressionClassifierModel.export(to:)()
{
  return MEMORY[0x270EEA938]();
}

uint64_t BaseLogisticRegressionClassifierModel.applied(features:eventHandler:)()
{
  return MEMORY[0x270EEA940]();
}

uint64_t type metadata accessor for BaseLogisticRegressionClassifierModel()
{
  return MEMORY[0x270EEA948]();
}

uint64_t Event.init(origin:itemCount:totalItemCount:metrics:)()
{
  return MEMORY[0x270EEA950]();
}

uint64_t Event.metrics.getter()
{
  return MEMORY[0x270EEA958]();
}

uint64_t Event.itemCount.getter()
{
  return MEMORY[0x270EEA960]();
}

uint64_t type metadata accessor for Event()
{
  return MEMORY[0x270EEA968]();
}

uint64_t Augmenter.applied<A, B>(to:upsampledBy:)()
{
  return MEMORY[0x270EEA970]();
}

uint64_t Augmenter.init<A>(generator:_:)()
{
  return MEMORY[0x270EEA978]();
}

uint64_t ImageBlur.init(radius:)()
{
  return MEMORY[0x270EEA980]();
}

uint64_t type metadata accessor for ImageBlur()
{
  return MEMORY[0x270EEA988]();
}

uint64_t static FeatureType.shapedArray(dataType:shape:optional:)()
{
  return MEMORY[0x270F488F0]();
}

uint64_t FeatureType.IntParameters.init(optional:)()
{
  return MEMORY[0x270F488F8]();
}

uint64_t FeatureType.ImageParameters.width.getter()
{
  return MEMORY[0x270F48940]();
}

uint64_t FeatureType.ImageParameters.height.getter()
{
  return MEMORY[0x270F48948]();
}

uint64_t type metadata accessor for FeatureType.ImageParameters()
{
  return MEMORY[0x270F48958]();
}

uint64_t FeatureType.DoubleParameters.init(optional:)()
{
  return MEMORY[0x270F48960]();
}

uint64_t FeatureType.StringParameters.init(optional:)()
{
  return MEMORY[0x270F48968]();
}

uint64_t type metadata accessor for FeatureType.ShapedArrayParameters.DataType()
{
  return MEMORY[0x270F48970]();
}

uint64_t FeatureType.ShapedArrayParameters.dataType.setter()
{
  return MEMORY[0x270F48980]();
}

uint64_t FeatureType.ShapedArrayParameters.init()()
{
  return MEMORY[0x270F489A0]();
}

uint64_t type metadata accessor for FeatureType.ShapedArrayParameters()
{
  return MEMORY[0x270F489A8]();
}

uint64_t static FeatureType.dictionaryWithIntKeys(optional:)()
{
  return MEMORY[0x270F489B0]();
}

uint64_t static FeatureType.dictionaryWithStringKeys(optional:)()
{
  return MEMORY[0x270F489B8]();
}

uint64_t type metadata accessor for FeatureType()
{
  return MEMORY[0x270F489C0]();
}

uint64_t NeuralNetwork.preprocessors.getter()
{
  return MEMORY[0x270F48A60]();
}

uint64_t type metadata accessor for NeuralNetwork.WeightParameters()
{
  return MEMORY[0x270F48A68]();
}

uint64_t NeuralNetwork.WeightParameters.init(_:updatable:)()
{
  return MEMORY[0x270F48A70]();
}

uint64_t type metadata accessor for NeuralNetwork.ArrayShapeMapping()
{
  return MEMORY[0x270F48A78]();
}

uint64_t NeuralNetwork.ValidPaddingParameters.init()()
{
  return MEMORY[0x270F48A80]();
}

uint64_t NeuralNetwork.Layer.inputNames.modify()
{
  return MEMORY[0x270F48A88]();
}

uint64_t static NeuralNetwork.Layer.squeezeAll(name:inputName:outputName:)()
{
  return MEMORY[0x270F48A90]();
}

uint64_t static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)()
{
  return MEMORY[0x270F48A98]();
}

uint64_t NeuralNetwork.Layer.outputNames.modify()
{
  return MEMORY[0x270F48AA0]();
}

uint64_t NeuralNetwork.Layer.outputNames.getter()
{
  return MEMORY[0x270F48AA8]();
}

uint64_t static NeuralNetwork.Layer.innerProduct(name:inputName:outputName:inputChannelCount:outputChannelCount:)()
{
  return MEMORY[0x270F48AB0]();
}

uint64_t static NeuralNetwork.Layer.PadParameters.Kind.constant(value:)()
{
  return MEMORY[0x270F48AB8]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PadParameters.Kind()
{
  return MEMORY[0x270F48AC0]();
}

uint64_t NeuralNetwork.Layer.PadParameters.init(kind:amount:)()
{
  return MEMORY[0x270F48AC8]();
}

uint64_t static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)()
{
  return MEMORY[0x270F48AD0]();
}

uint64_t NeuralNetwork.Layer.PoolParameters.doesGlobalPooling.setter()
{
  return MEMORY[0x270F48AD8]();
}

uint64_t NeuralNetwork.Layer.PoolParameters.averageExcludesPadding.setter()
{
  return MEMORY[0x270F48AE0]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PoolParameters.Kind()
{
  return MEMORY[0x270F48AE8]();
}

uint64_t NeuralNetwork.Layer.PoolParameters.init(kind:kernelSize:strides:padding:)()
{
  return MEMORY[0x270F48AF0]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PoolParameters.Padding()
{
  return MEMORY[0x270F48B00]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PoolParameters()
{
  return MEMORY[0x270F48B08]();
}

uint64_t static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)()
{
  return MEMORY[0x270F48B10]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.SliceParameters.Axis()
{
  return MEMORY[0x270F48B18]();
}

uint64_t static NeuralNetwork.Layer.cosineSimilarity(name:inputNames:outputName:)()
{
  return MEMORY[0x270F48B20]();
}

uint64_t static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)()
{
  return MEMORY[0x270F48B28]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.FlattenParameters.ChannelLayout()
{
  return MEMORY[0x270F48B30]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.groupCount.setter()
{
  return MEMORY[0x270F48B38]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelSize.getter()
{
  return MEMORY[0x270F48B40]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelSize.setter()
{
  return MEMORY[0x270F48B48]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind()
{
  return MEMORY[0x270F48B58]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.dilationFactor.setter()
{
  return MEMORY[0x270F48B60]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.getter()
{
  return MEMORY[0x270F48B68]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.setter()
{
  return MEMORY[0x270F48B70]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter()
{
  return MEMORY[0x270F48B78]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.setter()
{
  return MEMORY[0x270F48B80]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.bias.setter()
{
  return MEMORY[0x270F48B88]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.strides.setter()
{
  return MEMORY[0x270F48B98]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.weights.setter()
{
  return MEMORY[0x270F48BA0]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters()
{
  return MEMORY[0x270F48BB0]();
}

uint64_t static NeuralNetwork.Layer.broadcastableSubtract(name:inputNames:outputName:)()
{
  return MEMORY[0x270F48BB8]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.init(inputChannelCount:outputChannelCount:)()
{
  return MEMORY[0x270F48BC0]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.inputChannelCount.getter()
{
  return MEMORY[0x270F48BC8]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter()
{
  return MEMORY[0x270F48BD0]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.bias.setter()
{
  return MEMORY[0x270F48BD8]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.hasBias.setter()
{
  return MEMORY[0x270F48BE0]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.weights.setter()
{
  return MEMORY[0x270F48BE8]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.InnerProductParameters()
{
  return MEMORY[0x270F48BF0]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.inputChannelCount.getter()
{
  return MEMORY[0x270F48BF8]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.mean.setter()
{
  return MEMORY[0x270F48C00]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.scale.setter()
{
  return MEMORY[0x270F48C08]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.offset.setter()
{
  return MEMORY[0x270F48C10]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.variance.setter()
{
  return MEMORY[0x270F48C18]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.BatchNormalizeParameters()
{
  return MEMORY[0x270F48C20]();
}

uint64_t static NeuralNetwork.Layer.add(name:inputNames:outputName:)()
{
  return MEMORY[0x270F48C28]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.Kind()
{
  return MEMORY[0x270F48C30]();
}

uint64_t NeuralNetwork.Layer.kind.getter()
{
  return MEMORY[0x270F48C38]();
}

uint64_t NeuralNetwork.Layer.kind.setter()
{
  return MEMORY[0x270F48C40]();
}

uint64_t NeuralNetwork.Layer.init(name:inputNames:outputNames:kind:)()
{
  return MEMORY[0x270F48C48]();
}

uint64_t NeuralNetwork.Layer.name.getter()
{
  return MEMORY[0x270F48C50]();
}

uint64_t static NeuralNetwork.Layer.pool(name:inputName:outputName:kind:kernelSize:strides:padding:)()
{
  return MEMORY[0x270F48C58]();
}

uint64_t static NeuralNetwork.Layer.relu(name:inputName:outputName:)()
{
  return MEMORY[0x270F48C60]();
}

uint64_t static NeuralNetwork.Layer.slice(name:inputName:outputName:startIndex:endIndex:stride:axis:)()
{
  return MEMORY[0x270F48C68]();
}

uint64_t static NeuralNetwork.Layer.branch(name:inputName:ifBranch:elseBranch:)()
{
  return MEMORY[0x270F48C70]();
}

uint64_t static NeuralNetwork.Layer.flatten(name:inputName:outputName:targetChannelLayout:)()
{
  return MEMORY[0x270F48C78]();
}

uint64_t static NeuralNetwork.Layer.softmax(name:inputName:outputName:)()
{
  return MEMORY[0x270F48C88]();
}

uint64_t static NeuralNetwork.Layer.squeeze(name:inputName:outputName:axes:)()
{
  return MEMORY[0x270F48C90]();
}

uint64_t static NeuralNetwork.Layer.constant(name:outputName:shape:values:)()
{
  return MEMORY[0x270F48C98]();
}

uint64_t static NeuralNetwork.Layer.leakyRelu(name:inputName:outputName:negativeSlope:)()
{
  return MEMORY[0x270F48CA0]();
}

uint64_t static NeuralNetwork.Layer.softmaxND(name:inputName:outputName:axis:)()
{
  return MEMORY[0x270F48CA8]();
}

uint64_t static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)()
{
  return MEMORY[0x270F48CB0]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer()
{
  return MEMORY[0x270F48CB8]();
}

uint64_t NeuralNetwork.Border.init(leadingHeight:trailingHeight:leadingWidth:trailingWidth:)()
{
  return MEMORY[0x270F48CC0]();
}

uint64_t type metadata accessor for NeuralNetwork.Border()
{
  return MEMORY[0x270F48CC8]();
}

uint64_t NeuralNetwork.Extent.width.getter()
{
  return MEMORY[0x270F48CD0]();
}

uint64_t NeuralNetwork.Extent.init(height:width:)()
{
  return MEMORY[0x270F48CD8]();
}

uint64_t NeuralNetwork.Extent.height.getter()
{
  return MEMORY[0x270F48CE0]();
}

uint64_t NeuralNetwork.init(layers:preprocessors:)()
{
  return MEMORY[0x270F48CE8]();
}

uint64_t NeuralNetwork.layers.modify()
{
  return MEMORY[0x270F48CF0]();
}

uint64_t NeuralNetwork.layers.getter()
{
  return MEMORY[0x270F48CF8]();
}

uint64_t type metadata accessor for NeuralNetwork()
{
  return MEMORY[0x270F48D00]();
}

uint64_t FeatureDescription.featureDescription.setter()
{
  return MEMORY[0x270F48D08]();
}

uint64_t FeatureDescription.init(name:type:description:)()
{
  return MEMORY[0x270F48D10]();
}

uint64_t FeatureDescription.name.getter()
{
  return MEMORY[0x270F48D18]();
}

uint64_t FeatureDescription.name.setter()
{
  return MEMORY[0x270F48D20]();
}

uint64_t FeatureDescription.type.getter()
{
  return MEMORY[0x270F48D28]();
}

uint64_t FeatureDescription.type.setter()
{
  return MEMORY[0x270F48D30]();
}

uint64_t FeatureDescription.init()()
{
  return MEMORY[0x270F48D38]();
}

uint64_t type metadata accessor for FeatureDescription()
{
  return MEMORY[0x270F48D40]();
}

uint64_t PipelineConfiguration.init(models:names:)()
{
  return MEMORY[0x270F48D98]();
}

uint64_t NeuralNetworkRegressor.preprocessors.getter()
{
  return MEMORY[0x270F48DB8]();
}

uint64_t NeuralNetworkRegressor.layers.getter()
{
  return MEMORY[0x270F48DD0]();
}

uint64_t type metadata accessor for NeuralNetworkRegressor()
{
  return MEMORY[0x270F48DD8]();
}

uint64_t type metadata accessor for NeuralNetworkClassifier.ClassLabels()
{
  return MEMORY[0x270F48DE8]();
}

uint64_t NeuralNetworkClassifier.classLabels.setter()
{
  return MEMORY[0x270F48DF0]();
}

uint64_t NeuralNetworkClassifier.preprocessors.getter()
{
  return MEMORY[0x270F48DF8]();
}

uint64_t NeuralNetworkClassifier.arrayInputShapeMapping.setter()
{
  return MEMORY[0x270F48E00]();
}

uint64_t NeuralNetworkClassifier.labelProbabilityLayerName.setter()
{
  return MEMORY[0x270F48E08]();
}

uint64_t NeuralNetworkClassifier.init(layers:preprocessors:)()
{
  return MEMORY[0x270F48E10]();
}

uint64_t NeuralNetworkClassifier.layers.getter()
{
  return MEMORY[0x270F48E18]();
}

uint64_t type metadata accessor for NeuralNetworkClassifier()
{
  return MEMORY[0x270F48E20]();
}

uint64_t type metadata accessor for CustomModelConfiguration.ParameterValue()
{
  return MEMORY[0x270F48E28]();
}

uint64_t CustomModelConfiguration.init(className:parameters:)()
{
  return MEMORY[0x270F48E30]();
}

uint64_t type metadata accessor for OneHotEncoderConfiguration.UnknownBehavior()
{
  return MEMORY[0x270F48E48]();
}

uint64_t OneHotEncoderConfiguration.init(orderedCategories:sparseOutput:unknownBehavior:)()
{
  return MEMORY[0x270F48E58]();
}

uint64_t type metadata accessor for LinearClassifierConfiguration.ClassLabels()
{
  return MEMORY[0x270F48EA8]();
}

uint64_t LinearClassifierConfiguration.classLabels.setter()
{
  return MEMORY[0x270F48EB0]();
}

uint64_t type metadata accessor for LinearClassifierConfiguration()
{
  return MEMORY[0x270F48EE8]();
}

uint64_t SoundAnalysisPreprocessorKind.VGGishParameters.init()()
{
  return MEMORY[0x270F48EF0]();
}

uint64_t type metadata accessor for SoundAnalysisPreprocessorKind()
{
  return MEMORY[0x270F48EF8]();
}

uint64_t FeatureVectorizerConfiguration.Input.init(name:size:)()
{
  return MEMORY[0x270F48F00]();
}

uint64_t type metadata accessor for FeatureVectorizerConfiguration.Input()
{
  return MEMORY[0x270F48F20]();
}

uint64_t FeatureVectorizerConfiguration.init(inputs:)()
{
  return MEMORY[0x270F48F28]();
}

uint64_t PipelineRegressorConfiguration.init(models:names:)()
{
  return MEMORY[0x270F48F50]();
}

uint64_t PipelineClassifierConfiguration.init(models:names:)()
{
  return MEMORY[0x270F48F90]();
}

uint64_t DictionaryVectorizerConfiguration.init<A>(keys:)()
{
  return MEMORY[0x270F48FB0]();
}

uint64_t type metadata accessor for TreeEnsembleClassifierConfiguration.ClassLabels()
{
  return MEMORY[0x270F48FD8]();
}

uint64_t TreeEnsembleClassifierConfiguration.classLabels.setter()
{
  return MEMORY[0x270F48FE0]();
}

uint64_t type metadata accessor for TreeEnsembleClassifierConfiguration()
{
  return MEMORY[0x270F48FF8]();
}

uint64_t Model.init(contentsOf:)()
{
  return MEMORY[0x270F49000]();
}

uint64_t Model.serialized()()
{
  return MEMORY[0x270F49008]();
}

uint64_t Model.nestedModels.getter()
{
  return MEMORY[0x270F49010]();
}

uint64_t Model.versionString.setter()
{
  return MEMORY[0x270F49018]();
}

uint64_t Model.modelDescription.setter()
{
  return MEMORY[0x270F49020]();
}

uint64_t Model.predictedFeatureName.getter()
{
  return MEMORY[0x270F49028]();
}

uint64_t Model.predictedFeatureName.setter()
{
  return MEMORY[0x270F49030]();
}

uint64_t Model.specificationVersion.getter()
{
  return MEMORY[0x270F49038]();
}

uint64_t Model.specificationVersion.setter()
{
  return MEMORY[0x270F49040]();
}

uint64_t Model.predictedProbabilitiesName.getter()
{
  return MEMORY[0x270F49048]();
}

uint64_t Model.predictedProbabilitiesName.setter()
{
  return MEMORY[0x270F49050]();
}

uint64_t Model.kind.getter()
{
  return MEMORY[0x270F49058]();
}

uint64_t Model.kind.setter()
{
  return MEMORY[0x270F49060]();
}

uint64_t Model.write(to:)()
{
  return MEMORY[0x270F49068]();
}

uint64_t Model.author.setter()
{
  return MEMORY[0x270F49070]();
}

uint64_t Model.inputs.getter()
{
  return MEMORY[0x270F49080]();
}

uint64_t Model.inputs.setter()
{
  return MEMORY[0x270F49088]();
}

uint64_t Model.license.setter()
{
  return MEMORY[0x270F49098]();
}

uint64_t Model.outputs.getter()
{
  return MEMORY[0x270F490A8]();
}

uint64_t Model.outputs.setter()
{
  return MEMORY[0x270F490B0]();
}

uint64_t Model.metadata.modify()
{
  return MEMORY[0x270F490B8]();
}

uint64_t Model.metadata.getter()
{
  return MEMORY[0x270F490C0]();
}

uint64_t Model.metadata.setter()
{
  return MEMORY[0x270F490C8]();
}

uint64_t Model.init()()
{
  return MEMORY[0x270F490D0]();
}

uint64_t type metadata accessor for Model()
{
  return MEMORY[0x270F490D8]();
}

uint64_t Package.rootModelURL.getter()
{
  return MEMORY[0x270F490E8]();
}

uint64_t Package.setRootModel(_:)()
{
  return MEMORY[0x270F490F0]();
}

uint64_t Package.ModelMetadata.description.setter()
{
  return MEMORY[0x270F49100]();
}

uint64_t Package.ModelMetadata.creatorDefined.modify()
{
  return MEMORY[0x270F49108]();
}

uint64_t Package.ModelMetadata.creatorDefined.setter()
{
  return MEMORY[0x270F49118]();
}

uint64_t Package.ModelMetadata.author.setter()
{
  return MEMORY[0x270F49128]();
}

uint64_t Package.ModelMetadata.license.setter()
{
  return MEMORY[0x270F49138]();
}

uint64_t Package.ModelMetadata.version.setter()
{
  return MEMORY[0x270F49148]();
}

uint64_t Package.ModelMetadata.init()()
{
  return MEMORY[0x270F49150]();
}

uint64_t type metadata accessor for Package.ModelMetadata()
{
  return MEMORY[0x270F49158]();
}

uint64_t Package.writeMetadata(_:)()
{
  return MEMORY[0x270F49160]();
}

uint64_t Package.init(url:)()
{
  return MEMORY[0x270F49168]();
}

uint64_t type metadata accessor for Package()
{
  return MEMORY[0x270F49170]();
}

uint64_t MLProgram.mainFunction.getter()
{
  return MEMORY[0x270F49188]();
}

uint64_t MLProgram.mainFunction.setter()
{
  return MEMORY[0x270F49190]();
}

uint64_t MLProgram.NamedValueType.init(name:type:)()
{
  return MEMORY[0x270F49198]();
}

uint64_t type metadata accessor for MLProgram.NamedValueType()
{
  return MEMORY[0x270F491B8]();
}

uint64_t type metadata accessor for MLProgram.ShapeDimension()
{
  return MEMORY[0x270F491C8]();
}

uint64_t MLProgram.Block.operations.modify()
{
  return MEMORY[0x270F491E8]();
}

uint64_t MLProgram.Block.outputs.modify()
{
  return MEMORY[0x270F49208]();
}

uint64_t type metadata accessor for MLProgram.Block()
{
  return MEMORY[0x270F49210]();
}

uint64_t static MLProgram.Value.immediateList<A>(type:length:contents:)()
{
  return MEMORY[0x270F49238]();
}

uint64_t static MLProgram.Value.immediateTensor(dataType:shape:contents:)()
{
  return MEMORY[0x270F49258]();
}

uint64_t type metadata accessor for MLProgram.Value.Tensor()
{
  return MEMORY[0x270F49278]();
}

uint64_t type metadata accessor for MLProgram.Value()
{
  return MEMORY[0x270F49280]();
}

uint64_t type metadata accessor for MLProgram.Argument.Binding()
{
  return MEMORY[0x270F492E0]();
}

uint64_t MLProgram.Argument.init(binding:)()
{
  return MEMORY[0x270F492E8]();
}

uint64_t type metadata accessor for MLProgram.Argument()
{
  return MEMORY[0x270F49308]();
}

uint64_t type metadata accessor for MLProgram.DataType()
{
  return MEMORY[0x270F49310]();
}

uint64_t MLProgram.Function.blockSpecializations.modify()
{
  return MEMORY[0x270F49328]();
}

uint64_t MLProgram.Function.blockSpecializations.getter()
{
  return MEMORY[0x270F49330]();
}

uint64_t type metadata accessor for MLProgram.Function()
{
  return MEMORY[0x270F49370]();
}

uint64_t MLProgram.Operation.init(name:inputs:outputs:)()
{
  return MEMORY[0x270F49390]();
}

uint64_t type metadata accessor for MLProgram.Operation()
{
  return MEMORY[0x270F493E0]();
}

uint64_t static MLProgram.ValueType.dictionary(keyType:valueType:)()
{
  return MEMORY[0x270F493E8]();
}

uint64_t static MLProgram.ValueType.tensor(dataType:shape:)()
{
  return MEMORY[0x270F49408]();
}

uint64_t type metadata accessor for MLProgram.ValueType()
{
  return MEMORY[0x270F49410]();
}

uint64_t type metadata accessor for MLProgram()
{
  return MEMORY[0x270F49430]();
}

uint64_t type metadata accessor for ModelKind()
{
  return MEMORY[0x270F49440]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x270FA16A8]();
}

uint64_t UTType.init(filenameExtension:conformingTo:)()
{
  return MEMORY[0x270FA1750]();
}

uint64_t static UTType.commaSeparatedText.getter()
{
  return MEMORY[0x270FA1770]();
}

uint64_t static UTType.png.getter()
{
  return MEMORY[0x270FA17C0]();
}

uint64_t static UTType.data.getter()
{
  return MEMORY[0x270FA1800]();
}

uint64_t static UTType.json.getter()
{
  return MEMORY[0x270FA1830]();
}

uint64_t static UTType.text.getter()
{
  return MEMORY[0x270FA1840]();
}

uint64_t static UTType.audio.getter()
{
  return MEMORY[0x270FA1858]();
}

uint64_t static UTType.image.getter()
{
  return MEMORY[0x270FA1868]();
}

uint64_t static UTType.movie.getter()
{
  return MEMORY[0x270FA1870]();
}

uint64_t UTType.conforms(to:)()
{
  return MEMORY[0x270FA18E0]();
}

uint64_t static UTType.plainText.getter()
{
  return MEMORY[0x270FA1930]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x270FA1938]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x270FA2C68]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t MLShapedArray.shape.getter()
{
  return MEMORY[0x270EE7530]();
}

uint64_t MLShapedArray.init<A>(scalars:shape:)()
{
  return MEMORY[0x270EE7540]();
}

uint64_t MLShapedArray.subscript.setter()
{
  return MEMORY[0x270EE7560]();
}

uint64_t type metadata accessor for MLShapedArray()
{
  return MEMORY[0x270EE7578]();
}

uint64_t MLShapedArray.init(_:)()
{
  return MEMORY[0x270EE75A0]();
}

uint64_t MLShapedArraySlice.init(scalar:)()
{
  return MEMORY[0x270EE75F0]();
}

uint64_t MLShapedArrayProtocol.init(converting:)()
{
  return MEMORY[0x270EE7620]();
}

uint64_t MLShapedArrayProtocol.init<A>(converting:)()
{
  return MEMORY[0x270EE7628]();
}

uint64_t MLShapedArrayProtocol.init(arrayLiteral:)()
{
  return MEMORY[0x270EE7638]();
}

uint64_t MLShapedArrayProtocol.scalar.getter()
{
  return MEMORY[0x270EE7648]();
}

uint64_t MLShapedArrayProtocol.scalars.getter()
{
  return MEMORY[0x270EE7650]();
}

uint64_t MLShapedArrayProtocol.subscript.getter()
{
  return MEMORY[0x270EE7660]();
}

{
  return MEMORY[0x270EE76A0]();
}

uint64_t MLShapedArrayProtocol.subscript.setter()
{
  return MEMORY[0x270EE7668]();
}

{
  return MEMORY[0x270EE76A8]();
}

uint64_t MLShapedArrayProtocol.init(repeating:shape:)()
{
  return MEMORY[0x270EE7670]();
}

uint64_t type metadata accessor for Publishers.Autoconnect()
{
  return MEMORY[0x270EE38A0]();
}

uint64_t Publishers.MakeConnectable.init(upstream:)()
{
  return MEMORY[0x270EE3918]();
}

uint64_t type metadata accessor for Publishers.MakeConnectable()
{
  return MEMORY[0x270EE3920]();
}

uint64_t PassthroughSubject.send(completion:)()
{
  return MEMORY[0x270EE3C40]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x270EE3C50]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x270EE3C70]();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return MEMORY[0x270EE3C78]();
}

uint64_t CurrentValueSubject.value.setter()
{
  return MEMORY[0x270EE3CA0]();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return MEMORY[0x270EE3CC0]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x270EE3E08]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x270FA0970]();
}

uint64_t static DispatchQoS.default.getter()
{
  return MEMORY[0x270FA0A18]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t DispatchTime.advanced(by:)()
{
  return MEMORY[0x270FA0AD0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x270F9CFB0]();
}

uint64_t Array.init()()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter()
{
  return MEMORY[0x270F9CFD8]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter()
{
  return MEMORY[0x270F9CFE0]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter()
{
  return MEMORY[0x270F9CFE8]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter()
{
  return MEMORY[0x270F9CFF0]();
}

uint64_t static BinaryFloatingPoint._convert<A>(from:)()
{
  return MEMORY[0x270F9D008]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x270F9D030]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x270F9D050]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1830]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x270F9D060]();
}

uint64_t Dictionary.debugDescription.getter()
{
  return MEMORY[0x270F9D0A0]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t Dictionary.init<A>(uniqueKeysWithValues:)()
{
  return MEMORY[0x270F9D0B0]();
}

uint64_t Dictionary.Keys.description.getter()
{
  return MEMORY[0x270F9D0B8]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x270F9D210]();
}

uint64_t dispatch thunk of FloatingPoint.sign.getter()
{
  return MEMORY[0x270F9D2A0]();
}

uint64_t dispatch thunk of FloatingPoint.init<A>(_:)()
{
  return MEMORY[0x270F9D2F8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x270FA2B70]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x270F9D428]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x270F9D480]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x270F9D488]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

uint64_t UnsafeBufferPointer.init(_:)()
{
  return MEMORY[0x270EE78E0]();
}

uint64_t type metadata accessor for UnsafeBufferPointer()
{
  return MEMORY[0x270F9D5C0]();
}

uint64_t String.init(contentsOf:encoding:)()
{
  return MEMORY[0x270EF1870]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x270EF1A10]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x270F9D600]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x270F9D620]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x270F9D748]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x270F9D750]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x270F9D7C0]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x270F9D7D8]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D880](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8B0]();
}

{
  return MEMORY[0x270F9D8F0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x270F9D908]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9D968]();
}

uint64_t Sequence.lazy.getter()
{
  return MEMORY[0x270F9D980]();
}

uint64_t Sequence.sorted(by:)()
{
  return MEMORY[0x270F9D9B0]();
}

uint64_t Sequence.shuffled<A>(using:)()
{
  return MEMORY[0x270F9D9E8]();
}

uint64_t dispatch thunk of RangeExpression.relative<A>(to:)()
{
  return MEMORY[0x270F9DA60]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x270F9DA80]();
}

{
  return MEMORY[0x270F9DA98]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x270F9DB00]();
}

{
  return MEMORY[0x270F9DB18]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.startIndex.getter()
{
  return MEMORY[0x270F9DBA8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x270F9DBD0]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x270F9DCA8]();
}

Swift::Void __swiftcall Array.formIndex(after:)(Swift::Int *after)
{
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x270FA1FE8]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1C18]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x270F9DD60]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x270F9DDA0]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1C48]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x270F9DDF8]();
}

uint64_t Float.init(sign:exponentBitPattern:significandBitPattern:)()
{
  return MEMORY[0x270F9DE38]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x270F9DFD0]();
}

uint64_t Set.init<A>(_:)()
{
  return MEMORY[0x270F9DFE8]();
}

uint64_t Int.init(truncating:)()
{
  return MEMORY[0x270EF1CD8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1CE0]();
}

uint64_t RandomAccessCollection<>.indices.getter()
{
  return MEMORY[0x270F9E070]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x270F9E080]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x270F9E0D0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x270F9E140]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x270F9E178]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t RangeReplaceableCollection<>.removeLast()()
{
  return MEMORY[0x270F9E2D8]();
}

uint64_t RangeReplaceableCollection<>.popLast()()
{
  return MEMORY[0x270F9E2E8]();
}

void __swiftcall CMTimeRange.init(start:end:)(CMTimeRange *__return_ptr retstr, CMTime start, CMTime end)
{
}

uint64_t MLMultiArray.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270EE78E8]();
}

uint64_t MLMultiArray.withUnsafeMutableBytes<A>(_:)()
{
  return MEMORY[0x270EE78F0]();
}

uint64_t MLMultiArray.init<A>(_:)()
{
  return MEMORY[0x270EE7918]();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x270EF1DE8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x270FA0F00]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x270FA0F28]();
}

CMTime __swiftcall CMTime.init(seconds:preferredTimescale:)(Swift::Double seconds, Swift::Int32 preferredTimescale)
{
  CMTimeValue v2 = MEMORY[0x270FA0888](*(void *)&preferredTimescale, seconds);
  result.epoch = v4;
  result.timescale = v3;
  result.flags = HIDWORD(v3);
  result.value = v2;
  return result;
}

uint64_t NLModel.predictedLabelHypotheses(for:maximumCount:)()
{
  return MEMORY[0x270FA10F8]();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x270EF2198](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x270FA2ED0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableBufferPointer.baseAddress.getter()
{
  return MEMORY[0x270F9E400]();
}

uint64_t UnsafeMutableBufferPointer.init(_:)()
{
  return MEMORY[0x270EE7968]();
}

Swift::Void __swiftcall UnsafeMutableBufferPointer.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
}

uint64_t UnsafeMutableBufferPointer.subscript.modify()
{
  return MEMORY[0x270F9E460]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x270F9E518]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t StringProtocol.padding<A>(toLength:withPad:startingAt:)()
{
  return MEMORY[0x270EF25A0]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x270F9E640]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x270F9E648]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x270F9E650]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x270F9E658]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x270F9E7F8]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x270F9E800]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270F9E8C0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t AnyHashable.base.getter()
{
  return MEMORY[0x270F9E8D0]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x270F9E988]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t type metadata accessor for LazySequence()
{
  return MEMORY[0x270F9E9E0]();
}

uint64_t Zip2Sequence.makeIterator()()
{
  return MEMORY[0x270F9E9F0]();
}

uint64_t Zip2Sequence.Iterator.next()()
{
  return MEMORY[0x270F9E9F8]();
}

uint64_t type metadata accessor for Zip2Sequence.Iterator()
{
  return MEMORY[0x270F9EA00]();
}

uint64_t type metadata accessor for Zip2Sequence()
{
  return MEMORY[0x270F9EA08]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

Swift::Void __swiftcall ContiguousArray._makeMutableAndUnique()()
{
}

uint64_t ContiguousArray.withUnsafeBufferPointer<A>(_:)()
{
  return MEMORY[0x270F9EBF8]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t ContiguousArray.count.getter()
{
  return MEMORY[0x270F9EC18]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x270F9EC48]();
}

Swift::Void __swiftcall ContiguousArray.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t ContiguousArray.init<A>(_:)()
{
  return MEMORY[0x270F9ECA0]();
}

uint64_t type metadata accessor for LazyMapSequence()
{
  return MEMORY[0x270F9ED00]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x270F9ED20]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x270F9EDE8]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x270F9EDF8]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x270F9EF08](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x270F9EF20]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x270F9F088]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x270F9F0D0]();
}

uint64_t LazySequenceProtocol.map<A>(_:)()
{
  return MEMORY[0x270F9F148]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

{
  return MEMORY[0x270F9F2F8]();
}

{
  return MEMORY[0x270F9F308]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x270F9F378]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F438]();
}

{
  return MEMORY[0x270F9F448]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x270F9F4A8]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return MEMORY[0x270F9F730]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x270F9F750]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x270F9F818]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x270F9F8A8]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x270F9F920]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t max<A>(_:_:)()
{
  return MEMORY[0x270F9FA98]();
}

uint64_t zip<A, B>(_:_:)()
{
  return MEMORY[0x270F9FAB8]();
}

uint64_t swap<A>(_:_:)()
{
  return MEMORY[0x270F9FB08]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x270F9FC30]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x270F9FCB8]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x270F9FCC8]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x270F9FCF0]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x270F9FD60]();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return MEMORY[0x270F9FD68]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x270F9FD88]();
}

uint64_t dispatch thunk of Encoder.userInfo.getter()
{
  return MEMORY[0x270F9FD90]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t Float16.init(sign:exponentBitPattern:significandBitPattern:)()
{
  return MEMORY[0x270F9FDB8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x270EE62D0](data);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x270EE6738](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF5000](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x270EE7E38](retstr, *(void *)&preferredTimescale, seconds);
}

uint64_t NLPClassifierModelCreateTrainedModelWithData()
{
  return MEMORY[0x270EF7038]();
}

uint64_t NLPClassifierModelIsRevisionSupported()
{
  return MEMORY[0x270EF7040]();
}

NSString *NSFullUserName(void)
{
  return (NSString *)MEMORY[0x270EF2AA8]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

OSStatus VTCreateCGImageFromCVPixelBuffer(CVPixelBufferRef pixelBuffer, CFDictionaryRef options, CGImageRef *imageOut)
{
  return MEMORY[0x270F06678](pixelBuffer, options, imageOut);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

{
  return MEMORY[0x270F9A3C0]();
}

{
  return MEMORY[0x270F9A3C8]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x270FA0170]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x270FA0178]();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocEmptyBox()
{
  return MEMORY[0x270FA0188]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x270FA0218]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x270FA0408]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x270FA0468]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x270FA0570]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}

uint64_t tc_v1_error_message()
{
  return MEMORY[0x270F80760]();
}

uint64_t tc_v1_flex_dict_add_element()
{
  return MEMORY[0x270F80768]();
}

uint64_t tc_v1_flex_dict_create()
{
  return MEMORY[0x270F80770]();
}

uint64_t tc_v1_flex_dict_extract_entry()
{
  return MEMORY[0x270F80778]();
}

uint64_t tc_v1_flex_enum_list_add_element()
{
  return MEMORY[0x270F80780]();
}

uint64_t tc_v1_flex_enum_list_create()
{
  return MEMORY[0x270F80788]();
}

uint64_t tc_v1_flex_list_create()
{
  return MEMORY[0x270F80790]();
}

uint64_t tc_v1_ft_create_empty()
{
  return MEMORY[0x270F80798]();
}

uint64_t tc_v1_ft_create_from_double()
{
  return MEMORY[0x270F807A0]();
}

uint64_t tc_v1_ft_create_from_int64()
{
  return MEMORY[0x270F807A8]();
}

uint64_t tc_v1_ft_double()
{
  return MEMORY[0x270F807B0]();
}

uint64_t tc_v1_ft_is_double()
{
  return MEMORY[0x270F807B8]();
}

uint64_t tc_v1_ft_is_int64()
{
  return MEMORY[0x270F807C0]();
}

uint64_t tc_v1_ft_is_undefined()
{
  return MEMORY[0x270F807C8]();
}

uint64_t tc_v1_ft_type()
{
  return MEMORY[0x270F807D0]();
}

uint64_t tc_v1_groupby_aggregator_create()
{
  return MEMORY[0x270F807D8]();
}

uint64_t tc_v1_ndarray_create_from_data()
{
  return MEMORY[0x270F807E0]();
}

uint64_t tc_v1_parameters_create_empty()
{
  return MEMORY[0x270F807E8]();
}

uint64_t tc_v1_release()
{
  return MEMORY[0x270F807F0]();
}

uint64_t tc_v1_sarray_apply()
{
  return MEMORY[0x270F807F8]();
}

uint64_t tc_v1_sarray_create_from_sequence()
{
  return MEMORY[0x270F80800]();
}

uint64_t tc_v1_sarray_materialize()
{
  return MEMORY[0x270F80808]();
}

uint64_t tc_v1_sarray_sort()
{
  return MEMORY[0x270F80810]();
}

uint64_t tc_v1_sarray_to_type()
{
  return MEMORY[0x270F80818]();
}

uint64_t tc_v1_sarray_type()
{
  return MEMORY[0x270F80820]();
}

uint64_t tc_v1_sframe_apply()
{
  return MEMORY[0x270F80828]();
}

uint64_t tc_v1_sframe_create_empty()
{
  return MEMORY[0x270F80830]();
}

uint64_t tc_v1_sframe_join_on_multiple_columns()
{
  return MEMORY[0x270F80838]();
}

uint64_t tc_v1_sframe_pack_columns_vector()
{
  return MEMORY[0x270F80840]();
}

uint64_t tc_v1_sframe_random_split()
{
  return MEMORY[0x270F80848]();
}

uint64_t tc_v1_sframe_remove_column()
{
  return MEMORY[0x270F80850]();
}

uint64_t tc_v1_sframe_sample()
{
  return MEMORY[0x270F80858]();
}

uint64_t tc_v1_sframe_slice()
{
  return MEMORY[0x270F80860]();
}

uint64_t tc_v1_sframe_sort_single_column()
{
  return MEMORY[0x270F80868]();
}

uint64_t tc_v1_sframe_unpack_detailed()
{
  return MEMORY[0x270F80870]();
}

uint64_t tc_v1_variant_is_parameters()
{
  return MEMORY[0x270F80878]();
}

void vDSP_vdpsp(const double *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vspdp(const float *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}