uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.Classifier(uint64_t *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
    }
    else {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t destroy for MLImageClassifier.Classifier(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v2 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  else {
    v2 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

uint64_t initializeWithCopy for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  else {
    v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    }
    else {
      v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  else {
    v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    }
    else {
      v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2270500E0);
}

uint64_t sub_2270500E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227050168);
}

uint64_t sub_227050168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);

  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata accessor for MLImageClassifier.Classifier()
{
  uint64_t result = type metadata singleton initialization cache for MLImageClassifier.Classifier;
  if (!type metadata singleton initialization cache for MLImageClassifier.Classifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MLImageClassifier.Classifier()
{
  type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>()
{
  if (!lazy cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
    unint64_t v0 = type metadata accessor for Either();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
}

void type metadata accessor for NSProgressUserInfoKey(uint64_t a1)
{
}

void type metadata accessor for VNImageCropAndScaleOption(uint64_t a1)
{
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
}

uint64_t MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_36(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v0[9] = v7;
  OUTLINED_FUNCTION_1(v7);
  v0[10] = v8;
  v0[11] = OUTLINED_FUNCTION_5();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v0[12] = v9;
  OUTLINED_FUNCTION_1(v9);
  v0[13] = v10;
  v0[14] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v0[15] = v11;
  OUTLINED_FUNCTION_1(v11);
  v0[16] = v12;
  v0[17] = OUTLINED_FUNCTION_5();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v0[18] = v13;
  OUTLINED_FUNCTION_1(v13);
  v0[19] = v14;
  v0[20] = OUTLINED_FUNCTION_5();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v0[21] = v15;
  OUTLINED_FUNCTION_17(v15);
  v0[22] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v16, v17, v18);
}

{
  uint64_t *v0;
  void (*v1)(void);
  void *v2;
  uint64_t v3;
  void (*v4)(void);
  void *v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_11();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0[8], v0[22], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_3();
    v1();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[25] = (uint64_t)v2;
    uint64_t *v2 = v3;
    v2[1] = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_39();
    return MEMORY[0x270EEA8D8]();
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v4();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[23] = (uint64_t)v5;
    *uint64_t v5 = v6;
    v5[1] = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_39();
    return MEMORY[0x270EEA880]();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 208) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_9();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_9();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

uint64_t MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  uint64_t v10 = OUTLINED_FUNCTION_4();
  v11(v10);
  uint64_t v12 = OUTLINED_FUNCTION_22();
  v13(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  uint64_t v10 = OUTLINED_FUNCTION_4();
  v11(v10);
  uint64_t v12 = OUTLINED_FUNCTION_23();
  v13(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

uint64_t MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  v1[10] = v24;
  v1[11] = v0;
  v1[8] = v2;
  v1[9] = v3;
  v1[6] = v4;
  v1[7] = v5;
  v1[4] = v6;
  v1[5] = v7;
  v1[2] = v8;
  v1[3] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v1[12] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[13] = v11;
  v1[14] = OUTLINED_FUNCTION_5();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v1[15] = v12;
  OUTLINED_FUNCTION_1(v12);
  v1[16] = v13;
  v1[17] = OUTLINED_FUNCTION_5();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v1[18] = v14;
  OUTLINED_FUNCTION_1(v14);
  v1[19] = v15;
  v1[20] = OUTLINED_FUNCTION_5();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v1[21] = v16;
  OUTLINED_FUNCTION_1(v16);
  v1[22] = v17;
  v1[23] = OUTLINED_FUNCTION_5();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v1[24] = v18;
  OUTLINED_FUNCTION_17(v18);
  v1[25] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v19, v20, v21);
}

{
  uint64_t *v0;
  void (*v1)(void);
  void *v2;
  uint64_t v3;
  void (*v4)(void);
  void *v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_11();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0[11], v0[25], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_3();
    v1();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[28] = (uint64_t)v2;
    uint64_t *v2 = v3;
    v2[1] = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_19();
    return MEMORY[0x270EEA8D0]();
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v4();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[26] = (uint64_t)v5;
    *uint64_t v5 = v6;
    v5[1] = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_19();
    return MEMORY[0x270EEA878]();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_9();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_9();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

uint64_t MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  uint64_t v10 = OUTLINED_FUNCTION_4();
  v11(v10);
  uint64_t v12 = OUTLINED_FUNCTION_22();
  v13(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_34();
  uint64_t v10 = OUTLINED_FUNCTION_4();
  v11(v10);
  uint64_t v12 = OUTLINED_FUNCTION_23();
  v13(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_29();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

uint64_t MLImageClassifier.Classifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v45 = v7;
  uint64_t v46 = v6;
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_13(v8, v38);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v42 = v9;
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_21(v10, v38);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v38 = v12;
  uint64_t v39 = v11;
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_10();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v40 = v14;
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_33();
  uint64_t v17 = v15 - v16;
  ((void (*)(void))MEMORY[0x270FA5388])();
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  uint64_t v21 = OUTLINED_FUNCTION_17(v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = OUTLINED_FUNCTION_16();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v22, v23, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v47, v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, v17, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_43() == 1)
    {
      uint64_t v24 = v41;
      uint64_t v25 = v42;
      uint64_t v26 = v44;
      OUTLINED_FUNCTION_3();
      v27();
      uint64_t v29 = v45;
      uint64_t v28 = v46;
      uint64_t v30 = v43;
      OUTLINED_FUNCTION_3();
      v31();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
      SupervisedEstimator<>.encode(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
    uint64_t v40 = v42;
    uint64_t v13 = v44;
    uint64_t v19 = (char *)v17;
  }
  else
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, (uint64_t)v19, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_43() != 1)
    {
      uint64_t v32 = v40;
      OUTLINED_FUNCTION_3();
      v33();
      uint64_t v35 = v38;
      uint64_t v34 = v39;
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_3();
      v36();
      OUTLINED_FUNCTION_40();
      LogisticRegressionClassifier.encode(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v2, v34);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v3, v13);
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v13);
  uint64_t result = OUTLINED_FUNCTION_18();
  __break(1u);
  return result;
}

uint64_t protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)();
}

uint64_t protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  uint64_t *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v3();
}

uint64_t protocol witness for SupervisedEstimator.encode(_:to:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return MLImageClassifier.Classifier.encode(_:to:)(a1, a2);
}

uint64_t protocol witness for SupervisedEstimator.decode(from:) in conformance MLImageClassifier.Classifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MLImageClassifier.Classifier.decode(from:)(a1, MEMORY[0x263F04448], MEMORY[0x263F04488], a2);
}

uint64_t MLImageClassifier.Classifier.makeTransformer()@<X0>(uint64_t a1@<X8>)
{
  v24[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  v24[4] = v3;
  v24[5] = v2;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_20(v4, v24[0]);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  v24[1] = v12;
  v24[2] = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_32();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_10();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v24[6], v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_3();
    v20();
    FullyConnectedNetworkClassifier.makeTransformer()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v22();
    LogisticRegressionClassifier.makeTransformer()();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
  }
  OUTLINED_FUNCTION_35();
  v21();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  return swift_storeEnumTagMultiPayload();
}

uint64_t MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_36(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v0[9] = v7;
  OUTLINED_FUNCTION_1(v7);
  v0[10] = v8;
  v0[11] = OUTLINED_FUNCTION_24();
  v0[12] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v0[13] = v9;
  OUTLINED_FUNCTION_1(v9);
  v0[14] = v10;
  v0[15] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v0[16] = v11;
  OUTLINED_FUNCTION_1(v11);
  v0[17] = v12;
  v0[18] = OUTLINED_FUNCTION_24();
  v0[19] = swift_task_alloc();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v0[20] = v13;
  OUTLINED_FUNCTION_1(v13);
  v0[21] = v14;
  v0[22] = OUTLINED_FUNCTION_5();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v0[23] = v15;
  OUTLINED_FUNCTION_17(v15);
  v0[24] = OUTLINED_FUNCTION_24();
  v0[25] = swift_task_alloc();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  v0[26] = v16;
  OUTLINED_FUNCTION_17(v16);
  v0[27] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v17, v18, v19);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v19;

  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[27] + *(int *)(v0[26] + 48);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0[8], v0[27], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, v2, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v4 = v0[27];
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v0[24], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    v0[33] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = v0[10];
      OUTLINED_FUNCTION_3();
      v6();
      v0[34] = *(void *)(v5 + 32);
      v0[35] = (v5 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      uint64_t v7 = OUTLINED_FUNCTION_31();
      v8(v7);
      uint64_t v9 = (void *)swift_task_alloc();
      v0[36] = v9;
      *uint64_t v9 = v0;
      v9[1] = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
      uint64_t v10 = OUTLINED_FUNCTION_28(v0[12]);
      return MEMORY[0x270EEA8E0](v10);
    }
LABEL_7:
    OUTLINED_FUNCTION_9();
    v11();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v0[25], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v0[28] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    goto LABEL_7;
  }
  uint64_t v12 = v0[17];
  OUTLINED_FUNCTION_3();
  v13();
  v0[29] = *(void *)(v12 + 32);
  v0[30] = (v12 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  uint64_t v14 = OUTLINED_FUNCTION_31();
  v15(v14);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[31] = v16;
  *uint64_t v16 = v0;
  v16[1] = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
  uint64_t v17 = OUTLINED_FUNCTION_28(v0[19]);
  return MEMORY[0x270EEA890](v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[29];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[2];
  OUTLINED_FUNCTION_9();
  v7();
  v1(v3, v2, v5);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v6, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v1(v6, v3, v5);
  swift_storeEnumTagMultiPayload();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 296) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[34];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[27];
  uint64_t v6 = v0[2];
  OUTLINED_FUNCTION_9();
  v7();
  v1(v3, v2, v4);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v6, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v1(v6, v3, v4);
  swift_storeEnumTagMultiPayload();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 216);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_9();
  v2();
  uint64_t v3 = OUTLINED_FUNCTION_27();
  v4(v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 216);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_9();
  v2();
  uint64_t v3 = OUTLINED_FUNCTION_27();
  v4(v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t MLImageClassifier.Classifier.encodeWithOptimizer(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13(v8, v42);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v46 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_21(v11, v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v42 = v13;
  uint64_t v43 = v12;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_10();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v44 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_33();
  uint64_t v20 = v18 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v42 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  uint64_t v25 = OUTLINED_FUNCTION_17(v24);
  MEMORY[0x270FA5388](v25);
  uint64_t v26 = OUTLINED_FUNCTION_16();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, v27, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v51, v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, v20, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_43() == 1)
    {
      uint64_t v28 = v45;
      uint64_t v29 = v46;
      uint64_t v30 = v48;
      OUTLINED_FUNCTION_3();
      v31();
      uint64_t v33 = v49;
      uint64_t v32 = v50;
      uint64_t v34 = v47;
      OUTLINED_FUNCTION_3();
      v35();
      FullyConnectedNetworkClassifier.encodeWithOptimizer(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
    uint64_t v44 = v46;
    uint64_t v14 = v48;
    uint64_t v23 = (char *)v20;
  }
  else
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, (uint64_t)v23, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_43() != 1)
    {
      uint64_t v36 = v44;
      OUTLINED_FUNCTION_3();
      v37();
      uint64_t v39 = v42;
      uint64_t v38 = v43;
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_3();
      v40();
      OUTLINED_FUNCTION_40();
      LogisticRegressionClassifier.encodeWithOptimizer(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v2, v38);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v3, v14);
      return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v23, v14);
  uint64_t result = OUTLINED_FUNCTION_18();
  __break(1u);
  return result;
}

uint64_t MLImageClassifier.Classifier.decode(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v41 = a1;
  uint64_t v36 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  v35[3] = v8;
  v35[4] = v7;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_20(v9, v35[0]);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v37 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  v35[1] = v14;
  v35[2] = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_13(v15, v35[0]);
  v35[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33();
  v35[0] = v17 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v35 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v24 = v23;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_32();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v40, v6, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = v37;
    OUTLINED_FUNCTION_3();
    v28();
    uint64_t v29 = v42;
    v39(v41, v10);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v4, v10);
    if (v29) {
      return result;
    }
    uint64_t v21 = (char *)v35[0];
    OUTLINED_FUNCTION_35();
    v31();
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v32();
    uint64_t v33 = v42;
    v38(v41, v22);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v5, v22);
    if (v33) {
      return result;
    }
    OUTLINED_FUNCTION_35();
    v34();
  }
  swift_storeEnumTagMultiPayload();
  return outlined init with take of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>((uint64_t)v21, v36);
}

uint64_t protocol witness for UpdatableSupervisedEstimator.update<A>(_:with:eventHandler:) in conformance MLImageClassifier.Classifier()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)();
}

uint64_t protocol witness for UpdatableSupervisedEstimator.encodeWithOptimizer(_:to:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return MLImageClassifier.Classifier.encodeWithOptimizer(_:to:)(a1, a2);
}

uint64_t protocol witness for UpdatableSupervisedEstimator.decodeWithOptimizer(from:) in conformance MLImageClassifier.Classifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MLImageClassifier.Classifier.decode(from:)(a1, MEMORY[0x263F04440], MEMORY[0x263F04480], a2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance MLMultiArrayDataType(uint64_t a1@<X8>)
{
  MLMultiArrayDataType.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLMultiArrayDataType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2) & 1;
}

uint64_t specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_41();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance VNImageOption()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, MEMORY[0x263F07B58]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance VNImageOption()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VNImageOption()
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VNImageOption()
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLLanguage()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, MEMORY[0x263F07B58]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLLanguage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NLLanguage()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NLLanguage()
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NLLanguage()
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NLLanguage()
{
  return specialized == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSFileAttributeKey(void *a1, void *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLLanguage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NLLanguage.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA06B8](v4, v5, a3, WitnessTable);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileAttributeKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance VNImageOption(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t base witness table accessor for RawRepresentable in VNImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in VNImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
}

uint64_t lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MLFeatureValueImageOption(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CIImageRepresentationOption(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLLanguage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLModelEmbeddingType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NLModelEmbeddingType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLModelEmbeddingType(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSURLResourceKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSProgressUserInfoKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t base witness table accessor for RawRepresentable in NSProgressUserInfoKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSProgressUserInfoKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
}

uint64_t base witness table accessor for RawRepresentable in NLLanguage()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLLanguage()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

uint64_t base witness table accessor for Equatable in NLLanguage()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

uint64_t associated type witness table accessor for SupervisedEstimator.Annotation : Equatable in MLImageClassifier.Classifier()
{
  return MEMORY[0x263F8D338];
}

uint64_t associated type witness table accessor for SupervisedEstimator.Transformer : Transformer in MLImageClassifier.Classifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.Model and conformance MLImageClassifier.Model, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Model);
}

uint64_t base witness table accessor for SupervisedEstimator in MLImageClassifier.Classifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
}

uint64_t base witness table accessor for Equatable in NSProgressUserInfoKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
}

uint64_t base witness table accessor for Equatable in VNImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
}

uint64_t outlined init with take of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance VNRecognizedPointKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NLLanguage@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x22A674AE0](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLModelConfigurationOptionsKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
  uint64_t v3 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    OUTLINED_FUNCTION_46_0();
  }
  else {
    LOBYTE(v0) = OUTLINED_FUNCTION_25_3();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v1 = MEMORY[0x22A674AE0](v0);
  swift_bridgeObjectRelease();
  return v1;
}

void type metadata accessor for VNRecognizedPointKey(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

void type metadata accessor for NLModelEmbeddingType(uint64_t a1)
{
}

void type metadata accessor for NLModelConfigurationOptionsKey(uint64_t a1)
{
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

void type metadata accessor for NSFileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for MLFeatureValueImageOption(uint64_t a1)
{
}

void type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
}

void type metadata accessor for MLMultiArrayDataType(uint64_t a1)
{
}

void type metadata accessor for NLLanguage(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for RawRepresentable in MLFeatureValueImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MLFeatureValueImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
}

uint64_t base witness table accessor for RawRepresentable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in NLModelConfigurationOptionsKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLModelConfigurationOptionsKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
}

uint64_t base witness table accessor for RawRepresentable in NLModelEmbeddingType()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLModelEmbeddingType()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
}

uint64_t base witness table accessor for Equatable in NLModelEmbeddingType()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in VNRecognizedPointKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in VNRecognizedPointKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
}

uint64_t base witness table accessor for Equatable in VNRecognizedPointKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in NLModelConfigurationOptionsKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

uint64_t base witness table accessor for Equatable in MLFeatureValueImageOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
}

uint64_t base witness table accessor for Equatable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return v0 + 8;
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_16()
{
  return *(void *)(v0 - 104);
}

uint64_t OUTLINED_FUNCTION_17(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_18()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_19()
{
  uint64_t v2 = *(void *)(v0 + 80);
  *(void *)(v1 + 16) = *(void *)(v0 + 72);
  *(void *)(v1 + 24) = v2;
}

void OUTLINED_FUNCTION_20(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_21(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_30()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_40()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_42()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v47 = a2;
  type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_0();
  uint64_t v45 = v7;
  uint64_t v46 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  type metadata accessor for FloatingPointRoundingRule();
  OUTLINED_FUNCTION_0();
  uint64_t v40 = v12;
  uint64_t v41 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v15 = v14 - v13;
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v42 = v17;
  uint64_t v43 = v16;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_3_0();
  uint64_t v44 = v19 - v18;
  uint64_t v20 = type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_0();
  uint64_t v22 = v21;
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)v39 - v27;
  Tensor.elementType.getter();
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v28, v20);
  if (v29 == *MEMORY[0x263F582F0]
    || v29 == *MEMORY[0x263F582F8]
    || v29 == *MEMORY[0x263F58310]
    || v29 == *MEMORY[0x263F58318]
    || v29 == *MEMORY[0x263F58330])
  {
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v30);
    OUTLINED_FUNCTION_1_0();
    Tensor.withUnsafeBytes<A>(_:)();
  }
  else
  {
    uint64_t v33 = *(void (**)(char *))(v22 + 104);
    v39[2] = v3;
    v39[0] = a1;
    v33(v26);
    uint64_t v35 = v40;
    uint64_t v34 = v41;
    (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v15, *MEMORY[0x263F8E1F8], v41);
    v39[1] = a3;
    Tensor.cast(to:roundingRule:)();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v15, v34);
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
    uint64_t v37 = v36(v26, v20);
    MEMORY[0x270FA5388](v37);
    v39[-2] = v39[0];
    uint64_t v38 = v44;
    Tensor.withUnsafeBytes<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v43);
    v36(v28, v20);
  }
  Tensor.shape.getter();
  uint64_t v31 = TensorShape.contiguousSize.getter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v10, v46);
  *uint64_t v47 = v31;
  return result;
}

void *specialized static vDSP.convertElements<A, B>(of:to:)(void *result, uint64_t a2, void *a3)
{
  if (a3[1] >= a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a3[1];
  }
  if ((v3 & 0x8000000000000000) == 0) {
    return specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(a3, (uint64_t)result, a2, v3, MEMORY[0x263EFAAF0]);
  }
  __break(1u);
  return result;
}

void *specialized static vDSP.convertElements<A, B>(of:to:)(void *result, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (a3[1] == a2)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      return specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(a3, (uint64_t)result, a2, a2, a4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *closure #2 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = (a2 - (uint64_t)a1) / 2;
  }
  else {
    uint64_t v4 = 0;
  }
  return specialized static vDSP.convertElements<A, B>(of:to:)(a1, v4, a3, a4);
}

void *closure #3 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = (a2 - (uint64_t)a1) / 4;
  }
  else {
    uint64_t v4 = 0;
  }
  return specialized static vDSP.convertElements<A, B>(of:to:)(a1, v4, a3, a4);
}

void *closure #1 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v3 = (a2 - (uint64_t)a1) / 4;
  }
  else {
    uint64_t v3 = 0;
  }
  return specialized static vDSP.convertElements<A, B>(of:to:)(a1, v3, a3);
}

void *partial apply for closure #6 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2)
{
  return closure #1 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16));
}

void *partial apply for closure #5 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2)
{
  return closure #3 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), MEMORY[0x263EFAAB0]);
}

void *partial apply for closure #4 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2)
{
  return closure #2 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), MEMORY[0x263EFAAA8]);
}

void *partial apply for closure #3 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2)
{
  return closure #3 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), MEMORY[0x263EFAAA0]);
}

void *partial apply for closure #2 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2)
{
  return closure #2 in closure #1 in Tensor.doubleArray()(a1, a2, *(void **)(v2 + 16), MEMORY[0x263EFAA98]);
}

void *specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  if (a2)
  {
    if (*result) {
      return (void *)a5(a2, 1, *result, 1, a4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *partial apply for closure #1 in closure #1 in Tensor.doubleArray()(void *a1, uint64_t a2)
{
  return partial apply for closure #6 in closure #1 in Tensor.doubleArray()(a1, a2);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Interaction(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Interaction(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Interaction()
{
  return &type metadata for Interaction;
}

BOOL static Interaction.< infix(_:_:)(double a1, double a2)
{
  return a1 < a2;
}

BOOL static Interaction.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return a3 == a4 && a1 == a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return static Interaction.< infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.<= infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2)
{
  return a2 >= a1;
}

BOOL specialized static Comparable.<= infix(_:_:)(BOOL result, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (((a6 | a3) & 1) == 0)
  {
    if (a5 == a2) {
      return a4 >= result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.>= infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.>= infix(_:_:)(double a1, double a2)
{
  return a1 >= a2;
}

BOOL specialized static Comparable.>= infix(_:_:)(BOOL result, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (((a3 | a6) & 1) == 0)
  {
    if (a2 == a5) {
      return result >= a4;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.> infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.> infix(_:_:)(double a1, double a2)
{
  return a2 < a1;
}

BOOL specialized static Comparable.> infix(_:_:)(BOOL result, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (((a6 | a3) & 1) == 0)
  {
    if (a5 == a2) {
      return a4 < result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return static Interaction.== infix(_:_:)(*(void *)a1, *(void *)a2, *(double *)(a1 + 8), *(double *)(a2 + 8));
}

unint64_t lazy protocol witness table accessor for type Interaction and conformance Interaction()
{
  unint64_t result = lazy protocol witness table cache variable for type Interaction and conformance Interaction;
  if (!lazy protocol witness table cache variable for type Interaction and conformance Interaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Interaction and conformance Interaction);
  }
  return result;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validationData.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t result = outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)&v8, &demangling cache variable for type metadata for Any?);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    swift_dynamicCast();
    MLBoostedTreeRegressor.ModelParameters.ValidationData.table.getter(a1);
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = MLBoostedTreeRegressor.ModelParameters.validationData.getter((uint64_t)&v4);
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1 = *(unsigned char *)(a1 + 8);
  id v3 = *(id *)a1;
  unsigned __int8 v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  long long v8 = *(void **)a1;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  v13[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  if (v9 == 255)
  {
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(void *)uint64_t v7 = v8;
    *(unsigned char *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v13, v2);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validation.getter()
{
  uint64_t result = outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0, (uint64_t)&v2, &demangling cache variable for type metadata for Any?);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void (*MLBoostedTreeRegressor.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  MLBoostedTreeRegressor.ModelParameters.validationData.getter(a1);
  return MLBoostedTreeRegressor.ModelParameters.validationData.modify;
}

void MLBoostedTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    outlined copy of MLDataTable?(v2, v3);
    MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    uint64_t v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLBoostedTreeRegressor.ModelParameters.validation : MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLBoostedTreeRegressor.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  v5[3] = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

void (*MLBoostedTreeRegressor.ModelParameters.validation.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v4[17] = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  size_t v6 = *(void *)(v5 + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  uint64_t result = (void (*)(uint64_t **, char))outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, (uint64_t)(v4 + 4), &demangling cache variable for type metadata for Any?);
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    swift_dynamicCast();
    return MLBoostedTreeRegressor.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLBoostedTreeRegressor.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[18];
  uint64_t v4 = (void *)(*a1)[19];
  uint64_t v5 = (*a1)[16];
  uint64_t v6 = (*a1)[17];
  if (a2)
  {
    outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v6;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v5);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v6;
    long long v8 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v8);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxDepth.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxDepth.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.maxDepth.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxIterations.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.maxIterations.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.minLossReduction.getter()
{
  return *(double *)(v0 + 48);
}

void MLBoostedTreeRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.minLossReduction.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.minChildWeight.getter()
{
  return *(double *)(v0 + 56);
}

void MLBoostedTreeRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.minChildWeight.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.randomSeed.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.randomSeed.setter(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.randomSeed.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.stepSize.getter()
{
  return *(double *)(v0 + 72);
}

void MLBoostedTreeRegressor.ModelParameters.stepSize.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.stepSize.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.rowSubsample.getter()
{
  return *(double *)(v0 + 96);
}

void MLBoostedTreeRegressor.ModelParameters.rowSubsample.setter(double a1)
{
  *(double *)(v1 + 96) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.rowSubsample.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.columnSubsample.getter()
{
  return *(double *)(v0 + 104);
}

void MLBoostedTreeRegressor.ModelParameters.columnSubsample.setter(double a1)
{
  *(double *)(v1 + 104) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.columnSubsample.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>)
{
  uint64_t v24 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_3_0();
  uint64_t v28 = v27 - v26;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(void *)(a7 + 32) = a2;
  *(void *)(a7 + 40) = a3;
  *(double *)(a7 + 48) = a8;
  *(double *)(a7 + 56) = a9;
  *(void *)(a7 + 64) = a4;
  *(double *)(a7 + 72) = a10;
  *(void *)(a7 + 80) = a5;
  *(unsigned char *)(a7 + 88) = a6 & 1;
  *(double *)(a7 + 96) = a11;
  *(double *)(a7 + 104) = a12;
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, v27 - v26);
  v31[3] = v24;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v31);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v28, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v31, a7);
  return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>)
{
  uint64_t v12 = *a1;
  char v13 = *((unsigned char *)a1 + 8);
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(void *)(a7 + 32) = a2;
  *(void *)(a7 + 40) = a3;
  *(double *)(a7 + 48) = a8;
  *(double *)(a7 + 56) = a9;
  *(void *)(a7 + 64) = a4;
  *(double *)(a7 + 72) = a10;
  *(void *)(a7 + 80) = a5;
  *(unsigned char *)(a7 + 88) = a6 & 1;
  *(double *)(a7 + 96) = a11;
  *(double *)(a7 + 104) = a12;
  uint64_t v15 = v12;
  char v16 = v13;
  return MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v15);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.init(configuration:validation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLBoostedTreeRegressor.ModelParameters.ValidationData?);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = v13 - v12;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(void *)(a3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  *(void *)(a3 + 48) = v15;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(a3 + 56) = v16;
  *(void *)(a3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  BoostedTreeConfiguration.learningRate.getter();
  *(void *)(a3 + 72) = v17;
  *(void *)(a3 + 80) = BoostedTreeConfiguration.earlyStoppingIterationCount.getter();
  *(unsigned char *)(a3 + 88) = v18 & 1;
  BoostedTreeConfiguration.rowSubsample.getter();
  *(void *)(a3 + 96) = v19;
  BoostedTreeConfiguration.columnSubsample.getter();
  *(void *)(a3 + 104) = v20;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML22MLBoostedTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML22ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2, v9);
  if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v9, &demangling cache variable for type metadata for MLBoostedTreeRegressor.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v9, v14);
  }
  v24[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v24);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v14, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v24, a3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a2, &demangling cache variable for type metadata for DataFrame?);
  type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_8();
  return (*(uint64_t (**)(uint64_t))(v22 + 8))(a1);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML22MLBoostedTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML22ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DataFrame();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    uint64_t v11 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
    uint64_t v12 = a2;
    uint64_t v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    uint64_t v14 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v12 = a2;
    uint64_t v13 = 0;
    uint64_t v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.description.getter()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 10;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  OUTLINED_FUNCTION_4_0();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = OUTLINED_FUNCTION_8_0();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  v3._countAndFlagsBits = 0xD000000000000010;
  v3._object = (void *)0x80000002272D3F00;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_0();
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_7_0();
  v4._countAndFlagsBits = 0xD000000000000014;
  v4._object = (void *)0x80000002272D3F20;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_1();
  v5._countAndFlagsBits = 0xD000000000000010;
  v5._object = (void *)0x80000002272D3F00;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_5_0((uint64_t)"Min Child Weight: ");
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_1();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_0();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v42, "Random Seed: ");
  HIWORD(v42[1]) = -4864;
  v7._countAndFlagsBits = OUTLINED_FUNCTION_8_0();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_6_0(v8, v9, v10, v11, v12, v13, v14, v15, v36, v39, v42[0], v42[1]);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_0();
  v16._countAndFlagsBits = 0x7A69532070657453;
  v16._object = (void *)0xEB00000000203A65;
  String.append(_:)(v16);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_6_0(v17, v18, v19, v20, v21, v22, v23, v24, v37, v40, v42[0], v42[1]);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_0();
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_7_0();
  v25._countAndFlagsBits = 0x7362755320776F52;
  v25._object = (void *)0xEF203A656C706D61;
  String.append(_:)(v25);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_6_0(v26, v27, v28, v29, v30, v31, v32, v33, v38, v41, v42[0], v42[1]);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_5_0((uint64_t)"Column Subsample: ");
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_1();
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLBoostedTreeRegressor.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

void outlined consume of MLDataTable?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<_DataTable, Error>(a1, a2 & 1);
  }
}

void outlined consume of Result<_DataTable, Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_release();
  }
}

id outlined copy of MLDataTable?(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of Result<_DataTable, Error>(result, a2 & 1);
  }
  return result;
}

id outlined copy of Result<_DataTable, Error>(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 < 16) {
    return 0;
  }
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t sub_227056CE8()
{
  return MLBoostedTreeRegressor.ModelParameters.validation.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for MLBoostedTreeRegressor.ModelParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return __swift_destroy_boxed_opaque_existential_0(a1);
  }
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t initializeWithCopy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithCopy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeRegressor.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLBoostedTreeRegressor.ModelParameters()
{
  return &type metadata for MLBoostedTreeRegressor.ModelParameters;
}

void OUTLINED_FUNCTION_1_1()
{
  uint64_t v1 = 10;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return Double.write<A>(to:)();
}

void OUTLINED_FUNCTION_5_0(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000012;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

void OUTLINED_FUNCTION_6_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  String.append(_:)(*(Swift::String *)&a11);
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t one-time initialization function for _defaultSessionParameters()
{
  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLHandPoseClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLHandPoseClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 20;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLRandomForestRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLRandomForestRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLLogisticRegressionClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLLogisticRegressionClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLDecisionTreeRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLDecisionTreeRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLImageClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLImageClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLHandActionClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLHandActionClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 20;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLRandomForestClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLRandomForestClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLBoostedTreeRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLBoostedTreeRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLDecisionTreeClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLDecisionTreeClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLSoundClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLSoundClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 50;
  *(void *)(v1 + v4) = 100;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLBoostedTreeClassifier._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLBoostedTreeClassifier._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLLinearRegressor._defaultSessionParameters);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLLinearRegressor._defaultSessionParameters);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  *(void *)(v1 + v0[5]) = 10;
  *(void *)(v1 + v4) = 50;
  *(void *)(v1 + v5) = 1000;
  return result;
}

uint64_t static MLHandPoseClassifier._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLHandPoseClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

id MLHandPoseClassifier.model.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLHandPoseClassifier() + 20));

  return v1;
}

uint64_t type metadata accessor for MLHandPoseClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLHandPoseClassifier;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void MLHandPoseClassifier.model.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_66() + 20);

  *(void *)(v1 + v2) = v0;
}

uint64_t (*MLHandPoseClassifier.model.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandPoseClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier();
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 24), a1, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
}

uint64_t MLHandPoseClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier();
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 28), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandPoseClassifier.trainingMetrics.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_66() + 28);

  return outlined assign with take of MLClassifierMetrics(v0, v2);
}

uint64_t outlined assign with take of MLClassifierMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLClassifierMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MLHandPoseClassifier.trainingMetrics.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandPoseClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier();
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 32), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandPoseClassifier.validationMetrics.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_66() + 32);

  return outlined assign with take of MLClassifierMetrics(v0, v2);
}

uint64_t (*MLHandPoseClassifier.validationMetrics.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandPoseClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v76 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  uint64_t v10 = OUTLINED_FUNCTION_1(v9);
  uint64_t v75 = v11;
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v73 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_65();
  uint64_t v14 = type metadata accessor for MLHandPoseClassifier();
  uint64_t v15 = (int *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33_0();
  uint64_t v74 = v16;
  uint64_t v17 = OUTLINED_FUNCTION_65();
  uint64_t v18 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(v17);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_61();
  uint64_t v20 = type metadata accessor for MLHandPoseClassifier.DataSource();
  uint64_t v21 = OUTLINED_FUNCTION_17(v20);
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_41_0();
  uint64_t v22 = v15[7];
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  *(void *)(v8 + v22) = v23;
  uint64_t v78 = v8 + v15[9];
  MLClassifierMetrics.init()((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v63, (uint64_t)v64, v65, (uint64_t)v66, v67, v68, v69, v70, v71, v72, v73,
    v74);
  uint64_t v31 = v15[10];
  uint64_t v77 = v8;
  uint64_t v32 = v8 + v31;
  MLClassifierMetrics.init()(v33, v34, v35, v36, v37, v38, v39, v40, v63, (uint64_t)v64, v65, (uint64_t)v66, v67, v68, v69, v70, v71, v72, v73,
    v74);
  uint64_t v41 = v76;
  MLHandPoseClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v81, &v79);
  if (v41)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();

    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
LABEL_14:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  uint64_t v68 = v18;
  uint64_t v69 = v13;
  uint64_t v70 = v1;
  uint64_t v71 = v2;
  uint64_t v72 = v32;
  uint64_t v42 = v75;
  uint64_t v76 = v6;
  uint64_t v43 = (void *)v81;
  int v44 = v82;
  uint64_t v45 = v79;
  int v46 = v80;
  if (v82 == 255)
  {
    MLHandPoseClassifier.DataSource.keypointsWithAnnotations()();
    uint64_t v67 = v4;
  }
  else
  {
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    v79 = v43;
    unsigned __int8 v80 = v44 & 1;
    outlined copy of Result<_DataTable, Error>(v43, v44 & 1);
    OUTLINED_FUNCTION_97();
    uint64_t v67 = v4;
    outlined consume of MLDataTable?(v43, v44);
  }
  v66 = (void *)v81;
  HIDWORD(v65) = v82;
  uint64_t v48 = v70;
  uint64_t v47 = v71;
  if (v46 != 255)
  {
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    v79 = v45;
    unsigned __int8 v80 = v46 & 1;
    OUTLINED_FUNCTION_97();
    LODWORD(v70) = v46;
    v64 = v43;
    LODWORD(v75) = v44;
LABEL_12:
    v53 = (void *)v81;
    char v54 = v82;
    goto LABEL_13;
  }
  outlined init with copy of MLTrainingSessionParameters(v67, v70, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v64 = v43;
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v48, v47, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
    MLHandPoseClassifier.DataSource.keypointsWithAnnotations()();
    LODWORD(v70) = 255;
    LODWORD(v75) = v44;
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    goto LABEL_12;
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  uint64_t v50 = MEMORY[0x22A6764B0](0);
  if (v50)
  {
    uint64_t v51 = v50;
    LODWORD(v70) = 255;
    LODWORD(v75) = v44;
    type metadata accessor for CMLTable();
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v51;
    type metadata accessor for _DataTable();
    swift_allocObject();
    v53 = _DataTable.init(impl:)(v52);
    char v54 = 0;
LABEL_13:
    uint64_t v55 = v73;
    outlined init with copy of MLTrainingSessionParameters(v67, v73, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
    unint64_t v56 = (*(unsigned __int8 *)(v42 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    uint64_t v57 = swift_allocObject();
    v58 = v66;
    *(void *)(v57 + 16) = v66;
    char v59 = BYTE4(v65);
    *(unsigned char *)(v57 + 24) = BYTE4(v65);
    *(void *)(v57 + 32) = v53;
    *(unsigned char *)(v57 + 40) = v54;
    uint64_t v60 = v55;
    LOBYTE(v55) = v59;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v60, v57 + v56, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
    outlined copy of Result<_DataTable, Error>(v58, v55);
    outlined copy of Result<_DataTable, Error>(v53, v54);
    uint64_t v61 = v74;
    specialized blockAwait<A>(_:)();
    swift_release();
    outlined consume of MLDataTable?(v45, v70);
    outlined consume of MLDataTable?(v64, v75);
    outlined consume of Result<_DataTable, Error>(v53, v54);
    outlined consume of Result<_DataTable, Error>(v58, v55);
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    uint64_t v62 = v77;

    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined init with take of MLHandPoseClassifier.ModelParameters(v61, v62, (void (*)(void))type metadata accessor for MLHandPoseClassifier);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(uint64_t a1, void *a2, char a3, void *a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 26) = a5;
  *(void *)(v6 + 64) = a4;
  *(void *)(v6 + 72) = a6;
  *(unsigned char *)(v6 + 25) = a3;
  *(void *)(v6 + 48) = a1;
  *(void *)(v6 + 56) = a2;
  type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)(v6 + 80) = swift_task_alloc();
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  outlined copy of Result<_DataTable, Error>(a4, a5 & 1);
  return MEMORY[0x270FA2498](closure #1 in MLHandPoseClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  char v3 = *(unsigned char *)(v0 + 26);
  char v4 = *(unsigned char *)(v0 + 25);
  uint64_t v5 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = *(void *)(v0 + 56);
  *(unsigned char *)(v0 + 24) = v4 & 1;
  *(void *)(v0 + 32) = v5;
  *(unsigned char *)(v0 + 40) = v3 & 1;
  outlined init with copy of MLTrainingSessionParameters(v1, v2, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 48);
  return MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)(v8, (uint64_t *)(v0 + 16), v0 + 32, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  char v3 = v2;
  char v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    return v9();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

uint64_t MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = a4;
  uint64_t v7 = type metadata accessor for MLHandActionClassifier();
  *(void *)(v4 + 64) = v7;
  OUTLINED_FUNCTION_17(v7);
  *(void *)(v4 + 72) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v4 + 80) = v8;
  OUTLINED_FUNCTION_17(v8);
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = *a2;
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 104) = v10;
  *(unsigned char *)(v4 + 25) = *((unsigned char *)a2 + 8);
  *(void *)(v4 + 112) = *(void *)a3;
  *(unsigned char *)(v4 + 26) = *(unsigned char *)(a3 + 8);
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

uint64_t MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)()
{
  HIDWORD(v40) = *(unsigned __int8 *)(v0 + 26);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  char v3 = *(unsigned char *)(v0 + 25);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v37 = *(void *)(v0 + 88);
  uint64_t v5 = *(int **)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v8 = (int *)type metadata accessor for MLHandPoseClassifier();
  uint64_t v9 = v8[5];
  *(_DWORD *)(v0 + 28) = v9;
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  *(void *)(v7 + v9) = v10;
  *(_DWORD *)(v0 + 44) = v8[7];
  MLClassifierMetrics.init()((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17, v35, v37, v40, v43, v45, v47, v49, v51, v53, v55, v57,
    v0);
  *(_DWORD *)(v0 + 136) = v8[8];
  MLClassifierMetrics.init()(v18, v19, v20, v21, v22, v23, v24, v25, v36, v38, v41, v44, v46, v48, v50, v52, v54, v56, v58,
    v59);
  uint64_t v26 = v8[6];
  *(_DWORD *)(v0 + 140) = v26;
  outlined init with copy of MLTrainingSessionParameters(v6, v7 + v26, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v27 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  uint64_t v28 = *(void *)(v6 + v27[7]);
  uint64_t v29 = *(void *)(v6 + v27[5]);
  uint64_t v30 = *(void *)(v6 + v27[6]);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(_WORD *)(v4 + 16) = 256;
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_storeEnumTagMultiPayload();
  *(void *)(v4 + v5[5]) = v29;
  *(void *)(v4 + v5[6]) = v30;
  *(void *)(v4 + v5[7]) = 1;
  *(void *)(v4 + v5[8]) = v28;
  *(void *)(v4 + v5[10]) = 0x403E000000000000;
  *(void *)(v0 + 16) = v2;
  *(unsigned char *)(v0 + 24) = v3;
  *(void *)(v0 + 32) = v1;
  *(unsigned char *)(v0 + 40) = v42;
  outlined init with copy of MLTrainingSessionParameters(v4, v39, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v31;
  *uint64_t v31 = v0;
  v31[1] = MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:);
  uint64_t v32 = *(void *)(v0 + 88);
  uint64_t v33 = *(void *)(v0 + 72);
  return MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(v33, (uint64_t *)(v0 + 16), (uint64_t *)(v0 + 32), v32);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_6();
  *char v3 = v2;
  *(void *)(v4 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_34();
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  char v3 = *(void *)(v0 + 48);
  uint64_t v4 = v3 + *(int *)(v0 + 136);
  uint64_t v5 = v3 + *(int *)(v0 + 44);
  uint64_t v6 = (id *)(v3 + *(int *)(v0 + 28));
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, v3, (void (*)(void))type metadata accessor for MLHandActionClassifier);
  outlined assign with copy of MLClassifierMetrics(v3 + *(int *)(v2 + 32), v5);
  outlined assign with copy of MLClassifierMetrics(v3 + *(int *)(v2 + 36), v4);
  objc_storeStrong(v6, *(id *)(v3 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(int *)(v0 + 28);
  uint64_t v2 = *(void *)(v0 + 48);
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined destroy of MLHandPoseClassifier.ModelParameters();

  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v3();
}

void specialized blockAwait<A>(_:)()
{
  OUTLINED_FUNCTION_69();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_27_0();
  uint64_t v5 = OUTLINED_FUNCTION_57();
  dispatch_semaphore_t v6 = OUTLINED_FUNCTION_15_0(v5);
  uint64_t v7 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_45(v7);
  uint64_t v8 = (void *)OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_35_0(v8);
  swift_retain();
  uint64_t v9 = v6;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), v2);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v0, (uint64_t)&v10, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v11 == 255)
  {
    __break(1u);
  }
  else
  {
    if (v11)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_release();
    }
    else
    {
      outlined init with take of Any(&v10, &v12);
      swift_release();

      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
      OUTLINED_FUNCTION_117();
    }
    OUTLINED_FUNCTION_115();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  char v15;
  char v16;
  void (*v17)(void);
  _OWORD v18[4];
  long long v19;

  OUTLINED_FUNCTION_9_0();
  uint64_t v17 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_22_0();
  type metadata accessor for ResultBox();
  long long v10 = OUTLINED_FUNCTION_57();
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  uint64_t v11 = OUTLINED_FUNCTION_26_0(v10);
  long long v12 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v12);
  uint64_t v13 = (void *)OUTLINED_FUNCTION_56();
  v13[2] = 0;
  v13[3] = 0;
  uint64_t v13[4] = v10;
  v13[5] = v7;
  v13[6] = v5;
  v13[7] = v11;
  swift_retain();
  swift_retain();
  uint64_t v14 = v11;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v0, v3, (uint64_t)v13);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v10 + 16, (uint64_t)v18, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_110();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    if (v15)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_release();
    }
    else
    {
      outlined init with take of Any(v18, &v19);
      swift_release();

      v17(0);
      swift_dynamicCast();
    }
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_8_1();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_semaphore_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  long long v10;
  uint64_t v11;
  long long v12;

  OUTLINED_FUNCTION_69();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_27_0();
  uint64_t v5 = OUTLINED_FUNCTION_57();
  dispatch_semaphore_t v6 = OUTLINED_FUNCTION_15_0(v5);
  uint64_t v7 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_45(v7);
  uint64_t v8 = (void *)OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_35_0(v8);
  swift_retain();
  uint64_t v9 = v6;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), v2);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v0, (uint64_t)&v10, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v11 == 255)
  {
    __break(1u);
  }
  else
  {
    if (v11)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_release();
    }
    else
    {
      outlined init with take of Any(&v10, &v12);
      swift_release();

      type metadata accessor for _Model();
      OUTLINED_FUNCTION_117();
    }
    OUTLINED_FUNCTION_115();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_semaphore_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  char v10;
  char v11;
  long long v12;
  long long v13;

  OUTLINED_FUNCTION_69();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_27_0();
  uint64_t v5 = OUTLINED_FUNCTION_57();
  dispatch_semaphore_t v6 = OUTLINED_FUNCTION_15_0(v5);
  uint64_t v7 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_45(v7);
  uint64_t v8 = (void *)OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_35_0(v8);
  swift_retain();
  uint64_t v9 = v6;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), v2);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v0, (uint64_t)&v12, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_110();
  if (v11)
  {
    __break(1u);
  }
  else
  {
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_release();
    }
    else
    {
      outlined init with take of Any(&v12, &v13);
      swift_release();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnnotatedFeature<CIImage, String>], [AnnotatedFeature<CIImage, String>]));
      swift_dynamicCast();
    }
    OUTLINED_FUNCTION_115();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  specialized blockAwait<A>(_:)();
}

{
  specialized blockAwait<A>(_:)();
}

{
  specialized blockAwait<A>(_:)();
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;
  char v16;
  uint64_t *v17;
  _OWORD v18[4];
  long long v19;

  OUTLINED_FUNCTION_9_0();
  uint64_t v17 = v2;
  uint64_t v4 = v3;
  dispatch_semaphore_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  long long v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_40_0();
  type metadata accessor for ResultBox();
  uint64_t v11 = OUTLINED_FUNCTION_57();
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  OUTLINED_FUNCTION_26_0(v11);
  OUTLINED_FUNCTION_93();
  long long v12 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v12);
  uint64_t v13 = (void *)OUTLINED_FUNCTION_56();
  v13[2] = 0;
  v13[3] = 0;
  uint64_t v13[4] = v11;
  v13[5] = v8;
  v13[6] = v6;
  v13[7] = v0;
  swift_retain();
  swift_retain();
  uint64_t v14 = v0;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, v4, (uint64_t)v13);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v11 + 16, (uint64_t)v18, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_110();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    if (v15)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_release();
    }
    else
    {
      outlined init with take of Any(v18, &v19);
      swift_release();

      __swift_instantiateConcreteTypeFromMangledName(v17);
      swift_dynamicCast();
    }
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_8_1();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_semaphore_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  char v12;
  char v13;
  _OWORD v14[4];
  long long v15;

  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  dispatch_semaphore_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_14_0();
  type metadata accessor for ResultBox();
  uint64_t v7 = OUTLINED_FUNCTION_57();
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  uint64_t v8 = OUTLINED_FUNCTION_26_0(v7);
  uint64_t v9 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v9);
  long long v10 = (void *)OUTLINED_FUNCTION_56();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v7;
  v10[5] = v4;
  v10[6] = v2;
  v10[7] = v8;
  swift_retain();
  swift_retain();
  uint64_t v11 = v8;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), (uint64_t)v10);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v7 + 16, (uint64_t)v14, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_110();
  if (v13)
  {
    __break(1u);
  }
  else
  {
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_release();
    }
    else
    {
      outlined init with take of Any(v14, &v15);
      swift_release();

      swift_dynamicCast();
    }
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_8_1();
  }
}

void MLHandPoseClassifier.init(model:parameters:metricsAttributes:classLabels:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v82 = v0;
  uint64_t v86 = v3;
  uint64_t v87 = v2;
  uint64_t v5 = v4;
  uint64_t v84 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for MLClassifierMetrics(0);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_49();
  v79 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_106();
  uint64_t v81 = v13;
  OUTLINED_FUNCTION_65();
  uint64_t v14 = type metadata accessor for MLHandActionClassifier();
  uint64_t v15 = v14 - 8;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = OUTLINED_FUNCTION_14_0();
  uint64_t v17 = type metadata accessor for MLHandActionClassifier.ModelParameters(v16);
  uint64_t v18 = (int *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_49();
  uint64_t v83 = v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v78 - v21;
  uint64_t v23 = type metadata accessor for MLHandPoseClassifier();
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v25 = v23;
  uint64_t v85 = v23;
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  *(void *)(v8 + v24) = v26;
  MLClassifierMetrics.init()((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33, v78, (uint64_t)v79, v8 + *(int *)(v25 + 28), (uint64_t)v81, v82, v83, v84, v85, v86, v87, v88,
    *((uint64_t *)&v88 + 1));
  MLClassifierMetrics.init()(v34, v35, v36, v37, v38, v39, v40, v41, v8 + *(int *)(v25 + 32), (uint64_t)v79, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87, v88,
    *((uint64_t *)&v88 + 1));
  char v42 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  uint64_t v43 = *(void *)(v5 + v42[7]);
  uint64_t v44 = *(void *)(v5 + v42[5]);
  uint64_t v45 = *(void *)(v5 + v42[6]);
  OUTLINED_FUNCTION_103();
  swift_storeEnumTagMultiPayload();
  *(void *)&v22[v18[7]] = v44;
  uint64_t v46 = v8;
  *(void *)&v22[v18[8]] = v45;
  uint64_t v47 = v5;
  *(void *)&v22[v18[9]] = 1;
  *(void *)&v22[v18[10]] = v43;
  *(void *)&v22[v18[12]] = 0x403E000000000000;
  uint64_t v48 = v83;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v22, v83, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  id v49 = objc_allocWithZone(MEMORY[0x263F00D80]);
  uint64_t v50 = v86;
  swift_bridgeObjectRetain();
  id v51 = objc_msgSend(v49, sel_init);
  v1[2] = (uint64_t)v51;
  MLClassifierMetrics.init()((uint64_t)v51, v52, v53, v54, v55, v56, v57, v58, v78, (uint64_t)v79, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87, v88,
    *((uint64_t *)&v88 + 1));
  MLClassifierMetrics.init()(v59, v60, v61, v62, v63, v64, v65, v66, v78, (uint64_t)v79, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87, v88,
    *((uint64_t *)&v88 + 1));
  *uint64_t v1 = v50;
  outlined init with copy of MLTrainingSessionParameters(v48, (uint64_t)v1 + *(int *)(v15 + 36), (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  OUTLINED_FUNCTION_31_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_98();
  MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
  uint64_t v67 = v87;
  uint64_t v69 = v68;
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  v1[1] = v69;
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v1, v46, (void (*)(void))type metadata accessor for MLHandActionClassifier);
  uint64_t v70 = v84;
  swift_retain();
  swift_release();
  *(void *)(v46 + 8) = v70;
  uint64_t v71 = *(int *)(v85 + 24);
  uint64_t v83 = v46;
  uint64_t v85 = v47;
  outlined init with copy of MLTrainingSessionParameters(v47, v46 + v71, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
  specialized Dictionary.subscript.getter(0xD000000000000012, 0x80000002272D4230, v67, &v88);
  if (!v89)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v88, &demangling cache variable for type metadata for Any?);
LABEL_7:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_94();
    OUTLINED_FUNCTION_19_0(v75, v74 + 26);
    swift_release();
    goto LABEL_8;
  }
  type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
  if ((OUTLINED_FUNCTION_71() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v73 = v81;
  uint64_t v72 = v82;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(v50, v81);
  if (v72)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_8:
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
LABEL_9:
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    goto LABEL_10;
  }
  outlined assign with take of MLClassifierMetrics((uint64_t)v73, v80);
  OUTLINED_FUNCTION_94();
  specialized Dictionary.subscript.getter(v76 + 2, 0x80000002272D4280, v67, &v88);
  swift_bridgeObjectRelease();
  if (!v89)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of URL?((uint64_t)&v88, &demangling cache variable for type metadata for Any?);
LABEL_17:
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    goto LABEL_9;
  }
  if ((OUTLINED_FUNCTION_71() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  uint64_t v77 = v79;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(v50, v79);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined assign with take of MLClassifierMetrics((uint64_t)v77, v78);
LABEL_10:
  OUTLINED_FUNCTION_8_1();
}

void MLHandPoseClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v108 = type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_0();
  uint64_t v104 = v6;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  v110 = (uint64_t *)((char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v105 = v9;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  uint64_t v111 = v10;
  uint64_t v11 = OUTLINED_FUNCTION_65();
  v107 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(v11);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v109 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_106();
  uint64_t v114 = v15;
  OUTLINED_FUNCTION_65();
  uint64_t v113 = type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_47(v17, v99);
  v106 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_61();
  uint64_t v19 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_33();
  uint64_t v25 = v23 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v99 - v27;
  uint64_t v29 = (int *)type metadata accessor for MLHandPoseClassifier();
  uint64_t v30 = v29[5];
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  uint64_t v116 = v30;
  *(void *)(v5 + v30) = v31;
  uint64_t v32 = v28;
  uint64_t v33 = v1;
  uint64_t v34 = v5 + v29[7];
  MLClassifierMetrics.init()((uint64_t)v31, v35, v36, v37, v38, v39, v40, v41, v99, v100, v101, v102, v103, v104, v105, (uint64_t)v106, (uint64_t)v107, v108, v109,
    (uint64_t)v110);
  uint64_t v42 = v29[8];
  uint64_t v117 = v5;
  uint64_t v115 = v5 + v42;
  MLClassifierMetrics.init()(v43, v44, v45, v46, v47, v48, v49, v50, v99, v100, v101, v102, v103, v104, v105, (uint64_t)v106, (uint64_t)v107, v108, v109,
    (uint64_t)v110);
  URL.deletingLastPathComponent()();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v25, v32, v19);
  MLHandPoseClassifier.PersistentParameters.init(sessionDirectory:)(v25, v33);
  if (v0)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v32, v19);

LABEL_9:
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    goto LABEL_10;
  }
  v122 = v29;
  uint64_t v100 = v34;
  uint64_t v101 = v21;
  uint64_t v102 = v19;
  uint64_t v103 = v3;
  uint64_t v51 = v112;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v33, v112, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v52 = v33;
    uint64_t v113 = (uint64_t)v32;
    uint64_t v99 = 0;
    uint64_t v53 = *(void **)v51;
    char v54 = *(unsigned char *)(v51 + 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined copy of Result<_DataTable, Error>(v53, v54);
    specialized MLDataTable.subscript.getter(v54, (uint64_t)&v118);
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v53, v54);
    id v55 = v118;
    char v56 = v119;
    specialized MLDataColumn.dropDuplicates()(v118, v119, (uint64_t)&v120);
    outlined consume of Result<_DataTable, Error>(v55, v56);
    uint64_t v57 = specialized Array<A>.init(_:)(v120, v121);
    outlined consume of Result<_DataTable, Error>(v53, v54);
    uint64_t v58 = v114;
  }
  else
  {
    static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)((uint64_t)v33);
    uint64_t v52 = v33;
    uint64_t v58 = v114;
    uint64_t v113 = (uint64_t)v32;
    uint64_t v99 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    uint64_t v57 = v59;
    swift_bridgeObjectRelease();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
  }
  uint64_t v60 = v117;
  uint64_t v61 = v117 + v122[6];
  uint64_t v62 = v106;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v52 + v106[5], v61, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v63 = *(void *)((char *)v52 + v62[6]);
  uint64_t v64 = *(void *)((char *)v52 + v62[7]);
  uint64_t v65 = v62[8];
  uint64_t v114 = (uint64_t)v52;
  uint64_t v66 = *(void *)((char *)v52 + v65);
  uint64_t v67 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)(v61 + v67[5]) = v63;
  *(void *)(v61 + v67[6]) = v64;
  *(void *)(v61 + v67[7]) = v66;
  *(void *)uint64_t v58 = 0;
  *(void *)(v58 + 8) = 0;
  *(_WORD *)(v58 + 16) = 256;
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v68 = v107;
  *(void *)(v58 + v107[5]) = v63;
  *(void *)(v58 + v68[6]) = v64;
  *(void *)(v58 + v68[7]) = 1;
  *(void *)(v58 + v68[8]) = v66;
  *(void *)(v58 + v68[10]) = 0x403E000000000000;
  uint64_t v69 = v109;
  outlined init with copy of MLTrainingSessionParameters(v58, v109, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  id v70 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D80]), sel_init);
  uint64_t v71 = v110;
  v110[2] = (uint64_t)v70;
  uint64_t v72 = v108;
  MLClassifierMetrics.init()((uint64_t)v70, v73, v74, v75, v76, v77, v78, v79, v99, v100, v101, v102, v103, v104, v105, (uint64_t)v106, (uint64_t)v107, v108, v109,
    (uint64_t)v110);
  MLClassifierMetrics.init()(v80, v81, v82, v83, v84, v85, v86, v87, v99, v100, v101, v102, v103, v104, v105, (uint64_t)v106, (uint64_t)v107, v108, v109,
    (uint64_t)v110);
  *uint64_t v71 = v57;
  outlined init with copy of MLTrainingSessionParameters(v69, (uint64_t)v71 + *(int *)(v72 + 28), (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_100();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_98();
  MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
  uint64_t v89 = v88;
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  v71[1] = v89;
  uint64_t v90 = v111;
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v71, v111, (void (*)(void))type metadata accessor for MLHandActionClassifier);
  swift_retain();
  uint64_t v91 = v99;
  MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(v103);
  if (v91)
  {
    swift_release();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    OUTLINED_FUNCTION_25_0();
    v94();

    outlined destroy of MLHandPoseClassifier.ModelParameters();
    goto LABEL_9;
  }
  swift_release();
  outlined init with copy of MLTrainingSessionParameters(v90, (uint64_t)v71, (void (*)(void))type metadata accessor for MLHandActionClassifier);
  unint64_t v92 = (*(unsigned __int8 *)(v104 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
  uint64_t v93 = swift_allocObject();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v71, v93 + v92, (void (*)(void))type metadata accessor for MLHandActionClassifier);
  specialized blockAwait<A>(_:)();
  uint64_t v96 = v95;
  swift_release();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  OUTLINED_FUNCTION_25_0();
  v97();
  uint64_t v98 = v116;

  *(void *)(v60 + v98) = v96;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v90, v60, (void (*)(void))type metadata accessor for MLHandActionClassifier);
LABEL_10:
  OUTLINED_FUNCTION_8_1();
}

void specialized MLDataTable.subscript.getter(char a1@<W3>, uint64_t a2@<X8>)
{
  if (a1)
  {
    swift_willThrow();
    goto LABEL_5;
  }
  swift_retain();
  OUTLINED_FUNCTION_95((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:));
  if (v2)
  {

    swift_release();
LABEL_5:
    OUTLINED_FUNCTION_101();
    int v5 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_32_0(v5, v6, v7, v8, v9, v10, v11, v12, v29, v30, *((uint64_t *)&v30 + 1));
    uint64_t v13 = &v30;
    v14._countAndFlagsBits = 39;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    char v15 = v30;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v16 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_64(v16, v17);
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_84();
  type metadata accessor for _UntypedColumn();
  uint64_t v13 = (long long *)OUTLINED_FUNCTION_70();
  *((void *)v13 + 2) = v3;
  swift_retain();
  swift_retain();
  _UntypedColumn.type.getter(&v30);
  swift_release();
  if ((_BYTE)v30)
  {
    swift_release();
    OUTLINED_FUNCTION_102();
    int v18 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_24_0(v18, v19, v20, v21, v22, v23, v24, v25, v29, v30);
    v26._countAndFlagsBits = 0xD000000000000021;
    v26._object = (void *)0x80000002272D4150;
    uint64_t v13 = &v30;
    String.append(_:)(v26);
    char v15 = v30;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v27 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_50(v27, v28);
  }
  else
  {
    swift_release();
    char v15 = 0;
  }
LABEL_6:
  *(void *)a2 = v13;
  *(unsigned char *)(a2 + 8) = v15;
}

{
  void *v2;
  uint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  long long *v13;
  Swift::String v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;

  if (a1)
  {
    swift_willThrow();
    goto LABEL_5;
  }
  swift_retain();
  OUTLINED_FUNCTION_95((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:));
  if (v2)
  {

    swift_release();
LABEL_5:
    OUTLINED_FUNCTION_101();
    int v5 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_32_0(v5, v6, v7, v8, v9, v10, v11, v12, v29, v30, *((uint64_t *)&v30 + 1));
    uint64_t v13 = &v30;
    v14._countAndFlagsBits = 39;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    char v15 = v30;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v16 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_64(v16, v17);
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_84();
  type metadata accessor for _UntypedColumn();
  uint64_t v13 = (long long *)OUTLINED_FUNCTION_70();
  *((void *)v13 + 2) = v3;
  swift_retain();
  swift_retain();
  _UntypedColumn.type.getter(&v30);
  swift_release();
  if (v30 == 2)
  {
    swift_release();
    char v15 = 0;
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_102();
    int v18 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_24_0(v18, v19, v20, v21, v22, v23, v24, v25, v29, v30);
    v26._countAndFlagsBits = 0xD000000000000021;
    v26._object = (void *)0x80000002272D4150;
    uint64_t v13 = &v30;
    String.append(_:)(v26);
    char v15 = v30;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v27 = OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_50(v27, v28);
  }
LABEL_6:
  *(void *)a2 = v13;
  *(unsigned char *)(a2 + 8) = v15;
}

void specialized MLDataColumn.dropDuplicates()(id a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    id v8 = a1;
    outlined copy of Result<_DataTable, Error>(a1, 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      int v9 = (void *)OUTLINED_FUNCTION_100();
      outlined consume of Result<_DataTable, Error>(v9, 1);
    }
    else
    {
      uint64_t v3 = OUTLINED_FUNCTION_85();
      *uint64_t v13 = a1;
    }
    char v12 = 1;
    outlined consume of Result<_DataTable, Error>(a1, 1);
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(*((void *)a1 + 2) + 16);
  outlined copy of Result<_DataTable, Error>(a1, 0);
  uint64_t v7 = specialized handling<A, B>(_:_:)(v6);
  uint64_t v10 = v7;
  if (v7)
  {
    type metadata accessor for CMLColumn();
    uint64_t v11 = OUTLINED_FUNCTION_70();
    *(void *)(v11 + 16) = v10;
    type metadata accessor for _UntypedColumn();
    uint64_t v3 = OUTLINED_FUNCTION_70();
    *(void *)(v3 + 16) = v11;
    outlined consume of Result<_DataTable, Error>(a1, 0);
    char v12 = 0;
LABEL_9:
    *(void *)a3 = v3;
    *(unsigned char *)(a3 + 8) = v12;
    return;
  }
  __break(1u);
}

uint64_t specialized Array<A>.init(_:)(void *a1, char a2)
{
  if (a2) {
    return OUTLINED_FUNCTION_90();
  }
  uint64_t result = CMLColumn.size.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v4 = result;
    if (result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = MEMORY[0x263F8EE78];
      do
      {
        id v7 = outlined copy of Result<_DataTable, Error>(a1, 0);
        OUTLINED_FUNCTION_72((uint64_t)v7);
        outlined consume of Result<_DataTable, Error>(a1, 0);
        id v8 = v15;
        unint64_t v9 = (unint64_t)v16;
        if (v17 != 2)
        {
          outlined consume of MLDataValue(v15, v16, v17);
          id v8 = 0;
          unint64_t v9 = 0xE000000000000000;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_36_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v13;
        }
        unint64_t v11 = *(void *)(v6 + 16);
        unint64_t v10 = *(void *)(v6 + 24);
        if (v11 >= v10 >> 1)
        {
          OUTLINED_FUNCTION_91(v10);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v14;
        }
        ++v5;
        *(void *)(v6 + 16) = v11 + 1;
        uint64_t v12 = v6 + 16 * v11;
        *(void *)(v12 + 32) = v8;
        *(void *)(v12 + 40) = v9;
      }
      while (v4 != v5);
    }
    return OUTLINED_FUNCTION_90();
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  id v19;
  char v20;

  if (a2) {
    return OUTLINED_FUNCTION_90();
  }
  uint64_t result = CMLColumn.size.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v4 = result;
    if (result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = MEMORY[0x263F8EE78];
      while (1)
      {
        id v7 = outlined copy of Result<_DataTable, Error>(a1, 0);
        OUTLINED_FUNCTION_72((uint64_t)v7);
        outlined consume of Result<_DataTable, Error>(a1, 0);
        id v8 = v18;
        if (v20)
        {
          outlined consume of MLDataValue(v18, v19, v20);
          id v8 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_12;
          }
        }
        else if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
LABEL_12:
          unint64_t v11 = OUTLINED_FUNCTION_36_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11, v12, v13, v14);
          uint64_t v6 = v15;
        }
        unint64_t v10 = *(void *)(v6 + 16);
        unint64_t v9 = *(void *)(v6 + 24);
        if (v10 >= v9 >> 1)
        {
          uint64_t v16 = OUTLINED_FUNCTION_91(v9);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16, v10 + 1, 1, v6);
          uint64_t v6 = v17;
        }
        ++v5;
        *(void *)(v6 + 16) = v10 + 1;
        *(void *)(v6 + 8 * v10 + 32) = v8;
        if (v4 == v5) {
          return OUTLINED_FUNCTION_90();
        }
      }
    }
    return OUTLINED_FUNCTION_90();
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;

  if (a2) {
    return OUTLINED_FUNCTION_90();
  }
  uint64_t result = CMLColumn.size.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v4 = result;
    if (result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = MEMORY[0x263F8EE78];
      do
      {
        id v7 = outlined copy of Result<_DataTable, Error>(a1, 0);
        OUTLINED_FUNCTION_72((uint64_t)v7);
        outlined consume of Result<_DataTable, Error>(a1, 0);
        if (v15 == 1)
        {
          id v8 = v13;
        }
        else
        {
          outlined consume of MLDataValue(v13, v14, v15);
          id v8 = 0;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_36_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v11;
        }
        unint64_t v10 = *(void *)(v6 + 16);
        unint64_t v9 = *(void *)(v6 + 24);
        if (v10 >= v9 >> 1)
        {
          OUTLINED_FUNCTION_91(v9);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v12;
        }
        ++v5;
        *(void *)(v6 + 16) = v10 + 1;
        *(void *)(v6 + 8 * v10 + 32) = v8;
      }
      while (v4 != v5);
    }
    return OUTLINED_FUNCTION_90();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #1 in MLHandPoseClassifier.init(checkpoint:), 0, 0);
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in MLHandPoseClassifier.init(checkpoint:);
  return MLHandActionClassifier.GraphCNN.compile()();
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_6();
  *id v7 = v6;
  swift_task_dealloc();
  if (v1)
  {
    id v8 = *(uint64_t (**)(void))(v6 + 8);
    return v8();
  }
  else
  {
    *(void *)(v5 + 40) = a1;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v10, v11, v12);
  }
}

void static MLHandPoseClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static MLHandPoseClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandPoseClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLHandPoseClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v22[-1] - v13;
  uint64_t v15 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_60();
  uint64_t v17 = type metadata accessor for MLHandPoseClassifier.DataSource();
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_40_0();
  outlined init with copy of MLTrainingSessionParameters(a1, v6, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(a2, v5, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined init with copy of MLTrainingSessionParameters(a3, (uint64_t)v14, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v19 = type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  HandPoseClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)();
  if (!v4)
  {
    v22[3] = v19;
    v22[4] = &protocol witness table for HandPoseClassifierTrainingSessionDelegate;
    v22[0] = v20;
    outlined init with copy of MLTrainingSessionParameters(a3, v3, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v22, v3, 23, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  }
}

uint64_t static MLHandPoseClassifier.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLHandPoseClassifier.restoreTrainingSession(sessionParameters:)()
{
  OUTLINED_FUNCTION_93();
  uint64_t v3 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v11[-1] - v6;
  outlined init with copy of MLTrainingSessionParameters(v2, (uint64_t)&v11[-1] - v6, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v8 = type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v9 = HandPoseClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v7);
  if (!v1)
  {
    v11[3] = v8;
    v11[4] = &protocol witness table for HandPoseClassifierTrainingSessionDelegate;
    v11[0] = v9;
    outlined init with copy of MLTrainingSessionParameters(v2, v0, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v0, 23, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  }
}

uint64_t closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = (void *)(v13 - v12);
  uint64_t v39 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v38 = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = OUTLINED_FUNCTION_14_0();
  uint64_t v20 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(v19);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_33();
  uint64_t v24 = v22 - v23;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_106();
  if (a2)
  {
    *uint64_t v14 = a1;
    swift_storeEnumTagMultiPayload();
    id v32 = a1;
    a4(v14);
    return outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
  }
  uint64_t v27 = v26;
  v37[1] = a5;
  outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
  OUTLINED_FUNCTION_114();
  type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v29 = v40;
  uint64_t v30 = *(void *)(v40 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model);
  if (!v30) {
    return swift_release();
  }
  uint64_t v31 = v40 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess();
  outlined init with copy of URL?(v31, v5, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload(v5, 1, (uint64_t)v39))
  {
    swift_retain();
    outlined destroy of URL?(v5, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    swift_release();
    return swift_release();
  }
  outlined init with copy of MLTrainingSessionParameters(v5, v38, (void (*)(void))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  v37[0] = v30;
  swift_retain();
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  outlined init with copy of MLTrainingSessionParameters(v38 + v39[5], v24, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v33 = *(void *)(v38 + v39[7]);
  uint64_t v34 = *(void *)(v38 + v39[8]);
  *(void *)(v24 + v20[5]) = *(void *)(v38 + v39[6]);
  *(void *)(v24 + v20[6]) = v33;
  *(void *)(v24 + v20[7]) = v34;
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  uint64_t v35 = outlined init with take of MLHandPoseClassifier.ModelParameters(v24, v27, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
  uint64_t v36 = *(void *)(v29 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels);
  if (v36)
  {
    MEMORY[0x270FA5388](v35);
    v37[-4] = v37[0];
    v37[-3] = v27;
    v37[-2] = v29;
    v37[-1] = v36;
    swift_bridgeObjectRetain();
    _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5(partial apply for closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:), (uint64_t)v14);
    swift_bridgeObjectRelease();
    a4(v14);
    swift_release();
    swift_release();
    outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
  }
  else
  {
    swift_release();
    swift_release();
  }
  return outlined destroy of MLHandPoseClassifier.ModelParameters();
}

void closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  MEMORY[0x270FA5388](v8 - 8);
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)&v10 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MLHandPoseClassifier.init(model:parameters:metricsAttributes:classLabels:)();
  if (v5) {
    *a5 = v5;
  }
}

uint64_t static MLHandPoseClassifier.buildFeatureTable(features:labels:sessionIds:imageFiles:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB360;
  *(void *)(inited + 32) = 0x746E696F7079656BLL;
  *(void *)(inited + 40) = 0xE900000000000073;
  uint64_t v23 = a1;
  swift_bridgeObjectRetain();
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v13 = v12;
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v13 & 1;
  *(void *)(inited + 64) = 0x6C6562616CLL;
  *(void *)(inited + 72) = 0xE500000000000000;
  uint64_t v23 = a2;
  swift_bridgeObjectRetain();
  uint64_t v14 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(ML14_UntypedColumnC_s5Error_pTgm5) = v15;
  swift_bridgeObjectRelease();
  *(void *)(inited + 80) = v14;
  *(unsigned char *)(inited + 88) = ML14_UntypedColumnC_s5Error_pTgm5 & 1;
  *(void *)(inited + 96) = 0x5F6E6F6973736573;
  *(void *)(inited + 104) = 0xEA00000000006469;
  uint64_t v23 = a3;
  swift_bridgeObjectRetain();
  uint64_t v16 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v14) = v17;
  swift_bridgeObjectRelease();
  *(void *)(inited + 112) = v16;
  *(unsigned char *)(inited + 120) = v14 & 1;
  *(void *)(inited + 128) = 0x7461506567616D69;
  *(void *)(inited + 136) = 0xE900000000000068;
  uint64_t v23 = a4;
  swift_bridgeObjectRetain();
  uint64_t v18 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v16) = v19;
  swift_bridgeObjectRelease();
  *(void *)(inited + 144) = v18;
  *(unsigned char *)(inited + 152) = v16 & 1;
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v20, (uint64_t)&v23);
  char v22 = v24;
  *(void *)a5 = v23;
  *(unsigned char *)(a5 + 8) = v22;
  return result;
}

void static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = *(id *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v33 = *(void *)a1;
  char v34 = v7;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v31);
  id v8 = v31;
  if (v32 == 1)
  {
    outlined consume of Result<_DataTable, Error>(v31, 1);
LABEL_14:
    char v29 = *(unsigned char *)(a1 + 8);
    id v31 = *(id *)a1;
    LOBYTE(v32) = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    *(void *)(inited + 32) = a2;
    *(void *)(inited + 40) = a3;
    LOBYTE(v33) = 5;
    swift_bridgeObjectRetain();
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v31, inited, (unsigned __int8 *)&v33);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return;
  }
  swift_retain();
  _UntypedColumn.type.getter(&v33);
  outlined consume of Result<_DataTable, Error>(v8, 0);
  outlined consume of Result<_DataTable, Error>(v8, 0);
  if (v33 != 3) {
    goto LABEL_14;
  }
  id v31 = v6;
  LOBYTE(v32) = v7;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v33);
  uint64_t v9 = (void *)v33;
  char v10 = v34;
  specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:), 0, (void *)v33, v34, (uint64_t)&v31);
  outlined consume of Result<_DataTable, Error>(v9, v10);
  uint64_t v35 = v31;
  char v11 = v32;
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v33 = *(void *)a1;
  char v34 = v12;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v31);
  id v13 = v31;
  char v14 = v32;
  if (v32)
  {
    uint64_t v15 = -1;
  }
  else
  {
    swift_retain();
    uint64_t v15 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v13, 0);
  }
  outlined consume of Result<_DataTable, Error>(v13, v14);
  specialized MLDataColumn.dropMissing()(v35, v11, (uint64_t)&v33);
  uint64_t v16 = (void *)v33;
  char v17 = v34;
  if (v34)
  {
    uint64_t v18 = -1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>((id)v33, 0);
    uint64_t v18 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v16, 0);
  }
  outlined consume of Result<_DataTable, Error>(v16, v17);
  if (!__OFSUB__(v15, v18))
  {
    if (v15 != v18)
    {
      id v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(236);
      v19._countAndFlagsBits = 0xD00000000000003DLL;
      v19._object = (void *)0x80000002272D42A0;
      String.append(_:)(v19);
      uint64_t v33 = v15 - v18;
      v20._countAndFlagsBits = OUTLINED_FUNCTION_68();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 0xD00000000000006BLL;
      v21._object = (void *)0x80000002272D42E0;
      String.append(_:)(v21);
      uint64_t v33 = 3;
      v22._countAndFlagsBits = OUTLINED_FUNCTION_68();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8236;
      v23._object = (void *)0xE200000000000000;
      String.append(_:)(v23);
      uint64_t v33 = 21;
      v24._countAndFlagsBits = OUTLINED_FUNCTION_68();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._object = (void *)0x80000002272D4350;
      v25._countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v25);
      id v26 = v31;
      unint64_t v27 = v32;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v28 = v26;
      *(void *)(v28 + 8) = v27;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 32) = 0u;
      *(unsigned char *)(v28 + 48) = 0;
      swift_willThrow();
      outlined consume of Result<_DataTable, Error>(v35, v11);
      return;
    }
    swift_bridgeObjectRetain();
    specialized MLDataTable.subscript.setter(v35, v11);
    goto LABEL_14;
  }
  __break(1u);
}

void closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 16) == 3)
  {
    uint64_t v2 = *(void *)a1;
    static MLHandPoseClassifier.convertSequenceToMultiArray(value:)(&v2, a2);
  }
  else
  {
    *a2 = 0;
  }
}

void static MLHandPoseClassifier.convertSequenceToMultiArray(value:)(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  v94[0] = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 1);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_77();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 3);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_77();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 21);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_77();
  specialized ContiguousArray._endMutation()();
  id v4 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  uint64_t v5 = 0;
  id v6 = @nonobjc MLMultiArray.init(shape:dataType:)(v94[0], 65600);
  if (!v6) {
    goto LABEL_56;
  }
  id v7 = v6;
  uint64_t v8 = UnsafeMutableBufferPointer.init(_:)();
  swift_retain();
  CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)();
  OUTLINED_FUNCTION_105();
  if (v3 != 1)
  {

LABEL_56:
    *a2 = 0;
    return;
  }
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v91 = 1;
  swift_retain();
  while (1)
  {
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v87);
    uint64_t countAndFlagsBits = (uint64_t)v87;
    id v9 = v88;
    id v11 = v89;
    char v12 = v90;
    if (v90 != 3)
    {
      if (v90 == 255)
      {
        swift_release();
        MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v7);
        *a2 = v87;
        return;
      }

      swift_release();
      goto LABEL_66;
    }
    outlined copy of MLDataValue(v88, v89, 3);
    outlined copy of MLDataValue(v9, v11, 3);
    CMLSequence.size.getter();
    uint64_t v13 = specialized RandomAccessCollection<>.distance(from:to:)();
    OUTLINED_FUNCTION_34_0();
    if (v13 != 3)
    {

      swift_release();
      char v12 = 3;
      OUTLINED_FUNCTION_34_0();
LABEL_66:
      outlined consume of (offset: Int, element: MLDataValue)?(countAndFlagsBits, v9, v11, v12);
      goto LABEL_56;
    }
    outlined copy of MLDataValue(v9, v11, 3);
    if (CMLSequence.size.getter()) {
      break;
    }
LABEL_54:
    outlined consume of (offset: Int, element: MLDataValue)?(countAndFlagsBits, v9, v11, 3);
    outlined consume of (offset: Int, element: MLDataValue)?(countAndFlagsBits, v9, v11, 3);
    OUTLINED_FUNCTION_34_0();
  }
  uint64_t v14 = 0;
  uint64_t v79 = v11;
  uint64_t v80 = (uint64_t)a2;
  uint64_t v78 = v9;
  uint64_t v83 = countAndFlagsBits;
  while (1)
  {
    swift_retain();
    CMLSequence.value(at:)(v14);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    OUTLINED_FUNCTION_34_0();
    uint64_t v18 = v9;
    MLDataValue.init(_:)(v17, (uint64_t)&v87);
    Swift::String v19 = v87;
    id v85 = v88;
    uint64_t v20 = v89;
    swift_retain();
    uint64_t v21 = CMLSequence.size.getter();
    outlined consume of (offset: Int, element: MLDataValue)?(countAndFlagsBits, v18, v11, 3);
    uint64_t v84 = v15;
    if (v15 >= v21) {
      goto LABEL_76;
    }
    if (v20 != 3)
    {
      Swift::String v22 = v85;
      goto LABEL_62;
    }
    Swift::String v22 = v85;
    outlined copy of MLDataValue(v19, v85, 3);
    outlined copy of MLDataValue(v19, v85, 3);
    uint64_t v23 = CMLSequence.size.getter();
    if (CMLSequence.size.getter() < 0) {
      goto LABEL_77;
    }
    uint64_t v21 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_21_0();
    if (v23 < 0 || v21 < v23) {
      goto LABEL_78;
    }
    if (v23 != 21) {
      break;
    }
    swift_retain();
    if (CMLSequence.size.getter())
    {
      uint64_t v20 = 0;
      while (1)
      {
        swift_retain();
        CMLSequence.value(at:)(v20);
        OUTLINED_FUNCTION_21_0();
        switch(CMLFeatureValue.type.getter())
        {
          case 1u:
            OUTLINED_FUNCTION_99();
            specialized handling<A, B>(_:_:)();
            uint64_t v37 = v36;
            swift_release();
            swift_release();
            id object = 0;
            uint64_t countAndFlagsBits = v37;
            int v24 = 1;
            break;
          case 2u:
            swift_retain();
            Swift::String v35 = CMLFeatureValue.stringValue()();
            uint64_t countAndFlagsBits = v35._countAndFlagsBits;
            id object = v35._object;
            swift_release();
            if (v5) {
              goto LABEL_80;
            }
            swift_release();
            int v24 = 2;
            break;
          case 3u:
            OUTLINED_FUNCTION_99();
            uint64_t v38 = specialized handling<A, B>(_:_:)(v11);
            if (!v38) {
              goto LABEL_81;
            }
            swift_release_n();
            type metadata accessor for CMLSequence();
            uint64_t countAndFlagsBits = swift_allocObject();
            id object = 0;
            *(void *)(countAndFlagsBits + 16) = v38;
            *(unsigned char *)(countAndFlagsBits + 24) = 1;
            int v24 = 3;
            break;
          case 4u:
            OUTLINED_FUNCTION_99();
            uint64_t v25 = specialized handling<A, B>(_:_:)(v11);
            if (!v25) {
              goto LABEL_79;
            }
            type metadata accessor for CMLDictionary();
            uint64_t v26 = OUTLINED_FUNCTION_70();
            *(void *)(v26 + 16) = v25;
            v94[0] = v26;
            v94[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
            v94[2] = 0;
            v94[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
            v94[4] = 0;
            v94[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
            v94[6] = 0;
            swift_retain();
            specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v94, v27, v28, v29, v30, v31, v32, v33, (uint64_t)v78, (uint64_t)v79, v80, (uint64_t)object, v83, v84, (uint64_t)v85, v86, (uint64_t)v87, (uint64_t)v88);
            uint64_t countAndFlagsBits = v34;
            swift_release();
            swift_release_n();
            id object = 0;
            int v24 = 4;
            break;
          case 5u:
            swift_release();
            uint64_t countAndFlagsBits = 0;
            id object = 0;
            int v24 = 6;
            break;
          case 6u:
            uint64_t v39 = swift_retain();
            MLDataValue.MultiArrayType.init(from:)(v39, (uint64_t *)&v87);
            uint64_t countAndFlagsBits = (uint64_t)v87;
            if (!v87) {
              goto LABEL_82;
            }
            swift_release();
            id object = 0;
            int v24 = 5;
            break;
          default:
            OUTLINED_FUNCTION_99();
            specialized handling<A, B>(_:_:)(v11);
            OUTLINED_FUNCTION_84();
            swift_release();
            id object = 0;
            int v24 = 0;
            break;
        }
        swift_retain();
        uint64_t v40 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_21_0();
        if (v20 >= v40) {
          break;
        }
        HIDWORD(v86) = v24;
        uint64_t v41 = v8;
        uint64_t v42 = v7;
        id v43 = objc_msgSend(v7, sel_strides);
        type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v44 & 0xC000000000000001) != 0)
        {
          id v45 = (id)MEMORY[0x22A6753B0](0, v44);
        }
        else
        {
          if (!*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_69;
          }
          id v45 = *(id *)(v44 + 32);
        }
        uint64_t v46 = v45;
        swift_bridgeObjectRelease();
        uint64_t v47 = (uint64_t)objc_msgSend(v46, sel_integerValue);

        uint64_t v48 = v83 * v47;
        if ((unsigned __int128)(v83 * (__int128)v47) >> 64 != (v83 * v47) >> 63) {
          goto LABEL_68;
        }
        id v49 = objc_msgSend(v42, sel_strides);
        uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v50 & 0xC000000000000001) != 0)
        {
          id v51 = (id)MEMORY[0x22A6753B0](1, v50);
        }
        else
        {
          if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
            goto LABEL_71;
          }
          id v51 = *(id *)(v50 + 40);
        }
        uint64_t v52 = v51;
        swift_bridgeObjectRelease();
        uint64_t v53 = (uint64_t)objc_msgSend(v52, sel_integerValue);

        uint64_t v54 = v84 * v53;
        if ((unsigned __int128)(v84 * (__int128)v53) >> 64 != (v84 * v53) >> 63) {
          goto LABEL_70;
        }
        BOOL v55 = __OFADD__(v48, v54);
        uint64_t v56 = v48 + v54;
        if (v55) {
          goto LABEL_72;
        }
        id v7 = v42;
        id v57 = objc_msgSend(v42, sel_strides);
        uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v58 & 0xC000000000000001) != 0)
        {
          id v11 = (id)MEMORY[0x22A6753B0](2, v58);
          uint64_t v8 = v41;
        }
        else
        {
          if (*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL) {
            goto LABEL_74;
          }
          uint64_t v8 = v41;
          id v11 = *(id *)(v58 + 48);
        }
        swift_bridgeObjectRelease();
        uint64_t v21 = (uint64_t)objc_msgSend(v11, sel_integerValue);

        uint64_t v59 = v20 * v21;
        if ((unsigned __int128)(v20 * (__int128)v21) >> 64 != (v20 * v21) >> 63) {
          goto LABEL_73;
        }
        BOOL v55 = __OFADD__(v56, v59);
        uint64_t v60 = v56 + v59;
        if (v55) {
          goto LABEL_75;
        }
        if (HIDWORD(v86))
        {
          uint64_t v61 = v85;
          if (HIDWORD(v86) != 1)
          {
            outlined consume of MLDataValue((void *)countAndFlagsBits, object, SBYTE4(v86));
            outlined consume of MLDataValue(v19, v85, 3);
            OUTLINED_FUNCTION_21_0();
            OUTLINED_FUNCTION_30_0(v62, v63, v64, v65, v66, v67, v68, v69, v78, v79, v80, (uint64_t)object, v83);
            OUTLINED_FUNCTION_21_0();
            goto LABEL_63;
          }
          *(void *)(v8 + 8 * v60) = countAndFlagsBits;
        }
        else
        {
          *(double *)(v8 + 8 * v60) = (double)countAndFlagsBits;
          uint64_t v61 = v85;
        }
        if (++v20 == CMLSequence.size.getter())
        {
          outlined consume of MLDataValue(v19, v61, 3);
          outlined consume of MLDataValue(v19, v61, 3);
          OUTLINED_FUNCTION_21_0();
          goto LABEL_53;
        }
      }
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);

      __break(1u);
      swift_release();

      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:

      __break(1u);
      __break(1u);
      swift_release();

      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      OUTLINED_FUNCTION_109();
      __break(1u);
      JUMPOUT(0x22705C5B4);
    }
    outlined consume of MLDataValue(v19, v85, 3);
    outlined consume of MLDataValue(v19, v85, 3);
    swift_release();
LABEL_53:
    uint64_t v14 = v84 + 1;
    id v9 = v78;
    id v11 = v79;
    a2 = (void *)v80;
    uint64_t countAndFlagsBits = v83;
    if (v84 + 1 == CMLSequence.size.getter()) {
      goto LABEL_54;
    }
  }
  uint64_t v20 = 3;
  OUTLINED_FUNCTION_21_0();
LABEL_62:
  outlined consume of MLDataValue(v19, v22, v20);
  OUTLINED_FUNCTION_30_0(v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, (uint64_t)object, v83);
LABEL_63:
  outlined consume of (offset: Int, element: MLDataValue)?(0, (void *)v21, (id)v20, 3);
  swift_release();
  *uint64_t v81 = 0;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v4 = (id)MEMORY[0x22A6753B0](v3, a1);
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      id v6 = objc_msgSend(v4, sel_integerValue);

      unint64_t v8 = *(void *)(v9 + 16);
      unint64_t v7 = *(void *)(v9 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      ++v3;
      *(void *)(v9 + 16) = v8 + 1;
      *(void *)(v9 + 8 * v8 + 32) = v6;
      if (v2 == v3) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v14;
    uint64_t v7 = a3 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_54();
      v8();
      if (v3) {
        break;
      }
      swift_bridgeObjectRelease();
      unint64_t v9 = *(void *)(v14 + 16);
      if (v9 >= *(void *)(v14 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v7 += 16;
      *(void *)(v14 + 16) = v9 + 1;
      uint64_t v10 = v14 + 16 * v9;
      *(void *)(v10 + 32) = v12;
      *(void *)(v10 + 40) = v13;
      if (!--v4) {
        return v5;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSSgs5NeverOTg5()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v0 = dispatch thunk of Collection.count.getter();
  uint64_t v1 = MEMORY[0x263F8EE78];
  if (!v0) {
    return v1;
  }
  uint64_t v2 = v0;
  uint64_t v11 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v1 = v11;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v2 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      uint64_t v4 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      swift_bridgeObjectRetain();
      v4(v9, 0);
      OUTLINED_FUNCTION_54();
      v5();
      if (v4) {
        break;
      }
      swift_bridgeObjectRelease();
      long long v6 = v10;
      uint64_t v11 = v1;
      unint64_t v7 = *(void *)(v1 + 16);
      if (v7 >= *(void *)(v1 + 24) >> 1)
      {
        long long v8 = v10;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        long long v6 = v8;
        uint64_t v1 = v11;
      }
      *(void *)(v1 + 16) = v7 + 1;
      *(_OWORD *)(v1 + 16 * v7 + 32) = v6;
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v2) {
        return v1;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return v1;
  }
  __break(1u);
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    goto LABEL_18;
  }
  if (v5)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v5 < 0)
    {
LABEL_19:
      __break(1u);
      return;
    }
    uint64_t v9 = a3;
    while (a4 != v9)
    {
      OUTLINED_FUNCTION_54();
      a1();
      if (v4)
      {
        swift_release();
        return;
      }
      unint64_t v10 = *(void *)(v12 + 16);
      if (v10 >= *(void *)(v12 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(_DWORD *)(v12 + 4 * v10 + 32) = v11;
      if (a4 < a3) {
        goto LABEL_16;
      }
      if (v9 >= a4) {
        goto LABEL_17;
      }
      if (a4 == ++v9) {
        return;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v18;
    uint64_t v7 = a3 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_54();
      v8();
      if (v3) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v9 = v15;
      char v10 = v17;
      unint64_t v11 = *(void *)(v18 + 16);
      if (v11 >= *(void *)(v18 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        char v10 = v17;
        uint64_t v9 = v15;
      }
      v7 += 16;
      *(void *)(v18 + 16) = v11 + 1;
      uint64_t v12 = v18 + 32 * v11;
      *(void *)(v12 + 32) = v14;
      *(void *)(v12 + 40) = v9;
      *(void *)(v12 + 48) = v16;
      *(unsigned char *)(v12 + 56) = v10;
      if (!--v4) {
        return v5;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v5;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5()
{
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5Tm()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v16 = v4;
  uint64_t v15 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v17 = v8;
  if (v3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v9)
    {
LABEL_16:
      OUTLINED_FUNCTION_55();
      OUTLINED_FUNCTION_8_1();
      return;
    }
    uint64_t v19 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0) {
      break;
    }
    uint64_t v10 = 0;
    while (v9 != v10)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x22A6753B0](v10, v3);
      }
      else {
        id v11 = *(id *)(v3 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      id v18 = v11;
      v16(&v18);
      if (v1)
      {
        swift_release();

        goto LABEL_16;
      }
      uint64_t v1 = 0;

      unint64_t v14 = *(void *)(v19 + 16);
      unint64_t v13 = *(void *)(v19 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      ++v10;
      *(void *)(v19 + 16) = v14 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v19+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v17, v15);
      if (v9 == v10) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AIs5NeverOTg5()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v2 + 16);
  if (v10)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = v2 + v18;
    uint64_t v17 = *(void *)(v6 + 72);
    uint64_t v12 = (void (**)(unint64_t, char *, uint64_t))(v6 + 32);
    while (1)
    {
      OUTLINED_FUNCTION_54();
      v13();
      if (v0) {
        break;
      }
      unint64_t v14 = *(void *)(v22 + 16);
      if (v14 >= *(void *)(v22 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v22 + 16) = v14 + 1;
      uint64_t v15 = v17;
      (*v12)(v22 + v18 + v14 * v17, v9, v19);
      v11 += v15;
      if (!--v10) {
        goto LABEL_9;
      }
    }
    swift_release();
  }
LABEL_9:
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_8_1();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5()
{
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay6CoreML13MLShapedArrayVySfGG_18CreateMLComponents16AnnotatedFeatureVyAISSGs5NeverOTg5()
{
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5Tm()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(v8);
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_40_0();
  unint64_t v12 = *(void *)(v7 + 16);
  if (v12)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    v5(0, v12, 0);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(v3);
    OUTLINED_FUNCTION_1(v13);
    uint64_t v15 = v7 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v20 = *(void *)(v16 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_54();
      v17();
      if (v0) {
        break;
      }
      unint64_t v19 = *(void *)(v22 + 16);
      unint64_t v18 = *(void *)(v22 + 24);
      if (v19 >= v18 >> 1) {
        v5(v18 > 1, v19 + 1, 1);
      }
      *(void *)(v22 + 16) = v19 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v22+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v19, v1, v21);
      v15 += v20;
      if (!--v12) {
        goto LABEL_9;
      }
    }
    swift_release();
  }
LABEL_9:
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_8_1();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML22MLHandActionClassifierV10PredictionVGsAE_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(a1, a2, a3, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(BOOL, unint64_t, uint64_t))
{
  unint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    a4(0, v5, 0);
    uint64_t v6 = v19;
    uint64_t v8 = type metadata accessor for URL();
    OUTLINED_FUNCTION_1(v8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v12 = *(void *)(v11 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_54();
      v13();
      if (v4) {
        break;
      }
      unint64_t v15 = *(void *)(v19 + 16);
      unint64_t v14 = *(void *)(v19 + 24);
      if (v15 >= v14 >> 1) {
        a4(v14 > 1, v15 + 1, 1);
      }
      *(void *)(v19 + 16) = v15 + 1;
      *(void *)(v19 + 8 * v15 + 32) = v18;
      v10 += v12;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t MLHandPoseClassifier.prediction(from:)()
{
  OUTLINED_FUNCTION_93();
  uint64_t v2 = type metadata accessor for MLHandPoseClassifier();
  return MLHandPoseClassifier.modelPrediction(on:using:)(v1, *(void **)(v0 + *(int *)(v2 + 20)));
}

uint64_t MLHandPoseClassifier.modelPrediction(on:using:)(uint64_t a1, void *a2)
{
  unint64_t v5 = static _VideoUtilities.getHandKeyPointsFromImageUrl(url:)(a1);
  if (v3) {
    return (uint64_t)v2;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5[2];
  if (v7)
  {
    unint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v8 + 1;
      id v10 = (id)v6[v8 + 4];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v8 = v9;
    }
    while (v7 != v9);
    unint64_t v11 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v12 = static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)(v11, 1, 21);
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v12 + 16))
  {
    id v14 = *(id *)(v12 + 32);
    swift_bridgeObjectRelease();
    uint64_t v2 = MLHandPoseClassifier.modelPrediction(on:using:)(v14, a2);

    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

uint64_t MLHandPoseClassifier.predictions(from:)(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm((uint64_t)partial apply for closure #1 in MLHandPoseClassifier.predictions(from:), (uint64_t)&v2, a1, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t closure #1 in MLHandPoseClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for MLHandPoseClassifier();
  uint64_t result = MLHandPoseClassifier.modelPrediction(on:using:)(a1, *(void **)(a2 + *(int *)(v9 + 20)));
  if (v4) {
    *a3 = v4;
  }
  else {
    *a4 = result;
  }
  return result;
}

void *MLHandPoseClassifier.modelPrediction(on:using:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v6 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 != 3) {
    goto LABEL_25;
  }
  id v9 = objc_msgSend(a1, sel_shape);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v10);
  uint64_t v3 = v11;
  swift_bridgeObjectRelease();
  LOBYTE(v10) = specialized static Array<A>.== infix(_:_:)(v3, outlined read-only object #0 of MLHandPoseClassifier.modelPrediction(on:using:));
  swift_bridgeObjectRelease();
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    *(void *)(inited + 32) = 0x7365736F70;
    *(void *)(inited + 40) = 0xE500000000000000;
    id v13 = objc_msgSend(self, sel_featureValueWithMultiArray_, a1);
    *(void *)(inited + 72) = type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
    *(void *)(inited + 48) = v13;
    Dictionary.init(dictionaryLiteral:)();
    uint64_t v3 = objc_allocWithZone(MEMORY[0x263F00D38]);
    id v14 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
    if (!v2)
    {
      unint64_t v15 = v14;
      v58[0] = 0;
      id v16 = objc_msgSend(a2, sel_predictionFromFeatures_error_, v14, v58);
      uint64_t v3 = v58[0];
      if (v16)
      {
        uint64_t v17 = v16;
        id v18 = v58[0];
        uint64_t v19 = (void *)MEMORY[0x22A674AE0](0xD000000000000012, 0x80000002272D41B0);
        uint64_t v3 = objc_msgSend(v17, sel_featureValueForName_, v19);

        if (v3)
        {
          id v20 = objc_msgSend(v3, sel_dictionaryValue);

          uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v22 = *(void *)(v21 + 16);
          if (v22)
          {
            uint64_t v40 = v15;
            id v45 = (void *)MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v23 = specialized Dictionary.startIndex.getter(v21);
            if (v23 < 0 || (unint64_t v25 = v23, v23 >= 1 << *(unsigned char *)(v21 + 32)))
            {
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
            }
            uint64_t v26 = v21 + 64;
            while (1)
            {
              if ((*(void *)(v26 + 8 * (v25 >> 6)) & (1 << v25)) == 0) {
                goto LABEL_33;
              }
              if (v24 != *(_DWORD *)(v21 + 36)) {
                goto LABEL_34;
              }
              int v42 = v24;
              outlined init with copy of AnyHashable(*(void *)(v21 + 48) + 40 * v25, (uint64_t)v58);
              uint64_t v59 = *(void **)(*(void *)(v21 + 56) + 8 * v25);
              uint64_t v27 = v59;
              outlined init with copy of AnyHashable((uint64_t)v58, (uint64_t)v56);
              *((void *)&v57 + 1) = v27;
              v54[0] = v56[0];
              v54[1] = v56[1];
              *(_OWORD *)BOOL v55 = v57;
              id v28 = v27;
              outlined destroy of URL?((uint64_t)v58, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              outlined init with copy of AnyHashable((uint64_t)v54, (uint64_t)v48);
              id v50 = v55[1];
              long long v51 = v48[0];
              long long v52 = v48[1];
              uint64_t v53 = v49;
              swift_dynamicCast();
              outlined init with copy of AnyHashable((uint64_t)v54, (uint64_t)v46);
              id v47 = v55[1];
              objc_msgSend(v55[1], sel_doubleValue);
              uint64_t v30 = v29;
              outlined destroy of AnyHashable((uint64_t)v46);
              outlined destroy of URL?((uint64_t)v54, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              uint64_t v3 = v45;
              uint64_t v41 = v22;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v3 = v45;
              }
              unint64_t v32 = v3[2];
              unint64_t v31 = v3[3];
              if (v32 >= v31 >> 1)
              {
                OUTLINED_FUNCTION_91(v31);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v3 = v45;
              }
              v3[2] = v32 + 1;
              uint64_t v33 = &v3[3 * v32];
              v33[4] = v43;
              v33[5] = v44;
              v33[6] = v30;
              if ((uint64_t)v25 >= -(-1 << *(unsigned char *)(v21 + 32))) {
                goto LABEL_35;
              }
              uint64_t v26 = v21 + 64;
              if ((*(void *)(v21 + 64 + 8 * (v25 >> 6)) & (1 << v25)) == 0) {
                goto LABEL_36;
              }
              if (v42 != *(_DWORD *)(v21 + 36)) {
                goto LABEL_37;
              }
              uint64_t v34 = _HashTable.occupiedBucket(after:)();
              --v22;
              if (v41 == 1) {
                break;
              }
              unint64_t v25 = v34;
              if ((v34 & 0x8000000000000000) == 0)
              {
                int v24 = *(_DWORD *)(v21 + 36);
                if (v34 < 1 << *(unsigned char *)(v21 + 32)) {
                  continue;
                }
              }
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();

            return (void *)MEMORY[0x263F8EE78];
          }
        }
        else
        {
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_85();
          OUTLINED_FUNCTION_19_0(v39, 0xD000000000000028);

          swift_unknownObjectRelease();
        }
      }
      else
      {
        id v38 = v58[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
  else
  {
LABEL_25:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_94();
    OUTLINED_FUNCTION_19_0(v36, v35 + 19);
  }
  return v3;
}

void MLHandPoseClassifier.evaluation(on:)()
{
  uint64_t v3 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_0();
  uint64_t v5 = v0 + *(int *)(type metadata accessor for MLHandPoseClassifier() + 24);
  uint64_t v6 = *(void *)(v5 + *(int *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) + 20));
  OUTLINED_FUNCTION_103();
  swift_storeEnumTagMultiPayload();
  *(void *)(v2 + v4[7]) = v6;
  *(void *)(v2 + v4[8]) = 80;
  *(void *)(v2 + v4[9]) = 1;
  *(void *)(v2 + v4[10]) = 0;
  *(void *)(v2 + v4[12]) = 0x403E000000000000;
  MLHandPoseClassifier.DataSource.keypointsWithAnnotations()();
  if (v1)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
  }
  else
  {
    MLHandActionClassifier.evaluation(on:parameters:)();
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    outlined consume of Result<_DataTable, Error>(v7, v8);
  }
}

void MLHandPoseClassifier.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  v23[0] = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)v23 - v12;
  uint64_t v14 = v2[2];
  v23[1] = v2[1];
  v23[2] = v14;
  uint64_t v15 = v2[4];
  v23[3] = v2[3];
  v23[4] = v15;
  uint64_t v16 = v2[6];
  v23[5] = v2[5];
  v23[6] = v16;
  uint64_t v17 = v2[8];
  v23[7] = v2[7];
  v23[8] = v17;
  if (URL.pathExtension.getter() == 0x67616B6361706C6DLL && v18 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v4, 0xD000000000000012, (void *)0x80000002272D3F80, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v10);
      if (!v0)
      {
        OUTLINED_FUNCTION_16_0();
        MLHandActionClassifier.write(to:metadata:)();
        (*(void (**)(uint64_t, uint64_t))(v23[0] + 8))(v10, v5);
      }
      goto LABEL_11;
    }
  }
  OUTLINED_FUNCTION_94();
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v4, v21 + 2, (void *)0x80000002272D3FA0, 0x67616B6361706C6DLL, (void *)0xE900000000000065, (uint64_t)v13);
  if (!v0)
  {
    OUTLINED_FUNCTION_16_0();
    MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)((uint64_t)v13, v22);
    (*(void (**)(char *, uint64_t))(v23[0] + 8))(v13, v5);
  }
LABEL_11:
  OUTLINED_FUNCTION_8_1();
}

void MLHandPoseClassifier.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v26 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_22_0();
  long long v19 = *v3;
  long long v24 = v3[1];
  long long v25 = v19;
  long long v20 = v3[2];
  long long v22 = v3[3];
  long long v23 = v20;
  uint64_t v21 = *((void *)v3 + 8);
  OUTLINED_FUNCTION_67(v14);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x263F06E50], v4);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  long long v27 = v25;
  long long v28 = v24;
  long long v29 = v23;
  long long v30 = v22;
  uint64_t v31 = v21;
  MLHandPoseClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v0, v15);
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_8_1();
}

unint64_t MLHandPoseClassifier.debugDescription.getter()
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier();
  unint64_t v4 = MLHandPoseClassifier.ModelParameters.description.getter();
  uint64_t v6 = v5;
  unint64_t v7 = MLClassifierMetrics.accuracyDescription.getter();
  uint64_t v9 = v8;
  outlined init with copy of MLTrainingSessionParameters(v0 + *(int *)(v3 + 32), v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  unint64_t v10 = MLClassifierMetrics.accuracyDescription.getter();
  uint64_t v12 = v11;
  v13._uint64_t countAndFlagsBits = v4;
  v13._id object = v6;
  String.append(_:)(v13);
  OUTLINED_FUNCTION_96();
  long long v20 = v14;
  v15._uint64_t countAndFlagsBits = v7;
  v15._id object = v9;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v16._id object = v20;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v17._uint64_t countAndFlagsBits = v10;
    v17._id object = v12;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = 0xD000000000000020;
    v18._id object = (void *)0x80000002272D4000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

NSAttributedString MLHandPoseClassifier.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v3._uint64_t countAndFlagsBits = MLHandPoseClassifier.debugDescription.getter();
  result.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = result.super.isa;
  return result;
}

NSAttributedString __swiftcall NSAttributedString.__allocating_init(string:)(Swift::String string)
{
  id object = string._object;
  OUTLINED_FUNCTION_100();
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  unint64_t v4 = (void *)MEMORY[0x22A674AE0](v1, object);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithString_, v4);

  return (NSAttributedString)v5;
}

void specialized OptionSet<>.init()(void *a1@<X8>)
{
  *a1 = 0;
}

void specialized MLTrainingSession.init(delegate:parameters:modelType:)(uint64_t a1, uint64_t a2, char a3)
{
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
}

void specialized MLTrainingSession.init(delegate:parameters:modelType:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_22_0();
  *(unsigned char *)(v4 + direct field offset for MLTrainingSession.modelType) = 28;
  uint64_t v15 = v4 + *(void *)(*(void *)v4 + 112);
  Date.init()();
  Swift::String v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(a4);
  *(unsigned char *)(v15 + v16[7]) = 0;
  *(void *)(v15 + v16[8]) = 0;
  OUTLINED_FUNCTION_67(v15 + v16[9]);
  OUTLINED_FUNCTION_67(v15 + v16[10]);
  *(void *)(v15 + v16[11]) = MEMORY[0x263F8EE78];
  outlined init with copy of TrainingSessionDelegate(a1, v4 + direct field offset for MLTrainingSession.delegate);
  outlined init with copy of MLTrainingSessionParameters(a2, v4 + direct field offset for MLTrainingSession.parameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  *(unsigned char *)(v4 + direct field offset for MLTrainingSession.modelType) = a3;
  outlined init with copy of URL?(a2, v5, &demangling cache variable for type metadata for URL?);
  if (__swift_getEnumTagSinglePayload(v5, 1, v12) == 1)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    __swift_destroy_boxed_opaque_existential_0(a1);
    outlined destroy of URL?(v5, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v6, v5, v12);
    specialized MLTrainingSession.restore(from:)();
    if (v19) {
      swift_release();
    }
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    __swift_destroy_boxed_opaque_existential_0(a1);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v6, v12);
  }
  OUTLINED_FUNCTION_115();
}

void specialized MLTrainingSession.restore(from:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v49 = v3;
  uint64_t v52 = v0;
  uint64_t v5 = v4;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v53 = v6;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(v6);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v51 = v8;
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  OUTLINED_FUNCTION_0();
  uint64_t v48 = v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v54 = OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_41_0();
  id v15 = objc_msgSend(self, sel_defaultManager);
  OUTLINED_FUNCTION_59();
  URL.appendingPathComponent(_:)();
  uint64_t v16 = URL.path.getter();
  uint64_t v17 = (void *)MEMORY[0x22A674AE0](v16);
  swift_bridgeObjectRelease();
  unsigned int v18 = objc_msgSend(v15, sel_fileExistsAtPath_, v17);

  if (v18)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    id v56 = (id)0xD00000000000001ELL;
    long long v57 = (void *)0x80000002272D4110;
    v19._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 39;
    v20._id object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    v22._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v22._id object = (void *)0x80000002272D4110;
    log(_:type:)(v22, v21);
    swift_bridgeObjectRelease();
    uint64_t v23 = Data.init(contentsOf:options:)();
    if (v1)
    {
      OUTLINED_FUNCTION_38_0();
      v25();
    }
    else
    {
      uint64_t v46 = v23;
      unint64_t v47 = v24;
      type metadata accessor for PropertyListDecoder();
      OUTLINED_FUNCTION_31_0();
      PropertyListDecoder.init()();
      if (one-time initialization token for sessionDirectory != -1) {
        swift_once();
      }
      uint64_t v39 = __swift_project_value_buffer(v9, (uint64_t)static CodingUserInfoKey.sessionDirectory);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v2, v39, v9);
      uint64_t v58 = v54;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v56);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(boxed_opaque_existential_0, v5, v54);
      uint64_t v41 = (void (*)(uint64_t *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
      specialized Dictionary.subscript.setter((uint64_t)&v56);
      v41(&v55, 0);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(v49, v53);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      uint64_t v42 = v52 + *(void *)(*(void *)v52 + 112);
      swift_beginAccess();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v51, v42, v53);
      swift_endAccess();
      uint64_t v43 = *(void *)(v52 + direct field offset for MLTrainingSession.delegate + 24);
      uint64_t v44 = *(void *)(v52 + direct field offset for MLTrainingSession.delegate + 32);
      __swift_project_boxed_opaque_existential_1((void *)(v52 + direct field offset for MLTrainingSession.delegate), v43);
      LOBYTE(v56) = *(unsigned char *)(v42 + *(int *)(v50 + 28));
      (*(void (**)(uint64_t, id *, uint64_t))(*(void *)(v44 + 8) + 16))(v5, &v56, v43);
      OUTLINED_FUNCTION_25_0();
      v45();
      swift_release();

      outlined consume of Data._Representation(v46, v47);
    }
  }
  else
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96();
    long long v57 = v26;
    v27._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 39;
    v28._id object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    v30._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v30._id object = v57;
    log(_:type:)(v30, v29);
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v31);
    uint64_t v33 = v32;
    id v56 = 0;
    int v34 = objc_msgSend(v15, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v32, 1, 0, &v56);

    if (v34)
    {
      id v35 = v56;
      specialized MLTrainingSession.save()();
      OUTLINED_FUNCTION_38_0();
      v36();
    }
    else
    {
      id v37 = v56;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      OUTLINED_FUNCTION_38_0();
      v38();
    }
  }
  OUTLINED_FUNCTION_8_1();
}

void specialized MLTrainingSession.save()()
{
}

{
  specialized MLTrainingSession.save()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_0;
  void (*v32)(uint64_t *, void);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[4];

  OUTLINED_FUNCTION_9_0();
  uint64_t v49 = v4;
  uint64_t v5 = v0;
  uint64_t v52 = v6;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(v6);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_47(v8, v46);
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  OUTLINED_FUNCTION_0();
  uint64_t v48 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_22_0();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for MLTrainingSessionParameters();
  unsigned int v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_60();
  Swift::String v19 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  os_log_type_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_33();
  long long v25 = v23 - v24;
  MEMORY[0x270FA5388](v26);
  Swift::String v28 = (char *)&v46 - v27;
  uint64_t v53 = v5;
  outlined init with copy of MLTrainingSessionParameters(v5 + direct field offset for MLTrainingSession.parameters, v2, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  outlined init with take of URL?(v2, v16);
  if (__swift_getEnumTagSinglePayload(v16, 1, v19) == 1)
  {
    outlined destroy of URL?(v16, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v28, v16, v19);
    unint64_t v47 = v25;
    OUTLINED_FUNCTION_59();
    URL.appendingPathComponent(_:)();
    type metadata accessor for PropertyListEncoder();
    OUTLINED_FUNCTION_31_0();
    PropertyListEncoder.init()();
    os_log_type_t v29 = v21;
    if (one-time initialization token for sessionDirectory != -1) {
      swift_once();
    }
    Swift::String v30 = __swift_project_value_buffer(v9, (uint64_t)static CodingUserInfoKey.sessionDirectory);
    (*((void (**)(uint64_t, uint64_t, uint64_t))v48 + 2))(v3, v30, v9);
    v55[3] = v19;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v55);
    (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(boxed_opaque_existential_0, v28, v19);
    uint64_t v48 = v28;
    unint64_t v32 = (void (*)(uint64_t *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)v55);
    v32(&v54, 0);
    uint64_t v33 = v53;
    int v34 = v53 + *(void *)(*(void *)v53 + 112);
    OUTLINED_FUNCTION_53();
    uint64_t v36 = v51;
    id v35 = v52;
    outlined init with copy of URL?(v34, v51, v52);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(v49, v35);
    id v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v1)
    {
      swift_release();
      outlined destroy of URL?(v36, v35);
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v39(v47, v19);
      v39((uint64_t)v48, v19);
    }
    else
    {
      uint64_t v40 = v37;
      uint64_t v41 = v38;
      outlined destroy of URL?(v36, v35);
      Data.write(to:options:)();
      uint64_t v42 = v29;
      uint64_t v43 = *(void *)(v33 + direct field offset for MLTrainingSession.delegate + 24);
      uint64_t v44 = *(void *)(v33 + direct field offset for MLTrainingSession.delegate + 32);
      __swift_project_boxed_opaque_existential_1((void *)(v33 + direct field offset for MLTrainingSession.delegate), v43);
      (*(void (**)(char *, uint64_t))(*(void *)(v44 + 8) + 8))(v48, v43);
      outlined consume of Data._Representation(v40, v41);
      swift_release();
      id v45 = *(void (**)(void))(v42 + 8);
      OUTLINED_FUNCTION_38_0();
      v45();
      OUTLINED_FUNCTION_38_0();
      v45();
    }
  }
  OUTLINED_FUNCTION_8_1();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

uint64_t sub_22705F66C()
{
  uint64_t v1 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_1(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 32), *(unsigned char *)(v0 + 40));
  uint64_t v7 = v0 + v4;
  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        uint64_t v10 = *(void (**)(void))(v9 + 8);
        OUTLINED_FUNCTION_38_0();
        v10();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        OUTLINED_FUNCTION_38_0();
        v10();
        OUTLINED_FUNCTION_89();
        goto LABEL_9;
      case 1u:
      case 2u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_25_0();
        v8();
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v7, *(unsigned char *)(v7 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v7, *(unsigned char *)(v7 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_25_0();
        v11();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        goto LABEL_9;
      case 6u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_25_0();
        v12();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        OUTLINED_FUNCTION_89();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }

  return MEMORY[0x270FA0238](v0, v4 + v6, v3 | 7);
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)()
{
  uint64_t v2 = OUTLINED_FUNCTION_114();
  uint64_t v3 = type metadata accessor for MLHandPoseClassifier.ModelParameters(v2);
  OUTLINED_FUNCTION_39_0(v3);
  uint64_t v5 = *(void **)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  uint64_t v7 = *(void **)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 40);
  uint64_t v9 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_7_1(v10);
  *uint64_t v11 = v12;
  v11[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(v0, v5, v6, v7, v8, v9);
}

void specialized _copyCollectionToContiguousArray<A>(_:)()
{
  OUTLINED_FUNCTION_18_0();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v1 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_23_0(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_29_0();
    if (!v7) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_18_0();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v1 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_23_0(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_29_0();
    if (!v7) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  char v3;

  OUTLINED_FUNCTION_18_0();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v1 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_23_0(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_29_0();
    if (!v3) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  void *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_92();
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v0)
  {
    OUTLINED_FUNCTION_51();
    if (!(v6 ^ v4 | v5))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      char v7 = (void *)OUTLINED_FUNCTION_28_0();
      _swift_stdlib_malloc_size(v7);
      OUTLINED_FUNCTION_86();
      v7[2] = v0;
      v7[3] = v8;
    }
    if (v3 != v1)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v2 + 8 * v1, v0);
      return;
    }
    goto LABEL_9;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  const void *v7;
  size_t v8;

  OUTLINED_FUNCTION_92();
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v0)
  {
    OUTLINED_FUNCTION_51();
    if (!(v6 ^ v4 | v5))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      char v7 = (const void *)OUTLINED_FUNCTION_28_0();
      char v8 = _swift_stdlib_malloc_size(v7);
      OUTLINED_FUNCTION_87(v8);
    }
    if (v3 != v1)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v2 + 8 * v1, v0);
      return;
    }
    goto LABEL_9;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_92();
  if (v5)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v0)
  {
    OUTLINED_FUNCTION_51();
    if (v6 ^ v5 | v12) {
      goto LABEL_11;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NeuralNetwork.Layer>);
    OUTLINED_FUNCTION_93();
    char v7 = type metadata accessor for NeuralNetwork.Layer();
    OUTLINED_FUNCTION_1(v7);
    uint64_t v9 = *(void *)(v8 + 72);
    uint64_t v10 = (void *)OUTLINED_FUNCTION_58();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    if (v9)
    {
      uint64_t v12 = v11 - v4 == 0x8000000000000000 && v9 == -1;
      if (!v12)
      {
        v10[2] = v0;
        v10[3] = 2 * ((uint64_t)(v11 - v4) / v9);
LABEL_11:
        if (v3 != v1)
        {
          uint64_t v13 = type metadata accessor for NeuralNetwork.Layer();
          OUTLINED_FUNCTION_1(v13);
          specialized UnsafeMutablePointer.initialize(from:count:)(v2 + *(void *)(v14 + 72) * v1, v0);
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_92();
  if (v5)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v0)
  {
    OUTLINED_FUNCTION_51();
    if (v6 ^ v5 | v12) {
      goto LABEL_11;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<URL, String>>);
    char v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    OUTLINED_FUNCTION_1(v7);
    uint64_t v9 = *(void *)(v8 + 72);
    uint64_t v10 = (void *)OUTLINED_FUNCTION_58();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    if (v9)
    {
      uint64_t v12 = v11 - v4 == 0x8000000000000000 && v9 == -1;
      if (!v12)
      {
        v10[2] = v0;
        v10[3] = 2 * ((uint64_t)(v11 - v4) / v9);
LABEL_11:
        if (v3 != v1)
        {
          uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
          OUTLINED_FUNCTION_1(v13);
          specialized UnsafeMutablePointer.initialize(from:count:)(v2 + *(void *)(v14 + 72) * v1, v0);
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = CMLDictionary.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  if (!v3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = v3;
  if (v3 <= 0)
  {
    uint64_t v5 = (const void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CMLFeatureValue, CMLFeatureValue)>);
    uint64_t v5 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_83(v6 - 32);
  }
  uint64_t v7 = OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_81(v7, v8, v9, v10, v11, v12, v13, v14, v16);
  specialized Sequence._copySequenceContents(initializing:)();
  uint64_t result = OUTLINED_FUNCTION_76();
  if (a1 == v4) {
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  uint64_t v3 = CMLSequence.size.getter();
  uint64_t v4 = OUTLINED_FUNCTION_12_0(v3);
  swift_release();
  swift_retain();
  uint64_t v5 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_12_0(v5);
  uint64_t result = OUTLINED_FUNCTION_74();
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v7 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_12_0(v7);
    uint64_t result = OUTLINED_FUNCTION_74();
    if ((v4 & 0x8000000000000000) == 0 && v1 >= v4)
    {
      if (v4)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v8 = (const void *)OUTLINED_FUNCTION_28_0();
        uint64_t v9 = _swift_stdlib_malloc_size(v8);
        OUTLINED_FUNCTION_83(v9 - 32);
        uint64_t v10 = OUTLINED_FUNCTION_80();
        OUTLINED_FUNCTION_52(v10, v11, v12, v13, v14, v15, v16, v17, v18);
        specialized Sequence._copySequenceContents(initializing:)();
        OUTLINED_FUNCTION_76();
        if (a1 == v4) {
          return (uint64_t)v8;
        }
        __break(1u);
      }
      return MEMORY[0x263F8EE78];
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_0(v2);
  if (!v3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = v3;
  if (v3 <= 0)
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = (void *)OUTLINED_FUNCTION_28_0();
    _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_86();
    v5[2] = v4;
    v5[3] = v6;
  }
  uint64_t v7 = OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_81(v7, v8, v9, v10, v11, v12, v13, v14, v16);
  specialized Sequence._copySequenceContents(initializing:)();
  uint64_t result = OUTLINED_FUNCTION_76();
  if (a1 == v4) {
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: MLDataValue, value: MLDataValue)>);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_79();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v13 = OUTLINED_FUNCTION_81(v5, v6, v7, v8, v9, v10, v11, v12, v19);
  specialized Sequence._copySequenceContents(initializing:)((uint64_t)v13, v14, v15, a1);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v20, v21, v22);
  if (v17 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

#error "22705FCD0: call analysis failed (funcsize=42)"

void specialized _copyCollectionToContiguousArray<A>(_:)(void *a1, char a2)
{
  char v3 = a2 & 1;
  id v9 = a1;
  char v10 = a2 & 1;
  MLDataTable.size.getter();
  uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)();
  if (v4)
  {
    uint64_t v5 = v4;
    if (v4 <= 0)
    {
      uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataTable.Row>);
      uint64_t v6 = (void *)swift_allocObject();
      size_t v7 = _swift_stdlib_malloc_size(v6);
      v6[2] = v5;
      v6[3] = 2 * ((uint64_t)(v7 - 32) / 24);
    }
    outlined copy of Result<_DataTable, Error>(a1, v3);
    uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v9, (uint64_t)(v6 + 4), v5, (uint64_t)a1, v3);
    outlined consume of Result<_DataTable, Error>(v9, v10);
    if (v8 != v5) {
      __break(1u);
    }
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = OUTLINED_FUNCTION_12_0(v6);
  swift_retain();
  uint64_t v8 = CMLSequence.size.getter();
  uint64_t v9 = OUTLINED_FUNCTION_12_0(v8);
  uint64_t result = swift_release();
  if (v9 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v11 = CMLSequence.size.getter();
    uint64_t v12 = OUTLINED_FUNCTION_12_0(v11);
    uint64_t result = swift_release_n();
    if ((v7 & 0x8000000000000000) == 0 && v12 >= v7)
    {
      if (v7)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValue)>);
        uint64_t v13 = (void *)swift_allocObject();
        size_t v14 = _swift_stdlib_malloc_size(v13);
        v13[2] = v7;
        v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)(&v16, (uint64_t)(v13 + 4), v7, a1, a2, a3);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        if (v15 == v7) {
          return (uint64_t)v13;
        }
        __break(1u);
      }
      return MEMORY[0x263F8EE78];
    }
  }
  __break(1u);
  return result;
}

#error "22705FFF0: call analysis failed (funcsize=52)"

uint64_t outlined init with take of MLHandPoseClassifier.ModelParameters(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_227060210()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for MLHandActionClassifier();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v6 = v1 + v4;
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v7 = v1 + v4 + v2[7];
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v9 = type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v11(v7, v9);
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v11(v7 + *(int *)(v12 + 48), v9);
        uint64_t v4 = (v3 + 16) & ~v3;
        OUTLINED_FUNCTION_43_0();
        OUTLINED_FUNCTION_43_0();
        OUTLINED_FUNCTION_43_0();
        goto LABEL_9;
      case 1u:
      case 2u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_25_0();
        v8();
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v7, *(unsigned char *)(v7 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v7, *(unsigned char *)(v7 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_25_0();
        v13();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_43_0();
        OUTLINED_FUNCTION_43_0();
        goto LABEL_9;
      case 6u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_25_0();
        v14();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        OUTLINED_FUNCTION_43_0();
        OUTLINED_FUNCTION_43_0();
        OUTLINED_FUNCTION_43_0();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  uint64_t v15 = (id *)(v6 + v2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      type metadata accessor for MLClassifierMetrics.Precomputed(0);
      type metadata accessor for DataFrame();
      uint64_t v31 = v5;
      OUTLINED_FUNCTION_8();
      uint64_t v19 = *(void (**)(void))(v18 + 8);
      OUTLINED_FUNCTION_38_0();
      v19();
      OUTLINED_FUNCTION_38_0();
      v19();
      uint64_t v5 = v31;
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v17 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v17 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      __swift_instantiateConcreteTypeFromMangledName(v17);
      OUTLINED_FUNCTION_8();
      (*(void (**)(id *))(v20 + 8))(v15);
      break;
  }
  uint64_t v21 = (id *)(v6 + v2[9]);
  int v22 = swift_getEnumCaseMultiPayload();
  switch(v22)
  {
    case 2:

      break;
    case 1:
      uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      long long v25 = (char *)v21 + *(int *)(v24 + 20);
      uint64_t v26 = type metadata accessor for DataFrame();
      uint64_t v27 = v5;
      Swift::String v28 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      v28(v25, v26);
      v28((char *)v21 + *(int *)(v24 + 24), v26);
      uint64_t v5 = v27;
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      __swift_instantiateConcreteTypeFromMangledName(v23);
      OUTLINED_FUNCTION_8();
      (*(void (**)(id *))(v29 + 8))(v21);
      break;
  }

  return MEMORY[0x270FA0238](v1, v4 + v5, v3 | 7);
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_114();
  uint64_t v2 = type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_1(v5);
  *uint64_t v6 = v7;
  v6[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLHandPoseClassifier.init(checkpoint:)(v0, v4);
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in MLHandPoseClassifier.predictions(from:)(a1, *(void *)(v3 + 16), a2, a3);
}

void *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
    return v6;
  }
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = (void *)a2[2];
  a1[1] = a2[1];
  a1[2] = v7;
  uint64_t v8 = (int *)type metadata accessor for MLHandActionClassifier();
  uint64_t v9 = v8[7];
  uint64_t v10 = (char *)v6 + v9;
  uint64_t v11 = (char *)v5 + v9;
  uint64_t v12 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain();
  swift_retain();
  id v13 = v7;
  v197 = v5;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v14 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v10, v11, v14);
        goto LABEL_15;
      case 3u:
        id v34 = *(id *)v11;
        char v35 = v11[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v11, v35);
        *(void *)uint64_t v10 = v34;
        v10[8] = v35;
        uint64_t v36 = *((void *)v11 + 3);
        *((void *)v10 + 2) = *((void *)v11 + 2);
        *((void *)v10 + 3) = v36;
        uint64_t v37 = *((void *)v11 + 5);
        *((void *)v10 + 4) = *((void *)v11 + 4);
        *((void *)v10 + 5) = v37;
        uint64_t v38 = *((void *)v11 + 7);
        *((void *)v10 + 6) = *((void *)v11 + 6);
        *((void *)v10 + 7) = v38;
        goto LABEL_11;
      case 4u:
        id v39 = *(id *)v11;
        char v40 = v11[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v11, v40);
        *(void *)uint64_t v10 = v39;
        v10[8] = v40;
        uint64_t v41 = *((void *)v11 + 3);
        *((void *)v10 + 2) = *((void *)v11 + 2);
        *((void *)v10 + 3) = v41;
        uint64_t v42 = *((void *)v11 + 5);
        *((void *)v10 + 4) = *((void *)v11 + 4);
        *((void *)v10 + 5) = v42;
        uint64_t v43 = *((void *)v11 + 7);
        *((void *)v10 + 6) = *((void *)v11 + 6);
        *((void *)v10 + 7) = v43;
        uint64_t v44 = *((void *)v11 + 9);
        *((void *)v10 + 8) = *((void *)v11 + 8);
        *((void *)v10 + 9) = v44;
        goto LABEL_13;
      case 5u:
        uint64_t v45 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v10, v11, v45);
        uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v47 = v46[12];
        uint64_t v48 = &v10[v47];
        uint64_t v49 = &v11[v47];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        *(void *)uint64_t v48 = v51;
        *((void *)v48 + 1) = v50;
        uint64_t v52 = v46[16];
        uint64_t v53 = &v10[v52];
        uint64_t v54 = &v11[v52];
        uint64_t v55 = *((void *)v54 + 1);
        *(void *)uint64_t v53 = *(void *)v54;
        *((void *)v53 + 1) = v55;
        uint64_t v56 = v46[20];
        long long v57 = &v10[v56];
        uint64_t v58 = &v11[v56];
        uint64_t v59 = *((void *)v58 + 1);
        *(void *)long long v57 = *(void *)v58;
        *((void *)v57 + 1) = v59;
LABEL_11:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v60 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v10, v11, v60);
        uint64_t v61 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v62 = v61[12];
        uint64_t v63 = &v10[v62];
        uint64_t v64 = &v11[v62];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        *(void *)uint64_t v63 = v66;
        *((void *)v63 + 1) = v65;
        uint64_t v67 = v61[16];
        uint64_t v68 = &v10[v67];
        uint64_t v69 = &v11[v67];
        uint64_t v70 = *((void *)v69 + 1);
        *(void *)uint64_t v68 = *(void *)v69;
        *((void *)v68 + 1) = v70;
        uint64_t v71 = v61[20];
        uint64_t v72 = &v10[v71];
        uint64_t v73 = &v11[v71];
        uint64_t v74 = *((void *)v73 + 1);
        *(void *)uint64_t v72 = *(void *)v73;
        *((void *)v72 + 1) = v74;
        uint64_t v75 = v61[24];
        uint64_t v76 = &v10[v75];
        uint64_t v77 = &v11[v75];
        uint64_t v78 = *((void *)v77 + 1);
        *(void *)uint64_t v76 = *(void *)v77;
        *((void *)v76 + 1) = v78;
LABEL_13:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v5 = v197;
        break;
      default:
        uint64_t v15 = type metadata accessor for URL();
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
        v16(v10, v11, v15);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v16(&v10[v17[12]], &v11[v17[12]], v15);
        uint64_t v18 = v17[16];
        uint64_t v19 = &v10[v18];
        uint64_t v20 = &v11[v18];
        uint64_t v21 = *((void *)v20 + 1);
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = v21;
        uint64_t v22 = v17[20];
        uint64_t v23 = &v10[v22];
        uint64_t v24 = &v11[v22];
        uint64_t v25 = *((void *)v24 + 1);
        *(void *)uint64_t v23 = *(void *)v24;
        *((void *)v23 + 1) = v25;
        uint64_t v26 = v17[24];
        uint64_t v27 = &v10[v26];
        Swift::String v28 = &v11[v26];
        uint64_t v29 = *((void *)v28 + 1);
        *(void *)uint64_t v27 = *(void *)v28;
        *((void *)v27 + 1) = v29;
        uint64_t v30 = v17[28];
        uint64_t v31 = &v10[v30];
        unint64_t v32 = &v11[v30];
        uint64_t v33 = *((void *)v32 + 1);
        *(void *)uint64_t v31 = *(void *)v32;
        *((void *)v31 + 1) = v33;
        swift_bridgeObjectRetain();
        uint64_t v5 = v197;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_bridgeObjectRetain();
LABEL_15:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v79 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v10[v79[5]] = *(void *)&v11[v79[5]];
  *(void *)&v10[v79[6]] = *(void *)&v11[v79[6]];
  *(void *)&v10[v79[7]] = *(void *)&v11[v79[7]];
  *(void *)&v10[v79[8]] = *(void *)&v11[v79[8]];
  *(void *)&v10[v79[10]] = *(void *)&v11[v79[10]];
  uint64_t v80 = v8[8];
  uint64_t v81 = (id *)((char *)v6 + v80);
  uint64_t v82 = (id *)((char *)v5 + v80);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    id v91 = *v82;
    id v92 = *v82;
    *uint64_t v81 = v91;
    goto LABEL_20;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v81 = *v82;
    uint64_t v84 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v85 = *(int *)(v84 + 20);
    uint64_t v86 = (char *)v81 + v85;
    uint64_t v87 = (char *)v82 + v85;
    uint64_t v88 = type metadata accessor for DataFrame();
    id v89 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16);
    unsigned __int8 v90 = v86;
    uint64_t v5 = v197;
    v89(v90, v87, v88);
    v89((char *)v81 + *(int *)(v84 + 24), (char *)v82 + *(int *)(v84 + 24), v88);
LABEL_20:
    uint64_t v93 = a3;
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v94 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  }
  else {
    v94 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  }
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(v94);
  (*(void (**)(id *, id *, uint64_t))(*(void *)(v95 - 8) + 16))(v81, v82, v95);
  swift_storeEnumTagMultiPayload();
  uint64_t v93 = a3;
  uint64_t v5 = v197;
LABEL_25:
  swift_storeEnumTagMultiPayload();
  uint64_t v96 = v8[9];
  v97 = (id *)((char *)v6 + v96);
  uint64_t v98 = (id *)((char *)v5 + v96);
  int v99 = swift_getEnumCaseMultiPayload();
  if (v99 == 2)
  {
    id v107 = *v98;
    id v108 = *v98;
    id *v97 = v107;
  }
  else if (v99 == 1)
  {
    id *v97 = *v98;
    uint64_t v100 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v101 = *(int *)(v100 + 20);
    uint64_t v102 = (char *)v97 + v101;
    uint64_t v103 = (char *)v98 + v101;
    uint64_t v104 = type metadata accessor for DataFrame();
    uint64_t v105 = *(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 16);
    v105(v102, v103, v104);
    uint64_t v106 = v104;
    uint64_t v5 = v197;
    v105((char *)v97 + *(int *)(v100 + 24), (char *)v98 + *(int *)(v100 + 24), v106);
    uint64_t v93 = a3;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v109 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v109 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(v109);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v110 - 8) + 16))(v97, v98, v110);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v111 = v93[5];
  uint64_t v112 = v93[6];
  uint64_t v113 = *(void **)((char *)v5 + v111);
  *(void *)((char *)v6 + v111) = v113;
  uint64_t v114 = (char *)v6 + v112;
  uint64_t v115 = (char *)v5 + v112;
  uint64_t v116 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  id v117 = v113;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v118 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 16))(v114, v115, v118);
        goto LABEL_45;
      case 3u:
        id v130 = *(id *)v115;
        char v131 = v115[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v115, v131);
        *(void *)uint64_t v114 = v130;
        v114[8] = v131;
        uint64_t v132 = *((void *)v115 + 3);
        *((void *)v114 + 2) = *((void *)v115 + 2);
        *((void *)v114 + 3) = v132;
        uint64_t v133 = *((void *)v115 + 5);
        *((void *)v114 + 4) = *((void *)v115 + 4);
        *((void *)v114 + 5) = v133;
        uint64_t v134 = *((void *)v115 + 7);
        *((void *)v114 + 6) = *((void *)v115 + 6);
        *((void *)v114 + 7) = v134;
        goto LABEL_41;
      case 4u:
        id v135 = *(id *)v115;
        char v136 = v115[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v115, v136);
        *(void *)uint64_t v114 = v135;
        v114[8] = v136;
        uint64_t v5 = v197;
        uint64_t v137 = *((void *)v115 + 3);
        *((void *)v114 + 2) = *((void *)v115 + 2);
        *((void *)v114 + 3) = v137;
        uint64_t v138 = *((void *)v115 + 5);
        *((void *)v114 + 4) = *((void *)v115 + 4);
        *((void *)v114 + 5) = v138;
        goto LABEL_43;
      case 5u:
        uint64_t v139 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v139 - 8) + 16))(v114, v115, v139);
        v140 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v141 = v140[12];
        v142 = &v114[v141];
        v143 = &v115[v141];
        uint64_t v145 = *(void *)v143;
        uint64_t v144 = *((void *)v143 + 1);
        *(void *)v142 = v145;
        *((void *)v142 + 1) = v144;
        uint64_t v146 = v140[16];
        v147 = &v114[v146];
        v148 = &v115[v146];
        uint64_t v149 = *((void *)v148 + 1);
        *(void *)v147 = *(void *)v148;
        *((void *)v147 + 1) = v149;
        uint64_t v150 = v140[20];
        v151 = &v114[v150];
        v152 = &v115[v150];
        uint64_t v153 = *((void *)v152 + 1);
        *(void *)v151 = *(void *)v152;
        *((void *)v151 + 1) = v153;
LABEL_41:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v5 = v197;
        goto LABEL_44;
      case 6u:
        uint64_t v154 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v154 - 8) + 16))(v114, v115, v154);
        uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v156 = *(int *)(v155 + 48);
        v157 = &v114[v156];
        v158 = &v115[v156];
        uint64_t v160 = *(void *)v158;
        uint64_t v159 = *((void *)v158 + 1);
        *(void *)v157 = v160;
        *((void *)v157 + 1) = v159;
        uint64_t v161 = *(int *)(v155 + 64);
        v162 = &v114[v161];
        v163 = &v115[v161];
        uint64_t v164 = *((void *)v163 + 1);
        *(void *)v162 = *(void *)v163;
        *((void *)v162 + 1) = v164;
        goto LABEL_43;
      default:
        uint64_t v119 = type metadata accessor for URL();
        v120 = *(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16);
        v120(v114, v115, v119);
        char v121 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v120(&v114[v121[12]], &v115[v121[12]], v119);
        uint64_t v122 = v121[16];
        v123 = &v114[v122];
        v124 = &v115[v122];
        uint64_t v125 = *((void *)v124 + 1);
        *(void *)v123 = *(void *)v124;
        *((void *)v123 + 1) = v125;
        uint64_t v126 = v121[20];
        uint64_t v93 = a3;
        uint64_t v5 = v197;
        v127 = &v114[v126];
        v128 = &v115[v126];
        uint64_t v129 = *((void *)v128 + 1);
        *(void *)v127 = *(void *)v128;
        *((void *)v127 + 1) = v129;
LABEL_43:
        swift_bridgeObjectRetain();
LABEL_44:
        swift_bridgeObjectRetain();
LABEL_45:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  else
  {
    memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
  }
  v165 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v114[v165[5]] = *(void *)&v115[v165[5]];
  *(void *)&v114[v165[6]] = *(void *)&v115[v165[6]];
  *(void *)&v114[v165[7]] = *(void *)&v115[v165[7]];
  uint64_t v166 = v93[7];
  v167 = (id *)((char *)v6 + v166);
  v168 = (id *)((char *)v5 + v166);
  int v169 = swift_getEnumCaseMultiPayload();
  if (v169 == 2)
  {
    id v177 = *v168;
    id v178 = *v168;
    id *v167 = v177;
  }
  else if (v169 == 1)
  {
    id *v167 = *v168;
    uint64_t v170 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v171 = *(int *)(v170 + 20);
    v172 = (char *)v167 + v171;
    v173 = (char *)v168 + v171;
    uint64_t v174 = type metadata accessor for DataFrame();
    v175 = *(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 16);
    v175(v172, v173, v174);
    uint64_t v176 = v174;
    uint64_t v5 = v197;
    v175((char *)v167 + *(int *)(v170 + 24), (char *)v168 + *(int *)(v170 + 24), v176);
    uint64_t v93 = a3;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v179 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      v179 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(v179);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v180 - 8) + 16))(v167, v168, v180);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v181 = v93[8];
  v182 = (void **)((char *)v6 + v181);
  v183 = (void **)((char *)v5 + v181);
  int v184 = swift_getEnumCaseMultiPayload();
  if (v184 == 2)
  {
    v191 = *v183;
    id v192 = v191;
    *v182 = v191;
  }
  else if (v184 == 1)
  {
    *v182 = *v183;
    uint64_t v185 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v186 = *(int *)(v185 + 20);
    v187 = (char *)v182 + v186;
    v188 = (char *)v183 + v186;
    uint64_t v189 = type metadata accessor for DataFrame();
    v190 = *(void (**)(char *, char *, uint64_t))(*(void *)(v189 - 8) + 16);
    v190(v187, v188, v189);
    v190((char *)v182 + *(int *)(v185 + 24), (char *)v183 + *(int *)(v185 + 24), v189);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v193 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      v193 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(v193);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v194 - 8) + 16))(v182, v183, v194);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v6;
}

void destroy for MLHandPoseClassifier(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v4 = (int *)type metadata accessor for MLHandActionClassifier();
  uint64_t v5 = a1 + v4[7];
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL();
        uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
        v8(v5, v7);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(v5 + *(int *)(v9 + 48), v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v5, *(unsigned char *)(v5 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v5, *(unsigned char *)(v5 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        uint64_t v10 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v5, v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 6u:
        uint64_t v11 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v5, v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  uint64_t v12 = (id *)(a1 + v4[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      uint64_t v15 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v16 = (char *)v12 + *(int *)(v15 + 20);
      uint64_t v17 = type metadata accessor for DataFrame();
      uint64_t v18 = *(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8);
      v18(v16, v17);
      v18((char *)v12 + *(int *)(v15 + 24), v17);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v14 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v14 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v14);
      (*(void (**)(id *, uint64_t))(*(void *)(v19 - 8) + 8))(v12, v19);
      break;
  }
  uint64_t v20 = (id *)(a1 + v4[9]);
  int v21 = swift_getEnumCaseMultiPayload();
  switch(v21)
  {
    case 2:

      break;
    case 1:
      uint64_t v23 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v24 = (char *)v20 + *(int *)(v23 + 20);
      uint64_t v25 = type metadata accessor for DataFrame();
      uint64_t v26 = *(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8);
      v26(v24, v25);
      v26((char *)v20 + *(int *)(v23 + 24), v25);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(v22);
      (*(void (**)(id *, uint64_t))(*(void *)(v27 - 8) + 8))(v20, v27);
      break;
  }

  uint64_t v28 = a1 + a2[6];
  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v30 = type metadata accessor for URL();
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8);
        v31(v28, v30);
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v31(v28 + *(int *)(v32 + 48), v30);
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 1u:
      case 2u:
        uint64_t v29 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v28, *(unsigned char *)(v28 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v28, *(unsigned char *)(v28 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 5u:
        uint64_t v33 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v28, v33);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 6u:
        uint64_t v34 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v28, v34);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease();
LABEL_36:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  char v35 = (id *)(a1 + a2[7]);
  int v36 = swift_getEnumCaseMultiPayload();
  switch(v36)
  {
    case 2:

      break;
    case 1:
      uint64_t v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      id v39 = (char *)v35 + *(int *)(v38 + 20);
      uint64_t v40 = type metadata accessor for DataFrame();
      uint64_t v41 = *(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8);
      v41(v39, v40);
      v41((char *)v35 + *(int *)(v38 + 24), v40);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v37 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v37 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v37);
      (*(void (**)(id *, uint64_t))(*(void *)(v42 - 8) + 8))(v35, v42);
      break;
  }
  uint64_t v43 = (void **)(a1 + a2[8]);
  int v44 = swift_getEnumCaseMultiPayload();
  if (v44 == 2)
  {
    uint64_t v46 = *v43;
  }
  else
  {
    if (v44 == 1)
    {
      uint64_t v47 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v48 = (char *)v43 + *(int *)(v47 + 20);
      uint64_t v49 = type metadata accessor for DataFrame();
      uint64_t v54 = *(void (**)(void **, uint64_t))(*(void *)(v49 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v54)((void *)(v49 - 8), v48, v49);
      uint64_t v50 = (void **)((char *)v43 + *(int *)(v47 + 24));
      uint64_t v51 = v49;
      uint64_t v52 = v54;
    }
    else
    {
      if (v44) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(v45);
      uint64_t v52 = *(void (**)(void **, uint64_t))(*(void *)(v53 - 8) + 8);
      uint64_t v51 = v53;
      uint64_t v50 = v43;
    }
    v52(v50, v51);
  }
}

void *initializeWithCopy for MLHandPoseClassifier(void *a1, void *a2, int *a3)
{
  int v3 = a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = (void *)a2[2];
  a1[2] = v6;
  uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier();
  uint64_t v8 = v7[7];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)v3 + v8;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain();
  swift_retain();
  id v12 = v6;
  v195 = v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
        goto LABEL_13;
      case 3u:
        id v33 = *(id *)v10;
        char v34 = v10[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v10, v34);
        *(void *)uint64_t v9 = v33;
        v9[8] = v34;
        uint64_t v35 = *((void *)v10 + 3);
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *((void *)v9 + 3) = v35;
        uint64_t v36 = *((void *)v10 + 5);
        *((void *)v9 + 4) = *((void *)v10 + 4);
        *((void *)v9 + 5) = v36;
        uint64_t v37 = *((void *)v10 + 7);
        *((void *)v9 + 6) = *((void *)v10 + 6);
        *((void *)v9 + 7) = v37;
        goto LABEL_9;
      case 4u:
        id v38 = *(id *)v10;
        char v39 = v10[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v10, v39);
        *(void *)uint64_t v9 = v38;
        v9[8] = v39;
        uint64_t v40 = *((void *)v10 + 3);
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *((void *)v9 + 3) = v40;
        uint64_t v41 = *((void *)v10 + 5);
        *((void *)v9 + 4) = *((void *)v10 + 4);
        *((void *)v9 + 5) = v41;
        uint64_t v42 = *((void *)v10 + 7);
        *((void *)v9 + 6) = *((void *)v10 + 6);
        *((void *)v9 + 7) = v42;
        uint64_t v43 = *((void *)v10 + 9);
        *((void *)v9 + 8) = *((void *)v10 + 8);
        *((void *)v9 + 9) = v43;
        goto LABEL_11;
      case 5u:
        uint64_t v44 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v9, v10, v44);
        uint64_t v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v46 = v45[12];
        uint64_t v47 = &v9[v46];
        uint64_t v48 = &v10[v46];
        uint64_t v50 = *(void *)v48;
        uint64_t v49 = *((void *)v48 + 1);
        *(void *)uint64_t v47 = v50;
        *((void *)v47 + 1) = v49;
        uint64_t v51 = v45[16];
        uint64_t v52 = &v9[v51];
        uint64_t v53 = &v10[v51];
        uint64_t v54 = *((void *)v53 + 1);
        *(void *)uint64_t v52 = *(void *)v53;
        *((void *)v52 + 1) = v54;
        uint64_t v55 = v45[20];
        uint64_t v56 = &v9[v55];
        long long v57 = &v10[v55];
        uint64_t v58 = *((void *)v57 + 1);
        *(void *)uint64_t v56 = *(void *)v57;
        *((void *)v56 + 1) = v58;
LABEL_9:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v59 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v9, v10, v59);
        uint64_t v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v61 = v60[12];
        uint64_t v62 = &v9[v61];
        uint64_t v63 = &v10[v61];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        *(void *)uint64_t v62 = v65;
        *((void *)v62 + 1) = v64;
        uint64_t v66 = v60[16];
        uint64_t v67 = &v9[v66];
        uint64_t v68 = &v10[v66];
        uint64_t v69 = *((void *)v68 + 1);
        *(void *)uint64_t v67 = *(void *)v68;
        *((void *)v67 + 1) = v69;
        uint64_t v70 = v60[20];
        uint64_t v71 = &v9[v70];
        uint64_t v72 = &v10[v70];
        uint64_t v73 = *((void *)v72 + 1);
        *(void *)uint64_t v71 = *(void *)v72;
        *((void *)v71 + 1) = v73;
        uint64_t v74 = v60[24];
        uint64_t v75 = &v9[v74];
        uint64_t v76 = &v10[v74];
        uint64_t v77 = *((void *)v76 + 1);
        *(void *)uint64_t v75 = *(void *)v76;
        *((void *)v75 + 1) = v77;
LABEL_11:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int v3 = v195;
        break;
      default:
        uint64_t v14 = type metadata accessor for URL();
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        v15(v9, v10, v14);
        uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v15(&v9[v16[12]], &v10[v16[12]], v14);
        uint64_t v17 = v16[16];
        uint64_t v18 = &v9[v17];
        uint64_t v19 = &v10[v17];
        uint64_t v20 = *((void *)v19 + 1);
        *(void *)uint64_t v18 = *(void *)v19;
        *((void *)v18 + 1) = v20;
        uint64_t v21 = v16[20];
        uint64_t v22 = &v9[v21];
        uint64_t v23 = &v10[v21];
        uint64_t v24 = *((void *)v23 + 1);
        *(void *)uint64_t v22 = *(void *)v23;
        *((void *)v22 + 1) = v24;
        uint64_t v25 = v16[24];
        uint64_t v26 = &v9[v25];
        uint64_t v27 = &v10[v25];
        uint64_t v28 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v28;
        uint64_t v29 = v16[28];
        uint64_t v30 = &v9[v29];
        uint64_t v31 = &v10[v29];
        uint64_t v32 = *((void *)v31 + 1);
        *(void *)uint64_t v30 = *(void *)v31;
        *((void *)v30 + 1) = v32;
        swift_bridgeObjectRetain();
        int v3 = v195;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_bridgeObjectRetain();
LABEL_13:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v78 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v9[v78[5]] = *(void *)&v10[v78[5]];
  *(void *)&v9[v78[6]] = *(void *)&v10[v78[6]];
  *(void *)&v9[v78[7]] = *(void *)&v10[v78[7]];
  *(void *)&v9[v78[8]] = *(void *)&v10[v78[8]];
  *(void *)&v9[v78[10]] = *(void *)&v10[v78[10]];
  uint64_t v79 = v7[8];
  uint64_t v80 = (id *)((char *)a1 + v79);
  uint64_t v81 = (id *)((char *)v3 + v79);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    id v91 = *v81;
    id v92 = *v81;
    *uint64_t v80 = v91;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v80 = *v81;
    uint64_t v83 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v84 = *(int *)(v83 + 20);
    uint64_t v85 = (char *)v80 + v84;
    uint64_t v86 = (char *)v81 + v84;
    uint64_t v87 = type metadata accessor for DataFrame();
    uint64_t v88 = v7;
    id v89 = *(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16);
    unsigned __int8 v90 = v85;
    int v3 = v195;
    v89(v90, v86, v87);
    v89((char *)v80 + *(int *)(v83 + 24), (char *)v81 + *(int *)(v83 + 24), v87);
    uint64_t v7 = v88;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v93 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v93 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(v93);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v94 - 8) + 16))(v80, v81, v94);
    swift_storeEnumTagMultiPayload();
    int v3 = v195;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v95 = v7[9];
  uint64_t v96 = (id *)((char *)a1 + v95);
  v97 = (id *)((char *)v3 + v95);
  int v98 = swift_getEnumCaseMultiPayload();
  if (v98 == 2)
  {
    id v106 = *v97;
    id v107 = *v97;
    *uint64_t v96 = v106;
  }
  else if (v98 == 1)
  {
    *uint64_t v96 = *v97;
    uint64_t v99 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v100 = *(int *)(v99 + 20);
    uint64_t v101 = (char *)v96 + v100;
    uint64_t v102 = (char *)v97 + v100;
    uint64_t v103 = type metadata accessor for DataFrame();
    uint64_t v104 = *(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 16);
    v104(v101, v102, v103);
    uint64_t v105 = v103;
    int v3 = v195;
    v104((char *)v96 + *(int *)(v99 + 24), (char *)v97 + *(int *)(v99 + 24), v105);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      id v108 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      id v108 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(v108);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v109 - 8) + 16))(v96, v97, v109);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v110 = a3[5];
  uint64_t v111 = a3[6];
  uint64_t v112 = *(void **)((char *)v3 + v110);
  *(void *)((char *)a1 + v110) = v112;
  uint64_t v113 = (char *)a1 + v111;
  uint64_t v114 = (char *)v3 + v111;
  uint64_t v115 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  id v116 = v112;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v117 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v117 - 8) + 16))(v113, v114, v117);
        goto LABEL_42;
      case 3u:
        id v129 = *(id *)v114;
        char v130 = v114[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v114, v130);
        *(void *)uint64_t v113 = v129;
        v113[8] = v130;
        uint64_t v131 = *((void *)v114 + 3);
        *((void *)v113 + 2) = *((void *)v114 + 2);
        *((void *)v113 + 3) = v131;
        uint64_t v132 = *((void *)v114 + 5);
        *((void *)v113 + 4) = *((void *)v114 + 4);
        *((void *)v113 + 5) = v132;
        uint64_t v133 = *((void *)v114 + 7);
        *((void *)v113 + 6) = *((void *)v114 + 6);
        *((void *)v113 + 7) = v133;
        goto LABEL_38;
      case 4u:
        id v134 = *(id *)v114;
        char v135 = v114[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v114, v135);
        *(void *)uint64_t v113 = v134;
        v113[8] = v135;
        int v3 = v195;
        uint64_t v136 = *((void *)v114 + 3);
        *((void *)v113 + 2) = *((void *)v114 + 2);
        *((void *)v113 + 3) = v136;
        uint64_t v137 = *((void *)v114 + 5);
        *((void *)v113 + 4) = *((void *)v114 + 4);
        *((void *)v113 + 5) = v137;
        goto LABEL_40;
      case 5u:
        uint64_t v138 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v113, v114, v138);
        uint64_t v139 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v140 = v139[12];
        uint64_t v141 = &v113[v140];
        v142 = &v114[v140];
        uint64_t v144 = *(void *)v142;
        uint64_t v143 = *((void *)v142 + 1);
        *(void *)uint64_t v141 = v144;
        *((void *)v141 + 1) = v143;
        uint64_t v145 = v139[16];
        uint64_t v146 = &v113[v145];
        v147 = &v114[v145];
        uint64_t v148 = *((void *)v147 + 1);
        *(void *)uint64_t v146 = *(void *)v147;
        *((void *)v146 + 1) = v148;
        uint64_t v149 = v139[20];
        uint64_t v150 = &v113[v149];
        v151 = &v114[v149];
        uint64_t v152 = *((void *)v151 + 1);
        *(void *)uint64_t v150 = *(void *)v151;
        *((void *)v150 + 1) = v152;
LABEL_38:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int v3 = v195;
        goto LABEL_41;
      case 6u:
        uint64_t v153 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 16))(v113, v114, v153);
        uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v155 = *(int *)(v154 + 48);
        uint64_t v156 = &v113[v155];
        v157 = &v114[v155];
        uint64_t v159 = *(void *)v157;
        uint64_t v158 = *((void *)v157 + 1);
        *(void *)uint64_t v156 = v159;
        *((void *)v156 + 1) = v158;
        uint64_t v160 = *(int *)(v154 + 64);
        uint64_t v161 = &v113[v160];
        v162 = &v114[v160];
        uint64_t v163 = *((void *)v162 + 1);
        *(void *)uint64_t v161 = *(void *)v162;
        *((void *)v161 + 1) = v163;
        goto LABEL_40;
      default:
        uint64_t v118 = type metadata accessor for URL();
        uint64_t v119 = *(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 16);
        v119(v113, v114, v118);
        v120 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v119(&v113[v120[12]], &v114[v120[12]], v118);
        uint64_t v121 = v120[16];
        uint64_t v122 = &v113[v121];
        v123 = &v114[v121];
        uint64_t v124 = *((void *)v123 + 1);
        *(void *)uint64_t v122 = *(void *)v123;
        *((void *)v122 + 1) = v124;
        uint64_t v125 = v120[20];
        int v3 = v195;
        uint64_t v126 = &v113[v125];
        v127 = &v114[v125];
        uint64_t v128 = *((void *)v127 + 1);
        *(void *)uint64_t v126 = *(void *)v127;
        *((void *)v126 + 1) = v128;
LABEL_40:
        swift_bridgeObjectRetain();
LABEL_41:
        swift_bridgeObjectRetain();
LABEL_42:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  else
  {
    memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
  }
  uint64_t v164 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v113[v164[5]] = *(void *)&v114[v164[5]];
  *(void *)&v113[v164[6]] = *(void *)&v114[v164[6]];
  *(void *)&v113[v164[7]] = *(void *)&v114[v164[7]];
  uint64_t v165 = a3[7];
  uint64_t v166 = (id *)((char *)a1 + v165);
  v167 = (id *)((char *)v3 + v165);
  int v168 = swift_getEnumCaseMultiPayload();
  if (v168 == 2)
  {
    id v176 = *v167;
    id v177 = *v167;
    *uint64_t v166 = v176;
  }
  else if (v168 == 1)
  {
    *uint64_t v166 = *v167;
    uint64_t v169 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v170 = *(int *)(v169 + 20);
    uint64_t v171 = (char *)v166 + v170;
    v172 = (char *)v167 + v170;
    uint64_t v173 = type metadata accessor for DataFrame();
    uint64_t v174 = *(void (**)(char *, char *, uint64_t))(*(void *)(v173 - 8) + 16);
    v174(v171, v172, v173);
    uint64_t v175 = v173;
    int v3 = v195;
    v174((char *)v166 + *(int *)(v169 + 24), (char *)v167 + *(int *)(v169 + 24), v175);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      id v178 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      id v178 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(v178);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v179 - 8) + 16))(v166, v167, v179);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v180 = a3[8];
  uint64_t v181 = (void **)((char *)a1 + v180);
  v182 = (void **)((char *)v3 + v180);
  int v183 = swift_getEnumCaseMultiPayload();
  if (v183 == 2)
  {
    v190 = *v182;
    id v191 = v190;
    *uint64_t v181 = v190;
  }
  else if (v183 == 1)
  {
    *uint64_t v181 = *v182;
    uint64_t v184 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v185 = *(int *)(v184 + 20);
    uint64_t v186 = (char *)v181 + v185;
    v187 = (char *)v182 + v185;
    uint64_t v188 = type metadata accessor for DataFrame();
    uint64_t v189 = *(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 16);
    v189(v186, v187, v188);
    v189((char *)v181 + *(int *)(v184 + 24), (char *)v182 + *(int *)(v184 + 24), v188);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      id v192 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      id v192 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(v192);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v193 - 8) + 16))(v181, v182, v193);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MLHandPoseClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  uint64_t v9 = (int *)type metadata accessor for MLHandActionClassifier();
  uint64_t v10 = v9[7];
  uint64_t v11 = (char *)a1 + v10;
  id v12 = (char *)a2 + v10;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    uint64_t v13 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v14 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v11, v12, v14);
          goto LABEL_14;
        case 3u:
          id v30 = *(id *)v12;
          char v31 = v12[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v12, v31);
          *(void *)uint64_t v11 = v30;
          v11[8] = v31;
          *((void *)v11 + 2) = *((void *)v12 + 2);
          *((void *)v11 + 3) = *((void *)v12 + 3);
          *((void *)v11 + 4) = *((void *)v12 + 4);
          *((void *)v11 + 5) = *((void *)v12 + 5);
          *((void *)v11 + 6) = *((void *)v12 + 6);
          *((void *)v11 + 7) = *((void *)v12 + 7);
          goto LABEL_10;
        case 4u:
          id v32 = *(id *)v12;
          char v33 = v12[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v12, v33);
          *(void *)uint64_t v11 = v32;
          v11[8] = v33;
          *((void *)v11 + 2) = *((void *)v12 + 2);
          *((void *)v11 + 3) = *((void *)v12 + 3);
          *((void *)v11 + 4) = *((void *)v12 + 4);
          *((void *)v11 + 5) = *((void *)v12 + 5);
          *((void *)v11 + 6) = *((void *)v12 + 6);
          *((void *)v11 + 7) = *((void *)v12 + 7);
          *((void *)v11 + 8) = *((void *)v12 + 8);
          char v34 = a3;
          *((void *)v11 + 9) = *((void *)v12 + 9);
          goto LABEL_12;
        case 5u:
          uint64_t v35 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v11, v12, v35);
          uint64_t v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v37 = v36[12];
          id v38 = &v11[v37];
          char v39 = &v12[v37];
          *(void *)id v38 = *(void *)v39;
          *((void *)v38 + 1) = *((void *)v39 + 1);
          uint64_t v40 = v36[16];
          uint64_t v41 = &v11[v40];
          uint64_t v42 = &v12[v40];
          *(void *)uint64_t v41 = *(void *)v42;
          *((void *)v41 + 1) = *((void *)v42 + 1);
          uint64_t v43 = v36[20];
          uint64_t v44 = &v11[v43];
          uint64_t v45 = &v12[v43];
          *(void *)uint64_t v44 = *(void *)v45;
          *((void *)v44 + 1) = *((void *)v45 + 1);
LABEL_10:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v46 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v11, v12, v46);
          uint64_t v47 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v48 = v47[12];
          uint64_t v49 = &v11[v48];
          uint64_t v50 = &v12[v48];
          *(void *)uint64_t v49 = *(void *)v50;
          *((void *)v49 + 1) = *((void *)v50 + 1);
          uint64_t v51 = v47[16];
          uint64_t v52 = &v11[v51];
          uint64_t v53 = &v12[v51];
          *(void *)uint64_t v52 = *(void *)v53;
          *((void *)v52 + 1) = *((void *)v53 + 1);
          uint64_t v54 = v47[20];
          uint64_t v55 = &v11[v54];
          uint64_t v56 = &v12[v54];
          *(void *)uint64_t v55 = *(void *)v56;
          *((void *)v55 + 1) = *((void *)v56 + 1);
          uint64_t v57 = v47[24];
          uint64_t v58 = &v11[v57];
          uint64_t v59 = &v12[v57];
          *(void *)uint64_t v58 = *(void *)v59;
          char v34 = a3;
          *((void *)v58 + 1) = *((void *)v59 + 1);
LABEL_12:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          a3 = v34;
          break;
        default:
          uint64_t v163 = a3;
          uint64_t v15 = type metadata accessor for URL();
          uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
          v16(v11, v12, v15);
          uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v16(&v11[v17[12]], &v12[v17[12]], v15);
          uint64_t v18 = v17[16];
          uint64_t v19 = &v11[v18];
          uint64_t v20 = &v12[v18];
          *(void *)uint64_t v19 = *(void *)v20;
          *((void *)v19 + 1) = *((void *)v20 + 1);
          uint64_t v21 = v17[20];
          uint64_t v22 = &v11[v21];
          uint64_t v23 = &v12[v21];
          *(void *)uint64_t v22 = *(void *)v23;
          *((void *)v22 + 1) = *((void *)v23 + 1);
          uint64_t v24 = v17[24];
          uint64_t v25 = &v11[v24];
          uint64_t v26 = &v12[v24];
          *(void *)uint64_t v25 = *(void *)v26;
          *((void *)v25 + 1) = *((void *)v26 + 1);
          uint64_t v27 = v17[28];
          uint64_t v28 = &v11[v27];
          uint64_t v29 = &v12[v27];
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = *((void *)v29 + 1);
          swift_bridgeObjectRetain();
          a3 = v163;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v60 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v11[v60[5]] = *(void *)&v12[v60[5]];
  *(void *)&v11[v60[6]] = *(void *)&v12[v60[6]];
  *(void *)&v11[v60[7]] = *(void *)&v12[v60[7]];
  *(void *)&v11[v60[8]] = *(void *)&v12[v60[8]];
  *(void *)&v11[v60[10]] = *(void *)&v12[v60[10]];
  if (a1 != a2)
  {
    uint64_t v61 = v9[8];
    uint64_t v62 = (id *)((char *)a1 + v61);
    uint64_t v63 = (id *)((char *)a2 + v61);
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      id v70 = *v63;
      id v71 = *v63;
      *uint64_t v62 = v70;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v62 = *v63;
      uint64_t v65 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v66 = *(int *)(v65 + 20);
      uint64_t v155 = (char *)v63 + v66;
      uint64_t v156 = (char *)v62 + v66;
      uint64_t v159 = v9;
      uint64_t v67 = type metadata accessor for DataFrame();
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16);
      v68(v156, v155, v67);
      uint64_t v69 = v67;
      uint64_t v9 = v159;
      v68((char *)v62 + *(int *)(v65 + 24), (char *)v63 + *(int *)(v65 + 24), v69);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v72 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v72 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(v72);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v73 - 8) + 16))(v62, v63, v73);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v74 = v9[9];
    uint64_t v75 = (id *)((char *)a1 + v74);
    uint64_t v76 = (id *)((char *)a2 + v74);
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    int v77 = swift_getEnumCaseMultiPayload();
    if (v77 == 2)
    {
      id v83 = *v76;
      id v84 = *v76;
      *uint64_t v75 = v83;
    }
    else if (v77 == 1)
    {
      *uint64_t v75 = *v76;
      uint64_t v78 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v79 = *(int *)(v78 + 20);
      v157 = (char *)v76 + v79;
      uint64_t v160 = (char *)v75 + v79;
      uint64_t v164 = a3;
      uint64_t v80 = type metadata accessor for DataFrame();
      uint64_t v81 = *(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16);
      v81(v160, v157, v80);
      uint64_t v82 = v80;
      a3 = v164;
      v81((char *)v75 + *(int *)(v78 + 24), (char *)v76 + *(int *)(v78 + 24), v82);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v85 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v85 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(v85);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v86 - 8) + 16))(v75, v76, v86);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v87 = a3[5];
  uint64_t v88 = *(void **)((char *)a2 + v87);
  id v89 = *(void **)((char *)a1 + v87);
  *(void *)((char *)a1 + v87) = v88;
  id v90 = v88;

  uint64_t v91 = a3[6];
  id v92 = (char *)a1 + v91;
  uint64_t v93 = (char *)a2 + v91;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    uint64_t v94 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandPoseClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v95 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 16))(v92, v93, v95);
          goto LABEL_46;
        case 3u:
          id v104 = *(id *)v93;
          char v105 = v93[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v93, v105);
          *(void *)id v92 = v104;
          v92[8] = v105;
          *((void *)v92 + 2) = *((void *)v93 + 2);
          *((void *)v92 + 3) = *((void *)v93 + 3);
          *((void *)v92 + 4) = *((void *)v93 + 4);
          *((void *)v92 + 5) = *((void *)v93 + 5);
          *((void *)v92 + 6) = *((void *)v93 + 6);
          *((void *)v92 + 7) = *((void *)v93 + 7);
          goto LABEL_42;
        case 4u:
          id v106 = *(id *)v93;
          char v107 = v93[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v93, v107);
          *(void *)id v92 = v106;
          v92[8] = v107;
          *((void *)v92 + 2) = *((void *)v93 + 2);
          *((void *)v92 + 3) = *((void *)v93 + 3);
          *((void *)v92 + 4) = *((void *)v93 + 4);
          *((void *)v92 + 5) = *((void *)v93 + 5);
          goto LABEL_44;
        case 5u:
          uint64_t v108 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v108 - 8) + 16))(v92, v93, v108);
          uint64_t v109 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v110 = v109[12];
          uint64_t v111 = &v92[v110];
          uint64_t v112 = &v93[v110];
          *(void *)uint64_t v111 = *(void *)v112;
          *((void *)v111 + 1) = *((void *)v112 + 1);
          uint64_t v113 = v109[16];
          uint64_t v114 = &v92[v113];
          uint64_t v115 = &v93[v113];
          *(void *)uint64_t v114 = *(void *)v115;
          *((void *)v114 + 1) = *((void *)v115 + 1);
          uint64_t v116 = v109[20];
          uint64_t v117 = &v92[v116];
          uint64_t v118 = &v93[v116];
          *(void *)uint64_t v117 = *(void *)v118;
          *((void *)v117 + 1) = *((void *)v118 + 1);
LABEL_42:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_45;
        case 6u:
          uint64_t v119 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16))(v92, v93, v119);
          uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          uint64_t v121 = *(int *)(v120 + 48);
          uint64_t v122 = &v92[v121];
          v123 = &v93[v121];
          *(void *)uint64_t v122 = *(void *)v123;
          *((void *)v122 + 1) = *((void *)v123 + 1);
          uint64_t v124 = *(int *)(v120 + 64);
          uint64_t v125 = &v92[v124];
          uint64_t v126 = &v93[v124];
          *(void *)uint64_t v125 = *(void *)v126;
          *((void *)v125 + 1) = *((void *)v126 + 1);
          goto LABEL_44;
        default:
          uint64_t v96 = type metadata accessor for URL();
          uint64_t v161 = *(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 16);
          v161(v92, v93, v96);
          v97 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v161(&v92[v97[12]], &v93[v97[12]], v96);
          uint64_t v98 = v97[16];
          uint64_t v99 = &v92[v98];
          uint64_t v100 = &v93[v98];
          *(void *)uint64_t v99 = *(void *)v100;
          *((void *)v99 + 1) = *((void *)v100 + 1);
          uint64_t v101 = v97[20];
          uint64_t v102 = &v92[v101];
          uint64_t v103 = &v93[v101];
          *(void *)uint64_t v102 = *(void *)v103;
          *((void *)v102 + 1) = *((void *)v103 + 1);
LABEL_44:
          swift_bridgeObjectRetain();
LABEL_45:
          swift_bridgeObjectRetain();
LABEL_46:
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          break;
      }
    }
    else
    {
      memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
    }
  }
  v127 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v92[v127[5]] = *(void *)&v93[v127[5]];
  *(void *)&v92[v127[6]] = *(void *)&v93[v127[6]];
  *(void *)&v92[v127[7]] = *(void *)&v93[v127[7]];
  if (a1 != a2)
  {
    uint64_t v128 = a3[7];
    id v129 = (id *)((char *)a1 + v128);
    char v130 = (id *)((char *)a2 + v128);
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int v131 = swift_getEnumCaseMultiPayload();
    if (v131 == 2)
    {
      id v137 = *v130;
      id v138 = *v130;
      *id v129 = v137;
    }
    else if (v131 == 1)
    {
      *id v129 = *v130;
      uint64_t v132 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v133 = *(int *)(v132 + 20);
      uint64_t v158 = (char *)v130 + v133;
      v162 = (char *)v129 + v133;
      uint64_t v165 = a3;
      uint64_t v134 = type metadata accessor for DataFrame();
      char v135 = *(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 16);
      v135(v162, v158, v134);
      uint64_t v136 = v134;
      a3 = v165;
      v135((char *)v129 + *(int *)(v132 + 24), (char *)v130 + *(int *)(v132 + 24), v136);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v139 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v139 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(v139);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v140 - 8) + 16))(v129, v130, v140);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v141 = a3[8];
    v142 = (void **)((char *)a1 + v141);
    uint64_t v143 = (void **)((char *)a2 + v141);
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    int v144 = swift_getEnumCaseMultiPayload();
    if (v144 == 2)
    {
      uint64_t v150 = *v143;
      id v151 = v150;
      char *v142 = v150;
    }
    else if (v144 == 1)
    {
      char *v142 = *v143;
      uint64_t v145 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v146 = *(int *)(v145 + 20);
      uint64_t v166 = (char *)v142 + v146;
      v147 = (char *)v143 + v146;
      uint64_t v148 = type metadata accessor for DataFrame();
      uint64_t v149 = *(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 16);
      v149(v166, v147, v148);
      v149((char *)v142 + *(int *)(v145 + 24), (char *)v143 + *(int *)(v145 + 24), v148);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v152 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v152 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(v152);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v153 - 8) + 16))(v142, v143, v153);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLHandPoseClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = (int *)type metadata accessor for MLHandActionClassifier();
  uint64_t v6 = v5[7];
  uint64_t v7 = (char *)(v4 + v6);
  id v8 = (char *)(v3 + v6);
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v11 = type metadata accessor for URL();
        id v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
        v12(v7, v8, v11);
        uint64_t v89 = v4;
        uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v12(&v7[v13[12]], &v8[v13[12]], v11);
        *(_OWORD *)&v7[v13[16]] = *(_OWORD *)&v8[v13[16]];
        *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
        *(_OWORD *)&v7[v13[24]] = *(_OWORD *)&v8[v13[24]];
        uint64_t v14 = v13[28];
        uint64_t v4 = v89;
        *(_OWORD *)&v7[v14] = *(_OWORD *)&v8[v14];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v7, v8, v15);
        goto LABEL_9;
      case 5u:
        uint64_t v16 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v7, v8, v16);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v7[v17[12]] = *(_OWORD *)&v8[v17[12]];
        *(_OWORD *)&v7[v17[16]] = *(_OWORD *)&v8[v17[16]];
        *(_OWORD *)&v7[v17[20]] = *(_OWORD *)&v8[v17[20]];
        goto LABEL_9;
      case 6u:
        uint64_t v18 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v7, v8, v18);
        uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v7[v19[12]] = *(_OWORD *)&v8[v19[12]];
        *(_OWORD *)&v7[v19[16]] = *(_OWORD *)&v8[v19[16]];
        *(_OWORD *)&v7[v19[20]] = *(_OWORD *)&v8[v19[20]];
        *(_OWORD *)&v7[v19[24]] = *(_OWORD *)&v8[v19[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v20 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v7[v20[5]] = *(void *)&v8[v20[5]];
  *(void *)&v7[v20[6]] = *(void *)&v8[v20[6]];
  *(void *)&v7[v20[7]] = *(void *)&v8[v20[7]];
  *(void *)&v7[v20[8]] = *(void *)&v8[v20[8]];
  *(void *)&v7[v20[10]] = *(void *)&v8[v20[10]];
  uint64_t v21 = v5[8];
  uint64_t v22 = (char *)(v4 + v21);
  uint64_t v23 = (char *)(v3 + v21);
  uint64_t v24 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v91 = v24;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v22 = *(void *)v23;
    uint64_t v28 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v29 = *(int *)(v28 + 20);
    id v30 = &v22[v29];
    uint64_t v31 = v3;
    uint64_t v32 = v4;
    char v33 = &v23[v29];
    uint64_t v34 = type metadata accessor for DataFrame();
    id v90 = v5;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32);
    uint64_t v36 = v33;
    uint64_t v4 = v32;
    uint64_t v3 = v31;
    v35(v30, v36, v34);
    v35(&v22[*(int *)(v28 + 24)], &v23[*(int *)(v28 + 24)], v34);
    uint64_t v5 = v90;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v26 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v26 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(v26);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v22, v23, v27);
    swift_storeEnumTagMultiPayload();
    goto LABEL_18;
  }
  memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_20:
  uint64_t v37 = v5[9];
  id v38 = (char *)(v4 + v37);
  char v39 = (char *)(v3 + v37);
  int v40 = swift_getEnumCaseMultiPayload();
  if (v40 == 1)
  {
    *(void *)id v38 = *(void *)v39;
    uint64_t v43 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v44 = *(int *)(v43 + 20);
    uint64_t v45 = &v38[v44];
    uint64_t v46 = &v39[v44];
    uint64_t v47 = type metadata accessor for DataFrame();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32);
    v48(v45, v46, v47);
    v48(&v38[*(int *)(v43 + 24)], &v39[*(int *)(v43 + 24)], v47);
    uint64_t v24 = v91;
LABEL_27:
    swift_storeEnumTagMultiPayload();
    goto LABEL_29;
  }
  if (!v40)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v41);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v38, v39, v42);
    swift_storeEnumTagMultiPayload();
    goto LABEL_27;
  }
  memcpy(v38, v39, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_29:
  uint64_t v49 = a3;
  uint64_t v50 = a3[6];
  *(void *)(v4 + a3[5]) = *(void *)(v3 + a3[5]);
  uint64_t v51 = (char *)(v4 + v50);
  uint64_t v52 = (char *)(v3 + v50);
  uint64_t v53 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v54 = type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v55 = type metadata accessor for URL();
        uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
        v56(v51, v52, v55);
        uint64_t v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v56(&v51[v57[12]], &v52[v57[12]], v55);
        uint64_t v24 = v91;
        *(_OWORD *)&v51[v57[16]] = *(_OWORD *)&v52[v57[16]];
        *(_OWORD *)&v51[v57[20]] = *(_OWORD *)&v52[v57[20]];
        goto LABEL_37;
      case 1u:
      case 2u:
        uint64_t v58 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(v51, v52, v58);
        goto LABEL_37;
      case 5u:
        uint64_t v59 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v51, v52, v59);
        uint64_t v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v51[v60[12]] = *(_OWORD *)&v52[v60[12]];
        *(_OWORD *)&v51[v60[16]] = *(_OWORD *)&v52[v60[16]];
        *(_OWORD *)&v51[v60[20]] = *(_OWORD *)&v52[v60[20]];
        goto LABEL_37;
      case 6u:
        uint64_t v61 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v51, v52, v61);
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&v51[*(int *)(v62 + 48)] = *(_OWORD *)&v52[*(int *)(v62 + 48)];
        *(_OWORD *)&v51[*(int *)(v62 + 64)] = *(_OWORD *)&v52[*(int *)(v62 + 64)];
LABEL_37:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  uint64_t v63 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v51[v63[5]] = *(void *)&v52[v63[5]];
  *(void *)&v51[v63[6]] = *(void *)&v52[v63[6]];
  *(void *)&v51[v63[7]] = *(void *)&v52[v63[7]];
  uint64_t v64 = a3[7];
  uint64_t v65 = (char *)(v4 + v64);
  uint64_t v66 = (char *)(v3 + v64);
  int v67 = swift_getEnumCaseMultiPayload();
  if (v67 == 1)
  {
    *(void *)uint64_t v65 = *(void *)v66;
    uint64_t v70 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v71 = *(int *)(v70 + 20);
    uint64_t v72 = &v65[v71];
    uint64_t v73 = &v66[v71];
    uint64_t v74 = type metadata accessor for DataFrame();
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32);
    v75(v72, v73, v74);
    v75(&v65[*(int *)(v70 + 24)], &v66[*(int *)(v70 + 24)], v74);
    uint64_t v24 = v91;
    uint64_t v49 = a3;
LABEL_46:
    swift_storeEnumTagMultiPayload();
    goto LABEL_48;
  }
  if (!v67)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(v68);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v65, v66, v69);
    swift_storeEnumTagMultiPayload();
    goto LABEL_46;
  }
  memcpy(v65, v66, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_48:
  uint64_t v76 = v49[8];
  int v77 = (char *)(v4 + v76);
  uint64_t v78 = (char *)(v3 + v76);
  int v79 = swift_getEnumCaseMultiPayload();
  if (v79 == 1)
  {
    *(void *)int v77 = *(void *)v78;
    uint64_t v82 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v83 = *(int *)(v82 + 20);
    id v84 = &v77[v83];
    uint64_t v85 = &v78[v83];
    uint64_t v86 = type metadata accessor for DataFrame();
    uint64_t v87 = *(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32);
    v87(v84, v85, v86);
    v87(&v77[*(int *)(v82 + 24)], &v78[*(int *)(v82 + 24)], v86);
  }
  else
  {
    if (v79)
    {
      memcpy(v77, v78, *(void *)(*(void *)(v24 - 8) + 64));
      return v4;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v80 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v80 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(v80);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32))(v77, v78, v81);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v4;
}

void *assignWithTake for MLHandPoseClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier();
  uint64_t v8 = v7[7];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v93 = a3;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    uint64_t v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v13 = type metadata accessor for URL();
          uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
          v14(v9, v10, v13);
          uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v16 = v13;
          a3 = v93;
          v14(&v9[v15[12]], &v10[v15[12]], v16);
          *(_OWORD *)&v9[v15[16]] = *(_OWORD *)&v10[v15[16]];
          *(_OWORD *)&v9[v15[20]] = *(_OWORD *)&v10[v15[20]];
          *(_OWORD *)&v9[v15[24]] = *(_OWORD *)&v10[v15[24]];
          *(_OWORD *)&v9[v15[28]] = *(_OWORD *)&v10[v15[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          uint64_t v17 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v9, v10, v17);
          goto LABEL_10;
        case 5u:
          uint64_t v18 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v9, v10, v18);
          uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v9[v19[12]] = *(_OWORD *)&v10[v19[12]];
          *(_OWORD *)&v9[v19[16]] = *(_OWORD *)&v10[v19[16]];
          *(_OWORD *)&v9[v19[20]] = *(_OWORD *)&v10[v19[20]];
          goto LABEL_10;
        case 6u:
          uint64_t v20 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v9, v10, v20);
          uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v9[v21[12]] = *(_OWORD *)&v10[v21[12]];
          *(_OWORD *)&v9[v21[16]] = *(_OWORD *)&v10[v21[16]];
          *(_OWORD *)&v9[v21[20]] = *(_OWORD *)&v10[v21[20]];
          *(_OWORD *)&v9[v21[24]] = *(_OWORD *)&v10[v21[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v22 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v9[v22[5]] = *(void *)&v10[v22[5]];
  *(void *)&v9[v22[6]] = *(void *)&v10[v22[6]];
  *(void *)&v9[v22[7]] = *(void *)&v10[v22[7]];
  *(void *)&v9[v22[8]] = *(void *)&v10[v22[8]];
  *(void *)&v9[v22[10]] = *(void *)&v10[v22[10]];
  if (a1 != a2)
  {
    uint64_t v23 = v7[8];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    uint64_t v26 = type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)uint64_t v24 = *(void *)v25;
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v31 = *(int *)(v30 + 20);
      uint64_t v89 = &v24[v31];
      uint64_t v32 = &v25[v31];
      id v90 = v7;
      uint64_t v33 = type metadata accessor for DataFrame();
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32);
      v34(v89, v32, v33);
      uint64_t v35 = v33;
      uint64_t v7 = v90;
      v34(&v24[*(int *)(v30 + 24)], &v25[*(int *)(v30 + 24)], v35);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
LABEL_22:
        uint64_t v36 = v7[9];
        uint64_t v37 = (char *)a1 + v36;
        id v38 = (char *)a2 + v36;
        outlined destroy of MLHandPoseClassifier.ModelParameters();
        int v39 = swift_getEnumCaseMultiPayload();
        if (v39 == 1)
        {
          *(void *)uint64_t v37 = *(void *)v38;
          uint64_t v42 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          uint64_t v43 = *(int *)(v42 + 20);
          uint64_t v91 = &v37[v43];
          uint64_t v44 = &v38[v43];
          uint64_t v45 = type metadata accessor for DataFrame();
          uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32);
          v46(v91, v44, v45);
          v46(&v37[*(int *)(v42 + 24)], &v38[*(int *)(v42 + 24)], v45);
        }
        else
        {
          if (v39)
          {
            memcpy(v37, v38, *(void *)(*(void *)(v26 - 8) + 64));
            goto LABEL_31;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          if (swift_getEnumCaseMultiPayload() == 1) {
            int v40 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          }
          else {
            int v40 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          }
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v40);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v37, v38, v41);
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
LABEL_31:
        a3 = v93;
        goto LABEL_32;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v24, v25, v29);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_22;
  }
LABEL_32:
  uint64_t v47 = a3[5];
  uint64_t v48 = *(void **)((char *)a1 + v47);
  *(void *)((char *)a1 + v47) = *(void *)((char *)a2 + v47);

  uint64_t v49 = a3[6];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters();
    uint64_t v52 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v53 = type metadata accessor for MLHandPoseClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v54 = type metadata accessor for URL();
          uint64_t v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32);
          v55(v50, v51, v54);
          uint64_t v56 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v55(&v50[v56[12]], &v51[v56[12]], v54);
          a3 = v93;
          *(_OWORD *)&v50[v56[16]] = *(_OWORD *)&v51[v56[16]];
          *(_OWORD *)&v50[v56[20]] = *(_OWORD *)&v51[v56[20]];
          goto LABEL_41;
        case 1u:
        case 2u:
          uint64_t v57 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v50, v51, v57);
          goto LABEL_41;
        case 5u:
          uint64_t v58 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(v50, v51, v58);
          uint64_t v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v50[v59[12]] = *(_OWORD *)&v51[v59[12]];
          *(_OWORD *)&v50[v59[16]] = *(_OWORD *)&v51[v59[16]];
          *(_OWORD *)&v50[v59[20]] = *(_OWORD *)&v51[v59[20]];
          goto LABEL_41;
        case 6u:
          uint64_t v60 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v50, v51, v60);
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&v50[*(int *)(v61 + 48)] = *(_OWORD *)&v51[*(int *)(v61 + 48)];
          *(_OWORD *)&v50[*(int *)(v61 + 64)] = *(_OWORD *)&v51[*(int *)(v61 + 64)];
LABEL_41:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64));
    }
  }
  uint64_t v62 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(void *)&v50[v62[5]] = *(void *)&v51[v62[5]];
  *(void *)&v50[v62[6]] = *(void *)&v51[v62[6]];
  *(void *)&v50[v62[7]] = *(void *)&v51[v62[7]];
  if (a1 == a2) {
    return a1;
  }
  uint64_t v63 = a3[7];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  uint64_t v66 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v67 = swift_getEnumCaseMultiPayload();
  if (v67 == 1)
  {
    *(void *)uint64_t v64 = *(void *)v65;
    uint64_t v70 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v71 = *(int *)(v70 + 20);
    id v92 = &v64[v71];
    uint64_t v72 = &v65[v71];
    uint64_t v73 = type metadata accessor for DataFrame();
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32);
    v74(v92, v72, v73);
    uint64_t v75 = v73;
    a3 = v93;
    v74(&v64[*(int *)(v70 + 24)], &v65[*(int *)(v70 + 24)], v75);
  }
  else
  {
    if (v67)
    {
      memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
      goto LABEL_53;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(v68);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v64, v65, v69);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_53:
  uint64_t v76 = a3[8];
  int v77 = (char *)a1 + v76;
  uint64_t v78 = (char *)a2 + v76;
  outlined destroy of MLHandPoseClassifier.ModelParameters();
  int v79 = swift_getEnumCaseMultiPayload();
  if (v79 == 1)
  {
    *(void *)int v77 = *(void *)v78;
    uint64_t v82 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v83 = *(int *)(v82 + 20);
    id v84 = &v77[v83];
    uint64_t v85 = &v78[v83];
    uint64_t v86 = type metadata accessor for DataFrame();
    uint64_t v87 = *(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32);
    v87(v84, v85, v86);
    v87(&v77[*(int *)(v82 + 24)], &v78[*(int *)(v82 + 24)], v86);
  }
  else
  {
    if (v79)
    {
      memcpy(v77, v78, *(void *)(*(void *)(v66 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v80 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v80 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(v80);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32))(v77, v78, v81);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandPoseClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227065838);
}

uint64_t sub_227065838(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_11:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) == a2)
    {
      uint64_t v8 = v12;
      uint64_t v14 = a3[6];
    }
    else
    {
      uint64_t v8 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v14 = a3[7];
    }
    uint64_t v9 = a1 + v14;
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a1 + a3[5]);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227065920);
}

void sub_227065920(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[5]) = (a2 - 1);
      return;
    }
    type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[6];
    }
    else
    {
      uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v14 = a4[7];
    }
    uint64_t v11 = a1 + v14;
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for MLHandPoseClassifier()
{
  uint64_t result = type metadata accessor for MLHandActionClassifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLHandPoseClassifier.ModelParameters(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *result, uint64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v4 = (uint64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v5 = (void *)OUTLINED_FUNCTION_28_0();
      size_t v6 = _swift_stdlib_malloc_size(v5);
      OUTLINED_FUNCTION_87(v6);
    }
    uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v7, v5 + 4, v2, v4, a2);
    if (result == (void *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  size_t v6;
  void v7[3];

  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v4 = (uint64_t)result;
    if (v2 < 1)
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v5 = (void *)swift_allocObject();
      size_t v6 = _swift_stdlib_malloc_size(v5);
      v5[2] = v2;
      v5[3] = 2 * ((uint64_t)(v6 - 32) / 8);
    }
    uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v7, v5 + 4, v2, v4, a2);
    if (result == (void *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<Double>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, void *))
{
  if (!a2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  if (a2 <= 0)
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v7 = (void *)OUTLINED_FUNCTION_28_0();
    size_t v8 = _swift_stdlib_malloc_size(v7);
    v7[2] = a2;
    void v7[3] = 2 * ((uint64_t)(v8 - 32) / 8);
  }
  a4(a1, a2, v7 + 4);
  return v7;
}

const void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return (const void *)MEMORY[0x263F8EE78];
  }
  if (a2 <= 0)
  {
    uint64_t v4 = (const void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v4 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    OUTLINED_FUNCTION_83(v5 - 32);
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
  return v4;
}

void specialized Sequence._copySequenceContents(initializing:)()
{
  OUTLINED_FUNCTION_78();
  uint64_t v4 = v3;
  if (!v1 || (uint64_t v5 = v2) == 0)
  {
LABEL_9:
    void *v4 = v0;
    v4[1] = 0;
    OUTLINED_FUNCTION_88();
    return;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = v1;
    if (CMLSequence.size.getter())
    {
      CMLSequence.value(at:)(0);
      uint64_t v8 = v7;
      for (uint64_t i = 0; ; ++i)
      {
        swift_retain();
        specialized RandomAccessCollection<>.index(after:)(0);
        OUTLINED_FUNCTION_84();
        *(void *)(v6 + 8 * i) = v8;
        if (v5 - 1 == i || !CMLSequence.size.getter()) {
          break;
        }
        CMLSequence.value(at:)(0);
        uint64_t v8 = v10;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
}

{
  void *v0;
  Swift::String *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  Swift::String *v8;
  uint64_t v9;
  uint64_t i;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;

  OUTLINED_FUNCTION_18_0();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  if (!v1)
  {
LABEL_11:
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = v2;
  if (!v2)
  {
LABEL_12:
    *uint64_t v6 = v4;
    v6[1] = v7;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = v1;
    swift_retain();
    uint64_t v9 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_12_0(v9);
    OUTLINED_FUNCTION_105();
    if (v4)
    {
      CMLSequence.value(at:)(0);
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v11 = CMLFeatureValue.stringValue()();
        if (v0) {
          break;
        }
        swift_release();
        swift_retain();
        uint64_t v12 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_12_0(v12);
        OUTLINED_FUNCTION_105();
        if (i - 1 >= v4)
        {
          __break(1u);
          goto LABEL_15;
        }
        *uint64_t v8 = v11;
        if (v7 == i) {
          goto LABEL_12;
        }
        swift_retain();
        uint64_t v13 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_12_0(v13);
        OUTLINED_FUNCTION_105();
        if (i == v4)
        {
          uint64_t v7 = i;
          goto LABEL_12;
        }
        CMLSequence.value(at:)(i);
        ++v8;
      }
      goto LABEL_16;
    }
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  swift_release();

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_96();
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 46;
  v15._id object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  OUTLINED_FUNCTION_118();
  __break(1u);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_78();
  uint64_t v4 = v3;
  if (!v1 || (uint64_t v5 = v2) == 0)
  {
LABEL_9:
    void *v4 = v0;
    v4[1] = 0;
    OUTLINED_FUNCTION_88();
    return;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = v1;
    if (CMLDictionary.size.getter())
    {
      uint64_t v7 = CMLDictionary.keyAndValue(at:)(0);
      uint64_t v9 = v8;
      uint64_t v10 = 1;
      while (1)
      {
        swift_retain();
        specialized RandomAccessCollection<>.index(after:)(0);
        OUTLINED_FUNCTION_84();
        *uint64_t v6 = v7;
        v6[1] = v9;
        if (v5 == v10 || !CMLDictionary.size.getter()) {
          break;
        }
        ++v10;
        uint64_t v7 = CMLDictionary.keyAndValue(at:)(0);
        uint64_t v9 = v11;
        v6 += 2;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  OUTLINED_FUNCTION_78();
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v2 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 64);
  if (!v0)
  {
    uint64_t v12 = 0;
LABEL_37:
    *uint64_t v5 = v3;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    uint64_t v5[4] = v9;
    OUTLINED_FUNCTION_88();
    return;
  }
  uint64_t v10 = v1;
  if (!v1)
  {
    uint64_t v12 = 0;
    goto LABEL_37;
  }
  if (v1 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v11 = v0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  uint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
    v11 += 2;
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    uint64_t v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    uint64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    uint64_t v9 = 0;
    uint64_t v12 = v17;
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  uint64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  uint64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    uint64_t v9 = 0;
    uint64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    uint64_t v17 = v12;
    goto LABEL_18;
  }
  uint64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    uint64_t v9 = 0;
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    uint64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      uint64_t v9 = 0;
      uint64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_40:
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_18_0();
  a25 = v27;
  a26 = v30;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  if (!v28)
  {
LABEL_10:
    uint64_t v35 = 0;
    goto LABEL_12;
  }
  uint64_t v35 = v29;
  if (!v29)
  {
LABEL_12:
    *uint64_t v34 = v32;
    v34[1] = v35;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  if ((v29 & 0x8000000000000000) == 0)
  {
    uint64_t v36 = v28;
    swift_retain();
    uint64_t v37 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_12_0(v37);
    OUTLINED_FUNCTION_74();
    if (v26)
    {
      swift_retain();
      CMLSequence.value(at:)(0);
      uint64_t v39 = v38;
      for (uint64_t i = 1; ; ++i)
      {
        swift_release();
        MLDataValue.init(_:)(v39, (uint64_t)&a12);
        uint64_t v41 = a12;
        uint64_t v42 = a13;
        char v43 = a14;
        swift_retain();
        uint64_t v44 = CMLSequence.size.getter();
        uint64_t v45 = OUTLINED_FUNCTION_12_0(v44);
        swift_release();
        if (i - 1 >= v45) {
          break;
        }
        *(void *)uint64_t v36 = v41;
        *(void *)(v36 + 8) = v42;
        *(unsigned char *)(v36 + 16) = v43;
        if (v35 == i) {
          goto LABEL_12;
        }
        swift_retain();
        uint64_t v46 = CMLSequence.size.getter();
        uint64_t v47 = OUTLINED_FUNCTION_12_0(v46);
        swift_release();
        if (i == v47)
        {
          uint64_t v35 = i;
          goto LABEL_12;
        }
        v36 += 24;
        swift_retain();
        CMLSequence.value(at:)(i);
        uint64_t v39 = v48;
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_18_0();
  a25 = v26;
  a26 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  if (!v27)
  {
LABEL_10:
    uint64_t v34 = 0;
    goto LABEL_12;
  }
  uint64_t v34 = v28;
  if (!v28)
  {
LABEL_12:
    *uint64_t v33 = v31;
    v33[1] = v34;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  if ((v28 & 0x8000000000000000) == 0)
  {
    uint64_t v35 = v27;
    if (CMLSequence.size.getter())
    {
      swift_retain();
      CMLSequence.value(at:)(0);
      uint64_t v37 = v36;
      for (uint64_t i = 1; ; ++i)
      {
        swift_release();
        MLDataValue.init(_:)(v37, (uint64_t)&a12);
        uint64_t v39 = a12;
        int v40 = a13;
        uint64_t v41 = a14;
        swift_retain();
        uint64_t v42 = CMLSequence.size.getter();
        swift_release();
        if (i - 1 >= v42) {
          break;
        }
        *(void *)uint64_t v35 = v39;
        *(void *)(v35 + 8) = v40;
        *(unsigned char *)(v35 + 16) = v41;
        if (v34 == i) {
          goto LABEL_12;
        }
        if (i == CMLSequence.size.getter())
        {
          uint64_t v34 = i;
          goto LABEL_12;
        }
        v35 += 24;
        swift_retain();
        CMLSequence.value(at:)(i);
        uint64_t v37 = v43;
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_17;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_17:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = v8;
    return v8;
  }
  if (a3 < 0)
  {
LABEL_20:
    __break(1u);
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = 0;
    uint64_t v28 = a1;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain_n();
      uint64_t v11 = CMLSequence.size.getter();
      uint64_t v12 = OUTLINED_FUNCTION_12_0(v11);
      swift_retain();
      uint64_t v13 = CMLSequence.size.getter();
      uint64_t v14 = OUTLINED_FUNCTION_12_0(v13);
      swift_release();
      if (v14 < 0)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      swift_retain();
      uint64_t v15 = CMLSequence.size.getter();
      uint64_t v16 = OUTLINED_FUNCTION_12_0(v15);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      if (v12 < 0 || v16 < v12) {
        goto LABEL_19;
      }
      if (v10 == v12)
      {
        uint64_t v8 = v10;
LABEL_16:
        a1 = v28;
        goto LABEL_17;
      }
      swift_retain();
      CMLSequence.value(at:)(v10);
      Swift::String v18 = CMLFeatureValue.stringValue()();
      if (v17) {
        break;
      }
      uint64_t v19 = a4;
      swift_release();
      swift_release();
      swift_retain_n();
      CMLSequence.value(at:)(v10);
      uint64_t v21 = v20;
      swift_release();
      ++v10;
      MLDataValue.init(_:)(v21, (uint64_t)v31);
      swift_release();
      uint64_t v22 = (void *)v31[0];
      uint64_t v23 = (void *)v31[1];
      char v24 = v32;
      swift_bridgeObjectRetain();
      outlined copy of MLDataValue(v22, v23, v24);
      swift_bridgeObjectRelease();
      outlined consume of MLDataValue(v22, v23, v24);
      *(Swift::String *)uint64_t v9 = v18;
      *(void *)(v9 + 16) = v22;
      *(void *)(v9 + 24) = v23;
      *(unsigned char *)(v9 + 32) = v24;
      v9 += 40;
      uint64_t v8 = a3;
      a4 = v19;
      if (a3 == v10) {
        goto LABEL_16;
      }
    }
    swift_release();

    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96();
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 46;
    v27._id object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    OUTLINED_FUNCTION_118();
    __break(1u);
    OUTLINED_FUNCTION_107();
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = result;
  uint64_t v15 = a4;
  char v7 = a5 & 1;
  char v16 = a5 & 1;
  uint64_t v17 = 0;
  if (!a2)
  {
LABEL_10:
    uint64_t v10 = 0;
LABEL_12:
    *(void *)uint64_t v6 = a4;
    *(unsigned char *)(v6 + 8) = v7;
    *(void *)(v6 + 16) = v10;
    return v10;
  }
  if (!a3)
  {
LABEL_11:
    uint64_t v10 = a3;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = a2;
    *(void *)&long long v13 = a4;
    BYTE8(v13) = a5 & 1;
    if (MLDataTable.size.getter())
    {
      uint64_t v10 = 0;
      while (1)
      {
        MLDataTable.Rows.subscript.getter(v10, (uint64_t *)&v13);
        long long v12 = v13;
        uint64_t v11 = v14;
        uint64_t result = OUTLINED_FUNCTION_104();
        if (v10 >= result) {
          break;
        }
        *(_OWORD *)uint64_t v9 = v12;
        *(void *)(v9 + 16) = v11;
        if (a3 - 1 == v10) {
          goto LABEL_11;
        }
        ++v10;
        v9 += 24;
        if (v10 == OUTLINED_FUNCTION_104()) {
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = specialized Dictionary.startIndex.getter(a4);
  uint64_t v11 = v10;
  char v12 = v8 & 1;
  if (!a2 || !a3)
  {
LABEL_20:
    *(void *)a1 = a4;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v11;
    *(unsigned char *)(a1 + 24) = v12;
    return;
  }
  if (a3 < 0) {
    goto LABEL_27;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v28 = a4 + 64;
    uint64_t v23 = a1;
    uint64_t v24 = a3 - 1;
    while (*(_DWORD *)(a4 + 36) == v11)
    {
      uint64_t v14 = 1 << *(unsigned char *)(a4 + 32);
      if (v9 == v14)
      {
        char v12 = 0;
        a1 = v23;
        goto LABEL_20;
      }
      if (v9 < 0 || v9 >= v14) {
        goto LABEL_22;
      }
      if ((*(void *)(v28 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0) {
        goto LABEL_23;
      }
      int v27 = *(_DWORD *)(a4 + 36);
      uint64_t v25 = v13;
      uint64_t v26 = a2;
      uint64_t v15 = *(void *)(a4 + 48) + 24 * v9;
      uint64_t v17 = *(void **)v15;
      char v16 = *(void **)(v15 + 8);
      char v18 = *(unsigned char *)(v15 + 16);
      uint64_t v19 = *(void *)(a4 + 56) + 24 * v9;
      uint64_t v20 = *(void **)v19;
      uint64_t v21 = *(void **)(v19 + 8);
      char v22 = *(unsigned char *)(v19 + 16);
      OUTLINED_FUNCTION_82();
      OUTLINED_FUNCTION_82();
      outlined consume of MLDataValue(v17, v16, v18);
      outlined consume of MLDataValue(v20, v21, v22);
      if (v9 >= -(-1 << *(unsigned char *)(a4 + 32))) {
        goto LABEL_24;
      }
      if ((*(void *)(v28 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a4 + 36) != v27) {
        goto LABEL_26;
      }
      swift_bridgeObjectRetain();
      uint64_t v9 = _HashTable.occupiedBucket(after:)();
      uint64_t v11 = *(unsigned int *)(a4 + 36);
      swift_bridgeObjectRelease();
      *(void *)uint64_t v26 = v17;
      *(void *)(v26 + 8) = v16;
      *(unsigned char *)(v26 + 16) = v18;
      *(void *)(v26 + 24) = v20;
      *(void *)(v26 + 32) = v21;
      *(unsigned char *)(v26 + 40) = v22;
      if (v24 == v25)
      {
        char v12 = 0;
        a1 = v23;
        goto LABEL_20;
      }
      a2 = v26 + 48;
      uint64_t v13 = v25 + 1;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    uint64_t v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    uint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (void *)a3;
  }
  if (a3 < 0) {
    goto LABEL_20;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_21;
  }
  if (a5 > a4)
  {
    uint64_t v5 = a4 + 1;
    *a2 = a4;
    uint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    uint64_t v7 = a2 + 1;
    while (v6)
    {
      if (a5 == v5)
      {
        uint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v5 >= a5) {
        goto LABEL_19;
      }
      uint64_t v8 = v5 + 1;
      *v7++ = v5++;
      if (!--v6)
      {
        uint64_t v5 = v8;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    uint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (void *)a3;
  }
  if (a3 < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_23;
  }
  if (a5 <= a4)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = a4 + 1;
  *a2 = a4;
  if (a3 == 1) {
    goto LABEL_7;
  }
  if (v5 == a5)
  {
    a3 = 1;
    uint64_t v5 = a5;
    goto LABEL_7;
  }
  if (v5 < a5)
  {
    uint64_t v6 = a4 + 2;
    a2[1] = v5;
    if (a3 == 2)
    {
      uint64_t v5 = a4 + 2;
      goto LABEL_7;
    }
    if (v6 == a5)
    {
LABEL_21:
      uint64_t v5 = a5;
      a3 = a5 - a4;
      goto LABEL_7;
    }
    uint64_t v7 = a2 + 2;
    uint64_t v8 = a3 - 3;
    while (v6 < a5)
    {
      uint64_t v5 = v6 + 1;
      *uint64_t v7 = v6;
      if (!v8) {
        goto LABEL_7;
      }
      ++v7;
      --v8;
      ++v6;
      if (a5 == v5) {
        goto LABEL_21;
      }
    }
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_11;
  }
  if (a3 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v5 = a4;
  if (!a4)
  {
LABEL_13:
    *(void *)uint64_t result = a4;
    *(unsigned char *)(result + 8) = a5;
    *(void *)(result + 16) = v5;
    return v5;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      uint64_t v6 = 1;
      while (a3 != v6)
      {
        if (a4 == v6)
        {
          uint64_t v5 = a4;
          goto LABEL_13;
        }
        a2[v6++] = a5;
        if (a3 == v6) {
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
LABEL_11:
    uint64_t v5 = a3;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

void outlined consume of MLDataValue(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 2:
    case 4:
      swift_bridgeObjectRelease();
      break;
    case 3:
      swift_release();
      break;
    case 5:

      break;
    default:
      return;
  }
}

id outlined copy of MLDataValue(id result, id a2, char a3)
{
  switch(a3)
  {
    case 2:
    case 4:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      uint64_t result = (id)swift_retain();
      break;
    case 5:
      uint64_t result = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined init with copy of TrainingSessionDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in blockAwait<A>(_:)()
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_5_1();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_10_0();
  return specialized closure #1 in blockAwait<A>(_:)(v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  uint64_t v6 = OUTLINED_FUNCTION_61_7();
  return specialized closure #1 in blockAwait<A>(_:)(v6, v7, v8, v9, v10, v2, v1);
}

unint64_t lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError()
{
  unint64_t result = lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError;
  if (!lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError;
  if (!lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError);
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLTable.column(name:)(uint64_t a1)
{
  return closure #1 in CMLTable.column(name:)(a1, v1);
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(void **)(v2 + 16), a1, specialized closure #1 in MLUntypedColumn.init<A>(_:), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v2 + 16), a1, a2);
}

uint64_t outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t outlined init with copy of MLTrainingSessionParameters(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(void *a1)
{
  closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t outlined destroy of MLHandPoseClassifier.ModelParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_114();
  v2(v1);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return v0;
}

uint64_t type metadata accessor for NSAttributedString(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void outlined consume of (offset: Int, element: MLDataValue)?(int a1, void *a2, id a3, char a4)
{
  if (a4 != -1) {
    outlined consume of MLDataValue(a2, a3, a4);
  }
}

uint64_t objectdestroy_9Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t outlined assign with copy of MLClassifierMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLClassifierMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2);
}

{
  return _s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0(a1, a2);
}

{
  return _s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySiG_TG5TA_0(a1, a2);
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_1(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_0(uint64_t a1)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(0, a1);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return 0;
}

dispatch_semaphore_t OUTLINED_FUNCTION_15_0(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 48) = -1;
  return dispatch_semaphore_create(0);
}

void OUTLINED_FUNCTION_16_0()
{
  uint64_t v2 = *(void *)(v1 - 216);
  *(void *)(v1 - 152) = v0;
  *(void *)(v1 - 144) = v2;
  uint64_t v3 = *(void *)(v1 - 200);
  *(void *)(v1 - 136) = *(void *)(v1 - 208);
  *(void *)(v1 - 128) = v3;
  uint64_t v4 = *(void *)(v1 - 184);
  *(void *)(v1 - 120) = *(void *)(v1 - 192);
  *(void *)(v1 - 112) = v4;
  uint64_t v5 = *(void *)(v1 - 168);
  *(void *)(v1 - 104) = *(void *)(v1 - 176);
  *(void *)(v1 - 96) = v5;
  *(void *)(v1 - 88) = *(void *)(v1 - 160);
}

uint64_t OUTLINED_FUNCTION_19_0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_21_0()
{
  outlined consume of MLDataValue(v1, v0, 3);
}

void OUTLINED_FUNCTION_23_0(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

void OUTLINED_FUNCTION_24_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, long long a10)
{
  strcpy((char *)&a10, "Column named '");
  HIBYTE(a10) = -18;
  uint64_t v13 = v11;
  uint64_t v14 = v10;
  String.append(_:)(*(Swift::String *)&v13);
}

dispatch_semaphore_t OUTLINED_FUNCTION_26_0(uint64_t a1)
{
  *(unsigned char *)(a1 + 48) = -1;
  return dispatch_semaphore_create(0);
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return type metadata accessor for ResultBox();
}

uint64_t OUTLINED_FUNCTION_28_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return outlined consume of [String : [Int]].Iterator._Variant();
}

void OUTLINED_FUNCTION_30_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, int a13)
{
  outlined consume of (offset: Int, element: MLDataValue)?(a13, a9, a10, 3);
  outlined consume of (offset: Int, element: MLDataValue)?(a13, a9, a10, 3);
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_32_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = v12;
  uint64_t v15 = v11;
  String.append(_:)(*(Swift::String *)&v14);
}

void OUTLINED_FUNCTION_34_0()
{
  outlined consume of (offset: Int, element: MLDataValue)?(v2, v0, v1, 3);
}

uint64_t OUTLINED_FUNCTION_35_0(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v1;
  a1[7] = v4;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_45(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_46()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_47@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 1;
  return swift_release();
}

uint64_t *OUTLINED_FUNCTION_52(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_53()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_56()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_57()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_58()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_59()
{
  return 0x696C702E6174656DLL;
}

uint64_t OUTLINED_FUNCTION_60()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_61()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_62()
{
  return type metadata accessor for URL();
}

double OUTLINED_FUNCTION_64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_65()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_66()
{
  return type metadata accessor for MLHandPoseClassifier();
}

uint64_t OUTLINED_FUNCTION_67(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_68()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_70()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_71()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_72(uint64_t a1, ...)
{
  va_start(va, a1);
  return _UntypedColumn.valueAtIndex(index:)(v1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_74()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_76()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_77()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_79()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_80()
{
  return swift_retain();
}

uint64_t *OUTLINED_FUNCTION_81(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

id OUTLINED_FUNCTION_82()
{
  outlined copy of MLDataValue(v0, v4, v5);
  return outlined copy of MLDataValue(v3, v2, v1);
}

void OUTLINED_FUNCTION_83(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_84()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_85()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_87(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_89()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_90()
{
  outlined consume of Result<_DataTable, Error>(v0, v1 & 1);
  return v2;
}

BOOL OUTLINED_FUNCTION_91@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_93()
{
  return 0;
}

void *OUTLINED_FUNCTION_95(void *(*a1)(uint64_t *__return_ptr, void *))
{
  return specialized String.withCString<A>(_:)(a1, v1, v3, v2);
}

id OUTLINED_FUNCTION_97()
{
  return static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)(v0 - 112, 0, (void *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_99()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_100()
{
  return v0;
}

void OUTLINED_FUNCTION_101()
{
  _StringGuts.grow(_:)(34);
}

void OUTLINED_FUNCTION_102()
{
  _StringGuts.grow(_:)(49);
}

uint64_t OUTLINED_FUNCTION_103()
{
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(_WORD *)(v0 + 16) = 256;
  return type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_104()
{
  return MLDataTable.size.getter();
}

uint64_t OUTLINED_FUNCTION_105()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_107()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_108()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_109()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_111()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_113(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t OUTLINED_FUNCTION_114()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_117()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_118()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

unsigned char *initializeBufferWithCopyOfBuffer for MLBoostedTreeClassifier.ModelParameters.ValidationData(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (unsigned char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = type metadata accessor for DataFrame();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = *(void **)a2;
      char v9 = a2[8];
      outlined copy of Result<_DataTable, Error>(v8, v9);
      *(void *)a1 = v8;
      a1[8] = v9;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v5 = type metadata accessor for DataFrame();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    v6(a1, v5);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = *(void **)a1;
    char v4 = *(unsigned char *)(a1 + 8);
    outlined consume of Result<_DataTable, Error>(v3, v4);
  }
}

unsigned char *initializeWithCopy for MLBoostedTreeClassifier.ModelParameters.ValidationData(unsigned char *a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = type metadata accessor for DataFrame();
    (*(void (**)(unsigned char *, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = *a2;
    char v8 = *((unsigned char *)a2 + 8);
    outlined copy of Result<_DataTable, Error>(v7, v8);
    *(void *)a1 = v7;
    a1[8] = v8;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for MLBoostedTreeClassifier.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = *a2;
      char v8 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((unsigned char *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLBoostedTreeClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLBoostedTreeClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for MLBoostedTreeClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for DataFrame();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MLBoostedTreeClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for MLBoostedTreeClassifier.ModelParameters.ValidationData()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for MLBoostedTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.ValidationData.asTable()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  int64_t v17 = (uint64_t *)(v16 - v15);
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v2, v16 - v15);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v19 = *v17;
      char v20 = *((unsigned char *)v17 + 8);
      goto LABEL_7;
    case 2:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v4);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v10, v13, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(1, (uint64_t)&v27);
      uint64_t v24 = OUTLINED_FUNCTION_4_1();
      uint64_t result = v25(v24);
      uint64_t v19 = v27;
      char v20 = v28;
LABEL_7:
      *(void *)a1 = v19;
      *(unsigned char *)(a1 + 8) = v20;
      break;
    case 3:
      uint64_t v21 = MEMORY[0x22A6764B0](0);
      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x2270695E8);
      }
      uint64_t v22 = v21;
      type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t result = (uint64_t)_DataTable.init(impl:)(v23);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a3;
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v66 = a1;
  uint64_t v61 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  uint64_t v57 = (char *)(v13 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)&v56 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v56 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  MEMORY[0x270FA5388](v21 - 8);
  OUTLINED_FUNCTION_33();
  uint64_t v24 = v22 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_3_0();
  uint64_t v31 = (uint64_t *)(v30 - v29);
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v4, v30 - v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v47 = *v31;
      char v48 = *((unsigned char *)v31 + 8);
      uint64_t v49 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      *(void *)&long long v63 = v47;
      BYTE8(v63) = v48;
      uint64_t v50 = v60;
      DataFrame.init(_:)((uint64_t)&v63, v60);
      uint64_t v43 = v50;
      uint64_t v44 = 0;
      uint64_t v46 = v49;
      goto LABEL_10;
    case 2u:
      uint64_t v38 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 32);
      uint64_t v39 = v31;
      uint64_t v40 = v61;
      v38((uint64_t)v10, v39, v61);
      if (DataFrameProtocol.isEmpty.getter())
      {
        (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v40);
        uint64_t v41 = OUTLINED_FUNCTION_1_3();
        v42(v41);
        uint64_t v43 = v60;
        uint64_t v44 = 1;
      }
      else
      {
        uint64_t v51 = OUTLINED_FUNCTION_1_3();
        v52(v51);
        uint64_t v53 = v60;
        v38(v60, v10, v40);
        uint64_t v43 = v53;
        uint64_t v44 = 0;
      }
      uint64_t v46 = v40;
      goto LABEL_10;
    case 3u:
      uint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      uint64_t v43 = v60;
      uint64_t v44 = 1;
      uint64_t v46 = v45;
LABEL_10:
      uint64_t result = __swift_storeEnumTagSinglePayload(v43, v44, 1, v46);
      break;
    default:
      char v32 = *((unsigned char *)v31 + 16);
      char v33 = *((unsigned char *)v31 + 17);
      long long v63 = *(_OWORD *)v31;
      char v64 = v32;
      char v65 = v33;
      DataFrame.randomSplit(strategy:)((uint64_t)v27, (uint64_t)v20, (uint64_t)&v63);
      uint64_t v35 = v58;
      uint64_t v34 = v59;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v36(v18, v20, v59);
      DataFrame.init(_:)();
      outlined init with copy of DataFrame.Slice?((uint64_t)v27, v24);
      if (__swift_getEnumTagSinglePayload(v24, 1, v34) == 1)
      {
        __swift_storeEnumTagSinglePayload(v60, 1, 1, v61);
        uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v18, v24, v34);
        v36(v57, v18, v34);
        uint64_t v55 = v60;
        DataFrame.init(_:)();
        uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
        v37(v18, v34);
        __swift_storeEnumTagSinglePayload(v55, 0, 1, v61);
      }
      v37(v20, v34);
      uint64_t result = outlined destroy of DataFrame.Slice?((uint64_t)v27);
      break;
  }
  return result;
}

uint64_t outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DataFrame.Slice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DataFrame.Slice?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_3()
{
  return *(void *)(v0 - 72);
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return v0;
}

uint64_t BlobsFile.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t v8 = a2 >> 62;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v14 = v8;
  if (static BlobsFile.isShort(_:)(a1, a2))
  {
    int v15 = 0;
    LODWORD(v16) = 0;
    switch((int)v8)
    {
      case 1:
        if (a1 >> 32 >= (int)a1)
        {
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, (uint64_t)v74);
          if (!v3)
          {
            uint64_t v4 = 0;
            int v15 = v74[0];
            LODWORD(v16) = v74[1];
            OUTLINED_FUNCTION_0_0();
LABEL_15:
            v76[0] = v15;
            v76[1] = v16;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            uint64_t v80 = 0;
            if (v16 == 2)
            {
              switch((int)v8)
              {
                case 1:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_58;
                  }
                  OUTLINED_FUNCTION_2_1();
                  uint64_t v41 = OUTLINED_FUNCTION_1_4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v76, v39, v40, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readShortMetadata(from:header:));
                  if (v3) {
                    goto LABEL_41;
                  }
                  uint64_t v37 = v41;
                  break;
                case 2:
                  uint64_t v33 = *(void *)(a1 + 16);
                  uint64_t v34 = *(void *)(a1 + 24);
                  OUTLINED_FUNCTION_2_1();
                  swift_retain();
                  swift_retain();
                  uint64_t v37 = OUTLINED_FUNCTION_1_4(v33, v34, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v76, v35, v36, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readShortMetadata(from:header:));
                  swift_release();
                  swift_release();
                  if (!v3) {
                    break;
                  }
                  goto LABEL_41;
                case 3:
                  uint64_t v27 = 0;
                  uint64_t v26 = 0;
                  uint64_t v25 = 0;
                  goto LABEL_24;
                default:
                  uint64_t v25 = BYTE6(a2);
                  uint64_t v26 = a2 & 0xFFFFFFFFFFFFLL;
                  uint64_t v27 = a1;
LABEL_24:
                  ML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(v27, v26, v25, (uint64_t)v76, a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t *, char *, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readShortMetadata(from:header:));
                  if (v4) {
                    goto LABEL_41;
                  }
                  uint64_t v37 = ML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm;
                  break;
              }
              uint64_t v17 = 0;
              unint64_t v71 = 0;
              uint64_t v89 = 0;
              uint64_t v73 = 0;
              uint64_t v69 = 0;
              uint64_t v42 = 0;
              uint64_t v43 = 0;
LABEL_53:
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_2_1();
              swift_bridgeObjectRetain();
              OUTLINED_FUNCTION_0_0();
              OUTLINED_FUNCTION_0_0();
              uint64_t result = swift_bridgeObjectRelease();
              *(void *)a3 = a1;
              *(void *)(a3 + 8) = a2;
              *(_DWORD *)(a3 + 16) = v15;
              *(_DWORD *)(a3 + 20) = 2;
              *(void *)(a3 + 24) = v17;
              *(void *)(a3 + 32) = v71;
              *(void *)(a3 + 40) = v89;
              *(void *)(a3 + 48) = v73;
              *(void *)(a3 + 56) = v69;
              *(void *)(a3 + 64) = v42;
              *(void *)(a3 + 72) = v43;
              *(void *)(a3 + 80) = v37;
              return result;
            }
            goto LABEL_40;
          }
LABEL_62:
          OUTLINED_FUNCTION_0_0();
          __break(1u);
LABEL_63:
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x22706A278);
        }
        __break(1u);
LABEL_55:
        __break(1u);
        break;
      case 2:
        uint64_t v23 = *(void *)(a1 + 16);
        swift_retain();
        swift_retain();
        uint64_t v24 = v23;
        uint64_t v3 = v4;
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v24, (uint64_t)v75);
        if (v4) {
          goto LABEL_63;
        }
        uint64_t v4 = 0;
        int v15 = v75[0];
        LODWORD(v16) = v75[1];
        swift_release();
        swift_release();
        goto LABEL_15;
      case 3:
        goto LABEL_15;
      default:
        unint64_t v16 = HIDWORD(a1);
        int v15 = a1;
        goto LABEL_15;
    }
    goto LABEL_56;
  }
  uint64_t v17 = 0;
  int v15 = 0;
  LODWORD(v18) = 0;
  switch((int)v8)
  {
    case 1:
      if ((int)a1 > a1 >> 32) {
        goto LABEL_55;
      }
      OUTLINED_FUNCTION_2_1();
      uint64_t v19 = __DataStorage._bytes.getter();
      uint64_t v68 = a3;
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = __DataStorage._offset.getter();
        if (__OFSUB__((int)a1, v21))
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        uint64_t v22 = v20 + (int)a1 - v21;
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v72 = v3;
      __DataStorage._length.getter();
      if (!v22)
      {
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      LODWORD(v18) = *(_DWORD *)(v22 + 4);
      int v70 = *(_DWORD *)v22;
      unint64_t v8 = *(void *)(v22 + 16);
      uint64_t v66 = *(void *)(v22 + 8);
      uint64_t v46 = *(void *)(v22 + 32);
      uint64_t v89 = *(void *)(v22 + 24);
      uint64_t v45 = *(void *)(v22 + 40);
      uint64_t v48 = *(void *)(v22 + 48);
      uint64_t v47 = *(void *)(v22 + 56);
      OUTLINED_FUNCTION_0_0();
      goto LABEL_36;
    case 2:
      uint64_t v68 = a3;
      uint64_t v28 = *(void *)(a1 + 16);
      swift_retain();
      swift_retain();
      uint64_t v29 = __DataStorage._bytes.getter();
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = __DataStorage._offset.getter();
        if (__OFSUB__(v28, v31))
        {
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        uint64_t v32 = v30 + v28 - v31;
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v72 = v3;
      __DataStorage._length.getter();
      if (!v32)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      LODWORD(v18) = *(_DWORD *)(v32 + 4);
      int v70 = *(_DWORD *)v32;
      uint64_t v66 = *(void *)(v32 + 8);
      unint64_t v44 = *(void *)(v32 + 16);
      uint64_t v89 = *(void *)(v32 + 24);
      uint64_t v46 = *(void *)(v32 + 32);
      uint64_t v45 = *(void *)(v32 + 40);
      uint64_t v48 = *(void *)(v32 + 48);
      uint64_t v47 = *(void *)(v32 + 56);
      unint64_t v8 = v44;
      swift_release();
      swift_release();
LABEL_36:
      uint64_t v13 = v47;
      uint64_t v12 = v48;
      uint64_t v11 = v45;
      int v15 = v70;
      uint64_t v10 = v46;
      uint64_t v17 = v66;
      a3 = v68;
      uint64_t v9 = v89;
      uint64_t v4 = v72;
LABEL_37:
      v81[0] = v15;
      v81[1] = v18;
      uint64_t v82 = v17;
      unint64_t v83 = v8;
      uint64_t v84 = v9;
      uint64_t v85 = v10;
      uint64_t v86 = v11;
      uint64_t v87 = v12;
      uint64_t v88 = v13;
      if (v18 == 2)
      {
        uint64_t v69 = v11;
        unint64_t v71 = v8;
        uint64_t v65 = v13;
        uint64_t v67 = v12;
        switch(v14)
        {
          case 1:
            uint64_t v89 = v9;
            if (a1 >> 32 < (int)a1) {
              goto LABEL_59;
            }
            uint64_t v61 = v10;
            OUTLINED_FUNCTION_2_1();
            uint64_t v64 = OUTLINED_FUNCTION_1_4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v81, v62, v63, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
            if (v3) {
              goto LABEL_41;
            }
            uint64_t v37 = v64;
            uint64_t v73 = v61;
            goto LABEL_52;
          case 2:
            uint64_t v73 = v10;
            uint64_t v89 = v9;
            uint64_t v55 = *(void *)(a1 + 16);
            uint64_t v56 = *(void *)(a1 + 24);
            OUTLINED_FUNCTION_2_1();
            swift_retain();
            swift_retain();
            uint64_t v59 = OUTLINED_FUNCTION_1_4(v55, v56, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v81, v57, v58, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
            if (v3)
            {
              swift_release();
              swift_release();
              goto LABEL_41;
            }
            uint64_t v37 = v59;
            swift_release();
            swift_release();
LABEL_52:
            uint64_t v43 = v65;
            uint64_t v42 = v67;
            break;
          case 3:
            uint64_t v73 = v10;
            uint64_t v49 = v9;
            uint64_t v52 = 0;
            uint64_t v51 = 0;
            uint64_t v50 = 0;
            goto LABEL_45;
          default:
            uint64_t v73 = v10;
            uint64_t v49 = v9;
            uint64_t v50 = BYTE6(a2);
            uint64_t v51 = a2 & 0xFFFFFFFFFFFFLL;
            uint64_t v52 = a1;
LABEL_45:
            uint64_t v60 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(v52, v51, v50, (uint64_t)v81, a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t *, char *, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
            if (v4) {
              goto LABEL_41;
            }
            uint64_t v37 = v60;
            uint64_t v89 = v49;
            goto LABEL_52;
        }
        goto LABEL_53;
      }
LABEL_40:
      lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
      swift_allocError();
      unsigned char *v53 = 0;
      swift_willThrow();
LABEL_41:
      OUTLINED_FUNCTION_0_0();
      OUTLINED_FUNCTION_0_0();
      return swift_bridgeObjectRelease();
    case 3:
      goto LABEL_37;
    default:
      unint64_t v18 = HIDWORD(a1);
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
      int v15 = a1;
      goto LABEL_37;
  }
}

uint64_t static BlobsFile.isShort(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  char v5 = 0;
  uint64_t v6 = BYTE6(a2);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 40)
      {
        if (!v2)
        {
          uint64_t v11 = BYTE6(a2);
          goto LABEL_14;
        }
        if (v2 != 1)
        {
          uint64_t v13 = *(void *)(a1 + 16);
          uint64_t v12 = *(void *)(a1 + 24);
          BOOL v10 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v10) {
            goto LABEL_14;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        LODWORD(v11) = HIDWORD(a1) - a1;
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v11 = (int)v11;
LABEL_14:
          if (v11 == 64) {
            goto LABEL_24;
          }
          if (!v2)
          {
LABEL_19:
            if (v6 >= 68)
            {
              if (a1 >> 32 >= (int)a1)
              {
                swift_retain();
                char v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1);
                outlined consume of Data._Representation(a1, a2);
                return v5 & 1;
              }
LABEL_33:
              __break(1u);
              JUMPOUT(0x22706A47CLL);
            }
LABEL_24:
            char v5 = 0;
            return v5 & 1;
          }
          if (v2 != 1)
          {
            uint64_t v15 = *(void *)(a1 + 16);
            uint64_t v14 = *(void *)(a1 + 24);
            BOOL v10 = __OFSUB__(v14, v15);
            uint64_t v16 = v14 - v15;
            if (!v10)
            {
              if (v16 >= 68)
              {
                uint64_t v18 = *(void *)(a1 + 16);
                swift_retain();
                swift_retain();
                char v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v18);
                swift_release();
                swift_release();
                return v5 & 1;
              }
              goto LABEL_24;
            }
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          LODWORD(v6) = HIDWORD(a1) - a1;
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v6 = (int)v6;
            goto LABEL_19;
          }
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      char v5 = 1;
      return v5 & 1;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_28;
    case 3uLL:
      return v5 & 1;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError()
{
  unint64_t result = lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError;
  if (!lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError;
  if (!lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError);
  }
  return result;
}

void closure #1 in static BlobsFile.readMetadata(from:header:)(uint64_t a1@<X0>, int *a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, void *a5@<X8>)
{
  int v8 = *a2;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v10 = v9;
  if (!v8)
  {
LABEL_23:
    *a5 = v10;
    return;
  }
  BOOL v11 = __OFSUB__(HIDWORD(a3), a3);
  uint64_t v12 = HIDWORD(a3) - (int)a3;
  uint64_t v13 = BYTE6(a4);
  unint64_t v14 = a4 >> 62;
  uint64_t v15 = 64;
  uint64_t v16 = a3;
  while (2)
  {
    uint64_t v17 = v15 + 64;
    if (__OFADD__(v15, 64))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      JUMPOUT(0x22706A78CLL);
    }
    uint64_t v18 = v13;
    switch(v14)
    {
      case 1uLL:
        uint64_t v18 = v12;
        if (v11) {
          goto LABEL_30;
        }
        goto LABEL_11;
      case 2uLL:
        uint64_t v20 = *(void *)(v16 + 16);
        uint64_t v19 = *(void *)(v16 + 24);
        BOOL v21 = __OFSUB__(v19, v20);
        uint64_t v18 = v19 - v20;
        if (!v21) {
          goto LABEL_11;
        }
        goto LABEL_31;
      case 3uLL:
        if (v17 < 0) {
          goto LABEL_14;
        }
        goto LABEL_24;
      default:
LABEL_11:
        if (v17 >= v18) {
          goto LABEL_24;
        }
LABEL_14:
        if (!a1) {
          goto LABEL_32;
        }
        uint64_t v22 = a1 + v15;
        if (*(_DWORD *)(a1 + v15) == -559038737)
        {
          int v23 = *(_DWORD *)(v22 + 4);
          long long v24 = *(_OWORD *)(v22 + 8);
          long long v25 = *(_OWORD *)(v22 + 24);
          long long v26 = *(_OWORD *)(v22 + 40);
          uint64_t v27 = *(void *)(v22 + 56);
          unint64_t v28 = *(void *)(v10 + 16);
          if (v28 >= *(void *)(v10 + 24) >> 1)
          {
            uint64_t v40 = v16;
            BOOL v39 = v11;
            uint64_t v38 = v12;
            long long v36 = *(_OWORD *)(v22 + 24);
            long long v37 = *(_OWORD *)(v22 + 8);
            long long v35 = *(_OWORD *)(v22 + 40);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            long long v26 = v35;
            long long v25 = v36;
            long long v24 = v37;
            uint64_t v12 = v38;
            BOOL v11 = v39;
            uint64_t v16 = v40;
            uint64_t v10 = v33;
          }
          *(void *)(v10 + 16) = v28 + 1;
          uint64_t v29 = v10 + (v28 << 6);
          *(_DWORD *)(v29 + 32) = -559038737;
          *(_DWORD *)(v29 + 36) = v23;
          *(_OWORD *)(v29 + 40) = v24;
          *(_OWORD *)(v29 + 56) = v25;
          *(_OWORD *)(v29 + 72) = v26;
          *(void *)(v29 + 88) = v27;
          if ((v24 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          uint64_t v30 = ((uint64_t)v24 - 1) / 64;
          if ((unint64_t)(v30 - 0x1FFFFFFFFFFFFFFLL) >> 58 != 63) {
            goto LABEL_27;
          }
          uint64_t v31 = v30 << 6;
          BOOL v21 = __OFADD__(v31, 128);
          uint64_t v32 = v31 + 128;
          if (v21) {
            goto LABEL_28;
          }
          BOOL v21 = __OFADD__(v15, v32);
          v15 += v32;
          if (v21) {
            goto LABEL_29;
          }
          if (!--v8) {
            goto LABEL_23;
          }
          continue;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
        swift_allocError();
        *uint64_t v34 = 1;
        swift_willThrow();
        return;
    }
  }
}

void closure #1 in static BlobsFile.readShortMetadata(from:header:)(uint64_t a1@<X0>, int *a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, void *a5@<X8>)
{
  int v8 = *a2;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v10 = v9;
  if (!v8)
  {
LABEL_23:
    *a5 = v10;
    return;
  }
  BOOL v11 = __OFSUB__(HIDWORD(a3), a3);
  uint64_t v12 = HIDWORD(a3) - (int)a3;
  uint64_t v13 = BYTE6(a4);
  uint64_t v14 = 40;
  unint64_t v15 = a4 >> 62;
  long long v16 = 0uLL;
  uint64_t v17 = a3;
  while (2)
  {
    uint64_t v18 = v14 + 56;
    if (__OFADD__(v14, 56))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      JUMPOUT(0x22706A9E0);
    }
    uint64_t v19 = v13;
    switch(v15)
    {
      case 1uLL:
        uint64_t v19 = v12;
        if (v11) {
          goto LABEL_30;
        }
        goto LABEL_11;
      case 2uLL:
        uint64_t v21 = *(void *)(v17 + 16);
        uint64_t v20 = *(void *)(v17 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_11;
        }
        goto LABEL_31;
      case 3uLL:
        if (v18 < 0) {
          goto LABEL_14;
        }
        goto LABEL_24;
      default:
LABEL_11:
        if (v18 >= v19) {
          goto LABEL_24;
        }
LABEL_14:
        if (!a1) {
          goto LABEL_32;
        }
        uint64_t v23 = a1 + v14;
        if (*(_DWORD *)(a1 + v14) == -559038737)
        {
          int v24 = *(_DWORD *)(v23 + 4);
          long long v25 = *(_OWORD *)(v23 + 8);
          unint64_t v26 = *(void *)(v10 + 16);
          if (v26 >= *(void *)(v10 + 24) >> 1)
          {
            uint64_t v36 = v17;
            BOOL v35 = v11;
            uint64_t v34 = v12;
            long long v33 = *(_OWORD *)(v23 + 8);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            long long v25 = v33;
            long long v16 = 0uLL;
            uint64_t v12 = v34;
            BOOL v11 = v35;
            uint64_t v17 = v36;
            uint64_t v10 = v31;
          }
          *(void *)(v10 + 16) = v26 + 1;
          uint64_t v27 = v10 + (v26 << 6);
          *(_DWORD *)(v27 + 32) = -559038737;
          *(_DWORD *)(v27 + 36) = v24;
          *(_OWORD *)(v27 + 40) = v25;
          *(_OWORD *)(v27 + 56) = v16;
          *(_OWORD *)(v27 + 72) = v16;
          *(void *)(v27 + 88) = 0;
          if ((v25 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
          uint64_t v28 = ((uint64_t)v25 - 1) / 8;
          if ((unint64_t)(v28 - 0xFFFFFFFFFFFFFFFLL) >> 61 != 7) {
            goto LABEL_27;
          }
          uint64_t v29 = 8 * v28;
          BOOL v22 = __OFADD__(v29, 64);
          uint64_t v30 = v29 + 64;
          if (v22) {
            goto LABEL_28;
          }
          BOOL v22 = __OFADD__(v14, v30);
          v14 += v30;
          if (v22) {
            goto LABEL_29;
          }
          if (!--v8) {
            goto LABEL_23;
          }
          continue;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
        swift_allocError();
        *uint64_t v32 = 1;
        swift_willThrow();
        return;
    }
  }
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC355LL4from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t *, char *, uint64_t, uint64_t, unint64_t))
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  __int16 v13 = a2;
  char v14 = BYTE2(a2);
  char v15 = BYTE3(a2);
  char v16 = BYTE4(a2);
  char v17 = BYTE5(a2);
  a7(&v11, &v12, (char *)&v12 + a3, a4, a5, a6);
  uint64_t result = outlined consume of Data._Representation(a5, a6);
  if (!v7) {
    return v11;
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1)
{
  uint64_t v2 = __DataStorage._bytes.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_10;
    }
    uint64_t v5 = v3 + a1 - result;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return *(_DWORD *)(v5 + 64) != -559038737 && *(_DWORD *)(v5 + 40) == -559038737;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __DataStorage._bytes.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_8;
    }
    uint64_t v7 = v5 + a1 - result;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = __DataStorage._length.getter();
  if (v7)
  {
    *(void *)a2 = *(void *)v7;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v7 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v7 + 24);
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v15 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  BOOL v16 = __OFSUB__(a2, a1);
  uint64_t v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = v15 + v19;
  if (v15) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  a7(&v22, v15, v21, a4, a5, a6);
  uint64_t result = outlined consume of Data._Representation(a5, a6);
  if (!v7) {
    return v22;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return outlined consume of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_1_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, a3, a4, v7, v8, a7);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return outlined copy of Data._Representation(v0, v1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Si5label_So12MLMultiArrayC9keypointstsAE_pTg50108_s8CreateML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = a2;
  char v7 = a3 & 1;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v23;
    uint64_t v11 = (void **)(a1 + 32);
    uint64_t v18 = v6;
    while (1)
    {
      uint64_t v12 = *v11++;
      uint64_t v21 = v12;
      closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(&v21, v6, v7, a4, &v20, v22);
      if (v5) {
        break;
      }
      uint64_t v5 = 0;
      uint64_t v14 = v22[0];
      uint64_t v13 = v22[1];
      uint64_t v23 = v10;
      unint64_t v15 = *(void *)(v10 + 16);
      if (v15 >= *(void *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v23;
      }
      *(void *)(v10 + 16) = v15 + 1;
      uint64_t v16 = v10 + 16 * v15;
      *(void *)(v16 + 32) = v14;
      *(void *)(v16 + 40) = v13;
      --v8;
      uint64_t v6 = v18;
      if (!v8)
      {
        outlined consume of Result<_DataTable, Error>(v18, v7);
        goto LABEL_10;
      }
    }
    swift_release();
    outlined consume of Result<_DataTable, Error>(v6, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(a2, a3 & 1);
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_10:
    swift_bridgeObjectRelease();
  }
  return v10;
}

void static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  id v12 = v3;
  char v13 = v4;
  outlined copy of Result<_DataTable, Error>(v3, v4);
  MLDataTable.subscript.getter(0x5F6E6F6973736573, (void *)0xEA00000000006469, (uint64_t)&v10);
  outlined consume of Result<_DataTable, Error>(v3, v4);
  uint64_t v5 = v10;
  char v6 = v11;
  MLUntypedColumn.dropDuplicates()(&v12);
  outlined consume of Result<_DataTable, Error>(v5, v6);
  id v7 = v12;
  char v8 = v13;
  if ((v13 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(v12, 0),
        _UntypedColumn.type.getter(&v10),
        outlined consume of Result<_DataTable, Error>(v7, 0),
        (_BYTE)v10))
  {
    outlined consume of Result<_DataTable, Error>(v7, v8);
    __break(1u);
  }
  else
  {
    uint64_t v9 = specialized Array<A>.init(_:)(v7, 0);
    outlined copy of Result<_DataTable, Error>(v3, v4);
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Si5label_So12MLMultiArrayC9keypointstsAE_pTg50108_s8CreateML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n(v9, v3, v4, a2);
    swift_bridgeObjectRelease();
  }
}

void closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(void **a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  char v11 = *a1;
  char v12 = a3 & 1;
  LOBYTE(v42) = a3 & 1;
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  MLDataTable.subscript.getter(0x5F6E6F6973736573, (void *)0xEA00000000006469, (uint64_t)&v48);
  outlined consume of Result<_DataTable, Error>(a2, v12);
  char v13 = v48;
  char v14 = v49;
  uint64_t v46 = (uint64_t)v48;
  char v47 = v49;
  uint64_t v44 = MEMORY[0x263F8D6C8];
  uint64_t v45 = &protocol witness table for Int;
  uint64_t v41 = v11;
  static MLUntypedColumn.== infix(_:_:)();
  outlined consume of Result<_DataTable, Error>(v13, v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v41);
  uint64_t v41 = a2;
  LOBYTE(v42) = v12;
  id v48 = v38;
  char v49 = (char)v39;
  outlined copy of Result<_DataTable, Error>(a2, v12);
  MLDataTable.subscript.getter((uint64_t)&v48, (uint64_t)&v50);
  outlined consume of Result<_DataTable, Error>(v38, (char)v39);
  outlined consume of Result<_DataTable, Error>(a2, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2272CB490;
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(v15 + 32) = NSNumber.init(integerLiteral:)(1);
  *(NSNumber *)(v15 + 40) = NSNumber.init(integerLiteral:)(3);
  *(NSNumber *)(v15 + 48) = NSNumber.init(integerLiteral:)(21);
  uint64_t v41 = (void *)v15;
  specialized Array._endMutation()();
  static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)((uint64_t)&v50, 0x746E696F7079656BLL, (void *)0xE900000000000073, (uint64_t)v41);
  if (v6)
  {
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v50, v51);
    *a5 = v6;
    return;
  }
  swift_bridgeObjectRelease();
  id v16 = v50;
  char v17 = v51;
  uint64_t v41 = v50;
  LOBYTE(v42) = v51;
  MLDataTable.subscript.getter(0x6C6562616CLL, (void *)0xE500000000000000, (uint64_t)&v38);
  id v18 = v38;
  if (v39)
  {
    outlined consume of Result<_DataTable, Error>(v38, 1);
LABEL_15:
    uint64_t v41 = 0;
    id v42 = (id)0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v28 = swift_allocError();
    *(void *)uint64_t v27 = 0xD000000000000023;
    *(void *)(v27 + 8) = 0x80000002272D4430;
LABEL_16:
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(unsigned char *)(v27 + 48) = 0;
    swift_willThrow();
    outlined consume of Result<_DataTable, Error>(v50, v51);
    *a5 = v28;
    return;
  }
  uint64_t v36 = a6;
  swift_retain();
  _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v41);
  outlined consume of Result<_DataTable, Error>(v18, 0);
  outlined consume of Result<_DataTable, Error>(v18, 0);
  uint64_t v19 = v41;
  id v20 = v42;
  if (v43 != 2)
  {
    outlined consume of MLDataValue(v41, v42, v43);
    goto LABEL_15;
  }
  uint64_t v21 = specialized Collection<>.firstIndex(of:)((uint64_t)v41, (uint64_t)v42, a4);
  if (v22)
  {
    uint64_t v41 = 0;
    id v42 = (id)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    uint64_t v41 = (void *)0xD000000000000017;
    id v42 = (id)0x80000002272D4460;
    v29._uint64_t countAndFlagsBits = (uint64_t)v19;
    v29._id object = v20;
    String.append(_:)(v29);
    outlined consume of MLDataValue(v19, v20, 2);
    v30._uint64_t countAndFlagsBits = 544106784;
    v30._id object = (void *)0xE400000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = MEMORY[0x22A674D80](a4, MEMORY[0x263F8D310]);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    uint64_t v32 = v41;
    id v33 = v42;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v28 = swift_allocError();
    *(void *)uint64_t v27 = v32;
    *(void *)(v27 + 8) = v33;
    goto LABEL_16;
  }
  uint64_t v35 = v21;
  outlined consume of MLDataValue(v19, v20, 2);
  id v48 = v16;
  char v49 = v17;
  uint64_t v41 = v16;
  LOBYTE(v42) = v17;
  outlined copy of Result<_DataTable, Error>(v16, v17);
  MLDataTable.size.getter();
  uint64_t v23 = specialized RandomAccessCollection<>.distance(from:to:)();
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v46 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v24 & 0x8000000000000000) == 0)
    {
      uint64_t v25 = 0;
      while (v24 != v25)
      {
        MLDataTable.Rows.subscript.getter(v25, (uint64_t *)&v41);
        id v38 = v41;
        id v39 = v42;
        uint64_t v40 = v43;
        closure #1 in closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v38, &v37, &v52);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v41 = v16;
        LOBYTE(v42) = v17;
        if (v25 >= MLDataTable.size.getter()) {
          goto LABEL_21;
        }
        if (v24 == ++v25)
        {
          uint64_t v26 = v46;
          outlined consume of Result<_DataTable, Error>(v16, v17);
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(v16, v17);
    uint64_t v26 = MEMORY[0x263F8EE78];
LABEL_19:
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    id v34 = @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(v26, 0, 65600);
    outlined consume of Result<_DataTable, Error>(v16, v17);
    *uint64_t v36 = v35;
    v36[1] = (uint64_t)v34;
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

void *closure #1 in closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!*(void *)(v6 + 16)) {
    goto LABEL_8;
  }
  uint64_t v7 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E696F7079656BLL, 0xE900000000000073);
  if ((v9 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_8:
    *(void *)id v16 = 0;
    id v17 = (id)0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v14 = swift_allocError();
    *(void *)uint64_t v15 = 0xD00000000000002BLL;
    *(void *)(v15 + 8) = 0x80000002272D4480;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(unsigned char *)(v15 + 48) = 0;
    uint64_t result = (void *)swift_willThrow();
    *a2 = v14;
    return result;
  }
  uint64_t v10 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
  swift_retain_n();
  CMLSequence.value(at:)(v10);
  if (!v7)
  {
    uint64_t v12 = v11;
    swift_release();
    MLDataValue.init(_:)(v12, (uint64_t)v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    uint64_t result = *(void **)v16;
    if (v18 == 5)
    {
      *a3 = *(void *)v16;
      return result;
    }
    outlined consume of MLDataValue(*(void **)v16, v17, v18);
    goto LABEL_8;
  }
  swift_release();
  uint64_t result = (void *)swift_unexpectedError();
  __break(1u);
  return result;
}

id @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, isa, a2, a3);

  return v6;
}

void static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  OUTLINED_FUNCTION_0();
  uint64_t v45 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_3_0();
  uint64_t v21 = v20 - v19;
  char v22 = *(void **)a4;
  LOBYTE(v20) = *(unsigned char *)(a4 + 8);
  uint64_t v23 = *(void **)a5;
  int v24 = *(unsigned __int8 *)(a5 + 8);
  char v47 = v22;
  char v48 = v20;
  uint64_t v25 = a3;
  uint64_t v26 = v49;
  static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v47, a3);
  if (!v26)
  {
    uint64_t v28 = v27;
    uint64_t v49 = 0;
    id v42 = v23;
    uint64_t v29 = v25[2];
    id v39 = *(void (**)(uint64_t, void, uint64_t))(v11 + 104);
    v39(v15, *MEMORY[0x263F583A8], v9);
    uint64_t v41 = v29;
    specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(v28, v29, a6, v15, v21);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v40(v15, v9);
    swift_bridgeObjectRelease();
    uint64_t v30 = v21;
    if (v24 != 255)
    {
      char v47 = v42;
      unsigned __int8 v31 = v24;
      char v32 = v24 & 1;
      char v48 = v32;
      outlined copy of Result<_DataTable, Error>(v42, v32);
      if (MLDataTable.size.getter())
      {
        char v47 = v42;
        char v48 = v32;
        uint64_t v33 = v49;
        static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v47, v25);
        uint64_t v49 = v33;
        if (v33)
        {
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v30, v16);
          outlined consume of MLDataTable?(v42, v31);
          return;
        }
        uint64_t v37 = v34;
        uint64_t v38 = v9;
        v39(v15, *MEMORY[0x263F583B0], v9);
        uint64_t v36 = a2;
        specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(v37, v41, a6, v15, a2);
        outlined consume of MLDataTable?(v42, v31);
        v40(v15, v38);
        swift_bridgeObjectRelease();
        uint64_t v35 = 0;
        goto LABEL_9;
      }
      outlined consume of MLDataTable?(v42, v31);
    }
    uint64_t v35 = 1;
    uint64_t v36 = a2;
LABEL_9:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(a1, v30, v16);
    __swift_storeEnumTagSinglePayload(v36, v35, 1, v16);
  }
}

uint64_t specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v40 = a2;
  uint64_t v41 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>.PrefetchMode);
  OUTLINED_FUNCTION_0();
  uint64_t v38 = v8;
  uint64_t v39 = v7;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v36 = v10 - v9;
  uint64_t v11 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v12;
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  uint64_t v19 = OUTLINED_FUNCTION_1(v18);
  uint64_t v21 = v20;
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v24 = MEMORY[0x270FA5388](v19);
  uint64_t v25 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v34 - v27;
  uint64_t v37 = *(void *)(a3 + *(int *)(v26 + 28));
  uint64_t v44 = 0;
  uint64_t v45 = a1;
  long long v42 = 0u;
  long long v43 = 0u;
  outlined init with copy of MLHandActionClassifier.ModelParameters(a3, (uint64_t)&v34 - v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v35, v11);
  outlined init with take of MLHandActionClassifier.ModelParameters((uint64_t)v28, (uint64_t)v25);
  unint64_t v29 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v30 = (v15 + *(unsigned __int8 *)(v21 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v31 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v31 + v29, v17, v11);
  outlined init with take of MLHandActionClassifier.ModelParameters((uint64_t)v25, v31 + v30);
  uint64_t v32 = v39;
  *(void *)(v31 + ((v23 + v30 + 7) & 0xFFFFFFFFFFFFFFF8)) = v40;
  (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v36, *MEMORY[0x263F58528], v32);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: Int, keypoints: MLMultiArray)]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [(label: Int, keypoints: MLMultiArray)] and conformance [A], &demangling cache variable for type metadata for [(label: Int, keypoints: MLMultiArray)]);
  lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance DataSample<A, B>, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  return Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)();
}

uint64_t closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)&long long v63 = a3;
  uint64_t v60 = a4;
  uint64_t v61 = a2;
  uint64_t v59 = type metadata accessor for ScalarType();
  uint64_t v57 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v58 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TensorShape();
  MEMORY[0x270FA5388](v6 - 8);
  v56[1] = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Tensor();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v64 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v66 = (char *)v56 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v65 = (char *)v56 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v56 - v19;
  uint64_t v21 = type metadata accessor for LearningPhase();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *a1;
  uint64_t v26 = (void *)a1[1];
  uint64_t v62 = v25;
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x263F583A8], v21);
  lazy protocol witness table accessor for type LearningPhase and conformance LearningPhase();
  id v27 = v26;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v29 = v67;
  uint64_t v28 = v68;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  if (v28 == v29)
  {
    uint64_t v30 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    uint64_t v31 = v61;
    uint64_t v68 = *(void *)(v61 + *(int *)(v30 + 32));
    id v32 = static MLHandActionClassifier.dataAugmentation(_:options:)(v27, &v68);

    id v27 = v32;
    uint64_t v33 = v31;
  }
  else
  {
    uint64_t v33 = v61;
  }
  uint64_t v34 = *(void *)(v33 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28));
  id v35 = objc_msgSend(v27, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v36 & 0xC000000000000001) == 0, v36);
  if ((v36 & 0xC000000000000001) != 0) {
    id v37 = (id)MEMORY[0x22A6753B0](0, v36);
  }
  else {
    id v37 = *(id *)(v36 + 32);
  }
  uint64_t v38 = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = Int.init(truncating:)();

  id v40 = MLMultiArray.cast(to:)((id)0x10020);
  uint64_t v41 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v41);
  Tensor.init(_:device:)(v40, (uint64_t)v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v41);
  long long v42 = v65;
  Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)();
  if (v39 < v34)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2272CB4A0;
    uint64_t v44 = v64;
    if (!__OFSUB__(v34, v39))
    {
      *(void *)(v43 + 32) = v34 - v39;
      *(_OWORD *)(v43 + 40) = xmmword_2272CB4B0;
      *(void *)&long long v63 = v20;
      MEMORY[0x22A672540]();
      (*(void (**)(char *, void, uint64_t))(v57 + 104))(v58, *MEMORY[0x263F58330], v59);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v41);
      uint64_t v45 = v66;
      uint64_t v20 = (char *)v63;
      Tensor.init(zeros:scalarType:on:)();
      Tensor.concatenated(with:alongAxis:)();
      uint64_t v46 = *(void (**)(char *, uint64_t))(v12 + 8);
      v46(v45, v11);
      v46(v20, v11);
      char v47 = v44;
LABEL_14:
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v47, v11);
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v44 = v64;
  if (v34 >= v39)
  {
LABEL_15:
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v53(v66, v20, v11);
    v53(v44, v42, v11);
    DataSample.init(features:labels:)();

    uint64_t v54 = *(void (**)(char *, uint64_t))(v12 + 8);
    v54(v42, v11);
    return ((uint64_t (*)(char *, uint64_t))v54)(v20, v11);
  }
  unint64_t v48 = v39 - v34;
  if (__OFSUB__(v39, v34))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((v48 & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v48)
  {
    unint64_t v49 = specialized RandomNumberGenerator.next<A>(upperBound:)(v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v50 = swift_allocObject();
    long long v63 = xmmword_2272CB4A0;
    *(_OWORD *)(v50 + 16) = xmmword_2272CB4A0;
    *(void *)(v50 + 40) = 0;
    *(void *)(v50 + 48) = 0;
    *(void *)(v50 + 32) = v49;
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v63;
    *(void *)(v51 + 32) = v34;
    *(_OWORD *)(v51 + 40) = xmmword_2272CB4B0;
    uint64_t v52 = v66;
    Tensor.slice(lowerBounds:sizes:)();
    long long v42 = v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    char v47 = v52;
    goto LABEL_14;
  }
LABEL_20:
  __break(1u);

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

id static MLHandActionClassifier.dataAugmentation(_:options:)(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  switch(static MLHandActionClassifier.chooseAugmentationOption(_:)(&v5))
  {
    case 1uLL:
      unint64_t v2 = specialized RandomNumberGenerator.next<A>(upperBound:)(4uLL);
      id result = (id)static MLHandActionClassifier.horizontalFlip(_:caseSelected:)(a1, v2);
      break;
    case 2uLL:
      id result = (id)static MLHandActionClassifier.randomMove(_:)(a1);
      break;
    case 3uLL:
      id result = (id)static MLHandActionClassifier.randomShift(_:)();
      break;
    case 4uLL:
      id result = (id)static MLHandActionClassifier.randomScale(_:)(a1);
      break;
    case 5uLL:
      id result = (id)static MLHandActionClassifier.timeInterpolate(_:)();
      break;
    case 6uLL:
      id result = (id)static MLHandActionClassifier.frameDrop(_:)();
      break;
    default:
      id result = a1;
      break;
  }
  return result;
}

unint64_t static MLHandActionClassifier.chooseAugmentationOption(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  uint64_t v3 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = 0;
  if (v1)
  {
    unint64_t v4 = 2;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, 2, 1, inited);
    uint64_t v3 = inited;
    *(void *)(inited + 16) = 2;
    *(void *)(inited + 40) = 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v4 = 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
  }
  unint64_t v5 = *(void *)(v3 + 24);
  if (v4 >= v5 >> 1)
  {
    OUTLINED_FUNCTION_3_2(v5);
    uint64_t v3 = v20;
  }
  OUTLINED_FUNCTION_29_1();
  *(void *)(v6 + 32) = 2;
LABEL_8:
  if ((v1 & 4) != 0)
  {
    OUTLINED_FUNCTION_25_1();
    if (v8)
    {
      OUTLINED_FUNCTION_3_2(v7);
      uint64_t v3 = v21;
    }
    OUTLINED_FUNCTION_29_1();
    *(void *)(v9 + 32) = 3;
    if ((v1 & 8) == 0)
    {
LABEL_10:
      if ((v1 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_25_1();
  if (v8)
  {
    OUTLINED_FUNCTION_3_2(v10);
    uint64_t v3 = v22;
  }
  OUTLINED_FUNCTION_29_1();
  *(void *)(v11 + 32) = 4;
  if ((v1 & 0x10) == 0)
  {
LABEL_11:
    if ((v1 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
LABEL_19:
  OUTLINED_FUNCTION_25_1();
  if (v8)
  {
    OUTLINED_FUNCTION_3_2(v12);
    uint64_t v3 = v23;
  }
  OUTLINED_FUNCTION_29_1();
  *(void *)(v13 + 32) = 5;
  if ((v1 & 0x20) != 0)
  {
LABEL_22:
    unint64_t v15 = *(void *)(v3 + 16);
    unint64_t v14 = *(void *)(v3 + 24);
    if (v15 >= v14 >> 1)
    {
      OUTLINED_FUNCTION_3_2(v14);
      uint64_t v3 = inited;
    }
    *(void *)(v3 + 16) = v15 + 1;
    *(void *)(v3 + 8 * v15 + 32) = 6;
  }
LABEL_25:
  unint64_t v16 = specialized Collection.randomElement<A>(using:)(inited, v3);
  char v18 = v17;
  swift_bridgeObjectRelease();
  if (v18) {
    return 0;
  }
  else {
    return v16;
  }
}

uint64_t static MLHandActionClassifier.horizontalFlip(_:caseSelected:)(id a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4C0;
  *(void *)(inited + 32) = &outlined read-only object #0 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(void *)(inited + 40) = &outlined read-only object #1 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(void *)(inited + 48) = &outlined read-only object #2 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(void *)(inited + 56) = &outlined read-only object #3 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(void *)(inited + 64) = &outlined read-only object #4 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(void *)(inited + 72) = &outlined read-only object #5 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(void *)(inited + 80) = &outlined read-only object #6 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(void *)(inited + 88) = &outlined read-only object #7 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  uint64_t v4 = (uint64_t)&off_2647FE000;
  uint64_t v5 = (uint64_t)objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_7_2();
  if (v5) {
LABEL_87:
  }
    OUTLINED_FUNCTION_20_0();
  else {
    id v7 = *(id *)(v6 + 32);
  }
  OUTLINED_FUNCTION_18_1();
  unint64_t v62 = (unint64_t)objc_msgSend((id)v5, sel_integerValue);

  id v8 = [a1 *(SEL *)(v4 + 2216)];
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_14_1();
  if (v8) {
    MEMORY[0x22A6753B0](2, v9);
  }
  else {
    id v10 = *(id *)(v9 + 48);
  }
  OUTLINED_FUNCTION_18_1();
  unint64_t v11 = (unint64_t)objc_msgSend(v8, sel_integerValue);

  id v12 = [a1 *(SEL *)(v4 + 2216)];
  uint64_t v5 = OUTLINED_FUNCTION_16_1();

  id v13 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v14 = OUTLINED_FUNCTION_10_1();
  if (v5) {
    goto LABEL_91;
  }
  uint64_t v4 = (uint64_t)v14;
  uint64_t v15 = UnsafeMutableBufferPointer.init(_:)();
  uint64_t v17 = v16;
  a1 = a1;
  uint64_t v18 = UnsafeMutableBufferPointer.init(_:)();
  if (v19 && v17)
  {
    if (v19 >= v17) {
      uint64_t v19 = v17;
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(v18, v19);
  }
  if (a2 != 3)
  {
    unint64_t v20 = v62;
    if ((v62 & 0x8000000000000000) != 0)
    {
LABEL_90:
      __break(1u);
LABEL_91:
      OUTLINED_FUNCTION_2_2();
      uint64_t result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    if (v62)
    {
      uint64_t v61 = v4;
      uint64_t v21 = 0;
      id v64 = (id)v11;
      while (1)
      {
        if (v21 == v20) {
          goto LABEL_85;
        }
        if (a2 == 1) {
          goto LABEL_35;
        }
        if ((v11 & 0x8000000000000000) != 0) {
          break;
        }
        if (v11)
        {
          uint64_t v4 = 0;
          do
          {
            id v22 = objc_msgSend(a1, sel_strides);
            uint64_t v5 = OUTLINED_FUNCTION_16_1();

            if ((v5 & 0xC000000000000001) != 0)
            {
              OUTLINED_FUNCTION_21_1();
            }
            else
            {
              OUTLINED_FUNCTION_27_1();
              if (!v23) {
                goto LABEL_81;
              }
              id v24 = *(id *)(v5 + 32);
            }
            uint64_t v25 = v24;
            swift_bridgeObjectRelease();
            uint64_t v26 = (uint64_t)objc_msgSend(v25, sel_integerValue);

            uint64_t v27 = v21 * v26;
            if ((unsigned __int128)(v21 * (__int128)v26) >> 64 != (v21 * v26) >> 63) {
              goto LABEL_80;
            }
            id v28 = objc_msgSend(a1, sel_strides);
            uint64_t v5 = OUTLINED_FUNCTION_16_1();

            if ((v5 & 0xC000000000000001) != 0)
            {
              OUTLINED_FUNCTION_19_1();
            }
            else
            {
              OUTLINED_FUNCTION_4_2();
              if (!v29) {
                goto LABEL_83;
              }
              id v30 = *(id *)(v5 + 48);
            }
            uint64_t v31 = v30;
            swift_bridgeObjectRelease();
            uint64_t v9 = (uint64_t)objc_msgSend(v31, sel_integerValue);

            uint64_t v32 = v4 * v9;
            if ((unsigned __int128)(v4 * (__int128)v9) >> 64 != (v4 * v9) >> 63) {
              goto LABEL_82;
            }
            BOOL v33 = __OFADD__(v27, v32);
            uint64_t v34 = v27 + v32;
            if (v33) {
              goto LABEL_84;
            }
            ++v4;
            *(double *)(v15 + 8 * v34) = 1.0 - *(double *)(v15 + 8 * v34);
            unint64_t v11 = (unint64_t)v64;
          }
          while (v64 != (id)v4);
        }
        if (a2)
        {
LABEL_35:
          if (*(void *)(inited + 16) >= 8uLL)
          {
            swift_bridgeObjectRetain();
            uint64_t v35 = 32;
            while (1)
            {
              uint64_t v5 = *(void *)(inited + v35);
              swift_bridgeObjectRetain();
              id v36 = objc_msgSend(a1, sel_strides);
              uint64_t v37 = OUTLINED_FUNCTION_16_1();

              if ((v37 & 0xC000000000000001) != 0)
              {
                id v38 = (id)MEMORY[0x22A6753B0](0, v37);
              }
              else
              {
                if (!*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_69;
                }
                id v38 = *(id *)(v37 + 32);
              }
              uint64_t v39 = v38;
              swift_bridgeObjectRelease();
              uint64_t v40 = (uint64_t)objc_msgSend(v39, sel_integerValue);

              uint64_t v4 = v21 * v40;
              if ((unsigned __int128)(v21 * (__int128)v40) >> 64 != (v21 * v40) >> 63) {
                break;
              }
              if (!*(void *)(v5 + 16)) {
                goto LABEL_70;
              }
              uint64_t v41 = *(void *)(v5 + 32);
              id v42 = objc_msgSend(a1, sel_strides);
              uint64_t v43 = OUTLINED_FUNCTION_16_1();

              if ((v43 & 0xC000000000000001) != 0)
              {
                id v44 = (id)MEMORY[0x22A6753B0](2, v43);
              }
              else
              {
                if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL) {
                  goto LABEL_72;
                }
                id v44 = *(id *)(v43 + 48);
              }
              uint64_t v45 = v44;
              swift_bridgeObjectRelease();
              uint64_t v46 = (uint64_t)objc_msgSend(v45, sel_integerValue);

              uint64_t v47 = v41 * v46;
              if ((unsigned __int128)(v41 * (__int128)v46) >> 64 != (v41 * v46) >> 63) {
                goto LABEL_71;
              }
              BOOL v33 = __OFADD__(v4, v47);
              v4 += v47;
              if (v33) {
                goto LABEL_73;
              }
              id v48 = objc_msgSend(a1, sel_strides);
              uint64_t v49 = OUTLINED_FUNCTION_16_1();

              if ((v49 & 0xC000000000000001) != 0)
              {
                id v50 = (id)MEMORY[0x22A6753B0](0, v49);
              }
              else
              {
                if (!*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_75;
                }
                id v50 = *(id *)(v49 + 32);
              }
              uint64_t v51 = v50;
              swift_bridgeObjectRelease();
              uint64_t v52 = (uint64_t)objc_msgSend(v51, sel_integerValue);

              uint64_t v53 = v21 * v52;
              if ((unsigned __int128)(v21 * (__int128)v52) >> 64 != (v21 * v52) >> 63) {
                goto LABEL_74;
              }
              if (*(void *)(v5 + 16) < 2uLL) {
                goto LABEL_76;
              }
              uint64_t v54 = *(void *)(v5 + 40);
              swift_bridgeObjectRelease();
              id v55 = objc_msgSend(a1, sel_strides);
              uint64_t v5 = OUTLINED_FUNCTION_16_1();

              if ((v5 & 0xC000000000000001) != 0)
              {
                OUTLINED_FUNCTION_19_1();
              }
              else
              {
                OUTLINED_FUNCTION_4_2();
                if (!v29) {
                  goto LABEL_78;
                }
                uint64_t v56 = (id *)*(id *)(v5 + 48);
              }
              uint64_t v9 = (uint64_t)v56;
              swift_bridgeObjectRelease();
              uint64_t v5 = (uint64_t)objc_msgSend((id)v9, sel_integerValue);

              uint64_t v57 = v54 * v5;
              if ((unsigned __int128)(v54 * (__int128)v5) >> 64 != (v54 * v5) >> 63) {
                goto LABEL_77;
              }
              BOOL v33 = __OFADD__(v53, v57);
              uint64_t v58 = v53 + v57;
              if (v33) {
                goto LABEL_79;
              }
              uint64_t v59 = *(void *)(v15 + 8 * v4);
              *(void *)(v15 + 8 * v4) = *(void *)(v15 + 8 * v58);
              *(void *)(v15 + 8 * v58) = v59;
              v35 += 8;
              if (v35 == 96)
              {
                swift_bridgeObjectRelease();
                unint64_t v11 = (unint64_t)v64;
                goto LABEL_64;
              }
            }
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
          }
          __break(1u);
          goto LABEL_87;
        }
LABEL_64:
        ++v21;
        unint64_t v20 = v62;
        if (v21 == v62)
        {
          swift_bridgeObjectRelease();
          return v61;
        }
      }
      __break(1u);
      goto LABEL_90;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static MLHandActionClassifier.randomMove(_:)(void *a1)
{
  uint64_t v1 = a1;
  id v2 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v3 & 0xC000000000000001) == 0, v3);
  if ((v3 & 0xC000000000000001) != 0) {
    id v4 = (id)MEMORY[0x22A6753B0](0, v3);
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v5, sel_integerValue);

  id v7 = OUTLINED_FUNCTION_15_1();
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v8 & 0xC000000000000001) == 0, v8);
  if ((v8 & 0xC000000000000001) != 0) {
    id v9 = (id)MEMORY[0x22A6753B0](2, v8);
  }
  else {
    id v9 = *(id *)(v8 + 48);
  }
  id v10 = v9;
  swift_bridgeObjectRelease();
  id v83 = objc_msgSend(v10, sel_integerValue);

  specialized MutableCollection<>.shuffle<A>(using:)();
  specialized MutableCollection.subscript.getter(0, 1, (uint64_t)&outlined read-only object #0 of static MLHandActionClassifier.randomMove(_:));
  id v12 = v11;
  uint64_t v14 = v13;
  unint64_t v16 = v15;
  swift_release();
  specialized MutableCollection<>.shuffle<A>(using:)();
  OUTLINED_FUNCTION_13_0();
  uint64_t v18 = v17;
  uint64_t v91 = v19;
  unint64_t v21 = v20;
  swift_release();
  specialized MutableCollection<>.shuffle<A>(using:)();
  OUTLINED_FUNCTION_13_0();
  uint64_t v85 = v22;
  uint64_t v87 = v23;
  unint64_t v88 = v24;
  swift_release();
  uint64_t v94 = &outlined read-only object #2 of static MLHandActionClassifier.randomMove(_:);
  specialized MutableCollection<>.shuffle<A>(using:)();
  OUTLINED_FUNCTION_13_0();
  uint64_t v84 = v25;
  uint64_t v86 = v26;
  unint64_t v28 = v27;
  swift_release();
  id v90 = v1;
  id v82 = v6;
  if (v6 == (id)1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_2272CB370;
    if (v14 > 0 || v16 < 2)
    {
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    uint64_t v31 = v29;
    *(float *)(v29 + 32) = (float)(*v12 * 3.1416) / 180.0;
    uint64_t v32 = OUTLINED_FUNCTION_24_1();
    *(_OWORD *)(v32 + 16) = xmmword_2272CB370;
    if (v91 > 0 || v21 < 2) {
      goto LABEL_74;
    }
    uint64_t v34 = v32;
    *(float *)(v32 + 32) = *v18;
    uint64_t v35 = OUTLINED_FUNCTION_24_1();
    *(_OWORD *)(v35 + 16) = xmmword_2272CB370;
    if (v87 > 0 || v88 < 2) {
      goto LABEL_75;
    }
    *(float *)(v35 + 32) = *v85;
    uint64_t v94 = (void *)v35;
    uint64_t v37 = OUTLINED_FUNCTION_24_1();
    *(_OWORD *)(v37 + 16) = xmmword_2272CB370;
    if (v86 > 0 || v28 < 2) {
      goto LABEL_78;
    }
    *(float *)(v37 + 32) = *v84;
LABEL_59:
    uint64_t v93 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[[Float]]>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_2272CB4D0;
    uint64_t v52 = cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(v31, MEMORY[0x263EF8828]);
    swift_bridgeObjectRetain();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(v52, v34);
    uint64_t v54 = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v51 + 32) = v54;
    uint64_t v55 = cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(v31, MEMORY[0x263EF8A68]);
    uint64_t v56 = *(void *)(v55 + 16);
    if (v56)
    {
      uint64_t v92 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v57 = 0;
      unint64_t v58 = *(void *)(v92 + 16);
      do
      {
        float v59 = *(float *)(v55 + 4 * v57 + 32);
        if (v58 >= *(void *)(v92 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v57;
        *(void *)(v92 + 16) = v58 + 1;
        *(float *)(v92 + 4 * v58++ + 32) = -v59;
      }
      while (v56 != v57);
      swift_bridgeObjectRelease();
      uint64_t v1 = v90;
      id v6 = v82;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v60 = swift_bridgeObjectRetain();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(v60, v34);
    uint64_t v62 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(void *)(v51 + 40) = v62;
    *(void *)(inited + 32) = v51;
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_2272CB4D0;
    uint64_t v64 = cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(v31, MEMORY[0x263EF8A68]);
    swift_bridgeObjectRetain();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(v64, v34);
    uint64_t v66 = v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v63 + 32) = v66;
    cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(v31, MEMORY[0x263EF8828]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v67 = swift_bridgeObjectRetain();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(v67, v34);
    uint64_t v69 = v68;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(void *)(v63 + 40) = v69;
    *(void *)(inited + 40) = v63;
    id v70 = objc_msgSend(v1, sel_shape);
    uint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v72 = objc_allocWithZone(MEMORY[0x263F00DA8]);
    id v73 = @nonobjc MLMultiArray.init(shape:dataType:)(v71, 65600);
    id v74 = objc_msgSend(v73, sel_dataPointer);
    id v75 = v1;
    id v76 = objc_msgSend(v75, sel_dataPointer);
    unint64_t v77 = (unint64_t)objc_msgSend(v75, sel_count);
    if ((v77 - 0x1000000000000000) >> 61 == 7)
    {
      memcpy(v74, v76, 8 * v77);
      id v78 = v73;
      uint64_t v79 = UnsafeMutableBufferPointer.init(_:)();
      closure #3 in static MLHandActionClassifier.randomMove(_:)(v79, v80, (uint64_t)v6, (uint64_t)v83, v75, (void *)inited, (uint64_t)&v94, (uint64_t)&v93);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v78;
    }
    __break(1u);
    goto LABEL_71;
  }
  if (v14 > 0 || v16 < 2) {
    goto LABEL_72;
  }
  if (v16 < 4)
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v6, *v12, v12[1]);
  uint64_t v41 = v40;
  uint64_t v42 = *(void *)(v40 + 16);
  if (v42)
  {
    uint64_t v94 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v43 = 0;
    uint64_t v31 = (uint64_t)v94;
    unint64_t v44 = v94[2];
    do
    {
      float v45 = *(float *)(v41 + 4 * v43 + 32);
      uint64_t v94 = (void *)v31;
      if (v44 >= *(void *)(v31 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v31 = (uint64_t)v94;
      }
      ++v43;
      *(void *)(v31 + 16) = v44 + 1;
      *(float *)(v31 + 4 * v44++ + 32) = (float)(v45 * 3.1416) / 180.0;
    }
    while (v42 != v43);
    swift_bridgeObjectRelease();
    uint64_t v1 = v90;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = MEMORY[0x263F8EE78];
  }
  if (v91 > 0 || v21 < 2) {
    goto LABEL_76;
  }
  if (v21 < 4)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v6, *v18, v18[1]);
  if (v87 > 0 || v88 < 2) {
    goto LABEL_79;
  }
  if (v88 < 4)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v34 = v47;
  specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v6, *v85, v85[1]);
  uint64_t v94 = v49;
  if (v86 > 0 || v28 < 2) {
    goto LABEL_81;
  }
  if (v28 >= 4)
  {
    specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)((uint64_t)v6, *v84, v84[1]);
    goto LABEL_59;
  }
LABEL_82:
  __break(1u);
  OUTLINED_FUNCTION_2_2();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static MLHandActionClassifier.randomShift(_:)()
{
  OUTLINED_FUNCTION_26_1();
  id v1 = v0;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-0.1, 0.1);
  double v3 = v2;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-0.1, 0.1);
  double v5 = v4;
  uint64_t v6 = (uint64_t)OUTLINED_FUNCTION_15_1();
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_7_2();
  if (v6) {
    goto LABEL_66;
  }
  id v8 = *(id *)(v7 + 32);
  while (1)
  {
    OUTLINED_FUNCTION_18_1();
    unint64_t v47 = (unint64_t)objc_msgSend((id)v6, sel_integerValue);

    id v9 = OUTLINED_FUNCTION_15_1();
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_14_1();
    if (v9) {
      MEMORY[0x22A6753B0](2, v10);
    }
    else {
      id v11 = *(id *)(v10 + 48);
    }
    OUTLINED_FUNCTION_18_1();
    unint64_t v48 = (unint64_t)objc_msgSend(v9, sel_integerValue);

    id v12 = OUTLINED_FUNCTION_15_1();
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v13 = objc_allocWithZone(MEMORY[0x263F00DA8]);
    id v14 = OUTLINED_FUNCTION_10_1();
    if (v6) {
      break;
    }
    id v15 = v14;
    uint64_t v16 = UnsafeMutableBufferPointer.init(_:)();
    uint64_t v18 = v17;
    id v1 = v1;
    uint64_t v19 = UnsafeMutableBufferPointer.init(_:)();
    if (v20 && v18)
    {
      if (v20 >= (uint64_t)v18) {
        uint64_t v20 = (uint64_t)v18;
      }
      specialized UnsafeMutablePointer.initialize(from:count:)(v19, v20);
    }
    unint64_t v21 = v47;
    if ((v47 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_69:
      __break(1u);
      break;
    }
    if (!v47) {
      return (uint64_t)v15;
    }
    if ((v48 & 0x8000000000000000) != 0) {
      goto LABEL_69;
    }
    uint64_t v22 = 0;
    while (v22 != v21)
    {
      if (v48)
      {
        uint64_t v23 = 0;
        while (1)
        {
          id v24 = OUTLINED_FUNCTION_9_1();
          uint64_t v6 = OUTLINED_FUNCTION_5_2();

          if ((v6 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_21_1();
          }
          else
          {
            OUTLINED_FUNCTION_27_1();
            if (!v25) {
              goto LABEL_54;
            }
            id v26 = *(id *)(v6 + 32);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v6 = (uint64_t)objc_msgSend(v18, sel_integerValue);

          uint64_t v27 = v22 * v6;
          if ((unsigned __int128)(v22 * (__int128)v6) >> 64 != (v22 * v6) >> 63) {
            break;
          }
          id v28 = OUTLINED_FUNCTION_9_1();
          uint64_t v6 = OUTLINED_FUNCTION_5_2();

          if ((v6 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_19_1();
          }
          else
          {
            OUTLINED_FUNCTION_4_2();
            if (!v29) {
              goto LABEL_56;
            }
            id v30 = *(id *)(v6 + 48);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v6 = (uint64_t)objc_msgSend(v18, sel_integerValue);

          OUTLINED_FUNCTION_17_1();
          if (!v32) {
            goto LABEL_55;
          }
          BOOL v33 = __OFADD__(v27, v31);
          uint64_t v34 = v27 + v31;
          if (v33) {
            goto LABEL_57;
          }
          id v35 = OUTLINED_FUNCTION_9_1();
          uint64_t v6 = OUTLINED_FUNCTION_5_2();

          if ((v6 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_21_1();
          }
          else
          {
            OUTLINED_FUNCTION_27_1();
            if (!v36) {
              goto LABEL_59;
            }
            id v37 = *(id *)(v6 + 32);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v6 = (uint64_t)objc_msgSend(v18, sel_integerValue);

          uint64_t v38 = v22 * v6;
          if ((unsigned __int128)(v22 * (__int128)v6) >> 64 != (v22 * v6) >> 63) {
            goto LABEL_58;
          }
          id v39 = OUTLINED_FUNCTION_9_1();
          uint64_t v6 = OUTLINED_FUNCTION_5_2();

          if ((v6 & 0xC000000000000001) != 0)
          {
            MEMORY[0x22A6753B0](1, v6);
          }
          else
          {
            if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
              goto LABEL_61;
            }
            id v40 = *(id *)(v6 + 40);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v6 = (uint64_t)objc_msgSend(v18, sel_integerValue);

          BOOL v33 = __OFADD__(v38, v6);
          uint64_t v41 = (char *)(v38 + v6);
          if (v33) {
            goto LABEL_60;
          }
          id v42 = OUTLINED_FUNCTION_9_1();
          uint64_t v6 = OUTLINED_FUNCTION_5_2();

          if ((v6 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_19_1();
          }
          else
          {
            OUTLINED_FUNCTION_4_2();
            if (!v29) {
              goto LABEL_63;
            }
            id v43 = *(id *)(v6 + 48);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v6 = (uint64_t)objc_msgSend(v18, sel_integerValue);

          OUTLINED_FUNCTION_17_1();
          if (!v32) {
            goto LABEL_62;
          }
          BOOL v33 = __OFADD__(v41, v44);
          float v45 = &v41[v44];
          if (v33) {
            goto LABEL_64;
          }
          ++v23;
          *(double *)(v16 + 8 * v34) = v3 + *(double *)(v16 + 8 * v34);
          *(double *)(v16 + 8 * (void)v45) = v5 + *(double *)(v16 + 8 * (void)v45);
          if ((char *)v48 == v23) {
            goto LABEL_51;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        break;
      }
LABEL_51:
      ++v22;
      unint64_t v21 = v47;
      if (v22 == v47) {
        return (uint64_t)v15;
      }
    }
    __break(1u);
LABEL_66:
    OUTLINED_FUNCTION_20_0();
  }
  OUTLINED_FUNCTION_2_2();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static MLHandActionClassifier.randomScale(_:)(id a1)
{
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.8, 1.2);
  double v3 = v2;
  uint64_t v4 = (uint64_t)OUTLINED_FUNCTION_15_1();
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_7_2();
  if (v4) {
    goto LABEL_66;
  }
  id v6 = *(id *)(v5 + 32);
  while (1)
  {
    OUTLINED_FUNCTION_18_1();
    unint64_t v45 = (unint64_t)objc_msgSend((id)v4, sel_integerValue);

    id v7 = OUTLINED_FUNCTION_15_1();
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_14_1();
    if (v7) {
      MEMORY[0x22A6753B0](2, v8);
    }
    else {
      id v9 = *(id *)(v8 + 48);
    }
    OUTLINED_FUNCTION_18_1();
    unint64_t v46 = (unint64_t)objc_msgSend(v7, sel_integerValue);

    id v10 = OUTLINED_FUNCTION_15_1();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v11 = objc_allocWithZone(MEMORY[0x263F00DA8]);
    id v12 = OUTLINED_FUNCTION_10_1();
    if (v4) {
      break;
    }
    id v13 = v12;
    uint64_t v14 = UnsafeMutableBufferPointer.init(_:)();
    uint64_t v16 = v15;
    a1 = a1;
    uint64_t v17 = UnsafeMutableBufferPointer.init(_:)();
    if (v18 && v16)
    {
      if (v18 >= (uint64_t)v16) {
        uint64_t v18 = (uint64_t)v16;
      }
      specialized UnsafeMutablePointer.initialize(from:count:)(v17, v18);
    }
    unint64_t v19 = v45;
    if ((v45 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_69:
      __break(1u);
      break;
    }
    if (!v45) {
      return (uint64_t)v13;
    }
    if ((v46 & 0x8000000000000000) != 0) {
      goto LABEL_69;
    }
    uint64_t v20 = 0;
    while (v20 != v19)
    {
      if (v46)
      {
        unint64_t v21 = 0;
        while (1)
        {
          id v22 = OUTLINED_FUNCTION_9_1();
          uint64_t v4 = OUTLINED_FUNCTION_5_2();

          if ((v4 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_21_1();
          }
          else
          {
            OUTLINED_FUNCTION_27_1();
            if (!v23) {
              goto LABEL_54;
            }
            id v24 = *(id *)(v4 + 32);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v4 = (uint64_t)objc_msgSend(v16, sel_integerValue);

          uint64_t v25 = v20 * v4;
          if ((unsigned __int128)(v20 * (__int128)v4) >> 64 != (v20 * v4) >> 63) {
            break;
          }
          id v26 = OUTLINED_FUNCTION_9_1();
          uint64_t v4 = OUTLINED_FUNCTION_5_2();

          if ((v4 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_19_1();
          }
          else
          {
            OUTLINED_FUNCTION_4_2();
            if (!v27) {
              goto LABEL_56;
            }
            id v28 = *(id *)(v4 + 48);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v4 = (uint64_t)objc_msgSend(v16, sel_integerValue);

          OUTLINED_FUNCTION_17_1();
          if (!v30) {
            goto LABEL_55;
          }
          BOOL v31 = __OFADD__(v25, v29);
          uint64_t v32 = v25 + v29;
          if (v31) {
            goto LABEL_57;
          }
          id v33 = OUTLINED_FUNCTION_9_1();
          uint64_t v4 = OUTLINED_FUNCTION_5_2();

          if ((v4 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_21_1();
          }
          else
          {
            OUTLINED_FUNCTION_27_1();
            if (!v34) {
              goto LABEL_59;
            }
            id v35 = *(id *)(v4 + 32);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v4 = (uint64_t)objc_msgSend(v16, sel_integerValue);

          uint64_t v36 = v20 * v4;
          if ((unsigned __int128)(v20 * (__int128)v4) >> 64 != (v20 * v4) >> 63) {
            goto LABEL_58;
          }
          id v37 = OUTLINED_FUNCTION_9_1();
          uint64_t v4 = OUTLINED_FUNCTION_5_2();

          if ((v4 & 0xC000000000000001) != 0)
          {
            MEMORY[0x22A6753B0](1, v4);
          }
          else
          {
            if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
              goto LABEL_61;
            }
            id v38 = *(id *)(v4 + 40);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v4 = (uint64_t)objc_msgSend(v16, sel_integerValue);

          BOOL v31 = __OFADD__(v36, v4);
          id v39 = (char *)(v36 + v4);
          if (v31) {
            goto LABEL_60;
          }
          id v40 = OUTLINED_FUNCTION_9_1();
          uint64_t v4 = OUTLINED_FUNCTION_5_2();

          if ((v4 & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_19_1();
          }
          else
          {
            OUTLINED_FUNCTION_4_2();
            if (!v27) {
              goto LABEL_63;
            }
            id v41 = *(id *)(v4 + 48);
          }
          OUTLINED_FUNCTION_6_2();
          uint64_t v4 = (uint64_t)objc_msgSend(v16, sel_integerValue);

          OUTLINED_FUNCTION_17_1();
          if (!v30) {
            goto LABEL_62;
          }
          BOOL v31 = __OFADD__(v39, v42);
          id v43 = &v39[v42];
          if (v31) {
            goto LABEL_64;
          }
          ++v21;
          *(double *)(v14 + 8 * v32) = v3 * *(double *)(v14 + 8 * v32);
          *(double *)(v14 + 8 * (void)v43) = v3 * *(double *)(v14 + 8 * (void)v43);
          if ((char *)v46 == v21) {
            goto LABEL_51;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        break;
      }
LABEL_51:
      ++v20;
      unint64_t v19 = v45;
      if (v20 == v45) {
        return (uint64_t)v13;
      }
    }
    __break(1u);
LABEL_66:
    OUTLINED_FUNCTION_20_0();
  }
  OUTLINED_FUNCTION_2_2();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static MLHandActionClassifier.timeInterpolate(_:)()
{
  OUTLINED_FUNCTION_26_1();
  uint64_t v60 = v1;
  uint64_t v61 = v2;
  uint64_t v4 = v3;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 0.2);
  double v6 = v5;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 1.0);
  double v8 = v7;
  uint64_t v9 = (uint64_t)&off_2647FE000;
  id v10 = objc_msgSend((id)v4, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_7_2();
  if (v0) {
    goto LABEL_68;
  }
  id v12 = *(id *)(v11 + 32);
  while (1)
  {
    id v13 = v12;
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v13, sel_integerValue);

    id v15 = [(id)v4 *(SEL *)(v9 + 2216)];
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_28_1();
    if (v15) {
      id v17 = (id)MEMORY[0x22A6753B0](1, v16);
    }
    else {
      id v17 = *(id *)(v16 + 40);
    }
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v19 = (uint64_t)objc_msgSend(v18, sel_integerValue);

    id v20 = [(id)v4 *(SEL *)(v9 + 2216)];
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v21 & 0xC000000000000001) == 0, v21);
    if ((v21 & 0xC000000000000001) != 0) {
      id v22 = (id)MEMORY[0x22A6753B0](2, v21);
    }
    else {
      id v22 = *(id *)(v21 + 48);
    }
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = (uint64_t)objc_msgSend(v23, sel_integerValue);

    uint64_t v25 = v19 * v24;
    if ((unsigned __int128)(v19 * (__int128)v24) >> 64 != (v19 * v24) >> 63)
    {
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    double v26 = v6 * (double)(uint64_t)v14;
    if ((~*(void *)&v26 & 0x7FF0000000000000) == 0) {
      goto LABEL_72;
    }
    if (v26 <= -9.22337204e18) {
      goto LABEL_73;
    }
    if (v26 >= 9.22337204e18) {
      goto LABEL_74;
    }
    uint64_t v57 = (void *)v4;
    uint64_t v27 = (uint64_t)v26;
    uint64_t v28 = MLMultiArray.doubleArray()();
    uint64_t v59 = v28;
    if (v27 < 1) {
      break;
    }
    if (!v25) {
      goto LABEL_76;
    }
    while (1)
    {
      uint64_t v29 = v59;
      uint64_t v30 = *(void *)(v59 + 16);
      uint64_t v31 = v30 / v25;
      uint64_t v9 = v30 / v25 - 1;
      if (v30 / v25 < 1) {
        break;
      }
      if (v30 / v25 == 1) {
        goto LABEL_57;
      }
      unint64_t v58 = 0;
      MEMORY[0x22A676230](&v58, 8);
      uint64_t v32 = ((unint64_t)v58 * (unsigned __int128)(unint64_t)v9) >> 64;
      if (v9 > (unint64_t)((void)v58 * v9))
      {
        unint64_t v33 = (1 - v31) % (unint64_t)v9;
        if (v33 > (uint64_t)v58 * v9)
        {
          do
          {
            unint64_t v58 = 0;
            MEMORY[0x22A676230](&v58, 8);
          }
          while (v33 > (uint64_t)v58 * v9);
          uint64_t v32 = ((unint64_t)v58 * (unsigned __int128)(unint64_t)v9) >> 64;
        }
      }
      uint64_t v34 = v32 + 1;
      uint64_t v4 = (v32 + 1) * v25;
      if ((unsigned __int128)((v32 + 1) * (__int128)v25) >> 64 != v4 >> 63) {
        goto LABEL_58;
      }
      uint64_t v35 = v32 * v25;
      if ((unsigned __int128)(v32 * (__int128)v25) >> 64 != (v32 * v25) >> 63) {
        goto LABEL_59;
      }
      uint64_t v9 = v4 + v25;
      if (__OFADD__(v4, v25)) {
        goto LABEL_60;
      }
      if (v9 < v4) {
        goto LABEL_61;
      }
      if (v4 < 0) {
        goto LABEL_62;
      }
      uint64_t v36 = *(void *)(v29 + 16);
      BOOL v37 = v36 < (unint64_t)v4 || v36 < v9;
      if (v37) {
        goto LABEL_63;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v38 = swift_dynamicCastClass();
      if (!v38)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = MEMORY[0x263F8EE78];
      }
      uint64_t v39 = *(void *)(v38 + 16);
      swift_release();
      if (v39 == v25)
      {
        uint64_t v4 = swift_dynamicCastClass();
        if (!v4)
        {
          swift_bridgeObjectRelease();
          uint64_t v4 = MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        specialized _copyCollectionToContiguousArray<A>(_:)();
        uint64_t v4 = v46;
      }
      swift_bridgeObjectRelease();
      uint64_t v9 = v35 + v25;
      if (__OFADD__(v35, v25)) {
        goto LABEL_64;
      }
      if (v9 < v35) {
        goto LABEL_65;
      }
      if (v35 < 0) {
        goto LABEL_66;
      }
      uint64_t v40 = *(void *)(v29 + 16);
      if (v40 < (unint64_t)v35 || v40 < v9) {
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v42 = swift_dynamicCastClass();
      if (!v42)
      {
        swift_bridgeObjectRelease();
        uint64_t v42 = MEMORY[0x263F8EE78];
      }
      uint64_t v43 = *(void *)(v42 + 16);
      swift_release();
      if (v43 == v25)
      {
        uint64_t v44 = swift_dynamicCastClass();
        if (!v44)
        {
          swift_bridgeObjectRelease();
          uint64_t v44 = MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        specialized _copyCollectionToContiguousArray<A>(_:)();
        uint64_t v44 = v47;
      }
      swift_bridgeObjectRelease();
      uint64_t v45 = static MLHandActionClassifier.generatePaddedFrame(lastFrame:currentFrame:frameLen:displaceScaleFactor:)(v44, v4, v25, v8);
      swift_release();
      swift_release();
      specialized Array.replaceSubrange<A>(_:with:)(v34, v34, v45);
      BOOL v37 = v27-- <= 1;
      if (v37)
      {
        uint64_t v48 = v59;
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    OUTLINED_FUNCTION_20_0();
  }
  uint64_t v48 = v28;
LABEL_51:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_2272CB490;
  if (!v25) {
    goto LABEL_75;
  }
  id v50 = (NSNumber *)v49;
  *(void *)(v49 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v48 + 16) / v25);
  v50[5].super.super.Class isa = NSNumber.init(integerLiteral:)(3).super.super.isa;
  v50[6].super.super.Class isa = NSNumber.init(integerLiteral:)(21).super.super.isa;
  unint64_t v58 = v50;
  specialized Array._endMutation()();
  id v51 = objc_msgSend(v57, sel_strides);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v48 = v52;
  }
  id v53 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v54 = OUTLINED_FUNCTION_8_2();
  if (v48 == -32)
  {
    id v55 = v54;
    swift_bridgeObjectRelease();
    return (uint64_t)v55;
  }
LABEL_77:
  OUTLINED_FUNCTION_2_2();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static MLHandActionClassifier.frameDrop(_:)()
{
  OUTLINED_FUNCTION_26_1();
  uint64_t v46 = v0;
  uint64_t v47 = v1;
  uint64_t v3 = v2;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 0.2);
  double v5 = v4;
  uint64_t v6 = (uint64_t)&off_2647FE000;
  id v7 = objc_msgSend(v3, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v8 & 0xC000000000000001) == 0, v8);
  if ((v8 & 0xC000000000000001) != 0) {
    goto LABEL_44;
  }
  id v9 = *(id *)(v8 + 32);
  while (1)
  {
    id v10 = v9;
    swift_bridgeObjectRelease();
    id v11 = objc_msgSend(v10, sel_integerValue);

    id v12 = [v3 *(SEL *)(v6 + 2216)];
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_28_1();
    if (v12) {
      id v14 = (id)MEMORY[0x22A6753B0](1, v13);
    }
    else {
      id v14 = *(id *)(v13 + 40);
    }
    id v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v16 = (uint64_t)objc_msgSend(v15, sel_integerValue);

    id v17 = [v3 *(SEL *)(v6 + 2216)];
    uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v18 & 0xC000000000000001) == 0, v18);
    if ((v18 & 0xC000000000000001) != 0) {
      id v19 = (id)MEMORY[0x22A6753B0](2, v18);
    }
    else {
      id v19 = *(id *)(v18 + 48);
    }
    id v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v21 = (uint64_t)objc_msgSend(v20, sel_integerValue);

    uint64_t v6 = v16 * v21;
    if ((unsigned __int128)(v16 * (__int128)v21) >> 64 != (v16 * v21) >> 63)
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_54;
    }
    double v22 = v5 * (double)(uint64_t)v11;
    if ((~*(void *)&v22 & 0x7FF0000000000000) == 0) {
      goto LABEL_48;
    }
    if (v22 <= -9.22337204e18) {
      goto LABEL_49;
    }
    if (v22 >= 9.22337204e18) {
      goto LABEL_50;
    }
    uint64_t v23 = (uint64_t)v22;
    uint64_t v24 = MLMultiArray.doubleArray()();
    if (v23 < 1) {
      break;
    }
    if (!v6) {
      goto LABEL_52;
    }
    while (1)
    {
      unint64_t v25 = *(void *)(v24 + 16) / v6;
      if ((v25 & 0x8000000000000000) != 0) {
        break;
      }
      if (!v25) {
        goto LABEL_38;
      }
      uint64_t v45 = 0;
      MEMORY[0x22A676230](&v45, 8);
      uint64_t v26 = ((unint64_t)v45 * (unsigned __int128)v25) >> 64;
      if (v25 > (unint64_t)v45 * v25)
      {
        unint64_t v27 = -(uint64_t)v25 % v25;
        if (v27 > (unint64_t)v45 * v25)
        {
          do
          {
            uint64_t v45 = 0;
            MEMORY[0x22A676230](&v45, 8);
          }
          while (v27 > (unint64_t)v45 * v25);
          uint64_t v26 = ((unint64_t)v45 * (unsigned __int128)v25) >> 64;
        }
      }
      uint64_t v28 = v26 + v6;
      if (__OFADD__(v26, v6)) {
        goto LABEL_39;
      }
      uint64_t v29 = -v6;
      if (v26 > v28) {
        goto LABEL_40;
      }
      uint64_t v30 = *(void *)(v24 + 16);
      if (v30 < v28) {
        goto LABEL_41;
      }
      if (__OFADD__(v30, v29)) {
        goto LABEL_42;
      }
      if (!swift_isUniquelyReferenced_nonNull_native() || v30 - v6 > *(void *)(v24 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v24 = v31;
      }
      if (v26 != v28)
      {
        uint64_t v32 = *(void *)(v24 + 16) - v28;
        if (v32 < 0) {
          goto LABEL_53;
        }
        memmove((void *)(v24 + 32 + 8 * v26), (const void *)(v24 + 32 + 8 * v28), 8 * v32);
        uint64_t v33 = *(void *)(v24 + 16);
        BOOL v34 = __OFADD__(v33, v29);
        uint64_t v35 = v33 - v6;
        if (v34) {
          goto LABEL_43;
        }
        *(void *)(v24 + 16) = v35;
      }
      if (v23-- <= 1) {
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    OUTLINED_FUNCTION_20_0();
  }
LABEL_32:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_2272CB490;
  if (!v6) {
    goto LABEL_51;
  }
  uint64_t v38 = (NSNumber *)v37;
  *(void *)(v37 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v24 + 16) / v6);
  v38[5].super.super.Class isa = NSNumber.init(integerLiteral:)(3).super.super.isa;
  v38[6].super.super.Class isa = NSNumber.init(integerLiteral:)(21).super.super.isa;
  uint64_t v45 = v38;
  specialized Array._endMutation()();
  id v39 = objc_msgSend(v3, sel_strides);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v24 = v40;
  }
  id v41 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v42 = OUTLINED_FUNCTION_8_2();
  if (v24 == -32)
  {
    id v43 = v42;
    swift_bridgeObjectRelease();
    return (uint64_t)v43;
  }
LABEL_54:
  OUTLINED_FUNCTION_2_2();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float a2, float a3)
{
  float v6 = a2;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    float v5 = (float)(a3 - a2) / (float)(a1 - 1);
    if ((a1 & 0x8000000000000000) == 0)
    {
      MEMORY[0x270FA5388](a1);
      v4[2] = &v6;
      v4[3] = &v5;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5((void (*)(void))partial apply for specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:), (uint64_t)v4, 0, v3);
      return;
    }
  }
  __break(1u);
}

float specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float a2, float a3)
{
  return (float)((float)a1 * a3) + a2;
}

uint64_t cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float (*a2)(float))
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v11;
    float v6 = (float *)(a1 + 32);
    unint64_t v7 = *(void *)(v11 + 16);
    do
    {
      float v8 = *v6;
      if (v7 >= *(void *)(v11 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      float v9 = a2(v8);
      *(void *)(v11 + 16) = v7 + 1;
      *(float *)(v11 + 4 * v7 + 32) = v9;
      ++v6;
      ++v7;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t specialized MutableCollection.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v4 = *(void *)(a3 + 16);
  if (v4 < result || (uint64_t)v4 < v3) {
    goto LABEL_11;
  }
  if ((v3 & 0x8000000000000000) == 0) {
    return swift_bridgeObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

void closure #3 in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, id a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a3 < 0) {
    goto LABEL_64;
  }
  if (a3)
  {
    if (a4 < 0)
    {
LABEL_65:
      __break(1u);
      return;
    }
    unint64_t v10 = 0;
    uint64_t v56 = a3;
    while (v10 != a3)
    {
      if (a4)
      {
        if (a6[2] < 2uLL) {
          goto LABEL_63;
        }
        uint64_t v11 = 0;
        uint64_t v59 = (void *)a6[5];
        uint64_t v60 = (void *)a6[4];
        while (1)
        {
          id v12 = objc_msgSend(a5, sel_strides);
          type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v13 & 0xC000000000000001) == 0, v13);
          id v14 = (v13 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A6753B0](0, v13) : *(id *)(v13 + 32);
          id v15 = v14;
          swift_bridgeObjectRelease();
          uint64_t v16 = (uint64_t)objc_msgSend(v15, sel_integerValue);

          uint64_t v17 = v10 * v16;
          if ((unsigned __int128)((uint64_t)v10 * (__int128)v16) >> 64 != (uint64_t)(v10 * v16) >> 63) {
            break;
          }
          id v18 = objc_msgSend(a5, sel_strides);
          uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v19 & 0xC000000000000001) == 0, v19);
          if ((v19 & 0xC000000000000001) != 0) {
            id v20 = (id)MEMORY[0x22A6753B0](2, v19);
          }
          else {
            id v20 = *(id *)(v19 + 48);
          }
          uint64_t v21 = v20;
          swift_bridgeObjectRelease();
          uint64_t v22 = (uint64_t)objc_msgSend(v21, sel_integerValue);

          uint64_t v23 = v11 * v22;
          if ((unsigned __int128)(v11 * (__int128)v22) >> 64 != (v11 * v22) >> 63) {
            goto LABEL_46;
          }
          BOOL v24 = __OFADD__(v17, v23);
          uint64_t v25 = v17 + v23;
          if (v24) {
            goto LABEL_47;
          }
          id v26 = objc_msgSend(a5, sel_strides);
          uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v27 & 0xC000000000000001) == 0, v27);
          if ((v27 & 0xC000000000000001) != 0) {
            id v28 = (id)MEMORY[0x22A6753B0](0, v27);
          }
          else {
            id v28 = *(id *)(v27 + 32);
          }
          uint64_t v29 = v28;
          swift_bridgeObjectRelease();
          uint64_t v30 = (uint64_t)objc_msgSend(v29, sel_integerValue);

          uint64_t v31 = v10 * v30;
          if ((unsigned __int128)((uint64_t)v10 * (__int128)v30) >> 64 != (uint64_t)(v10 * v30) >> 63) {
            goto LABEL_48;
          }
          id v32 = objc_msgSend(a5, sel_strides);
          uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v33 & 0xC000000000000001) == 0, v33);
          if ((v33 & 0xC000000000000001) != 0) {
            id v34 = (id)MEMORY[0x22A6753B0](1, v33);
          }
          else {
            id v34 = *(id *)(v33 + 40);
          }
          uint64_t v35 = v34;
          swift_bridgeObjectRelease();
          uint64_t v36 = (char *)objc_msgSend(v35, sel_integerValue);

          uint64_t v37 = &v36[v31];
          if (__OFADD__(v31, v36)) {
            goto LABEL_49;
          }
          id v38 = objc_msgSend(a5, sel_strides);
          uint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v39 & 0xC000000000000001) == 0, v39);
          if ((v39 & 0xC000000000000001) != 0) {
            id v40 = (id)MEMORY[0x22A6753B0](2, v39);
          }
          else {
            id v40 = *(id *)(v39 + 48);
          }
          id v41 = v40;
          swift_bridgeObjectRelease();
          uint64_t v42 = (uint64_t)objc_msgSend(v41, sel_integerValue);

          uint64_t v43 = v11 * v42;
          if ((unsigned __int128)(v11 * (__int128)v42) >> 64 != (v11 * v42) >> 63) {
            goto LABEL_50;
          }
          BOOL v24 = __OFADD__(v37, v43);
          uint64_t v44 = &v37[v43];
          if (v24) {
            goto LABEL_51;
          }
          unint64_t v45 = v60[2];
          if (!v45) {
            goto LABEL_52;
          }
          uint64_t v46 = v60[4];
          if (v10 >= *(void *)(v46 + 16)) {
            goto LABEL_53;
          }
          if (v45 < 2) {
            goto LABEL_54;
          }
          uint64_t v47 = v60[5];
          if (v10 >= *(void *)(v47 + 16)) {
            goto LABEL_55;
          }
          if (v10 >= *(void *)(*(void *)a7 + 16)) {
            goto LABEL_56;
          }
          unint64_t v48 = v59[2];
          if (!v48) {
            goto LABEL_57;
          }
          uint64_t v49 = v59[4];
          if (v10 >= *(void *)(v49 + 16)) {
            goto LABEL_58;
          }
          if (v48 < 2) {
            goto LABEL_59;
          }
          uint64_t v50 = v59[5];
          if (v10 >= *(void *)(v50 + 16)) {
            goto LABEL_60;
          }
          if (v10 >= *(void *)(*(void *)a8 + 16)) {
            goto LABEL_61;
          }
          ++v11;
          float v51 = *(double *)(a1 + 8 * v25);
          float v52 = *(double *)(a1 + 8 * (void)v44);
          float v53 = *(float *)(*(void *)a7 + 4 * v10 + 32)
              + (float)((float)(*(float *)(v46 + 4 * v10 + 32) * v51) + (float)(*(float *)(v47 + 4 * v10 + 32) * v52));
          float v54 = *(float *)(*(void *)a8 + 4 * v10 + 32)
              + (float)((float)(*(float *)(v49 + 4 * v10 + 32) * v51) + (float)(*(float *)(v50 + 4 * v10 + 32) * v52));
          *(double *)(a1 + 8 * v25) = v53;
          *(double *)(a1 + 8 * (void)v44) = v54;
          if (a4 == v11) {
            goto LABEL_43;
          }
        }
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        break;
      }
LABEL_43:
      ++v10;
      a3 = v56;
      if (v10 == v56) {
        return;
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
}

uint64_t MLMultiArray.doubleArray()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  MLMultiArray.withUnsafeBytes<A>(_:)();
  return v1;
}

uint64_t static MLHandActionClassifier.generatePaddedFrame(lastFrame:currentFrame:frameLen:displaceScaleFactor:)(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  if (a3 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = a3;
  if (!a3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v5 = result;
  if ((unint64_t)(a3 - 1) >= *(void *)(result + 16)) {
    goto LABEL_13;
  }
  if ((unint64_t)(a3 - 1) < *(void *)(a2 + 16))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v9 = v8;
    unint64_t v10 = (double *)(v5 + 32);
    uint64_t v11 = (double *)(a2 + 32);
    unint64_t v12 = *(void *)(v8 + 16);
    do
    {
      double v13 = *v10;
      double v14 = *v11;
      if (v12 >= *(void *)(v9 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v15;
      }
      *(void *)(v9 + 16) = v12 + 1;
      *(double *)(v9 + 8 * v12 + 32) = v13 + (v14 - v13) * a4;
      ++v11;
      ++v10;
      ++v12;
      --v4;
    }
    while (v4);
    return v9;
  }
LABEL_14:
  __break(1u);
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    unint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    unint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v25 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  if (v6)
  {
    unint64_t v7 = (float *)(a1 + 32);
    uint64_t v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = v6;
    unint64_t v10 = v4;
    unint64_t v11 = v5;
    unint64_t v12 = v5;
    while (v4)
    {
      if (!v11) {
        goto LABEL_22;
      }
      float v13 = *v7;
      float v14 = *v8;
      unint64_t v15 = *(void *)(v25 + 16);
      if (v15 >= *(void *)(v25 + 24) >> 1)
      {
        unint64_t v20 = v10;
        unint64_t v21 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v10 = v20;
        unint64_t v12 = v21;
      }
      --v11;
      *(void *)(v25 + 16) = v15 + 1;
      *(float *)(v25 + 4 * v15 + 32) = v13 * v14;
      --v4;
      ++v8;
      ++v7;
      if (!--v9) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = v4;
    unint64_t v12 = v5;
LABEL_13:
    if (v10 <= v12)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    while (v6 < v10)
    {
      if (v12 == v6) {
        goto LABEL_20;
      }
      if (v6 >= v12) {
        goto LABEL_24;
      }
      float v16 = *(float *)(v24 + 32 + 4 * v6);
      float v17 = *(float *)(v23 + 32 + 4 * v6);
      unint64_t v18 = *(void *)(v25 + 16);
      if (v18 >= *(void *)(v25 + 24) >> 1)
      {
        unint64_t v19 = v10;
        unint64_t v22 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v12 = v22;
        unint64_t v10 = v19;
      }
      ++v6;
      *(void *)(v25 + 16) = v18 + 1;
      *(float *)(v25 + 4 * v18 + 32) = v16 * v17;
      if (v10 == v6) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void *closure #1 in MLMultiArray.doubleArray()@<X0>(id a1@<X2>, void *result@<X0>, void *a3@<X8>)
{
  if (result)
  {
    uint64_t result = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)result, (uint64_t)objc_msgSend(a1, sel_count));
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22706FA7C()
{
  uint64_t v1 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_1(v8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v5 + v7 + v10) & ~v10;
  uint64_t v13 = *(void *)(v12 + 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  uint64_t v14 = v0 + v11;
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v17 = type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
        v19(v0 + v11, v17);
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v19(v14 + *(int *)(v20 + 48), v17);
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        goto LABEL_9;
      case 1u:
      case 2u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_8();
        uint64_t v15 = OUTLINED_FUNCTION_22_1();
        v16(v15);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v14, *(unsigned char *)(v14 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v14, *(unsigned char *)(v14 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        uint64_t v21 = OUTLINED_FUNCTION_22_1();
        v22(v21);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        goto LABEL_9;
      case 6u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_8();
        uint64_t v23 = OUTLINED_FUNCTION_22_1();
        v24(v23);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_89();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }

  return MEMORY[0x270FA0238](v0, ((v13 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v4 | v10 | 7);
}

uint64_t partial apply for closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_1(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_1(v10);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  unint64_t v15 = (v7 + v9 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = *(void *)(v2 + ((*(void *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(a1, v2 + v15, v16, a2);
}

unint64_t lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>;
  if (!lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LearningPhase and conformance LearningPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase;
  if (!lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase)
  {
    type metadata accessor for LearningPhase();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  aBlock[6] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a5)
  {
    aBlock[4] = a5;
    aBlock[5] = a6;
    aBlock[0] = (id)MEMORY[0x263EF8330];
    aBlock[1] = (id)1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ();
    aBlock[3] = &block_descriptor_1;
    uint64_t v13 = _Block_copy(aBlock);
    swift_release();
  }
  else
  {
    uint64_t v13 = 0;
  }
  aBlock[0] = 0;
  id v14 = objc_msgSend(v6, sel_initWithDataPointer_shape_dataType_strides_deallocator_error_, a1, v11.super.isa, a3, v12.super.isa, v13, aBlock);
  _Block_release(v13);

  if (v14)
  {
    id v15 = aBlock[0];
  }
  else
  {
    id v16 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v14;
}

unint64_t specialized Collection.randomElement<A>(using:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  unint64_t result = specialized RandomNumberGenerator.next<A>(upperBound:)(*(void *)(a2 + 16));
  if (result < v2) {
    return *(void *)(a2 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0;
    MEMORY[0x22A676230](&v3, 8);
    unint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0;
          MEMORY[0x22A676230](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v3 = v2 - 2;
  if (v2 >= 2)
  {
    unint64_t v4 = 0;
    while (1)
    {
      unint64_t v14 = 0;
      MEMORY[0x22A676230](&v14, 8);
      uint64_t v5 = (v14 * (unsigned __int128)v2) >> 64;
      if (v2 > v14 * v2)
      {
        unint64_t v6 = -(uint64_t)v2 % v2;
        if (v6 > v14 * v2)
        {
          do
          {
            unint64_t v14 = 0;
            MEMORY[0x22A676230](&v14, 8);
          }
          while (v6 > v14 * v2);
          uint64_t v5 = (v14 * (unsigned __int128)v2) >> 64;
        }
      }
      unint64_t v7 = v4 + v5;
      if (__OFADD__(v4, v5)) {
        break;
      }
      if (v4 != v7)
      {
        unint64_t v8 = *(void *)(v1 + 16);
        if (v4 >= v8) {
          goto LABEL_20;
        }
        if (v7 >= v8) {
          goto LABEL_21;
        }
        int v9 = *(_DWORD *)(v1 + 32 + 4 * v4);
        int v10 = *(_DWORD *)(v1 + 32 + 4 * v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          uint64_t v1 = v11;
        }
        unint64_t v12 = *(void *)(v1 + 16);
        if (v4 >= v12) {
          goto LABEL_22;
        }
        *(_DWORD *)(v1 + 32 + 4 * v4) = v10;
        if (v7 >= v12) {
          goto LABEL_23;
        }
        *(_DWORD *)(v1 + 32 + 4 * v7) = v9;
        *uint64_t v0 = v1;
      }
      --v2;
      if (v4++ == v3) {
        return;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::UInt64 v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v3 = v2 - 2;
  if (v2 < 2)
  {
LABEL_18:
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    unint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = MersenneTwisterGenerator.next()();
      unint64_t v6 = (v5 * (unsigned __int128)v2) >> 64;
      if (v2 > v5 * v2)
      {
        unint64_t v7 = -(uint64_t)v2 % v2;
        if (v7 > v5 * v2)
        {
          do
            unint64_t v8 = MersenneTwisterGenerator.next()();
          while (v7 > v8 * v2);
          unint64_t v6 = (v8 * (unsigned __int128)v2) >> 64;
        }
      }
      int v9 = v4 + v6;
      if (__OFADD__(v4, v6)) {
        break;
      }
      if (v4 != v9)
      {
        int v10 = *(void *)(v1 + 16);
        if (v4 >= v10) {
          goto LABEL_20;
        }
        if (v9 >= v10) {
          goto LABEL_21;
        }
        uint64_t v11 = *(void *)(v1 + 32 + 8 * v4);
        unint64_t v12 = *(void *)(v1 + 32 + 8 * v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          uint64_t v1 = v13;
        }
        unint64_t v14 = *(void *)(v1 + 16);
        if (v4 >= v14) {
          goto LABEL_22;
        }
        *(void *)(v1 + 32 + 8 * v4) = v12;
        if (v9 >= v14) {
          goto LABEL_23;
        }
        *(void *)(v1 + 32 + 8 * v9) = v11;
        *uint64_t v0 = v1;
      }
      --v2;
      if (v4++ == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  uint64_t v23 = v2 - 2;
  if (v2 >= 2)
  {
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v24 = 0;
      MEMORY[0x22A676230](&v24, 8);
      unint64_t v4 = (v24 * (unsigned __int128)v2) >> 64;
      if (v2 > v24 * v2)
      {
        uint64_t v5 = -(uint64_t)v2 % v2;
        if (v5 > v24 * v2)
        {
          do
          {
            uint64_t v24 = 0;
            MEMORY[0x22A676230](&v24, 8);
          }
          while (v5 > v24 * v2);
          unint64_t v4 = (v24 * (unsigned __int128)v2) >> 64;
        }
      }
      unint64_t v6 = v3 + v4;
      if (__OFADD__(v3, v4)) {
        break;
      }
      if (v3 != v6)
      {
        unint64_t v7 = *(void *)(v1 + 16);
        if (v3 >= v7) {
          goto LABEL_20;
        }
        if (v6 >= v7) {
          goto LABEL_21;
        }
        unint64_t v8 = (uint64_t *)(v1 + 32 + 32 * v3);
        int v9 = v8[1];
        int v10 = v8[2];
        uint64_t v11 = v8[3];
        unint64_t v12 = (uint64_t *)(v1 + 32 + 32 * v6);
        uint64_t v13 = v12[1];
        unint64_t v22 = *v12;
        unint64_t v14 = v12[3];
        uint64_t v20 = *v8;
        uint64_t v21 = v12[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          uint64_t v1 = v15;
        }
        if (v3 >= *(void *)(v1 + 16)) {
          goto LABEL_22;
        }
        id v16 = (void *)(v1 + 32 + 32 * v3);
        *id v16 = v22;
        v16[1] = v13;
        int v16[2] = v21;
        v16[3] = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v6 >= *(void *)(v1 + 16)) {
          goto LABEL_23;
        }
        uint64_t v17 = (void *)(v1 + 32 + 32 * v6);
        *uint64_t v17 = v20;
        v17[1] = v9;
        v17[2] = v10;
        v17[3] = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *unint64_t v19 = v1;
      }
      --v2;
      if (v3++ == v23) {
        return;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

void specialized static BinaryFloatingPoint<>.random<A>(in:using:)(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0) {
    specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  }
  else {
    __break(1u);
  }
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = v9;
  }
  int v10 = (char *)(v4 + 32 + 16 * v6);
  unint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  unint64_t result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
LABEL_13:
    uint64_t *v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (__OFADD__(v6, v11))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v6 + v11 > *(void *)(v5 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v12;
  }
  BOOL v13 = (char *)(v5 + 32 + 8 * a1);
  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v5 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + 8 * a2), v14 - a2, &v13[8 * v10]);
  uint64_t v15 = *(void *)(v5 + 16);
  BOOL v16 = __OFADD__(v15, v11);
  uint64_t v17 = v15 + v11;
  if (v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(void *)(v5 + 16) = v17;
LABEL_13:
  if (!v10)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return;
  }
  if (*(void *)(a3 + 16) == v10)
  {
    memcpy(v13, (const void *)(a3 + 32), 8 * v10);
    goto LABEL_16;
  }
LABEL_24:
  __break(1u);
}

void specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  float v6 = specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(*a1, *a2, *a3);
  if (!v4) {
    *a4 = v6;
  }
}

void partial apply for specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t *a1@<X0>, float *a2@<X8>)
{
  specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(a1, *(float **)(v2 + 16), *(float **)(v2 + 24), a2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void *partial apply for closure #1 in MLMultiArray.doubleArray()@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in MLMultiArray.doubleArray()(*(id *)(v2 + 16), a1, a2);
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return v0;
}

void OUTLINED_FUNCTION_3_2(unint64_t a1@<X8>)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_6_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

id OUTLINED_FUNCTION_8_2()
{
  return @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(v2, v1, 65600, v0, 0, 0);
}

id OUTLINED_FUNCTION_9_1()
{
  return [v1 (SEL)(v0 + 2156)];
}

id OUTLINED_FUNCTION_10_1()
{
  return @nonobjc MLMultiArray.init(shape:dataType:)(v0, 65600);
}

unint64_t OUTLINED_FUNCTION_13_0()
{
  uint64_t v2 = *(void *)(v0 - 112);
  return specialized MutableCollection.subscript.getter(0, 1, v2);
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v0 & 0xC000000000000001) == 0, v0);
}

id OUTLINED_FUNCTION_15_1()
{
  return [v1 (SEL)(v0 + 3608)];
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_19_1()
{
  JUMPOUT(0x22A6753B0);
}

void OUTLINED_FUNCTION_20_0()
{
  JUMPOUT(0x22A6753B0);
}

void OUTLINED_FUNCTION_21_1()
{
  JUMPOUT(0x22A6753B0);
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v0 & 0xC000000000000001) == 0, v0);
}

void OUTLINED_FUNCTION_29_1()
{
  *(void *)(v0 + 16) = v1;
}

uint64_t InteractionTableBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InteractionTableBuilder()
{
  return self;
}

uint64_t MLImageClassifier.CustomFeatureExtractor.modelPath.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);

  return v5(a1, v1, v3);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.modelPath.setter(uint64_t a1)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);

  return v5(v1, a1, v3);
}

uint64_t (*MLImageClassifier.CustomFeatureExtractor.modelPath.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLImageClassifier.CustomFeatureExtractor.outputName.getter()
{
  OUTLINED_FUNCTION_36_1();
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for MLImageClassifier.CustomFeatureExtractor(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLImageClassifier.CustomFeatureExtractor);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.outputName.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_36_1();
  float v6 = (void *)(v2 + v5);
  uint64_t result = swift_bridgeObjectRelease();
  *float v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MLImageClassifier.CustomFeatureExtractor.outputName.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLImageClassifier.CustomFeatureExtractor.init(modelPath:outputName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  OUTLINED_FUNCTION_36_1();
  uint64_t v9 = (void *)(a4 + v8);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(a4, a1);
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.CustomFeatureExtractor.validate()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20));
  unint64_t v2 = v1[1];
  if (v2
    && ((uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL, (v2 & 0x2000000000000000) != 0) ? (v4 = HIBYTE(v2) & 0xF) : (v4 = v3), !v4))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v12 = 0xD000000000000034;
    unint64_t v11 = 0x80000002272D4770;
  }
  else
  {
    id v5 = objc_msgSend(self, sel_defaultManager);
    uint64_t v6 = URL.path.getter();
    uint64_t v7 = (void *)MEMORY[0x22A674AE0](v6);
    swift_bridgeObjectRelease();
    unsigned int v8 = objc_msgSend(v5, sel_isReadableFileAtPath_, v7);

    if (v8) {
      return;
    }
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    strcpy((char *)v13, "The model at ");
    HIWORD(v13[1]) = -4864;
    v9._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_1();
    v10._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v10);
    unint64_t v11 = v13[1];
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v12 = v13[0];
  }
  *(void *)(v12 + 8) = v11;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(unsigned char *)(v12 + 48) = 0;
  swift_willThrow();
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildTransformer()(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for MLModelImageFeatureExtractor();
  v2[6] = v3;
  OUTLINED_FUNCTION_1(v3);
  v2[7] = v4;
  v2[8] = OUTLINED_FUNCTION_5();
  uint64_t v5 = type metadata accessor for ImageScaler();
  v2[9] = v5;
  OUTLINED_FUNCTION_1(v5);
  v2[10] = v6;
  v2[11] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for FeatureType();
  v2[12] = v7;
  OUTLINED_FUNCTION_1(v7);
  v2[13] = v8;
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?);
  OUTLINED_FUNCTION_17(v9);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for FeatureType.ImageParameters();
  v2[20] = v10;
  OUTLINED_FUNCTION_1(v10);
  v2[21] = v11;
  v2[22] = OUTLINED_FUNCTION_5();
  uint64_t v12 = type metadata accessor for Model();
  v2[23] = v12;
  OUTLINED_FUNCTION_1(v12);
  v2[24] = v13;
  v2[25] = OUTLINED_FUNCTION_5();
  return MEMORY[0x270FA2498](MLImageClassifier.CustomFeatureExtractor.buildTransformer(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 216) = a1;
  *(void *)(v3 + 224) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = MLImageClassifier.CustomFeatureExtractor.buildTransformer();
  }
  else {
    uint64_t v4 = MLImageClassifier.CustomFeatureExtractor.buildTransformer();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildTransformer()()
{
  MLImageClassifier.CustomFeatureExtractor.buildModel()(*(void *)(v0 + 200));
  type metadata accessor for MLModel();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = MLImageClassifier.CustomFeatureExtractor.buildTransformer();
  uint64_t v2 = *(void *)(v0 + 200);
  return static MLModel.compile(_:)(v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  void (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v1 = v0[19];
  uint64_t v2 = Model.inputs.getter();
  specialized Collection.first.getter(v2, v1);
  swift_bridgeObjectRelease();
  type metadata accessor for FeatureDescription();
  uint64_t result = OUTLINED_FUNCTION_15_2(v1);
  if (v4)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[13];
  FeatureDescription.type.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v5, v6) != *MEMORY[0x263F531C0])
  {
    id v28 = v0[16];
    OUTLINED_FUNCTION_38_0();
    v29();
    OUTLINED_FUNCTION_22_2();
    uint64_t v31 = *(void (**)(uint64_t))(v30 + 8);
    id v32 = OUTLINED_FUNCTION_35_1();
    v31(v32);
    _StringGuts.grow(_:)(50);
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    OUTLINED_FUNCTION_20_1();
    v33._uint64_t countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v33);
    id v34 = Model.inputs.getter();
    specialized Collection.first.getter(v34, v28);
    swift_bridgeObjectRelease();
    uint64_t result = OUTLINED_FUNCTION_15_2(v28);
    if (!v4)
    {
      uint64_t v35 = (void *)v0[27];
      uint64_t v36 = v0[24];
      uint64_t v49 = v0[23];
      float v51 = v0[25];
      FeatureDescription.type.getter();
      uint64_t v37 = OUTLINED_FUNCTION_35_1();
      v31(v37);
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_38_0();
      v38();
      v39._uint64_t countAndFlagsBits = 0x64616574736E6920;
      v39._id object = (void *)0xE90000000000002ELL;
      String.append(_:)(v39);
      id v41 = v0[2];
      id v40 = v0[3];
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v42 = v41;
      *(void *)(v42 + 8) = v40;
      *(_OWORD *)(v42 + 16) = 0u;
      *(_OWORD *)(v42 + 32) = 0u;
      *(unsigned char *)(v42 + 48) = 2;
      swift_willThrow();

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v51, v49);
      goto LABEL_9;
    }
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v9 = v0[21];
  uint64_t v8 = v0[22];
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[15];
  (*(void (**)(uint64_t, void))(v0[13] + 96))(v12, v0[12]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v12, v10);
  OUTLINED_FUNCTION_22_2();
  uint64_t v14 = *(void (**)(void))(v13 + 8);
  OUTLINED_FUNCTION_25_2();
  v14();
  FeatureType.ImageParameters.width.getter();
  FeatureType.ImageParameters.height.getter();
  ImageScaler.init(targetSize:)();
  uint64_t v15 = Model.inputs.getter();
  specialized Collection.first.getter(v15, v11);
  swift_bridgeObjectRelease();
  uint64_t result = OUTLINED_FUNCTION_15_2(v11);
  if (v4) {
    goto LABEL_15;
  }
  BOOL v16 = v0[17];
  FeatureDescription.name.getter();
  OUTLINED_FUNCTION_25_2();
  v14();
  uint64_t v17 = Model.outputs.getter();
  specialized Collection.first.getter(v17, v16);
  swift_bridgeObjectRelease();
  uint64_t result = OUTLINED_FUNCTION_15_2(v16);
  if (v4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v19 = (void *)v0[27];
  uint64_t v18 = v0[28];
  FeatureDescription.name.getter();
  OUTLINED_FUNCTION_25_2();
  v14();
  objc_msgSend(objc_allocWithZone(MEMORY[0x263F00628]), sel_init);
  uint64_t v20 = v19;
  MLModelImageFeatureExtractor.init(model:inputName:outputName:context:)();
  uint64_t v21 = (void *)v0[27];
  unint64_t v22 = v0[22];
  uint64_t v23 = v0[21];
  uint64_t v50 = v0[20];
  if (!v18)
  {
    unint64_t v45 = v0[10];
    uint64_t v44 = v0[11];
    uint64_t v46 = v0[9];
    Transformer.appending<A>(_:)();

    OUTLINED_FUNCTION_23_1();
    v47();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v50);
    OUTLINED_FUNCTION_38_0();
    v48();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    goto LABEL_10;
  }
  uint64_t v24 = v0[10];
  uint64_t v25 = v0[11];
  id v26 = v0[9];

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v50);
  OUTLINED_FUNCTION_38_0();
  v27();
LABEL_9:
  OUTLINED_FUNCTION_14_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
LABEL_10:
  return v43();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  OUTLINED_FUNCTION_14_2();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v184 = a1;
  uint64_t v180 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  OUTLINED_FUNCTION_0();
  uint64_t v179 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v178 = v5;
  OUTLINED_FUNCTION_65();
  uint64_t v183 = type metadata accessor for FeatureType.ShapedArrayParameters();
  OUTLINED_FUNCTION_0();
  uint64_t v182 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v181 = v8;
  OUTLINED_FUNCTION_65();
  uint64_t v176 = type metadata accessor for NeuralNetwork.Layer.FlattenParameters.ChannelLayout();
  OUTLINED_FUNCTION_0();
  uint64_t v175 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v174 = v11;
  OUTLINED_FUNCTION_65();
  uint64_t v189 = type metadata accessor for NeuralNetwork.Layer();
  OUTLINED_FUNCTION_0();
  uint64_t v193 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v185 = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer?);
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v19);
  v190 = (char *)&v164 - v20;
  OUTLINED_FUNCTION_65();
  uint64_t v196 = type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_0();
  uint64_t v202 = v21;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v23);
  uint64_t v194 = (char *)&v164 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?);
  uint64_t v26 = OUTLINED_FUNCTION_17(v25);
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_33_0();
  uint64_t v195 = v27;
  OUTLINED_FUNCTION_65();
  type metadata accessor for NeuralNetworkRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v187 = v29;
  uint64_t v188 = v28;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_33_0();
  uint64_t v186 = v30;
  OUTLINED_FUNCTION_65();
  uint64_t v192 = type metadata accessor for NeuralNetworkClassifier();
  OUTLINED_FUNCTION_0();
  uint64_t v200 = v31;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_33_0();
  uint64_t v191 = v33;
  OUTLINED_FUNCTION_65();
  uint64_t v197 = type metadata accessor for NeuralNetwork();
  OUTLINED_FUNCTION_0();
  uint64_t v199 = v34;
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_33_0();
  uint64_t v198 = v36;
  OUTLINED_FUNCTION_65();
  uint64_t v201 = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v203 = v37;
  uint64_t v39 = MEMORY[0x270FA5388](v38);
  id v41 = (char *)&v164 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v164 - v42;
  uint64_t v44 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v46 = v45;
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_3_0();
  uint64_t v50 = v49 - v48;
  uint64_t v51 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v53 = v52;
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_3_0();
  uint64_t v57 = v56 - v55;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v50, v2, v44);
  uint64_t v58 = v204;
  uint64_t result = Model.init(contentsOf:)();
  if (v58) {
    return result;
  }
  uint64_t v61 = v198;
  uint64_t v60 = v199;
  uint64_t v170 = 0;
  uint64_t v62 = v200;
  uint64_t v168 = v2;
  v167 = v41;
  Model.kind.getter();
  int v63 = (*(uint64_t (**)(char *, uint64_t))(v203 + 88))(v43, v201);
  unsigned int v64 = *MEMORY[0x263F533B8];
  uint64_t v204 = v57;
  if (v63 == v64)
  {
    unsigned int v166 = v64;
    uint64_t v65 = OUTLINED_FUNCTION_7_3();
    v66(v65);
    uint64_t v67 = v197;
    OUTLINED_FUNCTION_26_2();
    v68();
    uint64_t v69 = NeuralNetwork.layers.getter();
    uint64_t v169 = NeuralNetwork.preprocessors.getter();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v67);
    uint64_t v70 = v53;
    uint64_t v71 = v51;
LABEL_6:
    uint64_t v77 = v202;
    goto LABEL_7;
  }
  uint64_t v70 = v53;
  uint64_t v71 = v51;
  if (v63 == *MEMORY[0x263F53438])
  {
    unsigned int v166 = v64;
    uint64_t v72 = OUTLINED_FUNCTION_7_3();
    v73(v72);
    uint64_t v75 = v191;
    uint64_t v74 = v192;
    OUTLINED_FUNCTION_26_2();
    v76();
    uint64_t v69 = NeuralNetworkClassifier.layers.getter();
    uint64_t v169 = NeuralNetworkClassifier.preprocessors.getter();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v75, v74);
    goto LABEL_6;
  }
  uint64_t v77 = v202;
  if (v63 != *MEMORY[0x263F53428])
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_10_2();
    *uint64_t v121 = v120 + 57;
    v121[1] = 0x80000002272D45A0;
    OUTLINED_FUNCTION_4_3(v122, (uint64_t)v121);
    OUTLINED_FUNCTION_23_1();
    v123();
    OUTLINED_FUNCTION_38_0();
    return v124();
  }
  unsigned int v166 = v64;
  uint64_t v108 = OUTLINED_FUNCTION_7_3();
  v109(v108);
  uint64_t v110 = v186;
  uint64_t v111 = v187;
  uint64_t v112 = v188;
  OUTLINED_FUNCTION_26_2();
  v113();
  uint64_t v69 = NeuralNetworkRegressor.layers.getter();
  uint64_t v169 = NeuralNetworkRegressor.preprocessors.getter();
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v112);
LABEL_7:
  uint64_t v78 = *(void *)(Model.inputs.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v79 = v170;
  if (v78 != 1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_2();
    uint64_t v205 = 0;
    unint64_t v206 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    OUTLINED_FUNCTION_20_1();
    String.append(_:)(v100);
    uint64_t v101 = *(void *)(Model.inputs.getter() + 16);
    swift_bridgeObjectRelease();
    uint64_t v207 = v101;
    v102._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v102);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_2();
    uint64_t v103 = v205;
    unint64_t v104 = v206;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v105 = OUTLINED_FUNCTION_85();
    void *v106 = v103;
    v106[1] = v104;
    OUTLINED_FUNCTION_4_3(v105, (uint64_t)v106);
LABEL_17:
    OUTLINED_FUNCTION_23_1();
    return v107();
  }
  uint64_t v165 = v70;
  uint64_t v164 = v71;
  uint64_t v80 = Model.inputs.getter();
  uint64_t v81 = v195;
  specialized Collection.first.getter(v80, v195);
  swift_bridgeObjectRelease();
  uint64_t v82 = type metadata accessor for FeatureDescription();
  if (__swift_getEnumTagSinglePayload(v81, 1, v82) == 1)
  {
    __break(1u);
    goto LABEL_45;
  }
  id v83 = v194;
  FeatureDescription.type.getter();
  uint64_t v84 = v196;
  if ((*(unsigned int (**)(char *, uint64_t))(v77 + 88))(v83, v196) != *MEMORY[0x263F531C0])
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_2();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v83, v84);
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_25_0();
    v114();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_10_2();
    *uint64_t v116 = v115 - 15;
    v116[1] = 0x80000002272D4640;
    OUTLINED_FUNCTION_4_3(v117, (uint64_t)v116);
    OUTLINED_FUNCTION_24_2();
    uint64_t v119 = v204;
    return v118(v119, v164);
  }
  (*(void (**)(char *, uint64_t))(v77 + 8))(v83, v84);
  uint64_t v85 = *(void *)(v82 - 8);
  OUTLINED_FUNCTION_25_0();
  v86();
  uint64_t v87 = (uint64_t *)(v168 + *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20));
  uint64_t v88 = v87[1];
  if (v88)
  {
    uint64_t v89 = v204;
    uint64_t v90 = *v87;
    swift_bridgeObjectRetain();
    uint64_t v91 = swift_bridgeObjectRetain();
    uint64_t v92 = specialized Collection.firstIndex(where:)(v91, v90, v88);
    char v94 = v93;
    swift_bridgeObjectRelease();
    uint64_t v95 = v193;
    if ((v94 & 1) == 0)
    {
      uint64_t v199 = v85;
      unint64_t v96 = v92 + 1;
      uint64_t v97 = v165;
      if (__OFADD__(v92, 1))
      {
        __break(1u);
      }
      else if ((v96 & 0x8000000000000000) == 0)
      {
        uint64_t v98 = (uint64_t)v190;
        if (*(void *)(v69 + 16) >= v96)
        {
          uint64_t v99 = specialized Array.init<A>(_:)(v69, v69 + ((*(unsigned __int8 *)(v193 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80)), 0, (2 * v96) | 1);
          goto LABEL_23;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      __break(1u);
      goto LABEL_42;
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_2();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_10_2();
    *uint64_t v149 = v150;
    v149[1] = 0x80000002272D46F0;
    OUTLINED_FUNCTION_4_3(v151, (uint64_t)v149);
    OUTLINED_FUNCTION_24_2();
    uint64_t v119 = v89;
    return v118(v119, v164);
  }
  uint64_t v199 = v85;
  uint64_t v95 = v193;
  uint64_t v99 = v69;
  uint64_t v98 = (uint64_t)v190;
LABEL_23:
  if (!*(void *)(v99 + 16))
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_27_2();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_10_2();
    *uint64_t v153 = v154 - 1;
    v153[1] = 0x80000002272D46B0;
LABEL_39:
    OUTLINED_FUNCTION_4_3(v152, (uint64_t)v153);
    goto LABEL_17;
  }
  uint64_t v200 = v99;
  specialized BidirectionalCollection.last.getter(v99);
  OUTLINED_FUNCTION_32_1(v98, 1);
  if (v125)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v126 = NeuralNetwork.Layer.outputNames.getter();
  v127 = *(void (**)(void))(v95 + 8);
  OUTLINED_FUNCTION_11_1();
  v127();
  uint64_t v128 = *(void *)(v126 + 16);
  swift_bridgeObjectRelease();
  if (v128 != 1)
  {
    OUTLINED_FUNCTION_27_2();
    uint64_t v205 = 0;
    unint64_t v206 = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    OUTLINED_FUNCTION_20_1();
    v155._uint64_t countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v155);
    uint64_t v156 = v172;
    specialized BidirectionalCollection.last.getter(v200);
    uint64_t result = OUTLINED_FUNCTION_32_1(v156, 1);
    if (v125)
    {
LABEL_49:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v157 = NeuralNetwork.Layer.outputNames.getter();
    OUTLINED_FUNCTION_11_1();
    v127();
    uint64_t v158 = *(void *)(v157 + 16);
    swift_bridgeObjectRelease();
    uint64_t v207 = v158;
    v159._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v159);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_2();
    uint64_t v160 = v205;
    unint64_t v161 = v206;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v152 = OUTLINED_FUNCTION_85();
    *uint64_t v153 = v160;
    v153[1] = v161;
    goto LABEL_39;
  }
  uint64_t v170 = v79;
  uint64_t v205 = 0;
  unint64_t v206 = 0xE000000000000000;
  uint64_t v129 = v171;
  uint64_t v130 = v200;
  specialized BidirectionalCollection.last.getter(v200);
  OUTLINED_FUNCTION_32_1(v129, 1);
  if (v125)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v131 = NeuralNetwork.Layer.name.getter();
  uint64_t v133 = v132;
  OUTLINED_FUNCTION_11_1();
  v127();
  v134._uint64_t countAndFlagsBits = v131;
  v134._id object = v133;
  String.append(_:)(v134);
  swift_bridgeObjectRelease();
  v135._uint64_t countAndFlagsBits = 0x6E657474616C46;
  v135._id object = (void *)0xE700000000000000;
  String.append(_:)(v135);
  uint64_t v136 = v173;
  specialized BidirectionalCollection.last.getter(v130);
  OUTLINED_FUNCTION_32_1(v136, 1);
  if (v125)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v137 = NeuralNetwork.Layer.outputNames.getter();
  OUTLINED_FUNCTION_11_1();
  v127();
  if (!*(void *)(v137 + 16))
  {
LABEL_48:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v175 + 104))(v174, *MEMORY[0x263F53228], v176);
  static NeuralNetwork.Layer.flatten(name:inputName:outputName:targetChannelLayout:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_38_0();
  v138();
  uint64_t v139 = v200;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v97 = v177;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_43:
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v139 = v162;
  }
  uint64_t v141 = v183;
  uint64_t v142 = v182;
  uint64_t v143 = v193;
  unint64_t v144 = *(void *)(v139 + 16);
  uint64_t v145 = v139;
  if (v144 >= *(void *)(v139 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v145 = v163;
  }
  *(void *)(v145 + 16) = v144 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v143 + 32))(v145+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(void *)(v143 + 72) * v144, v185, v189);
  uint64_t v146 = v181;
  FeatureType.ShapedArrayParameters.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v179 + 104))(v178, *MEMORY[0x263F531A0], v180);
  FeatureType.ShapedArrayParameters.dataType.setter();
  Model.init()();
  Model.specificationVersion.getter();
  Model.specificationVersion.setter();
  Model.inputs.getter();
  Model.inputs.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB370;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v142 + 16))(v97, v146, v141);
  (*(void (**)(uint64_t, void, uint64_t))(v202 + 104))(v97, *MEMORY[0x263F53148], v196);
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  v147 = v167;
  NeuralNetwork.init(layers:preprocessors:)();
  (*(void (**)(char *, void, uint64_t))(v203 + 104))(v147, v166, v201);
  Model.kind.setter();
  (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v146, v141);
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_25_0();
  return v148();
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(type metadata accessor for NeuralNetwork.Layer() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    while (NeuralNetwork.Layer.name.getter() != a2 || v11 != a3)
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_13;
      }
      ++v7;
      v9 += v10;
      if (v4 == v7)
      {
        uint64_t v7 = 0;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.FeatureExtractorType.validate()()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  uint64_t v2 = OUTLINED_FUNCTION_17(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = v4 - v3;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_12_1();
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v0, v5);
    MLImageClassifier.CustomFeatureExtractor.validate()();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor(v5, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else if ((*(unsigned char *)(v0 + 8) & 1) == 0 {
         && (specialized Sequence<>.contains(_:)(*(void *)v0, (uint64_t)&outlined read-only object #0 of MLImageClassifier.FeatureExtractorType.validate()) & 1) == 0)
  }
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_1();
    v10._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v10);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v11 = 0x6E6F697369766552;
    *(void *)(v11 + 8) = 0xE900000000000020;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(unsigned char *)(v11 + 48) = 0;
    swift_willThrow();
  }
}

uint64_t MLImageClassifier.FeatureExtractorType.description.getter()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_1(v7, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v0, (uint64_t)v4);
    uint64_t v8 = (unint64_t *)&v4[*(int *)(v1 + 20)];
    if (v8[1]) {
      unint64_t v9 = *v8;
    }
    else {
      unint64_t v9 = OUTLINED_FUNCTION_30_1();
    }
    OUTLINED_FUNCTION_5_3(v9);
    uint64_t v5 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v4, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  return v5;
}

uint64_t type metadata accessor for MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLImageClassifier.FeatureExtractorType);
}

uint64_t type metadata accessor for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MLImageClassifier.FeatureExtractorType.debugDescription.getter()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_13_1(v7, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v0, (uint64_t)v4);
    uint64_t v8 = (unint64_t *)&v4[*(int *)(v1 + 20)];
    if (v8[1]) {
      unint64_t v9 = *v8;
    }
    else {
      unint64_t v9 = OUTLINED_FUNCTION_30_1();
    }
    OUTLINED_FUNCTION_5_3(v9);
    uint64_t v5 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v4, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  return v5;
}

uint64_t MLImageClassifier.FeatureExtractorType.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = OUTLINED_FUNCTION_12_1();
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v8, v9);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v1, (uint64_t)v6);
    uint64_t v11 = (unint64_t *)&v6[*(int *)(v3 + 20)];
    if (v11[1])
    {
      unint64_t v12 = *v11;
      unint64_t v13 = v11[1];
    }
    else
    {
      unint64_t v13 = 0x80000002272D4550;
      unint64_t v12 = 0xD000000000000015;
    }
    strcpy((char *)v17, "Custom model: ");
    HIBYTE(v17[1]) = -18;
    unint64_t v16 = v13;
    String.append(_:)(*(Swift::String *)&v12);
    uint64_t v15 = v17[0];
    unint64_t v14 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v6, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    unint64_t v14 = 0xEA0000000000746ELL;
    uint64_t v15 = 0x697250656E656353;
  }
  a1[3] = MEMORY[0x263F8D310];
  *a1 = v15;
  a1[1] = v14;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.FeatureExtractorType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      uint64_t v9 = (uint64_t *)((char *)a1 + v8);
      Swift::String v10 = (uint64_t *)((char *)a2 + v8);
      uint64_t v11 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = *((void *)v9 + 1);
    *(void *)uint64_t v8 = *(void *)v9;
    *((void *)v8 + 1) = v10;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = *((void *)v9 + 1);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of MLImageClassifier.CustomFeatureExtractor(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

char *initializeWithTake for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
      *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLImageClassifier.FeatureExtractorType()
{
  uint64_t result = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.CustomFeatureExtractor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227073A6C);
}

uint64_t sub_227073A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227073B1C);
}

void sub_227073B1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

uint64_t type metadata completion function for MLImageClassifier.CustomFeatureExtractor()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t type metadata accessor for MLModel()
{
  unint64_t result = lazy cache variable for type metadata for MLModel;
  if (!lazy cache variable for type metadata for MLModel)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLModel);
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  type metadata accessor for NeuralNetwork.Layer();
  OUTLINED_FUNCTION_8();
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 32);
  uint64_t v9 = v8;
  unint64_t v10 = v5
      + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * a1;

  return v7(v10, a2, v9);
}

uint64_t OUTLINED_FUNCTION_4_3(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 2;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_5_3(uint64_t a1)
{
  strcpy((char *)(v2 - 64), "Custom model: ");
  *(unsigned char *)(v2 - 49) = -18;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_1@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLImageClassifier.FeatureExtractorType(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_15_2(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void OUTLINED_FUNCTION_16_2()
{
  *(void *)(v1 - 256) = v0;
}

void OUTLINED_FUNCTION_19_2()
{
  uint64_t v1 = 0x64616574736E6920;
  unint64_t v2 = 0xE90000000000002ELL;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_30_1()
{
  return 0xD000000000000015;
}

uint64_t OUTLINED_FUNCTION_32_1(uint64_t a1, uint64_t a2)
{
  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_35_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36_1()
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
}

uint64_t static _ValidationUtilities.validateTableTypes(table:columns:type:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = *(void **)a1;
  char v39 = *(unsigned char *)(a1 + 8);
  int v40 = *a3;
  uint64_t v44 = 0;
  unint64_t v45 = 0xE000000000000000;
  id v46 = v5;
  v42._uint64_t countAndFlagsBits = (uint64_t)v5;
  LOBYTE(v42._object) = v39;
  if (MLDataTable.size.getter() < 1)
  {
    OUTLINED_FUNCTION_20_1();
    v27._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v27);
    goto LABEL_39;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (void **)(a2 + 40);
  uint64_t v8 = v3;
  while (2)
  {
    uint64_t v9 = *v7;
    uint64_t v41 = (uint64_t)*(v7 - 1);
    if ((v39 & 1) == 0)
    {
      id v17 = v46;
      outlined copy of Result<_DataTable, Error>(v46, 0);
      outlined copy of Result<_DataTable, Error>(v17, 0);
      swift_bridgeObjectRetain();
      swift_retain();
      CMLTable.row(at:)(0);
      if (v8)
      {

        swift_release();
        uint64_t v18 = MEMORY[0x22A676370](0);
        if (!v18)
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        uint64_t v19 = v18;
        type metadata accessor for CMLSequence();
        uint64_t v20 = OUTLINED_FUNCTION_6_3();
        uint64_t v8 = 0;
        *(void *)(v20 + 16) = v19;
        *(unsigned char *)(v20 + 24) = 1;
      }
      else
      {
        swift_release();
      }
      id v21 = v46;
      outlined copy of Result<_DataTable, Error>(v46, 0);
      _DataTable.columnNames.getter(&v42);
      outlined consume of Result<_DataTable, Error>(v21, 0);
      outlined copy of Result<_DataTable, Error>(v21, 0);
      uint64_t v16 = _DataTable.columnIndexes.getter();
      outlined consume of Result<_DataTable, Error>(v21, 0);
      outlined consume of Result<_DataTable, Error>(v21, 0);
      outlined consume of Result<_DataTable, Error>(v21, 0);
      goto LABEL_13;
    }
    outlined copy of Result<_DataTable, Error>(v46, 1);
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x22A676370](0);
    if (!v10)
    {
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v11 = v10;
    type metadata accessor for CMLSequence();
    uint64_t v12 = OUTLINED_FUNCTION_6_3();
    *(void *)(v12 + 16) = v11;
    *(unsigned char *)(v12 + 24) = 1;
    uint64_t v13 = MEMORY[0x22A676370](0);
    if (!v13)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    uint64_t v14 = v13;
    outlined consume of Result<_DataTable, Error>(v46, 1);
    uint64_t v15 = OUTLINED_FUNCTION_6_3();
    *(void *)(v15 + 16) = v14;
    *(unsigned char *)(v15 + 24) = 1;
    uint64_t v16 = MEMORY[0x263F8EE80];
LABEL_13:
    if (*(void *)(v16 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v41, (uint64_t)v9);
      if (v23)
      {
        uint64_t v24 = *(void *)(*(void *)(v16 + 56) + 8 * v22);
        swift_bridgeObjectRelease();
        swift_retain_n();
        CMLSequence.value(at:)(v24);
        if (!v8)
        {
          uint64_t v26 = v25;
          v7 += 2;
          swift_release();
          MLDataValue.init(_:)(v26, (uint64_t)&v42);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release_n();
          switch(v43)
          {
            case 1:
              if (v40 != 1) {
                goto LABEL_36;
              }
              goto LABEL_30;
            case 2:
              outlined consume of MLDataValue((void *)v42._countAndFlagsBits, v42._object, 2);
              if (v40 != 2) {
                goto LABEL_36;
              }
              goto LABEL_30;
            case 3:
              outlined consume of MLDataValue((void *)v42._countAndFlagsBits, v42._object, 3);
              if (v40 != 3) {
                goto LABEL_36;
              }
              goto LABEL_30;
            case 4:
              outlined consume of MLDataValue((void *)v42._countAndFlagsBits, v42._object, 4);
              if (v40 != 4) {
                goto LABEL_36;
              }
              goto LABEL_30;
            case 5:
              outlined consume of MLDataValue((void *)v42._countAndFlagsBits, v42._object, 5);
              if (v40 != 5) {
                goto LABEL_36;
              }
              goto LABEL_30;
            case 6:
              if (v40 == 6) {
                goto LABEL_30;
              }
              goto LABEL_36;
            default:
              if (v40) {
                goto LABEL_36;
              }
LABEL_30:
              swift_bridgeObjectRelease();
              if (!--v6) {
                goto LABEL_38;
              }
              continue;
          }
        }
LABEL_47:
        swift_release();
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x2270744A4);
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_36:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    break;
  }
  v42._uint64_t countAndFlagsBits = 0;
  v42._id object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v28._uint64_t countAndFlagsBits = v41;
  v28._id object = v9;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x7369206570797420;
  v29._id object = (void *)0xEF206120746F6E20;
  String.append(_:)(v29);
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v40);
  v30._uint64_t countAndFlagsBits = 2606;
  v30._id object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  String.append(_:)(v42);
LABEL_38:
  swift_bridgeObjectRelease();
LABEL_39:
  uint64_t v32 = v44;
  uint64_t v31 = (void *)v45;
  uint64_t v33 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0) {
    uint64_t v33 = v44 & 0xFFFFFFFFFFFFLL;
  }
  if (!v33) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  v35._uint64_t countAndFlagsBits = v32;
  v35._id object = v31;
  log(_:type:)(v35, v34);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v36 = OUTLINED_FUNCTION_85();
  *uint64_t v37 = v32;
  v37[1] = (uint64_t)v31;
  return OUTLINED_FUNCTION_2_3(v36, (uint64_t)v37);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v13;
    uint64_t v4 = *(void *)(type metadata accessor for AnyColumn() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = AnyColumn.name.getter();
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v13 + 16);
      if (v10 >= *(void *)(v13 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v13 + 16) = v10 + 1;
      uint64_t v11 = v13 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v58 = a5;
  uint64_t v59 = a2;
  uint64_t v62 = a4;
  uint64_t v56 = a3;
  uint64_t v57 = a6;
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v16 = v15;
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v22 = (char *)&v52 - v21;
  if (URL.isFileURL.getter())
  {
    uint64_t v23 = v59;
    uint64_t v53 = v14;
    uint64_t v54 = v16;
    uint64_t v24 = v62;
    uint64_t v55 = v6;
    if (URL.hasDirectoryPath.getter())
    {
      uint64_t v60 = v23;
      uint64_t v61 = v56;
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x263F06E50], v8);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
      uint64_t v25 = v24;
      uint64_t v26 = v58;
      URL.appendingPathExtension(_:)();
      uint64_t v27 = v53;
      uint64_t v28 = v54;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v20, v53);
      uint64_t v29 = v57;
      (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v57, v22, v27);
      OUTLINED_FUNCTION_3_3();
      _StringGuts.grow(_:)(69);
      v30._uint64_t countAndFlagsBits = 0xD000000000000041;
      v30._id object = (void *)0x80000002272D4860;
      String.append(_:)(v30);
      v31._uint64_t countAndFlagsBits = URL.lastPathComponent.getter();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 11815;
      v32._id object = (void *)0xE200000000000000;
      String.append(_:)(v32);
      uint64_t v33 = v60;
      os_log_type_t v34 = v61;
      os_log_type_t v35 = static os_log_type_t.info.getter();
      v36._uint64_t countAndFlagsBits = v33;
      v36._id object = v34;
      log(_:type:)(v36, v35);
      swift_bridgeObjectRelease();
      uint64_t v37 = v55;
    }
    else
    {
      uint64_t v27 = v53;
      uint64_t v29 = v57;
      uint64_t v40 = v54;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v57, a1, v53);
      uint64_t v37 = v55;
      uint64_t v26 = v58;
      uint64_t v25 = v24;
      uint64_t v28 = v40;
    }
    if (URL.pathExtension.getter() == v25 && v41 == v26)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v43 & 1) == 0)
      {
        OUTLINED_FUNCTION_3_3();
        _StringGuts.grow(_:)(72);
        OUTLINED_FUNCTION_20_1();
        v44._uint64_t countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v44);
        v45._uint64_t countAndFlagsBits = v25;
        v45._id object = v26;
        String.append(_:)(v45);
        v46._uint64_t countAndFlagsBits = 0xD000000000000033;
        v46._id object = (void *)0x80000002272D4900;
        String.append(_:)(v46);
        uint64_t v47 = v60;
        uint64_t v48 = v61;
        os_log_type_t v49 = static os_log_type_t.info.getter();
        v50._uint64_t countAndFlagsBits = v47;
        v50._id object = v48;
        log(_:type:)(v50, v49);
        swift_bridgeObjectRelease();
        v51._uint64_t countAndFlagsBits = v25;
        v51._id object = v26;
        URL.appendPathExtension(_:)(v51);
      }
    }
    uint64_t result = static _FileUtilities.prepareForWriting(to:isDirectory:)(v29, 0);
    if (v37) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v38 = 0xD000000000000027;
    *(void *)(v38 + 8) = 0x80000002272D48B0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(unsigned char *)(v38 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized BidirectionalCollection.last.getter(v7, (unint64_t)v6);
  if (v9)
  {
    if (v8 == 47 && v9 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = 0x6C65646F6D6C6D2ELL;
    v12._id object = (void *)0xE800000000000000;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = a3;
    v13._id object = a4;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(69);
    OUTLINED_FUNCTION_20_1();
    v14._uint64_t countAndFlagsBits = 0xD000000000000041;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = a3;
    v15._id object = a4;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = 11815;
    v16._id object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    v18._uint64_t countAndFlagsBits = 0;
    v18._id object = (void *)0xE000000000000000;
    log(_:type:)(v18, v17);
    swift_bridgeObjectRelease();
    uint64_t v7 = a1;
    uint64_t v6 = a2;
  }
LABEL_10:
  type metadata accessor for NSString();
  v19._uint64_t countAndFlagsBits = v7;
  v19._id object = v6;
  NSString v20 = NSString.__allocating_init(string:)(v19);
  id v21 = objc_msgSend(v20, sel_stringByExpandingTildeInPath);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URL.init(fileURLWithPath:)();
  return swift_bridgeObjectRelease();
}

uint64_t static _ValidationUtilities.validateTableFormat(table:context:columns:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = v4;
  id v10 = *(id *)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    outlined copy of Result<_DataTable, Error>(*(id *)a1, 1);
    uint64_t v11 = MEMORY[0x22A676370](0);
    if (!v11)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      swift_unexpectedError();
      __break(1u);
LABEL_33:

      swift_release();
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      uint64_t v47 = v5;
      v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._uint64_t countAndFlagsBits = 46;
      v41._id object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v12 = v11;
    outlined consume of Result<_DataTable, Error>(v10, 1);
    type metadata accessor for CMLSequence();
    uint64_t v13 = OUTLINED_FUNCTION_6_3();
    *(void *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 24) = 1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(*(id *)a1, 0);
    _DataTable.columnNames.getter(&v45);
    outlined consume of Result<_DataTable, Error>(v10, 0);
  }
  unint64_t v14 = 0xE000000000000000;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  uint64_t v44 = *(void *)(a4 + 16);
  if (v44)
  {
    v42._uint64_t countAndFlagsBits = a2;
    v42._id object = a3;
    uint64_t v15 = a4 + 32;
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    uint64_t v43 = a4 + 32;
    while (2)
    {
      os_log_type_t v17 = (uint64_t *)(v15 + 16 * v16);
      uint64_t v19 = *v17;
      Swift::String v18 = (void *)v17[1];
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v20 = CMLSequence.size.getter();
      uint64_t v21 = specialized RandomAccessCollection<>.distance(from:to:)(0, v20);
      swift_release();
      if (v21)
      {
        uint64_t v5 = 0;
        ++v16;
        while (1)
        {
          CMLSequence.value(at:)(v5);
          if (v6) {
            goto LABEL_32;
          }
          Swift::String v22 = CMLFeatureValue.stringValue()();
          uint64_t v6 = v23;
          if (v23) {
            goto LABEL_33;
          }
          swift_release();
          swift_retain();
          uint64_t v24 = CMLSequence.size.getter();
          uint64_t v25 = specialized RandomAccessCollection<>.distance(from:to:)(0, v24);
          swift_release();
          if (v5 >= v25)
          {
            __break(1u);
            goto LABEL_31;
          }
          if (v22._countAndFlagsBits == v19 && v22._object == v18) {
            break;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v27)
          {
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_21;
          }
          ++v5;
          swift_retain();
          uint64_t v28 = CMLSequence.size.getter();
          uint64_t v29 = specialized RandomAccessCollection<>.distance(from:to:)(0, v28);
          swift_release();
          if (v5 == v29) {
            goto LABEL_23;
          }
        }
        swift_release();
        swift_bridgeObjectRelease_n();
LABEL_21:
        uint64_t v15 = v43;
        if (v16 != v44) {
          continue;
        }
        swift_bridgeObjectRelease();
        uint64_t v30 = 0;
        unint64_t v14 = 0xE000000000000000;
        goto LABEL_25;
      }
      break;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    swift_release();
    _StringGuts.grow(_:)(54);
    String.append(_:)(v42);
    OUTLINED_FUNCTION_0_1();
    v31._uint64_t countAndFlagsBits = v19;
    v31._id object = v18;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_1();
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 0;
    v33._id object = (void *)0xE000000000000000;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    uint64_t v30 = v45;
    unint64_t v14 = v46;
  }
  else
  {
    uint64_t v30 = 0;
  }
LABEL_25:
  uint64_t v34 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
  }
  if (v34)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    v36._uint64_t countAndFlagsBits = v30;
    v36._id object = (void *)v14;
    log(_:type:)(v36, v35);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v37 = OUTLINED_FUNCTION_85();
    *uint64_t v38 = v30;
    v38[1] = v14;
    OUTLINED_FUNCTION_2_3(v37, (uint64_t)v38);
    return swift_release();
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v9 = *a1;
  char v10 = *((unsigned char *)a1 + 8);
  unsigned __int8 v11 = *a3;
  unsigned __int8 v12 = *a6;
  uint64_t v16 = *a1;
  char v17 = v10;
  unsigned __int8 v15 = v11;
  uint64_t result = static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v16, a2, &v15);
  if (!v6)
  {
    uint64_t v16 = v9;
    char v17 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    *(void *)(inited + 32) = a4;
    *(void *)(inited + 40) = a5;
    unsigned __int8 v15 = v12;
    swift_bridgeObjectRetain();
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v16, inited, &v15);
    swift_setDeallocating();
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataFrame.validateContainsColumns(_:context:)(Swift::OpaquePointer _, Swift::String context)
{
  id object = context._object;
  uint64_t countAndFlagsBits = context._countAndFlagsBits;
  uint64_t v5 = DataFrame.columns.getter();
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = specialized Set.init<A>(_:)(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  uint64_t v8 = v7;
  uint64_t v32 = *((void *)_._rawValue + 2);
  if (v32)
  {
    v31._uint64_t countAndFlagsBits = countAndFlagsBits;
    v31._id object = object;
    Swift::String v33 = (char *)_._rawValue + 32;
    uint64_t v9 = v7 + 56;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    while (1)
    {
      unsigned __int8 v11 = (uint64_t *)&v33[16 * v10];
      uint64_t v13 = *v11;
      unsigned __int8 v12 = (void *)v11[1];
      if (!*(void *)(v8 + 16))
      {
        swift_bridgeObjectRetain();
        goto LABEL_22;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v14 = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = v14 & ~v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v17 = *(void *)(v8 + 48);
      Swift::String v18 = (void *)(v17 + 16 * v16);
      BOOL v19 = *v18 == v13 && v18[1] == (void)v12;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_10:
      ++v10;
      swift_bridgeObjectRelease();
      if (v10 == v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    uint64_t v20 = ~v15;
    for (unint64_t i = v16 + 1; ; unint64_t i = v22 + 1)
    {
      uint64_t v22 = i & v20;
      if (((*(void *)(v9 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0) {
        break;
      }
      uint64_t v23 = (void *)(v17 + 16 * v22);
      BOOL v24 = *v23 == v13 && v23[1] == (void)v12;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_10;
      }
    }
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(53);
    String.append(_:)(v31);
    OUTLINED_FUNCTION_0_1();
    v25._uint64_t countAndFlagsBits = v13;
    v25._id object = v12;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_1();
    v26._uint64_t countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v26);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    v28._uint64_t countAndFlagsBits = 0;
    v28._id object = (void *)0xE000000000000000;
    log(_:type:)(v28, v27);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v29 = OUTLINED_FUNCTION_85();
    *uint64_t v30 = 0;
    v30[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_2_3(v29, (uint64_t)v30);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataFrame.validateColumnTypes(_:_:context:)(Swift::String _, Swift::OpaquePointer a2, Swift::String context)
{
  id object = context._object;
  uint64_t countAndFlagsBits = context._countAndFlagsBits;
  uint64_t v5 = _._object;
  uint64_t v6 = _._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  unsigned __int8 v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13._uint64_t countAndFlagsBits = v6;
  v13._id object = v5;
  Swift::Int_optional v36 = DataFrame.indexOfColumn(_:)(v13);
  if (v36.is_nil)
  {
    OUTLINED_FUNCTION_3_3();
    _StringGuts.grow(_:)(53);
    v26._uint64_t countAndFlagsBits = countAndFlagsBits;
    v26._id object = object;
    String.append(_:)(v26);
    OUTLINED_FUNCTION_0_1();
    v27._uint64_t countAndFlagsBits = v6;
    v27._id object = v5;
    String.append(_:)(v27);
    OUTLINED_FUNCTION_20_1();
    unint64_t v24 = 0xD000000000000023;
    goto LABEL_11;
  }
  DataFrame.subscript.getter();
  uint64_t v14 = AnyColumn.wrappedElementType.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
  uint64_t v15 = *((void *)a2._rawValue + 2);
  unint64_t v16 = object;
  if (!v15) {
    goto LABEL_9;
  }
  if (*((void *)a2._rawValue + 4) == v14) {
    return;
  }
  if (v15 == 1)
  {
LABEL_9:
    OUTLINED_FUNCTION_3_3();
    _StringGuts.grow(_:)(68);
    v19._uint64_t countAndFlagsBits = countAndFlagsBits;
    v19._id object = v16;
    String.append(_:)(v19);
    OUTLINED_FUNCTION_0_1();
    v20._uint64_t countAndFlagsBits = v6;
    v20._id object = v5;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v21._id object = (void *)0x80000002272D4830;
    String.append(_:)(v21);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    v23._uint64_t countAndFlagsBits = MEMORY[0x22A674D80](a2._rawValue, v22);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    unint64_t v24 = 46;
    unint64_t v25 = 0xE100000000000000;
LABEL_11:
    String.append(_:)(*(Swift::String *)&v24);
    uint64_t v29 = v34[0];
    Swift::String v28 = (void *)v34[1];
    os_log_type_t v30 = static os_log_type_t.error.getter();
    v31._uint64_t countAndFlagsBits = v29;
    v31._id object = v28;
    log(_:type:)(v31, v30);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v32 = OUTLINED_FUNCTION_85();
    *Swift::String v33 = v29;
    v33[1] = (uint64_t)v28;
    OUTLINED_FUNCTION_2_3(v32, (uint64_t)v33);
    return;
  }
  uint64_t v17 = 5;
  while (1)
  {
    uint64_t v18 = v17 - 3;
    if (__OFADD__(v17 - 4, 1)) {
      break;
    }
    if (*((void *)a2._rawValue + v17) == v14) {
      return;
    }
    ++v17;
    if (v18 == v15) {
      goto LABEL_9;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataFrame.validateColumnIsNumeric(_:context:)(Swift::String _, Swift::String context)
{
  id object = context._object;
  uint64_t countAndFlagsBits = context._countAndFlagsBits;
  uint64_t v4 = _._object;
  uint64_t v5 = _._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x263F8D5C8];
  uint64_t v8 = MEMORY[0x263F8D538];
  *(_OWORD *)(v6 + 16) = xmmword_2272CB4A0;
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  *(void *)(v6 + 48) = MEMORY[0x263F8D6C8];
  v9._uint64_t countAndFlagsBits = v5;
  v9._id object = v4;
  v10._uint64_t countAndFlagsBits = countAndFlagsBits;
  v10._id object = object;
  DataFrame.validateColumnTypes(_:_:context:)(v9, (Swift::OpaquePointer)v6, v10);
  swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void OUTLINED_FUNCTION_0_1()
{
  uint64_t v1 = 0x206E6D756C6F6320;
  unint64_t v2 = 0xEE002720656D616ELL;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_2_3(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 1;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_3_3()
{
  *(void *)(v0 - 96) = 0;
  *(void *)(v0 - 88) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  return swift_allocObject();
}

uint64_t NSFileManager.temporaryModelDirectory.getter()
{
  uint64_t v0 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileManager.createTemporaryModelDirectory()()
{
  uint64_t v1 = v0;
  v19[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSFileManager.temporaryModelDirectory.getter();
  uint64_t v8 = URL.path.getter();
  Swift::String v9 = (void *)MEMORY[0x22A674AE0](v8);
  swift_bridgeObjectRelease();
  unsigned __int8 v10 = objc_msgSend(v1, sel_fileExistsAtPath_, v9);

  if ((v10 & 1) == 0)
  {
    URL._bridgeToObjectiveC()(v11);
    Swift::String v13 = v12;
    type metadata accessor for NSFileAttributeKey(0);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
    v19[0] = 0;
    unsigned __int8 v15 = outlined bridged method (mnnbnnn) of @objc NSFileManager.createDirectory(at:withIntermediateDirectories:attributes:)((uint64_t)v13, 1, v14, (uint64_t)v19, v1);

    if (v15)
    {
      unint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
      id v17 = v19[0];
      v16(v7, v2);
      return;
    }
    id v18 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
}

unint64_t lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey;
  if (!lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey)
  {
    type metadata accessor for NSFileAttributeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey);
  }
  return result;
}

id outlined bridged method (mnnbnnn) of @objc NSFileManager.createDirectory(at:withIntermediateDirectories:attributes:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  type metadata accessor for NSFileAttributeKey(0);
  lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a5, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, a1, a2 & 1, isa, a4);

  return v10;
}

uint64_t static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v9 = type metadata accessor for MLHandActionClassifier.DataSource();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _TablePrinter(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  uint64_t result = MLHandActionClassifier.FeatureExtractor.__allocating_init(source:)((uint64_t)v11);
  if (!v4)
  {
    MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)(a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t MLHandActionClassifier.FeatureExtractor.__allocating_init(source:)(uint64_t a1)
{
  MLHandActionClassifier.DataSource.videosWithAnnotations()();
  uint64_t result = outlined destroy of _TablePrinter(a1, (uint64_t (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  if (!v1)
  {
    uint64_t result = swift_allocObject();
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(result + 32) = MEMORY[0x263F8EE78];
    *(void *)(result + 40) = v4;
    *(void *)(result + 48) = v4;
    *(void *)(result + 56) = v4;
    *(void *)(result + 16) = v5;
    *(unsigned char *)(result + 24) = v6;
  }
  return result;
}

uint64_t MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = v4;
  Swift::Int v6 = v3;
  uint64_t v252 = a1;
  v238 = a2;
  uint64_t v253 = type metadata accessor for URL();
  uint64_t v273 = *(void *)(v253 - 8);
  MEMORY[0x270FA5388](v253);
  uint64_t v272 = (uint64_t)&v235 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t epoch = type metadata accessor for Date();
  CMTimeValue value = *(void *)(epoch - 8);
  MEMORY[0x270FA5388](epoch);
  v274 = ((char *)&v235 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for _TablePrinter(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v235 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v269 = (uint64_t *)((char *)&v235 - v14);
  unsigned __int8 v15 = *(void **)(v3 + 16);
  int v16 = *(unsigned __int8 *)(v3 + 24);
  id v282 = v15;
  char v283 = v16;
  outlined copy of Result<_DataTable, Error>(v15, v16);
  MLDataTable.size.getter();
  uint64_t v17 = specialized RandomAccessCollection<>.distance(from:to:)();
  id v268 = v15;
  int v270 = v16;
  outlined consume of Result<_DataTable, Error>(v15, v16);
  if (one-time initialization token for logger != -1) {
LABEL_144:
  }
    swift_once();
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v264 = __swift_project_value_buffer(v18, (uint64_t)static MLHandActionClassifier.logger);
  Swift::String v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  v251 = (uint64_t *)v13;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134217984;
    id v282 = (id)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_22704D000, v19, v20, "Processing %ld annotated video clips", v22, 0xCu);
    MEMORY[0x22A676210](v22, -1, -1);
  }

  Swift::String v23 = v269;
  unint64_t v24 = (char *)v269 + *(int *)(v10 + 20);
  Date.init()();
  *Swift::String v23 = v17;
  uint64_t v17 = (uint64_t)v23;
  type metadata accessor for OS_os_log();
  uint64_t v25 = OS_os_log.init(subsystem:category:)();
  uint64_t v240 = *(int *)(v10 + 24);
  *(uint64_t *)((char *)v23 + v240) = v25;
  Swift::String v26 = (uint64_t *)((char *)v23 + *(int *)(v10 + 28));
  *Swift::String v26 = 0xD000000000000015;
  v26[1] = 0x80000002272D49E0;
  Swift::String v27 = v274;
  Date.init()();
  Swift::String v28 = *(void (**)(char *, NSObject *, uint64_t))(value + 40);
  v250 = v24;
  v28(v24, v27, epoch);
  _TablePrinter.beginTable()();
  _TablePrinter.printRow(currentFileIndex:)(0);
  id v29 = v268;
  id v282 = v268;
  char v30 = v270;
  char v283 = v270;
  v256 = (uint64_t *)(v6 + 48);
  v257 = (char **)(v6 + 32);
  v255 = (CMTimeValue *)(v6 + 40);
  v258 = (uint64_t *)(v6 + 56);
  uint64_t v284 = 0;
  uint64_t v285 = 0;
  outlined copy of Result<_DataTable, Error>(v268, v270);
  v281.CMTimeValue value = (CMTimeValue)v29;
  LOBYTE(v281.timescale) = v30;
  if (MLDataTable.size.getter())
  {
    uint64_t v31 = 0;
    CMTimeValue v32 = *MEMORY[0x263F010E0];
    v243 = &v280;
    v249 = (void (**)(uint64_t, uint64_t))(v273 + 8);
    uint64_t v33 = *(void *)(MEMORY[0x263F010E0] + 8);
    CMTimeEpoch v246 = *(void *)(MEMORY[0x263F010E0] + 16);
    CMTimeValue v247 = v32;
    CMTimeValue v34 = *MEMORY[0x263F01088];
    uint64_t v35 = *(void *)(MEMORY[0x263F01088] + 8);
    CMTimeEpoch v244 = *(void *)(MEMORY[0x263F01088] + 16);
    CMTimeValue v245 = v34;
    *((void *)&v36 + 1) = 2;
    long long v248 = xmmword_2272CB370;
    uint64_t v242 = MEMORY[0x263F8EE58] + 8;
    *(void *)&long long v36 = 134218498;
    long long v241 = v36;
    *(void *)&long long v36 = 136315138;
    long long v239 = v36;
    *(void *)&long long v36 = 134218242;
    long long v237 = v36;
    while (1)
    {
      MLDataTable.Rows.subscript.getter(v31, &v281.value);
      uint64_t v37 = *(void *)&v281.timescale;
      CMTimeValue value = v281.value;
      uint64_t epoch = v281.epoch;
      uint64_t v38 = (void *)(v30 & 1);
      outlined copy of Result<_DataTable, Error>(v29, v30 & 1);
      char v39 = (void *)specialized RandomAccessCollection<>.index(after:)(v31);
      outlined consume of Result<_DataTable, Error>(v29, v30 & 1);
      uint64_t v284 = (uint64_t)v39;
      uint64_t v40 = v285;
      uint64_t v41 = v285 + 1;
      if (__OFADD__(v285, 1))
      {
        __break(1u);
        outlined consume of MLDataValue(v262, v263, 2);
        outlined consume of MLDataValue(v39, v38, 2);
        outlined consume of MLDataValue(v271, v274, 2);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        (*v249)(v272, v253);
        goto LABEL_139;
      }
      ++v285;
      uint64_t v13 = (char *)value;
      if (!*(void *)(v37 + 16)) {
        goto LABEL_133;
      }
      Swift::Int v266 = v40;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(0x7461506F65646976, 0xE900000000000068);
      if ((v43 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_132;
      }
      uint64_t v44 = *(void *)(*(void *)(v37 + 56) + 8 * v42);
      swift_retain_n();
      CMLSequence.value(at:)(v44);
      if (v5) {
        goto LABEL_149;
      }
      uint64_t v46 = v45;
      swift_release();
      MLDataValue.init(_:)(v46, (uint64_t)&v281);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      uint64_t v47 = (void *)v281.value;
      v274 = *(NSObject **)&v281.timescale;
      char v48 = v281.epoch;
      id v49 = v268;
      if (LOBYTE(v281.epoch) != 2)
      {
        v219 = v274;
        goto LABEL_131;
      }
      if (!*(void *)(v37 + 16)) {
        goto LABEL_130;
      }
      v271 = (void *)v281.value;
      uint64_t v254 = v41;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C6562616CLL, 0xE500000000000000);
      if ((v51 & 1) == 0) {
        break;
      }
      id v29 = (id)v17;
      uint64_t v52 = *(void *)(*(void *)(v37 + 56) + 8 * v50);
      swift_retain_n();
      CMLSequence.value(at:)(v52);
      uint64_t v54 = v53;
      swift_release();
      MLDataValue.init(_:)(v54, (uint64_t)&v281);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      if (LOBYTE(v281.epoch) != 2)
      {
        outlined consume of MLDataValue((void *)v281.value, *(id *)&v281.timescale, v281.epoch);
        outlined consume of MLDataValue(v271, v274, 2);
        uint64_t v40 = v266;
        goto LABEL_133;
      }
      v262 = (void *)v281.value;
      id v263 = *(id *)&v281.timescale;
      id v55 = objc_msgSend(self, sel_defaultManager);
      uint64_t v56 = v271;
      uint64_t v57 = (void *)MEMORY[0x22A674AE0](v271, v274);
      unsigned __int8 v58 = objc_msgSend(v55, sel_fileExistsAtPath_, v57);

      if ((v58 & 1) == 0)
      {
        outlined consume of MLDataValue(v262, v263, 2);
        v281.CMTimeValue value = 0;
        *(void *)&v281.timescale = 0xE000000000000000;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        v281.CMTimeValue value = 0xD000000000000018;
        *(void *)&v281.timescale = 0x80000002272D4A30;
        v228._uint64_t countAndFlagsBits = (uint64_t)v56;
        v229 = v274;
        v228._id object = v274;
        String.append(_:)(v228);
        outlined consume of MLDataValue(v56, v229, 2);
        CMTimeValue v230 = v281.value;
        uint64_t v231 = *(void *)&v281.timescale;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v232 = v230;
        *(void *)(v232 + 8) = v231;
        *(_OWORD *)(v232 + 16) = 0u;
        *(_OWORD *)(v232 + 32) = 0u;
        *(unsigned char *)(v232 + 48) = 0;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_139:
        outlined consume of Result<_DataTable, Error>(v282, v283);
        uint64_t v226 = (uint64_t)v29;
        return outlined destroy of _TablePrinter(v226, type metadata accessor for _TablePrinter);
      }
      URL.init(fileURLWithPath:)();
      uint64_t v265 = URL.lastPathComponent.getter();
      uint64_t v267 = v59;
      uint64_t v13 = (char *)value;
      if (v270)
      {
        outlined copy of Result<_DataTable, Error>(v49, 1);
        uint64_t v60 = MEMORY[0x22A676370](0);
        if (!v60)
        {
          __break(1u);
          goto LABEL_146;
        }
        uint64_t v61 = v60;
        outlined consume of Result<_DataTable, Error>(v49, 1);
        type metadata accessor for CMLSequence();
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v61;
        *(unsigned char *)(v17 + 24) = 1;
        uint64_t v279 = v17;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(v49, 0);
        _DataTable.columnNames.getter(&v279);
        outlined consume of Result<_DataTable, Error>(v49, 0);
        uint64_t v17 = v279;
      }
      swift_retain_n();
      uint64_t v62 = CMLSequence.size.getter();
      uint64_t v63 = specialized RandomAccessCollection<>.distance(from:to:)(0, v62);
      swift_release();
      uint64_t v273 = v37;
      if (!v63)
      {
        swift_release_n();
        goto LABEL_32;
      }
      uint64_t v13 = 0;
      while (1)
      {
        CMLSequence.value(at:)((uint64_t)v13);
        Swift::String v64 = CMLFeatureValue.stringValue()();
        uint64_t v5 = v65;
        if (v65)
        {
          while (1)
          {
LABEL_148:

            swift_release();
            v281.CMTimeValue value = 0;
            *(void *)&v281.timescale = 0xE000000000000000;
            _StringGuts.grow(_:)(37);
            swift_bridgeObjectRelease();
            v281.CMTimeValue value = 0xD000000000000022;
            *(void *)&v281.timescale = 0x80000002272D40C0;
            v278 = v13;
            v233._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v233);
            swift_bridgeObjectRelease();
            v234._uint64_t countAndFlagsBits = 46;
            v234._id object = (void *)0xE100000000000000;
            String.append(_:)(v234);
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_149:
            swift_release();
LABEL_147:
            swift_unexpectedError();
            __break(1u);
          }
        }
        swift_release();
        swift_retain();
        uint64_t v66 = CMLSequence.size.getter();
        uint64_t v67 = (char *)specialized RandomAccessCollection<>.distance(from:to:)(0, v66);
        swift_release();
        if ((uint64_t)v13 >= (uint64_t)v67)
        {
          __break(1u);
LABEL_141:
          __break(1u);
          outlined consume of MLDataValue(v262, v263, 2);
          outlined consume of MLDataValue(v29, v67, 2);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          (*v249)(v272, v253);
          goto LABEL_134;
        }
        if (v64._countAndFlagsBits == 0x7472617473 && v64._object == (void *)0xE500000000000000)
        {
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v69) {
          break;
        }
        ++v13;
        swift_retain();
        uint64_t v70 = CMLSequence.size.getter();
        uint64_t v71 = specialized RandomAccessCollection<>.distance(from:to:)(0, v70);
        swift_release();
        if (v13 == (char *)v71)
        {
          swift_release_n();
          CMTimeValue v72 = v247;
          v260 = v246;
          *(void *)&long long v73 = v33;
          long long v259 = v73;
          char v74 = v270;
LABEL_30:
          uint64_t v13 = (char *)value;
          goto LABEL_62;
        }
      }
      swift_release_n();
LABEL_35:
      uint64_t v76 = v273;
      char v74 = v270;
      uint64_t v13 = (char *)value;
      if (!*(void *)(v273 + 16)) {
        goto LABEL_57;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
      if ((v78 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_43;
      }
      uint64_t v79 = *(void *)(*(void *)(v76 + 56) + 8 * v77);
      swift_retain_n();
      CMLSequence.value(at:)(v79);
      uint64_t v81 = v80;
      swift_release();
      MLDataValue.init(_:)(v81, (uint64_t)&v281);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      CMTimeValue v82 = v281.value;
      if (LOBYTE(v281.epoch) != 1)
      {
        outlined consume of MLDataValue((void *)v281.value, *(id *)&v281.timescale, v281.epoch);
        uint64_t v76 = v273;
LABEL_43:
        if (*(void *)(v76 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
          if (v95)
          {
            uint64_t v96 = *(void *)(*(void *)(v76 + 56) + 8 * v94);
            swift_retain_n();
            CMLSequence.value(at:)(v96);
            uint64_t v98 = v97;
            swift_release();
            MLDataValue.init(_:)(v98, (uint64_t)&v281);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            CMTimeValue v99 = v281.value;
            if (LOBYTE(v281.epoch))
            {
              outlined consume of MLDataValue((void *)v281.value, *(id *)&v281.timescale, v281.epoch);
              uint64_t v76 = v273;
              goto LABEL_48;
            }
            if ((v281.value & 0x8000000000000000) == 0)
            {
              double v83 = (double)v281.value;
              goto LABEL_55;
            }
            uint64_t v84 = v271;
            uint64_t v185 = v274;
            outlined copy of MLDataValue(v271, v274, 2);
            outlined copy of MLDataValue(v84, v185, 2);
            uint64_t v86 = Logger.logObject.getter();
            os_log_type_t v186 = static os_log_type_t.info.getter();
            BOOL v187 = os_log_type_enabled(v86, v186);
            id v49 = v268;
            if (!v187) {
              goto LABEL_118;
            }
            uint64_t v89 = swift_slowAlloc();
            CMTimeValue v261 = swift_slowAlloc();
            v281.CMTimeValue value = v261;
            *(_DWORD *)uint64_t v89 = v237;
            uint64_t v279 = v99;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v89 + 12) = 2080;
            v260 = v86;
            uint64_t v188 = v274;
            outlined copy of MLDataValue(v84, v274, 2);
            uint64_t v279 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v84, (unint64_t)v188, &v281.value);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            outlined consume of MLDataValue(v84, v188, 2);
            outlined consume of MLDataValue(v84, v188, 2);
            outlined consume of MLDataValue(v84, v188, 2);
            uint64_t v86 = v260;
            uint64_t v91 = v260;
            os_log_type_t v92 = v186;
            char v93 = "Start time %ld specified in video file %s is negative, using 0.0 automatically.";
LABEL_117:
            _os_log_impl(&dword_22704D000, v91, v92, v93, (uint8_t *)v89, 0x16u);
            CMTimeValue v189 = v261;
            swift_arrayDestroy();
            MEMORY[0x22A676210](v189, -1, -1);
            uint64_t v190 = v89;
            uint64_t v13 = (char *)value;
            MEMORY[0x22A676210](v190, -1, -1);
LABEL_119:

LABEL_32:
            CMTimeValue v72 = v247;
            v260 = v246;
            *(void *)&long long v75 = v33;
            long long v259 = v75;
            char v74 = v270;
            goto LABEL_62;
          }
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_48:
          if (*(void *)(v76 + 16))
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
            if (v101)
            {
              uint64_t v102 = *(void *)(*(void *)(v76 + 56) + 8 * v100);
              swift_retain_n();
              CMLSequence.value(at:)(v102);
              uint64_t v104 = v103;
              swift_release();
              MLDataValue.init(_:)(v104, (uint64_t)&v281);
              swift_bridgeObjectRelease();
              swift_release();
              swift_release_n();
              id v106 = (void *)v281.value;
              uint64_t v105 = *(void **)&v281.timescale;
              if (LOBYTE(v281.epoch) == 2)
              {
                static _VideoUtilities.getSecondsFromTimeString(_:)(v281.value, *(void **)&v281.timescale);
                Float64 v108 = v107;
                outlined consume of MLDataValue(v106, v105, 2);
                CMTimeMakeWithSeconds(&v281, v108, 1000);
                CMTimeValue v72 = v281.value;
                *(void *)&long long v109 = *(void *)&v281.timescale;
                long long v259 = v109;
                v260 = v281.epoch;
                id v49 = v268;
                goto LABEL_30;
              }
              outlined consume of MLDataValue((void *)v281.value, *(id *)&v281.timescale, v281.epoch);
              uint64_t v13 = (char *)value;
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
        }
LABEL_57:
        unint64_t v111 = v267;
        swift_bridgeObjectRetain_n();
        uint64_t v112 = Logger.logObject.getter();
        os_log_type_t v113 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v112, v113))
        {
          uint64_t v114 = (uint8_t *)swift_slowAlloc();
          CMTimeValue v115 = swift_slowAlloc();
          v281.CMTimeValue value = v115;
          *(_DWORD *)uint64_t v114 = v239;
          swift_bridgeObjectRetain();
          uint64_t v279 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v265, v111, &v281.value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_22704D000, v112, v113, "Unsupported start time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping start time for file %s", v114, 0xCu);
          swift_arrayDestroy();
          CMTimeValue v116 = v115;
          char v74 = v270;
          MEMORY[0x22A676210](v116, -1, -1);
          uint64_t v117 = v114;
          uint64_t v13 = (char *)value;
          MEMORY[0x22A676210](v117, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        CMTimeValue v72 = v247;
        v260 = v246;
        *(void *)&long long v118 = v33;
        long long v259 = v118;
        goto LABEL_61;
      }
      double v83 = *(double *)&v281.value;
      if (*(double *)&v281.value < 0.0)
      {
        uint64_t v84 = v271;
        uint64_t v85 = v274;
        outlined copy of MLDataValue(v271, v274, 2);
        outlined copy of MLDataValue(v84, v85, 2);
        uint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.info.getter();
        BOOL v88 = os_log_type_enabled(v86, v87);
        id v49 = v268;
        if (v88)
        {
          uint64_t v89 = swift_slowAlloc();
          CMTimeValue v261 = swift_slowAlloc();
          v281.CMTimeValue value = v261;
          *(_DWORD *)uint64_t v89 = v237;
          uint64_t v279 = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v89 + 12) = 2080;
          v260 = v86;
          uint64_t v90 = v274;
          outlined copy of MLDataValue(v84, v274, 2);
          uint64_t v279 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v84, (unint64_t)v90, &v281.value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of MLDataValue(v84, v90, 2);
          outlined consume of MLDataValue(v84, v90, 2);
          outlined consume of MLDataValue(v84, v90, 2);
          uint64_t v86 = v260;
          uint64_t v91 = v260;
          os_log_type_t v92 = v87;
          char v93 = "Start time %f specified in video file %s is negative, using 0.0 automatically.";
          goto LABEL_117;
        }
LABEL_118:
        uint64_t v191 = v274;
        outlined consume of MLDataValue(v84, v274, 2);
        outlined consume of MLDataValue(v84, v191, 2);
        goto LABEL_119;
      }
LABEL_55:
      CMTimeMakeWithSeconds(&v281, v83, 1000);
      CMTimeValue v72 = v281.value;
      *(void *)&long long v110 = *(void *)&v281.timescale;
      long long v259 = v110;
      v260 = v281.epoch;
LABEL_61:
      id v49 = v268;
LABEL_62:
      CMTimeValue v261 = v72;
      if (v74)
      {
        outlined copy of Result<_DataTable, Error>(v49, 1);
        uint64_t v119 = MEMORY[0x22A676370](0);
        if (v119)
        {
          uint64_t v120 = v119;
          outlined consume of Result<_DataTable, Error>(v49, 1);
          type metadata accessor for CMLSequence();
          uint64_t v17 = swift_allocObject();
          *(void *)(v17 + 16) = v120;
          *(unsigned char *)(v17 + 24) = 1;
          uint64_t v279 = v17;
          goto LABEL_66;
        }
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
      outlined copy of Result<_DataTable, Error>(v49, 0);
      _DataTable.columnNames.getter(&v279);
      outlined consume of Result<_DataTable, Error>(v49, 0);
      uint64_t v17 = v279;
LABEL_66:
      swift_retain_n();
      uint64_t v121 = CMLSequence.size.getter();
      uint64_t v122 = specialized RandomAccessCollection<>.distance(from:to:)(0, v121);
      swift_release();
      id v29 = (id)epoch;
      if (!v122)
      {
        swift_release_n();
        outlined consume of MLDataValue(v271, v274, 2);
        goto LABEL_78;
      }
      uint64_t v13 = 0;
      while (1)
      {
        CMLSequence.value(at:)((uint64_t)v13);
        Swift::String v123 = CMLFeatureValue.stringValue()();
        uint64_t v5 = v124;
        if (v124) {
          goto LABEL_148;
        }
        swift_release();
        swift_retain();
        uint64_t v125 = CMLSequence.size.getter();
        uint64_t v67 = (char *)specialized RandomAccessCollection<>.distance(from:to:)(0, v125);
        swift_release();
        if ((uint64_t)v13 >= (uint64_t)v67) {
          goto LABEL_141;
        }
        if (v123._countAndFlagsBits == 6581861 && v123._object == (void *)0xE300000000000000)
        {
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_82;
        }
        char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v127) {
          break;
        }
        ++v13;
        swift_retain();
        uint64_t v128 = CMLSequence.size.getter();
        uint64_t v129 = specialized RandomAccessCollection<>.distance(from:to:)(0, v128);
        swift_release();
        if (v13 == (char *)v129)
        {
          swift_release_n();
          outlined consume of MLDataValue(v271, v274, 2);
          CMTimeEpoch v131 = v244;
          CMTimeValue v130 = v245;
          uint64_t v132 = v35;
          uint64_t v17 = (uint64_t)v269;
          uint64_t v13 = (char *)value;
          goto LABEL_79;
        }
      }
      swift_release_n();
LABEL_82:
      uint64_t v10 = v273;
      uint64_t v17 = (uint64_t)v269;
      uint64_t v13 = (char *)value;
      if (*(void *)(v273 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        unint64_t v133 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
        if (v134)
        {
          uint64_t v135 = *(void *)(*(void *)(v10 + 56) + 8 * v133);
          swift_retain_n();
          CMLSequence.value(at:)(v135);
          uint64_t v137 = v136;
          swift_release();
          MLDataValue.init(_:)(v137, (uint64_t)&v281);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release_n();
          CMTimeValue v138 = v281.value;
          if (LOBYTE(v281.epoch) == 1)
          {
            if (*(double *)&v281.value < 0.0)
            {
              uint64_t v139 = v271;
              outlined copy of MLDataValue(v271, v274, 2);
              uint64_t v140 = Logger.logObject.getter();
              os_log_type_t v141 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v140, v141))
              {
                uint64_t v142 = swift_slowAlloc();
                CMTimeValue v236 = swift_slowAlloc();
                v281.CMTimeValue value = v236;
                *(_DWORD *)uint64_t v142 = v237;
                uint64_t v279 = v138;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v142 + 12) = 2080;
                uint64_t v143 = v274;
                outlined copy of MLDataValue(v139, v274, 2);
                uint64_t v279 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v139, (unint64_t)v143, &v281.value);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                outlined consume of MLDataValue(v139, v143, 2);
                outlined consume of MLDataValue(v139, v143, 2);
                outlined consume of MLDataValue(v139, v143, 2);
                unint64_t v144 = v140;
                os_log_type_t v145 = v141;
                uint64_t v146 = "End time %f specified in video file %s is negative, using end of file automatically.";
                goto LABEL_122;
              }
LABEL_123:
              uint64_t v196 = v274;
              outlined consume of MLDataValue(v139, v274, 2);
              outlined consume of MLDataValue(v139, v196, 2);
              goto LABEL_124;
            }
            outlined consume of MLDataValue(v271, v274, 2);
            Float64 v184 = *(double *)&v138;
LABEL_114:
            CMTimeMakeWithSeconds(&v281, v184, 1000);
            CMTimeValue v130 = v281.value;
            uint64_t v132 = *(void *)&v281.timescale;
            CMTimeEpoch v131 = v281.epoch;
LABEL_79:
            uint64_t v10 = v273;
            goto LABEL_105;
          }
          outlined consume of MLDataValue((void *)v281.value, *(id *)&v281.timescale, v281.epoch);
          uint64_t v10 = v273;
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
        if (*(void *)(v10 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          unint64_t v147 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
          if ((v148 & 1) == 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_95;
          }
          uint64_t v149 = *(void *)(*(void *)(v10 + 56) + 8 * v147);
          swift_retain_n();
          CMLSequence.value(at:)(v149);
          uint64_t v151 = v150;
          swift_release();
          MLDataValue.init(_:)(v151, (uint64_t)&v281);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release_n();
          CMTimeValue v152 = v281.value;
          if (LOBYTE(v281.epoch))
          {
            outlined consume of MLDataValue((void *)v281.value, *(id *)&v281.timescale, v281.epoch);
            uint64_t v10 = v273;
            goto LABEL_95;
          }
          if ((v281.value & 0x8000000000000000) == 0)
          {
            outlined consume of MLDataValue(v271, v274, 2);
            Float64 v184 = (double)v152;
            goto LABEL_114;
          }
          uint64_t v139 = v271;
          outlined copy of MLDataValue(v271, v274, 2);
          uint64_t v140 = Logger.logObject.getter();
          os_log_type_t v192 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v140, v192)) {
            goto LABEL_123;
          }
          uint64_t v142 = swift_slowAlloc();
          CMTimeValue v236 = swift_slowAlloc();
          v281.CMTimeValue value = v236;
          *(_DWORD *)uint64_t v142 = v237;
          uint64_t v279 = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v142 + 12) = 2080;
          uint64_t v193 = v274;
          outlined copy of MLDataValue(v139, v274, 2);
          uint64_t v279 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v139, (unint64_t)v193, &v281.value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of MLDataValue(v139, v193, 2);
          outlined consume of MLDataValue(v139, v193, 2);
          outlined consume of MLDataValue(v139, v193, 2);
          unint64_t v144 = v140;
          os_log_type_t v145 = v192;
          uint64_t v146 = "End time %ld specified in video file %s is negative, using end of file automatically.";
LABEL_122:
          _os_log_impl(&dword_22704D000, v144, v145, v146, (uint8_t *)v142, 0x16u);
          CMTimeValue v194 = v236;
          swift_arrayDestroy();
          MEMORY[0x22A676210](v194, -1, -1);
          uint64_t v195 = v142;
          uint64_t v13 = (char *)value;
          MEMORY[0x22A676210](v195, -1, -1);
LABEL_124:

LABEL_78:
          CMTimeEpoch v131 = v244;
          CMTimeValue v130 = v245;
          uint64_t v132 = v35;
          uint64_t v17 = (uint64_t)v269;
          goto LABEL_79;
        }
      }
LABEL_95:
      outlined consume of MLDataValue(v271, v274, 2);
      if (*(void *)(v10 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        unint64_t v153 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
        if (v154)
        {
          uint64_t v155 = *(void *)(*(void *)(v10 + 56) + 8 * v153);
          swift_retain_n();
          CMLSequence.value(at:)(v155);
          uint64_t v157 = v156;
          swift_release();
          MLDataValue.init(_:)(v157, (uint64_t)&v281);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release_n();
          Swift::String v159 = (void *)v281.value;
          uint64_t v158 = *(void **)&v281.timescale;
          if (LOBYTE(v281.epoch) == 2)
          {
            static _VideoUtilities.getSecondsFromTimeString(_:)(v281.value, *(void **)&v281.timescale);
            Float64 v161 = v160;
            outlined consume of MLDataValue(v159, v158, 2);
            CMTimeMakeWithSeconds(&v281, v161, 1000);
            CMTimeValue v130 = v281.value;
            uint64_t v132 = *(void *)&v281.timescale;
            CMTimeEpoch v131 = v281.epoch;
            goto LABEL_105;
          }
          outlined consume of MLDataValue((void *)v281.value, *(id *)&v281.timescale, v281.epoch);
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
      }
      unint64_t v162 = v267;
      swift_bridgeObjectRetain_n();
      uint64_t v163 = Logger.logObject.getter();
      os_log_type_t v164 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v163, v164))
      {
        uint64_t v165 = (uint8_t *)swift_slowAlloc();
        CMTimeValue v166 = swift_slowAlloc();
        v281.CMTimeValue value = v166;
        *(_DWORD *)uint64_t v165 = v239;
        swift_bridgeObjectRetain();
        uint64_t v279 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v265, v162, &v281.value);
        uint64_t v10 = v273;
        uint64_t v17 = (uint64_t)v269;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_22704D000, v163, v164, "Unsupported end time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping end time for file %s", v165, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A676210](v166, -1, -1);
        MEMORY[0x22A676210](v165, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      CMTimeEpoch v131 = v244;
      CMTimeValue v130 = v245;
      uint64_t v132 = v35;
      uint64_t v13 = (char *)value;
LABEL_105:
      v167 = static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(v272, v261, v259, (CMTimeEpoch)v260, v130, v132, v131, a3);
      uint64_t v168 = (uint64_t)v167;
      Swift::Int v6 = v266;
      if (__OFADD__(v266, v252))
      {
        __break(1u);
        goto LABEL_144;
      }
      uint64_t v169 = v167[2];
      uint64_t v170 = specialized Array.init(repeating:count:)(v266 + v252, v169);
      specialized Array.init(repeating:count:)((uint64_t)v262, (uint64_t)v263, v169);
      specialized Array.init(repeating:count:)(v265, v267, v169);
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v168);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v170);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      _TablePrinter.printRow(currentFileIndex:)(v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v171 = swift_allocObject();
      *(_OWORD *)(v171 + 16) = v248;
      Date.timeIntervalSinceNow.getter();
      *(void *)(v171 + 56) = MEMORY[0x263F8D538];
      *(void *)(v171 + 64) = MEMORY[0x263F8D5B8];
      *(double *)(v171 + 32) = -v172;
      uint64_t v173 = (void *)String.init(format:_:)();
      unint64_t v175 = v174;
      uint64_t v176 = v251;
      outlined init with copy of _TablePrinter(v17, (uint64_t)v251, type metadata accessor for _TablePrinter);
      swift_bridgeObjectRetain();
      uint64_t v177 = Logger.logObject.getter();
      os_log_type_t v178 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v177, v178))
      {
        uint64_t v179 = swift_slowAlloc();
        CMTimeValue v180 = swift_slowAlloc();
        v281.CMTimeValue value = v180;
        *(_DWORD *)uint64_t v179 = v241;
        uint64_t v279 = v254;
        v274 = v177;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v179 + 12) = 2048;
        v271 = v173;
        uint64_t v181 = (uint64_t)v176;
        uint64_t v182 = *v176;
        outlined destroy of _TablePrinter(v181, type metadata accessor for _TablePrinter);
        uint64_t v279 = v182;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v179 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v279 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v271, v175, &v281.value);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v177 = v274;
        _os_log_impl(&dword_22704D000, v274, v178, "Extracted features from %ld out of %ld annotated video clips, elapsed time: %s", (uint8_t *)v179, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x22A676210](v180, -1, -1);
        uint64_t v183 = v179;
        uint64_t v17 = (uint64_t)v269;
        MEMORY[0x22A676210](v183, -1, -1);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        outlined destroy of _TablePrinter((uint64_t)v176, type metadata accessor for _TablePrinter);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
      }

      (*v249)(v272, v253);
      uint64_t v31 = v284;
      id v29 = v282;
      char v30 = v283;
      v281.CMTimeValue value = (CMTimeValue)v282;
      LOBYTE(v281.timescale) = v283;
      if (v31 == MLDataTable.size.getter()) {
        goto LABEL_125;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v47 = v271;
LABEL_130:
    v219 = v274;
    char v48 = 2;
LABEL_131:
    outlined consume of MLDataValue(v47, v219, v48);
LABEL_132:
    uint64_t v40 = v266;
LABEL_133:
    v281.CMTimeValue value = 0;
    *(void *)&v281.timescale = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v220._uint64_t countAndFlagsBits = 0xD000000000000029;
    v220._id object = (void *)0x80000002272D4A00;
    String.append(_:)(v220);
    uint64_t v279 = v40;
    v221._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v221);
    swift_bridgeObjectRelease();
    v222._id object = (void *)0xE900000000000065;
    v222._uint64_t countAndFlagsBits = 0x6C626174206E6920;
    String.append(_:)(v222);
    CMTimeValue v223 = v281.value;
    uint64_t v224 = *(void *)&v281.timescale;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v225 = v223;
    *(void *)(v225 + 8) = v224;
    *(_OWORD *)(v225 + 16) = 0u;
    *(_OWORD *)(v225 + 32) = 0u;
    *(unsigned char *)(v225 + 48) = 0;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_134:
    outlined consume of Result<_DataTable, Error>(v282, v283);
  }
  else
  {
LABEL_125:
    outlined consume of Result<_DataTable, Error>(v29, v30);
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v197 = swift_allocObject();
    *(_OWORD *)(v197 + 16) = xmmword_2272CB370;
    uint64_t v198 = MEMORY[0x263F8D750];
    *(void *)(v197 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v197 + 64) = v198;
    *(void *)(v197 + 32) = 3;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB360;
    *(void *)(inited + 32) = 0x6C6562616CLL;
    *(void *)(inited + 40) = 0xE500000000000000;
    uint64_t v200 = v255;
    swift_beginAccess();
    v281.CMTimeValue value = *v200;
    MEMORY[0x270FA5388](v281.value);
    swift_bridgeObjectRetain();
    uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v203 = v202;
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
    *(unsigned char *)(inited + 56) = v203 & 1;
    *(void *)(inited + 64) = 0x5F6E6F6973736573;
    *(void *)(inited + 72) = 0xEA00000000006469;
    uint64_t v204 = v256;
    swift_beginAccess();
    uint64_t v279 = *v204;
    MEMORY[0x270FA5388](v279);
    swift_bridgeObjectRetain();
    uint64_t v205 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v207 = v206;
    swift_bridgeObjectRelease();
    *(void *)(inited + 80) = v205;
    *(unsigned char *)(inited + 88) = v207 & 1;
    *(void *)(inited + 96) = 0x746E696F7079656BLL;
    *(void *)(inited + 104) = 0xE900000000000073;
    v208 = v257;
    swift_beginAccess();
    v278 = *v208;
    MEMORY[0x270FA5388](v278);
    swift_bridgeObjectRetain();
    uint64_t v209 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v211 = v210;
    swift_bridgeObjectRelease();
    *(void *)(inited + 112) = v209;
    *(unsigned char *)(inited + 120) = v211 & 1;
    *(void *)(inited + 128) = 0x7461506F65646976;
    *(void *)(inited + 136) = 0xE900000000000068;
    v212 = v258;
    swift_beginAccess();
    uint64_t v276 = *v212;
    MEMORY[0x270FA5388](v276);
    swift_bridgeObjectRetain();
    uint64_t v213 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    char v215 = v214;
    swift_bridgeObjectRelease();
    *(void *)(inited + 144) = v213;
    *(unsigned char *)(inited + 152) = v215 & 1;
    uint64_t v216 = Dictionary.init(dictionaryLiteral:)();
    specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v216, (uint64_t)&v276);
    if (!v5)
    {
      char v217 = v277;
      v218 = v238;
      void *v238 = v276;
      *((unsigned char *)v218 + 8) = v217;
    }
  }
  uint64_t v226 = v17;
  return outlined destroy of _TablePrinter(v226, type metadata accessor for _TablePrinter);
}

id static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = *(void **)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  uint64_t inited = swift_initStackObject();
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(inited + 32) = MEMORY[0x263F8EE78];
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 16) = v8;
  *(unsigned char *)(inited + 24) = v9;
  if (v4) {
    return outlined copy of Result<_DataTable, Error>(v8, v9);
  }
  outlined copy of Result<_DataTable, Error>(v8, v9);
  MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)(a2, a3, a4);
  return (id)swift_release();
}

uint64_t MLHandActionClassifier.FeatureExtractor.deinit()
{
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MLHandActionClassifier.FeatureExtractor.__deallocating_deinit()
{
  MLHandActionClassifier.FeatureExtractor.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MLHandActionClassifier.FeatureExtractor()
{
  return self;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t outlined init with copy of _TablePrinter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of _TablePrinter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _MLDevice(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for _MLDevice(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227078618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for _MLDevice(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for _MLDevice(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for _MLDevice()
{
  return &type metadata for _MLDevice;
}

CreateML::_MLDevice_optional __swiftcall _MLDevice.init(rawValue:)(Swift::String rawValue)
{
  id object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._id object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _MLDevice.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.CMTimeValue value = CreateML__MLDevice_cpu;
  }
  else {
    v4.CMTimeValue value = CreateML__MLDevice_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t _MLDevice.rawValue.getter(char a1)
{
  if (a1) {
    return 7696483;
  }
  else {
    return 1869903201;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _MLDevice(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _MLDevice()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _MLDevice()
{
  return specialized RawRepresentable<>.hash(into:)();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  ColumnDescriptor.FeatureType.rawValue.getter(a2);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 5:
    case 7:
    case 9:
    case 10:
      OUTLINED_FUNCTION_1_5();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _MLDevice()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a3(v6, a2);
  return Hasher._finalize()();
}

CreateML::_MLDevice_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _MLDevice@<W0>(Swift::String *a1@<X0>, CreateML::_MLDevice_optional *a2@<X8>)
{
  result.CMTimeValue value = _MLDevice.init(rawValue:)(*a1).value;
  a2->CMTimeValue value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance _MLDevice@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _MLDevice.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type _MLDevice and conformance _MLDevice()
{
  unint64_t result = lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice;
  if (!lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return String.hash(into:)();
}

unint64_t MLCreateErrorDomain.getter()
{
  return OUTLINED_FUNCTION_1_6();
}

uint64_t protocol witness for Error._domain.getter in conformance MLCreateError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();

  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance MLCreateError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();

  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t protocol witness for Error._userInfo.getter in conformance MLCreateError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance MLCreateError()
{
  return MEMORY[0x270F9FB30]();
}

unint64_t static MLCreateError.errorDomain.getter()
{
  return OUTLINED_FUNCTION_1_6();
}

uint64_t MLCreateError.failureReason.getter()
{
  OUTLINED_FUNCTION_4_4();
  if (v6 < 3) {
    outlined copy of MLCreateError(v0, v1, v2, v3, v4, v5, v6);
  }
  return OUTLINED_FUNCTION_3_4();
}

uint64_t outlined copy of MLCreateError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 >= 3u)
  {
    if (a7 != 3) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

unint64_t MLCreateError.errorDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  unint64_t v4 = *(void *)(v0 + 40);
  switch(*(unsigned char *)(v0 + 48))
  {
    case 1:
      OUTLINED_FUNCTION_0_3();
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000015;
      goto LABEL_5;
    case 2:
      OUTLINED_FUNCTION_0_3();
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000013;
      goto LABEL_5;
    case 3:
      OUTLINED_FUNCTION_0_3();
      _StringGuts.grow(_:)(111);
      OUTLINED_FUNCTION_2_4(0xD000000000000039, (uint64_t)"Tried to resume a session with an incompatible value for ");
      v8._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_4();
      String.append(_:)(v8);
      OUTLINED_FUNCTION_2_4(0xD00000000000001BLL, (uint64_t)". Session was created with ");
      v9._uint64_t countAndFlagsBits = v1;
      v9._id object = (void *)v2;
      String.append(_:)(v9);
      OUTLINED_FUNCTION_2_4(0xD000000000000014, (uint64_t)". Provided value is ");
      v10._uint64_t countAndFlagsBits = v3;
      v10._id object = (void *)v4;
      String.append(_:)(v10);
      uint64_t v6 = 46;
      unint64_t v7 = 0xE100000000000000;
      goto LABEL_7;
    case 4:
      if (*(void *)(v0 + 8) | *(void *)v0 | v1 | v2 | v3 | v4) {
        return 0xD000000000000051;
      }
      else {
        return 0xD00000000000001CLL;
      }
    default:
      OUTLINED_FUNCTION_0_3();
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000018;
LABEL_5:
      unint64_t v12 = v5;
      uint64_t v6 = OUTLINED_FUNCTION_3_4();
LABEL_7:
      String.append(_:)(*(Swift::String *)&v6);
      return v12;
  }
}

uint64_t MLCreateError.errorCode.getter()
{
  uint64_t result = v0[3].u8[0];
  switch(v0[3].i8[0])
  {
    case 1:
      uint64_t result = 1;
      break;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      int8x16_t v2 = vorrq_s8(v0[1], v0[2]);
      if (*(void *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | v0->i64[1] | v0->i64[0]) {
        uint64_t result = 5;
      }
      else {
        uint64_t result = 3;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t MLCreateError.errorUserInfo.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  unsigned int v7 = *(unsigned __int8 *)(v0 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v9;
  unint64_t v10 = MLCreateError.errorDescription.getter();
  if (v11)
  {
    uint64_t v12 = MEMORY[0x263F8D310];
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v12 = 0;
    *(void *)(inited + 64) = 0;
  }
  uint64_t v13 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 72) = v12;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v14;
  if (v7 >= 3)
  {
    if (v7 == 3)
    {
      uint64_t v1 = 0xD000000000000024;
      uint64_t v2 = 0x80000002272D4A90;
    }
    else
    {
      uint64_t v15 = v2 | v1 | v3 | v4 | v5 | v6;
      if (v15) {
        uint64_t v1 = 0xD00000000000001BLL;
      }
      else {
        uint64_t v1 = 0xD000000000000018;
      }
      if (v15) {
        uint64_t v2 = 0x80000002272D4A70;
      }
      else {
        uint64_t v2 = 0x80000002272D4AC0;
      }
    }
  }
  else
  {
    outlined copy of MLCreateError(v1, v2, v3, v4, v5, v6, v7);
  }
  *(void *)(inited + 120) = v13;
  *(void *)(inited + 96) = v1;
  *(void *)(inited + 104) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v17 = specialized Dictionary.compactMapValues<A>(_:)(v16);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x263F8EE80];
  uint64_t v58 = MEMORY[0x263F8EE80];
  specialized _NativeDictionary.makeIterator()(v59, a1);
  uint64_t v2 = v59[0];
  int64_t v3 = v61;
  unint64_t v4 = v62;
  uint64_t v34 = v60;
  uint64_t v36 = v59[1];
  int64_t v37 = (unint64_t)(v60 + 64) >> 6;
  uint64_t v38 = v57;
  uint64_t v63 = v50;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v7 = v6 | (v3 << 6);
  while (1)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v7);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    outlined init with copy of Any?(*(void *)(v2 + 56) + 32 * v7, (uint64_t)v38);
    *(void *)&long long v56 = v14;
    *((void *)&v56 + 1) = v13;
    long long v54 = v56;
    v55[0] = v57[0];
    v55[1] = v57[1];
    outlined init with copy of Any?((uint64_t)v55, (uint64_t)&v39);
    if (!v41)
    {
      swift_bridgeObjectRetain();
      outlined destroy of (key: String, value: Any?)((uint64_t)&v54, &demangling cache variable for type metadata for (key: String, value: Any?));
      uint64_t v17 = (uint64_t *)&v39;
      goto LABEL_34;
    }
    outlined init with take of Any(&v39, &v51);
    long long v15 = v54;
    long long v49 = v54;
    outlined init with take of Any?((uint64_t)v55, (uint64_t)v63);
    outlined init with take of Any(&v51, &v46);
    unint64_t v16 = *(void *)(v1 + 16);
    if (*(void *)(v1 + 24) <= v16)
    {
      uint64_t v18 = v16 + 1;
      swift_bridgeObjectRetain();
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, 1, v19, v20, v21, v22, v23, v24, v34, v35, v36, v37, (uint64_t)v38, v39, *((uint64_t *)&v39 + 1), v40, v41, v42, v43,
        v44,
        v45,
        v46,
        *((uint64_t *)&v46 + 1),
        v47,
        v48,
        v49,
        *((uint64_t *)&v49 + 1),
        v50[0],
        v50[1],
        v50[2],
        v50[3],
        v51,
        *((uint64_t *)&v51 + 1),
        v52,
        v53);
      uint64_t v1 = v58;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = v1 + 64;
    uint64_t v26 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v1 + 64 + 8 * (v27 >> 6))) == 0) {
      break;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v1 + 64 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_OWORD *)(*(void *)(v1 + 48) + 16 * v29) = v15;
    outlined init with take of Any(&v46, (_OWORD *)(*(void *)(v1 + 56) + 32 * v29));
    ++*(void *)(v1 + 16);
    uint64_t v17 = v63;
LABEL_34:
    uint64_t result = outlined destroy of (key: String, value: Any?)((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_38;
    }
    if (v8 >= v37) {
      goto LABEL_36;
    }
    unint64_t v9 = *(void *)(v36 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v37) {
        goto LABEL_36;
      }
      unint64_t v9 = *(void *)(v36 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v37) {
          goto LABEL_36;
        }
        unint64_t v9 = *(void *)(v36 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v37) {
            goto LABEL_36;
          }
          unint64_t v9 = *(void *)(v36 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v37) {
              goto LABEL_36;
            }
            unint64_t v9 = *(void *)(v36 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v37)
              {
                unint64_t v9 = *(void *)(v36 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_36:
              outlined consume of [String : [Int]].Iterator._Variant();
              return v1;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v3 = v10;
  }
  char v30 = 0;
  unint64_t v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    BOOL v32 = v28 == v31;
    if (v28 == v31) {
      unint64_t v28 = 0;
    }
    v30 |= v32;
    uint64_t v33 = *(void *)(v25 + 8 * v28);
    if (v33 != -1)
    {
      unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  int64_t v27;
  char v28[72];
  uint64_t v29;
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  void v36[7];

  uint64_t v1 = MEMORY[0x263F8EE80];
  uint64_t v35 = MEMORY[0x263F8EE80];
  specialized _NativeDictionary.makeIterator()(v36, a1);
  uint64_t v2 = v36[0];
  int64_t v3 = v36[3];
  unint64_t v4 = v36[4];
  uint64_t v26 = v36[1];
  unint64_t v27 = (unint64_t)(v36[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      uint64_t v5 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v6 = v5 | (v3 << 6);
      goto LABEL_20;
    }
    unint64_t v7 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_37;
    }
    if (v7 >= v27) {
      break;
    }
    int64_t v8 = *(void *)(v26 + 8 * v7);
    unint64_t v9 = v3 + 1;
    if (!v8)
    {
      unint64_t v9 = v3 + 2;
      if (v3 + 2 >= v27) {
        break;
      }
      int64_t v8 = *(void *)(v26 + 8 * v9);
      if (!v8)
      {
        unint64_t v9 = v3 + 3;
        if (v3 + 3 >= v27) {
          break;
        }
        int64_t v8 = *(void *)(v26 + 8 * v9);
        if (!v8)
        {
          unint64_t v9 = v3 + 4;
          if (v3 + 4 >= v27) {
            break;
          }
          int64_t v8 = *(void *)(v26 + 8 * v9);
          if (!v8)
          {
            unint64_t v9 = v3 + 5;
            if (v3 + 5 >= v27) {
              break;
            }
            int64_t v8 = *(void *)(v26 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v3 + 6;
              do
              {
                if (v10 >= v27) {
                  goto LABEL_35;
                }
                int64_t v8 = *(void *)(v26 + 8 * v10++);
              }
              while (!v8);
              unint64_t v9 = v10 - 1;
            }
          }
        }
      }
    }
    unint64_t v4 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
    int64_t v3 = v9;
LABEL_20:
    int64_t v11 = *(unsigned char *)(*(void *)(v2 + 48) + v6);
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v6, (uint64_t)v33 + 8);
    LOBYTE(v33[0]) = v11;
    v31[0] = v33[0];
    v31[1] = v33[1];
    BOOL v32 = v34;
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v28);
    if (!swift_dynamicCast())
    {
      unint64_t v29 = 0;
      LOBYTE(v30[0]) = 1;
      outlined destroy of URL?((uint64_t)v31, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
      continue;
    }
    uint64_t v12 = v29;
    uint64_t v13 = v31[0];
    LOBYTE(v29) = v31[0];
    outlined init with take of Any((_OWORD *)((char *)v31 + 8), v30);
    uint64_t v14 = *(void *)(v1 + 16);
    if (*(void *)(v1 + 24) <= v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14 + 1, 1);
      uint64_t v1 = v35;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v15 = Hasher._finalize()();
    unint64_t v16 = v1 + 64;
    uint64_t v17 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v18 = v15 & ~v17;
    uint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v1 + 64 + 8 * (v18 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v1 + 64 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_34;
    }
    uint64_t v21 = 0;
    uint64_t v22 = (unint64_t)(63 - v17) >> 6;
    do
    {
      if (++v19 == v22 && (v21 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x2270A13A0);
      }
      uint64_t v23 = v19 == v22;
      if (v19 == v22) {
        uint64_t v19 = 0;
      }
      v21 |= v23;
      uint64_t v24 = *(void *)(v16 + 8 * v19);
    }
    while (v24 == -1);
    uint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
LABEL_34:
    *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(unsigned char *)(*(void *)(v1 + 48) + v20) = v13;
    *(void *)(*(void *)(v1 + 56) + 8 * v20) = v12;
    ++*(void *)(v1 + 16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
  }
LABEL_35:
  outlined consume of [String : [Int]].Iterator._Variant();
  return v1;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void (**v13)(char *, char *, uint64_t);
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  char v21;
  int v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  void v39[7];
  char *i;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unsigned char v49[80];
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  void v56[2];
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  unint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = MEMORY[0x270FA5388](v5);
  long long v46 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)v39 - v9;
  id v55 = MEMORY[0x263F8EE80];
  specialized _NativeDictionary.makeIterator()(v56, a1);
  int64_t v10 = v56[0];
  uint64_t v43 = v56[1];
  uint64_t v60 = v58;
  int64_t v11 = v59;
  v39[0] = v57;
  uint64_t v44 = (unint64_t)(v57 + 64) >> 6;
  uint64_t v12 = (char *)v53 + 8;
  uint64_t v48 = (char *)v51 + 8;
  uint64_t v41 = v6;
  uint64_t v13 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  long long v45 = &v50;
  swift_bridgeObjectRetain();
  uint64_t v47 = MEMORY[0x263F8EE58] + 8;
  v39[6] = "accuracy";
  v39[5] = "validationAccuracy";
  v39[4] = "stylizedImageURL";
  void v39[3] = "rror";
  v39[2] = "validationRootMeanSquaredError";
  for (i = (char *)v53 + 8; ; uint64_t v12 = i)
  {
LABEL_2:
    if (v11)
    {
      uint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      long long v15 = v14 | (v60 << 6);
      unint64_t v16 = v48;
      goto LABEL_20;
    }
    uint64_t v17 = v60 + 1;
    unint64_t v16 = v48;
    if (__OFADD__(v60, 1)) {
      goto LABEL_36;
    }
    if (v17 >= v44) {
      break;
    }
    uint64_t v18 = *(void *)(v43 + 8 * v17);
    uint64_t v19 = v60 + 1;
    if (!v18)
    {
      uint64_t v19 = v60 + 2;
      if (v60 + 2 >= v44) {
        break;
      }
      uint64_t v18 = *(void *)(v43 + 8 * v19);
      if (!v18)
      {
        uint64_t v19 = v60 + 3;
        if (v60 + 3 >= v44) {
          break;
        }
        uint64_t v18 = *(void *)(v43 + 8 * v19);
        if (!v18)
        {
          uint64_t v19 = v60 + 4;
          if (v60 + 4 >= v44) {
            break;
          }
          uint64_t v18 = *(void *)(v43 + 8 * v19);
          if (!v18)
          {
            uint64_t v19 = v60 + 5;
            if (v60 + 5 >= v44) {
              break;
            }
            uint64_t v18 = *(void *)(v43 + 8 * v19);
            if (!v18)
            {
              uint64_t v20 = v60 + 6;
              do
              {
                if (v20 >= v44) {
                  goto LABEL_34;
                }
                uint64_t v18 = *(void *)(v43 + 8 * v20++);
              }
              while (!v18);
              uint64_t v19 = v20 - 1;
            }
          }
        }
      }
    }
    int64_t v11 = (v18 - 1) & v18;
    long long v15 = __clz(__rbit64(v18)) + (v19 << 6);
    uint64_t v60 = v19;
LABEL_20:
    uint64_t v21 = *(unsigned char *)(*(void *)(v10 + 48) + v15);
    outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v15, (uint64_t)v12);
    LOBYTE(v53[0]) = v21;
    v51[0] = v53[0];
    v51[1] = v53[1];
    uint64_t v52 = v54;
    outlined init with copy of Any((uint64_t)v16, (uint64_t)v49);
    uint64_t v22 = swift_dynamicCast();
    __swift_storeEnumTagSinglePayload((uint64_t)v4, v22 ^ 1u, 1, v5);
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
    {
      outlined destroy of URL?((uint64_t)v51, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
      outlined destroy of URL?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
      goto LABEL_2;
    }
    uint64_t v23 = *v13;
    uint64_t v24 = v42;
    (*v13)(v42, v4, v5);
    uint64_t v25 = v51[0];
    v49[72] = v51[0];
    outlined init with take of Any(v16, v45);
    v23(v46, v24, v5);
    uint64_t v26 = v55;
    unint64_t v27 = *(void *)(v55 + 16);
    if (*(void *)(v55 + 24) <= v27)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27 + 1, 1);
      uint64_t v26 = v55;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v28 = Hasher._finalize()();
    unint64_t v29 = v26 + 64;
    char v30 = -1 << *(unsigned char *)(v26 + 32);
    unint64_t v31 = v28 & ~v30;
    BOOL v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v26 + 64 + 8 * (v31 >> 6))) != 0)
    {
      uint64_t v33 = __clz(__rbit64((-1 << v31) & ~*(void *)(v26 + 64 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_33;
    }
    uint64_t v34 = 0;
    uint64_t v35 = (unint64_t)(63 - v30) >> 6;
    do
    {
      if (++v32 == v35 && (v34 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
        JUMPOUT(0x2270A1AF8);
      }
      uint64_t v36 = v32 == v35;
      if (v32 == v35) {
        BOOL v32 = 0;
      }
      v34 |= v36;
      int64_t v37 = *(void *)(v29 + 8 * v32);
    }
    while (v37 == -1);
    uint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
LABEL_33:
    *(void *)(v29 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    *(unsigned char *)(*(void *)(v26 + 48) + v33) = v25;
    v23((char *)(*(void *)(v26 + 56) + *(void *)(v41 + 72) * v33), v46, v5);
    ++*(void *)(v26 + 16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
  }
LABEL_34:
  outlined consume of [String : [Int]].Iterator._Variant();
  return v55;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  int64_t v27;
  char v28[72];
  uint64_t v29;
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  void v36[7];

  uint64_t v1 = MEMORY[0x263F8EE80];
  uint64_t v35 = MEMORY[0x263F8EE80];
  specialized _NativeDictionary.makeIterator()(v36, a1);
  uint64_t v2 = v36[0];
  int64_t v3 = v36[3];
  unint64_t v4 = v36[4];
  uint64_t v26 = v36[1];
  unint64_t v27 = (unint64_t)(v36[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      uint64_t v5 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v6 = v5 | (v3 << 6);
      goto LABEL_20;
    }
    unint64_t v7 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_37;
    }
    if (v7 >= v27) {
      break;
    }
    int64_t v8 = *(void *)(v26 + 8 * v7);
    unint64_t v9 = v3 + 1;
    if (!v8)
    {
      unint64_t v9 = v3 + 2;
      if (v3 + 2 >= v27) {
        break;
      }
      int64_t v8 = *(void *)(v26 + 8 * v9);
      if (!v8)
      {
        unint64_t v9 = v3 + 3;
        if (v3 + 3 >= v27) {
          break;
        }
        int64_t v8 = *(void *)(v26 + 8 * v9);
        if (!v8)
        {
          unint64_t v9 = v3 + 4;
          if (v3 + 4 >= v27) {
            break;
          }
          int64_t v8 = *(void *)(v26 + 8 * v9);
          if (!v8)
          {
            unint64_t v9 = v3 + 5;
            if (v3 + 5 >= v27) {
              break;
            }
            int64_t v8 = *(void *)(v26 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v3 + 6;
              do
              {
                if (v10 >= v27) {
                  goto LABEL_35;
                }
                int64_t v8 = *(void *)(v26 + 8 * v10++);
              }
              while (!v8);
              unint64_t v9 = v10 - 1;
            }
          }
        }
      }
    }
    unint64_t v4 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
    int64_t v3 = v9;
LABEL_20:
    int64_t v11 = *(unsigned char *)(*(void *)(v2 + 48) + v6);
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v6, (uint64_t)v33 + 8);
    LOBYTE(v33[0]) = v11;
    v31[0] = v33[0];
    v31[1] = v33[1];
    BOOL v32 = v34;
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v28);
    if (!swift_dynamicCast())
    {
      unint64_t v29 = 0;
      LOBYTE(v30[0]) = 1;
      _s10Foundation3URLVSgWOhTm_0((uint64_t)v31, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
      continue;
    }
    uint64_t v12 = v29;
    uint64_t v13 = v31[0];
    LOBYTE(v29) = v31[0];
    outlined init with take of Any((_OWORD *)((char *)v31 + 8), v30);
    uint64_t v14 = *(void *)(v1 + 16);
    if (*(void *)(v1 + 24) <= v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14 + 1, 1);
      uint64_t v1 = v35;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v15 = Hasher._finalize()();
    unint64_t v16 = v1 + 64;
    uint64_t v17 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v18 = v15 & ~v17;
    uint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v1 + 64 + 8 * (v18 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v1 + 64 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_34;
    }
    uint64_t v21 = 0;
    uint64_t v22 = (unint64_t)(63 - v17) >> 6;
    do
    {
      if (++v19 == v22 && (v21 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x22713F7ECLL);
      }
      uint64_t v23 = v19 == v22;
      if (v19 == v22) {
        uint64_t v19 = 0;
      }
      v21 |= v23;
      uint64_t v24 = *(void *)(v16 + 8 * v19);
    }
    while (v24 == -1);
    uint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
LABEL_34:
    *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(unsigned char *)(*(void *)(v1 + 48) + v20) = v13;
    *(void *)(*(void *)(v1 + 56) + 8 * v20) = v12;
    ++*(void *)(v1 + 16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
  }
LABEL_35:
  outlined consume of [String : [Int]].Iterator._Variant();
  return v1;
}

unint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance MLCreateError()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance MLCreateError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance MLCreateError()
{
  return MEMORY[0x270EEE920]();
}

unint64_t MLCreateError.description.getter()
{
  OUTLINED_FUNCTION_4_4();
  if (v6 <= 2)
  {
    outlined copy of MLCreateError(v0, v1, v2, v3, v4, v5, v6);
    return OUTLINED_FUNCTION_3_4();
  }
  unint64_t result = MLCreateError.errorDescription.getter();
  if (v8) {
    return OUTLINED_FUNCTION_3_4();
  }
  __break(1u);
  return result;
}

uint64_t destroy for MLCreateError(uint64_t a1)
{
  return outlined consume of MLCreateError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t outlined consume of MLCreateError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 >= 3u)
  {
    if (a7 != 3) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLCreateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of MLCreateError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for MLCreateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of MLCreateError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  unsigned __int8 v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of MLCreateError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MLCreateError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of MLCreateError(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLCreateError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 49))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLCreateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for MLCreateError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for MLCreateError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)__n128 result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLCreateError()
{
  return &type metadata for MLCreateError;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: String, value: Any?)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t OUTLINED_FUNCTION_1_6()
{
  return 0xD000000000000012;
}

void OUTLINED_FUNCTION_2_4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return v0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5051_s8CreateML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = *(void *)(type metadata accessor for Model() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = Model.specificationVersion.getter();
      unint64_t v9 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v11 + 16) = v9 + 1;
      *(void *)(v11 + 8 * v9 + 32) = v7;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 7696483;
  }
  else {
    uint64_t v4 = 1869903201;
  }
  if (v3) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v6 = 7696483;
  }
  else {
    uint64_t v6 = 1869903201;
  }
  if (a2) {
    unint64_t v7 = 0xE300000000000000;
  }
  else {
    unint64_t v7 = 0xE400000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_46_0();
  }
  else {
    char v2 = OUTLINED_FUNCTION_25_3();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  BOOL v3 = ColumnDescriptor.FeatureType.rawValue.getter(a1);
  unint64_t v5 = v4;
  if (v3 == ColumnDescriptor.FeatureType.rawValue.getter(a2) && v5 == v6) {
    OUTLINED_FUNCTION_46_0();
  }
  else {
    LOBYTE(v3) = OUTLINED_FUNCTION_25_3();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x6574694C6E6E63;
  }
  else {
    uint64_t v4 = 7237219;
  }
  if (v3) {
    unint64_t v5 = 0xE300000000000000;
  }
  else {
    unint64_t v5 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v6 = 0x6574694C6E6E63;
  }
  else {
    uint64_t v6 = 7237219;
  }
  if (a2) {
    unint64_t v7 = 0xE700000000000000;
  }
  else {
    unint64_t v7 = 0xE300000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_46_0();
  }
  else {
    char v2 = OUTLINED_FUNCTION_25_3();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB0000000064657ALL;
  uint64_t v3 = 0x696C616974696E69;
  uint64_t v4 = a1;
  uint64_t v5 = 0x696C616974696E69;
  unint64_t v6 = 0xEB0000000064657ALL;
  switch(v4)
  {
    case 1:
      uint64_t v7 = 0x636172747865;
      goto LABEL_5;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x676E696E69617274;
      break;
    case 3:
      uint64_t v7 = 0x61756C617665;
LABEL_5:
      uint64_t v5 = v7 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
      unint64_t v6 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v5 = OUTLINED_FUNCTION_55_0();
      unint64_t v6 = 0xEB00000000676E69;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = 0x636172747865;
      goto LABEL_11;
    case 2:
      unint64_t v2 = 0xE800000000000000;
      OUTLINED_FUNCTION_54_0();
      break;
    case 3:
      uint64_t v8 = 0x61756C617665;
LABEL_11:
      uint64_t v3 = v8 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
      unint64_t v2 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v3 = 0x636E657265666E69;
      unint64_t v2 = 0xEB00000000676E69;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  unint64_t v2 = 0xEB00000000657079;
  uint64_t v3 = 0x54746E656D656C65;
  uint64_t v4 = a1;
  uint64_t v5 = 0x54746E656D656C65;
  unint64_t v6 = 0xEB00000000657079;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1702521203;
      break;
    case 2:
      uint64_t v5 = 0x69726F6765746163;
      unint64_t v6 = 0xEA00000000007365;
      break;
    case 3:
      uint64_t v5 = 0x7470697263736564;
      unint64_t v6 = 0xEB0000000073726FLL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1702521203;
      break;
    case 2:
      uint64_t v3 = 0x69726F6765746163;
      unint64_t v2 = 0xEA00000000007365;
      break;
    case 3:
      uint64_t v3 = 0x7470697263736564;
      unint64_t v2 = 0xEB0000000073726FLL;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;

  uint64_t v3 = 1936945004;
  uint64_t v4 = 0xE400000000000000;
  uint64_t v5 = a1;
  unint64_t v6 = "validationMaximumError";
  uint64_t v7 = "validationRootMeanSquaredError";
  uint64_t v8 = "rootMeanSquaredError";
  unint64_t v9 = 1936945004;
  char v10 = "stylizedImageURL";
  uint64_t v11 = "validationAccuracy";
  switch(v5)
  {
    case 1:
      unint64_t v9 = 0x4C746E65746E6F63;
      uint64_t v4 = 0xEB0000000073736FLL;
      break;
    case 2:
      unint64_t v9 = 0x736F4C656C797473;
      uint64_t v4 = 0xE900000000000073;
      break;
    case 3:
      uint64_t v4 = 0xE800000000000000;
      unint64_t v9 = 0x7963617275636361;
      break;
    case 4:
      unint64_t v9 = 0x69746164696C6176;
      uint64_t v4 = 0xEE0073736F4C6E6FLL;
      break;
    case 5:
      OUTLINED_FUNCTION_57_0();
      unint64_t v9 = v12 | 2;
      uint64_t v13 = v11 - 32;
      goto LABEL_11;
    case 6:
      uint64_t v4 = 0x80000002272D3CF0;
      unint64_t v9 = 0xD000000000000010;
      break;
    case 7:
      OUTLINED_FUNCTION_57_0();
      unint64_t v9 = v14 | 4;
      uint64_t v13 = v8 - 32;
      goto LABEL_11;
    case 8:
      unint64_t v9 = 0x456D756D6978616DLL;
      uint64_t v4 = 0xEC000000726F7272;
      break;
    case 9:
      OUTLINED_FUNCTION_57_0();
      unint64_t v9 = v15 | 0xE;
      uint64_t v13 = v7 - 32;
      goto LABEL_11;
    case 10:
      OUTLINED_FUNCTION_57_0();
      unint64_t v9 = v16 | 6;
      uint64_t v13 = v6 - 32;
LABEL_11:
      uint64_t v4 = (unint64_t)v13 | 0x8000000000000000;
      break;
    default:
      break;
  }
  uint64_t v17 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      uint64_t v3 = 0x4C746E65746E6F63;
      uint64_t v17 = 0xEB0000000073736FLL;
      break;
    case 2:
      uint64_t v3 = 0x736F4C656C797473;
      uint64_t v17 = 0xE900000000000073;
      break;
    case 3:
      uint64_t v17 = 0xE800000000000000;
      uint64_t v3 = 0x7963617275636361;
      break;
    case 4:
      uint64_t v3 = 0x69746164696C6176;
      uint64_t v17 = 0xEE0073736F4C6E6FLL;
      break;
    case 5:
      uint64_t v3 = 0xD000000000000012;
      uint64_t v18 = v11 - 32;
      goto LABEL_22;
    case 6:
      uint64_t v17 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      uint64_t v3 = 0xD000000000000010;
      break;
    case 7:
      uint64_t v3 = 0xD000000000000014;
      uint64_t v18 = v8 - 32;
      goto LABEL_22;
    case 8:
      uint64_t v3 = 0x456D756D6978616DLL;
      uint64_t v17 = 0xEC000000726F7272;
      break;
    case 9:
      uint64_t v3 = 0xD00000000000001ELL;
      uint64_t v18 = v7 - 32;
      goto LABEL_22;
    case 10:
      uint64_t v3 = 0xD000000000000016;
      uint64_t v18 = v6 - 32;
LABEL_22:
      uint64_t v17 = (unint64_t)v18 | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v9 == v3 && v4 == v17) {
    OUTLINED_FUNCTION_46_0();
  }
  else {
    unint64_t v2 = OUTLINED_FUNCTION_25_3();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id MLRandomForestRegressor.model.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLRandomForestRegressor() + 20));

  return v1;
}

uint64_t type metadata accessor for MLRandomForestRegressor()
{
  uint64_t result = type metadata singleton initialization cache for MLRandomForestRegressor;
  if (!type metadata singleton initialization cache for MLRandomForestRegressor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void key path setter for MLRandomForestRegressor.model : MLRandomForestRegressor(id *a1)
{
  id v1 = *a1;
  MLRandomForestRegressor.model.setter();
}

void MLRandomForestRegressor.model.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_62_0() + 20);

  *(void *)(v1 + v2) = v0;
}

void (*MLRandomForestRegressor.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestRegressor() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  id v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

void MLRandomForestRegressor.model.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  id v5 = *(void **)(v3 + v2);
  if (a2)
  {
    id v6 = v4;

    *(void *)(v3 + v2) = v6;
  }
  else
  {

    *(void *)(v3 + v2) = v4;
  }
}

uint64_t MLRandomForestRegressor.targetColumn.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MLRandomForestRegressor() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLRandomForestRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for MLRandomForestRegressor() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MLRandomForestRegressor.targetColumn.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.featureColumns.getter()
{
  type metadata accessor for MLRandomForestRegressor();

  return swift_bridgeObjectRetain();
}

uint64_t MLRandomForestRegressor.featureColumns.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_62_0() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*MLRandomForestRegressor.featureColumns.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.modelParameters.getter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_56_0() + 32);

  return outlined init with copy of MLRandomForestRegressor.ModelParameters(v2, v0);
}

uint64_t outlined init with copy of MLRandomForestRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

id MLRandomForestRegressor.trainingMetrics.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_56_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_45_0(*(int *)(v0 + 36));

  return outlined copy of Result<_RegressorMetrics, Error>(v1, v2, v3);
}

id outlined copy of Result<_RegressorMetrics, Error>(id result, uint64_t a2, char a3)
{
  if (a3) {
    return result;
  }
  return result;
}

id MLRandomForestRegressor.validationMetrics.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_56_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_45_0(*(int *)(v0 + 40));

  return outlined copy of Result<_RegressorMetrics, Error>(v1, v2, v3);
}

uint64_t static MLRandomForestRegressor._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLRandomForestRegressor._defaultSessionParameters);
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  id v5 = (int *)type metadata accessor for MLRandomForestRegressor();
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = v5[9];
  *(_DWORD *)(v0 + 96) = v6;
  uint64_t v7 = v4 + v6;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = 0;
  *(_DWORD *)(v0 + 100) = v5[10];
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v8 = swift_allocError();
  OUTLINED_FUNCTION_21_2(v8, v9, 0xD0000000000000C0);
  uint64_t v10 = v5[7];
  *(_DWORD *)(v0 + 104) = v10;
  *(void *)(v4 + v10) = v1;
  uint64_t v11 = (void *)(v4 + v5[6]);
  *uint64_t v11 = v3;
  v11[1] = v2;
  uint64_t v14 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v12;
  *uint64_t v12 = v0;
  v12[1] = MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:);
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  id v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = (const void *)v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  *(void *)(v4 + *(int *)(v2 + 20)) = v0[11];
  outlined init with take of TreeRegressorModel(v3, v4, (void (*)(void))type metadata accessor for TreeRegressorModel);
  memcpy((void *)(v4 + *(int *)(v2 + 32)), v1, 0x70uLL);
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = v2 + *(int *)(v0 + 96);
  uint64_t v4 = v2 + *(int *)(v0 + 100);
  outlined destroy of MLRandomForestRegressor.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for TreeRegressorModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  OUTLINED_FUNCTION_30();
  return v5();
}

void MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v126 = v1;
  uint64_t v3 = v2;
  uint64_t v125 = v4;
  uint64_t v132 = v5;
  uint64_t v124 = (void *)v6;
  uint64_t v133 = v7;
  uint64_t v9 = v8;
  uint64_t v129 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v130 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v12);
  uint64_t v13 = type metadata accessor for TreeRegressorModel();
  uint64_t v14 = OUTLINED_FUNCTION_1(v13);
  uint64_t v112 = v15;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_50_0();
  uint64_t v114 = v16;
  uint64_t v113 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v19);
  uint64_t v120 = type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v119 = v20;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v22);
  uint64_t v117 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v24);
  type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_10();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v29);
  unint64_t v31 = (char *)&v105 - v30;
  uint64_t v131 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v138 = v32;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v35);
  int64_t v37 = (char *)&v105 - v36;
  uint64_t v38 = type metadata accessor for MLRandomForestRegressor();
  uint64_t v39 = v9 + *(int *)(v38 + 36);
  *(void *)uint64_t v39 = 0;
  *(void *)(v39 + 8) = 0;
  uint64_t v127 = v39;
  *(unsigned char *)(v39 + 16) = 0;
  unint64_t v111 = (int *)v38;
  uint64_t v40 = *(int *)(v38 + 40);
  uint64_t v115 = v9;
  uint64_t v41 = (uint64_t *)(v9 + v40);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v42, 0xD0000000000000C0);
  *uint64_t v41 = v43;
  v41[1] = 0;
  *((unsigned char *)v41 + 16) = 1;
  outlined init with copy of MLRandomForestRegressor.ModelParameters(v3, (uint64_t)&v136);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.parallelTreeCount.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)&v136);
  uint64_t v128 = v3;
  outlined init with copy of URL?(v3, (uint64_t)&v134, &demangling cache variable for type metadata for Any?);
  if (v135)
  {
    uint64_t v44 = (uint64_t)&v31[*(int *)(v26 + 48)];
    outlined init with take of Any(&v134, &v136);
    swift_dynamicCast();
    uint64_t v45 = v126;
    MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v31, v44, v133);
    if (v45)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_43_1();
      OUTLINED_FUNCTION_25_0();
      v46();
      outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v37, v131);
    }
    else
    {
      uint64_t v126 = v44;
      uint64_t v107 = v26;
      outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
      uint64_t v47 = (uint64_t)v124;
      uint64_t v48 = (uint64_t)v132;
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v31, (uint64_t)v124, v132, v125);
      uint64_t v105 = v41;
      uint64_t v50 = v49;
      swift_bridgeObjectRelease();
      id v106 = v31;
      uint64_t v51 = v123;
      uint64_t v52 = v131;
      (*(void (**)(uint64_t, char *, uint64_t))(v138 + 16))(v123, v37, v131);
      uint64_t v41 = v121;
      *uint64_t v121 = v47;
      v41[1] = v48;
      v41[2] = v50;
      v41[3] = v50;
      OUTLINED_FUNCTION_52_0();
      v41[4] = v54;
      v41[5] = v53;
      v55(v116, v51, v52);
      uint64_t v56 = (uint64_t)v106;
      uint64_t v125 = v50;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v57 = v118;
      BaseTreeRegressor.init(configuration:)();
      uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v138 + 8);
      v58(v123, v52);
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 32))((char *)v41 + *(int *)(v117 + 28), v57, v120);
      TreeRegressor.fitted(to:validateOn:eventHandler:)();
      uint64_t v120 = (uint64_t)v58;
      uint64_t v123 = 0;
      unsigned __int8 v59 = AnalyticsReporter.init()();
      uint64_t v60 = v128;
      if ((v59 & 1) == 0)
      {
        uint64_t v61 = v110;
        uint64_t v62 = v110 + *(int *)(v107 + 48);
        uint64_t v63 = v130;
        uint64_t v64 = v56;
        uint64_t v65 = v129;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 16))(v110, v64, v129);
        outlined init with copy of URL?(v126, v62, &demangling cache variable for type metadata for DataFrame?);
        Swift::Int v66 = DataFrame.shape.getter();
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v65);
        v67._uint64_t countAndFlagsBits = 0xD000000000000015;
        v67._id object = (void *)0x80000002272D4D30;
        AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestRegressor, v67, v66);
        outlined destroy of URL?(v62, &demangling cache variable for type metadata for DataFrame?);
      }
      uint64_t v68 = v111;
      uint64_t v69 = v115;
      uint64_t v70 = (uint64_t *)(v115 + v111[6]);
      uint64_t v71 = (uint64_t)v124;
      uint64_t v72 = (uint64_t)v132;
      uint64_t v124 = v70;
      *uint64_t v70 = v71;
      v70[1] = v72;
      uint64_t v132 = (void *)(v69 + v68[8]);
      outlined init with copy of MLRandomForestRegressor.ModelParameters(v60, (uint64_t)v132);
      uint64_t v119 = v68[7];
      *(void *)(v69 + v119) = v125;
      uint64_t v73 = v122;
      uint64_t v74 = v60;
      uint64_t v75 = v114;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v122, v114, (void (*)(void))type metadata accessor for TreeRegressorModel);
      unint64_t v76 = (*(unsigned __int8 *)(v112 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
      unint64_t v77 = (void (*)(void))swift_allocObject();
      outlined init with take of TreeRegressorModel(v75, (uint64_t)v77 + v76, (void (*)(void))type metadata accessor for TreeRegressorModel);
      uint64_t v78 = v123;
      specialized blockAwait<A>(_:)();
      if (v78)
      {
        swift_release();
        outlined destroy of MLRandomForestRegressor.ModelParameters(v74);
        OUTLINED_FUNCTION_25_0();
        v80();
        outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v73, (void (*)(void))type metadata accessor for TreeRegressorModel);
        outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v41, (void (*)(void))type metadata accessor for TreeRegressor);
        outlined destroy of URL?((uint64_t)v106, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        uint64_t v81 = OUTLINED_FUNCTION_12_2();
        v82(v81);
        OUTLINED_FUNCTION_59_0();
        OUTLINED_FUNCTION_16_3();
      }
      else
      {
        uint64_t v83 = v79;
        swift_release();
        uint64_t v84 = v68[5];
        *(void *)(v69 + v84) = v83;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v73, v69, (void (*)(void))type metadata accessor for TreeRegressorModel);
        uint64_t v85 = (uint64_t)v106;
        TreeRegressorModel.computeMetrics(on:)((uint64_t)&v136);
        uint64_t v123 = 0;
        long long v86 = v136;
        char v87 = v137;
        uint64_t v88 = v127;
        outlined consume of Result<_RegressorMetrics, Error>(*(id *)v127, *(void *)(v127 + 8), *(unsigned char *)(v127 + 16));
        *(_OWORD *)uint64_t v88 = v86;
        *(unsigned char *)(v88 + 16) = v87;
        uint64_t v89 = v130;
        uint64_t v90 = v109 + *(int *)(v107 + 48);
        uint64_t v91 = v129;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 16))(v109, v85, v129);
        outlined init with copy of URL?(v126, v90, &demangling cache variable for type metadata for DataFrame?);
        if (__swift_getEnumTagSinglePayload(v90, 1, v91) == 1)
        {
          OUTLINED_FUNCTION_43_1();
          os_log_type_t v92 = *(void (**)(void))(v89 + 8);
          OUTLINED_FUNCTION_9_2();
          v92();
          outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v122, (void (*)(void))type metadata accessor for TreeRegressorModel);
          outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v121, (void (*)(void))type metadata accessor for TreeRegressor);
          outlined destroy of URL?(v85, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v93 = OUTLINED_FUNCTION_12_2();
          v94(v93);
          outlined destroy of URL?(v90, &demangling cache variable for type metadata for DataFrame?);
          OUTLINED_FUNCTION_9_2();
          v92();
          goto LABEL_6;
        }
        uint64_t v126 = v84;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v108, v90, v91);
        char v95 = *(void (**)(void))(v89 + 8);
        uint64_t v41 = (uint64_t *)(v89 + 8);
        unint64_t v77 = v95;
        OUTLINED_FUNCTION_9_2();
        v95();
        uint64_t v96 = v115;
        uint64_t v97 = v123;
        TreeRegressorModel.computeMetrics(on:)((uint64_t)&v136);
        uint64_t v123 = v97;
        uint64_t v98 = v122;
        CMTimeValue v99 = (void (*)(uint64_t))v120;
        if (!v97)
        {
          outlined destroy of MLRandomForestRegressor.ModelParameters(v128);
          OUTLINED_FUNCTION_9_2();
          v77();
          OUTLINED_FUNCTION_9_2();
          v77();
          outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v98, (void (*)(void))type metadata accessor for TreeRegressorModel);
          outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v121, (void (*)(void))type metadata accessor for TreeRegressor);
          outlined destroy of URL?(v85, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v102 = OUTLINED_FUNCTION_48();
          v99(v102);
          long long v103 = v136;
          char v104 = v137;
          OUTLINED_FUNCTION_59_0();
          outlined consume of Result<_RegressorMetrics, Error>((id)*v41, v41[1], *((unsigned char *)v41 + 16));
          *(_OWORD *)uint64_t v41 = v103;
          *((unsigned char *)v41 + 16) = v104;
          goto LABEL_6;
        }
        outlined destroy of MLRandomForestRegressor.ModelParameters(v128);
        OUTLINED_FUNCTION_9_2();
        v77();
        OUTLINED_FUNCTION_9_2();
        v77();
        outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v98, (void (*)(void))type metadata accessor for TreeRegressorModel);
        outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v121, (void (*)(void))type metadata accessor for TreeRegressor);
        outlined destroy of URL?(v85, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        uint64_t v100 = OUTLINED_FUNCTION_48();
        v99(v100);
        OUTLINED_FUNCTION_16_3();
        uint64_t v101 = v126;
        outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v96, (void (*)(void))type metadata accessor for TreeRegressorModel);

        OUTLINED_FUNCTION_59_0();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)v77);
    }
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v127, *(void *)(v127 + 8), *(unsigned char *)(v127 + 16));
    outlined consume of Result<_RegressorMetrics, Error>((id)*v41, v41[1], *((unsigned char *)v41 + 16));
LABEL_6:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  __break(1u);
}

uint64_t outlined destroy of MLRandomForestRegressor.ModelParameters(uint64_t a1)
{
  return a1;
}

void outlined consume of Result<_RegressorMetrics, Error>(id a1, uint64_t a2, char a3)
{
  if (a3) {
}
  }

uint64_t closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v4();
}

uint64_t closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v11, v12, v13);
  }
}

uint64_t partial apply for closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v1);
}

uint64_t MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for DataFrame();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  LOBYTE(v10) = *((unsigned char *)a1 + 8);
  uint64_t v13 = *a1;
  char v14 = v10;
  DataFrame.init(_:)((uint64_t)&v13, v11);
  outlined init with copy of MLRandomForestRegressor.ModelParameters(a5, (uint64_t)&v13);
  MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)();
  return outlined destroy of MLRandomForestRegressor.ModelParameters(a5);
}

void MLRandomForestRegressor.init(checkpoint:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v73 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v61 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_49();
  uint64_t v60 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  uint64_t v62 = v9;
  uint64_t v10 = type metadata accessor for TreeRegressorModel();
  uint64_t v11 = OUTLINED_FUNCTION_1(v10);
  uint64_t v65 = v12;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_50_0();
  uint64_t v66 = v14;
  uint64_t v67 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_106();
  uint64_t v74 = v16;
  type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v71 = v18;
  uint64_t v72 = v17;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_33_0();
  uint64_t v70 = v19;
  uint64_t v69 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v20;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v59 - v26;
  uint64_t v68 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_30_2();
  uint64_t v29 = type metadata accessor for MLRandomForestRegressor();
  uint64_t v30 = v5 + *(int *)(v29 + 36);
  *(void *)uint64_t v30 = 0;
  *(void *)(v30 + 8) = 0;
  *(unsigned char *)(v30 + 16) = 0;
  uint64_t v63 = v5;
  uint64_t v64 = v29;
  uint64_t v31 = v5 + *(int *)(v29 + 40);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v32 = swift_allocError();
  OUTLINED_FUNCTION_21_2(v32, v33, 0xD0000000000000C0);
  uint64_t v76 = v3;
  switch(*(unsigned char *)(v3 + *(int *)(type metadata accessor for MLCheckpoint() + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4:
      OUTLINED_FUNCTION_55_0();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_54_0();
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    swift_allocError();
    OUTLINED_FUNCTION_32_2(v42, 0xD000000000000042);
    swift_willThrow();
    uint64_t v48 = type metadata accessor for MLCheckpoint;
    uint64_t v49 = v76;
    goto LABEL_9;
  }
LABEL_5:
  BoostedTreeConfiguration.init()();
  uint64_t v35 = MEMORY[0x263F8EE78];
  *(void *)uint64_t v0 = 0;
  *((void *)v0 + 1) = 0xE000000000000000;
  *((void *)v0 + 2) = v35;
  *((void *)v0 + 3) = v35;
  OUTLINED_FUNCTION_52_0();
  *((void *)v0 + 4) = v37;
  *((void *)v0 + 5) = v36;
  uint64_t v38 = v69;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v25, v27, v69);
  uint64_t v39 = v70;
  BaseTreeRegressor.init(configuration:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(&v0[*(int *)(v68 + 28)], v39, v72);
  lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
  uint64_t v40 = v73;
  uint64_t v41 = v74;
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
  if (v40)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v76, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v48 = type metadata accessor for TreeRegressor;
    uint64_t v49 = (uint64_t)v0;
LABEL_9:
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v49, (void (*)(void))v48);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v30, *(void *)(v30 + 8), *(unsigned char *)(v30 + 16));
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v31, *(void *)(v31 + 8), *(unsigned char *)(v31 + 16));
    goto LABEL_10;
  }
  uint64_t v43 = v67;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v41, v67, (void (*)(void))type metadata accessor for TreeRegressorModel);
  unint64_t v44 = (*(unsigned __int8 *)(v65 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  uint64_t v45 = swift_allocObject();
  outlined init with take of TreeRegressorModel(v43, v45 + v44, (void (*)(void))type metadata accessor for TreeRegressorModel);
  specialized blockAwait<A>(_:)();
  uint64_t v47 = v46;
  swift_release();
  uint64_t v50 = v63;
  uint64_t v51 = v64;
  *(void *)(v63 + *(int *)(v64 + 20)) = v47;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v41, v50, (void (*)(void))type metadata accessor for TreeRegressorModel);
  uint64_t v53 = v61;
  uint64_t v52 = (uint64_t)v62;
  *uint64_t v62 = 0;
  *(void *)(v52 + 8) = 0;
  *(_WORD *)(v52 + 16) = 256;
  swift_storeEnumTagMultiPayload();
  uint64_t v54 = v50 + *(int *)(v51 + 32);
  *(_OWORD *)uint64_t v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  *(void *)(v54 + 96) = 0;
  *(void *)(v54 + 104) = 0;
  *(void *)(v54 + 88) = 0;
  *(_OWORD *)(v54 + 32) = xmmword_2272CB8C0;
  *(_OWORD *)(v54 + 48) = xmmword_2272CB8D0;
  *(void *)(v54 + 64) = 42;
  *(int64x2_t *)(v54 + 72) = vdupq_n_s64(0x3FE999999999999AuLL);
  uint64_t v55 = v60;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v52, v60, (void (*)(void))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  v75[3] = v53;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v75);
  outlined init with take of TreeRegressorModel(v55, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v75, v54);
  outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v52, (void (*)(void))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  uint64_t v57 = v64;
  uint64_t v58 = (void *)(v50 + *(int *)(v64 + 24));
  void *v58 = 0;
  v58[1] = 0xE000000000000000;
  outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v76, (void (*)(void))type metadata accessor for MLCheckpoint);
  outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v41, (void (*)(void))type metadata accessor for TreeRegressorModel);
  outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v0, (void (*)(void))type metadata accessor for TreeRegressor);
  *(void *)(v50 + *(int *)(v57 + 28)) = MEMORY[0x263F8EE78];
LABEL_10:
  OUTLINED_FUNCTION_8_1();
}

uint64_t closure #1 in MLRandomForestRegressor.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v4();
}

uint64_t closure #1 in MLRandomForestRegressor.init(checkpoint:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v11, v12, v13);
  }
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static MLRandomForestRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_1();
  char v4 = *(unsigned char *)(v2 + 8);
  id v7 = *(id *)v2;
  char v8 = v4;
  outlined copy of Result<_DataTable, Error>(v7, v4);
  DataFrame.init(_:)((uint64_t)&v7, v1);
  static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  uint64_t v5 = OUTLINED_FUNCTION_38_1();
  v6(v5);
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;

  static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  char v6 = *(unsigned char *)(v1 + 8);
  id v7 = *(id *)v1;
  char v8 = v6;
  outlined copy of Result<_DataTable, Error>(v7, v6);
  DataFrame.init(_:)((uint64_t)&v7, v0);
  static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  uint64_t v55;
  _UNKNOWN **v56;
  long long v57;
  uint64_t v58;
  uint64_t v59;

  OUTLINED_FUNCTION_9_0();
  uint64_t v52 = v2;
  uint64_t v53 = v3;
  uint64_t v5 = v4;
  uint64_t v51 = v6;
  uint64_t v50 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v13);
  uint64_t v14 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_41_1();
  type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_15();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_49();
  uint64_t v59 = v19;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v41 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v41 - v24;
  uint64_t v48 = v5;
  outlined init with copy of URL?(v5, (uint64_t)&v57, &demangling cache variable for type metadata for Any?);
  if (v58)
  {
    uint64_t v26 = (uint64_t)&v25[*(int *)(v17 + 48)];
    outlined init with take of Any(&v57, &v54);
    swift_dynamicCast();
    MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v25, v26, v9);
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
    if (!v1)
    {
      uint64_t v27 = (uint64_t)&v23[*(int *)(v17 + 48)];
      uint64_t v43 = v23;
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_0();
      uint64_t v45 = v28;
      unint64_t v44 = 0;
      uint64_t v30 = *(void (**)(void))(v29 + 16);
      OUTLINED_FUNCTION_51_0();
      v30();
      uint64_t v46 = v27;
      outlined init with copy of URL?(v26, v27, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v42 = v59 + *(int *)(v17 + 48);
      uint64_t v31 = v42;
      OUTLINED_FUNCTION_51_0();
      v30();
      outlined init with copy of URL?(v26, v31, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLRandomForestRegressor.ModelParameters(v48, (uint64_t)&v54);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.parallelTreeCount.setter();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)&v54);
      uint64_t v32 = v53;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v53, v49, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      uint64_t v33 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
      OUTLINED_FUNCTION_31_0();
      char v34 = v44;
      TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      if (v34)
      {
        outlined destroy of URL?((uint64_t)v25, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_25_0();
        v36();
        outlined destroy of URL?(v46, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        uint64_t v37 = v35;
        OUTLINED_FUNCTION_25_0();
        v38();
        outlined destroy of URL?(v46, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v55 = v33;
        uint64_t v56 = &protocol witness table for TreeRegressorTrainingSessionDelegate;
        *(void *)&uint64_t v54 = v37;
        uint64_t v39 = v32;
        uint64_t v40 = v47;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v39, v47, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>);
        OUTLINED_FUNCTION_31_0();
        swift_retain();
        specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v54, v40, 0);
        outlined destroy of URL?((uint64_t)v25, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        swift_release();
      }
    }
    OUTLINED_FUNCTION_8_1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static MLRandomForestRegressor.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLRandomForestRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13[-1] - v8;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v13[-1] - v8, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v10 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v11 = TreeRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v9);
  if (!v1)
  {
    v13[3] = v10;
    uint64_t v13[4] = &protocol witness table for TreeRegressorTrainingSessionDelegate;
    v13[0] = v11;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)v7, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v13, (uint64_t)v7, 0);
  }
}

uint64_t closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  if (a2)
  {
    *uint64_t v12 = a1;
    swift_storeEnumTagMultiPayload();
    id v22 = a1;
    a4(v12);
    return outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeRegressorTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v18 = v23;
    uint64_t v19 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a4;
    v20[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:), (uint64_t)v20);
    return swift_release();
  }
}

uint64_t closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:);
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  void *v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLRandomForestRegressor.init(delegate:)()
{
  OUTLINED_FUNCTION_11();
  v0[36] = v1;
  v0[37] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  OUTLINED_FUNCTION_17(v3);
  v0[38] = OUTLINED_FUNCTION_5();
  uint64_t v4 = type metadata accessor for MLRandomForestRegressor();
  v0[39] = v4;
  OUTLINED_FUNCTION_17(v4);
  v0[40] = OUTLINED_FUNCTION_5();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v5);
  v0[41] = OUTLINED_FUNCTION_5();
  uint64_t v6 = type metadata accessor for BoostedTreeConfiguration();
  v0[42] = v6;
  OUTLINED_FUNCTION_1(v6);
  v0[43] = v7;
  v0[44] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_17(v8);
  v0[45] = OUTLINED_FUNCTION_5();
  uint64_t v9 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v0[46] = v9;
  OUTLINED_FUNCTION_17(v9);
  v0[47] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = v0[45];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[37] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  swift_beginAccess();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = (int *)v0[46];
  uint64_t v5 = v0[47];
  uint64_t v7 = v0[44];
  uint64_t v8 = v0[42];
  uint64_t v9 = v0[43];
  uint64_t v10 = v0[41];
  uint64_t v12 = v0[37];
  uint64_t v11 = v0[38];
  outlined init with take of TreeRegressorModel(v0[45], v5, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v5 + v6[8], v8);
  outlined init with copy of URL?(v5 + v6[5], v10, &demangling cache variable for type metadata for DataFrame?);
  MLRandomForestRegressor.ModelParameters.init(configuration:validation:)(v7, v10, (uint64_t)(v0 + 2));
  uint64_t v13 = (uint64_t *)(v5 + v6[6]);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = *(void *)(v5 + v6[7]);
  uint64_t v17 = v12 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
  swift_beginAccess();
  outlined init with copy of URL?(v17, v11, &demangling cache variable for type metadata for TreeRegressorModel?);
  uint64_t v18 = type metadata accessor for TreeRegressorModel();
  uint64_t result = __swift_getEnumTagSinglePayload(v11, 1, v18);
  if (result == 1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  outlined init with copy of MLRandomForestRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[48] = v19;
  *uint64_t v19 = v0;
  v19[1] = MLRandomForestRegressor.init(delegate:);
  uint64_t v20 = v0[40];
  uint64_t v21 = v0[38];
  return MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(v20, v21, v15, v14, v16, (uint64_t)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;

  uint64_t v1 = v0[37];
  uint64_t result = outlined init with take of TreeRegressorModel(v0[40], v0[36], (void (*)(void))type metadata accessor for MLRandomForestRegressor);
  uint64_t v3 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  uint64_t v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v4 == 255)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[47];
    uint64_t v6 = v0[39];
    uint64_t v8 = v0[36];
    uint64_t v7 = v0[37];
    uint64_t v9 = v4 & 1;
    uint64_t v11 = *(id *)v3;
    uint64_t v10 = *(void *)(v3 + 8);
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v3, v10, v4 & 1);
    outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)(v0 + 2));
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v5, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    uint64_t v12 = v8 + *(int *)(v6 + 36);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    *(void *)uint64_t v12 = v11;
    *(void *)(v12 + 8) = v10;
    *(unsigned char *)(v12 + 16) = v9;
    uint64_t v14 = *(void **)(v7 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    uint64_t v13 = *(void *)(v7 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    uint64_t v15 = *(unsigned __int8 *)(v7
                             + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics
                             + 16);
    outlined copy of MLRegressorMetrics?(v14, v13, *(unsigned char *)(v7 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_release();
    if (v15 != 255)
    {
      uint64_t v16 = v0[36] + *(int *)(v0[39] + 40);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
      *(void *)uint64_t v16 = v14;
      *(void *)(v16 + 8) = v13;
      *(unsigned char *)(v16 + 16) = v15 & 1;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 376);
  swift_release();
  outlined destroy of MLRandomForestRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

void MLRandomForestRegressor.predictions(from:)()
{
  uint64_t v2 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLRandomForestRegressor();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (!v8)
  {
    OUTLINED_FUNCTION_14();
    TreeRegressorModel.applied(to:eventHandler:)();
    MEMORY[0x22A672220](*v0, v0[1]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
}

uint64_t MLRandomForestRegressor.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_31_1();
  uint64_t v7 = type metadata accessor for AnyColumn();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  char v12 = *(unsigned char *)(a1 + 8);
  id v16 = *(id *)a1;
  char v17 = v12;
  outlined copy of Result<_DataTable, Error>(v16, v12);
  DataFrame.init(_:)((uint64_t)&v16, v3);
  MLRandomForestRegressor.predictions(from:)();
  uint64_t v13 = OUTLINED_FUNCTION_47_0();
  if (v2) {
    return v14(v13);
  }
  v14(v13);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v11, 1, a2);
}

void MLRandomForestRegressor.evaluation(on:)()
{
  uint64_t v2 = OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v3, v4);
  if (v5) {
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  uint64_t v7 = (void *)(v1 + *(int *)(v2 + 24));
  uint64_t v8 = v7[1];
  *(void *)(inited + 32) = *v7;
  *(void *)(inited + 40) = v8;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v9._id object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v9);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v5)
  {
LABEL_4:
    *(void *)uint64_t v0 = v5;
    *(void *)(v0 + 8) = 0;
    *(unsigned char *)(v0 + 16) = 1;
  }
  else
  {
    TreeRegressorModel.computeMetrics(on:)(v0);
  }
}

uint64_t MLRandomForestRegressor.evaluation(on:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_0();
  char v7 = *(unsigned char *)(a1 + 8);
  id v9 = *(id *)a1;
  char v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9, v1);
  MLRandomForestRegressor.evaluation(on:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
}

void MLRandomForestRegressor.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v3;
  uint64_t v49 = v5;
  uint64_t v6 = type metadata accessor for TreeRegressorModel();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v46 = v8;
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_30_2();
  uint64_t v11 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_10();
  uint64_t v45 = v4[1];
  uint64_t v13 = v4[3];
  unint64_t v47 = v4[2];
  uint64_t v48 = *v4;
  uint64_t v14 = v4[4];
  uint64_t v15 = v4[5];
  uint64_t v16 = v4[6];
  uint64_t v17 = v4[7];
  uint64_t v18 = v4[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v49, 0xD000000000000015, (void *)0x80000002272D4DA0, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v0);
  if (!v2)
  {
    uint64_t v39 = v18;
    uint64_t v40 = v17;
    uint64_t v41 = v16;
    uint64_t v42 = v13;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1, v46, (void (*)(void))type metadata accessor for TreeRegressorModel);
    if (v45)
    {
      uint64_t v19 = v48;
      uint64_t v20 = v48;
      uint64_t v21 = v45;
      unint64_t v22 = v47;
      unint64_t v23 = v42;
      uint64_t v24 = v14;
      uint64_t v25 = v15;
      uint64_t v26 = v41;
      unint64_t v27 = v40;
    }
    else
    {
      uint64_t v28 = NSFullUserName();
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v29;

      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v18 = 0;
      unint64_t v22 = 0xD000000000000033;
      unint64_t v23 = 0x80000002272D4DC0;
      unint64_t v27 = 0xE100000000000000;
      uint64_t v26 = 49;
      uint64_t v19 = v48;
    }
    v50[0] = v20;
    v50[1] = v21;
    v50[2] = v22;
    v50[3] = v23;
    uint64_t v50[4] = v24;
    v50[5] = v25;
    v50[6] = v26;
    v50[7] = v27;
    v50[8] = v18;
    outlined copy of MLModelMetadata?(v19, v45);
    specialized CoreMLExportable.export(metadata:)((uint64_t)v50, (uint64_t)TreeRegressorModel.export(internalMetadata:), v30, v31, v32, v33, v34, v35, v38, v11, 0, v39, v40, v41, v15, v14, v42, v43, v44,
      v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v46, (void (*)(void))type metadata accessor for TreeRegressorModel);
    Model.write(to:)();
    OUTLINED_FUNCTION_25_0();
    v36();
    OUTLINED_FUNCTION_25_0();
    v37();
  }
  OUTLINED_FUNCTION_8_1();
}

#error "22707E65C: call analysis failed (funcsize=10)"

#error "22707E688: call analysis failed (funcsize=10)"

#error "22707E6B4: call analysis failed (funcsize=10)"

void specialized CoreMLExportable.export(metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_9_0();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_41_0();
  a10 = MEMORY[0x263F8EE80];
  MLSoundClassifier.Model.export(internalMetadata:)(&a10, v27);
  if (v20)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_35_2();
    Model.modelDescription.setter();
    swift_bridgeObjectRetain();
    Model.versionString.setter();
    swift_bridgeObjectRetain();
    Model.author.setter();
    uint64_t v29 = *(void *)(v25 + 64);
    swift_bridgeObjectRetain();
    Model.license.setter();
    if (!v29) {
      Dictionary.init(dictionaryLiteral:)();
    }
    swift_bridgeObjectRetain();
    Model.metadata.setter();
    uint64_t v30 = a10;
    swift_bridgeObjectRetain();
    uint64_t v31 = (void (*)(uint64_t))Model.metadata.modify();
    specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v30, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v32);
    uint64_t v33 = OUTLINED_FUNCTION_15_3();
    v31(v33);
    getOSVersion()();
    uint64_t v34 = (void (*)(uint64_t))OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_33_1();
    uint64_t v35 = OUTLINED_FUNCTION_15_3();
    v34(v35);
    uint64_t v36 = OUTLINED_FUNCTION_27_3();
    v37(v36);
    Model.nestedModels.getter();
    uint64_t v38 = OUTLINED_FUNCTION_34_1();
    v39(v38);
    ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5051_s8CreateML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Sequence<>.max()(ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n);
    swift_bridgeObjectRelease();
    Model.specificationVersion.setter();
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *);
  void (*v25)(uint64_t *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  void (*v38)(uint64_t);
  void *ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n;

  OUTLINED_FUNCTION_9_0();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_41_0();
  a10 = MEMORY[0x263F8EE80];
  v25(&a10);
  if (!v20)
  {
    OUTLINED_FUNCTION_35_2();
    Model.modelDescription.setter();
    swift_bridgeObjectRetain();
    Model.versionString.setter();
    swift_bridgeObjectRetain();
    Model.author.setter();
    uint64_t v29 = *(void *)(v27 + 64);
    swift_bridgeObjectRetain();
    Model.license.setter();
    if (!v29) {
      Dictionary.init(dictionaryLiteral:)();
    }
    swift_bridgeObjectRetain();
    Model.metadata.setter();
    uint64_t v30 = (void (*)(uint64_t))Model.metadata.modify();
    specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(MEMORY[0x263F8EE80], (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v31);
    uint64_t v32 = OUTLINED_FUNCTION_15_3();
    v30(v32);
    getOSVersion()();
    uint64_t v33 = (void (*)(uint64_t))OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_33_1();
    uint64_t v34 = OUTLINED_FUNCTION_15_3();
    v33(v34);
    uint64_t v35 = OUTLINED_FUNCTION_27_3();
    v36(v35);
    Model.nestedModels.getter();
    uint64_t v37 = OUTLINED_FUNCTION_34_1();
    v38(v37);
    ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5051_s8CreateML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Sequence<>.max()(ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n);
    swift_bridgeObjectRelease();
    Model.specificationVersion.setter();
  }
  OUTLINED_FUNCTION_8_1();
}

#error "22707E924: call analysis failed (funcsize=10)"

void MLRandomForestRegressor.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_10();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F06E50], v1);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLRandomForestRegressor.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  OUTLINED_FUNCTION_8_1();
}

unint64_t MLRandomForestRegressor.description.getter()
{
  uint64_t v1 = type metadata accessor for MLRandomForestRegressor();
  uint64_t v2 = MLRandomForestRegressor.ModelParameters.description.getter();
  uint64_t v4 = v3;
  unint64_t v5 = MLRegressorMetrics.description.getter();
  uint64_t v7 = v6;
  char v8 = *(unsigned char *)(v0 + *(int *)(v1 + 40) + 16);
  unint64_t v9 = MLRegressorMetrics.description.getter();
  uint64_t v11 = v10;
  v12._uint64_t countAndFlagsBits = v2;
  v12._id object = v4;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = v5;
  v13._id object = v7;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v14._id object = (void *)0x80000002272D3FE0;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    v15._uint64_t countAndFlagsBits = v9;
    v15._id object = v11;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = 0xD000000000000020;
    v16._id object = (void *)0x80000002272D4000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

NSAttributedString MLRandomForestRegressor.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  unint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLRandomForestRegressor.description.getter();
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.Class isa = (Class)v2;
  a1->super.Class isa = result.super.isa;
  return result;
}

uint64_t specialized Sequence<>.max()(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  uint64_t result = a1[4];
  uint64_t v4 = v1 - 1;
  if (v1 != 1)
  {
    unint64_t v5 = a1 + 5;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if (result <= v7) {
        uint64_t result = v6;
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

unint64_t lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor()
{
  unint64_t result = lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor;
  if (!lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor)
  {
    type metadata accessor for TreeRegressor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor;
  if (!lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor)
  {
    type metadata accessor for TreeRegressor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = *(void *)(type metadata accessor for TreeRegressorModel() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for BaseTreeRegressorModel();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v5();

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in MLRandomForestRegressor.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  void *v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)(v1);
}

uint64_t _s8CreateML27MLTrainingSessionParametersVWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  swift_arrayDestroy();
  OUTLINED_FUNCTION_26_3();

  return swift_deallocClassInstance();
}

{
  uint64_t vars8;

  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_26_3();

  return swift_deallocClassInstance();
}

{
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Float]]);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_26_3();

  return swift_deallocClassInstance();
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (name: String, parameter: Parameter));
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (name: String, state: LayerState));
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit((void (*)(void))type metadata accessor for MLCheckpoint);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(MEMORY[0x263F06EA8]);
}

uint64_t outlined copy of MLModelMetadata?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

id sub_22707F300@<X0>(void *a1@<X8>)
{
  id result = MLRandomForestRegressor.model.getter();
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    unint64_t v9 = a2 + 2;
    uint64_t v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    uint64_t v13 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
    Swift::String v14 = (char *)a1 + v13;
    Swift::String v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for BaseTreeRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[5];
    uint64_t v18 = a3[6];
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v19;
    uint64_t v20 = (void *)((char *)a1 + v18);
    uint64_t v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = a3[7];
    uint64_t v25 = a3[8];
    uint64_t v26 = *(void *)((char *)a2 + v24);
    *uint64_t v20 = v22;
    v20[1] = v23;
    *(void *)((char *)a1 + v24) = v26;
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (_OWORD *)((char *)a2 + v25);
    uint64_t v29 = *(void *)((char *)a2 + v25 + 24);
    id v30 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((void *)v27 + 3) = v29;
      (**(void (***)(char *, _OWORD *, uint64_t))(v29 - 8))(v27, v28, v29);
    }
    else
    {
      long long v31 = v28[1];
      *(_OWORD *)uint64_t v27 = *v28;
      *((_OWORD *)v27 + 1) = v31;
    }
    long long v32 = v28[3];
    *((_OWORD *)v27 + 2) = v28[2];
    *((_OWORD *)v27 + 3) = v32;
    long long v33 = v28[5];
    *((_OWORD *)v27 + 4) = v28[4];
    *((_OWORD *)v27 + 5) = v33;
    *((_OWORD *)v27 + 6) = v28[6];
    uint64_t v34 = a3[9];
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    id v37 = *(id *)v36;
    uint64_t v38 = *((void *)v36 + 1);
    char v39 = v36[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v36, v38, v39);
    *(void *)uint64_t v35 = v37;
    *((void *)v35 + 1) = v38;
    v35[16] = v39;
    uint64_t v40 = a3[10];
    uint64_t v41 = (char *)a1 + v40;
    uint64_t v42 = (char *)a2 + v40;
    id v43 = *(id *)v42;
    uint64_t v44 = *((void *)v42 + 1);
    LOBYTE(v37) = v42[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v42, v44, (char)v37);
    *(void *)uint64_t v41 = v43;
    *((void *)v41 + 1) = v44;
    v41[16] = (char)v37;
  }
  return a1;
}

void destroy for MLRandomForestRegressor(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  uint64_t v5 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[8];
  if (*(void *)(v6 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v6);
  }
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8), *(unsigned char *)(a1 + a2[9] + 16));
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  char v10 = *(unsigned char *)(v7 + 16);

  outlined consume of Result<_RegressorMetrics, Error>(v8, v9, v10);
}

void *initializeWithCopy for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  uint64_t v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = a3[6];
  uint64_t v17 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = a3[7];
  uint64_t v23 = a3[8];
  uint64_t v24 = *(void *)((char *)a2 + v22);
  *uint64_t v18 = v20;
  v18[1] = v21;
  *(void *)((char *)a1 + v22) = v24;
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (_OWORD *)((char *)a2 + v23);
  uint64_t v27 = *(void *)((char *)a2 + v23 + 24);
  id v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    *((void *)v25 + 3) = v27;
    (**(void (***)(char *, _OWORD *, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    long long v29 = v26[1];
    *(_OWORD *)uint64_t v25 = *v26;
    *((_OWORD *)v25 + 1) = v29;
  }
  long long v30 = v26[3];
  *((_OWORD *)v25 + 2) = v26[2];
  *((_OWORD *)v25 + 3) = v30;
  long long v31 = v26[5];
  *((_OWORD *)v25 + 4) = v26[4];
  *((_OWORD *)v25 + 5) = v31;
  *((_OWORD *)v25 + 6) = v26[6];
  uint64_t v32 = a3[9];
  long long v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  id v35 = *(id *)v34;
  uint64_t v36 = *((void *)v34 + 1);
  char v37 = v34[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v34, v36, v37);
  *(void *)long long v33 = v35;
  *((void *)v33 + 1) = v36;
  v33[16] = v37;
  uint64_t v38 = a3[10];
  char v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  id v41 = *(id *)v40;
  uint64_t v42 = *((void *)v40 + 1);
  LOBYTE(v35) = v40[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v40, v42, (char)v35);
  *(void *)char v39 = v41;
  *((void *)v39 + 1) = v42;
  v39[16] = (char)v35;
  return a1;
}

void *assignWithCopy for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      uint64_t v9 = a2[4];
      *uint64_t v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v8;
    a1[4] = a2[4];
    *uint64_t v6 = v10;
  }
  uint64_t v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = *(void **)((char *)a2 + v15);
  uint64_t v17 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  id v18 = v16;

  uint64_t v19 = a3[6];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)((char *)a2 + v22 + 24);
  if (!*(void *)((char *)a1 + v22 + 24))
  {
    if (v25)
    {
      *(void *)(v23 + 24) = v25;
      (**(void (***)(uint64_t, char *))(v25 - 8))(v23, v24);
      goto LABEL_15;
    }
LABEL_14:
    long long v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v26;
    goto LABEL_15;
  }
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_0(v23);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v23, (uint64_t *)v24);
LABEL_15:
  *(void *)(v23 + 32) = *((void *)v24 + 4);
  *(void *)(v23 + 40) = *((void *)v24 + 5);
  *(void *)(v23 + 48) = *((void *)v24 + 6);
  *(void *)(v23 + 56) = *((void *)v24 + 7);
  *(void *)(v23 + 64) = *((void *)v24 + 8);
  *(void *)(v23 + 72) = *((void *)v24 + 9);
  *(void *)(v23 + 80) = *((void *)v24 + 10);
  *(void *)(v23 + 88) = *((void *)v24 + 11);
  *(void *)(v23 + 96) = *((void *)v24 + 12);
  *(void *)(v23 + 104) = *((void *)v24 + 13);
  uint64_t v27 = a3[9];
  id v28 = (char *)a1 + v27;
  long long v29 = (char *)a2 + v27;
  id v30 = *(id *)v29;
  uint64_t v31 = *((void *)v29 + 1);
  char v32 = v29[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v29, v31, v32);
  long long v33 = *(void **)v28;
  uint64_t v34 = *((void *)v28 + 1);
  char v35 = v28[16];
  *(void *)id v28 = v30;
  *((void *)v28 + 1) = v31;
  v28[16] = v32;
  outlined consume of Result<_RegressorMetrics, Error>(v33, v34, v35);
  uint64_t v36 = a3[10];
  char v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  id v39 = *(id *)v38;
  uint64_t v40 = *((void *)v38 + 1);
  LOBYTE(v30) = v38[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v38, v40, (char)v30);
  id v41 = *(void **)v37;
  uint64_t v42 = *((void *)v37 + 1);
  char v43 = v37[16];
  *(void *)char v37 = v39;
  *((void *)v37 + 1) = v40;
  v37[16] = (char)v30;
  outlined consume of Result<_RegressorMetrics, Error>(v41, v42, v43);
  return a1;
}

uint64_t initializeWithTake for MLRandomForestRegressor(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  memcpy((void *)(a1 + v12), (const void *)(a2 + v12), 0x70uLL);
  uint64_t v13 = a3[9];
  uint64_t v14 = a3[10];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  return a1;
}

void *assignWithTake for MLRandomForestRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  uint64_t v9 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[5];
  uint64_t v14 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);

  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  if (*(void *)((char *)a1 + v20 + 24)) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1 + v20);
  }
  long long v22 = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = v22;
  long long v23 = *(_OWORD *)((char *)a2 + v20 + 48);
  *((_OWORD *)v21 + 2) = *(_OWORD *)((char *)a2 + v20 + 32);
  *((_OWORD *)v21 + 3) = v23;
  *((void *)v21 + 8) = *(void *)((char *)a2 + v20 + 64);
  *(_OWORD *)(v21 + 72) = *(_OWORD *)((char *)a2 + v20 + 72);
  *(_OWORD *)(v21 + 88) = *(_OWORD *)((char *)a2 + v20 + 88);
  *((void *)v21 + 13) = *(void *)((char *)a2 + v20 + 104);
  uint64_t v24 = a3[9];
  uint64_t v25 = (char *)a1 + v24;
  long long v26 = (char *)a2 + v24;
  char v27 = v26[16];
  id v28 = *(void **)v25;
  uint64_t v29 = *((void *)v25 + 1);
  char v30 = v25[16];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  v25[16] = v27;
  outlined consume of Result<_RegressorMetrics, Error>(v28, v29, v30);
  uint64_t v31 = a3[10];
  char v32 = (char *)a1 + v31;
  long long v33 = (char *)a2 + v31;
  char v34 = v33[16];
  char v35 = *(void **)v32;
  uint64_t v36 = *((void *)v32 + 1);
  char v37 = v32[16];
  *(_OWORD *)char v32 = *(_OWORD *)v33;
  v32[16] = v34;
  outlined consume of Result<_RegressorMetrics, Error>(v35, v36, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22707FE14);
}

uint64_t sub_22707FE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MLRandomForestRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22707FEB4);
}

void sub_22707FEB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for MLRandomForestRegressor()
{
  uint64_t result = type metadata accessor for TreeRegressorModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_26_3();

  return swift_deallocClassInstance();
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(void (*a1)(void))
{
  a1(0);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_26_3();

  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  specialized LazyMapSequence.makeIterator()(&v47);
  long long v45 = v47;
  uint64_t v46 = v48;
  uint64_t v43 = a1;
  swift_bridgeObjectRetain();
  uint64_t v44 = a3;
  swift_retain();
  uint64_t v9 = specialized LazyMapSequence.Iterator.next()();
  if (v10)
  {
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    while (1)
    {
      uint64_t v17 = (void *)*a5;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      uint64_t v26 = v17[2];
      BOOL v27 = (v18 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        break;
      }
      char v29 = v18;
      if (v17[3] >= v28)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, a4 & 1, v19, v20, v21, v22, v23, v24, v43, v44, v45, *((uint64_t *)&v45 + 1), v46, SBYTE4(v46));
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((v29 & 1) != (v31 & 1)) {
          goto LABEL_17;
        }
        unint64_t v25 = v30;
      }
      char v32 = (void *)*a5;
      if (v29)
      {
        swift_bridgeObjectRelease();
        long long v33 = (void *)(v32[7] + 16 * v25);
        swift_bridgeObjectRelease();
        *long long v33 = v15;
        v33[1] = v16;
      }
      else
      {
        v32[(v25 >> 6) + 8] |= 1 << v25;
        char v34 = (uint64_t *)(v32[6] + 16 * v25);
        *char v34 = v13;
        v34[1] = v14;
        char v35 = (void *)(v32[7] + 16 * v25);
        *char v35 = v15;
        v35[1] = v16;
        uint64_t v36 = v32[2];
        BOOL v37 = __OFADD__(v36, 1);
        uint64_t v38 = v36 + 1;
        if (v37) {
          goto LABEL_16;
        }
        v32[2] = v38;
      }
      uint64_t v13 = specialized LazyMapSequence.Iterator.next()();
      uint64_t v14 = v39;
      uint64_t v15 = v40;
      uint64_t v16 = v41;
      a4 = 1;
      if (!v39) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  long long v48;
  uint64_t v49;
  long long v50;
  long long v51;

  specialized LazyMapSequence.makeIterator()(&v50);
  long long v48 = v50;
  uint64_t v49 = v51;
  uint64_t v46 = a1;
  swift_bridgeObjectRetain();
  long long v47 = a3;
  swift_retain();
  uint64_t v9 = specialized LazyMapSequence.Iterator.next()();
  if (v10)
  {
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    while (1)
    {
      uint64_t v17 = (void *)*a5;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      uint64_t v26 = v17[2];
      BOOL v27 = (v18 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        break;
      }
      char v29 = v18;
      if (v17[3] >= v28)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, a4 & 1, v19, v20, v21, v22, v23, v24, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, SBYTE4(v49));
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((v29 & 1) != (v31 & 1)) {
          goto LABEL_17;
        }
        unint64_t v25 = v30;
      }
      char v32 = (void *)*a5;
      if (v29)
      {
        long long v33 = (uint64_t *)(v32[7] + 16 * v25);
        char v35 = *v33;
        char v34 = v33[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = (void *)(v32[7] + 16 * v25);
        swift_bridgeObjectRelease();
        *uint64_t v36 = v35;
        v36[1] = v34;
      }
      else
      {
        v32[(v25 >> 6) + 8] |= 1 << v25;
        BOOL v37 = (uint64_t *)(v32[6] + 16 * v25);
        *BOOL v37 = v13;
        v37[1] = v14;
        uint64_t v38 = (void *)(v32[7] + 16 * v25);
        *uint64_t v38 = v15;
        v38[1] = v16;
        uint64_t v39 = v32[2];
        uint64_t v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_16;
        }
        v32[2] = v41;
      }
      uint64_t v13 = specialized LazyMapSequence.Iterator.next()();
      uint64_t v14 = v42;
      uint64_t v15 = v43;
      uint64_t v16 = v44;
      a4 = 1;
      if (!v42) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  long long v32;

  specialized LazyMapSequence.makeIterator()(a1, a2, a3, &v32);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (v8)
  {
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    while (1)
    {
      uint64_t v13 = (void *)*a5;
      uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      uint64_t v16 = v13[2];
      uint64_t v17 = (v14 & 1) == 0;
      char v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        break;
      }
      uint64_t v19 = v14;
      if (v13[3] >= v18)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
        uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
        if ((v19 & 1) != (v21 & 1)) {
          goto LABEL_17;
        }
        uint64_t v15 = v20;
      }
      uint64_t v22 = (void *)*a5;
      if (v19)
      {
        uint64_t v23 = *(void *)(v22[7] + 8 * v15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v22[7];
        swift_bridgeObjectRelease();
        *(void *)(v24 + 8 * v15) = v23;
      }
      else
      {
        v22[(v15 >> 6) + 8] |= 1 << v15;
        unint64_t v25 = (uint64_t *)(v22[6] + 16 * v15);
        *unint64_t v25 = v10;
        v25[1] = v11;
        *(void *)(v22[7] + 8 * v15) = v12;
        uint64_t v26 = v22[2];
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (v27) {
          goto LABEL_16;
        }
        uint64_t v22[2] = v28;
      }
      uint64_t v10 = specialized LazyMapSequence.Iterator.next()();
      uint64_t v11 = v29;
      uint64_t v12 = v30;
      a4 = 1;
      if (!v29) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  void *v29;
  void *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  uint64_t v41;
  long long v42;
  long long v43;

  specialized LazyMapSequence.makeIterator()(&v42);
  uint64_t v40 = v42;
  uint64_t v41 = v43;
  uint64_t v38 = a1;
  swift_bridgeObjectRetain();
  uint64_t v39 = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()();
  if (v13)
  {
    OUTLINED_FUNCTION_8_42();
    while (1)
    {
      uint64_t v14 = (void *)*a5;
      uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v8);
      uint64_t v23 = v14[2];
      uint64_t v24 = (v15 & 1) == 0;
      unint64_t v25 = v23 + v24;
      if (__OFADD__(v23, v24)) {
        break;
      }
      uint64_t v26 = v15;
      if (v14[3] >= v25)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, a4 & 1, v16, v17, v18, v19, v20, v21, v38, v39, v40, *((uint64_t *)&v40 + 1), v41, SBYTE4(v41));
        BOOL v27 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v8);
        if ((v26 & 1) != (v28 & 1)) {
          goto LABEL_17;
        }
        uint64_t v22 = v27;
      }
      char v29 = (void *)*a5;
      if (v26)
      {
        swift_bridgeObjectRelease();
        unint64_t v30 = (void *)(v29[7] + 16 * v22);
        swift_bridgeObjectRelease();
        *unint64_t v30 = v6;
        v30[1] = v7;
      }
      else
      {
        v29[(v22 >> 6) + 8] |= 1 << v22;
        char v31 = (uint64_t *)(v29[6] + 16 * v22);
        *char v31 = v5;
        v31[1] = v8;
        char v32 = (void *)(v29[7] + 16 * v22);
        *char v32 = v6;
        v32[1] = v7;
        long long v33 = v29[2];
        char v34 = __OFADD__(v33, 1);
        char v35 = v33 + 1;
        if (v34) {
          goto LABEL_16;
        }
        v29[2] = v35;
      }
      specialized LazyMapSequence.Iterator.next()();
      OUTLINED_FUNCTION_8_42();
      a4 = 1;
      if (!v36) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  return swift_bridgeObjectRelease();
}

{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(v7, *a1, a1[1], a1[2], a1[3]);
  uint64_t v4 = v7[0];
  uint64_t v5 = v7[1];
  *a2 = result;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(&v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_227080464()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_7_1(v8);
  *uint64_t v9 = v10;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(a1, v3, v4, v5, v6, v7);
}

uint64_t outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t outlined init with take of TreeRegressorModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

id outlined copy of MLRegressorMetrics?(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of Result<_RegressorMetrics, Error>(result, a2, a3 & 1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_3()
{
  return v0 - 112;
}

uint64_t OUTLINED_FUNCTION_17_3@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

double OUTLINED_FUNCTION_21_2@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a2 = a3;
  *(void *)(a2 + 8) = (v3 - 32) | 0x8000000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_26_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_31_1()
{
  return 0;
}

double OUTLINED_FUNCTION_32_2@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  return specialized Dictionary._Variant.setValue(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_34_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  uint64_t v3 = v0[4];
  *(void *)(v1 - 152) = *v0;
  *(void *)(v1 - 144) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_0()
{
  return type metadata accessor for DataFrame();
}

uint64_t OUTLINED_FUNCTION_43_1()
{
  uint64_t v2 = *(void *)(v0 - 280);
  return outlined destroy of MLRandomForestRegressor.ModelParameters(v2);
}

uint64_t OUTLINED_FUNCTION_45_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + a1);
  uint64_t result = *v3;
  uint64_t v5 = v3[1];
  char v6 = *((unsigned char *)v3 + 16);
  *(void *)uint64_t v1 = *v3;
  *(void *)(v1 + 8) = v5;
  *(unsigned char *)(v1 + 16) = v6;
  return result;
}

uint64_t OUTLINED_FUNCTION_47_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_55_0()
{
  return 0x636E657265666E69;
}

uint64_t OUTLINED_FUNCTION_56_0()
{
  return type metadata accessor for MLRandomForestRegressor();
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  return Model.metadata.modify();
}

uint64_t OUTLINED_FUNCTION_62_0()
{
  return type metadata accessor for MLRandomForestRegressor();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.ModelParameters.ValidationData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_11;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2) {
    goto LABEL_8;
  }
  if (result != 1) {
    return result;
  }
  type metadata accessor for MLImageClassifier.DataSource();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_8:
    return swift_bridgeObjectRelease();
  }
  else if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for MLImageClassifier.ModelParameters.ValidationData(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_9;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for MLImageClassifier.ModelParameters.ValidationData(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.ModelParameters.ValidationData((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for MLImageClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for MLImageClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MLImageClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.ModelParameters.ValidationData((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLImageClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for MLImageClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.ModelParameters.ValidationData.extractFilesByLabel(trainingFiles:)(Swift::OpaquePointer trainingFiles)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for MLImageClassifier.DataSource();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(v3, (uint64_t)v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of MLImageClassifier.DataSource((uint64_t)v10, (uint64_t)v7);
      uint64_t v11 = static _ImageUtilities.getImageURLsAndLabels(from:)((uint64_t)v7);
      outlined destroy of MLImageClassifier.ModelParameters.ValidationData((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MLImageClassifier.DataSource);
      if (!v2) {
        goto LABEL_6;
      }
      break;
    case 2u:
      uint64_t v11 = *v10;
LABEL_6:
      swift_bridgeObjectRetain();
      break;
    default:
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      break;
  }
  rawValue = trainingFiles._rawValue;
  uint64_t v13 = (void *)v11;
  result.validation._rawValue = v13;
  result.training._rawValue = rawValue;
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLImageClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLImageClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for PersistentParametersForTreeBasedMethods(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DataFrame();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (char *)a2 + v9;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v9, 1, v7))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = &a1[v14];
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15);
    *(void *)uint64_t v16 = *v17;
    *((void *)v16 + 1) = v18;
    *(void *)&a1[v15] = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = &a1[v20];
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for BoostedTreeConfiguration();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataFrame();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4)) {
    v5(v6, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t v8 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

char *initializeWithCopy for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  uint64_t v16 = *((void *)v15 + 1);
  uint64_t v17 = *(void *)&a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  *(void *)&a1[v13] = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  return a1;
}

char *assignWithCopy for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v13)
    {
      v8(v10, v11, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

char *initializeWithTake for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

char *assignWithTake for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v13)
    {
      v8(v10, v11, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227081FC8);
}

uint64_t sub_227081FC8(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_11:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[5];
LABEL_10:
    uint64_t v9 = a1 + v12;
    goto LABEL_11;
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for BoostedTreeConfiguration();
    uint64_t v12 = a3[8];
    goto LABEL_10;
  }
  unint64_t v13 = *(void *)(a1 + a3[6] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2270820B8);
}

void sub_2270820B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(void *)(a1 + a4[6] + 8) = (a2 - 1);
        return;
      }
      uint64_t v10 = type metadata accessor for BoostedTreeConfiguration();
      uint64_t v14 = a4[8];
    }
    uint64_t v11 = a1 + v14;
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata accessor for PersistentParametersForTreeBasedMethods()
{
  uint64_t result = type metadata singleton initialization cache for PersistentParametersForTreeBasedMethods;
  if (!type metadata singleton initialization cache for PersistentParametersForTreeBasedMethods) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for PersistentParametersForTreeBasedMethods()
{
  type metadata accessor for DataFrame();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DataFrame?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for BoostedTreeConfiguration();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for DataFrame?()
{
  if (!lazy cache variable for type metadata for DataFrame?)
  {
    type metadata accessor for DataFrame();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DataFrame?);
    }
  }
}

uint64_t PersistentParametersForTreeBasedMethods.init(sessionDirectory:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v98 = type metadata accessor for CSVType();
  OUTLINED_FUNCTION_0();
  uint64_t v103 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v6);
  uint64_t v7 = type metadata accessor for CSVReadingOptions();
  MEMORY[0x270FA5388](v7 - 8);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  uint64_t v95 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x270FA5388](v10 - 8);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v12);
  uint64_t v13 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v96 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v17);
  uint64_t v105 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  unint64_t v108 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_16_2();
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v84 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  BOOL v27 = (char *)v84 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  unint64_t v30 = (char *)v84 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  long long v33 = (char *)v84 - v32;
  MEMORY[0x270FA5388](v31);
  char v35 = (char *)v84 - v34;
  uint64_t v36 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  uint64_t v37 = *(int *)(v36 + 20);
  uint64_t v104 = a2;
  uint64_t v107 = a2 + v37;
  uint64_t v101 = v13;
  __swift_storeEnumTagSinglePayload(a2 + v37, 1, 1, v13);
  uint64_t v38 = a1;
  URL.appendingPathComponent(_:)();
  id v39 = v106;
  uint64_t v40 = Data.init(contentsOf:options:)();
  id v106 = v39;
  if (v39)
  {
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
    uint64_t v43 = v105;
    v42(a1, v105);
    v42((uint64_t)v35, v43);
    uint64_t v44 = v107;
    return outlined destroy of URL?(v44, &demangling cache variable for type metadata for DataFrame?);
  }
  uint64_t v45 = v40;
  unint64_t v46 = v41;
  char v87 = (void (*)(uint64_t, void, uint64_t))v27;
  long long v86 = v24;
  uint64_t v88 = v30;
  uint64_t v89 = v33;
  uint64_t v93 = v36;
  uint64_t v94 = v38;
  unint64_t v47 = v108;
  long long v48 = *(void (**)(void))(v108 + 8);
  uint64_t v49 = v105;
  OUTLINED_FUNCTION_5_4();
  v48();
  uint64_t v50 = self;
  unint64_t v51 = v46;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v111 = 0;
  id v53 = objc_msgSend(v50, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v111);

  id v54 = (id)v111;
  if (!v53)
  {
    uint64_t v63 = v54;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v45, v51);
    uint64_t v64 = OUTLINED_FUNCTION_3_5((uint64_t)&v118);
    ((void (*)(uint64_t))v48)(v64);
LABEL_32:
    OUTLINED_FUNCTION_19_3();
    return outlined destroy of URL?(v44, &demangling cache variable for type metadata for DataFrame?);
  }
  uint64_t v90 = v45;
  unint64_t v91 = v51;
  os_log_type_t v92 = v48;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v113, (uint64_t)&v111);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_19_0(v65, 0xD000000000000037);
    OUTLINED_FUNCTION_6_4((uint64_t)v116);
    OUTLINED_FUNCTION_18_2();
    OUTLINED_FUNCTION_5_4();
    v66();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
    goto LABEL_32;
  }
  uint64_t v55 = v109;
  specialized Dictionary.subscript.getter(0x746567726174, 0xE600000000000000, v109, &v111);
  if (!v112)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
LABEL_34:
    OUTLINED_FUNCTION_19_3();
LABEL_40:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_19_0(v67, 0xD000000000000034);
    OUTLINED_FUNCTION_6_4((uint64_t)v116);
    OUTLINED_FUNCTION_5_4();
    v68();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
    uint64_t v44 = v107;
    return outlined destroy of URL?(v44, &demangling cache variable for type metadata for DataFrame?);
  }
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_19_3();
  if ((v56 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  uint64_t v58 = v109;
  uint64_t v57 = v110;
  OUTLINED_FUNCTION_15_4((uint64_t)"selectedFeatures");
  if (!v112)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
    goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  uint64_t v85 = v58;
  uint64_t v59 = v109;
  specialized Dictionary.subscript.getter(0x617265744978616DLL, 0xED0000736E6F6974, v55, &v111);
  if (!v112) {
    goto LABEL_36;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  v84[3] = v109;
  specialized Dictionary.subscript.getter(0x687470654478616DLL, 0xE800000000000000, v55, &v111);
  if (!v112)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0) {
    goto LABEL_38;
  }
  v84[2] = v109;
  OUTLINED_FUNCTION_15_4((uint64_t)"minLossReduction");
  if (!v112) {
    goto LABEL_36;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0) {
    goto LABEL_38;
  }
  specialized Dictionary.subscript.getter(0x646C6968436E696DLL, 0xEE00746867696557, v55, &v111);
  if (!v112) {
    goto LABEL_36;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0) {
    goto LABEL_38;
  }
  specialized Dictionary.subscript.getter(0x65536D6F646E6172, 0xEA00000000006465, v55, &v111);
  if (!v112) {
    goto LABEL_36;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0) {
    goto LABEL_42;
  }
  specialized Dictionary.subscript.getter(0x6173627553776F72, 0xEC000000656C706DLL, v55, &v111);
  if (!v112)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0)
  {
LABEL_42:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  specialized Dictionary.subscript.getter(0x75536E6D756C6F63, 0xEF656C706D617362, v55, &v111);
  if (!v112) {
    goto LABEL_43;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0) {
    goto LABEL_42;
  }
  specialized Dictionary.subscript.getter(0x657A695370657473, 0xE800000000000000, v55, &v111);
  if (!v112) {
    goto LABEL_43;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0) {
    goto LABEL_42;
  }
  OUTLINED_FUNCTION_24_3(0xD000000000000013, (uint64_t)"earlyStoppingRounds");
  if (!v112) {
    goto LABEL_43;
  }
  if ((OUTLINED_FUNCTION_1_7() & 1) == 0) {
    goto LABEL_42;
  }
  v84[1] = v109;
  uint64_t v60 = v93;
  uint64_t v61 = v104;
  uint64_t v62 = (uint64_t *)(v104 + *(int *)(v93 + 24));
  *uint64_t v62 = v85;
  v62[1] = v57;
  *(void *)(v61 + *(int *)(v60 + 28)) = v59;
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
  OUTLINED_FUNCTION_24_3(0xD000000000000011, (uint64_t)"parallelTreeCount");
  swift_bridgeObjectRelease();
  if (v112)
  {
    if (OUTLINED_FUNCTION_1_7()) {
      BoostedTreeConfiguration.parallelTreeCount.setter();
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v70 = v89;
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_11_2();
  URL.appendingPathComponent(_:)();
  uint64_t v71 = *(void (**)(void))(v47 + 16);
  unint64_t v108 = v47 + 16;
  ((void (*)(void, char *, uint64_t))v71)(v87, v70, v49);
  id v72 = v106;
  DataFrame.init(contentsOfSFrameDirectory:columns:rows:)();
  id v106 = v72;
  if (v72)
  {
    OUTLINED_FUNCTION_9_3();
    v71();
    unint64_t v102 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v73 = *(void (**)(void))(v103 + 104);
    unsigned int v100 = *MEMORY[0x263F1BF38];
    v103 += 104;
    char v87 = (void (*)(uint64_t, void, uint64_t))v73;
    v73(v99);
    OUTLINED_FUNCTION_25_4();
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    OUTLINED_FUNCTION_7_4();
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
    OUTLINED_FUNCTION_21_3();
    OUTLINED_FUNCTION_16_4();
    v76();
    OUTLINED_FUNCTION_9_3();
    v71();
    unint64_t v108 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    v87(v99, v100, v98);
    OUTLINED_FUNCTION_25_4();
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    OUTLINED_FUNCTION_7_4();
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
    OUTLINED_FUNCTION_6_4((uint64_t)v116);

    uint64_t v80 = v92;
    OUTLINED_FUNCTION_5_4();
    v80();
    uint64_t v81 = OUTLINED_FUNCTION_3_5((uint64_t)v114);
    ((void (*)(uint64_t))v80)(v81);
    uint64_t v82 = OUTLINED_FUNCTION_3_5((uint64_t)v115);
    ((void (*)(uint64_t))v80)(v82);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
    unint64_t v83 = v97;
    OUTLINED_FUNCTION_22_3(v97);
    unint64_t v102 = v83;
  }
  else
  {
    OUTLINED_FUNCTION_21_3();
    OUTLINED_FUNCTION_16_4();
    v74();
    OUTLINED_FUNCTION_9_3();
    v71();
    OUTLINED_FUNCTION_7_4();
    id v75 = v106;
    DataFrame.init(contentsOfSFrameDirectory:columns:rows:)();
    OUTLINED_FUNCTION_6_4((uint64_t)v116);
    if (v75) {

    }
    unint64_t v77 = v92;
    OUTLINED_FUNCTION_5_4();
    v77();
    uint64_t v78 = OUTLINED_FUNCTION_3_5((uint64_t)v114);
    ((void (*)(uint64_t))v77)(v78);
    uint64_t v79 = OUTLINED_FUNCTION_3_5((uint64_t)v115);
    ((void (*)(uint64_t))v77)(v79);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v113);
    OUTLINED_FUNCTION_22_3(v102);
  }
  return outlined assign with take of DataFrame?(v102, v107);
}

uint64_t PersistentParametersForTreeBasedMethods.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v67 = a1;
  v71[74] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x270FA5388](v2 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v60 = v3;
  type metadata accessor for CSVWritingOptions();
  OUTLINED_FUNCTION_0();
  uint64_t v64 = v4;
  uint64_t v65 = v5;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_49();
  uint64_t v58 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_106();
  uint64_t v62 = v8;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v68 = v10;
  uint64_t v69 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_49();
  uint64_t v57 = v11;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v61 = (char *)&v55 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v55 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CBA30;
  *(void *)(inited + 32) = 0x746567726174;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v18 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  uint64_t v19 = (uint64_t *)(v1 + *(int *)(v18 + 24));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v20;
  *(void *)(inited + 56) = v21;
  *(void *)(inited + 72) = v22;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000002272D4EF0;
  uint64_t v23 = *(void *)(v1 + *(int *)(v18 + 28));
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 96) = v23;
  *(void *)(inited + 120) = v24;
  strcpy((char *)(inited + 128), "maxIterations");
  *(_WORD *)(inited + 142) = -4864;
  uint64_t v59 = v18;
  uint64_t v63 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = BoostedTreeConfiguration.maximumIterations.getter();
  uint64_t v26 = (void *)MEMORY[0x263F8D6C8];
  *(void *)(inited + 144) = v25;
  *(void *)(inited + 168) = v26;
  *(void *)(inited + 176) = 0x687470654478616DLL;
  *(void *)(inited + 184) = 0xE800000000000000;
  *(void *)(inited + 192) = BoostedTreeConfiguration.maximumDepth.getter();
  *(void *)(inited + 216) = v26;
  *(void *)(inited + 224) = 0xD000000000000010;
  *(void *)(inited + 232) = 0x80000002272D4F10;
  BoostedTreeConfiguration.minimumLossReduction.getter();
  uint64_t v27 = MEMORY[0x263F8D538];
  *(void *)(inited + 240) = v28;
  *(void *)(inited + 264) = v27;
  strcpy((char *)(inited + 272), "minChildWeight");
  *(unsigned char *)(inited + 287) = -18;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(inited + 288) = v29;
  *(void *)(inited + 312) = v27;
  *(void *)(inited + 320) = 0x65536D6F646E6172;
  *(void *)(inited + 328) = 0xEA00000000006465;
  *(void *)(inited + 336) = BoostedTreeConfiguration.randomSeed.getter();
  *(void *)(inited + 360) = v26;
  strcpy((char *)(inited + 368), "rowSubsample");
  *(unsigned char *)(inited + 381) = 0;
  *(_WORD *)(inited + 382) = -5120;
  BoostedTreeConfiguration.rowSubsample.getter();
  *(void *)(inited + 384) = v30;
  *(void *)(inited + 408) = v27;
  *(void *)(inited + 416) = 0x75536E6D756C6F63;
  *(void *)(inited + 424) = 0xEF656C706D617362;
  BoostedTreeConfiguration.columnSubsample.getter();
  *(void *)(inited + 432) = v31;
  *(void *)(inited + 456) = v27;
  *(void *)(inited + 464) = 0x657A695370657473;
  *(void *)(inited + 472) = 0xE800000000000000;
  BoostedTreeConfiguration.learningRate.getter();
  *(void *)(inited + 480) = v32;
  *(void *)(inited + 504) = v27;
  *(void *)(inited + 512) = 0xD000000000000013;
  *(void *)(inited + 520) = 0x80000002272D4F30;
  uint64_t v33 = BoostedTreeConfiguration.earlyStoppingIterationCount.getter();
  *(void *)(inited + 552) = v26;
  if (v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v33;
  }
  *(void *)(inited + 528) = v35;
  uint64_t v70 = Dictionary.init(dictionaryLiteral:)();
  if (BoostedTreeConfiguration.parallelTreeCount.getter() != 1)
  {
    uint64_t v36 = (void *)BoostedTreeConfiguration.parallelTreeCount.getter();
    v71[3] = v26;
    v71[0] = v36;
    specialized Dictionary.subscript.setter((uint64_t)v71, 0xD000000000000011, 0x80000002272D4F50);
  }
  uint64_t v37 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v71[0] = 0;
  id v39 = objc_msgSend(v37, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, v71);

  id v40 = v71[0];
  if (v39)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    URL.appendingPathComponent(_:)();
    uint64_t v41 = v66;
    Data.write(to:options:)();
    if (v41)
    {
      OUTLINED_FUNCTION_25_0();
      v42();
      return OUTLINED_FUNCTION_27_4();
    }
    else
    {
      uint64_t v45 = v68 + 8;
      unint64_t v46 = *(void (**)(char *, uint64_t))(v68 + 8);
      v46(v16, v69);
      unint64_t v47 = v61;
      URL.appendingPathComponent(_:)();
      OUTLINED_FUNCTION_12_3();
      OUTLINED_FUNCTION_8_3();
      uint64_t v66 = type metadata accessor for DataFrame();
      uint64_t v48 = v63;
      DataFrameProtocol.writeCSV(to:options:)();
      uint64_t v49 = v65 + 8;
      char v56 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      OUTLINED_FUNCTION_5_4();
      v50();
      uint64_t v62 = v46;
      v46(v47, v69);
      uint64_t v51 = v60;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v48 + *(int *)(v59 + 20), v60, &demangling cache variable for type metadata for DataFrame?);
      if (__swift_getEnumTagSinglePayload(v51, 1, v66) == 1)
      {
        OUTLINED_FUNCTION_27_4();
        return outlined destroy of URL?(v51, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        uint64_t v68 = v45;
        uint64_t v65 = v49;
        OUTLINED_FUNCTION_11_2();
        URL.appendingPathComponent(_:)();
        OUTLINED_FUNCTION_12_3();
        uint64_t v52 = v58;
        OUTLINED_FUNCTION_8_3();
        DataFrameProtocol.writeCSV(to:options:)();
        OUTLINED_FUNCTION_27_4();
        v56(v52, v64);
        OUTLINED_FUNCTION_25_0();
        v54(v53);
        return (*(uint64_t (**)(uint64_t))(*(void *)(v66 - 8) + 8))(v51);
      }
    }
  }
  else
  {
    uint64_t v44 = v40;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (void *)((char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v9 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CSVType>);
  uint64_t v8 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = (void *)v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  uint64_t v11 = (char *)v7 + *(int *)(v2 + 48);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v27[1] = a1;
  uint64_t v14 = a1 + v13;
  uint64_t v15 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v14, (uint64_t)v7, &demangling cache variable for type metadata for (String, CSVType));
    uint64_t v16 = *v7;
    uint64_t v17 = v7[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v7, v17);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = (uint64_t *)(v9[6] + 16 * result);
    *uint64_t v21 = v16;
    v21[1] = v17;
    uint64_t v22 = v9[7];
    type metadata accessor for CSVType();
    OUTLINED_FUNCTION_8();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *))(v23 + 32))(v22 + *(void *)(v23 + 72) * v20, v11);
    uint64_t v24 = v9[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_11;
    }
    v9[2] = v26;
    v14 += v15;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t outlined assign with take of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        unint64_t v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  BOOL v14;

  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        uint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        uint64_t v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_3_5@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t OUTLINED_FUNCTION_6_4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 256);
  unint64_t v4 = *(void *)(v1 - 384);
  return outlined consume of Data._Representation(v3, v4);
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return MEMORY[0x270F05A08](1, 0, 0, 0, 0xE000000000000000, 1702195828, 0xE400000000000000, 0x65736C6166);
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return 0x69746164696C6176;
}

double OUTLINED_FUNCTION_15_4@<D0>(uint64_t a1@<X8>)
{
  return specialized Dictionary.subscript.getter(0xD000000000000010, (a1 - 32) | 0x8000000000000000, v1, (_OWORD *)(v2 - 192));
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return *(void *)(v0 - 360);
}

uint64_t OUTLINED_FUNCTION_21_3()
{
  return *(void *)(v0 - 248);
}

uint64_t OUTLINED_FUNCTION_22_3(uint64_t a1)
{
  uint64_t v4 = *(void *)(v2 - 272);
  return __swift_storeEnumTagSinglePayload(a1, v1, 1, v4);
}

double OUTLINED_FUNCTION_24_3@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2, (_OWORD *)(v3 - 192));
}

uint64_t OUTLINED_FUNCTION_25_4()
{
  return 1;
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t specialized Result<>.init(catching:)(uint64_t a1, int *a2)
{
  v2[2] = a1;
  v2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  uint64_t v4 = swift_task_alloc();
  v2[4] = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v5 = (void *)swift_task_alloc();
  v2[5] = v5;
  *uint64_t v5 = v2;
  v5[1] = specialized Result<>.init(catching:);
  return v7(v4);
}

uint64_t specialized Result<>.init(catching:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 48) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_storeEnumTagMultiPayload();
  outlined init with take of (key: URL, value: CIImage)?(v1, v2, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_11();
  **(void **)(v0 + 16) = *(void *)(v0 + 48);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLRandomForestRegressor.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLDecisionTreeRegressor.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLRandomForestClassifier.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLBoostedTreeRegressor.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLDecisionTreeClassifier.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLSoundClassifier.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLBoostedTreeClassifier.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLLinearRegressor.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_15_33(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  OUTLINED_FUNCTION_11_45(v3);
  uint64_t v4 = OUTLINED_FUNCTION_10_37();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_8_43(v4);
  swift_retain();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_52(v5);
  *uint64_t v6 = v7;
  v6[1] = specialized Result<>.init(catching:);
  OUTLINED_FUNCTION_12_37();
  return MLImageClassifier.init(delegate:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_3_70();
  OUTLINED_FUNCTION_9_44();
  OUTLINED_FUNCTION_4_62();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_1_57();
  OUTLINED_FUNCTION_13_44();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, &demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLStyleTransfer.init(model:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v2 = v1;
  v0[3] = v1;
  v0[4] = v3;
  v0[2] = v4;
  type metadata accessor for _Model();
  swift_allocObject();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = MLStyleTransfer.init(model:parameters:);
  return _Model.init(impl:)(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 56) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = (void *)v0[2];
  swift_release();
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for MLStyleTransfer(0);
  outlined init with take of MLStyleTransfer.ModelParameters.ValidationData(v2, (uint64_t)v3 + *(int *)(v4 + 20));
  OUTLINED_FUNCTION_12();
  return v5();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_11();
  swift_release();
  outlined destroy of MLStyleTransfer.ModelParameters();
  OUTLINED_FUNCTION_30();
  return v0();
}

void MLStyleTransfer.ModelParameters.init(algorithm:validation:maxIterations:textelDensity:styleStrength:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  char v11 = *a1;
  uint64_t v12 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)&a6[v12[6]] = 1;
  a6[v12[10]] = 0;
  *a6 = v11;
  outlined init with take of MLStyleTransfer.ModelParameters.ValidationData(a2, (uint64_t)&a6[v12[5]]);
  *(void *)&a6[v12[7]] = a3;
  *(void *)&a6[v12[8]] = a4;
  *(void *)&a6[v12[9]] = a5;
  OUTLINED_FUNCTION_59_1();
}

uint64_t type metadata accessor for MLStyleTransfer.ModelParameters(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.ModelParameters);
}

uint64_t type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.ModelParameters.ValidationData);
}

void MLStyleTransfer.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v39 = v4;
  uint64_t v5 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v36 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v37 = v6;
  uint64_t v38 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v42 = v13;
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  id v40 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  unint64_t v20 = (char *)&v33 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v41 = (char *)&v33 - v21;
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v12);
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v12);
  MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)();
  if (v1)
  {
    outlined destroy of MLStyleTransfer.ModelParameters();
    outlined destroy of MLStyleTransfer.ModelParameters();
    outlined destroy of URL?(v0, &demangling cache variable for type metadata for URL?);
    outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    outlined destroy of URL?(v0, &demangling cache variable for type metadata for URL?);
    outlined destroy of URL?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
    uint64_t v22 = v42;
    int v35 = v44;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    char v34 = v43;
    uint64_t v23 = v41;
    v33(v41, v20, v12);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v40, v23, v12);
    uint64_t v24 = v38;
    outlined init with copy of MLStyleTransfer.ModelParameters(v3, v38);
    unint64_t v25 = (*(unsigned __int8 *)(v22 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    unint64_t v26 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (*(unsigned __int8 *)(v36 + 80) + v26 + 9) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v28 = swift_allocObject();
    v33((char *)(v28 + v25), v40, v12);
    uint64_t v29 = v34;
    unint64_t v30 = v28 + v26;
    *(void *)unint64_t v30 = v34;
    char v31 = v35;
    *(unsigned char *)(v30 + 8) = v35;
    uint64_t v32 = v24;
    LOBYTE(v24) = v31;
    outlined init with take of MLStyleTransfer.ModelParameters.ValidationData(v32, v28 + v27);
    outlined copy of Result<_DataTable, Error>(v29, v24);
    specialized blockAwait<A>(_:)();
    swift_release();
    outlined consume of Result<_DataTable, Error>(v29, v24);
    outlined destroy of MLStyleTransfer.ModelParameters();
    outlined destroy of MLStyleTransfer.ModelParameters();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v12);
  }
  OUTLINED_FUNCTION_8_1();
}

void MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v30 = v0;
  uint64_t v31 = v1;
  uint64_t v6 = v5;
  uint64_t v28 = v7;
  uint64_t v8 = type metadata accessor for MLStyleTransfer.DataSource(0);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_61();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v29 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33();
  uint64_t v15 = v13 - v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_66_0();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_65_0();
  MEMORY[0x270FA5388](v18);
  uint64_t v32 = (char *)&v28 - v19;
  MLStyleTransfer.DataSource.processImages(textelDensity:styleImageDestination:contentImagesDestination:)();
  if (!v1)
  {
    uint64_t v31 = v6;
    uint64_t v20 = v29;
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 32);
    v21(v32, v3, v10);
    v21(v4, v15, v10);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    uint64_t v23 = v2 + *(int *)(v22 + 48);
    uint64_t v24 = v2 + *(int *)(v22 + 64);
    unint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
    v25(v2, v32, v10);
    v25(v23, v4, v10);
    *(void *)uint64_t v24 = 0;
    *(unsigned char *)(v24 + 8) = 0;
    MLStyleTransfer.DataSource.getStyleImageAndContentTable()();
    outlined destroy of MLStyleTransfer.ModelParameters();
    unint64_t v26 = *(void (**)(char *, uint64_t))(v29 + 8);
    OUTLINED_FUNCTION_21_4();
    ((void (*)(uint64_t))v26)(v27);
    v26(v32, v10);
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t outlined destroy of MLStyleTransfer.ModelParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_114();
  v2(v1);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return v0;
}

uint64_t type metadata accessor for MLStyleTransfer.DataSource(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.DataSource);
}

uint64_t closure #1 in MLStyleTransfer.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 25) = a4;
  *(void *)(v5 + 48) = a3;
  *(void *)(v5 + 56) = a5;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)(v5 + 64) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  *(void *)(v5 + 72) = v6;
  *(void *)(v5 + 80) = *(void *)(v6 - 8);
  *(void *)(v5 + 88) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in MLStyleTransfer.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLStyleTransfer.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  char v4 = *(unsigned char *)(v0 + 25) & 1;
  (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 16))(*(void *)(v0 + 88), *(void *)(v0 + 40), *(void *)(v0 + 72));
  *(void *)(v0 + 16) = v3;
  *(unsigned char *)(v0 + 24) = v4;
  outlined init with copy of MLStyleTransfer.ModelParameters(v2, v1);
  outlined copy of Result<_DataTable, Error>(v3, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in MLStyleTransfer.init(trainingData:parameters:);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 32);
  return MLStyleTransfer.init(styleImage:contentTable:parameters:)(v8, v6, (uint64_t *)(v0 + 16), v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  char *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

uint64_t sub_227085090()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  unint64_t v6 = (*(void *)(v5 + 64)
      + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  OUTLINED_FUNCTION_20_2();
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void (**)(void))(v4 + 8);
  OUTLINED_FUNCTION_11_3();
  v9();
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + v6), *(unsigned char *)(v0 + v6 + 8));
  uint64_t v10 = v0 + *(int *)(v1 + 28) + v8;
  if (!__swift_getEnumTagSinglePayload(v10, 1, v2)) {
    ((void (*)(uint64_t, uint64_t))v9)(v10, v2);
  }
  OUTLINED_FUNCTION_12_4();
  return MEMORY[0x270FA0238](v11, v12, v13);
}

uint64_t outlined init with take of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_36_2();
  v4(v3);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_56_1();
  v5();
  return a2;
}

uint64_t partial apply for closure #1 in MLStyleTransfer.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_1(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (*(void *)(v8 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  OUTLINED_FUNCTION_39_0(v10);
  unint64_t v12 = (v9 + *(unsigned __int8 *)(v11 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v0 + v7;
  uint64_t v14 = v0 + v9;
  uint64_t v15 = *(void *)(v0 + v9);
  char v16 = *(unsigned char *)(v14 + 8);
  uint64_t v17 = v0 + v12;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v18;
  *uint64_t v18 = v2;
  v18[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLStyleTransfer.init(trainingData:parameters:)(v4, v13, v15, v16, v17);
}

uint64_t MLStyleTransfer.init(styleImage:contentTable:parameters:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = *a3;
  *(void *)(v4 + 32) = a4;
  *(void *)(v4 + 40) = v5;
  *(unsigned char *)(v4 + 84) = *((unsigned char *)a3 + 8);
  return MEMORY[0x270FA2498](MLStyleTransfer.init(styleImage:contentTable:parameters:), 0, 0);
}

uint64_t MLStyleTransfer.init(styleImage:contentTable:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(int *)(type metadata accessor for MLStyleTransfer(0) + 20);
  *(_DWORD *)(v0 + 80) = v3;
  outlined init with copy of MLStyleTransfer.ModelParameters(v1, v2 + v3);
  static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)();
  *(void *)(v0 + 48) = v4;
  OUTLINED_FUNCTION_36_2();
  type metadata accessor for _Model();
  swift_allocObject();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  v5[1] = MLStyleTransfer.init(styleImage:contentTable:parameters:);
  return _Model.init(type:parameters:modelOptions:)(14, v1, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    outlined consume of Result<_DataTable, Error>(*(id *)(v5 + 40), *(unsigned char *)(v5 + 84));
  }
  else {
    *(void *)(v5 + 72) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  unsigned __int8 v1;
  char v2;
  void *v3;
  CreateML::ModelType v4;
  Swift::String v5;
  Swift::Float v6;
  CreateML::ModelType v7;
  Swift::String v8;
  Swift::Float v9;
  CreateML::ModelType v10;
  Swift::String v11;
  Swift::Float v12;
  CreateML::ModelType v13;
  Swift::String v14;
  Swift::Float v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t (*v19)(void);
  uint64_t v21;

  OUTLINED_FUNCTION_25();
  **(void **)(v0 + 16) = *(void *)(v0 + 72);
  uint64_t v1 = AnalyticsReporter.init()();
  uint64_t v2 = *(unsigned char *)(v0 + 84);
  uint64_t v3 = *(void **)(v0 + 40);
  if (v1)
  {
    outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 40), *(unsigned char *)(v0 + 84));
  }
  else
  {
    MLDataTable.size.getter();
    outlined consume of Result<_DataTable, Error>(v3, v2);
    uint64_t v4 = OUTLINED_FUNCTION_55_1();
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(v4, v5, v6);
    type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v7 = OUTLINED_FUNCTION_72_0();
    v8._uint64_t countAndFlagsBits = 0x726574492078614DLL;
    v8._id object = (void *)0xEE00736E6F697461;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(v7, v8, v9);
    uint64_t v10 = OUTLINED_FUNCTION_72_0();
    v11._uint64_t countAndFlagsBits = 0x44206C6574786554;
    v11._id object = (void *)0xEE00797469736E65;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(v10, v11, v12);
    uint64_t v13 = OUTLINED_FUNCTION_72_0();
    v14._uint64_t countAndFlagsBits = 0x745320656C797453;
    v14._id object = (void *)0xEE006874676E6572;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(v13, v14, v15);
  }
  swift_release();
  outlined destroy of MLStyleTransfer.ModelParameters();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v18(v16, v17);
  OUTLINED_FUNCTION_12();
  return v19();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_60_0();
  swift_release();
  outlined destroy of MLStyleTransfer.ModelParameters();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v0();
  outlined destroy of MLStyleTransfer.ModelParameters();
  OUTLINED_FUNCTION_30();
  return v1();
}

void static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v31 = v5;
  type metadata accessor for _Model.Parameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_2();
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (void *)((char *)v27 - v8);
  uint64_t v10 = *(void **)v4;
  char v11 = *(unsigned char *)(v4 + 8);
  if (MEMORY[0x22A676420](0))
  {
    OUTLINED_FUNCTION_36_2();
    type metadata accessor for CMLParameters();
    *(void *)(swift_allocObject() + 16) = v4;
    v27[8] = v10;
    char v28 = v11;
    outlined copy of Result<_DataTable, Error>(v10, v11);
    MLDataTable.subscript.getter(0x55746E65746E6F63, (void *)0xEB00000000734C52, (uint64_t)&v29);
    outlined consume of Result<_DataTable, Error>(v10, v11);
    unint64_t v12 = v29;
    if (v30)
    {
      outlined consume of Result<_DataTable, Error>(v29, 1);
    }
    else
    {
      uint64_t v13 = v29[2];
      swift_retain();
      outlined consume of Result<_DataTable, Error>(v12, 0);
      CMLParameters.add(key:column:)(72, v13);
      if (v2)
      {
LABEL_18:
        swift_release();
LABEL_19:
        swift_release();
        OUTLINED_FUNCTION_8_1();
        return;
      }
      swift_release();
    }
    uint64_t v14 = URL.path.getter();
    uint64_t v16 = v15;
    type metadata accessor for _UntypedColumn();
    swift_initStackObject();
    uint64_t v17 = *(void *)(specialized _UntypedColumn.init<A>(repeating:count:)(v14, v16, 1) + 16);
    swift_retain();
    CMLParameters.add(key:column:)(71, v17);
    if (v2)
    {
      swift_release();
      goto LABEL_18;
    }
    swift_release();
    uint64_t v18 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v19 = v18[9];
    static MLStyleTransfer.ModelParameters.verifyStyleStrengthParameter(value:)(*(void *)&v31[v19]);
    uint64_t v20 = v18[8];
    static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(*(void *)&v31[v20]);
    v27[0] = v20;
    if (MEMORY[0x22A676330](0))
    {
      OUTLINED_FUNCTION_36_2();
      type metadata accessor for CMLDictionary();
      *(void *)(swift_initStackObject() + 16) = v20;
      uint64_t v21 = 7237219;
      if (*v31) {
        uint64_t v21 = 0x6574694C6E6E63;
      }
      unint64_t v22 = 0xE700000000000000;
      if (!*v31) {
        unint64_t v22 = 0xE300000000000000;
      }
      *unint64_t v9 = v21;
      v9[1] = v22;
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v9);
      v27[1] = type metadata accessor for _Model.Parameters;
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_37_1(*(void *)&v31[v18[7]]);
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v1);
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_37_1(*(void *)&v31[v18[6]]);
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v1);
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_37_1(4 * (*(void *)&v31[v27[0]] / 4));
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v1);
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_37_1(*(void *)&v31[v19]);
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v1);
      outlined destroy of MLStyleTransfer.ModelParameters();
      uint64_t v23 = 1869903201;
      if (v31[v18[10]]) {
        uint64_t v23 = 7696483;
      }
      unint64_t v24 = 0xE400000000000000;
      if (v31[v18[10]]) {
        unint64_t v24 = 0xE300000000000000;
      }
      *uint64_t v1 = v23;
      v1[1] = v24;
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v1);
      outlined destroy of MLStyleTransfer.ModelParameters();
      type metadata accessor for CMLFeatureValue();
      uint64_t v25 = swift_retain();
      uint64_t v26 = CMLFeatureValue.__allocating_init(_:)(v25);
      CMLParameters.add(key:featureValue:)(47, v26);
      swift_release();
      swift_setDeallocating();
      tc_v1_release();
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t MLStyleTransfer.init(checkpoint:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for MLCheckpoint();
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v6);
  outlined init with copy of MLStyleTransfer.ModelParameters(a1, (uint64_t)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  outlined init with take of MLStyleTransfer.ModelParameters.ValidationData((uint64_t)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  specialized blockAwait<A>(_:)();
  if (v2)
  {
    outlined destroy of MLStyleTransfer.ModelParameters();
    return swift_release();
  }
  else
  {
    uint64_t v15 = v13;
    swift_release();
    outlined destroy of MLStyleTransfer.ModelParameters();
    *a2 = v15;
    uint64_t v16 = (char *)a2 + *(int *)(type metadata accessor for MLStyleTransfer(0) + 20);
    uint64_t v17 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v18 = (uint64_t)&v16[v17[5]];
    uint64_t v19 = type metadata accessor for URL();
    uint64_t result = __swift_storeEnumTagSinglePayload(v18, 1, 1, v19);
    *(void *)&v16[v17[6]] = 1;
    v16[v17[10]] = 0;
    *uint64_t v16 = 0;
    *(void *)&v16[v17[7]] = 500;
    *(void *)&v16[v17[8]] = 256;
    *(void *)&v16[v17[9]] = 5;
  }
  return result;
}

uint64_t closure #1 in MLStyleTransfer.init(checkpoint:)(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = type metadata accessor for URL();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in MLStyleTransfer.init(checkpoint:), 0, 0);
}

uint64_t closure #1 in MLStyleTransfer.init(checkpoint:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0 + 4;
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[6], v0[7]);
  uint64_t v2 = URL.absoluteString.getter();
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  if ((v3 & 0x1000000000000000) != 0 || !(v3 & 0x2000000000000000 | v2 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = closure #1 in CMLModel.init(url:);
  *(void *)(v6 + 24) = 0;
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v4 & 0x1000000000000000) != 0)
    {
      uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v7 = _StringObject.sharedUTF8.getter();
    }
    *uint64_t v1 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v7, v8, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    swift_task_dealloc();
    goto LABEL_7;
  }
  v0[2] = v4;
  v0[3] = v5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t result = specialized handling<A, B>(_:_:)(v0 + 2);
  if (!result)
  {
    __break(1u);
    return result;
  }
  *uint64_t v1 = result;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
LABEL_10:
  uint64_t v10 = v0[4];
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  type metadata accessor for CMLModel();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  type metadata accessor for _Model();
  swift_allocObject();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[10] = v12;
  *uint64_t v12 = v0;
  v12[1] = closure #1 in MLStyleTransfer.init(checkpoint:);
  return _Model.init(impl:)(v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 88) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_11();
  **(void **)(v0 + 40) = *(void *)(v0 + 88);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v1();
}

uint64_t outlined init with copy of MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_36_2();
  v4(v3);
  OUTLINED_FUNCTION_8();
  uint64_t v5 = OUTLINED_FUNCTION_111();
  v6(v5);
  return a2;
}

uint64_t sub_22708642C()
{
  uint64_t v1 = *(void *)(type metadata accessor for MLCheckpoint() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ((v2 + 16) & ~v2) + *(void *)(v1 + 64);
  uint64_t v4 = v2 | 7;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v5();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v6();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v3, v4);
}

uint64_t partial apply for closure #1 in MLStyleTransfer.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_114();
  uint64_t v2 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_1(v5);
  *uint64_t v6 = v7;
  v6[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLStyleTransfer.init(checkpoint:)(v0, v4);
}

uint64_t type metadata accessor for MLStyleTransfer(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer);
}

void static MLStyleTransfer.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static MLStyleTransfer.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLStyleTransfer>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLStyleTransfer.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_35_3();
  uint64_t v14 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = OUTLINED_FUNCTION_60();
  uint64_t v17 = type metadata accessor for MLStyleTransfer.DataSource(v16);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_40_0();
  outlined init with copy of MLStyleTransfer.ModelParameters(a1, v7);
  outlined init with copy of MLStyleTransfer.ModelParameters(a2, v6);
  outlined init with copy of MLStyleTransfer.ModelParameters(a3, v4);
  uint64_t v19 = type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
  uint64_t v20 = OUTLINED_FUNCTION_31_0();
  MLStyleTransfer.TrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)(v7, v6, v4, v20, v21, v22, v23, v24, v26, v27[0]);
  if (!v5)
  {
    v27[3] = v19;
    v27[4] = (uint64_t)&protocol witness table for MLStyleTransfer.TrainingSessionDelegate;
    v27[0] = v25;
    outlined init with copy of MLStyleTransfer.ModelParameters(a3, v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v27, v3, 14);
  }
}

uint64_t static MLStyleTransfer.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLStyleTransfer.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_35_3();
  outlined init with copy of MLStyleTransfer.ModelParameters(a1, v2);
  uint64_t v8 = type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v9 = MLStyleTransfer.TrainingSessionDelegate.init(sessionParameters:)(v2);
  if (!v3)
  {
    v10[3] = v8;
    v10[4] = &protocol witness table for MLStyleTransfer.TrainingSessionDelegate;
    v10[0] = v9;
    outlined init with copy of MLStyleTransfer.ModelParameters(a1, v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v10, v1, 14);
  }
}

void closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v46 = v7;
  char v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_57_1();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_41_1();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v17 = OUTLINED_FUNCTION_17(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_22_0();
  uint64_t v18 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_0();
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  MEMORY[0x270FA5388](v22);
  if (v9)
  {
    *uint64_t v0 = (uint64_t)v11;
    swift_storeEnumTagMultiPayload();
    id v31 = v11;
    v6(v0);
  }
  else
  {
    uint64_t v41 = v25;
    uint64_t v42 = v24;
    uint64_t v44 = (uint64_t)&v41 - v23;
    uint64_t v45 = v12;
    uint64_t v43 = v1;
    uint64_t v26 = v4;
    outlined init with copy of TrainingSessionDelegate(v46 + direct field offset for MLTrainingSession.delegate, (uint64_t)&v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    OUTLINED_FUNCTION_114();
    type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
    if (swift_dynamicCast())
    {
      uint64_t v27 = v47;
      uint64_t v28 = v47 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
      swift_beginAccess();
      outlined init with copy of URL?(v28, v2, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      uint64_t v29 = v26;
      char v30 = v6;
      if (__swift_getEnumTagSinglePayload(v2, 1, v18) != 1)
      {
        uint64_t v34 = v44;
        outlined init with take of MLStyleTransfer.ModelParameters.ValidationData(v2, v44);
        uint64_t v35 = type metadata accessor for TaskPriority();
        uint64_t v36 = v43;
        __swift_storeEnumTagSinglePayload(v43, 1, 1, v35);
        uint64_t v37 = v42;
        outlined init with copy of MLStyleTransfer.ModelParameters(v34, v42);
        unint64_t v38 = (*(unsigned __int8 *)(v41 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
        uint64_t v39 = (void *)swift_allocObject();
        v39[2] = 0;
        void v39[3] = 0;
        v39[4] = v27;
        outlined init with take of MLStyleTransfer.ModelParameters.ValidationData(v37, (uint64_t)v39 + v38);
        id v40 = (void (**)(uint64_t *))((char *)v39 + ((v20 + v38 + 7) & 0xFFFFFFFFFFFFFFF8));
        *id v40 = v6;
        v40[1] = v29;
        swift_retain();
        swift_retain();
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v36, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), (uint64_t)v39);
        swift_release();
        swift_release();
        outlined destroy of MLStyleTransfer.ModelParameters();
        goto LABEL_9;
      }
      swift_release();
      outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    }
    else
    {
      char v30 = v6;
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v32 = swift_allocError();
    *(void *)uint64_t v33 = 0xD000000000000021;
    *(void *)(v33 + 8) = 0x80000002272D5340;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(unsigned char *)(v33 + 48) = 0;
    *uint64_t v0 = v32;
    swift_storeEnumTagMultiPayload();
    v30(v0);
  }
  outlined destroy of URL?((uint64_t)v0, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
LABEL_9:
  OUTLINED_FUNCTION_12_4();
}

uint64_t closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  void v7[2] = a4;
  void v7[3] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  v7[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v5 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to specialized Result<>.init(catching:)
                                              + async function pointer to specialized Result<>.init(catching:));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  void *v2 = v0;
  v2[1] = closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  uint64_t v3 = *(void *)(v0 + 48);
  return v5(v3, (int *)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:));
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t))(v0 + 32))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  v3[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v2 = (int *)v0[5];
  uint64_t v1 = (unsigned char *)v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  char v5 = *(unsigned char *)(v3 + v4[5]);
  outlined init with copy of MLStyleTransfer.ModelParameters(v3 + v4[6], (uint64_t)&v1[v2[5]]);
  uint64_t v6 = *(void *)(v3 + v4[7]);
  uint64_t v7 = *(void *)(v3 + v4[8]);
  *(void *)&v1[v2[6]] = 1;
  uint64_t v8 = v2[10];
  *uint64_t v1 = v5;
  *(void *)&v1[v2[7]] = 500;
  *(void *)&v1[v2[8]] = v6;
  *(void *)&v1[v2[9]] = v7;
  v1[v8] = *(unsigned char *)(v3 + v4[9]);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[7] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  return MLStyleTransfer.init(model:parameters:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  int *v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

CGImageRef_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.stylize(image:)(CGImageRef image)
{
  v9[1] = *(CGImageRef *)MEMORY[0x263EF8340];
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  uint64_t v3 = image;
  Dictionary.init(dictionaryLiteral:)();
  id v4 = objc_allocWithZone(MEMORY[0x263F1EF40]);
  id v5 = @nonobjc VNImageRequestHandler.init(cgImage:options:)(v3);
  MLStyleTransfer.stylize(using:)(v5);
  if (v1)
  {
  }
  else
  {
    uint64_t v8 = v6;
    v9[0] = 0;
    VTCreateCGImageFromCVPixelBuffer(v6, 0, v9);

    return (CGImageRef_optional)v9[0];
  }
  return result;
}

void MLStyleTransfer.stylize(using:)(void *a1)
{
  v20[1] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNCoreMLModel);
  id v4 = @nonobjc VNCoreMLModel.__allocating_init(for:)(*(id *)(*(void *)v1 + 24));
  if (v2) {
    return;
  }
  id v5 = v4;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F1EE48]), sel_initWithModel_, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2272CBA80;
  *(void *)(v7 + 32) = v6;
  specialized Array._endMutation()();
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNRequest);
  id v8 = v6;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v20[0] = 0;
  unsigned int v10 = objc_msgSend(a1, sel_performRequests_error_, isa, v20);

  id v11 = v20[0];
  if (!v10)
  {
    id v18 = v20[0];
    _convertNSErrorToError(_:)();

    id v12 = v5;
LABEL_10:
    swift_willThrow();

    return;
  }
  id v12 = v8;
  id v13 = v11;
  unint64_t v14 = outlined bridged method (ob) of @objc VNRequest.results.getter(v12);
  if (!v14 || (uint64_t v15 = specialized _arrayConditionalCast<A, B>(_:)(v14), swift_bridgeObjectRelease(), !v15))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000039;
    *(void *)(v19 + 8) = 0x80000002272D5300;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(unsigned char *)(v19 + 48) = 0;
    id v8 = v5;
    goto LABEL_10;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v15 & 0xC000000000000001) == 0, v15);
  if ((v15 & 0xC000000000000001) != 0) {
    id v16 = (id)MEMORY[0x22A6753B0](0, v15);
  }
  else {
    id v16 = *(id *)(v15 + 32);
  }
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_pixelBuffer);
}

uint64_t MLStyleTransfer.getFullMetadata(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    long long v18 = *(_OWORD *)(a1 + 5);
    uint64_t v9 = a1[7];
    uint64_t v8 = a1[8];
    uint64_t v10 = a1[2];
    OUTLINED_FUNCTION_82_0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = MLStyleTransfer.ModelParameters.modelParametersDescription()();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v19 = v8;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v11, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v19);
      uint64_t v2 = v19;
    }
    else
    {
      MLStyleTransfer.ModelParameters.modelParametersDescription()();
      OUTLINED_FUNCTION_36_2();
    }
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = v10;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(_OWORD *)(a2 + 40) = v18;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
    id v13 = NSFullUserName();
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v16;
    *(void *)(a2 + 16) = 0xD000000000000033;
    *(void *)(a2 + 24) = 0x80000002272D4DC0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 49;
    *(void *)(a2 + 56) = 0xE100000000000000;
    OUTLINED_FUNCTION_82_0();
    uint64_t result = MLStyleTransfer.ModelParameters.modelParametersDescription()();
    uint64_t v2 = result;
  }
  *(void *)(a2 + 64) = v2;
  return result;
}

uint64_t MLStyleTransfer.ModelParameters.modelParametersDescription()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  OUTLINED_FUNCTION_73();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = 0xE90000000000006DLL;
  uint64_t v4 = 7237219;
  if (*v0) {
    uint64_t v4 = 0x6574694C6E6E63;
  }
  unint64_t v5 = 0xE300000000000000;
  if (*v0) {
    unint64_t v5 = 0xE700000000000000;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 56) = v5;
  strcpy((char *)(v2 + 64), "Textel Density");
  *(unsigned char *)(v2 + 79) = -18;
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)(inited + 80) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 88) = v6;
  strcpy((char *)(inited + 96), "Style Strength");
  *(unsigned char *)(inited + 111) = -18;
  *(void *)(inited + 112) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 120) = v7;
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t MLStyleTransfer.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v4;
  uint64_t v5 = OUTLINED_FUNCTION_83_0(v3, *(_OWORD *)(a2 + 32), *(_OWORD *)(a2 + 48), v14, v16);
  OUTLINED_FUNCTION_81_0(v5, v6, v7, v8, v9, v10, v11, v12, v15, v17, v24, v25, v26, v27, v19, v20, v21, v22, v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29);
  uint64_t v22 = v30;
  uint64_t v23 = v31;
  _Model.write(to:metadata:)(a1, (uint64_t *)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MLStyleTransfer.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 64);
  long long v6 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v6;
  uint64_t v7 = OUTLINED_FUNCTION_83_0(v5, *(_OWORD *)(a3 + 32), *(_OWORD *)(a3 + 48), v16, v18);
  OUTLINED_FUNCTION_81_0(v7, v8, v9, v10, v11, v12, v13, v14, v17, v19, v26, v27, v28, v29, v21, v22, v23, v24, v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31);
  uint64_t v24 = v32;
  uint64_t v25 = v33;
  _Model.write(toFile:metadata:)(a1, a2, (uint64_t *)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t static MLStyleTransfer.downloadAssets()()
{
  type metadata accessor for _Model();
  swift_allocObject();
  uint64_t result = _Model.init(type:)(14);
  if (!v0)
  {
    swift_retain();
    CMLModel.requestStyleTransferAssets()();
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLModel.requestStyleTransferAssets()()
{
  if (MEMORY[0x22A676420](0))
  {
    OUTLINED_FUNCTION_114();
    type metadata accessor for CMLParameters();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v0;
    CMLModel.callFunction(name:arguments:)(20, inited);
    if (!v1) {
      swift_release();
    }
    swift_setDeallocating();
    tc_v1_release();
  }
  else
  {
    __break(1u);
  }
}

void MLStyleTransfer.DataSource.processImages(textelDensity:styleImageDestination:contentImagesDestination:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v154 = v1;
  uint64_t v149 = v0;
  v150._rawValue = v5;
  uint64_t v146 = v6;
  uint64_t v8 = v7;
  uint64_t v148 = v9;
  os_log_type_t v141 = v10;
  uint64_t v145 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v140 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v144 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v147 = v16;
  type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v142 = v18;
  uint64_t v143 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_33();
  uint64_t v25 = v23 - v24;
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v124 - v28;
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  uint64_t v32 = (char *)&v124 - v31;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_41_2();
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  uint64_t v151 = (char *)&v124 - v35;
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_65_0();
  MEMORY[0x270FA5388](v36);
  unint64_t v38 = (char *)&v124 - v37;
  uint64_t v39 = type metadata accessor for MLStyleTransfer.DataSource(0);
  uint64_t v40 = OUTLINED_FUNCTION_17(v39);
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_22_0();
  uint64_t v41 = v154;
  static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(v8);
  if (!v41)
  {
    uint64_t v138 = v2;
    uint64_t v139 = v8;
    long long v134 = v20;
    uint64_t v135 = v29;
    uint64_t v136 = v25;
    char v137 = v32;
    outlined init with copy of MLStyleTransfer.ModelParameters((uint64_t)v149, v4);
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    uint64_t v43 = v4 + *(int *)(v42 + 48);
    uint64_t v44 = v4 + *(int *)(v42 + 64);
    uint64_t v45 = *(void *)v44;
    LODWORD(v154) = *(unsigned __int8 *)(v44 + 8);
    uint64_t v47 = v153 + 32;
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 32);
    uint64_t v48 = v4;
    uint64_t v49 = v152;
    v46(v38, v48, v152);
    v46(v3, v43, v49);
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for CIImage);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v50 = (void *)Dictionary.init(dictionaryLiteral:)();
    uint64_t v51 = v151;
    MLStyleTransfer.DataSource.getProcessedStyleImageURL(for:destination:)();
    uint64_t v149 = v46;
    uint64_t v52 = v45;
    uint64_t v53 = 4 * (v139 / 4);
    MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)();
    uint64_t v55 = v54;
    uint64_t v129 = v3;
    uint64_t v126 = v53;
    uint64_t v127 = v52;
    uint64_t v130 = v47;
    uint64_t v128 = v38;
    uint64_t v57 = v152;
    uint64_t v56 = v153;
    uint64_t v58 = v153 + 16;
    uint64_t v59 = v138;
    uint64_t v139 = *(void *)(v153 + 16);
    ((void (*)(uint64_t, char *, uint64_t))v139)(v138, v51, v152);
    id v60 = v55;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v60, v59, isUniquelyReferenced_nonNull_native);
    v150._rawValue = v50;
    swift_bridgeObjectRelease();
    uint64_t v62 = *(void (**)(void))(v56 + 8);
    OUTLINED_FUNCTION_9_2();
    v62();
    MLStyleTransfer.DataSource.getProcessedContentImagesDirectory(for:)();
    uint64_t v146 = v58;
    static UTType.image.getter();
    uint64_t v63 = v129;
    static _FileUtilities.readableFiles(at:type:)();
    uint64_t v133 = 0;
    uint64_t v67 = v64;
    id v125 = v60;
    uint64_t v131 = v62;
    uint64_t v132 = v56 + 8;
    OUTLINED_FUNCTION_25_0();
    v68();
    uint64_t v69 = *(void *)(v67 + 16);
    uint64_t v124 = v67;
    if (v69)
    {
      uint64_t v70 = v67 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
      uint64_t v71 = *(void *)(v153 + 72);
      uint64_t v142 = v140 + 8;
      uint64_t v143 = v71;
      uint64_t v72 = v147;
      uint64_t v73 = v137;
      uint64_t v74 = v63;
      uint64_t v75 = v69;
      while (1)
      {
        uint64_t v153 = v70;
        OUTLINED_FUNCTION_29_2();
        v77(v76);
        __swift_storeEnumTagSinglePayload(v72, 0, 1, v57);
        OUTLINED_FUNCTION_76_0(v72);
        if (v78) {
          break;
        }
        v149(v73, v72, v57);
        UUID.init()();
        UUID.uuidString.getter();
        OUTLINED_FUNCTION_25_0();
        v80(v79);
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_53_1();
        URL.appendingPathExtension(_:)();
        uint64_t v81 = v131;
        OUTLINED_FUNCTION_11_3();
        ((void (*)(uint64_t))v81)(v82);
        uint64_t v83 = v133;
        MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)();
        uint64_t v133 = v83;
        if (v83)
        {

          OUTLINED_FUNCTION_9_2();
          ((void (*)(uint64_t))v81)(v120);
          OUTLINED_FUNCTION_9_2();
          ((void (*)(uint64_t))v81)(v121);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_9_2();
          ((void (*)(uint64_t))v81)(v122);
          OUTLINED_FUNCTION_9_2();
          ((void (*)(uint64_t))v81)(v123);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_9_2();
          ((void (*)(uint64_t))v81)(v65);
          OUTLINED_FUNCTION_9_2();
          ((void (*)(uint64_t))v81)(v66);
          goto LABEL_3;
        }
        uint64_t v85 = v84;
        long long v86 = v74;
        uint64_t v87 = v57;
        OUTLINED_FUNCTION_29_2();
        v89(v88);
        id v90 = v85;
        rawValue = v150._rawValue;
        char v92 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)();
        uint64_t v95 = rawValue[2];
        BOOL v96 = (v94 & 1) == 0;
        Swift::Int v97 = v95 + v96;
        if (__OFADD__(v95, v96))
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        unint64_t v98 = v93;
        char v99 = v94;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<URL, CIImage>);
        Swift::Bool v100 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v92, v97);
        uint64_t v57 = v87;
        uint64_t v101 = v136;
        uint64_t v73 = v137;
        if (v100)
        {
          unint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v99 & 1) != (v103 & 1)) {
            goto LABEL_26;
          }
          unint64_t v98 = v102;
        }
        v150._rawValue = rawValue;
        if (v99)
        {
          uint64_t v104 = rawValue[7];

          *(void *)(v104 + 8 * v98) = v90;
        }
        else
        {
          rawValue[(v98 >> 6) + 8] |= 1 << v98;
          OUTLINED_FUNCTION_29_2();
          v106(v105);
          *(void *)(rawValue[7] + 8 * v98) = v90;
          uint64_t v107 = rawValue[2];
          BOOL v108 = __OFADD__(v107, 1);
          uint64_t v109 = v107 + 1;
          if (v108) {
            goto LABEL_25;
          }
          rawValue[2] = v109;
        }
        uint64_t v74 = v86;
        uint64_t v72 = v147;
        swift_bridgeObjectRelease();
        uint64_t v110 = v131;
        ((void (*)(uint64_t, uint64_t))v131)(v101, v57);

        OUTLINED_FUNCTION_39_2();
        ((void (*)(uint64_t))v110)(v111);
        OUTLINED_FUNCTION_39_2();
        ((void (*)(uint64_t))v110)(v112);
        uint64_t v70 = v153 + v143;
        if (!--v75) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v72 = v147;
LABEL_19:
      __swift_storeEnumTagSinglePayload(v72, 1, 1, v57);
    }
    swift_bridgeObjectRelease();
    MLStyleTransfer.DataSource.saveImagesToDisk(imagesDictionary:)(v150);
    uint64_t v113 = v141;
    uint64_t v114 = v131;

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_21_4();
    ((void (*)(uint64_t))v114)(v116);
    OUTLINED_FUNCTION_21_4();
    ((void (*)(uint64_t))v114)(v117);
    if (v115)
    {
      OUTLINED_FUNCTION_21_4();
      ((void (*)(uint64_t))v114)(v118);
      OUTLINED_FUNCTION_21_4();
      ((void (*)(uint64_t))v114)(v119);
    }
    else
    {
      v149(v113, (uint64_t)v151, v57);
    }
  }
LABEL_3:
  OUTLINED_FUNCTION_8_1();
}

uint64_t static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(uint64_t result)
{
  if ((unint64_t)(result - 64) > 0x3C0)
  {
    OUTLINED_FUNCTION_80_0();
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_46_1();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = 8236;
    v2._id object = (void *)0xE200000000000000;
    String.append(_:)(v2);
    v3._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_46_1();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 11869;
    v4._id object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v5 = OUTLINED_FUNCTION_85();
    *uint64_t v6 = 0xD00000000000001ELL;
    v6[1] = 0x80000002272D52E0;
    return OUTLINED_FUNCTION_8_4(v5, (uint64_t)v6);
  }
  return result;
}

void MLStyleTransfer.DataSource.getProcessedStyleImageURL(for:destination:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v20 = v2;
  uint64_t v19 = v3;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_35_3();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_61();
  uint64_t v10 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_40_0();
  static UTType.image.getter();
  unsigned __int8 v14 = static _FileUtilities.isReadableFile(at:of:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  if (v14)
  {
    outlined init with copy of URL?(v19, v0, &demangling cache variable for type metadata for URL?);
    if (__swift_getEnumTagSinglePayload(v0, 1, v22) == 1)
    {
      outlined destroy of URL?(v0, &demangling cache variable for type metadata for URL?);
      uint64_t v15 = NSTemporaryDirectory();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(fileURLWithPath:isDirectory:)();
      swift_bridgeObjectRelease();
      UUID.init()();
      UUID.uuidString.getter();
      OUTLINED_FUNCTION_25_0();
      v16();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_53_1();
      URL.appendingPathExtension(_:)();
      uint64_t v17 = *(void (**)(void))(v21 + 8);
      OUTLINED_FUNCTION_69_0();
      v17();
      OUTLINED_FUNCTION_69_0();
      v17();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v0, v22);
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v18, 0xD000000000000019);
  }
  OUTLINED_FUNCTION_8_1();
}

void MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)()
{
  OUTLINED_FUNCTION_9_0();
  char v34 = v2;
  uint64_t v33 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_41_1();
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v1, v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLFeatureValueImageOption, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  uint64_t v13 = (void *)*MEMORY[0x263F00CE0];
  *(void *)(inited + 64) = MEMORY[0x263F8D9D0];
  *(void *)(inited + 32) = v13;
  *(void *)(inited + 40) = 0;
  type metadata accessor for MLFeatureValueImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
  id v14 = v13;
  uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
  id v16 = @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)(v1, v5, v5, 1380401729, v15);
  if (!v0)
  {
    uint64_t v17 = v16;
    if ((AnalyticsReporter.init()() & 1) == 0)
    {
      if (v34)
      {
        uint64_t v18 = 0xD000000000000020;
        unint64_t v20 = 0x80000002272D51F0;
      }
      else
      {
        uint64_t v18 = VNImageCropAndScaleOption.description.getter(v33);
        unint64_t v20 = v19;
      }
      v21._uint64_t countAndFlagsBits = 0xD000000000000014;
      v21._id object = (void *)0x80000002272D5220;
      unint64_t v22 = v20;
      AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_styleTransfer, v21, *(Swift::String *)&v18);
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v23);
      CFURLRef v25 = v24;
      CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v27 = CGImageSourceCreateWithURL(v25, isa);

      if (v27)
      {
        CFDictionaryRef v28 = Dictionary._bridgeToObjectiveC()().super.isa;
        CFDictionaryRef v29 = CGImageSourceCopyPropertiesAtIndex(v27, 0, v28);

        if (v29)
        {
          static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
        }
      }
    }
    id v30 = objc_msgSend(v17, sel_imageBufferValue);
    if (v30)
    {
      uint64_t v31 = v30;
      objc_msgSend(objc_allocWithZone(MEMORY[0x263F00650]), sel_initWithCVPixelBuffer_, v30);
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v32, 0xD000000000000018);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

void MLStyleTransfer.DataSource.getProcessedContentImagesDirectory(for:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v37 = v3;
  uint64_t v38 = v0;
  uint64_t v5 = v4;
  v39[1] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v35 = v7;
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_15();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_41_2();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v35 - v16;
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)&v35 - v18;
  outlined init with copy of URL?(v5, v1, &demangling cache variable for type metadata for URL?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v10) == 1)
  {
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for URL?);
    unint64_t v20 = NSTemporaryDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:isDirectory:)();
    swift_bridgeObjectRelease();
    UUID.init()();
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_25_0();
    v23(v21, v22);
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(self, sel_defaultManager, v35, v36);
    URL._bridgeToObjectiveC()(v25);
    uint64_t v27 = v26;
    v39[0] = 0;
    unsigned int v28 = objc_msgSend(v24, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v26, 0, 0, v39);

    if (v28)
    {
      CFDictionaryRef v29 = *(void (**)(void))(v12 + 8);
      id v30 = v39[0];
      OUTLINED_FUNCTION_69_0();
      v29();
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v37, v2, v10);
    }
    else
    {
      id v32 = v39[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v33(v2, v10);
      v33((uint64_t)v17, v10);
    }
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    v31(v19, v1, v10);
    if (URL.hasDirectoryPath.getter())
    {
      v31(v37, (uint64_t)v19, v10);
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v34, 0xD000000000000037);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v10);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.DataSource.saveImagesToDisk(imagesDictionary:)(Swift::OpaquePointer imagesDictionary)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v3;
  v52[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v51 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage)?);
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_66_0();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_35_3();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00628]), sel_init);
  unsigned int v46 = *MEMORY[0x263F008A8];
  uint64_t v40 = v4 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v4 + 64);
  uint64_t v42 = v7;
  uint64_t v48 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v49 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  int64_t v41 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v43 = v4;
  swift_bridgeObjectRetain();
  int64_t v50 = 0;
  uint64_t v45 = v1;
  uint64_t v47 = v5;
  uint64_t v44 = v2;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  unint64_t v18 = v17 | (v50 << 6);
LABEL_5:
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v42 + 16))(v2, *(void *)(v43 + 48) + *(void *)(v42 + 72) * v18, v5);
  uint64_t v19 = *(void *)(v43 + 56);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage));
  uint64_t v21 = *(void **)(v19 + 8 * v18);
  *(void *)(v2 + *(int *)(v20 + 48)) = v21;
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v20);
  id v22 = v21;
  while (1)
  {
    outlined init with take of (key: URL, value: CIImage)?(v2, v1, &demangling cache variable for type metadata for (key: URL, value: CIImage)?);
    uint64_t v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage));
    if (__swift_getEnumTagSinglePayload(v1, 1, (uint64_t)v27) == 1)
    {

      swift_release();
      goto LABEL_33;
    }
    unsigned int v28 = *(void **)(v1 + v27[12]);
    (*v48)(v51, v1, v5);
    id v29 = objc_msgSend(v28, sel_colorSpace);
    if (!v29)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v37 = 0xD00000000000001ELL;
      *(void *)(v37 + 8) = 0x80000002272D5120;
      *(_OWORD *)(v37 + 16) = 0u;
      *(_OWORD *)(v37 + 32) = 0u;
      *(unsigned char *)(v37 + 48) = 2;
      swift_willThrow();
      goto LABEL_32;
    }
    uint64_t v31 = v29;
    URL._bridgeToObjectiveC()(v30);
    uint64_t v32 = OUTLINED_FUNCTION_114();
    type metadata accessor for CIImageRepresentationOption(v32);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
    Dictionary.init(dictionaryLiteral:)();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v52[0] = 0;
    unsigned int v34 = objc_msgSend(v13, sel_writePNGRepresentationOfImage_toURL_format_colorSpace_options_error_, v28, v27, v46, v31, isa, v52);

    if (!v34) {
      break;
    }
    uint64_t v35 = *v49;
    id v36 = v52[0];
    uint64_t v5 = v47;
    v35(v51, v47);

    uint64_t v2 = v44;
    uint64_t v1 = v45;
    if (v16) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v23 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
    }
    if (v23 < v41)
    {
      unint64_t v24 = *(void *)(v40 + 8 * v23);
      if (v24) {
        goto LABEL_9;
      }
      int64_t v25 = v50 + 2;
      ++v50;
      if (v23 + 1 < v41)
      {
        unint64_t v24 = *(void *)(v40 + 8 * v25);
        if (v24) {
          goto LABEL_12;
        }
        int64_t v50 = v23 + 1;
        if (v23 + 2 < v41)
        {
          unint64_t v24 = *(void *)(v40 + 8 * (v23 + 2));
          if (v24)
          {
            v23 += 2;
            goto LABEL_9;
          }
          int64_t v25 = v23 + 3;
          int64_t v50 = v23 + 2;
          if (v23 + 3 < v41)
          {
            unint64_t v24 = *(void *)(v40 + 8 * v25);
            if (v24)
            {
LABEL_12:
              int64_t v23 = v25;
LABEL_9:
              unint64_t v16 = (v24 - 1) & v24;
              unint64_t v18 = __clz(__rbit64(v24)) + (v23 << 6);
              int64_t v50 = v23;
              goto LABEL_5;
            }
            while (1)
            {
              int64_t v23 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                goto LABEL_35;
              }
              if (v23 >= v41) {
                break;
              }
              unint64_t v24 = *(void *)(v40 + 8 * v23);
              ++v25;
              if (v24) {
                goto LABEL_9;
              }
            }
            int64_t v50 = v41 - 1;
          }
        }
      }
    }
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage));
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v26);
    unint64_t v16 = 0;
  }
  id v38 = v52[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  id v13 = v28;
  unsigned int v28 = v31;
LABEL_32:

  OUTLINED_FUNCTION_25_0();
  v39();
  swift_release();
LABEL_33:
  OUTLINED_FUNCTION_8_1();
}

id @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v22 = (NSURL *)*MEMORY[0x263EF8340];
  URL._bridgeToObjectiveC()(v22);
  uint64_t v11 = v10;
  if (a5)
  {
    type metadata accessor for MLFeatureValueImageOption(0);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
    v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.Class isa = 0;
  }
  id v21 = 0;
  id v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureValueWithImageAtURL_pixelsWide_pixelsHigh_pixelFormatType_options_error_, v11, a2, a3, a4, v12.super.isa, &v21);

  id v14 = v21;
  if (v13)
  {
    uint64_t v15 = type metadata accessor for URL();
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
    id v17 = v14;
    v16(a1, v15);
  }
  else
  {
    id v18 = v21;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  }
  return v13;
}

uint64_t VNImageCropAndScaleOption.description.getter(uint64_t a1)
{
  if (!a1) {
    return 0x43207265746E6543;
  }
  uint64_t v1 = 0x694620656C616353;
  unint64_t v2 = 0xD000000000000016;
  uint64_t v3 = 0x6669636570736E55;
  if (a1 == 1) {
    uint64_t v3 = 0x694620656C616353;
  }
  if (a1 != 257) {
    unint64_t v2 = v3;
  }
  if (a1 != 2) {
    uint64_t v1 = v2;
  }
  if (a1 == 258) {
    return 0xD000000000000017;
  }
  else {
    return v1;
  }
}

void MLStyleTransfer.DataSource.getStyleImageAndContentTable()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v15 = v3;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = type metadata accessor for MLStyleTransfer.DataSource(0);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_40_0();
  outlined init with copy of MLStyleTransfer.ModelParameters(v0, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  uint64_t v10 = *(void (**)(void))(v5 + 32);
  OUTLINED_FUNCTION_64_0();
  v10();
  OUTLINED_FUNCTION_64_0();
  v10();
  static MLStyleTransfer.generateTrainingTable(directoryURL:)();
  if (v1)
  {
    uint64_t v11 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_21_4();
    v11();
    OUTLINED_FUNCTION_21_4();
    v11();
  }
  else
  {
    OUTLINED_FUNCTION_21_4();
    v12();
    OUTLINED_FUNCTION_64_0();
    v10();
    *(void *)uint64_t v15 = v13;
    *(unsigned char *)(v15 + 8) = v14;
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t static MLStyleTransfer.generateTrainingTable(directoryURL:)()
{
  type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_24_4();
  static UTType.image.getter();
  static _FileUtilities.readableFiles(at:type:)();
  if (v0)
  {
    uint64_t v3 = OUTLINED_FUNCTION_62_1();
    return v4(v3);
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = OUTLINED_FUNCTION_62_1();
    v8(v7);
    if (*(void *)(v6 + 16))
    {
      static MLStyleTransfer.generateTrainingTable(urls:)();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      return OUTLINED_FUNCTION_19_0(v9, 0xD00000000000003CLL);
    }
  }
}

void MLStyleTransfer.ModelParameters.algorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *MLStyleTransfer.ModelParameters.algorithm.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*MLStyleTransfer.ModelParameters.algorithm.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.validation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  return outlined init with copy of MLStyleTransfer.ModelParameters(v1 + *(int *)(v3 + 20), a1);
}

uint64_t MLStyleTransfer.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 20);

  return outlined assign with take of MLStyleTransfer.ModelParameters.ValidationData(a1, v3);
}

uint64_t (*MLStyleTransfer.ModelParameters.validation.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 28));
}

uint64_t MLStyleTransfer.ModelParameters.maxIterations.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*MLStyleTransfer.ModelParameters.maxIterations.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.textelDensity.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 32));
}

uint64_t MLStyleTransfer.ModelParameters.textelDensity.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*MLStyleTransfer.ModelParameters.textelDensity.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.styleStrength.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 36));
}

uint64_t MLStyleTransfer.ModelParameters.styleStrength.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(void *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*MLStyleTransfer.ModelParameters.styleStrength.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLStyleTransfer.ModelParameters.ValidationData.preprocessValidationData(to:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v45 = v4;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v43 = v6;
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v42 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v46 = v10;
  uint64_t v49 = (char *)type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v47 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = OUTLINED_FUNCTION_60();
  uint64_t v14 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(v13);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v48 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_65_0();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_41_2();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_66_0();
  MEMORY[0x270FA5388](v21);
  int64_t v23 = (char *)v39 - v22;
  outlined init with copy of MLStyleTransfer.ModelParameters(v0, v0);
  OUTLINED_FUNCTION_76_0(v0);
  if (v24)
  {
    outlined destroy of MLStyleTransfer.ModelParameters();
  }
  else
  {
    v39[1] = v3;
    uint64_t v40 = v2;
    uint64_t v41 = v0;
    uint64_t v25 = v48;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
    v26(v23, v0, v16);
    static UTType.image.getter();
    unsigned __int8 v27 = static _FileUtilities.isReadableFile(at:of:)();
    OUTLINED_FUNCTION_25_0();
    v28();
    if (v27)
    {
      uint64_t v49 = v23;
      uint64_t v29 = v46;
      outlined init with copy of URL?(v45, v46, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_76_0(v29);
      if (v24)
      {
        id v30 = NSTemporaryDirectory();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        URL.init(fileURLWithPath:isDirectory:)();
        swift_bridgeObjectRelease();
        UUID.init()();
        UUID.uuidString.getter();
        OUTLINED_FUNCTION_25_0();
        v31();
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        uint64_t v32 = *(void (**)(void))(v25 + 8);
        OUTLINED_FUNCTION_39_2();
        v32();
        unsigned int v34 = v40;
        OUTLINED_FUNCTION_53_1();
        URL.appendingPathExtension(_:)();
        OUTLINED_FUNCTION_39_2();
        v32();
        outlined destroy of URL?(v29, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        unsigned int v34 = v40;
        v26(v40, v29, v16);
      }
      uint64_t v35 = (uint64_t)v49;
      id v36 = MLStyleTransfer.ModelParameters.ValidationData.processImage(sourceURL:pixels:processingOption:)((uint64_t)v49, 512, 2);
      if (!v1)
      {
        uint64_t v37 = v36;
        MLStyleTransfer.ModelParameters.ValidationData.saveImage(for:at:)(v36);
      }
      id v38 = *(void (**)(char *, uint64_t))(v25 + 8);
      v38(v34, v16);
      v38((char *)v35, v16);
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v33, 0xD000000000000020);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v16);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

id MLStyleTransfer.ModelParameters.ValidationData.processImage(sourceURL:pixels:processingOption:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = (id)type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLFeatureValueImageOption, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  uint64_t v13 = (void *)*MEMORY[0x263F00CE0];
  *(void *)(inited + 64) = MEMORY[0x263F8D9D0];
  *(void *)(inited + 32) = v13;
  *(void *)(inited + 40) = a3;
  type metadata accessor for MLFeatureValueImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
  id v14 = v13;
  uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
  id v16 = @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)((uint64_t)v10, a2, a2, 1380401729, v15);
  if (!v3)
  {
    uint64_t v17 = v16;
    id v18 = objc_msgSend(v16, sel_imageBufferValue);
    if (v18)
    {
      uint64_t v19 = v18;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00650]), sel_initWithCVPixelBuffer_, v18);
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v21 = 0xD000000000000023;
      *(void *)(v21 + 8) = 0x80000002272D5140;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      *(unsigned char *)(v21 + 48) = 0;
      swift_willThrow();
    }
  }
  return v11;
}

void MLStyleTransfer.ModelParameters.ValidationData.saveImage(for:at:)(void *a1)
{
  v13[1] = *(id *)MEMORY[0x263EF8340];
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00628]), sel_init);
  id v3 = objc_msgSend(a1, sel_colorSpace);
  if (v3)
  {
    uint64_t v4 = v3;
    unsigned int v12 = *MEMORY[0x263F008A8];
    URL._bridgeToObjectiveC()((NSURL *)*MEMORY[0x263F008A8]);
    uint64_t v6 = v5;
    type metadata accessor for CIImageRepresentationOption(0);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
    Dictionary.init(dictionaryLiteral:)();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v13[0] = 0;
    unsigned __int8 v8 = objc_msgSend(v2, sel_writePNGRepresentationOfImage_toURL_format_colorSpace_options_error_, a1, v6, v12, v4, isa, v13);

    if (v8)
    {
      id v9 = v13[0];
    }
    else
    {
      id v11 = v13[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD00000000000001ELL;
    *(void *)(v10 + 8) = 0x80000002272D5120;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(unsigned char *)(v10 + 48) = 2;
    swift_willThrow();
  }
}

CreateML::MLStyleTransfer::ModelParameters::ModelAlgorithmType_optional __swiftcall MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:)(Swift::String rawValue)
{
  id object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._id object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:), v3);
  result.CMTimeValue value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  char *v4 = v7;
  return result;
}

uint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.rawValue.getter()
{
  if (*v0) {
    return 0x6574694C6E6E63;
  }
  else {
    return 7237219;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

CreateML::MLStyleTransfer::ModelParameters::ModelAlgorithmType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(Swift::String *a1)
{
  return MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLStyleTransfer.ModelParameters.ModelAlgorithmType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static MLStyleTransfer.ModelParameters.verifyStyleStrengthParameter(value:)(uint64_t result)
{
  if ((unint64_t)(result - 1) > 9)
  {
    OUTLINED_FUNCTION_80_0();
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_46_1();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = 8236;
    v2._id object = (void *)0xE200000000000000;
    String.append(_:)(v2);
    v3._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_46_1();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 11869;
    v4._id object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v5 = OUTLINED_FUNCTION_85();
    *uint64_t v6 = 0xD00000000000001ELL;
    v6[1] = 0x80000002272D5170;
    return OUTLINED_FUNCTION_8_4(v5, (uint64_t)v6);
  }
  return result;
}

void static MLStyleTransfer.generateTrainingTable(urls:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v32 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_24_4();
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v27 = v6;
    uint64_t v30 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    uint64_t v12 = v8 + 16;
    uint64_t v14 = v4 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v28 = *(void *)(v12 + 56);
    uint64_t v29 = v13;
    do
    {
      v29(v1, v14, v32);
      uint64_t v15 = URL.path.getter();
      uint64_t v17 = v16;
      OUTLINED_FUNCTION_21_4();
      v18();
      uint64_t v11 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v30;
      }
      unint64_t v19 = *(void *)(v11 + 16);
      if (v19 >= *(void *)(v11 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v30;
      }
      *(void *)(v11 + 16) = v19 + 1;
      uint64_t v20 = v11 + 16 * v19;
      *(void *)(v20 + 32) = v15;
      *(void *)(v20 + 40) = v17;
      v14 += v28;
      --v10;
    }
    while (v10);
    uint64_t v2 = v0;
    uint64_t v6 = v27;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = 0x55746E65746E6F63;
  *(void *)(inited + 40) = 0xEB00000000734C52;
  uint64_t v30 = v11;
  MEMORY[0x270FA5388](inited);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v24 = v23;
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v24 & 1;
  uint64_t v25 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v25, (uint64_t)&v30);
  if (!v2)
  {
    char v26 = v31;
    *(void *)uint64_t v6 = v30;
    *(unsigned char *)(v6 + 8) = v26;
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t CMLModel.contentLoss.getter()
{
  return OUTLINED_FUNCTION_48_0();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t result = MEMORY[0x22A676420](0);
  if (result)
  {
    OUTLINED_FUNCTION_114();
    type metadata accessor for CMLParameters();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v0;
    type metadata accessor for CMLFeatureValue();
    uint64_t v3 = CMLFeatureValue.__allocating_init(_:)();
    CMLParameters.add(key:featureValue:)(35, v3);
    swift_release();
    CMLModel.callFunction(name:arguments:)(16, inited);
    CMLVariant.featureValue()();
    specialized handling<A, B>(_:_:)();
    uint64_t v5 = v4;
    swift_release();
    swift_release();
    swift_setDeallocating();
    tc_v1_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CMLModel.styleLoss.getter()
{
  return OUTLINED_FUNCTION_48_0();
}

unint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.description.getter()
{
  if (*v0) {
    return 0xD00000000000004FLL;
  }
  else {
    return 0xD000000000000046;
  }
}

unint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.debugDescription.getter()
{
  if (*v0) {
    return 0xD00000000000004FLL;
  }
  else {
    return 0xD000000000000046;
  }
}

void MLStyleTransfer.ModelParameters.ModelAlgorithmType.playgroundDescription.getter(unint64_t *a1@<X8>)
{
  BOOL v2 = *v1 == 0;
  if (*v1) {
    unint64_t v3 = 0xD00000000000004FLL;
  }
  else {
    unint64_t v3 = 0xD000000000000046;
  }
  unint64_t v4 = 0x80000002272D4FC0;
  a1[3] = MEMORY[0x263F8D310];
  if (!v2) {
    unint64_t v4 = 0x80000002272D4F70;
  }
  *a1 = v3;
  a1[1] = v4;
}

uint64_t MLStyleTransfer.ModelParameters.description.getter()
{
  OUTLINED_FUNCTION_73();
  uint64_t v13 = v1;
  if (*v0) {
    unint64_t v2 = 0xD00000000000004FLL;
  }
  else {
    unint64_t v2 = 0xD000000000000046;
  }
  if (*v0) {
    unint64_t v3 = 0x80000002272D4F70;
  }
  else {
    unint64_t v3 = 0x80000002272D4FC0;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  v5._uint64_t countAndFlagsBits = v13;
  v5._id object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_68_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54_1();
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  v7._uint64_t countAndFlagsBits = v13;
  v7._id object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_68_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54_1();
  v8._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_67_0();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  v9._uint64_t countAndFlagsBits = v13;
  v9._id object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_68_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_54_1();
  v10._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_67_0();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  v11._uint64_t countAndFlagsBits = v13;
  v11._id object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t MLStyleTransfer.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLStyleTransfer.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MLStyleTransfer.debugDescription.getter()
{
  ModelType.description.getter(*(unsigned char *)(*(void *)v0 + 32));
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_82_0();
  uint64_t v3 = MLStyleTransfer.ModelParameters.description.getter();
  Swift::String v5 = v4;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 0x656D617261500A0ALL;
  v6._id object = (void *)0xED00000A73726574;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v3;
  v7._id object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

NSAttributedString MLStyleTransfer.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v3._uint64_t countAndFlagsBits = MLStyleTransfer.debugDescription.getter();
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.Class isa = (Class)v2;
  a1->super.Class isa = result.super.isa;
  return result;
}

void static MLStyleTransfer.ModelParameters.ValidationData.== infix(_:_:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_57_1();
  uint64_t v11 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_41_1();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData));
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = v0 + *(int *)(v15 + 56);
  outlined init with copy of MLStyleTransfer.ModelParameters(v6, v0);
  outlined init with copy of MLStyleTransfer.ModelParameters(v4, v16);
  OUTLINED_FUNCTION_15_2(v0);
  if (!v17)
  {
    outlined init with copy of MLStyleTransfer.ModelParameters(v0, v2);
    OUTLINED_FUNCTION_15_2(v16);
    if (!v17)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v16, v7);
      MEMORY[0x22A671E90](v2, v1);
      id v18 = *(void (**)(void))(v9 + 8);
      OUTLINED_FUNCTION_43_2();
      v18();
      OUTLINED_FUNCTION_43_2();
      v18();
      outlined destroy of MLStyleTransfer.ModelParameters();
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
LABEL_9:
    outlined destroy of URL?(v0, &demangling cache variable for type metadata for (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData));
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_15_2(v16);
  if (!v17) {
    goto LABEL_9;
  }
  outlined destroy of MLStyleTransfer.ModelParameters();
LABEL_10:
  OUTLINED_FUNCTION_12_4();
}

id @nonobjc VNImageRequestHandler.init(cgImage:options:)(void *a1)
{
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_initWithCGImage_options_, a1, isa);

  return v4;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  OUTLINED_FUNCTION_3_6();
  if (v9)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
  if (OUTLINED_FUNCTION_33_2())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    OUTLINED_FUNCTION_71_0();
    if (!v13) {
      goto LABEL_12;
    }
    unint64_t v10 = v12;
  }
  uint64_t v14 = *v3;
  if (v11)
  {
    *(void *)(*(void *)(v14 + 56) + 8 * v10) = a1;
    OUTLINED_FUNCTION_59_1();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, v14);
    OUTLINED_FUNCTION_59_1();
    swift_bridgeObjectRetain();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
}

{
  Swift::Int *v0;
  Swift::Int *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;

  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  char v9 = v8;
  char v11 = v10;
  unint64_t v12 = *v0;
  specialized __RawDictionaryStorage.find<A>(_:)(v6, v4);
  OUTLINED_FUNCTION_3_6();
  if (v15)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v16 = v13;
  char v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v7, v5);
    OUTLINED_FUNCTION_70_0();
    if (!v19) {
      goto LABEL_12;
    }
    uint64_t v16 = v18;
  }
  uint64_t v20 = (void *)*v1;
  if (v17)
  {
    uint64_t v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *uint64_t v21 = v11;
    v21[1] = v9;
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, v7, v5, v11, v9, v20);
    OUTLINED_FUNCTION_12_4();
    swift_bridgeObjectRetain();
  }
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_19_4();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_30_3(v6, v7, v8);
  OUTLINED_FUNCTION_3_6();
  if (v11)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v9;
  char v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(v5);
  if (OUTLINED_FUNCTION_33_2())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
    OUTLINED_FUNCTION_70_0();
    if (!v15) {
      goto LABEL_12;
    }
    unint64_t v12 = v14;
  }
  uint64_t v16 = *v3;
  if (v13)
  {
    char v17 = *(void *)(v16 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v17 + 8 * v12) = v0;
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v12, v2, v1, v0, v16);
    OUTLINED_FUNCTION_12_4();
    swift_bridgeObjectRetain();
  }
}

{
  _OWORD *v0;
  Swift::Int *v1;
  uint64_t v2;
  Swift::Int *v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;

  OUTLINED_FUNCTION_19_4();
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  OUTLINED_FUNCTION_114();
  char v8 = type metadata accessor for CodingUserInfoKey();
  OUTLINED_FUNCTION_0();
  unint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_24_4();
  unint64_t v12 = *v1;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_3_6();
  if (v15)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v16 = v13;
  char v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v5 & 1, v12)) {
    goto LABEL_5;
  }
  id v18 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = (void *)*v3;
  if (v17)
  {
    OUTLINED_FUNCTION_44();
    OUTLINED_FUNCTION_12_4();
    outlined init with take of Any(v21, v22);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v7, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v16, v2, v0, v20);
    OUTLINED_FUNCTION_12_4();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3)
{
  id v4 = v3;
  uint64_t v8 = type metadata accessor for MetricsKey();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v14 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_3_6();
  if (v17)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v18 = v15;
  char v19 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MetricsKey, Double>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a2 & 1, v14))
  {
    specialized __RawDictionaryStorage.find<A>(_:)();
    OUTLINED_FUNCTION_70_0();
    if (!v21) {
      goto LABEL_10;
    }
    unint64_t v18 = v20;
  }
  uint64_t v22 = (void *)*v4;
  if (v19)
  {
    *(double *)(v22[7] + 8 * v18) = a3;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v13, v22, a3);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, MetricsKey>, MEMORY[0x263F042E0], MEMORY[0x263F042E0]);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, CSVType>, MEMORY[0x263F1BF48], MEMORY[0x263F1BF48]);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, JSONType>, MEMORY[0x263F1BF60], MEMORY[0x263F1BF60]);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _NativeDictionary<String, MLProgram.Block>, MEMORY[0x263F53328], MEMORY[0x263F53328]);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, void (*a6)(void), void (*a7)(void))
{
  uint64_t v10 = v7;
  Swift::Int v15 = *v7;
  specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  OUTLINED_FUNCTION_3_6();
  if (v18)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v19 = v16;
  char v20 = v17;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  uint64_t v23 = *v10;
  if (v20)
  {
    uint64_t v24 = *(void *)(v23 + 56);
    a6(0);
    OUTLINED_FUNCTION_8();
    char v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
    uint64_t v28 = v27;
    uint64_t v29 = v24 + *(void *)(v25 + 72) * v19;
    return v26(v29, a1, v28);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v19, a2, a3, a1, v23, a7);
    return swift_bridgeObjectRetain();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_30_3(a1, a2, a3);
  OUTLINED_FUNCTION_3_6();
  if (v9)
  {
    __break(1u);
LABEL_14:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (OUTLINED_FUNCTION_33_2())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
    OUTLINED_FUNCTION_71_0();
    if (!v13) {
      goto LABEL_14;
    }
    unint64_t v10 = v12;
  }
  if (v11)
  {
    OUTLINED_FUNCTION_44();
    OUTLINED_FUNCTION_59_1();
    return outlined init with take of Any(v14, v15);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, v5, v4, v3, *v6);
    OUTLINED_FUNCTION_59_1();
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<URL, CIImage>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v18 = v20;
LABEL_5:
  char v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];

    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v11, a1, v22);
  }
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, double a3)
{
  uint64_t v4 = v3;
  Swift::Int v8 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)(a1);
  OUTLINED_FUNCTION_3_6();
  if (v11)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v12 = v9;
  char v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Double>);
  unint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a2 & 1, v8);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
LABEL_5:
  BOOL v16 = (void *)*v4;
  if (v13)
  {
    *(double *)(v16[7] + 8 * v12) = a3;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v16, a3);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2)
{
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  OUTLINED_FUNCTION_3_6();
  if (v4)
  {
    __break(1u);
LABEL_12:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v5 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Any>);
  if (OUTLINED_FUNCTION_77_0())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v5 & 1) != (v6 & 1)) {
      goto LABEL_12;
    }
  }
  if (v5)
  {
    OUTLINED_FUNCTION_44();
    OUTLINED_FUNCTION_59_1();
    return outlined init with take of Any(v7, v8);
  }
  else
  {
    OUTLINED_FUNCTION_59_1();
    return specialized _NativeDictionary._insert(at:key:value:)(v11, v12, v13, v14);
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2)
{
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  OUTLINED_FUNCTION_3_6();
  if (v7)
  {
    __break(1u);
LABEL_12:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v8 = v5;
  char v9 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
  if (OUTLINED_FUNCTION_77_0())
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
    OUTLINED_FUNCTION_71_0();
    if (!v11) {
      goto LABEL_12;
    }
    unint64_t v8 = v10;
  }
  char v12 = *v2;
  if (v9)
  {
    char v13 = (_OWORD *)OUTLINED_FUNCTION_44();
    return outlined init with take of Any(v13, v14);
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v16);
    return specialized _NativeDictionary._insert(at:key:value:)(v8, (uint64_t)v16, a1, v12);
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = OUTLINED_FUNCTION_22_4(a1, a2, a3, a4, a5);
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v7;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, void *a3, double a4)
{
  a3[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a3[6];
  uint64_t v9 = type metadata accessor for MetricsKey();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(double *)(a3[7] + 8 * a1) = a4;
  uint64_t v11 = a3[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a3[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  uint64_t v5;
  long long v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v5 = a4[6] + 40 * a1;
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  uint64_t v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  *(void *)(a5 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  uint64_t v7 = (void *)(*(void *)(a5 + 48) + 16 * a1);
  *uint64_t v7 = a2;
  v7[1] = a3;
  a6(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_56_1();
  uint64_t result = v8();
  uint64_t v10 = *(void *)(a5 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v12;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t outlined assign with take of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  unint64_t result = lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType;
  if (!lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v5 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    unint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
    uint64_t v9 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v10 = v9[5];
    uint64_t v11 = &v7[v10];
    BOOL v12 = &v8[v10];
    uint64_t v13 = type metadata accessor for URL();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
    *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
    *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
    *(void *)&v7[v9[9]] = *(void *)&v8[v9[9]];
    v7[v9[10]] = v8[v9[10]];
  }
  return v5;
}

uint64_t destroy for MLStyleTransfer(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v8(v5, v6);
  }
  return result;
}

void *initializeWithCopy for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *((unsigned char *)a1 + v4) = *((unsigned char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for URL();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
  *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
  *(void *)&v5[v7[8]] = *(void *)&v6[v7[8]];
  *(void *)&v5[v7[9]] = *(void *)&v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  return a1;
}

void *assignWithCopy for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (!EnumTagSinglePayload)
  {
    uint64_t v16 = *(void *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_7:
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  *(void *)&v7[v9[9]] = *(void *)&v8[v9[9]];
  v7[v9[10]] = v8[v9[10]];
  return a1;
}

void *initializeWithTake for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *((unsigned char *)a1 + v4) = *((unsigned char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
  *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
  *(void *)&v5[v7[8]] = *(void *)&v6[v7[8]];
  *(void *)&v5[v7[9]] = *(void *)&v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  return a1;
}

void *assignWithTake for MLStyleTransfer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (!EnumTagSinglePayload)
  {
    uint64_t v16 = *(void *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_7:
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  *(void *)&v7[v9[9]] = *(void *)&v8[v9[9]];
  v7[v9[10]] = v8[v9[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22708D364);
}

uint64_t sub_22708D364(uint64_t *a1, int a2)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
    return (v2 + 1);
  }
  else
  {
    type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v4 = OUTLINED_FUNCTION_78_0();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22708D3F4);
}

void *sub_22708D3F4(void *result, int a2, int a3)
{
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    type metadata accessor for MLStyleTransfer.ModelParameters(0);
    uint64_t v3 = OUTLINED_FUNCTION_63_0();
    return (void *)__swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer()
{
  uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLStyleTransfer.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v7((uint64_t *)((char *)a1 + *(int *)(v8 + 48)), (uint64_t *)((char *)a2 + *(int *)(v8 + 48)), v6);
    uint64_t v9 = *(int *)(v8 + 64);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
  }
  return a1;
}

uint64_t destroy for MLStyleTransfer.DataSource(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v5)((void *)(v2 - 8), a1, v2);
  uint64_t v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?))
              + 48);

  return v5(v3, v2);
}

uint64_t initializeWithCopy for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  uint64_t v7 = *(int *)(v6 + 64);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  uint64_t v7 = *(int *)(v6 + 64);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  uint64_t v7 = *(int *)(v6 + 64);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  uint64_t v7 = *(int *)(v6 + 64);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v6);
}

uint64_t getEnumTag for MLStyleTransfer.DataSource()
{
  return 0;
}

uint64_t type metadata completion function for MLStyleTransfer.DataSource(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL();
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = v4;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLStyleTransfer.ModelParameters(unsigned char *a1, void *a2, int *a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    void *v4 = *a2;
    int v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
    uint64_t v13 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *(void *)((char *)v4 + v14) = *(void *)((char *)a2 + v14);
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  }
  return v4;
}

uint64_t destroy for MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v12 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

unsigned char *assignWithCopy for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

unsigned char *initializeWithTake for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v12 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

unsigned char *assignWithTake for MLStyleTransfer.ModelParameters(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  uint64_t v15 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22708E29C);
}

uint64_t sub_22708E29C(unsigned __int8 *a1, int a2)
{
  if (a2 == 254)
  {
    unsigned int v2 = *a1;
    if (v2 >= 2) {
      return v2 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    uint64_t v4 = OUTLINED_FUNCTION_78_0();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22708E324);
}

unsigned char *sub_22708E324(unsigned char *result, char a2, int a3)
{
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    uint64_t v3 = OUTLINED_FUNCTION_63_0();
    return (unsigned char *)__swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer.ModelParameters()
{
  uint64_t result = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLStyleTransfer.ModelParameters.ValidationData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22708E9E4);
}

uint64_t sub_22708E9E4(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_36_2();
  uint64_t v4 = type metadata accessor for URL();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, a2, v4);
  if (EnumTagSinglePayload >= 2) {
    return EnumTagSinglePayload - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22708EA3C);
}

uint64_t sub_22708EA3C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for URL();

  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();

  return __swift_getEnumTagSinglePayload(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v4);
}

uint64_t type metadata completion function for MLStyleTransfer.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ModelAlgorithmType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22708EC6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLStyleTransfer.ModelParameters.ModelAlgorithmType;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a3[6] + result) = a2;
  *(double *)(a3[7] + 8 * result) = a4;
  uint64_t v4 = a3[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a3[2] = v6;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_22708EE14()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_20_2();
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v4 = type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  uint64_t v6 = *(void (**)(void))(v5 + 8);
  OUTLINED_FUNCTION_43_2();
  v6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  OUTLINED_FUNCTION_43_2();
  v6();
  uint64_t v7 = v0 + v3 + *(int *)(v1 + 32);
  if (!__swift_getEnumTagSinglePayload(v7, 1, v4)) {
    ((void (*)(uint64_t, uint64_t))v6)(v7, v4);
  }
  swift_release();
  OUTLINED_FUNCTION_12_4();
  return MEMORY[0x270FA0238](v8, v9, v10);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  OUTLINED_FUNCTION_114();
  uint64_t v2 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  OUTLINED_FUNCTION_1(v2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = (uint64_t)v1 + v7;
  uint64_t v12 = (void *)((char *)v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = swift_task_alloc();
  uint64_t v16 = (void *)OUTLINED_FUNCTION_7_1(v15);
  *uint64_t v16 = v17;
  v16[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(v0, v8, v9, v10, v11, v13, v14);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_7_1(v5);
  *uint64_t v6 = v7;
  v6[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(v2, v4, v3);
}

uint64_t outlined init with take of (key: URL, value: CIImage)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_56_1();
  v4();
  return a2;
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(void *a1@<X8>)
{
  return specialized closure #1 in _StringGuts.withCString<A>(_:)(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_8_4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  return swift_willThrow();
}

unint64_t OUTLINED_FUNCTION_22_4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

unint64_t OUTLINED_FUNCTION_30_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

BOOL OUTLINED_FUNCTION_33_2()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return 0;
}

void *OUTLINED_FUNCTION_37_1@<X0>(uint64_t a1@<X8>)
{
  *char v1 = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_44()
{
  __swift_destroy_boxed_opaque_existential_0(v1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_48_0()
{
  return CMLModel.contentLoss.getter();
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return 6778480;
}

uint64_t OUTLINED_FUNCTION_55_1()
{
  return 14;
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_63_0()
{
  return v0 + *(int *)(v1 + 20);
}

uint64_t OUTLINED_FUNCTION_67_0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_68_0()
{
  _StringGuts.grow(_:)(19);
}

uint64_t OUTLINED_FUNCTION_72_0()
{
  return 14;
}

uint64_t OUTLINED_FUNCTION_76_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

BOOL OUTLINED_FUNCTION_77_0()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_78_0()
{
  return v0 + *(int *)(v1 + 20);
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_80_0()
{
  _StringGuts.grow(_:)(38);
}

__n128 OUTLINED_FUNCTION_81_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long a25)
{
  return (__n128)a25;
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return type metadata accessor for MLStyleTransfer(0);
}

uint64_t OUTLINED_FUNCTION_83_0@<X0>(uint64_t a1@<X8>, long long a2@<Q0>, long long a3@<Q1>, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_arg(va1, void);
  va_arg(va1, void);
  va_arg(va1, void);
  va_arg(va1, void);
  va_arg(va1, void);
  long long v12 = a2;
  long long v13 = a3;
  uint64_t v14 = a1;
  return MLStyleTransfer.getFullMetadata(_:)((uint64_t *)va, (uint64_t)va1);
}

uint64_t destroy for AnnotatedFeatureStore(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotatedFeatureStore(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotatedFeatureStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotatedFeatureStore()
{
  return &type metadata for AnnotatedFeatureStore;
}

uint64_t AnnotatedFeatureStore.init(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v85 = v3;
  uint64_t v86 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v89 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  OUTLINED_FUNCTION_0();
  unint64_t v81 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v84 = v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v87 = (char *)&v72 - v10;
  uint64_t v11 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v83 = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v72 - v22;
  MEMORY[0x270FA5388](v24);
  char v26 = (char *)&v72 - v25;
  BlobsFile.init()((uint64_t)v96);
  *(void *)&v96[88] = MEMORY[0x263F8EE78];
  OUTLINED_FUNCTION_2_5();
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_3_7();
  uint64_t v27 = a1;
  URL.appendingPathComponent(_:)();
  static UTType.json.getter();
  char v99 = v26;
  LOBYTE(a1) = static _FileUtilities.isReadableFile(at:of:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  id v90 = (char *)v11;
  v28(v16, v11);
  if ((a1 & 1) == 0)
  {
    uint64_t v37 = *(void (**)(void))(v18 + 8);
    uint64_t v38 = v27;
LABEL_7:
    uint64_t v39 = v93;
    ((void (*)(uint64_t, uint64_t))v37)(v38, v93);
    uint64_t v40 = v91;
    goto LABEL_8;
  }
  uint64_t v82 = v27;
  static UTType.data.getter();
  unsigned __int8 v29 = static _FileUtilities.isReadableFile(at:of:)();
  v28(v16, (uint64_t)v90);
  if ((v29 & 1) == 0)
  {
    uint64_t v37 = *(void (**)(void))(v18 + 8);
    uint64_t v38 = v82;
    goto LABEL_7;
  }
  id v90 = v23;
  uint64_t v30 = v99;
  uint64_t v31 = v92;
  uint64_t v32 = Data.init(contentsOf:options:)();
  uint64_t v34 = v93;
  uint64_t v35 = v18;
  if (v31)
  {
    id v36 = *(void (**)(void))(v18 + 8);
    OUTLINED_FUNCTION_5_4();
    v36();
    OUTLINED_FUNCTION_5_4();
    v36();
    ((void (*)(char *, uint64_t))v36)(v30, v34);
    outlined consume of Data._Representation(*(uint64_t *)v96, *(unint64_t *)&v96[8]);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v48 = v32;
  unint64_t v49 = v33;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v50 = JSONDecoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Metadata]);
  lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [Metadata] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Metadata and conformance Metadata);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v92 = v50;
  uint64_t v78 = v48;
  uint64_t v79 = v94;
  (*(void (**)(void *, char *, uint64_t))(v35 + 16))(v83, v90, v34);
  uint64_t v52 = Data.init(contentsOf:options:)();
  BlobsFile.init(data:)(v52, v53, (uint64_t)v97);
  unint64_t v73 = v49;
  uint64_t v37 = *(void (**)(void))(v35 + 8);
  OUTLINED_FUNCTION_5_4();
  v37();
  outlined assign with take of BlobsFile((uint64_t)v97, (uint64_t)v96);
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  type metadata accessor for OS_os_log();
  uint64_t v55 = v79;
  swift_bridgeObjectRetain();
  uint64_t v56 = static OS_os_log.default.getter();
  os_log_type_t v57 = v54;
  if (os_log_type_enabled(v56, v54))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 134217984;
    uint64_t v94 = *(void *)(v55 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22704D000, v56, v57, "Reading AnnotatedFeatureStore with %ld elements", v58, 0xCu);
    MEMORY[0x22A676210](v58, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v77 = *(void *)(v55 + 16);
  if (v77)
  {
    uint64_t v75 = v86 + 32;
    uint64_t v76 = (void (**)(uint64_t, char *, uint64_t))(v81 + 16);
    uint64_t v74 = (void (**)(char *, uint64_t))(v81 + 8);
    uint64_t v59 = (void *)(v55 + 48);
    unint64_t v60 = 0;
    do
    {
      uint64_t v61 = *(v59 - 1);
      uint64_t v83 = v59;
      uint64_t v62 = *v59;
      memcpy(__dst, v96, 0x58uLL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined retain of BlobsFile((uint64_t)__dst);
      uint64_t v63 = BlobsFile.floatBlob(at:)(v60);
      unint64_t v81 = v60;
      outlined release of BlobsFile((uint64_t)__dst);
      uint64_t v94 = v63;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      uint64_t v80 = v61;
      uint64_t v64 = v87;
      MLShapedArray.init<A>(scalars:shape:)();
      (*v76)(v84, v64, v88);
      uint64_t v94 = v80;
      uint64_t v95 = v62;
      swift_bridgeObjectRetain();
      AnnotatedFeature.init(feature:annotation:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = *(void *)&v96[88];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v65 = v70;
      }
      unint64_t v66 = *(void *)(v65 + 16);
      if (v66 >= *(void *)(v65 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v65 = v71;
      }
      unint64_t v67 = v81 + 1;
      uint64_t v68 = v83 + 3;
      *(void *)(v65 + 16) = v66 + 1;
      unint64_t v69 = v65
          + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))
          + *(void *)(v86 + 72) * v66;
      unint64_t v60 = v67;
      (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))(v69, v89, v85);
      *(void *)&v96[88] = v65;
      (*v74)(v87, v88);
      uint64_t v59 = v68;
    }
    while (v77 != v60);
  }
  swift_release();
  outlined consume of Data._Representation(v78, v73);
  uint64_t v39 = v93;
  OUTLINED_FUNCTION_5_4();
  v37();
  swift_bridgeObjectRelease();
  uint64_t v23 = v90;
  uint64_t v40 = v91;
LABEL_8:
  uint64_t v41 = v99;
  ((void (*)(char *, uint64_t))v37)(v23, v39);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v41, v39);
  uint64_t v42 = *(void *)&v96[72];
  long long v43 = *(_OWORD *)&v96[80];
  uint64_t v44 = *(void *)&v96[16];
  long long v45 = *(_OWORD *)&v96[24];
  long long v46 = *(_OWORD *)&v96[40];
  long long v47 = *(_OWORD *)&v96[56];
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v96;
  *(void *)(v40 + 16) = v44;
  *(_OWORD *)(v40 + 24) = v45;
  *(_OWORD *)(v40 + 40) = v46;
  *(_OWORD *)(v40 + 56) = v47;
  *(void *)(v40 + 72) = v42;
  *(_OWORD *)(v40 + 80) = v43;
  return result;
}

void AnnotatedFeatureStore.write(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = *(void *)(*(void *)(v3 + 88) + 16);
  if (v14)
  {
    uint64_t v23 = a1;
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    type metadata accessor for OS_os_log();
    outlined retain of AnnotatedFeatureStore(v3);
    outlined retain of AnnotatedFeatureStore(v3);
    uint64_t v16 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v17 = (_DWORD *)swift_slowAlloc();
      uint64_t v22 = v7;
      uint64_t v18 = v17;
      *uint64_t v17 = 134218240;
      uint64_t v24 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v18 + 6) = 2048;
      outlined release of AnnotatedFeatureStore(v3);
      uint64_t v24 = *(unsigned int *)(v3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined release of AnnotatedFeatureStore(v3);
      _os_log_impl(&dword_22704D000, v16, v15, "Writing AnnotatedFeatureStore with %ld elements and %ld blobs", (uint8_t *)v18, 0x16u);
      uint64_t v19 = v18;
      uint64_t v7 = v22;
      MEMORY[0x22A676210](v19, -1, -1);
    }
    else
    {

      outlined release of AnnotatedFeatureStore(v3);
      outlined release of AnnotatedFeatureStore(v3);
    }
    static _FileUtilities.prepareForWriting(to:isDirectory:)(v23, 1);
    if (!v2)
    {
      OUTLINED_FUNCTION_2_5();
      URL.appendingPathComponent(_:)();
      AnnotatedFeatureStore.writeMetadata(to:)((uint64_t)v13);
      unint64_t v20 = *(void (**)(uint64_t))(v7 + 8);
      uint64_t v21 = OUTLINED_FUNCTION_4_5();
      v20(v21);
      OUTLINED_FUNCTION_3_7();
      URL.appendingPathComponent(_:)();
      Data.write(to:options:)();
      ((void (*)(char *, uint64_t))v20)(v10, v5);
    }
  }
}

uint64_t outlined retain of AnnotatedFeatureStore(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AnnotatedFeatureStore(uint64_t a1)
{
  return a1;
}

uint64_t AnnotatedFeatureStore.writeMetadata(to:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v5 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v38 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  uint64_t v7 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  id v36 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + 88);
  uint64_t v44 = v9;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v43 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v12 = v7 + 16;
    uint64_t v14 = v9 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v33 = *(void *)(v12 + 56);
    uint64_t v34 = v13;
    uint64_t v31 = (void (**)(char *, uint64_t))(v12 - 8);
    uint64_t v32 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v11 = v43;
    uint64_t v35 = v12;
    os_log_type_t v15 = v36;
    uint64_t v16 = v37;
    do
    {
      v34(v15, v14, v16);
      uint64_t v17 = v38;
      AnnotatedFeature.feature.getter();
      uint64_t v18 = v39;
      uint64_t v40 = MLShapedArray.shape.getter();
      (*v32)(v17, v18);
      AnnotatedFeature.annotation.getter();
      uint64_t v19 = v41;
      uint64_t v20 = v42;
      (*v31)(v15, v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v43;
      }
      unint64_t v21 = *(void *)(v11 + 16);
      if (v21 >= *(void *)(v11 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v43;
      }
      *(void *)(v11 + 16) = v21 + 1;
      uint64_t v22 = (void *)(v11 + 24 * v21);
      v22[4] = v40;
      void v22[5] = v19;
      v22[6] = v20;
      v14 += v33;
      --v10;
    }
    while (v10);
    outlined release of [AnnotatedFeature<MLShapedArray<Float>, String>]((uint64_t)&v44);
    uint64_t v3 = v29;
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v41 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Metadata]);
  lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [Metadata] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Metadata and conformance Metadata);
  uint64_t v23 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = v23;
    unint64_t v26 = v24;
    swift_bridgeObjectRelease();
    Data.write(to:options:)();
    outlined consume of Data._Representation(v25, v26);
  }
  return swift_release();
}

BOOL static Metadata.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Metadata.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t Metadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5365727574616566 && a2 == 0xEC00000065706168;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t Metadata.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int Metadata.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t Metadata.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Metadata.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x697461746F6E6E61;
  }
  else {
    return 0x5365727574616566;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Metadata.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Metadata.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Metadata.CodingKeys()
{
  return Metadata.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Metadata.CodingKeys(uint64_t a1)
{
  Metadata.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Metadata.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Metadata.CodingKeys()
{
  return Metadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Metadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Metadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Metadata.CodingKeys()
{
  return Metadata.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Metadata.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Metadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Metadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Metadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Metadata.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Metadata.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Metadata.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Metadata.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    v9[7] = 0;
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Metadata@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Metadata.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Metadata(void *a1)
{
  return Metadata.encode(to:)(a1, *v1, v1[1], v1[2]);
}

unint64_t lazy protocol witness table accessor for type Metadata and conformance Metadata()
{
  unint64_t result = lazy protocol witness table cache variable for type Metadata and conformance Metadata;
  if (!lazy protocol witness table cache variable for type Metadata and conformance Metadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata and conformance Metadata);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Metadata and conformance Metadata;
  if (!lazy protocol witness table cache variable for type Metadata and conformance Metadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata and conformance Metadata);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Metadata]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of BlobsFile(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of BlobsFile(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of BlobsFile(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type [Float] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
  }
  return result;
}

uint64_t destroy for Metadata()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for Metadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Metadata(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for Metadata(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Metadata(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Metadata()
{
  return &type metadata for Metadata;
}

unint64_t lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Metadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227091558);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Metadata.CodingKeys()
{
  return &unk_26DB411A8;
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return 0x617461646174656DLL;
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return 0x7365727574616566;
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return v0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v4 = v2;
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if ((v3 & 0x8000000000000000) == 0)
    {
      uint64_t v6 = v13;
      uint64_t v7 = a1;
      while (1)
      {
        if (a2 == v7)
        {
          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
        CMLSequence.value(at:)(v7);
        if (v4) {
          goto LABEL_23;
        }
        Swift::String v8 = CMLFeatureValue.stringValue()();
        uint64_t v4 = v9;
        if (v9) {
          break;
        }
        swift_release();
        unint64_t v10 = *(void *)(v13 + 16);
        if (v10 >= *(void *)(v13 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        *(void *)(v13 + 16) = v10 + 1;
        *(Swift::String *)(v13 + 16 * v10 + 32) = v8;
        if (a2 < a1) {
          goto LABEL_17;
        }
        if (v7 >= a2) {
          goto LABEL_18;
        }
        if (a2 == ++v7)
        {
          swift_release();
          return v6;
        }
      }
      swift_release();
      goto LABEL_23;
    }
LABEL_20:
    __break(1u);
LABEL_23:
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  swift_release();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized Collection.count.getter()
{
  uint64_t v0 = CMLSequence.size.getter();
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLSequence.size.getter);
}

{
  uint64_t v0;

  uint64_t v0 = CMLDictionary.size.getter();
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLDictionary.size.getter);
}

{
  uint64_t vars8;

  CMLSequence.size.getter();

  return specialized RandomAccessCollection<>.distance(from:to:)();
}

{
  uint64_t vars8;

  MLDataTable.size.getter();

  return specialized RandomAccessCollection<>.distance(from:to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLSequence.size.getter);
  swift_release();
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_6(v2);
  uint64_t result = OUTLINED_FUNCTION_74();
  if (((unint64_t)CMLSequence.size.getter & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v4 = CMLSequence.size.getter();
    specialized RandomAccessCollection<>.distance(from:to:)(0, v4, CMLSequence.size.getter);
    uint64_t result = OUTLINED_FUNCTION_74();
    if ((v1 & 0x8000000000000000) == 0 && (uint64_t)CMLSequence.size.getter >= v1) {
      return v1;
    }
  }
  __break(1u);
  return result;
}

void MLDataTable.columnNames.getter(uint64_t *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v3 = MEMORY[0x22A676370](0);
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for CMLSequence();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v4;
      *(unsigned char *)(v5 + 24) = 1;
      *a1 = v5;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v6 = *(void **)v1;
    swift_retain();
    _DataTable.columnNames.getter(a1);
    outlined consume of Result<_DataTable, Error>(v6, 0);
  }
}

uint64_t MLDataTable.ColumnNames.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.ColumnNames.endIndex.getter()
{
  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLSequence.size.getter);
  swift_release();
  return v1;
}

uint64_t MLDataTable.ColumnNames.subscript.getter(uint64_t a1)
{
  CMLSequence.value(at:)(a1);
  uint64_t countAndFlagsBits = CMLFeatureValue.stringValue()()._countAndFlagsBits;
  if (v2)
  {

    swift_release();
    OUTLINED_FUNCTION_1_8();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_4();
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 46;
    v6._id object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    OUTLINED_FUNCTION_6_5();
    uint64_t result = OUTLINED_FUNCTION_118();
    __break(1u);
  }
  else
  {
    uint64_t v3 = countAndFlagsBits;
    swift_release();
    return v3;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(a1, a2, CMLSequence.size.getter);
}

{
  return specialized RandomAccessCollection<>.distance(from:to:)(a1, a2, CMLDictionary.size.getter);
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = v6();
  if (v4 < 0 || result < v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = a3();
    if ((v3 & 0x8000000000000000) == 0 && result >= v3) {
      return v3 - v4;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = CMLSequence.size.getter();
  if (v1 < 0 || result < v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = CMLSequence.size.getter();
    if ((v0 & 0x8000000000000000) == 0 && result >= v0) {
      return v0 - v1;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  OUTLINED_FUNCTION_7_5();
  uint64_t result = MLDataTable.size.getter();
  if (v1 < 0 || result < v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = MLDataTable.size.getter();
    if ((v0 & 0x8000000000000000) == 0 && result >= v0) {
      return v0 - v1;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_7_5();
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2, CMLSequence.size.getter);
  uint64_t result = swift_release();
  if (v1 < 0 || v3 < v1)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    Swift::String v5 = CMLSequence.size.getter();
    Swift::String v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v5, CMLSequence.size.getter);
    uint64_t result = swift_release();
    if ((v0 & 0x8000000000000000) == 0 && v6 >= v0) {
      return v0 - v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance MLDataTable.ColumnNames@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataTable.ColumnNames(uint64_t *result)
{
  uint64_t v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    swift_retain();
    uint64_t v3 = CMLSequence.size.getter();
    uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v3, CMLSequence.size.getter);
    uint64_t result = (uint64_t *)swift_release();
    if ((v1 & 0x8000000000000000) == 0 && v1 < v4)
    {
      uint64_t *v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance MLDataTable.ColumnNames@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.ColumnNames()
{
  return specialized RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance MLDataTable.ColumnNames@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLDataTable.ColumnNames.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3 = MLDataTable.ColumnNames.subscript.getter(*a2);
  a1[1] = v4;
  a1[2] = v4;
  *a1 = v3;
  return protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames;
}

uint64_t protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames()
{
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.ColumnNames(void *a1)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataTable.ColumnNames@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.indices.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance MLDataTable.ColumnNames()
{
  return specialized Collection.isEmpty.getter(*v0);
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataTable.ColumnNames()
{
  return specialized Collection.count.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataTable.ColumnNames(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.ColumnNames@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result) {
    __break(1u);
  }
  return result;
}

{
  BOOL v3;
  BOOL v4;

  if (result >= a2)
  {
    uint64_t v4 = __OFSUB__(result, a3);
    uint64_t v3 = result - a3 < 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  if (v3 == v4) {
    __break(1u);
  }
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t result, int a2, char a3, long long *a4)
{
  if (a3) {
    goto LABEL_13;
  }
  uint64_t v6 = result;
  long long v10 = *a4;
  char v11 = *((unsigned char *)a4 + 16);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v10, (uint64_t)v12);
  uint64_t result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v12, (uint64_t)&v13);
  if (v15) {
    goto LABEL_13;
  }
  if (v14 != a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v13 > v6)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  long long v7 = *(long long *)((char *)a4 + 24);
  char v8 = *((unsigned char *)a4 + 40);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v7, (uint64_t)v9);
  uint64_t result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v9, (uint64_t)&v16);
  if (v18)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v17 != a2) {
    goto LABEL_11;
  }
  if (v16 < v6)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  uint64_t v6;
  long long v7;
  char v8;
  unsigned char v9[24];
  long long v10;
  char v11;
  unsigned char v12[24];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;

  if (a3) {
    goto LABEL_13;
  }
  uint64_t v6 = result;
  long long v10 = *a4;
  char v11 = *((unsigned char *)a4 + 16);
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v10, (uint64_t)v12, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  uint64_t result = outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v12, (uint64_t)&v13, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  if (v15) {
    goto LABEL_13;
  }
  if (v14 != a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v13 > v6)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  long long v7 = *(long long *)((char *)a4 + 24);
  char v8 = *((unsigned char *)a4 + 40);
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v7, (uint64_t)v9, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  uint64_t result = outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v9, (uint64_t)&v16, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  if (v18)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v17 != a2) {
    goto LABEL_11;
  }
  if (v16 <= v6)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance MLDataTable.ColumnNames@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataTable.ColumnNames(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  uint64_t v3 = CMLSequence.size.getter();
  uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v3, CMLSequence.size.getter);
  uint64_t result = swift_release();
  if (v2 < 0 || v2 >= v4) {
    __break(1u);
  }
  else {
    *a1 = v2 + 1;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance MLDataTable.ColumnNames(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataTable.ColumnNames()
{
  return specialized Collection.underestimatedCount.getter(*v0);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.ColumnNames()
{
  return specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.ColumnNames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance MLDataTable.ColumnNames()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t static MLDataTable.ColumnNames.== infix(_:_:)()
{
  return specialized Sequence<>.elementsEqual<A>(_:)();
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)()
{
  swift_retain();
  swift_retain();
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  while (1)
  {
    swift_retain();
    uint64_t v2 = CMLSequence.size.getter();
    uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2, CMLSequence.size.getter);
    swift_release();
    if (v1 == v3)
    {
      uint64_t countAndFlagsBits = 0;
      id object = 0;
    }
    else
    {
      CMLSequence.value(at:)(v1);
      Swift::String v7 = CMLFeatureValue.stringValue()();
      if (v6) {
        goto LABEL_30;
      }
      uint64_t countAndFlagsBits = v7._countAndFlagsBits;
      id object = v7._object;
      swift_release();
      swift_retain();
      uint64_t v8 = CMLSequence.size.getter();
      uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8, CMLSequence.size.getter);
      swift_release();
      if (v1 < 0 || v1 >= v9) {
        goto LABEL_29;
      }
      ++v1;
    }
    swift_retain();
    uint64_t v10 = CMLSequence.size.getter();
    uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, v10, CMLSequence.size.getter);
    swift_release();
    if (v0 == v11)
    {
      if (object)
      {
LABEL_22:
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v13 = 0;
LABEL_24:
        swift_release();
        swift_release();
        if (!v13) {
          return 1;
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    CMLSequence.value(at:)(v0);
    Swift::String v12 = CMLFeatureValue.stringValue()();
    if (v6) {
      goto LABEL_30;
    }
    uint64_t v13 = v12._object;
    swift_release();
    swift_retain();
    uint64_t v14 = CMLSequence.size.getter();
    uint64_t v15 = specialized RandomAccessCollection<>.distance(from:to:)(0, v14, CMLSequence.size.getter);
    swift_release();
    if (v0 >= v15) {
      break;
    }
    if (!object) {
      goto LABEL_24;
    }
    if (!v12._object) {
      goto LABEL_22;
    }
    if (countAndFlagsBits == v12._countAndFlagsBits && object == v12._object)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        swift_release();
        swift_release();
        return 0;
      }
    }
    ++v0;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  OUTLINED_FUNCTION_108();
  __break(1u);
LABEL_30:

  swift_release();
  OUTLINED_FUNCTION_1_8();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_4();
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 46;
  v20._id object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  OUTLINED_FUNCTION_6_5();
  uint64_t result = OUTLINED_FUNCTION_118();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = result + 32;
  while (1)
  {
    if (v3 == v4)
    {
      uint64_t v7 = 0;
      unint64_t v8 = *(void *)(a2 + 16);
      goto LABEL_6;
    }
    if (v3 >= v4) {
      break;
    }
    uint64_t v7 = *(void *)(a2 + 32 + 8 * v3);
    unint64_t v8 = v3 + 1;
LABEL_6:
    uint64_t result = v2 == v5;
    if (v2 == v5)
    {
      uint64_t v9 = 0;
      unint64_t v10 = v5;
    }
    else
    {
      if (v2 >= v5) {
        goto LABEL_18;
      }
      uint64_t v9 = *(void *)(v6 + 8 * v2);
      unint64_t v10 = v2 + 1;
    }
    if (v3 == v4) {
      return result;
    }
    BOOL v11 = v2 != v5 && v7 == v9;
    unint64_t v2 = v10;
    unint64_t v3 = v8;
    if (!v11) {
      return 0;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t MLDataTable.ColumnNames.description.getter()
{
  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLSequence.size.getter);
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_6(v2);
  uint64_t result = OUTLINED_FUNCTION_74();
  if (((unint64_t)CMLSequence.size.getter & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v4 = CMLSequence.size.getter();
    uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4, CMLSequence.size.getter);
    uint64_t result = swift_release_n();
    if ((v1 & 0x8000000000000000) == 0 && v5 >= v1)
    {
      swift_retain();
      OUTLINED_FUNCTION_3_8();
      uint64_t v6 = MEMORY[0x22A674D80]();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t MLDataTable.ColumnNames.debugDescription.getter()
{
  swift_retain_n();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0, CMLSequence.size.getter);
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_6(v2);
  uint64_t result = OUTLINED_FUNCTION_74();
  if (((unint64_t)CMLSequence.size.getter & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v4 = CMLSequence.size.getter();
    uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4, CMLSequence.size.getter);
    uint64_t result = swift_release_n();
    if ((v1 & 0x8000000000000000) == 0 && v5 >= v1)
    {
      swift_retain();
      OUTLINED_FUNCTION_3_8();
      uint64_t v6 = MEMORY[0x22A674D80]();
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  __break(1u);
  return result;
}

unint64_t MLDataTable.ColumnNames.playgroundDescription.getter@<X0>(void *a1@<X8>)
{
  swift_retain_n();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2, CMLSequence.size.getter);
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4, CMLSequence.size.getter);
  unint64_t result = swift_release();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v7 = CMLSequence.size.getter();
    uint64_t v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7, CMLSequence.size.getter);
    unint64_t result = swift_release_n();
    if ((v3 & 0x8000000000000000) == 0 && v8 >= v3)
    {
      swift_retain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v3);
      uint64_t v9 = MEMORY[0x22A674D80]();
      uint64_t v11 = v10;
      swift_release();
      swift_bridgeObjectRelease();
      id v12 = objc_allocWithZone(MEMORY[0x263F086A0]);
      id v13 = @nonobjc NSAttributedString.init(string:attributes:)(v9, v11, 0);
      unint64_t result = type metadata accessor for NSAttributedString();
      a1[3] = result;
      *a1 = v13;
      return result;
    }
  }
  __break(1u);
  return result;
}

id @nonobjc NSAttributedString.init(string:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)MEMORY[0x22A674AE0]();
  swift_bridgeObjectRelease();
  if (a3)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }
  id v7 = objc_msgSend(v3, sel_initWithString_attributes_, v5, v6.super.isa);

  return v7;
}

unint64_t lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
}

uint64_t lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.ColumnNames>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in MLDataTable.ColumnNames()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataTable.ColumnNames>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.ColumnNames> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataTable.ColumnNames>);
}

ValueMetadata *type metadata accessor for MLDataTable.ColumnNames()
{
  return &type metadata for MLDataTable.ColumnNames;
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

void OUTLINED_FUNCTION_1_8()
{
  _StringGuts.grow(_:)(37);
}

uint64_t OUTLINED_FUNCTION_2_6(uint64_t a1)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(0, a1, v1);
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v0);
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.PersistentParameters(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    unint64_t v26 = *a2;
    *(void *)a1 = *a2;
    a1 = &v26[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v27 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
        break;
      case 3u:
        uint64_t v28 = *a2;
        char v29 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v29);
        *(void *)a1 = v28;
        a1[8] = v29;
        uint64_t v30 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v30;
        uint64_t v31 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v31;
        uint64_t v32 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v33 = *a2;
        char v34 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v34);
        *(void *)a1 = v33;
        a1[8] = v34;
        uint64_t v35 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v35;
        id v36 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v36;
        uint64_t v37 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v37;
        uint64_t v38 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v38;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v39 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
        uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v41 = v40[12];
        uint64_t v42 = &a1[v41];
        uint64_t v43 = (uint64_t *)((char *)a2 + v41);
        uint64_t v45 = *v43;
        uint64_t v44 = v43[1];
        *(void *)uint64_t v42 = v45;
        *((void *)v42 + 1) = v44;
        uint64_t v46 = v40[16];
        long long v47 = &a1[v46];
        uint64_t v48 = (char **)((char *)a2 + v46);
        uint64_t v49 = v48[1];
        *(void *)long long v47 = *v48;
        *((void *)v47 + 1) = v49;
        uint64_t v50 = v40[20];
        uint64_t v51 = &a1[v50];
        uint64_t v52 = (char **)((char *)a2 + v50);
        uint64_t v53 = v52[1];
        *(void *)uint64_t v51 = *v52;
        *((void *)v51 + 1) = v53;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v54 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
        uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v56 = v55[12];
        os_log_type_t v57 = &a1[v56];
        uint64_t v58 = (uint64_t *)((char *)a2 + v56);
        uint64_t v60 = *v58;
        uint64_t v59 = v58[1];
        *(void *)os_log_type_t v57 = v60;
        *((void *)v57 + 1) = v59;
        uint64_t v61 = v55[16];
        uint64_t v62 = &a1[v61];
        uint64_t v63 = (char **)((char *)a2 + v61);
        uint64_t v64 = v63[1];
        *(void *)uint64_t v62 = *v63;
        *((void *)v62 + 1) = v64;
        uint64_t v65 = v55[20];
        unint64_t v66 = &a1[v65];
        unint64_t v67 = (char **)((char *)a2 + v65);
        uint64_t v68 = v67[1];
        *(void *)unint64_t v66 = *v67;
        *((void *)v66 + 1) = v68;
        uint64_t v69 = v55[24];
        uint64_t v70 = &a1[v69];
        uint64_t v71 = (char **)((char *)a2 + v69);
        uint64_t v72 = v71[1];
        *(void *)uint64_t v70 = *v71;
        *((void *)v70 + 1) = v72;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for URL();
        uint64_t v8 = *(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16);
        v8(a1, a2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(&a1[v9[12]], (char **)((char *)a2 + v9[12]), v7);
        uint64_t v10 = v9[16];
        uint64_t v11 = &a1[v10];
        id v12 = (char **)((char *)a2 + v10);
        uint64_t v13 = v12[1];
        *(void *)uint64_t v11 = *v12;
        *((void *)v11 + 1) = v13;
        uint64_t v14 = v9[20];
        uint64_t v15 = &a1[v14];
        uint64_t v16 = (char **)((char *)a2 + v14);
        uint64_t v17 = v16[1];
        *(void *)uint64_t v15 = *v16;
        *((void *)v15 + 1) = v17;
        uint64_t v18 = v9[24];
        Swift::String v19 = &a1[v18];
        Swift::String v20 = (char **)((char *)a2 + v18);
        uint64_t v21 = v20[1];
        *(void *)Swift::String v19 = *v20;
        *((void *)v19 + 1) = v21;
        uint64_t v22 = v9[28];
        uint64_t v23 = &a1[v22];
        unint64_t v24 = (char **)((char *)a2 + v22);
        uint64_t v25 = v24[1];
        *(void *)uint64_t v23 = *v24;
        *((void *)v23 + 1) = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v73 = a3[5];
    uint64_t v74 = &a1[v73];
    uint64_t v75 = (uint64_t)a2 + v73;
    uint64_t v76 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v95 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v95 - 8) + 16))(v74, v75, v95);
          break;
        case 3u:
          id v96 = *(id *)v75;
          char v97 = *(unsigned char *)(v75 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v75, v97);
          *(void *)uint64_t v74 = v96;
          v74[8] = v97;
          uint64_t v98 = *(void *)(v75 + 24);
          *((void *)v74 + 2) = *(void *)(v75 + 16);
          *((void *)v74 + 3) = v98;
          uint64_t v99 = *(void *)(v75 + 40);
          *((void *)v74 + 4) = *(void *)(v75 + 32);
          *((void *)v74 + 5) = v99;
          uint64_t v100 = *(void *)(v75 + 48);
          uint64_t v101 = *(void *)(v75 + 56);
          *((void *)v74 + 6) = v100;
          *((void *)v74 + 7) = v101;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          id v102 = *(id *)v75;
          char v103 = *(unsigned char *)(v75 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v75, v103);
          *(void *)uint64_t v74 = v102;
          v74[8] = v103;
          uint64_t v104 = *(void *)(v75 + 24);
          *((void *)v74 + 2) = *(void *)(v75 + 16);
          *((void *)v74 + 3) = v104;
          uint64_t v105 = *(void *)(v75 + 40);
          *((void *)v74 + 4) = *(void *)(v75 + 32);
          *((void *)v74 + 5) = v105;
          uint64_t v106 = *(void *)(v75 + 56);
          *((void *)v74 + 6) = *(void *)(v75 + 48);
          *((void *)v74 + 7) = v106;
          uint64_t v107 = *(void *)(v75 + 64);
          uint64_t v108 = *(void *)(v75 + 72);
          *((void *)v74 + 8) = v107;
          *((void *)v74 + 9) = v108;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 5u:
          uint64_t v109 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(v74, v75, v109);
          uint64_t v110 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v111 = v110[12];
          uint64_t v112 = &v74[v111];
          uint64_t v113 = (uint64_t *)(v75 + v111);
          uint64_t v115 = *v113;
          uint64_t v114 = v113[1];
          *(void *)uint64_t v112 = v115;
          *((void *)v112 + 1) = v114;
          uint64_t v116 = v110[16];
          uint64_t v117 = &v74[v116];
          uint64_t v118 = (void *)(v75 + v116);
          uint64_t v119 = v118[1];
          *(void *)uint64_t v117 = *v118;
          *((void *)v117 + 1) = v119;
          uint64_t v120 = v110[20];
          uint64_t v121 = &v74[v120];
          uint64_t v122 = (void *)(v75 + v120);
          uint64_t v123 = v122[1];
          *(void *)uint64_t v121 = *v122;
          *((void *)v121 + 1) = v123;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v124 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v124 - 8) + 16))(v74, v75, v124);
          id v125 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v126 = v125[12];
          uint64_t v127 = &v74[v126];
          uint64_t v128 = (uint64_t *)(v75 + v126);
          uint64_t v130 = *v128;
          uint64_t v129 = v128[1];
          *(void *)uint64_t v127 = v130;
          *((void *)v127 + 1) = v129;
          uint64_t v131 = v125[16];
          uint64_t v132 = &v74[v131];
          uint64_t v133 = (void *)(v75 + v131);
          uint64_t v134 = v133[1];
          *(void *)uint64_t v132 = *v133;
          *((void *)v132 + 1) = v134;
          uint64_t v135 = v125[20];
          uint64_t v136 = &v74[v135];
          char v137 = (void *)(v75 + v135);
          uint64_t v138 = v137[1];
          *(void *)uint64_t v136 = *v137;
          *((void *)v136 + 1) = v138;
          uint64_t v139 = v125[24];
          uint64_t v140 = &v74[v139];
          os_log_type_t v141 = (void *)(v75 + v139);
          uint64_t v142 = v141[1];
          *(void *)uint64_t v140 = *v141;
          *((void *)v140 + 1) = v142;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v77 = type metadata accessor for URL();
          uint64_t v146 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16);
          v146(v74, v75, v77);
          uint64_t v78 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v146(&v74[v78[12]], v75 + v78[12], v77);
          uint64_t v79 = v78[16];
          uint64_t v80 = &v74[v79];
          unint64_t v81 = (void *)(v75 + v79);
          uint64_t v82 = v81[1];
          *(void *)uint64_t v80 = *v81;
          *((void *)v80 + 1) = v82;
          uint64_t v83 = v78[20];
          uint64_t v84 = &v74[v83];
          uint64_t v85 = (void *)(v75 + v83);
          uint64_t v86 = v85[1];
          *(void *)uint64_t v84 = *v85;
          *((void *)v84 + 1) = v86;
          uint64_t v87 = v78[24];
          uint64_t v88 = &v74[v87];
          uint64_t v89 = (void *)(v75 + v87);
          uint64_t v90 = v89[1];
          *(void *)uint64_t v88 = *v89;
          *((void *)v88 + 1) = v90;
          uint64_t v91 = v78[28];
          uint64_t v92 = &v74[v91];
          uint64_t v93 = (void *)(v75 + v91);
          uint64_t v94 = v93[1];
          *(void *)uint64_t v92 = *v93;
          *((void *)v92 + 1) = v94;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v74, (const void *)v75, *(void *)(*(void *)(v76 - 8) + 64));
    }
    uint64_t v143 = a3[7];
    *(void *)&a1[a3[6]] = *(char **)((char *)a2 + a3[6]);
    *(void *)&a1[v143] = *(char **)((char *)a2 + v143);
    uint64_t v144 = a3[9];
    *(void *)&a1[a3[8]] = *(char **)((char *)a2 + a3[8]);
    *(void *)&a1[v144] = *(char **)((char *)a2 + v144);
    *(void *)&a1[a3[10]] = *(char **)((char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MLHandActionClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v5 = type metadata accessor for URL();
      NSDictionary v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v6(a1 + *(int *)(v7 + 48), v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1u:
    case 2u:
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 4u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 5u:
      uint64_t v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 6u:
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        uint64_t v14 = type metadata accessor for URL();
        uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
        v15(v10, v14);
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v15(v10 + *(int *)(v16 + 48), v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 1:
      case 2:
        uint64_t v12 = type metadata accessor for URL();
        uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
        return v13(v10, v12);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(unsigned char *)(v10 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(unsigned char *)(v10 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 5:
        uint64_t v17 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v10, v17);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 6:
        uint64_t v18 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v10, v18);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_20:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t initializeWithCopy for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for MLHandActionClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v25 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
      break;
    case 3u:
      id v26 = *(id *)a2;
      char v27 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v27);
      *(void *)a1 = v26;
      *(unsigned char *)(a1 + 8) = v27;
      uint64_t v28 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v28;
      uint64_t v29 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v29;
      uint64_t v30 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      id v31 = *(id *)a2;
      char v32 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v32);
      *(void *)a1 = v31;
      *(unsigned char *)(a1 + 8) = v32;
      uint64_t v33 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v33;
      uint64_t v34 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v34;
      uint64_t v35 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v35;
      uint64_t v36 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 5u:
      uint64_t v37 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
      uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v39 = v38[12];
      uint64_t v40 = (void *)(a1 + v39);
      uint64_t v41 = (uint64_t *)(a2 + v39);
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      *uint64_t v40 = v43;
      v40[1] = v42;
      uint64_t v44 = v38[16];
      uint64_t v45 = (void *)(a1 + v44);
      uint64_t v46 = (void *)(a2 + v44);
      uint64_t v47 = v46[1];
      *uint64_t v45 = *v46;
      v45[1] = v47;
      uint64_t v48 = v38[20];
      uint64_t v49 = (void *)(a1 + v48);
      uint64_t v50 = (void *)(a2 + v48);
      uint64_t v51 = v50[1];
      *uint64_t v49 = *v50;
      v49[1] = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 6u:
      uint64_t v52 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
      uint64_t v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v54 = v53[12];
      uint64_t v55 = (void *)(a1 + v54);
      uint64_t v56 = (uint64_t *)(a2 + v54);
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      *uint64_t v55 = v58;
      v55[1] = v57;
      uint64_t v59 = v53[16];
      uint64_t v60 = (void *)(a1 + v59);
      uint64_t v61 = (void *)(a2 + v59);
      uint64_t v62 = v61[1];
      *uint64_t v60 = *v61;
      v60[1] = v62;
      uint64_t v63 = v53[20];
      uint64_t v64 = (void *)(a1 + v63);
      uint64_t v65 = (void *)(a2 + v63);
      uint64_t v66 = v65[1];
      void *v64 = *v65;
      v64[1] = v66;
      uint64_t v67 = v53[24];
      uint64_t v68 = (void *)(a1 + v67);
      uint64_t v69 = (void *)(a2 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v7(a1 + v8[12], a2 + v8[12], v6);
      uint64_t v9 = v8[16];
      uint64_t v10 = (void *)(a1 + v9);
      uint64_t v11 = (void *)(a2 + v9);
      uint64_t v12 = v11[1];
      *uint64_t v10 = *v11;
      v10[1] = v12;
      uint64_t v13 = v8[20];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (void *)(a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v8[24];
      uint64_t v18 = (void *)(a1 + v17);
      Swift::String v19 = (void *)(a2 + v17);
      uint64_t v20 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v20;
      uint64_t v21 = v8[28];
      uint64_t v22 = (void *)(a1 + v21);
      uint64_t v23 = (void *)(a2 + v21);
      uint64_t v24 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v71 = a3[5];
  uint64_t v72 = (char *)(a1 + v71);
  uint64_t v73 = a2 + v71;
  uint64_t v74 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v93 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v93 - 8) + 16))(v72, v73, v93);
        break;
      case 3u:
        id v94 = *(id *)v73;
        char v95 = *(unsigned char *)(v73 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)v73, v95);
        *(void *)uint64_t v72 = v94;
        v72[8] = v95;
        uint64_t v96 = *(void *)(v73 + 24);
        *((void *)v72 + 2) = *(void *)(v73 + 16);
        *((void *)v72 + 3) = v96;
        uint64_t v97 = *(void *)(v73 + 40);
        *((void *)v72 + 4) = *(void *)(v73 + 32);
        *((void *)v72 + 5) = v97;
        uint64_t v98 = *(void *)(v73 + 48);
        uint64_t v99 = *(void *)(v73 + 56);
        *((void *)v72 + 6) = v98;
        *((void *)v72 + 7) = v99;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v100 = *(id *)v73;
        char v101 = *(unsigned char *)(v73 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)v73, v101);
        *(void *)uint64_t v72 = v100;
        v72[8] = v101;
        uint64_t v102 = *(void *)(v73 + 24);
        *((void *)v72 + 2) = *(void *)(v73 + 16);
        *((void *)v72 + 3) = v102;
        uint64_t v103 = *(void *)(v73 + 40);
        *((void *)v72 + 4) = *(void *)(v73 + 32);
        *((void *)v72 + 5) = v103;
        uint64_t v104 = *(void *)(v73 + 56);
        *((void *)v72 + 6) = *(void *)(v73 + 48);
        *((void *)v72 + 7) = v104;
        uint64_t v105 = *(void *)(v73 + 64);
        uint64_t v106 = *(void *)(v73 + 72);
        *((void *)v72 + 8) = v105;
        *((void *)v72 + 9) = v106;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v107 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v107 - 8) + 16))(v72, v73, v107);
        uint64_t v108 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v109 = v108[12];
        uint64_t v110 = &v72[v109];
        uint64_t v111 = (uint64_t *)(v73 + v109);
        uint64_t v113 = *v111;
        uint64_t v112 = v111[1];
        *(void *)uint64_t v110 = v113;
        *((void *)v110 + 1) = v112;
        uint64_t v114 = v108[16];
        uint64_t v115 = &v72[v114];
        uint64_t v116 = (void *)(v73 + v114);
        uint64_t v117 = v116[1];
        *(void *)uint64_t v115 = *v116;
        *((void *)v115 + 1) = v117;
        uint64_t v118 = v108[20];
        uint64_t v119 = &v72[v118];
        uint64_t v120 = (void *)(v73 + v118);
        uint64_t v121 = v120[1];
        *(void *)uint64_t v119 = *v120;
        *((void *)v119 + 1) = v121;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v122 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v122 - 8) + 16))(v72, v73, v122);
        uint64_t v123 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v124 = v123[12];
        id v125 = &v72[v124];
        uint64_t v126 = (uint64_t *)(v73 + v124);
        uint64_t v128 = *v126;
        uint64_t v127 = v126[1];
        *(void *)id v125 = v128;
        *((void *)v125 + 1) = v127;
        uint64_t v129 = v123[16];
        uint64_t v130 = &v72[v129];
        uint64_t v131 = (void *)(v73 + v129);
        uint64_t v132 = v131[1];
        *(void *)uint64_t v130 = *v131;
        *((void *)v130 + 1) = v132;
        uint64_t v133 = v123[20];
        uint64_t v134 = &v72[v133];
        uint64_t v135 = (void *)(v73 + v133);
        uint64_t v136 = v135[1];
        *(void *)uint64_t v134 = *v135;
        *((void *)v134 + 1) = v136;
        uint64_t v137 = v123[24];
        uint64_t v138 = &v72[v137];
        uint64_t v139 = (void *)(v73 + v137);
        uint64_t v140 = v139[1];
        *(void *)uint64_t v138 = *v139;
        *((void *)v138 + 1) = v140;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v75 = type metadata accessor for URL();
        uint64_t v144 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16);
        v144(v72, v73, v75);
        uint64_t v76 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v144(&v72[v76[12]], v73 + v76[12], v75);
        uint64_t v77 = v76[16];
        uint64_t v78 = &v72[v77];
        uint64_t v79 = (void *)(v73 + v77);
        uint64_t v80 = v79[1];
        *(void *)uint64_t v78 = *v79;
        *((void *)v78 + 1) = v80;
        uint64_t v81 = v76[20];
        uint64_t v82 = &v72[v81];
        uint64_t v83 = (void *)(v73 + v81);
        uint64_t v84 = v83[1];
        *(void *)uint64_t v82 = *v83;
        *((void *)v82 + 1) = v84;
        uint64_t v85 = v76[24];
        uint64_t v86 = &v72[v85];
        uint64_t v87 = (void *)(v73 + v85);
        uint64_t v88 = v87[1];
        *(void *)uint64_t v86 = *v87;
        *((void *)v86 + 1) = v88;
        uint64_t v89 = v76[28];
        uint64_t v90 = &v72[v89];
        uint64_t v91 = (void *)(v73 + v89);
        uint64_t v92 = v91[1];
        *(void *)uint64_t v90 = *v91;
        *((void *)v90 + 1) = v92;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v72, (const void *)v73, *(void *)(*(void *)(v74 - 8) + 64));
  }
  uint64_t v141 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v141) = *(void *)(a2 + v141);
  uint64_t v142 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v142) = *(void *)(a2 + v142);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource(a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v21 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
        break;
      case 3u:
        id v22 = *(id *)a2;
        char v23 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v23);
        *(void *)a1 = v22;
        *(unsigned char *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v24 = *(id *)a2;
        char v25 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v25);
        *(void *)a1 = v24;
        *(unsigned char *)(a1 + 8) = v25;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v26 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
        char v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v28 = v27[12];
        uint64_t v29 = (void *)(a1 + v28);
        uint64_t v30 = (void *)(a2 + v28);
        *uint64_t v29 = *v30;
        v29[1] = v30[1];
        uint64_t v31 = v27[16];
        char v32 = (void *)(a1 + v31);
        uint64_t v33 = (void *)(a2 + v31);
        *char v32 = *v33;
        v32[1] = v33[1];
        uint64_t v34 = v27[20];
        uint64_t v35 = (void *)(a1 + v34);
        uint64_t v36 = (void *)(a2 + v34);
        *uint64_t v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v37 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
        uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v39 = v38[12];
        uint64_t v40 = (void *)(a1 + v39);
        uint64_t v41 = (void *)(a2 + v39);
        *uint64_t v40 = *v41;
        v40[1] = v41[1];
        uint64_t v42 = v38[16];
        uint64_t v43 = (void *)(a1 + v42);
        uint64_t v44 = (void *)(a2 + v42);
        *uint64_t v43 = *v44;
        v43[1] = v44[1];
        uint64_t v45 = v38[20];
        uint64_t v46 = (void *)(a1 + v45);
        uint64_t v47 = (void *)(a2 + v45);
        *uint64_t v46 = *v47;
        v46[1] = v47[1];
        uint64_t v48 = v38[24];
        uint64_t v49 = (void *)(a1 + v48);
        uint64_t v50 = (void *)(a2 + v48);
        *uint64_t v49 = *v50;
        v49[1] = v50[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v7(a1 + v8[12], a2 + v8[12], v6);
        uint64_t v9 = v8[16];
        uint64_t v10 = (void *)(a1 + v9);
        uint64_t v11 = (void *)(a2 + v9);
        *uint64_t v10 = *v11;
        v10[1] = v11[1];
        uint64_t v12 = v8[20];
        uint64_t v13 = (void *)(a1 + v12);
        uint64_t v14 = (void *)(a2 + v12);
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        uint64_t v15 = v8[24];
        uint64_t v16 = (void *)(a1 + v15);
        uint64_t v17 = (void *)(a2 + v15);
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        uint64_t v18 = v8[28];
        Swift::String v19 = (void *)(a1 + v18);
        uint64_t v20 = (void *)(a2 + v18);
        *Swift::String v19 = *v20;
        v19[1] = v20[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = a3[5];
    uint64_t v52 = (char *)(a1 + v51);
    uint64_t v53 = a2 + v51;
    outlined destroy of MLHandActionClassifier.DataSource(a1 + v51, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v54 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v55 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v52, v53, v55);
          goto LABEL_21;
        case 3u:
          id v71 = *(id *)v53;
          char v72 = *(unsigned char *)(v53 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v53, v72);
          *(void *)uint64_t v52 = v71;
          v52[8] = v72;
          *((void *)v52 + 2) = *(void *)(v53 + 16);
          *((void *)v52 + 3) = *(void *)(v53 + 24);
          *((void *)v52 + 4) = *(void *)(v53 + 32);
          *((void *)v52 + 5) = *(void *)(v53 + 40);
          *((void *)v52 + 6) = *(void *)(v53 + 48);
          *((void *)v52 + 7) = *(void *)(v53 + 56);
          goto LABEL_17;
        case 4u:
          id v73 = *(id *)v53;
          char v74 = *(unsigned char *)(v53 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v53, v74);
          *(void *)uint64_t v52 = v73;
          v52[8] = v74;
          *((void *)v52 + 2) = *(void *)(v53 + 16);
          *((void *)v52 + 3) = *(void *)(v53 + 24);
          *((void *)v52 + 4) = *(void *)(v53 + 32);
          *((void *)v52 + 5) = *(void *)(v53 + 40);
          *((void *)v52 + 6) = *(void *)(v53 + 48);
          *((void *)v52 + 7) = *(void *)(v53 + 56);
          *((void *)v52 + 8) = *(void *)(v53 + 64);
          *((void *)v52 + 9) = *(void *)(v53 + 72);
          goto LABEL_19;
        case 5u:
          uint64_t v75 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16))(v52, v53, v75);
          uint64_t v76 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v77 = v76[12];
          uint64_t v78 = &v52[v77];
          uint64_t v79 = (void *)(v53 + v77);
          *(void *)uint64_t v78 = *v79;
          *((void *)v78 + 1) = v79[1];
          uint64_t v80 = v76[16];
          uint64_t v81 = &v52[v80];
          uint64_t v82 = (void *)(v53 + v80);
          *(void *)uint64_t v81 = *v82;
          *((void *)v81 + 1) = v82[1];
          uint64_t v83 = v76[20];
          uint64_t v84 = &v52[v83];
          uint64_t v85 = (void *)(v53 + v83);
          *(void *)uint64_t v84 = *v85;
          *((void *)v84 + 1) = v85[1];
          goto LABEL_17;
        case 6u:
          uint64_t v86 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(v52, v53, v86);
          uint64_t v87 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v88 = v87[12];
          uint64_t v89 = &v52[v88];
          uint64_t v90 = (void *)(v53 + v88);
          *(void *)uint64_t v89 = *v90;
          *((void *)v89 + 1) = v90[1];
          uint64_t v91 = v87[16];
          uint64_t v92 = &v52[v91];
          uint64_t v93 = (void *)(v53 + v91);
          *(void *)uint64_t v92 = *v93;
          *((void *)v92 + 1) = v93[1];
          uint64_t v94 = v87[20];
          char v95 = &v52[v94];
          uint64_t v96 = (void *)(v53 + v94);
          *(void *)char v95 = *v96;
          *((void *)v95 + 1) = v96[1];
          uint64_t v97 = v87[24];
          uint64_t v98 = &v52[v97];
          uint64_t v99 = (void *)(v53 + v97);
          *(void *)uint64_t v98 = *v99;
          *((void *)v98 + 1) = v99[1];
LABEL_19:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v56 = type metadata accessor for URL();
          uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16);
          v57(v52, v53, v56);
          uint64_t v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v57(&v52[v58[12]], v53 + v58[12], v56);
          uint64_t v59 = v58[16];
          uint64_t v60 = &v52[v59];
          uint64_t v61 = (void *)(v53 + v59);
          *(void *)uint64_t v60 = *v61;
          *((void *)v60 + 1) = v61[1];
          uint64_t v62 = v58[20];
          uint64_t v63 = &v52[v62];
          uint64_t v64 = (void *)(v53 + v62);
          *(void *)uint64_t v63 = *v64;
          *((void *)v63 + 1) = v64[1];
          uint64_t v65 = v58[24];
          uint64_t v66 = &v52[v65];
          uint64_t v67 = (void *)(v53 + v65);
          *(void *)uint64_t v66 = *v67;
          *((void *)v66 + 1) = v67[1];
          uint64_t v68 = v58[28];
          uint64_t v69 = &v52[v68];
          uint64_t v70 = (void *)(v53 + v68);
          *(void *)uint64_t v69 = *v70;
          *((void *)v69 + 1) = v70[1];
          swift_bridgeObjectRetain();
LABEL_17:
          swift_bridgeObjectRetain();
          break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_21:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v52, (const void *)v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
  }
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t outlined destroy of MLHandActionClassifier.DataSource(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

char *initializeWithTake for MLHandActionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v8(&a1[v9[12]], &a2[v9[12]], v7);
      *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
      *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
      *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
      *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
      goto LABEL_7;
    case 1u:
    case 2u:
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      goto LABEL_7;
    case 5u:
      uint64_t v11 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
      *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
      *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
      goto LABEL_7;
    case 6u:
      uint64_t v13 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
      *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
      *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
      *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v19 = type metadata accessor for URL();
        uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
        v29(v16, v17, v19);
        uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v29(&v16[v20[12]], &v17[v20[12]], v19);
        *(_OWORD *)&v16[v20[16]] = *(_OWORD *)&v17[v20[16]];
        *(_OWORD *)&v16[v20[20]] = *(_OWORD *)&v17[v20[20]];
        *(_OWORD *)&v16[v20[24]] = *(_OWORD *)&v17[v20[24]];
        *(_OWORD *)&v16[v20[28]] = *(_OWORD *)&v17[v20[28]];
        goto LABEL_16;
      case 1u:
      case 2u:
        uint64_t v21 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v16, v17, v21);
        goto LABEL_16;
      case 5u:
        uint64_t v22 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v16, v17, v22);
        char v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v16[v23[12]] = *(_OWORD *)&v17[v23[12]];
        *(_OWORD *)&v16[v23[16]] = *(_OWORD *)&v17[v23[16]];
        *(_OWORD *)&v16[v23[20]] = *(_OWORD *)&v17[v23[20]];
        goto LABEL_16;
      case 6u:
        uint64_t v24 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v16, v17, v24);
        char v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v16[v25[12]] = *(_OWORD *)&v17[v25[12]];
        *(_OWORD *)&v16[v25[16]] = *(_OWORD *)&v17[v25[16]];
        *(_OWORD *)&v16[v25[20]] = *(_OWORD *)&v17[v25[20]];
        *(_OWORD *)&v16[v25[24]] = *(_OWORD *)&v17[v25[24]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  uint64_t v26 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v26] = *(void *)&a2[v26];
  uint64_t v27 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v27] = *(void *)&a2[v27];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  return a1;
}

char *assignWithTake for MLHandActionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL();
        uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(&a1[v9[12]], &a2[v9[12]], v7);
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
        *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
        *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
        goto LABEL_8;
      case 1u:
      case 2u:
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_8;
      case 5u:
        uint64_t v11 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
        *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
        *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
        goto LABEL_8;
      case 6u:
        uint64_t v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
        *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
        *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
        *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    uint64_t v15 = a3[5];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)&a1[v15], (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v18 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v19 = type metadata accessor for URL();
          uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
          v29(v16, v17, v19);
          uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v29(&v16[v20[12]], &v17[v20[12]], v19);
          *(_OWORD *)&v16[v20[16]] = *(_OWORD *)&v17[v20[16]];
          *(_OWORD *)&v16[v20[20]] = *(_OWORD *)&v17[v20[20]];
          *(_OWORD *)&v16[v20[24]] = *(_OWORD *)&v17[v20[24]];
          *(_OWORD *)&v16[v20[28]] = *(_OWORD *)&v17[v20[28]];
          goto LABEL_17;
        case 1u:
        case 2u:
          uint64_t v21 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v16, v17, v21);
          goto LABEL_17;
        case 5u:
          uint64_t v22 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v16, v17, v22);
          char v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v16[v23[12]] = *(_OWORD *)&v17[v23[12]];
          *(_OWORD *)&v16[v23[16]] = *(_OWORD *)&v17[v23[16]];
          *(_OWORD *)&v16[v23[20]] = *(_OWORD *)&v17[v23[20]];
          goto LABEL_17;
        case 6u:
          uint64_t v24 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v16, v17, v24);
          char v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v16[v25[12]] = *(_OWORD *)&v17[v25[12]];
          *(_OWORD *)&v16[v25[16]] = *(_OWORD *)&v17[v25[16]];
          *(_OWORD *)&v16[v25[20]] = *(_OWORD *)&v17[v25[20]];
          *(_OWORD *)&v16[v25[24]] = *(_OWORD *)&v17[v25[24]];
LABEL_17:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v16, v17, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
  }
  uint64_t v26 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v26] = *(void *)&a2[v26];
  uint64_t v27 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v27] = *(void *)&a2[v27];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227095FD4);
}

uint64_t sub_227095FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227096064);
}

uint64_t sub_227096064(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata accessor for MLHandActionClassifier.PersistentParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLHandActionClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLHandActionClassifier.PersistentParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MLHandActionClassifier.PersistentParameters()
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v180 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ModelParameters.ValidationData?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v138 = v6;
  uint64_t v140 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v132 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v139 = v11;
  OUTLINED_FUNCTION_65();
  uint64_t v142 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v137 = v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  unint64_t v133 = (unint64_t)&v119 - v15;
  OUTLINED_FUNCTION_65();
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v135 = v17;
  uint64_t v136 = v16;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  uint64_t v134 = v18;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v148 = v19;
  uint64_t v149 = v20;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v141 = v21;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v22);
  uint64_t v143 = (char *)&v119 - v23;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v24);
  uint64_t v146 = (char *)&v119 - v25;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_46_2();
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v119 - v28;
  uint64_t v30 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  uint64_t v144 = v30[6];
  uint64_t v145 = a2;
  *(void *)(a2 + v144) = 32;
  uint64_t v31 = (void (*)(void))v30[7];
  *(void *)((char *)v31 + a2) = 80;
  uint64_t v32 = v30[8];
  *(void *)(a2 + v32) = 30;
  uint64_t v33 = v30[9];
  *(void *)(a2 + v33) = 0x403E000000000000;
  OUTLINED_FUNCTION_11_2();
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_20_1();
  URL.appendingPathComponent(_:)();
  uint64_t v34 = v147;
  Data.init(contentsOf:options:)();
  uint64_t v147 = v34;
  if (v34)
  {
    uint64_t v36 = v148;
    uint64_t v37 = *(void (**)(void))(v149 + 8);
    OUTLINED_FUNCTION_5_4();
    v37();
    OUTLINED_FUNCTION_5_4();
    v37();
    return ((uint64_t (*)(char *, uint64_t))v37)(v29, v36);
  }
  uint64_t v127 = v32;
  uint64_t v128 = v31;
  uint64_t v125 = v33;
  uint64_t v126 = v30;
  uint64_t v130 = v29;
  uint64_t v131 = a1;
  uint64_t v40 = v148;
  uint64_t v39 = v149;
  uint64_t v41 = (char *)(v149 + 8);
  uint64_t v42 = *(void (**)(void))(v149 + 8);
  uint64_t v43 = v35;
  OUTLINED_FUNCTION_24_5();
  v42();
  uint64_t v44 = self;
  OUTLINED_FUNCTION_48_1();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v155 = 0;
  id v46 = objc_msgSend(v44, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v155);

  id v47 = (id)v155;
  if (!v46)
  {
    uint64_t v59 = v47;
    uint64_t v60 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v61 = OUTLINED_FUNCTION_48_1();
    outlined consume of Data._Representation(v61, v62);
    OUTLINED_FUNCTION_24_5();
    v42();
LABEL_21:
    uint64_t v66 = v130;
    uint64_t v67 = v60;
    return ((uint64_t (*)(char *, uint64_t))v42)(v66, v67);
  }
  uint64_t v129 = v43;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v179, (uint64_t)&v155);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v60 = v40;
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_96();
    *uint64_t v63 = 0xD000000000000037;
    v63[1] = v64;
    OUTLINED_FUNCTION_8_4(v65, (uint64_t)v63);
    OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_24_5();
    v42();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v179);
    goto LABEL_21;
  }
  uint64_t v49 = v177;
  specialized Dictionary.subscript.getter(0x69735F6863746162, 0xEA0000000000657ALL, v177, &v155);
  if (!v157) {
    goto LABEL_22;
  }
  uint64_t v124 = v49;
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v50 = v177;
  OUTLINED_FUNCTION_57_2(0x726574695F78616DLL, 0xEE00736E6F697461, &v155);
  if (!v157) {
    goto LABEL_22;
  }
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0)
  {
LABEL_25:
    uint64_t v68 = v40;
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  unint64_t v123 = v177;
  OUTLINED_FUNCTION_57_2(0x6D6172665F6D756ELL, 0xEA00000000007365, &v155);
  if (!v157)
  {
LABEL_22:
    uint64_t v68 = v40;
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v155, &demangling cache variable for type metadata for Any?);
LABEL_26:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v69 = OUTLINED_FUNCTION_85();
    *uint64_t v70 = 0xD00000000000003FLL;
    v70[1] = 0x80000002272D5450;
    OUTLINED_FUNCTION_8_4(v69, (uint64_t)v70);
    OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_24_5();
    v42();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v179);
    uint64_t v66 = v130;
    uint64_t v67 = v68;
    return ((uint64_t (*)(char *, uint64_t))v42)(v66, v67);
  }
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v122 = (uint64_t *)v177;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_20_1();
  OUTLINED_FUNCTION_57_2(v51, v52, &v155);
  if (!v157) {
    goto LABEL_22;
  }
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v121 = v177;
  OUTLINED_FUNCTION_57_2(0x7246746567726174, 0xEF65746152656D61, &v155);
  if (!v157) {
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v53 = v145;
  *(void *)(v145 + v144) = v50;
  uint64_t v54 = v177;
  *(void *)((char *)v128 + v53) = v123;
  *(void *)(v53 + v127) = v122;
  URL.appendingPathComponent(_:)();
  specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v124, &v177);
  uint64_t v120 = v42;
  if (v178)
  {
    if (swift_dynamicCast())
    {
      uint64_t v144 = v48;
      uint64_t v128 = *(void (**)(void))(v39 + 16);
      ((void (*)(uint64_t, char *, uint64_t))v128)(v141, v146, v40);
      uint64_t v55 = v139;
      MLHandActionClassifier.DataSource.init(dictionary:tableFile:)();
      if (__swift_getEnumTagSinglePayload(v55, 1, v142) == 1)
      {
        swift_bridgeObjectRelease();
        outlined destroy of URL?(v55, &demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_40_1();
        *uint64_t v57 = v56 - 2;
        v57[1] = 0x80000002272D5500;
        OUTLINED_FUNCTION_8_4(v58, (uint64_t)v57);
        OUTLINED_FUNCTION_28_2();
LABEL_31:
        char v74 = v120;
        OUTLINED_FUNCTION_24_5();
        v74();
        OUTLINED_FUNCTION_24_5();
        v74();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v179);
        OUTLINED_FUNCTION_24_5();
        return ((uint64_t (*)(void))v74)();
      }
      uint64_t v143 = v41;
      uint64_t v100 = v133;
      outlined init with take of MLHandActionClassifier.DataSource(v55, v133, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
      uint64_t v97 = v100;
      uint64_t v98 = v145;
      uint64_t v99 = v145;
      goto LABEL_46;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v177, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v71 = v147;
  char v72 = *(void (**)(void))(v149 + 16);
  id v73 = v143;
  OUTLINED_FUNCTION_18_3();
  v72();
  char v150 = 1;
  LOBYTE(v155) = 1;
  *(_DWORD *)((char *)&v155 + 1) = *(_DWORD *)v154;
  DWORD1(v155) = *(_DWORD *)&v154[3];
  *((void *)&v155 + 1) = 44;
  unint64_t v156 = 0xE100000000000000;
  uint64_t v157 = 0;
  unint64_t v158 = 0xE000000000000000;
  uint64_t v159 = 92;
  unint64_t v160 = 0xE100000000000000;
  char v161 = 1;
  *(_DWORD *)unint64_t v162 = *(_DWORD *)v153;
  *(_DWORD *)&v162[3] = *(_DWORD *)&v153[3];
  uint64_t v163 = 34;
  unint64_t v164 = 0xE100000000000000;
  char v165 = 1;
  *(_DWORD *)CMTimeValue v166 = *(_DWORD *)v152;
  *(_DWORD *)&v166[3] = *(_DWORD *)&v152[3];
  v167 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v168 = 10;
  unint64_t v169 = 0xE100000000000000;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  char v172 = 1;
  *(_DWORD *)uint64_t v173 = *(_DWORD *)v151;
  *(_DWORD *)&v173[3] = *(_DWORD *)&v151[3];
  uint64_t v174 = 0;
  MLDataTable.init(contentsOf:options:)(v73, &v155, (uint64_t)&v175);
  if (v71)
  {
    OUTLINED_FUNCTION_28_2();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v128 = v72;
  uint64_t v143 = v41;
  uint64_t v144 = v48;
  *(void *)&long long v155 = v175;
  BYTE8(v155) = v176;
  uint64_t v75 = v134;
  DataFrame.init(_:)((uint64_t)&v155, v134);
  uint64_t v76 = DataFrame.columns.getter();
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v76);
  swift_bridgeObjectRelease();
  char v78 = specialized Sequence<>.contains(_:)(0x7472617473, 0xE500000000000000, MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  swift_bridgeObjectRelease();
  if (v78) {
    uint64_t v79 = 0x7472617473;
  }
  else {
    uint64_t v79 = 0;
  }
  uint64_t v139 = v79;
  if (v78) {
    unint64_t v80 = 0xE500000000000000;
  }
  else {
    unint64_t v80 = 0;
  }
  unint64_t v133 = v80;
  uint64_t v81 = DataFrame.columns.getter();
  uint64_t v82 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v81);
  uint64_t v147 = 0;
  swift_bridgeObjectRelease();
  char v83 = specialized Sequence<>.contains(_:)(6581861, 0xE300000000000000, v82);
  swift_bridgeObjectRelease();
  if (v83) {
    uint64_t v84 = 6581861;
  }
  else {
    uint64_t v84 = 0;
  }
  uint64_t v127 = v84;
  if (v83) {
    unint64_t v85 = 0xE300000000000000;
  }
  else {
    unint64_t v85 = 0;
  }
  unint64_t v123 = v85;
  uint64_t v86 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  uint64_t v87 = v136;
  uint64_t v88 = v137;
  uint64_t v89 = (void *)(v137 + v86[12]);
  uint64_t v90 = (void *)(v137 + v86[16]);
  uint64_t v91 = (uint64_t *)(v137 + v86[20]);
  uint64_t v122 = (uint64_t *)(v137 + v86[24]);
  uint64_t v92 = v135;
  OUTLINED_FUNCTION_18_3();
  v93();
  *uint64_t v89 = 0x7461506F65646976;
  v89[1] = 0xE900000000000068;
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v75, v87);
  *uint64_t v90 = 0x6C6562616CLL;
  v90[1] = 0xE500000000000000;
  uint64_t v94 = v133;
  *uint64_t v91 = v139;
  v91[1] = v94;
  char v95 = v122;
  unint64_t v96 = v123;
  uint64_t *v122 = v127;
  v95[1] = v96;
  swift_storeEnumTagMultiPayload();
  uint64_t v97 = v88;
  uint64_t v98 = v145;
  uint64_t v99 = v145;
LABEL_46:
  outlined init with take of MLHandActionClassifier.DataSource(v97, v99, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v124, &v155);
  if (!v157)
  {
    outlined destroy of URL?((uint64_t)&v155, &demangling cache variable for type metadata for Any?);
    goto LABEL_51;
  }
  if ((OUTLINED_FUNCTION_35_4() & 1) == 0)
  {
LABEL_51:
    uint64_t v108 = v126;
    swift_storeEnumTagMultiPayload();
    goto LABEL_52;
  }
  OUTLINED_FUNCTION_18_3();
  v101();
  uint64_t v102 = v138;
  MLHandActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)();
  if (__swift_getEnumTagSinglePayload(v102, 1, v140) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v138, &demangling cache variable for type metadata for MLHandActionClassifier.ModelParameters.ValidationData?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    int v103 = 0;
    OUTLINED_FUNCTION_40_1();
    *uint64_t v104 = v105;
    OUTLINED_FUNCTION_96();
    goto LABEL_58;
  }
  uint64_t v118 = v132;
  outlined init with take of MLHandActionClassifier.DataSource(v138, v132, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v108 = v126;
  uint64_t v98 = v145;
  outlined init with take of MLHandActionClassifier.DataSource(v118, v145 + v126[5], (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
LABEL_52:
  *(void *)(v98 + v108[10]) = v121;
  uint64_t v109 = v124;
  *(void *)(v98 + v125) = v54;
  uint64_t v110 = OUTLINED_FUNCTION_51_2();
  specialized Dictionary.subscript.getter(v110, v111, v109, v112);
  swift_bridgeObjectRelease();
  if (v157)
  {
    if (OUTLINED_FUNCTION_35_4())
    {
      MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v177, (char *)&v155);
      if (v155 != 1)
      {
        OUTLINED_FUNCTION_28_2();
        uint64_t v113 = v120;
        OUTLINED_FUNCTION_21_4();
        v113();
        OUTLINED_FUNCTION_21_4();
        v113();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v179);
        OUTLINED_FUNCTION_21_4();
        return ((uint64_t (*)(void))v113)();
      }
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v155, &demangling cache variable for type metadata for Any?);
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_40_1();
  *uint64_t v115 = v114 - 10;
  OUTLINED_FUNCTION_96();
  int v103 = 1;
LABEL_58:
  *(void *)(v106 + 8) = v107;
  *(_OWORD *)(v106 + 16) = 0u;
  *(_OWORD *)(v106 + 32) = 0u;
  *(unsigned char *)(v106 + 48) = 0;
  swift_willThrow();
  OUTLINED_FUNCTION_28_2();
  uint64_t v116 = v120;
  OUTLINED_FUNCTION_21_4();
  v116();
  OUTLINED_FUNCTION_21_4();
  v116();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v179);
  OUTLINED_FUNCTION_21_4();
  v116();
  uint64_t v117 = v145;
  uint64_t result = outlined destroy of MLHandActionClassifier.DataSource(v145, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  if (v103) {
    return outlined destroy of MLHandActionClassifier.DataSource(v117 + v126[5], (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  }
  return result;
}

void MLHandActionClassifier.DataSource.init(dictionary:tableFile:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33();
  uint64_t v12 = (char *)(v10 - v11);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v90 - v14;
  uint64_t v16 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_33();
  uint64_t v20 = v18 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v90 - v22;
  if (!*(void *)(v3 + 16)) {
    goto LABEL_33;
  }
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v25 & 1) == 0) {
    goto LABEL_33;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v24, (uint64_t)&v109);
  if ((OUTLINED_FUNCTION_2_7() & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v103 = v1;
  uint64_t v104 = v5;
  OUTLINED_FUNCTION_60_1();
  uint64_t v27 = v118;
  uint64_t v5 = v119;
  BOOL v29 = v118 == v28 && v119 == v26;
  if (v29 || (OUTLINED_FUNCTION_17_4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_16_5();
    uint64_t v5 = v104;
    uint64_t v1 = v103;
    if (!v110)
    {
LABEL_30:
      swift_bridgeObjectRelease();
LABEL_31:
      outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
LABEL_34:
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
LABEL_35:
      uint64_t v37 = 1;
      goto LABEL_36;
    }
    if (OUTLINED_FUNCTION_2_7())
    {
      specialized Dictionary.subscript.getter(0x697461746F6E6E61, 0xEF656C69665F6E6FLL, v3, &v109);
      if (v110)
      {
        if (OUTLINED_FUNCTION_2_7())
        {
          uint64_t v5 = v119;
          uint64_t v102 = v118;
          OUTLINED_FUNCTION_4_6(0x5F6F65646976, &v109);
          if (v110)
          {
            if ((OUTLINED_FUNCTION_2_7() & 1) == 0)
            {
LABEL_57:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_58;
            }
            char v101 = v5;
            uint64_t v5 = v119;
            uint64_t v100 = v118;
            OUTLINED_FUNCTION_1_9();
            if (v110)
            {
              uint64_t v99 = v5;
              if (OUTLINED_FUNCTION_2_7())
              {
                uint64_t v30 = v118;
                uint64_t v97 = v119;
                OUTLINED_FUNCTION_1_9();
                if (v110)
                {
                  OUTLINED_FUNCTION_2_7();
                  OUTLINED_FUNCTION_25_5();
                  uint64_t v94 = v32;
                  if (v29) {
                    uint64_t v33 = 0;
                  }
                  else {
                    uint64_t v33 = v31;
                  }
                  uint64_t v93 = v33;
                }
                else
                {
                  outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
                  uint64_t v94 = 0;
                  uint64_t v93 = 0;
                }
                OUTLINED_FUNCTION_1_9();
                swift_bridgeObjectRelease();
                uint64_t v98 = v30;
                if (v110)
                {
                  OUTLINED_FUNCTION_2_7();
                  OUTLINED_FUNCTION_25_5();
                  uint64_t v92 = v60;
                  if (v29) {
                    uint64_t v61 = 0;
                  }
                  else {
                    uint64_t v61 = v59;
                  }
                  uint64_t v91 = v61;
                }
                else
                {
                  outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
                  uint64_t v92 = 0;
                  uint64_t v91 = 0;
                }
                unint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
                uint64_t v95 = v20 + v62[12];
                uint64_t v63 = (void *)(v20 + v62[16]);
                uint64_t v64 = (void *)(v20 + v62[20]);
                uint64_t v5 = (void *)(v20 + v62[24]);
                unint64_t v96 = (void *)(v20 + v62[28]);
                URL.init(fileURLWithPath:)();
                swift_bridgeObjectRelease();
                URL.init(fileURLWithPath:)();
                swift_bridgeObjectRelease();
                uint64_t v65 = OUTLINED_FUNCTION_7_6();
                v66(v65);
                uint64_t v67 = v99;
                *uint64_t v63 = v100;
                v63[1] = v67;
                uint64_t v68 = v97;
                void *v64 = v98;
                v64[1] = v68;
                uint64_t v69 = v93;
                *uint64_t v5 = v94;
                v5[1] = v69;
                uint64_t v70 = v96;
                uint64_t v71 = v91;
                *unint64_t v96 = v92;
                v70[1] = v71;
                OUTLINED_FUNCTION_38_2();
                swift_storeEnumTagMultiPayload();
                outlined init with take of MLHandActionClassifier.DataSource(v20, (uint64_t)v23, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
                goto LABEL_78;
              }
              swift_bridgeObjectRelease();
              goto LABEL_57;
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
LABEL_58:
          (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
LABEL_59:
          OUTLINED_FUNCTION_45_1();
          goto LABEL_36;
        }
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  if (v27 != (void *)0xD000000000000013 || v5 != (void *)0x80000002272D5430)
  {
    OUTLINED_FUNCTION_20_1();
    if ((OUTLINED_FUNCTION_17_4() & 1) == 0)
    {
      BOOL v38 = v27 == (void *)0x5F64656C6562616CLL && v5 == (void *)0xED000073656C6966;
      if (v38 || (OUTLINED_FUNCTION_17_4() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_16_5();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_43_3();
        if (v39)
        {
          if (OUTLINED_FUNCTION_2_7()) {
            goto LABEL_27;
          }
LABEL_46:
          (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
          goto LABEL_35;
        }
LABEL_45:
        outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
        goto LABEL_46;
      }
      if ((v27 != (void *)0xD000000000000016 || v5 != (void *)0x80000002272D53F0)
        && (OUTLINED_FUNCTION_17_4() & 1) == 0)
      {
        if (v27 == (void *)0xD000000000000012 && v5 == (void *)0x80000002272D53B0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_20_1();
          char v72 = OUTLINED_FUNCTION_17_4();
          swift_bridgeObjectRelease();
          if ((v72 & 1) == 0)
          {
            uint64_t v83 = OUTLINED_FUNCTION_7_6();
            v84(v83);
            swift_bridgeObjectRelease();
            goto LABEL_59;
          }
        }
        uint64_t v1 = v103;
        OUTLINED_FUNCTION_18_3();
        v73();
        v107[0] = 1;
        LOBYTE(v109) = 1;
        *(_DWORD *)((char *)&v109 + 1) = v105;
        OUTLINED_FUNCTION_10_3(1);
        int v111 = v117;
        OUTLINED_FUNCTION_56_2(v74);
        *(_DWORD *)uint64_t v112 = *(_DWORD *)v116;
        *(_DWORD *)&v112[3] = *(_DWORD *)&v116[3];
        OUTLINED_FUNCTION_54_2((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
        char v113 = v107[0];
        int v114 = *(_DWORD *)v115;
        OUTLINED_FUNCTION_55_2(*(int *)&v115[3]);
        MLDataTable.init(contentsOf:options:)(v12, v75, v76);
        OUTLINED_FUNCTION_45_1();
        uint64_t v77 = v118;
        char v78 = (char)v119;
        OUTLINED_FUNCTION_4_6(0x5F6F65646976, &v109);
        if (!v110)
        {
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v77, v78);
          goto LABEL_31;
        }
        if ((OUTLINED_FUNCTION_2_7() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v77, v78);
          uint64_t v1 = v103;
          goto LABEL_34;
        }
        uint64_t v79 = v118;
        unint64_t v80 = v119;
        OUTLINED_FUNCTION_1_9();
        if (v110)
        {
          if (OUTLINED_FUNCTION_2_7())
          {
            uint64_t v102 = v118;
            char v101 = v119;
            OUTLINED_FUNCTION_1_9();
            if (v110)
            {
              OUTLINED_FUNCTION_2_7();
              OUTLINED_FUNCTION_25_5();
              uint64_t v100 = v82;
              if (v29) {
                uint64_t v5 = 0;
              }
              else {
                uint64_t v5 = v81;
              }
            }
            else
            {
              outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
              uint64_t v100 = 0;
              uint64_t v5 = 0;
            }
            OUTLINED_FUNCTION_1_9();
            swift_bridgeObjectRelease();
            uint64_t v85 = OUTLINED_FUNCTION_7_6();
            v86(v85);
            if (v110)
            {
              OUTLINED_FUNCTION_2_7();
              OUTLINED_FUNCTION_25_5();
              if (v29) {
                uint64_t v88 = 0;
              }
            }
            else
            {
              outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
              uint64_t v87 = 0;
              uint64_t v88 = 0;
            }
            *(void *)uint64_t v23 = v77;
            v23[8] = v78;
            *((void *)v23 + 2) = v79;
            *((void *)v23 + 3) = v80;
            uint64_t v89 = v101;
            *((void *)v23 + 4) = v102;
            *((void *)v23 + 5) = v89;
            *((void *)v23 + 6) = v100;
            *((void *)v23 + 7) = v5;
            *((void *)v23 + 8) = v87;
            *((void *)v23 + 9) = v88;
            goto LABEL_111;
          }
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v77, v78);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v77, v78);
          swift_bridgeObjectRelease();
          outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
        }
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v103, v6);
        goto LABEL_59;
      }
      swift_bridgeObjectRelease();
      uint64_t v40 = v103;
      OUTLINED_FUNCTION_18_3();
      v41();
      char v108 = 1;
      LOBYTE(v109) = 1;
      *(_DWORD *)((char *)&v109 + 1) = v117;
      OUTLINED_FUNCTION_10_3(1);
      int v111 = *(_DWORD *)v116;
      OUTLINED_FUNCTION_56_2(v42);
      *(_DWORD *)uint64_t v112 = *(_DWORD *)v115;
      *(_DWORD *)&v112[3] = *(_DWORD *)&v115[3];
      OUTLINED_FUNCTION_54_2((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
      char v113 = v108;
      int v114 = *(_DWORD *)v107;
      OUTLINED_FUNCTION_55_2(*(int *)&v107[3]);
      MLDataTable.init(contentsOf:options:)(v15, v43, v44);
      OUTLINED_FUNCTION_45_1();
      id v105 = v118;
      char v106 = (char)v119;
      OUTLINED_FUNCTION_53_2();
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v45, v46, v47);
      OUTLINED_FUNCTION_20_1();
      specialized Dictionary.subscript.getter(v48, v49, v3, &v109);
      if (v110)
      {
        if (OUTLINED_FUNCTION_2_7())
        {
          uint64_t v51 = v118;
          uint64_t v50 = v119;
          OUTLINED_FUNCTION_1_9();
          if (v110)
          {
            if (OUTLINED_FUNCTION_2_7())
            {
              uint64_t v53 = v118;
              uint64_t v52 = v119;
              specialized Dictionary.subscript.getter(0x5F65727574616566, 0xEE006E6D756C6F63, v3, &v109);
              swift_bridgeObjectRelease();
              uint64_t v54 = OUTLINED_FUNCTION_7_6();
              v55(v54);
              if (v110)
              {
                if (OUTLINED_FUNCTION_2_7())
                {
                  uint64_t v56 = v118;
                  uint64_t v57 = v119;
                  char v58 = v106;
                  *(void *)uint64_t v23 = v105;
                  v23[8] = v58;
                  *((void *)v23 + 2) = v51;
                  *((void *)v23 + 3) = v50;
                  *((void *)v23 + 4) = v53;
                  *((void *)v23 + 5) = v52;
                  *((void *)v23 + 6) = v56;
                  *((void *)v23 + 7) = v57;
LABEL_111:
                  swift_storeEnumTagMultiPayload();
LABEL_78:
                  OUTLINED_FUNCTION_45_1();
                  goto LABEL_28;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
              }
              OUTLINED_FUNCTION_45_1();
LABEL_95:
              outlined consume of Result<_DataTable, Error>(v105, v106);
              goto LABEL_35;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
          }
          (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v103, v6);
          goto LABEL_95;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined destroy of URL?((uint64_t)&v109, &demangling cache variable for type metadata for Any?);
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v40, v6);
      goto LABEL_95;
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_5();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_43_3();
  if (!v34) {
    goto LABEL_45;
  }
  if ((OUTLINED_FUNCTION_2_7() & 1) == 0) {
    goto LABEL_46;
  }
LABEL_27:
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = OUTLINED_FUNCTION_39_3();
  v36(v35);
  OUTLINED_FUNCTION_38_2();
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandActionClassifier.DataSource(v20, (uint64_t)v23, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
LABEL_28:
  outlined init with take of MLHandActionClassifier.DataSource((uint64_t)v23, (uint64_t)v5, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  uint64_t v37 = 0;
LABEL_36:
  __swift_storeEnumTagSinglePayload((uint64_t)v5, v37, 1, v16);
  OUTLINED_FUNCTION_12_4();
}

void MLHandActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_24_4();
  if (!*(void *)(v2 + 16)) {
    goto LABEL_25;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v19 & 1) == 0) {
    goto LABEL_25;
  }
  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v18, (uint64_t)&v34);
  if ((OUTLINED_FUNCTION_22_5() & 1) == 0) {
    goto LABEL_25;
  }
  BOOL v20 = v32 == 1701736302 && v33 == 0xE400000000000000;
  if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    OUTLINED_FUNCTION_21_4();
    v21();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  BOOL v23 = v32 == 0x756F735F61746164 && v33 == 0xEB00000000656372;
  if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v32 == 0x74696C7073 && v33 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
LABEL_25:
        OUTLINED_FUNCTION_21_4();
        v28();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_34_2();
    swift_bridgeObjectRelease();
    if (!v37) {
      goto LABEL_33;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_22_5() & 1) == 0) {
      goto LABEL_34;
    }
    MLSplitStrategy.init(dictionary:)(v32, (uint64_t)&v34);
    OUTLINED_FUNCTION_21_4();
    v29();
    if ((v36 & 1) == 0)
    {
      __int16 v30 = v35;
      *(_OWORD *)uint64_t v0 = v34;
      *(unsigned char *)(v0 + 16) = v30;
      *(unsigned char *)(v0 + 17) = HIBYTE(v30) & 1;
      goto LABEL_10;
    }
LABEL_26:
    uint64_t v22 = 1;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_34_2();
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_33:
    outlined destroy of URL?((uint64_t)&v34, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_22_5() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_21_4();
    v31();
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_18_3();
  v24();
  MLHandActionClassifier.DataSource.init(dictionary:tableFile:)();
  OUTLINED_FUNCTION_21_4();
  v25();
  if (__swift_getEnumTagSinglePayload(v10, 1, v11) == 1)
  {
    outlined destroy of URL?(v10, &demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
    uint64_t v22 = 1;
    goto LABEL_27;
  }
  outlined init with take of MLHandActionClassifier.DataSource(v10, v15, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  outlined init with take of MLHandActionClassifier.DataSource(v15, v0, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandActionClassifier.DataSource(v0, v4, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v22 = 0;
LABEL_27:
  __swift_storeEnumTagSinglePayload(v4, v22, 1, v16);
  OUTLINED_FUNCTION_12_4();
}

uint64_t MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (!*(void *)(a1 + 16)
    || (uint64_t v4 = OUTLINED_FUNCTION_51_2(),
        unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, 0xE90000000000006DLL),
        (v6 & 1) == 0))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
LABEL_12:
    uint64_t result = outlined destroy of URL?((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (v11 == 7234407 && v12 == 0xE300000000000000)
    {
      uint64_t result = swift_bridgeObjectRelease();
      char v10 = 0;
      goto LABEL_14;
    }
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v10 = 0;
    if (v9) {
      goto LABEL_14;
    }
  }
LABEL_13:
  char v10 = 1;
LABEL_14:
  *a2 = v10;
  return result;
}

void MLHandActionClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v87 = a1;
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.DataSource();
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  uint64_t v74 = v4;
  uint64_t v82 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v81 = v6;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v88 = v7;
  uint64_t v89 = v8;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v83 = v9;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v10);
  uint64_t v84 = (char *)&v73 - v11;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v12);
  uint64_t v85 = (char *)&v73 - v13;
  uint64_t v14 = OUTLINED_FUNCTION_65();
  uint64_t v15 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(v14);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  uint64_t v80 = v17;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v18);
  BOOL v20 = (char *)&v73 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4C0;
  *(void *)(inited + 32) = 0x676E696E69617274;
  *(void *)(inited + 40) = 0xE800000000000000;
  MLHandActionClassifier.DataSource.dictionary.getter();
  uint64_t v23 = v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v91 = (void (*)(void, void))v24;
  *(void *)(inited + 48) = v23;
  *(void *)(inited + 72) = v24;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  char v25 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  uint64_t v79 = v1 + v25[5];
  outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v79, (uint64_t)v20, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v26 = v25[6];
  uint64_t v92 = v25[7];
  uint64_t v27 = v1;
  uint64_t v28 = *(void *)(v1 + v26);
  uint64_t v29 = *(void *)(v1 + v92);
  uint64_t v30 = v25[8];
  uint64_t v90 = v25[9];
  uint64_t v31 = *(void *)(v1 + v30);
  uint64_t v32 = v25[10];
  uint64_t v33 = *(void *)(v1 + v32);
  uint64_t v34 = *(void *)(v1 + v90);
  *(void *)&v20[v15[5]] = v28;
  *(void *)&v20[v15[6]] = v29;
  *(void *)&v20[v15[7]] = v31;
  *(void *)&v20[v15[8]] = v33;
  uint64_t v77 = v15;
  *(void *)&v20[v15[10]] = v34;
  uint64_t v35 = MLHandActionClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v20, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  *(void *)(inited + 96) = v35;
  char v36 = v91;
  *(void *)(inited + 120) = v91;
  *(void *)(inited + 128) = 0x69735F6863746162;
  *(void *)(inited + 136) = 0xEA0000000000657ALL;
  uint64_t v78 = v26;
  uint64_t v37 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 144) = *(void *)(v27 + v26);
  *(void *)(inited + 168) = v37;
  *(void *)(inited + 176) = 0x6D6172665F6D756ELL;
  *(void *)(inited + 184) = 0xEA00000000007365;
  uint64_t v76 = v30;
  uint64_t v38 = *(void *)(v27 + v30);
  uint64_t v39 = v90;
  *(void *)(inited + 192) = v38;
  *(void *)(inited + 216) = v37;
  strcpy((char *)(inited + 224), "max_iterations");
  *(unsigned char *)(inited + 239) = -18;
  *(void *)(inited + 240) = *(void *)(v27 + v92);
  *(void *)(inited + 264) = v37;
  *(void *)(inited + 272) = 0xD000000000000014;
  *(void *)(inited + 280) = 0x80000002272D5390;
  uint64_t v75 = v32;
  *(void *)(inited + 288) = *(void *)(v27 + v32);
  OUTLINED_FUNCTION_47_1();
  *(void *)(inited + 312) = v41;
  *(void *)(inited + 320) = v40;
  *(void *)(inited + 328) = 0xE90000000000006DLL;
  *(void *)(inited + 336) = MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 360) = v36;
  *(void *)(inited + 368) = 0x7246746567726174;
  *(void *)(inited + 376) = 0xEF65746152656D61;
  uint64_t v42 = *(void *)(v27 + v39);
  *(void *)(inited + 408) = MEMORY[0x263F8D538];
  *(void *)(inited + 384) = v42;
  OUTLINED_FUNCTION_50_1();
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v43 = self;
  OUTLINED_FUNCTION_50_1();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v93 = 0;
  id v45 = objc_msgSend(v43, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v93);

  id v46 = v93;
  if (v45)
  {
    uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    OUTLINED_FUNCTION_20_1();
    URL.appendingPathComponent(_:)();
    unint64_t v50 = v86;
    Data.write(to:options:)();
    if (v50)
    {
      OUTLINED_FUNCTION_25_0();
      v51();
      uint64_t v52 = v47;
      unint64_t v53 = v49;
LABEL_4:
      outlined consume of Data._Representation(v52, v53);
      return;
    }
    uint64_t v73 = v47;
    unint64_t v86 = v49;
    uint64_t v55 = v89 + 8;
    uint64_t v91 = *(void (**)(void, void))(v89 + 8);
    OUTLINED_FUNCTION_5_4();
    v56();
    MLHandActionClassifier.DataSource.table.getter();
    unsigned __int8 v57 = v94;
    if (v94 != 255)
    {
      uint64_t v89 = v55;
      id v58 = v93;
      v94 &= 1u;
      uint64_t v59 = (uint64_t)v84;
      URL.appendingPathComponent(_:)();
      MLDataTable.write(to:)(v59);
      v91(v59, v88);
      outlined consume of MLDataTable?(v58, v57);
    }
    uint64_t v60 = v80;
    outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v79, v80, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v61 = v77;
    uint64_t v62 = *(void *)(v27 + v92);
    uint64_t v63 = *(void *)(v27 + v76);
    uint64_t v64 = *(void *)(v27 + v75);
    uint64_t v65 = *(void *)(v27 + v39);
    *(void *)(v60 + v77[5]) = *(void *)(v27 + v78);
    *(void *)(v60 + v61[6]) = v62;
    *(void *)(v60 + v61[7]) = v63;
    *(void *)(v60 + v61[8]) = v64;
    *(void *)(v60 + v61[10]) = v65;
    uint64_t v66 = v81;
    outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v60, v81, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v67 = v74;
      outlined init with take of MLHandActionClassifier.DataSource(v66, v74, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
      MLHandActionClassifier.DataSource.table.getter();
      outlined destroy of MLHandActionClassifier.DataSource(v67, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
      id v68 = v93;
      int v69 = v94;
    }
    else
    {
      id v68 = 0;
      int v69 = 255;
    }
    uint64_t v70 = v83;
    outlined destroy of MLHandActionClassifier.DataSource(v60, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (v69 == 255)
    {
      uint64_t v52 = v73;
      unint64_t v53 = v86;
      goto LABEL_4;
    }
    id v93 = v68;
    unsigned __int8 v94 = v69 & 1;
    OUTLINED_FUNCTION_11_2();
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)(v70);
    uint64_t v71 = v73;
    OUTLINED_FUNCTION_5_4();
    v72();
    outlined consume of Data._Representation(v71, v86);
    outlined consume of MLDataTable?(v68, v69);
  }
  else
  {
    uint64_t v54 = v46;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void MLHandActionClassifier.DataSource.dictionary.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v3 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_46_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_58_0();
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_24_4();
  uint64_t v10 = OUTLINED_FUNCTION_48_1();
  outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v10, v11, v12);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v30 = OUTLINED_FUNCTION_26_4();
      v31(v30);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      uint64_t v33 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      unint64_t v35 = MEMORY[0x263F8D310];
      unint64_t v36 = 0xD000000000000013;
      unint64_t v37 = 0x80000002272D5430;
      goto LABEL_9;
    case 2u:
      uint64_t v38 = OUTLINED_FUNCTION_26_4();
      v39(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      uint64_t v33 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      unint64_t v35 = MEMORY[0x263F8D310];
      unint64_t v36 = 0x5F64656C6562616CLL;
      unint64_t v37 = 0xED000073656C6966;
LABEL_9:
      v33[3].n128_u64[0] = v36;
      v33[3].n128_u64[1] = v37;
      v33[4].n128_u64[1] = v35;
      v33[5].n128_u64[0] = 1752457584;
      v33[5].n128_u64[1] = v34;
      uint64_t v40 = URL.path.getter();
      inited[7].n128_u64[1] = v35;
      inited[6].n128_u64[0] = v40;
      inited[6].n128_u64[1] = v41;
      Dictionary.init(dictionaryLiteral:)();
      OUTLINED_FUNCTION_41_3();
      v42();
      break;
    case 3u:
      uint64_t v43 = *(void *)(v2 + 16);
      uint64_t v44 = *(void *)(v2 + 24);
      uint64_t v45 = *(void *)(v2 + 32);
      uint64_t v46 = *(void *)(v2 + 40);
      uint64_t v47 = *(void *)(v2 + 48);
      uint64_t v48 = *(void *)(v2 + 56);
      outlined consume of Result<_DataTable, Error>(*(id *)v2, *(unsigned char *)(v2 + 8));
      goto LABEL_13;
    case 4u:
      uint64_t v49 = *(void *)(v2 + 16);
      uint64_t v50 = *(void *)(v2 + 24);
      uint64_t v52 = *(void *)(v2 + 32);
      uint64_t v51 = *(void *)(v2 + 40);
      uint64_t v53 = *(void *)(v2 + 56);
      uint64_t v54 = *(void *)(v2 + 72);
      outlined consume of Result<_DataTable, Error>(*(id *)v2, *(unsigned char *)(v2 + 8));
      goto LABEL_15;
    case 5u:
      uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v56 = (uint64_t *)(v2 + v55[12]);
      uint64_t v43 = *v56;
      uint64_t v44 = v56[1];
      unsigned __int8 v57 = (uint64_t *)(v2 + v55[16]);
      uint64_t v45 = *v57;
      uint64_t v46 = v57[1];
      id v58 = (uint64_t *)(v2 + v55[20]);
      uint64_t v47 = *v58;
      uint64_t v48 = v58[1];
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v59 + 8))(v2);
LABEL_13:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v60 = (__n128 *)swift_initStackObject();
      uint64_t v61 = OUTLINED_FUNCTION_5_5(v60, (__n128)xmmword_2272CB360);
      unint64_t v62 = MEMORY[0x263F8D310];
      v61[3].n128_u64[0] = 0xD000000000000016;
      v61[3].n128_u64[1] = 0x80000002272D53F0;
      v61[4].n128_u64[1] = v62;
      v61[5].n128_u64[0] = 0xD000000000000011;
      OUTLINED_FUNCTION_96();
      v63[11] = v64;
      v63[12] = v43;
      v63[13] = v44;
      OUTLINED_FUNCTION_59_2();
      *(void *)(v65 + 120) = v66;
      *(void *)(v65 + 128) = v67;
      *(void *)(v65 + 136) = 0xEC0000006E6D756CLL;
      *(void *)(v65 + 144) = v45;
      *(void *)(v65 + 152) = v46;
      *(void *)(v65 + 168) = v66;
      strcpy((char *)(v65 + 176), "feature_column");
      *(void *)(v65 + 216) = v66;
      *(unsigned char *)(v65 + 191) = -18;
      *(void *)(v65 + 192) = v47;
      *(void *)(v65 + 200) = v48;
      Dictionary.init(dictionaryLiteral:)();
      break;
    case 6u:
      id v68 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      int v69 = (uint64_t *)(v2 + v68[12]);
      uint64_t v49 = *v69;
      uint64_t v50 = v69[1];
      uint64_t v70 = (uint64_t *)(v2 + v68[16]);
      uint64_t v52 = *v70;
      uint64_t v51 = v70[1];
      uint64_t v53 = *(void *)(v2 + v68[20] + 8);
      uint64_t v54 = *(void *)(v2 + v68[24] + 8);
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v71 + 8))(v2);
LABEL_15:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      char v72 = (__n128 *)swift_initStackObject();
      uint64_t v73 = OUTLINED_FUNCTION_5_5(v72, (__n128)xmmword_2272CB4A0);
      uint64_t v74 = MEMORY[0x263F8D310];
      v73[3].n128_u64[0] = 0xD000000000000012;
      v73[3].n128_u64[1] = 0x80000002272D53B0;
      OUTLINED_FUNCTION_61_1();
      *(void *)(v75 + 72) = v74;
      *(void *)(v75 + 80) = v76;
      *(void *)(v75 + 88) = 0xEC0000006E6D756CLL;
      *(void *)(v75 + 96) = v49;
      *(void *)(v75 + 104) = v50;
      *(void *)(v75 + 120) = v74;
      strcpy((char *)(v75 + 128), "label_column");
      *(void *)(v75 + 168) = v74;
      *(unsigned char *)(v75 + 141) = 0;
      *(_WORD *)(v75 + 142) = -5120;
      *(void *)(v75 + 144) = v52;
      *(void *)(v75 + 152) = v51;
      Dictionary.init(dictionaryLiteral:)();
      if (v53) {
        OUTLINED_FUNCTION_30_4((uint64_t)"start_time_column");
      }
      if (v54) {
        OUTLINED_FUNCTION_13_2();
      }
      break;
    default:
      uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v14 = v2 + v13[12];
      uint64_t v15 = (unint64_t *)(v2 + v13[16]);
      unint64_t v77 = v15[1];
      unint64_t v78 = *v15;
      uint64_t v16 = (unint64_t *)(v2 + v13[20]);
      unint64_t v79 = v16[1];
      unint64_t v80 = *v16;
      uint64_t v17 = *(void *)(v2 + v13[24] + 8);
      uint64_t v81 = *(void *)(v2 + v13[28] + 8);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
      v18(v0, v2, v3);
      v18(v1, v14, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v19 = (__n128 *)swift_allocObject();
      OUTLINED_FUNCTION_5_5(v19, (__n128)xmmword_2272CC1D0);
      unint64_t v20 = MEMORY[0x263F8D310];
      OUTLINED_FUNCTION_60_1();
      v21[6] = v22;
      v21[7] = 0xE900000000000079;
      v21[9] = v20;
      v21[10] = 1752457584;
      v21[11] = v23;
      v19[6].n128_u64[0] = URL.path.getter();
      v19[6].n128_u64[1] = v24;
      v19[7].n128_u64[1] = v20;
      v19[8].n128_u64[0] = 0x697461746F6E6E61;
      v19[8].n128_u64[1] = 0xEF656C69665F6E6FLL;
      v19[10].n128_u64[1] = v3;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v19[9]);
      OUTLINED_FUNCTION_18_3();
      v25();
      OUTLINED_FUNCTION_61_1();
      v19[11].n128_u64[0] = v26;
      v19[11].n128_u64[1] = 0xEC0000006E6D756CLL;
      v19[12].n128_u64[0] = v78;
      v19[12].n128_u64[1] = v77;
      OUTLINED_FUNCTION_59_2();
      v19[13].n128_u64[1] = v20;
      v19[14].n128_u64[0] = v27;
      v19[16].n128_u64[1] = v20;
      v19[14].n128_u64[1] = v28;
      v19[15].n128_u64[0] = v80;
      v19[15].n128_u64[1] = v79;
      OUTLINED_FUNCTION_48_1();
      Dictionary.init(dictionaryLiteral:)();
      if (v17) {
        OUTLINED_FUNCTION_30_4((uint64_t)"start_time_column");
      }
      if (v81) {
        OUTLINED_FUNCTION_13_2();
      }
      uint64_t v29 = *(void (**)(void))(v5 + 8);
      OUTLINED_FUNCTION_41_3();
      v29();
      OUTLINED_FUNCTION_41_3();
      v29();
      break;
  }
  OUTLINED_FUNCTION_12_4();
}

uint64_t MLHandActionClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  uint64_t v1 = type metadata accessor for MLHandActionClassifier.DataSource();
  uint64_t v2 = OUTLINED_FUNCTION_17(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = OUTLINED_FUNCTION_38_2();
  outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v7, v8, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v19 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
    unint64_t v20 = MEMORY[0x263F8D310];
    v19[3].n128_u64[0] = 0x74696C7073;
    v19[3].n128_u64[1] = 0xE500000000000000;
    v19[4].n128_u64[1] = v20;
    v19[5].n128_u64[0] = 1635017060;
    v19[5].n128_u64[1] = v21;
    uint64_t v22 = MLSplitStrategy.dictionary.getter();
    inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    inited[6].n128_u64[0] = v22;
    OUTLINED_FUNCTION_38_2();
    return Dictionary.init(dictionaryLiteral:)();
  }
  if (EnumCaseMultiPayload != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v23 = (__n128 *)swift_initStackObject();
    unint64_t v24 = OUTLINED_FUNCTION_5_5(v23, (__n128)xmmword_2272CB370);
    v24[4].n128_u64[1] = MEMORY[0x263F8D310];
    v24[3].n128_u64[0] = 1701736302;
    v24[3].n128_u64[1] = v25;
    return Dictionary.init(dictionaryLiteral:)();
  }
  outlined init with take of MLHandActionClassifier.DataSource(v6, v0, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = (__n128 *)swift_initStackObject();
  uint64_t v12 = OUTLINED_FUNCTION_5_5(v11, (__n128)xmmword_2272CB4D0);
  unint64_t v13 = MEMORY[0x263F8D310];
  v12[3].n128_u64[0] = 0x756F735F61746164;
  v12[3].n128_u64[1] = 0xEB00000000656372;
  v12[4].n128_u64[1] = v13;
  v12[5].n128_u64[0] = 1635017060;
  v12[5].n128_u64[1] = v14;
  MLHandActionClassifier.DataSource.dictionary.getter();
  unint64_t v16 = v15;
  v11[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v11[6].n128_u64[0] = v16;
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)();
  outlined destroy of MLHandActionClassifier.DataSource(v0, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  return v17;
}

uint64_t MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_2272CB370;
  OUTLINED_FUNCTION_47_1();
  uint64_t v0 = MEMORY[0x263F8D310];
  v1[4] = v2;
  v1[5] = 0xE90000000000006DLL;
  v1[9] = v0;
  v1[6] = 7234407;
  v1[7] = 0xE300000000000000;
  return Dictionary.init(dictionaryLiteral:)();
}

void MLHandActionClassifier.DataSource.table.getter()
{
  OUTLINED_FUNCTION_19_4();
  unint64_t v78 = 0;
  unint64_t v79 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v72 = v4;
  uint64_t v73 = v3;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v74 = v7;
  OUTLINED_FUNCTION_65();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v75 = v9;
  uint64_t v76 = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_49();
  uint64_t v71 = v10;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_58_0();
  uint64_t v12 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v77 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33();
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v67 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)&v67 - v20;
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_15();
  outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v0, v0, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      type metadata accessor for URL();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_25_0();
      v23();
      goto LABEL_22;
    case 3u:
      unint64_t v28 = *(void **)v0;
      char v29 = *(unsigned char *)(v0 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = v28;
      char v83 = v29;
      outlined copy of Result<_DataTable, Error>(v28, v29);
      OUTLINED_FUNCTION_53_2();
      uint64_t v30 = v78;
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v31, v32, (void *)0xE900000000000073);
      if (v30) {

      }
      outlined consume of Result<_DataTable, Error>(v28, v29);
      goto LABEL_15;
    case 4u:
      uint64_t v33 = *(void **)v0;
      char v34 = *(unsigned char *)(v0 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v35 = v79;
      void *v79 = v33;
      *((unsigned char *)v35 + 8) = v34;
      goto LABEL_25;
    case 5u:
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      unint64_t v37 = (uint64_t *)(v0 + *(int *)(v36 + 80));
      uint64_t v38 = (void *)v37[1];
      uint64_t v39 = *(void (**)(char *, uint64_t))(v77 + 32);
      uint64_t v40 = v12;
      uint64_t v41 = *v37;
      uint64_t v70 = v40;
      v39(v21, v0);
      MEMORY[0x22A672220](v41, v38);
      uint64_t v42 = AnyColumn.wrappedElementType.getter();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v43(v1, v76);
      uint64_t v69 = v41;
      if (v42 != MEMORY[0x263F8D310])
      {
        uint64_t v44 = v77;
        uint64_t v45 = v78;
        uint64_t v46 = v38;
        uint64_t v47 = v70;
        goto LABEL_20;
      }
      id v68 = v38;
      DataFrame.subscript.getter();
      uint64_t v53 = v74;
      uint64_t v45 = v78;
      Column<A>.parseAsJSONArrays()(v74);
      if (v45)
      {

        OUTLINED_FUNCTION_25_0();
        v54();
        __swift_storeEnumTagSinglePayload(v53, 1, 1, v76);
        uint64_t v45 = 0;
        uint64_t v55 = v53;
        uint64_t v44 = v77;
        uint64_t v46 = v68;
        uint64_t v47 = v70;
LABEL_18:
        outlined destroy of URL?(v55, &demangling cache variable for type metadata for AnyColumn?);
        goto LABEL_20;
      }
      OUTLINED_FUNCTION_25_0();
      v59();
      uint64_t v60 = v76;
      __swift_storeEnumTagSinglePayload(v53, 0, 1, v76);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v53, 1, v60);
      uint64_t v55 = v53;
      uint64_t v44 = v77;
      uint64_t v47 = v70;
      if (EnumTagSinglePayload == 1)
      {
        uint64_t v46 = v68;
        goto LABEL_18;
      }
      uint64_t v62 = v75;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v71, v55, v60);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v1, v71, v60);
      uint64_t v46 = v68;
      swift_bridgeObjectRetain();
      MEMORY[0x22A672230](v1, v69, v46);
      v43(v71, v60);
LABEL_20:
      OUTLINED_FUNCTION_18_3();
      v63();
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v80);
      if (v45)
      {
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v47);
LABEL_22:
        uint64_t v64 = v79;
        void *v79 = 0;
        *((unsigned char *)v64 + 8) = -1;
      }
      else
      {
        uint64_t v82 = v80;
        char v83 = v81;
        static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v82, v69, v46);
        uint64_t v65 = OUTLINED_FUNCTION_42_1();
        v66(v65);
        swift_bridgeObjectRelease();
        id v58 = v79;
        uint64_t v56 = v82;
        char v57 = v83;
LABEL_24:
        void *v58 = v56;
        *((unsigned char *)v58 + 8) = v57;
      }
LABEL_25:
      OUTLINED_FUNCTION_12_4();
      return;
    case 6u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      uint64_t v48 = v77;
      uint64_t v49 = v12;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v18, v0, v12);
      OUTLINED_FUNCTION_18_3();
      v50();
      uint64_t v51 = v78;
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v82);
      if (v51)
      {

        OUTLINED_FUNCTION_21_4();
        v52();
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v49);
LABEL_15:
      uint64_t v56 = v82;
      char v57 = v83;
      id v58 = v79;
      goto LABEL_24;
    default:
      uint64_t v24 = v0
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?))
                   + 48);
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      uint64_t v25 = type metadata accessor for URL();
      OUTLINED_FUNCTION_8();
      unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v27(v24, v25);
      v27(v0, v25);
      goto LABEL_22;
  }
}

uint64_t outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined init with take of MLHandActionClassifier.DataSource(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

double OUTLINED_FUNCTION_1_9()
{
  return specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, v0, (_OWORD *)(v1 - 272));
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return swift_dynamicCast();
}

double OUTLINED_FUNCTION_4_6@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL | 0x6F63000000000000;
  return specialized Dictionary.subscript.getter(v4, 0xEC0000006E6D756CLL, v2, a2);
}

__n128 *OUTLINED_FUNCTION_5_5(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1684957547;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return *(void *)(v0 - 328);
}

void OUTLINED_FUNCTION_10_3(char a1@<W8>)
{
  *(_DWORD *)(v2 - 268) = v1;
  *(void *)(v2 - 264) = 44;
  *(void *)(v2 - 256) = 0xE100000000000000;
  *(void *)(v2 - 248) = 0;
  *(void *)(v2 - 240) = 0xE000000000000000;
  *(void *)(v2 - 232) = 92;
  *(void *)(v2 - 224) = 0xE100000000000000;
  *(unsigned char *)(v2 - 216) = a1;
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return specialized Dictionary.subscript.setter(v0 + 544, 0x656D69745F646E65, 0xEF6E6D756C6F635FLL);
}

double OUTLINED_FUNCTION_16_5()
{
  return specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, v0, (_OWORD *)(v1 - 272));
}

uint64_t OUTLINED_FUNCTION_17_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_22_5()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  unint64_t v3 = *(void *)(v0 + 80);
  return outlined consume of Data._Representation(v1, v3);
}

uint64_t OUTLINED_FUNCTION_30_4@<X0>(uint64_t a1@<X8>)
{
  return specialized Dictionary.subscript.setter(v1 + 544, 0xD000000000000011, (a1 - 32) | 0x8000000000000000);
}

double OUTLINED_FUNCTION_34_2()
{
  return specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, v0, (_OWORD *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_35_4()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_50_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  return 0x687469726F676C61;
}

void OUTLINED_FUNCTION_54_2(uint64_t a1@<X8>)
{
  *(void *)(v2 - 184) = a1;
  *(void *)(v2 - 176) = 10;
  *(void *)(v2 - 168) = v1;
  *(void *)(v2 - 160) = 0;
  *(void *)(v2 - 152) = 0;
}

void OUTLINED_FUNCTION_55_2(int a1@<W8>)
{
  *(_DWORD *)(v1 - 140) = a1;
  *(void *)(v1 - 136) = 0;
}

void OUTLINED_FUNCTION_56_2(char a1@<W8>)
{
  *(_DWORD *)(v3 - 212) = v1;
  *(void *)(v3 - 208) = 34;
  *(void *)(v3 - 200) = v2;
  *(unsigned char *)(v3 - 192) = a1;
}

double OUTLINED_FUNCTION_57_2@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + 40);
  return specialized Dictionary.subscript.getter(a1, a2, v5, a3);
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  return 0;
}

void **assignWithCopy for MLDecisionTreeClassifier.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = *a2;
      char v8 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((unsigned char *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLDecisionTreeClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLDecisionTreeClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *assignWithTake for MLDecisionTreeClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLDecisionTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.ValidationData.asTable()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = (uint64_t *)(v16 - v15);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v2, v16 - v15);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v19 = *v17;
      char v20 = *((unsigned char *)v17 + 8);
      goto LABEL_7;
    case 2:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v4);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v10, v13, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(1, (uint64_t)&v27);
      uint64_t v24 = OUTLINED_FUNCTION_4_1();
      uint64_t result = v25(v24);
      uint64_t v19 = v27;
      char v20 = v28;
LABEL_7:
      *(void *)a1 = v19;
      *(unsigned char *)(a1 + 8) = v20;
      break;
    case 3:
      uint64_t v21 = MEMORY[0x22A6764B0](0);
      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x22709A798);
      }
      uint64_t v22 = v21;
      type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t result = (uint64_t)_DataTable.init(impl:)(v23);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a3;
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v66 = a1;
  uint64_t v61 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  char v57 = (char *)(v13 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v56 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v56 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  MEMORY[0x270FA5388](v21 - 8);
  OUTLINED_FUNCTION_33();
  uint64_t v24 = v22 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_3_0();
  uint64_t v31 = (uint64_t *)(v30 - v29);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v4, v30 - v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v47 = *v31;
      char v48 = *((unsigned char *)v31 + 8);
      uint64_t v49 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      *(void *)&long long v63 = v47;
      BYTE8(v63) = v48;
      uint64_t v50 = v60;
      DataFrame.init(_:)((uint64_t)&v63, v60);
      uint64_t v43 = v50;
      uint64_t v44 = 0;
      uint64_t v46 = v49;
      goto LABEL_10;
    case 2u:
      uint64_t v38 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 32);
      uint64_t v39 = v31;
      uint64_t v40 = v61;
      v38((uint64_t)v10, v39, v61);
      if (DataFrameProtocol.isEmpty.getter())
      {
        (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v40);
        uint64_t v41 = OUTLINED_FUNCTION_1_3();
        v42(v41);
        uint64_t v43 = v60;
        uint64_t v44 = 1;
      }
      else
      {
        uint64_t v51 = OUTLINED_FUNCTION_1_3();
        v52(v51);
        uint64_t v53 = v60;
        v38(v60, v10, v40);
        uint64_t v43 = v53;
        uint64_t v44 = 0;
      }
      uint64_t v46 = v40;
      goto LABEL_10;
    case 3u:
      uint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      uint64_t v43 = v60;
      uint64_t v44 = 1;
      uint64_t v46 = v45;
LABEL_10:
      uint64_t result = __swift_storeEnumTagSinglePayload(v43, v44, 1, v46);
      break;
    default:
      char v32 = *((unsigned char *)v31 + 16);
      char v33 = *((unsigned char *)v31 + 17);
      long long v63 = *(_OWORD *)v31;
      char v64 = v32;
      char v65 = v33;
      DataFrame.randomSplit(strategy:)((uint64_t)v27, (uint64_t)v20, (uint64_t)&v63);
      uint64_t v35 = v58;
      uint64_t v34 = v59;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v36(v18, v20, v59);
      DataFrame.init(_:)();
      outlined init with copy of DataFrame.Slice?((uint64_t)v27, v24);
      if (__swift_getEnumTagSinglePayload(v24, 1, v34) == 1)
      {
        __swift_storeEnumTagSinglePayload(v60, 1, 1, v61);
        unint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v18, v24, v34);
        v36(v57, v18, v34);
        uint64_t v55 = v60;
        DataFrame.init(_:)();
        unint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
        v37(v18, v34);
        __swift_storeEnumTagSinglePayload(v55, 0, 1, v61);
      }
      v37(v20, v34);
      uint64_t result = outlined destroy of DataFrame.Slice?((uint64_t)v27);
      break;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier.PersistentParameters(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v19 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        break;
      case 3u:
        char v20 = *a2;
        char v21 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v21);
        *(void *)a1 = v20;
        a1[8] = v21;
        uint64_t v22 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v22;
        uint64_t v23 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v23;
        uint64_t v24 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v25 = *a2;
        char v26 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v26);
        *(void *)a1 = v25;
        a1[8] = v26;
        uint64_t v27 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v27;
        uint64_t v28 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v29 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
        uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v31 = v30[12];
        char v32 = &a1[v31];
        char v33 = (uint64_t *)((char *)a2 + v31);
        uint64_t v35 = *v33;
        uint64_t v34 = v33[1];
        *(void *)char v32 = v35;
        *((void *)v32 + 1) = v34;
        uint64_t v36 = v30[16];
        unint64_t v37 = &a1[v36];
        uint64_t v38 = (char **)((char *)a2 + v36);
        uint64_t v39 = v38[1];
        *(void *)unint64_t v37 = *v38;
        *((void *)v37 + 1) = v39;
        uint64_t v40 = v30[20];
        uint64_t v41 = &a1[v40];
        uint64_t v42 = (char **)((char *)a2 + v40);
        uint64_t v43 = v42[1];
        *(void *)uint64_t v41 = *v42;
        *((void *)v41 + 1) = v43;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v44 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v44 - 8) + 16))(a1, a2, v44);
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v46 = *(int *)(v45 + 48);
        uint64_t v47 = &a1[v46];
        char v48 = (uint64_t *)((char *)a2 + v46);
        uint64_t v50 = *v48;
        uint64_t v49 = v48[1];
        *(void *)uint64_t v47 = v50;
        *((void *)v47 + 1) = v49;
        uint64_t v51 = *(int *)(v45 + 64);
        uint64_t v52 = &a1[v51];
        uint64_t v53 = (char **)((char *)a2 + v51);
        uint64_t v54 = v53[1];
        *(void *)uint64_t v52 = *v53;
        *((void *)v52 + 1) = v54;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for URL();
        uint64_t v8 = *(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16);
        v8(a1, a2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v8(&a1[v9[12]], (char **)((char *)a2 + v9[12]), v7);
        uint64_t v10 = v9[16];
        uint64_t v11 = &a1[v10];
        uint64_t v12 = (char **)((char *)a2 + v10);
        uint64_t v13 = v12[1];
        *(void *)uint64_t v11 = *v12;
        *((void *)v11 + 1) = v13;
        uint64_t v14 = v9[20];
        uint64_t v15 = &a1[v14];
        uint64_t v16 = (char **)((char *)a2 + v14);
        uint64_t v17 = v16[1];
        *(void *)uint64_t v15 = *v16;
        *((void *)v15 + 1) = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v55 = a3[5];
    uint64_t v56 = &a1[v55];
    uint64_t v57 = (uint64_t)a2 + v55;
    uint64_t v58 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v69 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16))(v56, v57, v69);
          break;
        case 3u:
          id v70 = *(id *)v57;
          char v71 = *(unsigned char *)(v57 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v57, v71);
          *(void *)uint64_t v56 = v70;
          v56[8] = v71;
          uint64_t v72 = *(void *)(v57 + 24);
          *((void *)v56 + 2) = *(void *)(v57 + 16);
          *((void *)v56 + 3) = v72;
          uint64_t v73 = *(void *)(v57 + 40);
          *((void *)v56 + 4) = *(void *)(v57 + 32);
          *((void *)v56 + 5) = v73;
          uint64_t v74 = *(void *)(v57 + 48);
          uint64_t v75 = *(void *)(v57 + 56);
          *((void *)v56 + 6) = v74;
          *((void *)v56 + 7) = v75;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          id v76 = *(id *)v57;
          char v77 = *(unsigned char *)(v57 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v57, v77);
          *(void *)uint64_t v56 = v76;
          v56[8] = v77;
          uint64_t v78 = *(void *)(v57 + 24);
          *((void *)v56 + 2) = *(void *)(v57 + 16);
          *((void *)v56 + 3) = v78;
          uint64_t v79 = *(void *)(v57 + 32);
          uint64_t v80 = *(void *)(v57 + 40);
          *((void *)v56 + 4) = v79;
          *((void *)v56 + 5) = v80;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 5u:
          uint64_t v81 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v81 - 8) + 16))(v56, v57, v81);
          uint64_t v82 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v83 = v82[12];
          uint64_t v84 = &v56[v83];
          uint64_t v85 = (uint64_t *)(v57 + v83);
          uint64_t v87 = *v85;
          uint64_t v86 = v85[1];
          *(void *)uint64_t v84 = v87;
          *((void *)v84 + 1) = v86;
          uint64_t v88 = v82[16];
          uint64_t v89 = &v56[v88];
          uint64_t v90 = (void *)(v57 + v88);
          uint64_t v91 = v90[1];
          *(void *)uint64_t v89 = *v90;
          *((void *)v89 + 1) = v91;
          uint64_t v92 = v82[20];
          id v93 = &v56[v92];
          unsigned __int8 v94 = (void *)(v57 + v92);
          uint64_t v95 = v94[1];
          *(void *)id v93 = *v94;
          *((void *)v93 + 1) = v95;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v96 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(v56, v57, v96);
          uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          uint64_t v98 = *(int *)(v97 + 48);
          uint64_t v99 = &v56[v98];
          uint64_t v100 = (uint64_t *)(v57 + v98);
          uint64_t v102 = *v100;
          uint64_t v101 = v100[1];
          *(void *)uint64_t v99 = v102;
          *((void *)v99 + 1) = v101;
          uint64_t v103 = *(int *)(v97 + 64);
          uint64_t v104 = &v56[v103];
          id v105 = (void *)(v57 + v103);
          uint64_t v106 = v105[1];
          *(void *)uint64_t v104 = *v105;
          *((void *)v104 + 1) = v106;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v59 = type metadata accessor for URL();
          long long v109 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
          v109(v56, v57, v59);
          uint64_t v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v109(&v56[v60[12]], v57 + v60[12], v59);
          uint64_t v61 = v60[16];
          uint64_t v62 = &v56[v61];
          long long v63 = (void *)(v57 + v61);
          uint64_t v64 = v63[1];
          *(void *)uint64_t v62 = *v63;
          *((void *)v62 + 1) = v64;
          uint64_t v65 = v60[20];
          uint64_t v66 = &v56[v65];
          uint64_t v67 = (void *)(v57 + v65);
          uint64_t v68 = v67[1];
          *(void *)uint64_t v66 = *v67;
          *((void *)v66 + 1) = v68;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v56, (const void *)v57, *(void *)(*(void *)(v58 - 8) + 64));
    }
    uint64_t v107 = a3[7];
    *(void *)&a1[a3[6]] = *(char **)((char *)a2 + a3[6]);
    *(void *)&a1[v107] = *(char **)((char *)a2 + v107);
    *(void *)&a1[a3[8]] = *(char **)((char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t destroy for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MLHandPoseClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v5 = type metadata accessor for URL();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v6(a1 + *(int *)(v7 + 48), v5);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1u:
    case 2u:
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 4u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 5u:
      uint64_t v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 6u:
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        uint64_t v14 = type metadata accessor for URL();
        uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
        v15(v10, v14);
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v15(v10 + *(int *)(v16 + 48), v14);
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 1:
      case 2:
        uint64_t v12 = type metadata accessor for URL();
        uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
        return v13(v10, v12);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(unsigned char *)(v10 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(unsigned char *)(v10 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 5:
        uint64_t v17 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v10, v17);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      case 6:
        uint64_t v18 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v10, v18);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease();
LABEL_20:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t initializeWithCopy for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for MLHandPoseClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v17 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      break;
    case 3u:
      id v18 = *(id *)a2;
      char v19 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v19);
      *(void *)a1 = v18;
      *(unsigned char *)(a1 + 8) = v19;
      uint64_t v20 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v20;
      uint64_t v21 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v21;
      uint64_t v22 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      id v23 = *(id *)a2;
      char v24 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v24);
      *(void *)a1 = v23;
      *(unsigned char *)(a1 + 8) = v24;
      uint64_t v25 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v25;
      uint64_t v26 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 5u:
      uint64_t v27 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
      uint64_t v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v29 = v28[12];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (uint64_t *)(a2 + v29);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      *uint64_t v30 = v33;
      v30[1] = v32;
      uint64_t v34 = v28[16];
      uint64_t v35 = (void *)(a1 + v34);
      uint64_t v36 = (void *)(a2 + v34);
      uint64_t v37 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v28[20];
      uint64_t v39 = (void *)(a1 + v38);
      uint64_t v40 = (void *)(a2 + v38);
      uint64_t v41 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 6u:
      uint64_t v42 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v44 = *(int *)(v43 + 48);
      uint64_t v45 = (void *)(a1 + v44);
      uint64_t v46 = (uint64_t *)(a2 + v44);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      *uint64_t v45 = v48;
      v45[1] = v47;
      uint64_t v49 = *(int *)(v43 + 64);
      uint64_t v50 = (void *)(a1 + v49);
      uint64_t v51 = (void *)(a2 + v49);
      uint64_t v52 = v51[1];
      *uint64_t v50 = *v51;
      v50[1] = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v7(a1 + v8[12], a2 + v8[12], v6);
      uint64_t v9 = v8[16];
      uint64_t v10 = (void *)(a1 + v9);
      uint64_t v11 = (void *)(a2 + v9);
      uint64_t v12 = v11[1];
      *uint64_t v10 = *v11;
      v10[1] = v12;
      uint64_t v13 = v8[20];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (void *)(a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v53 = a3[5];
  uint64_t v54 = (char *)(a1 + v53);
  uint64_t v55 = a2 + v53;
  uint64_t v56 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v67 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v54, v55, v67);
        break;
      case 3u:
        id v68 = *(id *)v55;
        char v69 = *(unsigned char *)(v55 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)v55, v69);
        *(void *)uint64_t v54 = v68;
        v54[8] = v69;
        uint64_t v70 = *(void *)(v55 + 24);
        *((void *)v54 + 2) = *(void *)(v55 + 16);
        *((void *)v54 + 3) = v70;
        uint64_t v71 = *(void *)(v55 + 40);
        *((void *)v54 + 4) = *(void *)(v55 + 32);
        *((void *)v54 + 5) = v71;
        uint64_t v72 = *(void *)(v55 + 48);
        uint64_t v73 = *(void *)(v55 + 56);
        *((void *)v54 + 6) = v72;
        *((void *)v54 + 7) = v73;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v74 = *(id *)v55;
        char v75 = *(unsigned char *)(v55 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)v55, v75);
        *(void *)uint64_t v54 = v74;
        v54[8] = v75;
        uint64_t v76 = *(void *)(v55 + 24);
        *((void *)v54 + 2) = *(void *)(v55 + 16);
        *((void *)v54 + 3) = v76;
        uint64_t v77 = *(void *)(v55 + 32);
        uint64_t v78 = *(void *)(v55 + 40);
        *((void *)v54 + 4) = v77;
        *((void *)v54 + 5) = v78;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v79 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v54, v55, v79);
        uint64_t v80 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v81 = v80[12];
        uint64_t v82 = &v54[v81];
        uint64_t v83 = (uint64_t *)(v55 + v81);
        uint64_t v85 = *v83;
        uint64_t v84 = v83[1];
        *(void *)uint64_t v82 = v85;
        *((void *)v82 + 1) = v84;
        uint64_t v86 = v80[16];
        uint64_t v87 = &v54[v86];
        uint64_t v88 = (void *)(v55 + v86);
        uint64_t v89 = v88[1];
        *(void *)uint64_t v87 = *v88;
        *((void *)v87 + 1) = v89;
        uint64_t v90 = v80[20];
        uint64_t v91 = &v54[v90];
        uint64_t v92 = (void *)(v55 + v90);
        uint64_t v93 = v92[1];
        *(void *)uint64_t v91 = *v92;
        *((void *)v91 + 1) = v93;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v94 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v94 - 8) + 16))(v54, v55, v94);
        uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v96 = *(int *)(v95 + 48);
        uint64_t v97 = &v54[v96];
        uint64_t v98 = (uint64_t *)(v55 + v96);
        uint64_t v100 = *v98;
        uint64_t v99 = v98[1];
        *(void *)uint64_t v97 = v100;
        *((void *)v97 + 1) = v99;
        uint64_t v101 = *(int *)(v95 + 64);
        uint64_t v102 = &v54[v101];
        uint64_t v103 = (void *)(v55 + v101);
        uint64_t v104 = v103[1];
        *(void *)uint64_t v102 = *v103;
        *((void *)v102 + 1) = v104;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v57 = type metadata accessor for URL();
        uint64_t v107 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16);
        v107(v54, v55, v57);
        uint64_t v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v107(&v54[v58[12]], v55 + v58[12], v57);
        uint64_t v59 = v58[16];
        uint64_t v60 = &v54[v59];
        uint64_t v61 = (void *)(v55 + v59);
        uint64_t v62 = v61[1];
        *(void *)uint64_t v60 = *v61;
        *((void *)v60 + 1) = v62;
        uint64_t v63 = v58[20];
        uint64_t v64 = &v54[v63];
        uint64_t v65 = (void *)(v55 + v63);
        uint64_t v66 = v65[1];
        *(void *)uint64_t v64 = *v65;
        *((void *)v64 + 1) = v66;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v54, (const void *)v55, *(void *)(*(void *)(v56 - 8) + 64));
  }
  uint64_t v105 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v105) = *(void *)(a2 + v105);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithCopy for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.DataSource(a1, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        break;
      case 3u:
        id v16 = *(id *)a2;
        char v17 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v17);
        *(void *)a1 = v16;
        *(unsigned char *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v18 = *(id *)a2;
        char v19 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v19);
        *(void *)a1 = v18;
        *(unsigned char *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v20 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v22 = v21[12];
        id v23 = (void *)(a1 + v22);
        char v24 = (void *)(a2 + v22);
        *id v23 = *v24;
        v23[1] = v24[1];
        uint64_t v25 = v21[16];
        uint64_t v26 = (void *)(a1 + v25);
        uint64_t v27 = (void *)(a2 + v25);
        *uint64_t v26 = *v27;
        v26[1] = v27[1];
        uint64_t v28 = v21[20];
        uint64_t v29 = (void *)(a1 + v28);
        uint64_t v30 = (void *)(a2 + v28);
        *uint64_t v29 = *v30;
        v29[1] = v30[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v31 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v33 = *(int *)(v32 + 48);
        uint64_t v34 = (void *)(a1 + v33);
        uint64_t v35 = (void *)(a2 + v33);
        *uint64_t v34 = *v35;
        v34[1] = v35[1];
        uint64_t v36 = *(int *)(v32 + 64);
        uint64_t v37 = (void *)(a1 + v36);
        uint64_t v38 = (void *)(a2 + v36);
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v7(a1 + v8[12], a2 + v8[12], v6);
        uint64_t v9 = v8[16];
        uint64_t v10 = (void *)(a1 + v9);
        uint64_t v11 = (void *)(a2 + v9);
        *uint64_t v10 = *v11;
        v10[1] = v11[1];
        uint64_t v12 = v8[20];
        uint64_t v13 = (void *)(a1 + v12);
        uint64_t v14 = (void *)(a2 + v12);
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = a3[5];
    uint64_t v40 = (char *)(a1 + v39);
    uint64_t v41 = a2 + v39;
    outlined destroy of MLHandPoseClassifier.DataSource(a1 + v39, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v42 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v51 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v40, v41, v51);
          break;
        case 3u:
          id v52 = *(id *)v41;
          char v53 = *(unsigned char *)(v41 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v41, v53);
          *(void *)uint64_t v40 = v52;
          v40[8] = v53;
          *((void *)v40 + 2) = *(void *)(v41 + 16);
          *((void *)v40 + 3) = *(void *)(v41 + 24);
          *((void *)v40 + 4) = *(void *)(v41 + 32);
          *((void *)v40 + 5) = *(void *)(v41 + 40);
          *((void *)v40 + 6) = *(void *)(v41 + 48);
          *((void *)v40 + 7) = *(void *)(v41 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          id v54 = *(id *)v41;
          char v55 = *(unsigned char *)(v41 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)v41, v55);
          *(void *)uint64_t v40 = v54;
          v40[8] = v55;
          *((void *)v40 + 2) = *(void *)(v41 + 16);
          *((void *)v40 + 3) = *(void *)(v41 + 24);
          *((void *)v40 + 4) = *(void *)(v41 + 32);
          *((void *)v40 + 5) = *(void *)(v41 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 5u:
          uint64_t v56 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(v40, v41, v56);
          uint64_t v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v58 = v57[12];
          uint64_t v59 = &v40[v58];
          uint64_t v60 = (void *)(v41 + v58);
          *(void *)uint64_t v59 = *v60;
          *((void *)v59 + 1) = v60[1];
          uint64_t v61 = v57[16];
          uint64_t v62 = &v40[v61];
          uint64_t v63 = (void *)(v41 + v61);
          *(void *)uint64_t v62 = *v63;
          *((void *)v62 + 1) = v63[1];
          uint64_t v64 = v57[20];
          uint64_t v65 = &v40[v64];
          uint64_t v66 = (void *)(v41 + v64);
          *(void *)uint64_t v65 = *v66;
          *((void *)v65 + 1) = v66[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v67 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v40, v41, v67);
          uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          uint64_t v69 = *(int *)(v68 + 48);
          uint64_t v70 = &v40[v69];
          uint64_t v71 = (void *)(v41 + v69);
          *(void *)uint64_t v70 = *v71;
          *((void *)v70 + 1) = v71[1];
          uint64_t v72 = *(int *)(v68 + 64);
          uint64_t v73 = &v40[v72];
          id v74 = (void *)(v41 + v72);
          *(void *)uint64_t v73 = *v74;
          *((void *)v73 + 1) = v74[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v43 = type metadata accessor for URL();
          uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16);
          v76(v40, v41, v43);
          uint64_t v44 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v76(&v40[v44[12]], v41 + v44[12], v43);
          uint64_t v45 = v44[16];
          uint64_t v46 = &v40[v45];
          uint64_t v47 = (void *)(v41 + v45);
          *(void *)uint64_t v46 = *v47;
          *((void *)v46 + 1) = v47[1];
          uint64_t v48 = v44[20];
          uint64_t v49 = &v40[v48];
          uint64_t v50 = (void *)(v41 + v48);
          *(void *)uint64_t v49 = *v50;
          *((void *)v49 + 1) = v50[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v40, (const void *)v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
  }
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t outlined destroy of MLHandPoseClassifier.DataSource(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

char *initializeWithTake for MLHandPoseClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLHandPoseClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v8(&a1[v9[12]], &a2[v9[12]], v7);
      *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
      *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
      goto LABEL_7;
    case 1u:
    case 2u:
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      goto LABEL_7;
    case 5u:
      uint64_t v11 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
      *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
      *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
      goto LABEL_7;
    case 6u:
      uint64_t v13 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
      *(_OWORD *)&a1[*(int *)(v14 + 64)] = *(_OWORD *)&a2[*(int *)(v14 + 64)];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v15 = a3[5];
  id v16 = &a1[v15];
  char v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v19 = type metadata accessor for URL();
        uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
        v28(v16, v17, v19);
        uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v28(&v16[v20[12]], &v17[v20[12]], v19);
        *(_OWORD *)&v16[v20[16]] = *(_OWORD *)&v17[v20[16]];
        *(_OWORD *)&v16[v20[20]] = *(_OWORD *)&v17[v20[20]];
        goto LABEL_16;
      case 1u:
      case 2u:
        uint64_t v21 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v16, v17, v21);
        goto LABEL_16;
      case 5u:
        uint64_t v22 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v16, v17, v22);
        id v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v16[v23[12]] = *(_OWORD *)&v17[v23[12]];
        *(_OWORD *)&v16[v23[16]] = *(_OWORD *)&v17[v23[16]];
        *(_OWORD *)&v16[v23[20]] = *(_OWORD *)&v17[v23[20]];
        goto LABEL_16;
      case 6u:
        uint64_t v24 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v16, v17, v24);
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&v16[*(int *)(v25 + 48)] = *(_OWORD *)&v17[*(int *)(v25 + 48)];
        *(_OWORD *)&v16[*(int *)(v25 + 64)] = *(_OWORD *)&v17[*(int *)(v25 + 64)];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  uint64_t v26 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v26] = *(void *)&a2[v26];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

char *assignWithTake for MLHandPoseClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)a1, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL();
        uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v8(&a1[v9[12]], &a2[v9[12]], v7);
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
        goto LABEL_8;
      case 1u:
      case 2u:
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_8;
      case 5u:
        uint64_t v11 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
        *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
        *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
        goto LABEL_8;
      case 6u:
        uint64_t v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
        *(_OWORD *)&a1[*(int *)(v14 + 64)] = *(_OWORD *)&a2[*(int *)(v14 + 64)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    uint64_t v15 = a3[5];
    id v16 = &a1[v15];
    char v17 = &a2[v15];
    outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)&a1[v15], (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v18 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v19 = type metadata accessor for URL();
          uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
          v28(v16, v17, v19);
          uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v28(&v16[v20[12]], &v17[v20[12]], v19);
          *(_OWORD *)&v16[v20[16]] = *(_OWORD *)&v17[v20[16]];
          *(_OWORD *)&v16[v20[20]] = *(_OWORD *)&v17[v20[20]];
          goto LABEL_17;
        case 1u:
        case 2u:
          uint64_t v21 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v16, v17, v21);
          goto LABEL_17;
        case 5u:
          uint64_t v22 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v16, v17, v22);
          id v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v16[v23[12]] = *(_OWORD *)&v17[v23[12]];
          *(_OWORD *)&v16[v23[16]] = *(_OWORD *)&v17[v23[16]];
          *(_OWORD *)&v16[v23[20]] = *(_OWORD *)&v17[v23[20]];
          goto LABEL_17;
        case 6u:
          uint64_t v24 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v16, v17, v24);
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&v16[*(int *)(v25 + 48)] = *(_OWORD *)&v17[*(int *)(v25 + 48)];
          *(_OWORD *)&v16[*(int *)(v25 + 64)] = *(_OWORD *)&v17[*(int *)(v25 + 64)];
LABEL_17:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v16, v17, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
  }
  uint64_t v26 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v26] = *(void *)&a2[v26];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22709D6F0);
}

uint64_t sub_22709D6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22709D780);
}

uint64_t sub_22709D780(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata accessor for MLHandPoseClassifier.PersistentParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLHandPoseClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier.PersistentParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MLHandPoseClassifier.PersistentParameters()
{
  uint64_t result = type metadata accessor for MLHandPoseClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t MLHandPoseClassifier.PersistentParameters.init(sessionDirectory:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.ModelParameters.ValidationData?);
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v103 = v8;
  uint64_t v106 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v102 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v105 = v13;
  uint64_t v108 = type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33_0();
  uint64_t v104 = v15;
  uint64_t v113 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_49();
  uint64_t v107 = v19;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v20);
  long long v109 = (char *)&v90 - v21;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v22);
  uint64_t v110 = (char *)&v90 - v23;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_47_2();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_31_2();
  uint64_t v26 = type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  uint64_t v27 = *(int *)(v26 + 24);
  *(void *)((char *)a2 + v27) = 32;
  uint64_t v28 = *(int *)(v26 + 28);
  int v111 = a2;
  *(void *)((char *)a2 + v28) = 80;
  OUTLINED_FUNCTION_11_2();
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_20_1();
  URL.appendingPathComponent(_:)();
  uint64_t v29 = v112;
  uint64_t v30 = Data.init(contentsOf:options:)();
  if (v29)
  {
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    uint64_t v33 = v113;
    v32(a1, v113);
    v32(v3, v33);
    return ((uint64_t (*)(uint64_t, uint64_t))v32)(v2, v33);
  }
  uint64_t v95 = v28;
  uint64_t v96 = v27;
  uint64_t v112 = a1;
  uint64_t v94 = v26;
  uint64_t v97 = v17;
  uint64_t v98 = 0;
  uint64_t v101 = v2;
  uint64_t v35 = v17 + 8;
  uint64_t v36 = *(void (**)(void))(v17 + 8);
  uint64_t v37 = v30;
  unint64_t v38 = v31;
  uint64_t v39 = v113;
  ((void (*)(uint64_t, uint64_t))v36)(v3, v113);
  uint64_t v40 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v119 = 0;
  id v42 = objc_msgSend(v40, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v119);

  id v43 = (id)v119;
  if (!v42)
  {
    uint64_t v62 = v43;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v37, v38);
    OUTLINED_FUNCTION_7_7();
    v36();
    OUTLINED_FUNCTION_7_7();
    return ((uint64_t (*)(void))v36)();
  }
  uint64_t v99 = v37;
  unint64_t v100 = v38;
  uint64_t v44 = v36;
  uint64_t v45 = (char *)v39;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v143, (uint64_t)&v119);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_96();
    *uint64_t v63 = 0xD000000000000037;
    v63[1] = v64;
    OUTLINED_FUNCTION_8_4(v65, (uint64_t)v63);
    outlined consume of Data._Representation(v99, v100);
    ((void (*)(uint64_t, uint64_t))v36)(v112, v39);
    uint64_t v66 = OUTLINED_FUNCTION_22_6();
    return ((uint64_t (*)(uint64_t))v36)(v66);
  }
  uint64_t v47 = v35;
  uint64_t v48 = v141;
  specialized Dictionary.subscript.getter(0x69735F6863746162, 0xEA0000000000657ALL, v141, &v119);
  OUTLINED_FUNCTION_46_3();
  if (!v49)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v119, &demangling cache variable for type metadata for Any?);
LABEL_22:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v67 = OUTLINED_FUNCTION_85();
    *uint64_t v68 = v39 + 8;
    v68[1] = 0x80000002272D5450;
    OUTLINED_FUNCTION_8_4(v67, (uint64_t)v68);
    outlined consume of Data._Representation(v99, v100);
    ((void (*)(uint64_t, char *))v44)(v112, v45);
    uint64_t v69 = OUTLINED_FUNCTION_22_6();
    return ((uint64_t (*)(uint64_t))v44)(v69);
  }
  if ((OUTLINED_FUNCTION_21_5() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v39 = v141;
  specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v48, &v119);
  if (!v121) {
    goto LABEL_19;
  }
  if ((OUTLINED_FUNCTION_21_5() & 1) == 0)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v50 = v141;
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_20_1();
  specialized Dictionary.subscript.getter(v51, v52, v48, &v119);
  if (!v121)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)&v119, &demangling cache variable for type metadata for Any?);
LABEL_21:
    OUTLINED_FUNCTION_46_3();
    goto LABEL_22;
  }
  if ((OUTLINED_FUNCTION_21_5() & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v91 = v141;
  char v53 = v111;
  *(void *)((char *)v111 + v96) = v39;
  *(void *)((char *)v53 + v95) = v50;
  uint64_t v96 = v48;
  URL.appendingPathComponent(_:)();
  specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v96, &v141);
  uint64_t v92 = v46;
  uint64_t v93 = v47;
  if (v142)
  {
    char v54 = swift_dynamicCast();
    uint64_t v55 = v97;
    uint64_t v56 = v109;
    if (v54)
    {
      uint64_t v57 = *(void (**)(void))(v97 + 16);
      OUTLINED_FUNCTION_18_3();
      v57();
      uint64_t v58 = v105;
      MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)();
      if (__swift_getEnumTagSinglePayload(v58, 1, v108) == 1)
      {
        swift_bridgeObjectRelease();
        outlined destroy of URL?(v58, &demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_40_1();
        *uint64_t v60 = v59 - 2;
        v60[1] = 0x80000002272D5500;
        OUTLINED_FUNCTION_8_4(v61, (uint64_t)v60);
        outlined consume of Data._Representation(v99, v100);
        OUTLINED_FUNCTION_10_4();
        v44();
        OUTLINED_FUNCTION_10_4();
        v44();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v143);
        OUTLINED_FUNCTION_10_4();
        return ((uint64_t (*)(void))v44)();
      }
      uint64_t v70 = (char *)type metadata accessor for MLHandPoseClassifier.DataSource;
      uint64_t v74 = v58;
      uint64_t v75 = v104;
      outlined init with take of MLHandPoseClassifier.DataSource(v74, v104, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
      outlined init with take of MLHandPoseClassifier.DataSource(v75, (uint64_t)v111, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
      goto LABEL_29;
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v141, &demangling cache variable for type metadata for Any?);
    uint64_t v55 = v97;
    uint64_t v56 = v109;
  }
  uint64_t v57 = *(void (**)(void))(v55 + 16);
  uint64_t v70 = v45;
  OUTLINED_FUNCTION_18_3();
  v57();
  char v114 = 1;
  LOBYTE(v119) = 1;
  *(_DWORD *)((char *)&v119 + 1) = *(_DWORD *)v118;
  DWORD1(v119) = *(_DWORD *)&v118[3];
  *((void *)&v119 + 1) = 44;
  unint64_t v120 = 0xE100000000000000;
  uint64_t v121 = 0;
  unint64_t v122 = 0xE000000000000000;
  uint64_t v123 = 92;
  unint64_t v124 = 0xE100000000000000;
  char v125 = 1;
  *(_DWORD *)uint64_t v126 = *(_DWORD *)v117;
  *(_DWORD *)&v126[3] = *(_DWORD *)&v117[3];
  uint64_t v127 = 34;
  unint64_t v128 = 0xE100000000000000;
  char v129 = 1;
  *(_DWORD *)uint64_t v130 = *(_DWORD *)v116;
  *(_DWORD *)&v130[3] = *(_DWORD *)&v116[3];
  uint64_t v131 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v132 = 10;
  unint64_t v133 = 0xE100000000000000;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  char v136 = 1;
  *(_DWORD *)uint64_t v137 = *(_DWORD *)v115;
  *(_DWORD *)&v137[3] = *(_DWORD *)&v115[3];
  uint64_t v138 = 0;
  uint64_t v71 = v98;
  MLDataTable.init(contentsOf:options:)(v56, &v119, (uint64_t)&v139);
  uint64_t v98 = v71;
  if (v71)
  {
    outlined consume of Data._Representation(v99, v100);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_4();
    v44();
    OUTLINED_FUNCTION_10_4();
    v44();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v143);
LABEL_26:
    OUTLINED_FUNCTION_10_4();
    return ((uint64_t (*)(void))v44)();
  }
  char v72 = v140;
  uint64_t v73 = v111;
  *int v111 = v139;
  *((unsigned char *)v73 + 8) = v72;
  v73[2] = 0x7461506567616D69;
  v73[3] = 0xE900000000000068;
  v73[4] = 0x6C6562616CLL;
  v73[5] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
LABEL_29:
  uint64_t v76 = v96;
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v96, &v119);
  if (!v121)
  {
    outlined destroy of URL?((uint64_t)&v119, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  if ((OUTLINED_FUNCTION_33_3() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_46_3();
    uint64_t v84 = v94;
    uint64_t v83 = v111;
    swift_storeEnumTagMultiPayload();
    goto LABEL_35;
  }
  OUTLINED_FUNCTION_18_3();
  v57();
  uint64_t v77 = v103;
  MLHandPoseClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)();
  if (__swift_getEnumTagSinglePayload(v77, 1, v106) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v77, &demangling cache variable for type metadata for MLHandPoseClassifier.ModelParameters.ValidationData?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    int v78 = 0;
    OUTLINED_FUNCTION_40_1();
    void *v79 = v80;
    OUTLINED_FUNCTION_96();
    uint64_t v83 = v111;
    goto LABEL_41;
  }
  uint64_t v70 = (char *)type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData;
  uint64_t v89 = v102;
  outlined init with take of MLHandPoseClassifier.DataSource(v77, v102, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v84 = v94;
  uint64_t v83 = v111;
  outlined init with take of MLHandPoseClassifier.DataSource(v89, (uint64_t)v111 + *(int *)(v94 + 20), (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_46_3();
  uint64_t v76 = v96;
LABEL_35:
  *(void *)((char *)v83 + *(int *)(v84 + 32)) = v91;
  uint64_t v85 = OUTLINED_FUNCTION_51_2();
  specialized Dictionary.subscript.getter(v85, v86, v76, v87);
  swift_bridgeObjectRelease();
  if (v121)
  {
    if (OUTLINED_FUNCTION_33_3())
    {
      MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v141, (char *)&v119);
      if (v119 != 1)
      {
        outlined consume of Data._Representation(v99, v100);
        OUTLINED_FUNCTION_10_4();
        v44();
        OUTLINED_FUNCTION_10_4();
        v44();
        OUTLINED_FUNCTION_22_6();
        goto LABEL_26;
      }
    }
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v119, &demangling cache variable for type metadata for Any?);
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  *uint64_t v88 = v70 - 12;
  OUTLINED_FUNCTION_96();
  int v78 = 1;
LABEL_41:
  *(void *)(v81 + 8) = v82;
  *(_OWORD *)(v81 + 16) = 0u;
  *(_OWORD *)(v81 + 32) = 0u;
  *(unsigned char *)(v81 + 48) = 0;
  swift_willThrow();
  outlined consume of Data._Representation(v99, v100);
  OUTLINED_FUNCTION_10_4();
  v44();
  OUTLINED_FUNCTION_10_4();
  v44();
  OUTLINED_FUNCTION_22_6();
  OUTLINED_FUNCTION_10_4();
  v44();
  uint64_t result = outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)v83, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  if (v78) {
    return outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)v83 + *(int *)(v94 + 20), (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  }
  return result;
}

void MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33();
  uint64_t v13 = (char *)(v11 - v12);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v74 - v15;
  uint64_t v17 = type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33();
  uint64_t v21 = v19 - v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_31_2();
  if (!*(void *)(v4 + 16)) {
    goto LABEL_28;
  }
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v24 & 1) == 0) {
    goto LABEL_28;
  }
  outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v23, (uint64_t)&v86);
  if ((OUTLINED_FUNCTION_2_7() & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v81 = v2;
  uint64_t v80 = v6;
  OUTLINED_FUNCTION_60_1();
  uint64_t v26 = v95;
  uint64_t v6 = v96;
  BOOL v28 = v95 == v27 && v96 == v25;
  if (!v28 && (OUTLINED_FUNCTION_17_4() & 1) == 0)
  {
    if (v26 == (void *)0xD000000000000013 && v6 == (void *)0x80000002272D5430
      || (OUTLINED_FUNCTION_20_1(), (OUTLINED_FUNCTION_17_4() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_16_5();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42_2();
      if (v35)
      {
        if (OUTLINED_FUNCTION_2_7()) {
          goto LABEL_39;
        }
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    BOOL v37 = v26 == (void *)0x5F64656C6562616CLL && v6 == (void *)0xED000073656C6966;
    if (v37 || (OUTLINED_FUNCTION_17_4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_16_5();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42_2();
      if (v38)
      {
        if (OUTLINED_FUNCTION_2_7())
        {
LABEL_39:
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_7_7();
          v39();
          OUTLINED_FUNCTION_38_2();
          swift_storeEnumTagMultiPayload();
          outlined init with take of MLHandPoseClassifier.DataSource(v21, v0, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
          goto LABEL_40;
        }
LABEL_42:
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v7);
        goto LABEL_30;
      }
LABEL_41:
      outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
      goto LABEL_42;
    }
    if (v26 == (void *)0xD000000000000016 && v6 == (void *)0x80000002272D53F0
      || (OUTLINED_FUNCTION_17_4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = v81;
      OUTLINED_FUNCTION_18_3();
      v41();
      char v85 = 1;
      LOBYTE(v86) = 1;
      *(_DWORD *)((char *)&v86 + 1) = v94;
      OUTLINED_FUNCTION_10_3(1);
      int v88 = *(_DWORD *)v93;
      OUTLINED_FUNCTION_56_2(v42);
      *(_DWORD *)uint64_t v89 = *(_DWORD *)v92;
      *(_DWORD *)&v89[3] = *(_DWORD *)&v92[3];
      OUTLINED_FUNCTION_54_2((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
      char v90 = v85;
      int v91 = *(_DWORD *)v84;
      OUTLINED_FUNCTION_55_2(*(int *)&v84[3]);
      MLDataTable.init(contentsOf:options:)(v16, v43, v44);
      OUTLINED_FUNCTION_32_3();
      id v82 = v95;
      char v83 = (char)v96;
      OUTLINED_FUNCTION_53_2();
      static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v45, v46, v47);
      OUTLINED_FUNCTION_20_1();
      specialized Dictionary.subscript.getter(v48, v49, v4, &v86);
      if (v87)
      {
        if (OUTLINED_FUNCTION_2_7())
        {
          uint64_t v51 = v95;
          uint64_t v50 = v96;
          OUTLINED_FUNCTION_4_6(0x5F6C6562616CLL, &v86);
          if (v87)
          {
            if (OUTLINED_FUNCTION_2_7())
            {
              char v53 = v95;
              uint64_t v52 = v96;
              specialized Dictionary.subscript.getter(0x5F65727574616566, 0xEE006E6D756C6F63, v4, &v86);
              swift_bridgeObjectRelease();
              uint64_t v54 = OUTLINED_FUNCTION_6_6();
              v55(v54);
              if (v87)
              {
                if (OUTLINED_FUNCTION_2_7())
                {
                  uint64_t v56 = v95;
                  uint64_t v57 = v96;
                  char v58 = v83;
                  *(void *)uint64_t v0 = v82;
                  *(unsigned char *)(v0 + 8) = v58;
                  *(void *)(v0 + 16) = v51;
                  *(void *)(v0 + 24) = v50;
                  *(void *)(v0 + 32) = v53;
                  *(void *)(v0 + 40) = v52;
                  *(void *)(v0 + 48) = v56;
                  *(void *)(v0 + 56) = v57;
LABEL_70:
                  swift_storeEnumTagMultiPayload();
                  goto LABEL_18;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
              }
              OUTLINED_FUNCTION_32_3();
LABEL_79:
              outlined consume of Result<_DataTable, Error>(v82, v83);
              goto LABEL_30;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
          }
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v81, v7);
          goto LABEL_79;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
      }
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v40, v7);
      goto LABEL_79;
    }
    if (v26 == (void *)0xD000000000000012 && v6 == (void *)0x80000002272D5540)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_20_1();
      char v59 = OUTLINED_FUNCTION_17_4();
      swift_bridgeObjectRelease();
      if ((v59 & 1) == 0)
      {
        uint64_t v72 = OUTLINED_FUNCTION_6_6();
        v73(v72);
        goto LABEL_75;
      }
    }
    OUTLINED_FUNCTION_18_3();
    v60();
    v84[0] = 1;
    LOBYTE(v86) = 1;
    *(_DWORD *)((char *)&v86 + 1) = v82;
    OUTLINED_FUNCTION_10_3(1);
    int v88 = v94;
    OUTLINED_FUNCTION_56_2(v61);
    *(_DWORD *)uint64_t v89 = *(_DWORD *)v93;
    *(_DWORD *)&v89[3] = *(_DWORD *)&v93[3];
    OUTLINED_FUNCTION_54_2((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
    char v90 = v84[0];
    int v91 = *(_DWORD *)v92;
    OUTLINED_FUNCTION_55_2(*(int *)&v92[3]);
    MLDataTable.init(contentsOf:options:)(v13, v62, v63);
    OUTLINED_FUNCTION_32_3();
    uint64_t v64 = v95;
    char v65 = (char)v96;
    OUTLINED_FUNCTION_4_6(0x5F6567616D69, &v86);
    if (v87)
    {
      if (OUTLINED_FUNCTION_2_7())
      {
        uint64_t v67 = v95;
        uint64_t v66 = v96;
        OUTLINED_FUNCTION_4_6(0x5F6C6562616CLL, &v86);
        swift_bridgeObjectRelease();
        uint64_t v68 = OUTLINED_FUNCTION_6_6();
        v69(v68);
        if (!v87)
        {
          outlined consume of Result<_DataTable, Error>(v64, v65);
          swift_bridgeObjectRelease();
          outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
          goto LABEL_53;
        }
        if (OUTLINED_FUNCTION_2_7())
        {
          uint64_t v70 = v95;
          uint64_t v71 = v96;
          *(void *)uint64_t v0 = v64;
          *(unsigned char *)(v0 + 8) = v65;
          *(void *)(v0 + 16) = v67;
          *(void *)(v0 + 24) = v66;
          *(void *)(v0 + 32) = v70;
          *(void *)(v0 + 40) = v71;
          goto LABEL_70;
        }
        outlined consume of Result<_DataTable, Error>(v64, v65);
LABEL_75:
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v64, v65);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v64, v65);
      outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v81, v7);
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_5();
  uint64_t v6 = v80;
  uint64_t v2 = v81;
  if (!v87) {
    goto LABEL_26;
  }
  if ((OUTLINED_FUNCTION_2_7() & 1) == 0)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  specialized Dictionary.subscript.getter(0x697461746F6E6E61, 0xEF656C69665F6E6FLL, v4, &v86);
  if (v87)
  {
    if (OUTLINED_FUNCTION_2_7())
    {
      uint64_t v6 = v95;
      OUTLINED_FUNCTION_4_6(0x5F6567616D69, &v86);
      if (v87)
      {
        if ((OUTLINED_FUNCTION_2_7() & 1) == 0)
        {
LABEL_51:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_52;
        }
        uint64_t v79 = v6;
        uint64_t v6 = v96;
        int v78 = v95;
        OUTLINED_FUNCTION_4_6(0x5F6C6562616CLL, &v86);
        swift_bridgeObjectRelease();
        if (v87)
        {
          uint64_t v77 = v6;
          if (OUTLINED_FUNCTION_2_7())
          {
            uint64_t v75 = v95;
            uint64_t v76 = v96;
            uint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
            v74[1] = v21 + v29[12];
            uint64_t v30 = (void *)(v21 + v29[16]);
            uint64_t v6 = (void *)(v21 + v29[20]);
            URL.init(fileURLWithPath:)();
            swift_bridgeObjectRelease();
            URL.init(fileURLWithPath:)();
            swift_bridgeObjectRelease();
            uint64_t v31 = OUTLINED_FUNCTION_6_6();
            v32(v31);
            uint64_t v33 = v77;
            *uint64_t v30 = v78;
            v30[1] = v33;
            uint64_t v34 = v76;
            *uint64_t v6 = v75;
            v6[1] = v34;
            OUTLINED_FUNCTION_38_2();
            swift_storeEnumTagMultiPayload();
            outlined init with take of MLHandPoseClassifier.DataSource(v21, v0, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
LABEL_18:
            OUTLINED_FUNCTION_32_3();
LABEL_40:
            outlined init with take of MLHandPoseClassifier.DataSource(v0, (uint64_t)v6, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
            uint64_t v36 = 0;
            goto LABEL_31;
          }
          goto LABEL_51;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
LABEL_52:
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v81, v7);
LABEL_53:
      OUTLINED_FUNCTION_32_3();
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
  outlined destroy of URL?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
LABEL_29:
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
LABEL_30:
  uint64_t v36 = 1;
LABEL_31:
  __swift_storeEnumTagSinglePayload((uint64_t)v6, v36, 1, v17);
  OUTLINED_FUNCTION_12_4();
}

void MLHandPoseClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_3_0();
  uint64_t v19 = v18 - v17;
  if (!*(void *)(v1 + 16)) {
    goto LABEL_25;
  }
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v21 & 1) == 0) {
    goto LABEL_25;
  }
  outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v20, (uint64_t)&v36);
  if ((OUTLINED_FUNCTION_22_5() & 1) == 0) {
    goto LABEL_25;
  }
  BOOL v22 = v34 == 1701736302 && v35 == 0xE400000000000000;
  if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    OUTLINED_FUNCTION_14_3();
    v23();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  BOOL v25 = v34 == 0x756F735F61746164 && v35 == 0xEB00000000656372;
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v34 == 0x74696C7073 && v35 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
LABEL_25:
        OUTLINED_FUNCTION_14_3();
        v30();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_34_2();
    swift_bridgeObjectRelease();
    if (!v39) {
      goto LABEL_33;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_22_5() & 1) == 0) {
      goto LABEL_34;
    }
    MLSplitStrategy.init(dictionary:)(v34, (uint64_t)&v36);
    OUTLINED_FUNCTION_14_3();
    v31();
    if ((v38 & 1) == 0)
    {
      __int16 v32 = v37;
      *(_OWORD *)uint64_t v19 = v36;
      *(unsigned char *)(v19 + 16) = v32;
      *(unsigned char *)(v19 + 17) = HIBYTE(v32) & 1;
      goto LABEL_10;
    }
LABEL_26:
    uint64_t v24 = 1;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_34_2();
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_33:
    outlined destroy of URL?((uint64_t)&v36, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_22_5() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_14_3();
    v33();
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_18_3();
  v26();
  MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)();
  OUTLINED_FUNCTION_14_3();
  v27();
  if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
  {
    outlined destroy of URL?(v9, &demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
    uint64_t v24 = 1;
    goto LABEL_27;
  }
  outlined init with take of MLHandPoseClassifier.DataSource(v9, v14, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  outlined init with take of MLHandPoseClassifier.DataSource(v14, v19, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.DataSource(v19, v3, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v24 = 0;
LABEL_27:
  __swift_storeEnumTagSinglePayload(v3, v24, 1, v15);
  OUTLINED_FUNCTION_12_4();
}

void MLHandPoseClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v78 = a1;
  uint64_t v3 = v1;
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for MLHandPoseClassifier.DataSource();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v66 = v6;
  uint64_t v72 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v71 = v8;
  uint64_t v79 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v81 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_49();
  uint64_t v73 = v11;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v12);
  uint64_t v74 = (char *)&v66 - v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  uint64_t v76 = (char *)&v66 - v15;
  uint64_t v16 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_49();
  uint64_t v75 = v18;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_31_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CC270;
  *(void *)(inited + 32) = 0x676E696E69617274;
  *(void *)(inited + 40) = 0xE800000000000000;
  MLHandPoseClassifier.DataSource.dictionary.getter();
  uint64_t v22 = v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v80 = (void (*)(void, void))v23;
  *(void *)(inited + 48) = v22;
  *(void *)(inited + 72) = v23;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  uint64_t v24 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  uint64_t v70 = v3 + v24[5];
  outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v70, v2, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  uint64_t v26 = v24[6];
  uint64_t v25 = v24[7];
  uint64_t v27 = *(void *)(v3 + v25);
  uint64_t v28 = v24[8];
  uint64_t v29 = *(void *)(v3 + v28);
  *(void *)(v2 + v16[5]) = *(void *)(v3 + v26);
  *(void *)(v2 + v16[6]) = v27;
  uint64_t v67 = v16;
  *(void *)(v2 + v16[7]) = v29;
  uint64_t v30 = MLHandPoseClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLHandPoseClassifier.DataSource(v2, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  *(void *)(inited + 96) = v30;
  uint64_t v31 = v80;
  *(void *)(inited + 120) = v80;
  *(void *)(inited + 128) = 0x69735F6863746162;
  *(void *)(inited + 136) = 0xEA0000000000657ALL;
  uint64_t v69 = v26;
  uint64_t v32 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 144) = *(void *)(v3 + v26);
  *(void *)(inited + 168) = v32;
  strcpy((char *)(inited + 176), "max_iterations");
  *(unsigned char *)(inited + 191) = -18;
  uint64_t v68 = v25;
  uint64_t v33 = *(void *)(v3 + v25);
  uint64_t v34 = v28;
  uint64_t v35 = v3;
  *(void *)(inited + 192) = v33;
  *(void *)(inited + 216) = v32;
  *(void *)(inited + 224) = 0xD000000000000014;
  *(void *)(inited + 232) = 0x80000002272D5390;
  *(void *)(inited + 240) = *(void *)(v3 + v34);
  OUTLINED_FUNCTION_47_1();
  *(void *)(inited + 264) = v37;
  *(void *)(inited + 272) = v36;
  *(void *)(inited + 280) = 0xE90000000000006DLL;
  uint64_t v38 = MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 312) = v31;
  *(void *)(inited + 288) = v38;
  OUTLINED_FUNCTION_53_3();
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v39 = self;
  OUTLINED_FUNCTION_53_3();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v82 = 0;
  id v41 = objc_msgSend(v39, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v82);

  id v42 = v82;
  if (v41)
  {
    uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    OUTLINED_FUNCTION_20_1();
    uint64_t v46 = v76;
    URL.appendingPathComponent(_:)();
    unint64_t v47 = v77;
    Data.write(to:options:)();
    if (v47)
    {
      OUTLINED_FUNCTION_25_0();
      v48();
      uint64_t v49 = v43;
      unint64_t v50 = v45;
LABEL_4:
      outlined consume of Data._Representation(v49, v50);
      return;
    }
    unint64_t v77 = v45;
    uint64_t v80 = *(void (**)(void, void))(v81 + 8);
    v81 += 8;
    v80(v46, v79);
    MLHandPoseClassifier.DataSource.table.getter();
    unsigned __int8 v52 = v83;
    if (v83 != 255)
    {
      uint64_t v76 = (char *)v43;
      id v53 = v82;
      v83 &= 1u;
      uint64_t v54 = (uint64_t)v74;
      URL.appendingPathComponent(_:)();
      MLDataTable.write(to:)(v54);
      OUTLINED_FUNCTION_18_4();
      v55();
      outlined consume of MLDataTable?(v53, v52);
      uint64_t v43 = (uint64_t)v76;
    }
    uint64_t v56 = v75;
    outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v70, v75, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    uint64_t v57 = *(void *)(v35 + v68);
    uint64_t v58 = *(void *)(v35 + v34);
    char v59 = v67;
    *(void *)(v56 + v67[5]) = *(void *)(v35 + v69);
    *(void *)(v56 + v59[6]) = v57;
    *(void *)(v56 + v59[7]) = v58;
    uint64_t v60 = v71;
    outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v56, v71, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v61 = v66;
      outlined init with take of MLHandPoseClassifier.DataSource(v60, v66, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
      MLHandPoseClassifier.DataSource.table.getter();
      outlined destroy of MLHandPoseClassifier.DataSource(v61, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
      id v62 = v82;
      int v63 = v83;
    }
    else
    {
      id v62 = 0;
      int v63 = 255;
    }
    uint64_t v64 = v73;
    outlined destroy of MLHandPoseClassifier.DataSource(v75, (void (*)(void))type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    if (v63 == 255)
    {
      uint64_t v49 = v43;
      unint64_t v50 = v77;
      goto LABEL_4;
    }
    id v82 = v62;
    unsigned __int8 v83 = v63 & 1;
    OUTLINED_FUNCTION_11_2();
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)(v64);
    OUTLINED_FUNCTION_18_4();
    v65();
    outlined consume of Data._Representation(v43, v77);
    outlined consume of MLDataTable?(v62, v63);
  }
  else
  {
    uint64_t v51 = v42;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void MLHandPoseClassifier.DataSource.dictionary.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33();
  uint64_t v8 = (char *)(v6 - v7);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v74 - v10;
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_0();
  uint64_t v15 = v14 - v13;
  outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v1, v14 - v13, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v38 = OUTLINED_FUNCTION_25_6();
      v39(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      id v41 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      unint64_t v43 = MEMORY[0x263F8D310];
      unint64_t v44 = 0xD000000000000013;
      unint64_t v45 = 0x80000002272D5430;
      goto LABEL_5;
    case 2u:
      uint64_t v46 = OUTLINED_FUNCTION_25_6();
      v47(v46);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      id v41 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      unint64_t v43 = MEMORY[0x263F8D310];
      unint64_t v44 = 0x5F64656C6562616CLL;
      unint64_t v45 = 0xED000073656C6966;
LABEL_5:
      v41[3].n128_u64[0] = v44;
      v41[3].n128_u64[1] = v45;
      v41[4].n128_u64[1] = v43;
      v41[5].n128_u64[0] = 1752457584;
      v41[5].n128_u64[1] = v42;
      uint64_t v48 = URL.path.getter();
      inited[7].n128_u64[1] = v43;
      inited[6].n128_u64[0] = v48;
      inited[6].n128_u64[1] = v49;
      Dictionary.init(dictionaryLiteral:)();
      OUTLINED_FUNCTION_41_3();
      v50();
      break;
    case 3u:
      uint64_t v51 = (void *)OUTLINED_FUNCTION_43_4();
      uint64_t v52 = *(void *)(v15 + 48);
      uint64_t v53 = *(void *)(v15 + 56);
      outlined consume of Result<_DataTable, Error>(v51, v54);
      goto LABEL_9;
    case 4u:
      uint64_t v55 = (void *)OUTLINED_FUNCTION_43_4();
      outlined consume of Result<_DataTable, Error>(v55, v56);
      goto LABEL_11;
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      OUTLINED_FUNCTION_28_3();
      uint64_t v58 = (uint64_t *)(v15 + *(int *)(v57 + 80));
      uint64_t v52 = *v58;
      uint64_t v53 = v58[1];
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v59 + 8))(v15);
LABEL_9:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v60 = (__n128 *)swift_initStackObject();
      uint64_t v61 = OUTLINED_FUNCTION_5_5(v60, (__n128)xmmword_2272CB360);
      unint64_t v62 = MEMORY[0x263F8D310];
      v61[3].n128_u64[0] = 0xD000000000000016;
      v61[3].n128_u64[1] = 0x80000002272D53F0;
      v61[4].n128_u64[1] = v62;
      v61[5].n128_u64[0] = 0xD000000000000011;
      OUTLINED_FUNCTION_96();
      v63[11] = v64;
      v63[12] = v11;
      v63[13] = v2;
      OUTLINED_FUNCTION_59_2();
      *(void *)(v65 + 120) = v66;
      *(void *)(v65 + 128) = v67;
      *(void *)(v65 + 136) = 0xEC0000006E6D756CLL;
      *(void *)(v65 + 144) = v8;
      *(void *)(v65 + 152) = v1;
      *(void *)(v65 + 168) = v66;
      strcpy((char *)(v65 + 176), "feature_column");
      *(void *)(v65 + 216) = v66;
      *(unsigned char *)(v65 + 191) = -18;
      *(void *)(v65 + 192) = v52;
      *(void *)(v65 + 200) = v53;
      goto LABEL_12;
    case 6u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      OUTLINED_FUNCTION_28_3();
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v68 + 8))(v15);
LABEL_11:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v69 = (__n128 *)swift_initStackObject();
      uint64_t v70 = OUTLINED_FUNCTION_5_5(v69, (__n128)xmmword_2272CB4A0);
      v70[3].n128_u64[0] = 0xD000000000000012;
      v70[3].n128_u64[1] = 0x80000002272D5540;
      OUTLINED_FUNCTION_58_1();
      *(void *)(v71 + 72) = v72;
      *(void *)(v71 + 80) = v73;
      *(void *)(v71 + 88) = 0xEC0000006E6D756CLL;
      *(void *)(v71 + 96) = v11;
      *(void *)(v71 + 104) = v2;
      *(void *)(v71 + 120) = v72;
      strcpy((char *)(v71 + 128), "label_column");
      *(void *)(v71 + 168) = v72;
      *(unsigned char *)(v71 + 141) = 0;
      *(_WORD *)(v71 + 142) = -5120;
      *(void *)(v71 + 144) = v8;
      *(void *)(v71 + 152) = v1;
LABEL_12:
      Dictionary.init(dictionaryLiteral:)();
      break;
    default:
      uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      uint64_t v17 = v15 + v16[12];
      uint64_t v18 = (unint64_t *)(v15 + v16[16]);
      unint64_t v20 = *v18;
      unint64_t v19 = v18[1];
      uint64_t v21 = (unint64_t *)(v15 + v16[20]);
      unint64_t v23 = *v21;
      unint64_t v22 = v21[1];
      unint64_t v76 = v23;
      unint64_t v74 = v19;
      unint64_t v75 = v22;
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      v24(v11, v15, v2);
      v24(v8, v17, v2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v25 = (__n128 *)swift_initStackObject();
      OUTLINED_FUNCTION_5_5(v25, (__n128)xmmword_2272CC1D0);
      unint64_t v26 = MEMORY[0x263F8D310];
      OUTLINED_FUNCTION_60_1();
      v27[6] = v28;
      v27[7] = 0xE900000000000079;
      void v27[9] = v26;
      v27[10] = 1752457584;
      v27[11] = v29;
      v25[6].n128_u64[0] = URL.path.getter();
      v25[6].n128_u64[1] = v30;
      v25[7].n128_u64[1] = v26;
      v25[8].n128_u64[0] = 0x697461746F6E6E61;
      v25[8].n128_u64[1] = 0xEF656C69665F6E6FLL;
      v25[10].n128_u64[1] = v2;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v25[9]);
      OUTLINED_FUNCTION_18_3();
      v31();
      OUTLINED_FUNCTION_58_1();
      v25[11].n128_u64[0] = v32;
      v25[11].n128_u64[1] = 0xEC0000006E6D756CLL;
      unint64_t v33 = v74;
      v25[12].n128_u64[0] = v20;
      v25[12].n128_u64[1] = v33;
      OUTLINED_FUNCTION_59_2();
      v25[13].n128_u64[1] = v26;
      v25[14].n128_u64[0] = v34;
      v25[16].n128_u64[1] = v26;
      unint64_t v35 = v76;
      v25[14].n128_u64[1] = v36;
      v25[15].n128_u64[0] = v35;
      v25[15].n128_u64[1] = v75;
      Dictionary.init(dictionaryLiteral:)();
      uint64_t v37 = *(void (**)(void))(v4 + 8);
      OUTLINED_FUNCTION_41_3();
      v37();
      OUTLINED_FUNCTION_41_3();
      v37();
      break;
  }
  OUTLINED_FUNCTION_12_4();
}

uint64_t MLHandPoseClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  uint64_t v1 = type metadata accessor for MLHandPoseClassifier.DataSource();
  uint64_t v2 = OUTLINED_FUNCTION_17(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = OUTLINED_FUNCTION_38_2();
  outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v7, v8, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = (__n128 *)swift_initStackObject();
    unint64_t v19 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
    unint64_t v20 = MEMORY[0x263F8D310];
    v19[3].n128_u64[0] = 0x74696C7073;
    v19[3].n128_u64[1] = 0xE500000000000000;
    v19[4].n128_u64[1] = v20;
    v19[5].n128_u64[0] = 1635017060;
    v19[5].n128_u64[1] = v21;
    uint64_t v22 = MLSplitStrategy.dictionary.getter();
    inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    inited[6].n128_u64[0] = v22;
    OUTLINED_FUNCTION_38_2();
    return Dictionary.init(dictionaryLiteral:)();
  }
  if (EnumCaseMultiPayload != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    unint64_t v23 = (__n128 *)swift_initStackObject();
    uint64_t v24 = OUTLINED_FUNCTION_5_5(v23, (__n128)xmmword_2272CB370);
    v24[4].n128_u64[1] = MEMORY[0x263F8D310];
    v24[3].n128_u64[0] = 1701736302;
    v24[3].n128_u64[1] = v25;
    return Dictionary.init(dictionaryLiteral:)();
  }
  outlined init with take of MLHandPoseClassifier.DataSource(v6, v0, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = (__n128 *)swift_initStackObject();
  uint64_t v12 = OUTLINED_FUNCTION_5_5(v11, (__n128)xmmword_2272CB4D0);
  unint64_t v13 = MEMORY[0x263F8D310];
  v12[3].n128_u64[0] = 0x756F735F61746164;
  v12[3].n128_u64[1] = 0xEB00000000656372;
  v12[4].n128_u64[1] = v13;
  v12[5].n128_u64[0] = 1635017060;
  v12[5].n128_u64[1] = v14;
  MLHandPoseClassifier.DataSource.dictionary.getter();
  unint64_t v16 = v15;
  v11[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v11[6].n128_u64[0] = v16;
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)();
  outlined destroy of MLHandPoseClassifier.DataSource(v0, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  return v17;
}

void MLHandPoseClassifier.DataSource.table.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v80 = 0;
  uint64_t v81 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v74 = v3;
  uint64_t v75 = v2;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v76 = v6;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v77 = v8;
  uint64_t v78 = v7;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v73 = v9;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v69 - v11;
  uint64_t v13 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v79 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v19 = (char *)&v69 - v18;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_47_2();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v69 - v21;
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_15();
  outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v0, v0, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      type metadata accessor for URL();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_25_0();
      v24();
      goto LABEL_22;
    case 3u:
      uint64_t v29 = *(void **)v0;
      char v30 = *(unsigned char *)(v0 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v84 = v29;
      char v85 = v30;
      outlined copy of Result<_DataTable, Error>(v29, v30);
      OUTLINED_FUNCTION_53_2();
      uint64_t v31 = v80;
      static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v32, v33, (void *)0xE900000000000073);
      if (v31) {

      }
      outlined consume of Result<_DataTable, Error>(v29, v30);
      goto LABEL_15;
    case 4u:
      unint64_t v34 = *(void **)v0;
      char v35 = *(unsigned char *)(v0 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v36 = v81;
      *uint64_t v81 = v34;
      *((unsigned char *)v36 + 8) = v35;
      goto LABEL_25;
    case 5u:
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      uint64_t v38 = (uint64_t *)(v0 + *(int *)(v37 + 80));
      uint64_t v39 = (void *)v38[1];
      uint64_t v40 = *(void (**)(char *, uint64_t))(v79 + 32);
      uint64_t v41 = v13;
      uint64_t v42 = *v38;
      uint64_t v72 = v41;
      v40(v22, v0);
      MEMORY[0x22A672220](v42, v39);
      uint64_t v43 = AnyColumn.wrappedElementType.getter();
      unint64_t v44 = *(void (**)(char *, uint64_t))(v77 + 8);
      v44(v12, v78);
      uint64_t v71 = v42;
      if (v43 != MEMORY[0x263F8D310])
      {
        uint64_t v45 = v79;
        uint64_t v46 = v80;
        unint64_t v47 = v39;
        uint64_t v48 = v72;
        goto LABEL_20;
      }
      uint64_t v70 = v39;
      DataFrame.subscript.getter();
      uint64_t v53 = v76;
      uint64_t v46 = v80;
      Column<A>.parseAsJSONArrays()(v76);
      if (v46)
      {

        OUTLINED_FUNCTION_25_0();
        v54();
        __swift_storeEnumTagSinglePayload(v53, 1, 1, v78);
        uint64_t v46 = 0;
        uint64_t v55 = v53;
        uint64_t v45 = v79;
        unint64_t v47 = v70;
        uint64_t v48 = v72;
LABEL_18:
        outlined destroy of URL?(v55, &demangling cache variable for type metadata for AnyColumn?);
        goto LABEL_20;
      }
      OUTLINED_FUNCTION_25_0();
      v61();
      uint64_t v62 = v78;
      __swift_storeEnumTagSinglePayload(v53, 0, 1, v78);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v53, 1, v62);
      uint64_t v55 = v53;
      uint64_t v45 = v79;
      uint64_t v48 = v72;
      if (EnumTagSinglePayload == 1)
      {
        unint64_t v47 = v70;
        goto LABEL_18;
      }
      uint64_t v64 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v73, v55, v62);
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v12, v73, v62);
      unint64_t v47 = v70;
      swift_bridgeObjectRetain();
      MEMORY[0x22A672230](v12, v71, v47);
      v44(v73, v62);
LABEL_20:
      OUTLINED_FUNCTION_18_3();
      v65();
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v82);
      if (v46)
      {
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v48);
LABEL_22:
        uint64_t v66 = v81;
        *uint64_t v81 = 0;
        *((unsigned char *)v66 + 8) = -1;
      }
      else
      {
        uint64_t v84 = v82;
        char v85 = v83;
        static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v84, v71, v47);
        uint64_t v67 = OUTLINED_FUNCTION_42_1();
        v68(v67);
        swift_bridgeObjectRelease();
        uint64_t v60 = v81;
        uint64_t v58 = v84;
        char v59 = v85;
LABEL_24:
        *uint64_t v60 = v58;
        *((unsigned char *)v60 + 8) = v59;
      }
LABEL_25:
      OUTLINED_FUNCTION_12_4();
      return;
    case 6u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v19, v0, v13);
      OUTLINED_FUNCTION_18_3();
      v49();
      unint64_t v50 = v80;
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v84);
      if (v50)
      {

        uint64_t v51 = OUTLINED_FUNCTION_56_3();
        v52(v51);
        goto LABEL_22;
      }
      uint64_t v56 = OUTLINED_FUNCTION_56_3();
      v57(v56);
LABEL_15:
      uint64_t v58 = v84;
      char v59 = v85;
      uint64_t v60 = v81;
      goto LABEL_24;
    default:
      uint64_t v25 = v0
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String))
                   + 48);
      OUTLINED_FUNCTION_12_5();
      OUTLINED_FUNCTION_12_5();
      uint64_t v26 = type metadata accessor for URL();
      OUTLINED_FUNCTION_8();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v28(v25, v26);
      v28(v0, v26);
      goto LABEL_22;
  }
}

uint64_t outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined init with take of MLHandPoseClassifier.DataSource(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return *(void *)(v0 - 320);
}

uint64_t OUTLINED_FUNCTION_21_5()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_22_6()
{
  __swift_destroy_boxed_opaque_existential_0(v1 - 128);
  return *(void *)(v0 + 88);
}

uint64_t OUTLINED_FUNCTION_25_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_43_4()
{
  return *(void *)v0;
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56_3()
{
  return v0;
}

uint64_t MLCheckpoint.url.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);

  return v5(a1, v1, v3);
}

uint64_t MLCheckpoint.url.setter(uint64_t a1)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);

  return v5(v1, a1, v3);
}

uint64_t (*MLCheckpoint.url.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.phase.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for MLCheckpoint();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for MLCheckpoint()
{
  uint64_t result = type metadata singleton initialization cache for MLCheckpoint;
  if (!type metadata singleton initialization cache for MLCheckpoint) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MLCheckpoint.phase.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for MLCheckpoint();
  *(unsigned char *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*MLCheckpoint.phase.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.iteration.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLCheckpoint() + 24));
}

uint64_t MLCheckpoint.iteration.setter()
{
  uint64_t result = OUTLINED_FUNCTION_8_5();
  *(void *)(v1 + *(int *)(result + 24)) = v0;
  return result;
}

uint64_t (*MLCheckpoint.iteration.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLCheckpoint() + 28);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

uint64_t MLCheckpoint.date.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_8_5() + 28);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);

  return v5(v2, v0, v3);
}

uint64_t (*MLCheckpoint.date.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.metrics.getter()
{
  type metadata accessor for MLCheckpoint();

  return swift_bridgeObjectRetain();
}

uint64_t MLCheckpoint.metrics.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_8_5() + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*MLCheckpoint.metrics.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

BOOL static MLCheckpoint.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void MLCheckpoint.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

CreateML::MLCheckpoint::CodingKeys_optional __swiftcall MLCheckpoint.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  BOOL v1 = stringValue._countAndFlagsBits == 7107189 && stringValue._object == (void *)0xE300000000000000;
  if (v1
    || (id object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (OUTLINED_FUNCTION_4_7() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = countAndFlagsBits == 0x6573616870 && object == (void *)0xE500000000000000;
    if (v5 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return (CreateML::MLCheckpoint::CodingKeys_optional)1;
    }
    else
    {
      BOOL v6 = countAndFlagsBits == 0x6F69746172657469 && object == (void *)0xE90000000000006ELL;
      if (v6 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (CreateML::MLCheckpoint::CodingKeys_optional)2;
      }
      else
      {
        BOOL v7 = countAndFlagsBits == 1702125924 && object == (void *)0xE400000000000000;
        if (v7 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::MLCheckpoint::CodingKeys_optional)3;
        }
        else
        {
          BOOL v8 = countAndFlagsBits == 0x697274654D6C7275 && object == (void *)0xEA00000000007363;
          if (v8 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return (CreateML::MLCheckpoint::CodingKeys_optional)4;
          }
          else if (countAndFlagsBits == 0x7363697274656DLL && object == (void *)0xE700000000000000)
          {
            swift_bridgeObjectRelease();
            return (CreateML::MLCheckpoint::CodingKeys_optional)5;
          }
          else
          {
            char v10 = OUTLINED_FUNCTION_4_7();
            swift_bridgeObjectRelease();
            if (v10) {
              return (CreateML::MLCheckpoint::CodingKeys_optional)5;
            }
            else {
              return (CreateML::MLCheckpoint::CodingKeys_optional)6;
            }
          }
        }
      }
    }
  }
}

Swift::Int MLCheckpoint.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t MLCheckpoint.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 7107189;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6573616870;
      break;
    case 2:
      uint64_t result = 0x6F69746172657469;
      break;
    case 3:
      uint64_t result = 1702125924;
      break;
    case 4:
      uint64_t result = 0x697274654D6C7275;
      break;
    case 5:
      uint64_t result = 0x7363697274656DLL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLCheckpoint.CodingKeys(char *a1, char *a2)
{
  return static MLCheckpoint.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLCheckpoint.CodingKeys()
{
  return MLCheckpoint.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLCheckpoint.CodingKeys(uint64_t a1)
{
  MLCheckpoint.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLCheckpoint.CodingKeys()
{
  return MLCheckpoint.CodingKeys.stringValue.getter(*v0);
}

CreateML::MLCheckpoint::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance MLCheckpoint.CodingKeys@<W0>(uint64_t a1@<X0>, CreateML::MLCheckpoint::CodingKeys_optional *a2@<X8>)
{
  result.CMTimeValue value = MLCheckpoint.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->CMTimeValue value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MLCheckpoint.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLCheckpoint.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLCheckpoint.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t MLCheckpoint.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v49 = v6;
  uint64_t v50 = v5;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v51 = v7;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MLCheckpoint.CodingKeys>);
  OUTLINED_FUNCTION_0();
  uint64_t v54 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v57 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v12 = OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_49();
  uint64_t v55 = v16;
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v48 - v18;
  uint64_t v52 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_33_0();
  uint64_t v53 = v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v22 = dispatch thunk of Decoder.userInfo.getter();
  if (one-time initialization token for sessionDirectory != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for CodingUserInfoKey();
  __swift_project_value_buffer(v23, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  specialized Dictionary.subscript.getter(v22, &v58);
  swift_bridgeObjectRelease();
  if (!v59)
  {
    outlined destroy of URL?((uint64_t)&v58, &demangling cache variable for type metadata for Any?);
    __swift_storeEnumTagSinglePayload(v3, 1, 1, v12);
    goto LABEL_19;
  }
  int v24 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload(v3, v24 ^ 1u, 1, v12);
  if (__swift_getEnumTagSinglePayload(v3, 1, v12) == 1)
  {
LABEL_19:
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_11_5();
    __break(1u);
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v19, v3, v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    OUTLINED_FUNCTION_3_9();
    v27(v26);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    LOBYTE(v58) = 0;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    OUTLINED_FUNCTION_14_4();
    uint64_t v25 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v29 = objc_msgSend(self, sel_defaultManager);
    uint64_t v30 = URL.path.getter();
    uint64_t v31 = v25;
    uint64_t v32 = (void *)MEMORY[0x22A674AE0](v30);
    swift_bridgeObjectRelease();
    unsigned int v33 = objc_msgSend(v29, sel_fileExistsAtPath_, v32);

    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v53, v31, v12);
    }
    else
    {
      URL.path.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
    }
    char v60 = 1;
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = v51;
    uint64_t v36 = v52;
    uint64_t v35 = v53;
    *(unsigned char *)(v53 + *(int *)(v52 + 20)) = v58;
    LOBYTE(v58) = 2;
    *(void *)(v35 + *(int *)(v36 + 24)) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v58) = 3;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_14_4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v35 + *(int *)(v36 + 28), v34, v50);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
    char v60 = 5;
    lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if ((void)v58)
    {
      uint64_t v37 = specialized _NativeDictionary.mapValues<A>(_:)(v58);
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
      uint64_t v37 = Dictionary.init(dictionaryLiteral:)();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : URL]);
    char v60 = 4;
    lazy protocol witness table accessor for type [MLProgress.Metric : URL] and conformance <> [A : B]();
    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v39 = v58;
    if ((void)v58)
    {
      MEMORY[0x270FA5388](v38);
      unint64_t v47 = v19;
      uint64_t v40 = specialized _NativeDictionary.mapValues<A>(_:)((void (*)(char *))partial apply for closure #2 in MLCheckpoint.init(from:), (uint64_t)(&v48 - 4), v39);
      swift_bridgeObjectRelease();
      uint64_t v41 = specialized _NativeDictionary.mapValues<A>(_:)(v40);
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
      uint64_t v41 = Dictionary.init(dictionaryLiteral:)();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v58 = v37;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v41, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v58);
    uint64_t v43 = v58;
    swift_bridgeObjectRelease();
    unint64_t v44 = *(void (**)(void))(v14 + 8);
    OUTLINED_FUNCTION_3_9();
    v44();
    OUTLINED_FUNCTION_25_0();
    v45();
    OUTLINED_FUNCTION_3_9();
    v44();
    uint64_t v46 = v53;
    *(void *)(v53 + *(int *)(v52 + 32)) = v43;
    outlined init with copy of MLCheckpoint(v46, v48);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined destroy of MLCheckpoint(v46);
  }
}

uint64_t closure #2 in MLCheckpoint.init(from:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t MLCheckpoint.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLCheckpoint.CodingKeys>);
  OUTLINED_FUNCTION_0();
  uint64_t v37 = v5;
  uint64_t v38 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  uint64_t v35 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v45 = (char *)&v35 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v15 = dispatch thunk of Encoder.userInfo.getter();
  if (one-time initialization token for sessionDirectory != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for CodingUserInfoKey();
  __swift_project_value_buffer(v16, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  specialized Dictionary.subscript.getter(v15, &v43);
  swift_bridgeObjectRelease();
  if (!v44)
  {
    outlined destroy of URL?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v8);
    goto LABEL_9;
  }
  int v17 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload(v2, v17 ^ 1u, 1, v8);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
LABEL_9:
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for URL?);
    uint64_t result = OUTLINED_FUNCTION_11_5();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v45, v2, v8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v43 = URL.path.getter();
  *((void *)&v43 + 1) = v18;
  uint64_t v41 = URL.path.getter();
  uint64_t v42 = v19;
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  unint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
  unint64_t v34 = v33;
  v32[0] = MEMORY[0x263F8D310];
  v32[1] = v33;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  LOBYTE(v43) = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  OUTLINED_FUNCTION_14_4();
  uint64_t v20 = v36;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v20)
  {
    uint64_t v21 = *(void (**)(void))(v10 + 8);
    OUTLINED_FUNCTION_7_8();
    v21();
    uint64_t v22 = OUTLINED_FUNCTION_2_8();
    v23(v22);
    OUTLINED_FUNCTION_7_8();
    return ((uint64_t (*)(void))v21)();
  }
  else
  {
    uint64_t v25 = *(void (**)(void))(v10 + 8);
    OUTLINED_FUNCTION_7_8();
    v25();
    uint64_t v36 = type metadata accessor for MLCheckpoint();
    LOBYTE(v43) = *(unsigned char *)(v3 + *(int *)(v36 + 20));
    LOBYTE(v41) = 1;
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v35 = v25;
    LOBYTE(v43) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v43) = 3;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    OUTLINED_FUNCTION_14_4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v26 = *(void *)(v3 + *(int *)(v36 + 32));
    *(void *)&long long v43 = specialized Dictionary.compactMapValues<A>(_:)(*(void *)*(int *)(v36 + 32));
    LOBYTE(v41) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
    lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric);
    OUTLINED_FUNCTION_9_4();
    swift_bridgeObjectRelease();
    uint64_t v27 = specialized Dictionary.compactMapValues<A>(_:)(v26);
    MEMORY[0x270FA5388](v27);
    unint64_t v33 = (unint64_t)v45;
    uint64_t v28 = specialized _NativeDictionary.mapValues<A>(_:)((void (*)(char *))partial apply for closure #3 in MLCheckpoint.encode(to:), (uint64_t)v32, v27);
    swift_bridgeObjectRelease();
    *(void *)&long long v43 = v28;
    LOBYTE(v41) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : URL]);
    lazy protocol witness table accessor for type [MLProgress.Metric : URL] and conformance <> [A : B]();
    OUTLINED_FUNCTION_9_4();
    id v29 = v35;
    uint64_t v30 = OUTLINED_FUNCTION_2_8();
    v31(v30);
    OUTLINED_FUNCTION_7_8();
    v29();
    return swift_release();
  }
}

uint64_t closure #3 in MLCheckpoint.encode(to:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLCheckpoint@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return MLCheckpoint.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLCheckpoint(void *a1)
{
  return MLCheckpoint.encode(to:)(a1);
}

uint64_t one-time initialization function for sessionDirectory()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v3, static CodingUserInfoKey.sessionDirectory);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v3 - 8) + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLPhase and conformance MLPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric()
{
  unint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  specialized LazyMapSequence.makeIterator()(&v28);
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v25);
  if (!v27)
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    char v7 = v25[0];
    outlined init with take of Any(&v26, v24);
    uint64_t v8 = *a5;
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    uint64_t v11 = *(void *)(v8 + 16);
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    char v14 = v9;
    if (*(void *)(v8 + 24) >= v13)
    {
      if (a4)
      {
        if (v9) {
          goto LABEL_9;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Any>);
        _NativeDictionary.copy()();
        if (v14) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a4 & 1);
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_17;
      }
      unint64_t v10 = v15;
      if (v14)
      {
LABEL_9:
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
        int v17 = (_OWORD *)(*(void *)(*a5 + 56) + 32 * v10);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
        outlined init with take of Any(v23, v17);
        goto LABEL_13;
      }
    }
    uint64_t v18 = (void *)*a5;
    *(void *)(*a5 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(unsigned char *)(v18[6] + v10) = v7;
    outlined init with take of Any(v24, (_OWORD *)(v18[7] + 32 * v10));
    uint64_t v19 = v18[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_16;
    }
    _OWORD v18[2] = v21;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v25);
    a4 = 1;
    if (!v27) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(a2, (uint64_t)(a2 + 8), *a1, (uint64_t)(a1 + 8));
}

uint64_t outlined init with copy of MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLCheckpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLCheckpoint(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLCheckpoint();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in MLCheckpoint.init(from:)()
{
  return closure #2 in MLCheckpoint.init(from:)();
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v36 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = (void *)result;
  int64_t v6 = 0;
  uint64_t v41 = a1;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = a1 + 64;
  uint64_t v7 = v9;
  uint64_t v10 = 1 << *(unsigned char *)(v8 - 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v7;
  uint64_t v30 = v8;
  int64_t v31 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v37 = v2;
  uint64_t v38 = v2 + 16;
  uint64_t v33 = result + 64;
  uint64_t v34 = v2 + 8;
  uint64_t v32 = (void *)result;
  uint64_t v13 = v2;
  uint64_t v14 = v35;
  if ((v11 & v7) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  int64_t v16 = v6;
  for (unint64_t i = v15 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    char v22 = *(unsigned char *)(*(void *)(v41 + 48) + i);
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    int v24 = v36;
    v23(v36, *(void *)(v41 + 56) + *(void *)(v13 + 72) * i, v14);
    uint64_t v40 = v14;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v39);
    v23((char *)boxed_opaque_existential_0, (unint64_t)v24, v14);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v14);
    uint64_t v5 = v32;
    *(void *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(unsigned char *)(v5[6] + i) = v22;
    uint64_t result = (uint64_t)outlined init with take of Any(&v39, (_OWORD *)(v5[7] + 32 * i));
    uint64_t v26 = v5[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v5[2] = v28;
    int64_t v6 = v16;
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_24;
    }
    if (v18 >= v31) {
      return (uint64_t)v5;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    int64_t v20 = v6 + 1;
    if (!v19)
    {
      int64_t v20 = v6 + 2;
      if (v6 + 2 >= v31) {
        return (uint64_t)v5;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v6 + 3;
        if (v6 + 3 >= v31) {
          return (uint64_t)v5;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v12 = (v19 - 1) & v19;
    int64_t v16 = v20;
  }
  uint64_t v21 = v6 + 4;
  if (v6 + 4 >= v31) {
    return (uint64_t)v5;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v21);
  if (v19)
  {
    int64_t v20 = v6 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v31) {
      return (uint64_t)v5;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  long long v22;
  uint64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)result;
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  int64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(a1 + 64);
  uint64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  uint64_t v11 = MEMORY[0x263F8D538];
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    int v17 = *(unsigned char *)(*(void *)(a1 + 48) + i);
    int64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v23 = v11;
    *(void *)&char v22 = v18;
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(unsigned char *)(v3[6] + i) = v17;
    uint64_t result = (uint64_t)outlined init with take of Any(&v22, (_OWORD *)(v3[7] + 32 * i));
    unint64_t v19 = v3[2];
    int64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v21;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v14 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      uint64_t v4 = v14 + 1;
      if (v14 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v4);
      if (!v15)
      {
        uint64_t v4 = v14 + 2;
        if (v14 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    uint64_t v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t i;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CIImage]>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = result;
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & *(void *)(a1 + 64);
  uint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v50 = v5 + 16;
  uint64_t v41 = result + 64;
  uint64_t v44 = result;
  uint64_t v37 = v5;
  uint64_t v38 = a1;
  uint64_t v35 = v14;
  uint64_t v36 = a1 + 64;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v13));
  int64_t v16 = (v13 - 1) & v13;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v9 << 6))
  {
    uint64_t v45 = v16;
    uint64_t v46 = v9;
    uint64_t v21 = *(void *)(a1 + 56);
    char v22 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v23 = v22[1];
    unint64_t v47 = *v22;
    int v24 = *(void *)(v21 + 8 * i);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      long long v39 = i;
      uint64_t v51 = MEMORY[0x263F8EE78];
      long long v43 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v26 = *(unsigned __int8 *)(v5 + 80);
      uint64_t v42 = v24;
      BOOL v27 = v24 + ((v26 + 32) & ~v26);
      uint64_t v48 = *(void *)(v5 + 72);
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      uint64_t v29 = v40;
      while (1)
      {
        v28(v29, v27, v4);
        static ImageReader.read(url:)();
        if (v2) {
          break;
        }
        (*v49)(v29, v4);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v27 += v48;
        if (!--v25)
        {
          uint64_t v30 = v51;
          swift_bridgeObjectRelease();
          uint64_t v5 = v37;
          a1 = v38;
          uint64_t v14 = v35;
          uint64_t v10 = v36;
          unint64_t i = v39;
          uint64_t result = v43;
          goto LABEL_22;
        }
      }
      (*v49)(v29, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v44;
      swift_release();
      swift_release();
      return v8;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v30 = MEMORY[0x263F8EE78];
LABEL_22:
    *(void *)(v41 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    int64_t v31 = i;
    uint64_t v8 = v44;
    uint64_t v32 = (void *)(*(void *)(v44 + 48) + 16 * v31);
    *uint64_t v32 = v47;
    v32[1] = result;
    *(void *)(*(void *)(v8 + 56) + 8 * v31) = v30;
    uint64_t v33 = *(void *)(v8 + 16);
    int64_t v18 = __OFADD__(v33, 1);
    uint64_t v34 = v33 + 1;
    if (v18)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    *(void *)(v8 + 16) = v34;
    uint64_t v13 = v45;
    uint64_t v9 = v46;
    if (v45) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = __OFADD__(v9++, 1);
    if (v18) {
      goto LABEL_32;
    }
    if (v9 >= v14) {
      return v8;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v9);
    if (!v19) {
      break;
    }
LABEL_15:
    int64_t v16 = (v19 - 1) & v19;
  }
  int64_t v20 = v9 + 1;
  if (v9 + 1 >= v14) {
    return v8;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19) {
    goto LABEL_14;
  }
  int64_t v20 = v9 + 2;
  if (v9 + 2 >= v14) {
    return v8;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19) {
    goto LABEL_14;
  }
  int64_t v20 = v9 + 3;
  if (v9 + 3 >= v14) {
    return v8;
  }
  unint64_t v19 = *(void *)(v10 + 8 * v20);
  if (v19)
  {
LABEL_14:
    uint64_t v9 = v20;
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v14) {
      return v8;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_15;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  void *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v45 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v6 = (void *)result;
  uint64_t v7 = 0;
  uint64_t v38 = a1;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v9 = a1 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v9 - 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & v8;
  uint64_t v35 = v9;
  uint64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v37 = result + 64;
  uint64_t v34 = (void *)result;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    unint64_t v19 = (uint64_t *)(*(void *)(v38 + 48) + 16 * i);
    uint64_t v21 = *v19;
    int64_t v20 = v19[1];
    char v22 = *(void *)(*(void *)(v38 + 56) + 8 * i);
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v40 = *v19;
      uint64_t v42 = i;
      long long v43 = v13;
      uint64_t v44 = v7;
      uint64_t v46 = MEMORY[0x263F8EE78];
      uint64_t v41 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      int v24 = v22;
      uint64_t v25 = v46;
      long long v39 = v24;
      uint64_t v26 = v24 + 40;
      do
      {
        swift_bridgeObjectRetain();
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        uint64_t v46 = v25;
        uint64_t v28 = *(void *)(v25 + 16);
        BOOL v27 = *(void *)(v25 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          uint64_t v25 = v46;
        }
        v26 += 16;
        *(void *)(v25 + 16) = v28 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v25+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v28, v4, v45);
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      int64_t v6 = v34;
      uint64_t v13 = v43;
      uint64_t v7 = v44;
      uint64_t result = v41;
      unint64_t i = v42;
      uint64_t v21 = v40;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v25 = MEMORY[0x263F8EE78];
    }
    *(void *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v29 = (void *)(v6[6] + 16 * i);
    *uint64_t v29 = v21;
    v29[1] = result;
    *(void *)(v6[7] + 8 * i) = v25;
    uint64_t v30 = v6[2];
    int64_t v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v6[2] = v32;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_31;
    }
    if (v16 >= v36) {
      return (uint64_t)v6;
    }
    int v17 = *(void *)(v35 + 8 * v16);
    ++v7;
    if (!v17)
    {
      uint64_t v7 = v16 + 1;
      if (v16 + 1 >= v36) {
        return (uint64_t)v6;
      }
      int v17 = *(void *)(v35 + 8 * v7);
      if (!v17)
      {
        uint64_t v7 = v16 + 2;
        if (v16 + 2 >= v36) {
          return (uint64_t)v6;
        }
        int v17 = *(void *)(v35 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v13 = (v17 - 1) & v17;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v36) {
    return (uint64_t)v6;
  }
  int v17 = *(void *)(v35 + 8 * v18);
  if (v17)
  {
    uint64_t v7 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v36) {
      return (uint64_t)v6;
    }
    int v17 = *(void *)(v35 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t result;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)result;
  uint64_t v4 = 0;
  uint64_t v35 = a1;
  uint64_t v5 = *(void *)(a1 + 64);
  int64_t v31 = (void *)result;
  uint64_t v32 = a1 + 64;
  int64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & v5;
  uint64_t v33 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v34 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v9 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v35 + 48) + 16 * i);
    unint64_t v15 = *v14;
    int64_t v16 = *(void *)(*(void *)(v35 + 56) + 8 * i);
    int v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v36 = *v14;
      uint64_t v38 = v8;
      long long v39 = MEMORY[0x263F8EE78];
      uint64_t v37 = v14[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      int64_t v18 = v39;
      unint64_t v19 = *(void *)(type metadata accessor for URL() - 8);
      int64_t v20 = v16 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      uint64_t v21 = *(void *)(v19 + 72);
      do
      {
        char v22 = URL.path.getter();
        int v24 = v23;
        uint64_t v25 = *(void *)(v39 + 16);
        if (v25 >= *(void *)(v39 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        *(void *)(v39 + 16) = v25 + 1;
        uint64_t v26 = v39 + 16 * v25;
        *(void *)(v26 + 32) = v22;
        *(void *)(v26 + 40) = v24;
        v20 += v21;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      uint64_t v3 = v31;
      uint64_t v8 = v38;
      uint64_t result = v37;
      unint64_t v15 = v36;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      int64_t v18 = MEMORY[0x263F8EE78];
    }
    *(void *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    BOOL v27 = (void *)(v3[6] + 16 * i);
    *BOOL v27 = v15;
    v27[1] = result;
    *(void *)(v3[7] + 8 * i) = v18;
    uint64_t v28 = v3[2];
    uint64_t v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v3[2] = v30;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_31;
    }
    if (v11 >= v33) {
      return (uint64_t)v3;
    }
    unint64_t v12 = *(void *)(v32 + 8 * v11);
    ++v4;
    if (!v12)
    {
      uint64_t v4 = v11 + 1;
      if (v11 + 1 >= v33) {
        return (uint64_t)v3;
      }
      unint64_t v12 = *(void *)(v32 + 8 * v4);
      if (!v12)
      {
        uint64_t v4 = v11 + 2;
        if (v11 + 2 >= v33) {
          return (uint64_t)v3;
        }
        unint64_t v12 = *(void *)(v32 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v8 = (v12 - 1) & v12;
  }
  uint64_t v13 = v11 + 3;
  if (v13 >= v33) {
    return (uint64_t)v3;
  }
  unint64_t v12 = *(void *)(v32 + 8 * v13);
  if (v12)
  {
    uint64_t v4 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v33) {
      return (uint64_t)v3;
    }
    unint64_t v12 = *(void *)(v32 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v34 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, URL>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v14 = 0;
  uint64_t v44 = a3;
  uint64_t v45 = result;
  uint64_t v17 = *(void *)(a3 + 64);
  uint64_t v16 = a3 + 64;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v15;
  uint64_t v35 = v16;
  int64_t v36 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v39 = v7 + 16;
  uint64_t v40 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v41 = v7;
  uint64_t v37 = (uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32);
  uint64_t v38 = result + 64;
  if ((v19 & v15) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  int64_t v46 = v14;
  for (unint64_t i = v21 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v24 << 6))
  {
    char v27 = *(unsigned char *)(*(void *)(v44 + 48) + i);
    unint64_t v28 = *(void *)(v41 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v12, *(void *)(v44 + 56) + v28, v6);
    v42(v12);
    if (v4)
    {
      uint64_t v33 = v45;
      swift_release();
      (*v40)(v12, v6);
      return v33;
    }
    uint64_t v29 = v12;
    (*v40)(v12, v6);
    *(void *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v30 = v45;
    *(unsigned char *)(*(void *)(v45 + 48) + i) = v27;
    uint64_t result = (*v37)(*(void *)(v30 + 56) + v28, v10, v6);
    uint64_t v31 = *(void *)(v30 + 16);
    BOOL v23 = __OFADD__(v31, 1);
    uint64_t v32 = v31 + 1;
    if (v23) {
      break;
    }
    *(void *)(v30 + 16) = v32;
    unint64_t v12 = v29;
    uint64_t v4 = 0;
    int64_t v14 = v46;
    if (v20) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v23 = __OFADD__(v14, 1);
    int64_t v24 = v14 + 1;
    if (v23) {
      goto LABEL_28;
    }
    if (v24 >= v36) {
      return v45;
    }
    unint64_t v25 = *(void *)(v35 + 8 * v24);
    if (!v25)
    {
      int64_t v26 = v24 + 1;
      if (v24 + 1 >= v36) {
        return v45;
      }
      unint64_t v25 = *(void *)(v35 + 8 * v26);
      if (v25) {
        goto LABEL_14;
      }
      int64_t v26 = v24 + 2;
      if (v24 + 2 >= v36) {
        return v45;
      }
      unint64_t v25 = *(void *)(v35 + 8 * v26);
      if (v25)
      {
LABEL_14:
        int64_t v24 = v26;
        goto LABEL_15;
      }
      int64_t v26 = v24 + 3;
      if (v24 + 3 < v36)
      {
        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v24 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_29;
            }
            if (v24 >= v36) {
              return v45;
            }
            unint64_t v25 = *(void *)(v35 + 8 * v24);
            ++v26;
            if (v25) {
              goto LABEL_15;
            }
          }
        }
        goto LABEL_14;
      }
      return v45;
    }
LABEL_15:
    unint64_t v20 = (v25 - 1) & v25;
    int64_t v46 = v24;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #3 in MLCheckpoint.encode(to:)()
{
  return closure #3 in MLCheckpoint.encode(to:)();
}

void *initializeBufferWithCopyOfBuffer for MLCheckpoint(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLCheckpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2270A4A60);
}

uint64_t sub_2270A4A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  type metadata accessor for Date();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for MLCheckpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2270A4B28);
}

void sub_2270A4B28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 28);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for MLCheckpoint()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLCheckpoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MLCheckpoint.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2270A4E18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for MLCheckpoint.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLCheckpoint.CodingKeys()
{
  return &type metadata for MLCheckpoint.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return type metadata accessor for MLCheckpoint();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return v0;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validationData.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t result = outlined init with copy of Any?(v1, (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    swift_dynamicCast();
    MLDecisionTreeRegressor.ModelParameters.ValidationData.table.getter(a1);
    return outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = MLDecisionTreeRegressor.ModelParameters.validationData.getter((uint64_t)&v4);
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1 = *(unsigned char *)(a1 + 8);
  id v3 = *(id *)a1;
  unsigned __int8 v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  long long v8 = *(void **)a1;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  v13[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  if (v9 == 255)
  {
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(void *)uint64_t v7 = v8;
    *(unsigned char *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v13, v2);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validation.getter()
{
  uint64_t result = outlined init with copy of Any?(v0, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*MLDecisionTreeRegressor.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  MLDecisionTreeRegressor.ModelParameters.validationData.getter(a1);
  return MLDecisionTreeRegressor.ModelParameters.validationData.modify;
}

void MLDecisionTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    outlined copy of MLDataTable?(v2, v3);
    MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    uint64_t v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLDecisionTreeRegressor.ModelParameters.validation : MLDecisionTreeRegressor.ModelParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLDecisionTreeRegressor.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  v5[3] = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

void (*MLDecisionTreeRegressor.ModelParameters.validation.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v4[17] = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  size_t v6 = *(void *)(v5 + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  uint64_t result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v2, (uint64_t)(v4 + 4));
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    swift_dynamicCast();
    return MLDecisionTreeRegressor.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLDecisionTreeRegressor.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[18];
  uint64_t v4 = (void *)(*a1)[19];
  uint64_t v5 = (*a1)[16];
  uint64_t v6 = (*a1)[17];
  if (a2)
  {
    outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v6;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v5);
    outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v6;
    long long v8 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v8);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.maxDepth.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.maxDepth.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.maxDepth.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeRegressor.ModelParameters.minLossReduction.getter()
{
  return *(double *)(v0 + 40);
}

void MLDecisionTreeRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.minLossReduction.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeRegressor.ModelParameters.minChildWeight.getter()
{
  return *(double *)(v0 + 48);
}

void MLDecisionTreeRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.minChildWeight.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.randomSeed.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.randomSeed.setter(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.randomSeed.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.init(validation:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 32) = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(void *)(a4 + 56) = a3;
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, v15 - v14);
  v19[3] = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(v16, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v19, a4);
  return outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.init(validationData:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 32) = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(void *)(a4 + 56) = a3;
  uint64_t v9 = v6;
  char v10 = v7;
  return MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v9);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 10;
  v1._id object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _StringGuts.grow(_:)(23);
  v2._uint64_t countAndFlagsBits = 0xD000000000000014;
  v2._id object = (void *)0x80000002272D3F20;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_1_1();
  v3._uint64_t countAndFlagsBits = 0;
  v3._id object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  v4._id object = (void *)0x80000002272D3F40;
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_1_1();
  v5._uint64_t countAndFlagsBits = 0;
  v5._id object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v8, "Random Seed: ");
  HIWORD(v8._object) = -4864;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLDecisionTreeRegressor.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2270A5BDC()
{
  return MLDecisionTreeRegressor.ModelParameters.validation.getter();
}

uint64_t initializeWithCopy for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithCopy for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeRegressor.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDecisionTreeRegressor.ModelParameters()
{
  return &type metadata for MLDecisionTreeRegressor.ModelParameters;
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return Double.write<A>(to:)();
}

uint64_t MLModelMetadata.init(author:shortDescription:license:version:additional:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t MLModelMetadata.author.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLModelMetadata.author.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::String v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*MLModelMetadata.author.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.shortDescription.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLModelMetadata.shortDescription.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t (*MLModelMetadata.shortDescription.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.license.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLModelMetadata.license.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  return result;
}

uint64_t (*MLModelMetadata.license.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.version.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLModelMetadata.version.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  return result;
}

uint64_t (*MLModelMetadata.version.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.additional.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelMetadata.additional.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*MLModelMetadata.additional.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t destroy for MLModelMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MLModelMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MLModelMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for MLModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelMetadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLModelMetadata()
{
  return &type metadata for MLModelMetadata;
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TreeRegressor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a2 + v8;
    char v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for BaseTreeRegressor();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for TreeRegressor(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for BaseTreeRegressor();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for TreeRegressor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for BaseTreeRegressor();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

void *assignWithCopy for TreeRegressor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for BaseTreeRegressor();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for BaseTreeRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for TreeRegressor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for BaseTreeRegressor();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2270A6878);
}

uint64_t sub_2270A6878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for BaseTreeRegressor();
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2270A6914);
}

uint64_t sub_2270A6914(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for BaseTreeRegressor();
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TreeRegressor()
{
  uint64_t result = type metadata singleton initialization cache for TreeRegressor;
  if (!type metadata singleton initialization cache for TreeRegressor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TreeRegressor()
{
  uint64_t result = type metadata accessor for BaseTreeRegressor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in TreeRegressor()
{
  return lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type TreeRegressorModel and conformance TreeRegressorModel, (void (*)(uint64_t))type metadata accessor for TreeRegressorModel);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v11;
    unint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v4 += 4;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    OUTLINED_FUNCTION_43_5();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        OUTLINED_FUNCTION_43_5();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            OUTLINED_FUNCTION_43_5();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_41_0();
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]), uint64_t v8 = dispatch thunk of Hashable._rawHashValue(seed:)(), v9 = -1 << *(unsigned char *)(a2 + 32), v10 = v8 & ~v9, v11 = a2 + 56, ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    uint64_t v18 = ~v9;
    uint64_t v19 = a2;
    uint64_t v12 = v6 + 16;
    uint64_t v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    uint64_t v14 = *(void *)(v12 + 56);
    char v15 = (void (**)(uint64_t, uint64_t))(v12 - 8);
    do
    {
      v13(v2, *(void *)(v19 + 48) + v14 * v10, v4);
      lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v2, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v18;
    }
    while (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v11 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_32();
  uint64_t v15 = type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_40_0();
  *(void *)a5 = a1;
  *((void *)a5 + 1) = a2;
  *((void *)a5 + 2) = a3;
  *((void *)a5 + 3) = a3;
  *((void *)a5 + 4) = 0xD000000000000013;
  *((void *)a5 + 5) = 0x80000002272D4D10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v5, a4, v11);
  swift_bridgeObjectRetain();
  BaseTreeRegressor.init(configuration:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, v11);
  uint64_t v19 = type metadata accessor for TreeRegressor();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 32))(&a5[*(int *)(v19 + 28)], v6, v15);
}

void TreeRegressor.fitted(to:validateOn:eventHandler:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v76 = v3;
  uint64_t v74 = v4;
  uint64_t v81 = v5;
  uint64_t v7 = v6;
  uint64_t v72 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v80 = v11;
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v77 = v13;
  uint64_t v78 = v12;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_29_3(v14, v60);
  uint64_t v69 = type metadata accessor for BaseTreeRegressorModel();
  OUTLINED_FUNCTION_0();
  uint64_t v71 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  uint64_t v73 = v17;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v68 = (char *)&v60 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v70 = (char *)&v60 - v21;
  uint64_t v79 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v86 = v22;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_32();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  OUTLINED_FUNCTION_0();
  uint64_t v75 = v25;
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v60 - v30;
  uint64_t v33 = v0[3];
  uint64_t v32 = v0[4];
  id v82 = v0;
  uint64_t v83 = v32;
  uint64_t v34 = v0[5];
  uint64_t v84 = v7;
  v85[2] = v7;
  swift_bridgeObjectRetain();
  uint64_t ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v85, v33);
  swift_bridgeObjectRelease();
  if (v1) {
    goto LABEL_3;
  }
  uint64_t v67 = v2;
  uint64_t v37 = v80;
  uint64_t v36 = v81;
  uint64_t v65 = v29;
  uint64_t v66 = v24;
  uint64_t v38 = v82;
  swift_bridgeObjectRetain();
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  uint64_t v62 = v31;
  uint64_t v63 = ML16ColumnDescriptorVsAE_pTg5;
  uint64_t v64 = v34;
  uint64_t v39 = v67;
  MEMORY[0x22A672220](*v38, v38[1]);
  AnyColumn.convertedToFloats()();
  uint64_t v41 = v40;
  uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  v61(v39, v79);
  uint64_t v84 = v41;
  if (v41)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v36, v37, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v37, 1, v78) == 1)
    {
      outlined destroy of URL?(v37, &demangling cache variable for type metadata for DataFrame?);
      type metadata accessor for TreeRegressor();
      uint64_t v42 = v82;
      BaseTreeRegressor.fitted(features:annotations:eventHandler:)();
      OUTLINED_FUNCTION_25_0();
      v43();
      swift_release();
      uint64_t v45 = v70;
      int64_t v46 = *(void (**)(void))(v71 + 32);
      uint64_t v47 = v69;
      OUTLINED_FUNCTION_3();
      v46();
      uint64_t v48 = v72;
LABEL_9:
      uint64_t v57 = *v42;
      uint64_t v56 = v42[1];
      uint64_t v58 = type metadata accessor for TreeRegressorModel();
      ((void (*)(char *, char *, uint64_t))v46)((char *)v48 + *(int *)(v58 + 24), v45, v47);
      *uint64_t v48 = v57;
      v48[1] = v56;
      uint64_t v59 = v83;
      _OWORD v48[2] = v63;
      v48[3] = v59;
      v48[4] = v64;
      swift_bridgeObjectRetain();
LABEL_3:
      OUTLINED_FUNCTION_8_1();
      return;
    }
    OUTLINED_FUNCTION_3();
    v44();
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    uint64_t v42 = v82;
    uint64_t v49 = v67;
    MEMORY[0x22A672220](*v82, v82[1]);
    AnyColumn.convertedToFloats()();
    uint64_t v51 = v50;
    v61(v49, v79);
    if (v51)
    {
      type metadata accessor for TreeRegressor();
      BaseTreeRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)();
      uint64_t v48 = v72;
      uint64_t v52 = v75;
      uint64_t v53 = v71;
      swift_release();
      swift_release();
      uint64_t v54 = *(void (**)(void))(v52 + 8);
      OUTLINED_FUNCTION_44_0();
      v54();
      OUTLINED_FUNCTION_25_0();
      v55();
      OUTLINED_FUNCTION_44_0();
      v54();
      int64_t v46 = *(void (**)(void))(v53 + 32);
      uint64_t v47 = v69;
      uint64_t v45 = v70;
      ((void (*)(char *, char *, uint64_t))v46)(v70, v68, v69);
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t TreeRegressor.annotationColumnID.getter()
{
  swift_bridgeObjectRetain();

  return ColumnID.init(_:_:)();
}

uint64_t TreeRegressor.annotationColumnID.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Float>);
  uint64_t v1 = ColumnID.name.getter();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_25_0();
  v4();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
  v0[1] = v3;
  return result;
}

void specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)()
{
}

{
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, void);
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void (*v11)(uint64_t, void);

  OUTLINED_FUNCTION_9_0();
  uint64_t v11 = v1;
  uint64_t v3 = v2;
  uint64_t v10 = v4;
  uint64_t v5 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_32();
  uint64_t v9 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(v9);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  DataFrame.selecting<A>(columnNames:)();
  swift_bridgeObjectRelease();
  v11(v3, v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  OUTLINED_FUNCTION_8_1();
}

uint64_t TreeRegressor.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
  lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?();
  uint64_t result = dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  if (!v2)
  {
    type metadata accessor for TreeRegressorModel();
    __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
    type metadata accessor for BaseTreeRegressorModel();
    lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type BaseTreeRegressorModel and conformance BaseTreeRegressorModel, MEMORY[0x263F043C8]);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  }
  return result;
}

void TreeRegressor.decode(from:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v12 = v0;
  uint64_t v4 = v3;
  uint64_t v17 = v5;
  uint64_t v6 = type metadata accessor for BaseTreeRegressorModel();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_24_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  __swift_mutable_project_boxed_opaque_existential_1(v4, *(void *)(v4 + 24));
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  dispatch thunk of EstimatorDecoder.decode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1(v4, *(void *)(v4 + 24));
    lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(&lazy protocol witness table cache variable for type BaseTreeRegressorModel and conformance BaseTreeRegressorModel, MEMORY[0x263F043C8]);
    dispatch thunk of EstimatorDecoder.decode<A>(_:)();
    uint64_t v10 = *v0;
    uint64_t v9 = v12[1];
    uint64_t v11 = type metadata accessor for TreeRegressorModel();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(&v17[*(int *)(v11 + 24)], v2, v6);
    *(void *)uint64_t v17 = v10;
    *((void *)v17 + 1) = v9;
    *((void *)v17 + 2) = v14;
    *((void *)v17 + 3) = v15;
    *((void *)v17 + 4) = v16;
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_8_1();
}

void (*protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Float>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  TreeRegressor.annotationColumnID.getter();
  return protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor;
}

void protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    TreeRegressor.annotationColumnID.setter();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    TreeRegressor.annotationColumnID.setter();
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor()
{
  TreeRegressor.fitted(to:validateOn:eventHandler:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(v1);
}

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance TreeRegressor(uint64_t a1, uint64_t a2)
{
  return TreeRegressor.encode(_:to:)(a1, a2);
}

void protocol witness for SupervisedTabularEstimator.decode(from:) in conformance TreeRegressor()
{
}

uint64_t base witness table accessor for SupervisedTabularEstimator in TreeRegressor()
{
  return lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel((unint64_t *)&lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor, (void (*)(uint64_t))type metadata accessor for TreeRegressor);
}

uint64_t TreeRegressor.makeTransformer()@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  type metadata accessor for TreeRegressor();
  type metadata accessor for TreeRegressorModel();
  swift_bridgeObjectRetain();
  uint64_t result = BaseTreeRegressor.makeTransformer()();
  *a1 = v4;
  a1[1] = v3;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

void TreeRegressor.update(_:with:eventHandler:)()
{
  OUTLINED_FUNCTION_9_0();
  v20[7] = v2;
  v20[8] = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  v20[9] = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_41_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  OUTLINED_FUNCTION_0();
  v20[5] = v12;
  v20[6] = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_40_0();
  if (!v7[2])
  {
    v20[4] = v8;
    uint64_t v18 = v0[2];
    MEMORY[0x270FA5388](v13);
    _OWORD v20[2] = v5;
    swift_bridgeObjectRetain();
    uint64_t ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), (uint64_t)v20, v18);
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_6;
    }
    outlined consume of FeatureVectorizer<Float>.Transformer?(v7[2]);
    void v7[2] = ML16ColumnDescriptorVsAE_pTg5;
    void v7[3] = 0xD000000000000013;
    v7[4] = 0x80000002272D4D10;
  }
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  if (v1)
  {
LABEL_6:
    OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_8_1();
    return;
  }
  MEMORY[0x22A672220](*v0, v0[1]);
  AnyColumn.convertedToFloats()();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_25_0();
  v16();
  if (v15)
  {
    type metadata accessor for TreeRegressor();
    type metadata accessor for TreeRegressorModel();
    BaseTreeRegressor.update(_:features:annotations:eventHandler:)();
    OUTLINED_FUNCTION_25_0();
    v17();
    swift_release();
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance TreeRegressor()
{
  TreeRegressor.update(_:with:eventHandler:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(v1);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance TreeRegressor(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance TreeRegressor(a1, a2);
}

void protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance TreeRegressor()
{
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?);
  }
  return result;
}

void specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v0;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v43 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_40_0();
  uint64_t v13 = DataFrame.shape.getter();
  swift_bridgeObjectRetain();
  specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)(v13, v6, v4, (uint64_t)v1);
  uint64_t v42 = *(void *)(v6 + 16);
  if (!v42)
  {
LABEL_16:
    uint64_t v34 = (char *)v1 + *(int *)(v11 + 44);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t, char *))(v35 + 16))(v8, v34);
    goto LABEL_21;
  }
  uint64_t v39 = v11;
  uint64_t v40 = v8;
  swift_bridgeObjectRetain();
  unint64_t v14 = 0;
  uint64_t v15 = 56;
  uint64_t v41 = v6;
  uint64_t v44 = v1;
  while (2)
  {
    uint64_t v16 = v2;
    unint64_t v17 = v14;
    uint64_t v18 = *(void *)(v6 + v15 - 16);
    uint64_t v19 = *(void *)(v6 + v15 - 8);
    uint64_t v20 = *(unsigned __int8 *)(v6 + v15);
    uint64_t v21 = *(void *)(v6 + v15 - 24);
    swift_bridgeObjectRetain();
    char v45 = v20;
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v19, v20);
    MEMORY[0x22A672220](v21, v18);
    uint64_t v22 = *v1;
    if (v17 >= *(void *)(*v1 + 16))
    {
      __break(1u);
LABEL_23:
      __break(1u);
      JUMPOUT(0x2270A8794);
    }
    uint64_t v23 = v1[1];
    if (v17 >= *(void *)(v23 + 16)) {
      goto LABEL_23;
    }
    unint64_t v24 = v17 + 1;
    uint64_t v1 = *(void **)(v22 + v15 - 8);
    uint64_t v25 = *(unsigned __int8 *)(v22 + v15);
    uint64_t v26 = v23 + 8 * v17;
    uint64_t v27 = v16;
    switch(v25)
    {
      case 4:
        unint64_t v28 = v24;
        swift_bridgeObjectRetain();
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v1, 4);
        uint64_t v30 = OUTLINED_FUNCTION_48_2();
        specialized FeatureMatrixBuilder.fillCategorical(from:categories:column:)(v30, v31, v32);
        uint64_t v2 = v20;
        if (!v20) {
          goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        uint64_t v36 = (uint64_t)v1;
        char v37 = 4;
        goto LABEL_19;
      case 5:
        unint64_t v28 = v24;
        swift_bridgeObjectRetain();
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v1, 5);
        OUTLINED_FUNCTION_48_2();
        specialized FeatureMatrixBuilder.fillDictionary(from:descriptors:column:)();
        uint64_t v2 = v20;
        if (!v20)
        {
LABEL_12:
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v1, v25);
          uint64_t v6 = v41;
          uint64_t v1 = v44;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v19, v45);
          OUTLINED_FUNCTION_25_0();
          v33();
          v15 += 32;
          unint64_t v14 = v28;
          if (v42 == v28)
          {
            swift_bridgeObjectRelease();
            uint64_t v11 = v39;
            uint64_t v8 = v40;
            goto LABEL_16;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        uint64_t v36 = (uint64_t)v1;
        char v37 = 5;
LABEL_19:
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v36, v37);
        uint64_t v1 = v44;
LABEL_20:
        swift_bridgeObjectRelease();
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v19, v45);
        OUTLINED_FUNCTION_25_0();
        v38();
        swift_bridgeObjectRelease();
LABEL_21:
        outlined destroy of URL?((uint64_t)v1, &demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_8_1();
        return;
      case 6:
        unint64_t v28 = v24;
        OUTLINED_FUNCTION_71_1();
        specialized FeatureMatrixBuilder.fillInteger(from:column:)();
        goto LABEL_7;
      default:
        unint64_t v28 = v24;
        uint64_t v29 = (uint64_t)v1;
        uint64_t v1 = v44;
        uint64_t v20 = v27;
        specialized FeatureMatrixBuilder.fillArray(from:size:column:)(v43, v29, *(void *)(v26 + 32));
LABEL_7:
        uint64_t v2 = v20;
        if (v20) {
          goto LABEL_20;
        }
        uint64_t v6 = v41;
        goto LABEL_13;
    }
  }
}

uint64_t specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v49 = type metadata accessor for AnyColumn();
  uint64_t v9 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v51 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = v3;
  uint64_t v14 = DataFrame.shape.getter();
  swift_bridgeObjectRetain();
  specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)(v14, a1, a2, (uint64_t)v13);
  uint64_t v48 = *(void *)(a1 + 16);
  if (!v48)
  {
LABEL_16:
    uint64_t v35 = (char *)v13 + *(int *)(v11 + 44);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v36 - 8) + 16))(a3, v35, v36);
    return outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  }
  uint64_t v41 = v11;
  uint64_t v42 = a3;
  uint64_t v47 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  swift_bridgeObjectRetain();
  unint64_t v15 = 0;
  uint64_t v16 = 56;
  unint64_t v43 = 0x80000002272D5630;
  unint64_t v44 = 0x80000002272D5660;
  uint64_t v46 = a1;
  uint64_t v52 = v13;
  while (2)
  {
    uint64_t v17 = v5;
    unint64_t v18 = v15;
    uint64_t v19 = *(void *)(a1 + v16 - 16);
    uint64_t v20 = *(void *)(a1 + v16 - 8);
    int v21 = *(unsigned __int8 *)(a1 + v16);
    uint64_t v22 = *(void *)(a1 + v16 - 24);
    swift_bridgeObjectRetain();
    int v53 = v21;
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v20, v21);
    MEMORY[0x22A672220](v22, v19);
    uint64_t v23 = *v13;
    if (v18 >= *(void *)(*v13 + 16))
    {
      __break(1u);
LABEL_23:
      __break(1u);
      JUMPOUT(0x2270A8C64);
    }
    uint64_t v24 = v13[1];
    if (v18 >= *(void *)(v24 + 16)) {
      goto LABEL_23;
    }
    unint64_t v25 = v18 + 1;
    uint64_t v26 = *(void *)(v23 + v16 - 16);
    uint64_t v27 = *(uint64_t **)(v23 + v16 - 8);
    uint64_t v28 = *(unsigned __int8 *)(v23 + v16);
    uint64_t v29 = v24 + 8 * v18;
    uint64_t v30 = *(void *)(v29 + 32);
    uint64_t v5 = v17;
    switch(v28)
    {
      case 4:
        unint64_t v31 = v25;
        uint64_t v45 = v26;
        swift_bridgeObjectRetain();
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v27, 4);
        uint64_t v32 = v51;
        specialized FeatureMatrixBuilder.fillCategorical(from:categories:column:)(v51, v27, v30);
        if (!v5) {
          goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        uint64_t v37 = (uint64_t)v27;
        char v38 = 4;
        goto LABEL_19;
      case 5:
        unint64_t v31 = v25;
        uint64_t v45 = v26;
        swift_bridgeObjectRetain();
        outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v27, 5);
        uint64_t v32 = v51;
        specialized FeatureMatrixBuilder.fillDictionary(from:descriptors:column:)();
        if (!v5)
        {
LABEL_12:
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v27, v28);
          a1 = v46;
          uint64_t v13 = v52;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v20, v53);
          (*v47)(v32, v49);
          v16 += 32;
          unint64_t v15 = v31;
          if (v48 == v31)
          {
            swift_bridgeObjectRelease();
            uint64_t v11 = v41;
            a3 = v42;
            goto LABEL_16;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        uint64_t v37 = (uint64_t)v27;
        char v38 = 5;
LABEL_19:
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v37, v38);
        uint64_t v13 = v52;
LABEL_20:
        char v39 = v53;
        swift_bridgeObjectRelease();
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v20, v39);
        (*v47)(v32, v49);
        swift_bridgeObjectRelease();
        return outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      case 6:
        unint64_t v31 = v25;
        uint64_t v32 = v51;
        uint64_t v13 = v52;
        uint64_t v34 = v5;
        specialized FeatureMatrixBuilder.fillInteger(from:column:)();
        goto LABEL_7;
      default:
        unint64_t v31 = v25;
        uint64_t v32 = v51;
        uint64_t v33 = (uint64_t)v27;
        uint64_t v13 = v52;
        uint64_t v34 = v5;
        specialized FeatureMatrixBuilder.fillArray(from:size:column:)(v51, v33, *(void *)(v29 + 32));
LABEL_7:
        uint64_t v5 = v34;
        if (v34) {
          goto LABEL_20;
        }
        a1 = v46;
        goto LABEL_13;
    }
  }
}

uint64_t specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = result;
  *(void *)a4 = a2;
  *(unsigned char *)(a4 + 16) = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v8 = (char *)(a2 + 56);
    uint64_t v9 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v10 = *((void *)v8 - 1);
      char v11 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, v9);
        uint64_t v9 = v16;
      }
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v12 = *(void *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v9);
        uint64_t v9 = v17;
      }
      *(void *)(v9 + 16) = v13 + 1;
      *(void *)(v9 + 8 * v13 + 32) = v7;
      uint64_t v14 = ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v10, v11);
      swift_bridgeObjectRelease();
      unint64_t result = outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      BOOL v15 = __OFADD__(v7, v14);
      v7 += v14;
      if (v15)
      {
        __break(1u);
        goto LABEL_21;
      }
      v8 += 32;
      --v5;
    }
    while (v5);
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)(a4 + 8) = v9;
    if ((a3 & 1) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = 0;
    *(void *)(a4 + 8) = MEMORY[0x263F8EE78];
    if ((a3 & 1) == 0)
    {
LABEL_13:
      int v19 = 0;
      uint64_t v18 = v7;
      goto LABEL_14;
    }
  }
  uint64_t v18 = v7;
  if (__OFADD__(v7, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int v19 = 1;
LABEL_14:
  LODWORD(v26[0]) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  lazy protocol witness table accessor for type Float and conformance Float();
  unint64_t result = DenseMatrix.init(rowCount:columnCount:layout:repeating:)();
  if (!v19) {
    return result;
  }
  if (v4 < 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  if (v4)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = v20 + 1;
      uint64_t v22 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v26, v20, v18);
      *uint64_t v23 = 1065353216;
      unint64_t result = v22(v26, 0);
      uint64_t v20 = v21;
    }
    while (v4 != v21);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, void);
  void *v23;
  void v26[4];

  uint64_t v4 = result;
  *(void *)a4 = a2;
  *(unsigned char *)(a4 + 16) = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v8 = (char *)(a2 + 56);
    uint64_t v9 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v10 = *((void *)v8 - 1);
      char v11 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, v9);
        uint64_t v9 = v16;
      }
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v12 = *(void *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v9);
        uint64_t v9 = v17;
      }
      *(void *)(v9 + 16) = v13 + 1;
      *(void *)(v9 + 8 * v13 + 32) = v7;
      uint64_t v14 = ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v10, v11);
      swift_bridgeObjectRelease();
      unint64_t result = outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      BOOL v15 = __OFADD__(v7, v14);
      v7 += v14;
      if (v15)
      {
        __break(1u);
        goto LABEL_21;
      }
      v8 += 32;
      --v5;
    }
    while (v5);
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)(a4 + 8) = v9;
    if ((a3 & 1) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = 0;
    *(void *)(a4 + 8) = MEMORY[0x263F8EE78];
    if ((a3 & 1) == 0)
    {
LABEL_13:
      int v19 = 0;
      uint64_t v18 = v7;
      goto LABEL_14;
    }
  }
  uint64_t v18 = v7;
  if (__OFADD__(v7, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int v19 = 1;
LABEL_14:
  v26[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  lazy protocol witness table accessor for type Double and conformance Double();
  unint64_t result = DenseMatrix.init(rowCount:columnCount:layout:repeating:)();
  if (!v19) {
    return result;
  }
  if (v4 < 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  if (v4)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = v20 + 1;
      uint64_t v22 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v26, v20, v18);
      *uint64_t v23 = 0x3FF0000000000000;
      unint64_t result = v22(v26, 0);
      uint64_t v20 = v21;
    }
    while (v4 != v21);
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillCategorical(from:categories:column:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v125 = a2;
  uint64_t v131 = a3;
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  v120[0] = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  unint64_t v122 = (char *)v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  uint64_t v127 = *(uint64_t **)(v129 - 8);
  MEMORY[0x270FA5388](v129);
  unint64_t v128 = (char *)v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  uint64_t v130 = *(uint64_t **)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v9 = *(uint64_t (***)(char *, uint64_t))(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v124 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype())
  {
    uint64_t v123 = v7;
    uint64_t v124 = v5;
    AnyColumn.wrappedElementType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (!swift_dynamicCastMetatype())
    {
      AnyColumn.wrappedElementType.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
      if (!swift_dynamicCastMetatype()) {
        goto LABEL_89;
      }
      uint64_t v60 = v123;
      AnyColumn.assumingType<A>(_:)();
      uint64_t v61 = v124;
      uint64_t result = Column.count.getter();
      if (result < 0) {
        goto LABEL_142;
      }
      uint64_t v62 = (char *)result;
      uint64_t v63 = v130;
      if (!result) {
        return ((uint64_t (*)(char *, uint64_t))v63[1])(v60, v61);
      }
      uint64_t v64 = 0;
      uint64_t v65 = v125[2];
      unint64_t v128 = (char *)result;
      uint64_t v129 = (uint64_t)(v125 + 5);
      while (1)
      {
        if ((char *)v64 == v62) {
          goto LABEL_137;
        }
        Column.subscript.getter();
        uint64_t v66 = v132;
        if (v132)
        {
          if (v65) {
            goto LABEL_75;
          }
        }
        else
        {
          uint64_t v66 = Dictionary.init(dictionaryLiteral:)();
          if (v65)
          {
LABEL_75:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
            uint64_t v67 = 0;
            uint64_t v68 = (uint64_t *)v129;
            while (1)
            {
              uint64_t v69 = v131 + v67;
              if (__OFADD__(v131, v67)) {
                break;
              }
              if (*(void *)(v66 + 16))
              {
                uint64_t v70 = *(v68 - 1);
                uint64_t v71 = *v68;
                swift_bridgeObjectRetain();
                unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
                double v73 = 0.0;
                if (v74) {
                  double v73 = *(double *)(*(void *)(v66 + 56) + 8 * v72);
                }
                swift_bridgeObjectRelease();
              }
              else
              {
                double v73 = 0.0;
              }
              ++v67;
              float v75 = v73;
              uint64_t v76 = (void (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v132, v64, v69);
              *uint64_t v77 = v75;
              v76(&v132, 0);
              v68 += 2;
              if (v65 == v67)
              {
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v60 = v123;
                uint64_t v61 = v124;
                uint64_t v63 = v130;
                uint64_t v62 = v128;
                goto LABEL_86;
              }
            }
            __break(1u);
LABEL_132:
            Swift::Int v132 = 0;
            unint64_t v133 = 0xE000000000000000;
            _StringGuts.grow(_:)(52);
            v111._id object = (void *)0x80000002272D5780;
            v111._uint64_t countAndFlagsBits = 0xD000000000000024;
            String.append(_:)(v111);
            v112._uint64_t countAndFlagsBits = AnyColumn.name.getter();
            String.append(_:)(v112);
            swift_bridgeObjectRelease();
            v113._uint64_t countAndFlagsBits = 0x6720747562202C27;
            v113._id object = (void *)0xEB0000000020746FLL;
            String.append(_:)(v113);
            AnyColumn.wrappedElementType.getter();
            v114._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v114);
            swift_bridgeObjectRelease();
            v115._uint64_t countAndFlagsBits = 46;
            v115._id object = (void *)0xE100000000000000;
            String.append(_:)(v115);
            Swift::Int v116 = v132;
            unint64_t v117 = v133;
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            uint64_t v118 = swift_allocError();
            *(void *)uint64_t v119 = v116;
            *(void *)(v119 + 8) = v117;
            *(_OWORD *)(v119 + 16) = 0u;
            *(_OWORD *)(v119 + 32) = 0u;
            *(unsigned char *)(v119 + 48) = 0;
            v120[1] = v118;
            return swift_willThrow();
          }
        }
        uint64_t result = swift_bridgeObjectRelease();
LABEL_86:
        if ((char *)++v64 == v62) {
          return ((uint64_t (*)(char *, uint64_t))v63[1])(v60, v61);
        }
      }
    }
    AnyColumn.assumingType<A>(_:)();
    uint64_t result = Column.count.getter();
    if (result < 0) {
      goto LABEL_140;
    }
    if (!result) {
      return v9[1](v11, v8);
    }
    uint64_t v127 = v125 + 4;
    uint64_t v130 = (uint64_t *)v125[2];
    uint64_t v28 = 0;
    uint64_t v123 = (char *)v9;
    uint64_t v124 = v8;
    uint64_t v121 = result;
    unint64_t v122 = v11;
    while (1)
    {
      if (v28 == result) {
        goto LABEL_136;
      }
      Column.subscript.getter();
      Swift::Int v29 = v132 ? v132 : MEMORY[0x263F8EE78];
      uint64_t v30 = Set.init(minimumCapacity:)();
      uint64_t v134 = v30;
      uint64_t v31 = *(void *)(v29 + 16);
      if (v31)
      {
        uint64_t v32 = (Swift::Int *)(v29 + 40);
        do
        {
          Swift::Int v33 = *(v32 - 1);
          Swift::Int v34 = *v32;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v132, v33, v34);
          swift_bridgeObjectRelease();
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        uint64_t v35 = v134;
      }
      else
      {
        uint64_t v35 = v30;
        swift_bridgeObjectRelease();
      }
      if (v130) {
        break;
      }
LABEL_66:
      ++v28;
      swift_bridgeObjectRelease();
      uint64_t result = v121;
      char v11 = v122;
      uint64_t v9 = (uint64_t (**)(char *, uint64_t))v123;
      uint64_t v8 = v124;
      if (v28 == v121) {
        return v9[1](v11, v8);
      }
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
    uint64_t v37 = 0;
    uint64_t v129 = v126 + *(int *)(v36 + 44);
    unint64_t v128 = (char *)(v35 + 56);
    while (1)
    {
      uint64_t v38 = (uint64_t)v37 + v131;
      if (__OFADD__(v131, v37))
      {
        __break(1u);
        goto LABEL_110;
      }
      if (!*(void *)(v35 + 16))
      {
        float v46 = 0.0;
        goto LABEL_49;
      }
      uint64_t v39 = v28;
      uint64_t v40 = &v127[2 * (void)v37];
      uint64_t v42 = *v40;
      uint64_t v41 = v40[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v43 = Hasher._finalize()();
      uint64_t v44 = -1 << *(unsigned char *)(v35 + 32);
      unint64_t v45 = v43 & ~v44;
      float v46 = 0.0;
      if ((*(void *)&v128[(v45 >> 3) & 0xFFFFFFFFFFFFFF8] >> v45))
      {
        uint64_t v47 = *(void *)(v35 + 48);
        uint64_t v48 = (void *)(v47 + 16 * v45);
        BOOL v49 = *v48 == v42 && v48[1] == v41;
        if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          float v46 = 1.0;
        }
        else
        {
          char v125 = (uint64_t *)~v44;
          unint64_t v52 = (v45 + 1) & ~v44;
          if ((*(void *)&v128[(v52 >> 3) & 0xFFFFFFFFFFFFFF8] >> v52))
          {
            int v53 = (void *)(v47 + 16 * v52);
            BOOL v54 = *v53 == v42 && v53[1] == v41;
            uint64_t v28 = v39;
            if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_57:
              float v46 = 1.0;
            }
            else
            {
              unint64_t v55 = v52 + 1;
              uint64_t v56 = v125;
              while (1)
              {
                unint64_t v57 = v55 & (unint64_t)v56;
                if (((*(void *)&v128[((v55 & (unint64_t)v56) >> 3) & 0xFFFFFFFFFFFFFF8] >> (v55 & v56)) & 1) == 0) {
                  break;
                }
                uint64_t v58 = (void *)(v47 + 16 * v57);
                BOOL v59 = *v58 == v42 && v58[1] == v41;
                if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_57;
                }
                unint64_t v55 = v57 + 1;
              }
            }
            goto LABEL_47;
          }
        }
      }
      uint64_t v28 = v39;
LABEL_47:
      swift_bridgeObjectRelease();
LABEL_49:
      uint64_t v37 = (uint64_t *)((char *)v37 + 1);
      uint64_t v50 = (void (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v132, v28, v38);
      *uint64_t v51 = v46;
      v50(&v132, 0);
      if (v37 == v130) {
        goto LABEL_66;
      }
    }
  }
  AnyColumn.assumingType<A>(_:)();
  uint64_t result = Column.count.getter();
  if (result < 0) {
    goto LABEL_138;
  }
  uint64_t v129 = (uint64_t)v14;
  uint64_t v130 = (uint64_t *)v12;
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(v124 + 8))(v129, v130);
  }
  uint64_t v16 = 0;
  uint64_t v17 = v125[2];
  uint64_t v127 = v125 + 5;
  unint64_t v128 = (char *)result;
  while (1)
  {
    if (v16 == result)
    {
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    if (v17) {
      break;
    }
LABEL_20:
    ++v16;
    uint64_t result = (uint64_t)v128;
    if ((char *)v16 == v128) {
      return (*(uint64_t (**)(uint64_t, uint64_t *))(v124 + 8))(v129, v130);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  uint64_t v18 = 0;
  int v19 = v127;
  while (1)
  {
    uint64_t v20 = v131 + v18;
    if (__OFADD__(v131, v18)) {
      break;
    }
    uint64_t v21 = *(v19 - 1);
    uint64_t v22 = *v19;
    swift_bridgeObjectRetain();
    Column.subscript.getter();
    if (v133)
    {
      if (v21 == v132 && v133 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        float v25 = 1.0;
        goto LABEL_19;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      float v25 = 1.0;
      if (v24) {
        goto LABEL_19;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    float v25 = 0.0;
LABEL_19:
    ++v18;
    uint64_t v26 = (void (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v132, v16, v20);
    *uint64_t v27 = v25;
    v26(&v132, 0);
    v19 += 2;
    if (v17 == v18) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_89:
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v78 = v128;
    AnyColumn.assumingType<A>(_:)();
    uint64_t v79 = v129;
    uint64_t result = Column.count.getter();
    if (result < 0) {
      goto LABEL_143;
    }
    uint64_t v80 = v127;
    if (!result) {
      return ((uint64_t (*)(char *, uint64_t))v80[1])(v78, v79);
    }
    uint64_t v81 = 0;
    uint64_t v130 = (uint64_t *)result;
    uint64_t v82 = v125[2];
    v125 += 5;
    uint64_t v83 = result;
    while (v81 != v83)
    {
      Column.subscript.getter();
      uint64_t v84 = v132;
      if (v132)
      {
        if (v82) {
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v84 = Dictionary.init(dictionaryLiteral:)();
        if (v82)
        {
LABEL_96:
          uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
          uint64_t v85 = 0;
          uint64_t v86 = v125;
          while (1)
          {
            uint64_t v87 = v131 + v85;
            if (__OFADD__(v131, v85)) {
              break;
            }
            if (*(void *)(v84 + 16))
            {
              uint64_t v88 = *(v86 - 1);
              uint64_t v89 = *v86;
              swift_bridgeObjectRetain();
              unint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v89);
              int v91 = 0;
              if (v92) {
                int v91 = *(_DWORD *)(*(void *)(v84 + 56) + 4 * v90);
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              int v91 = 0;
            }
            ++v85;
            uint64_t v93 = (uint64_t (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v132, v81, v87);
            _DWORD *v94 = v91;
            uint64_t result = v93(&v132, 0);
            v86 += 2;
            if (v82 == v85)
            {
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v78 = v128;
              uint64_t v79 = v129;
              uint64_t v80 = v127;
              uint64_t v83 = (uint64_t)v130;
              goto LABEL_107;
            }
          }
          __break(1u);
          goto LABEL_134;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_107:
      if (++v81 == v83) {
        return ((uint64_t (*)(char *, uint64_t))v80[1])(v78, v79);
      }
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    return result;
  }
LABEL_110:
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if (!swift_dynamicCastMetatype()) {
    goto LABEL_132;
  }
  AnyColumn.assumingType<A>(_:)();
  uint64_t v95 = v121;
  uint64_t result = Column.count.getter();
  if (result < 0) {
    goto LABEL_144;
  }
  uint64_t v96 = result;
  uint64_t v97 = v120[0];
  if (result)
  {
    uint64_t v98 = 0;
    uint64_t v99 = v125[2];
    uint64_t v129 = result;
    uint64_t v130 = v125 + 5;
    while (v98 != v96)
    {
      Column.subscript.getter();
      uint64_t v100 = v132;
      if (v132)
      {
        if (v99) {
          goto LABEL_117;
        }
      }
      else
      {
        uint64_t v100 = Dictionary.init(dictionaryLiteral:)();
        if (v99)
        {
LABEL_117:
          uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
          uint64_t v101 = 0;
          uint64_t v102 = v130;
          while (1)
          {
            uint64_t v103 = v131 + v101;
            if (__OFADD__(v131, v101)) {
              goto LABEL_135;
            }
            if (*(void *)(v100 + 16))
            {
              uint64_t v104 = *(v102 - 1);
              uint64_t v105 = *v102;
              swift_bridgeObjectRetain();
              unint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v105);
              if (v107) {
                uint64_t v108 = *(void *)(*(void *)(v100 + 56) + 8 * v106);
              }
              else {
                uint64_t v108 = 0;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v108 = 0;
            }
            ++v101;
            long long v109 = (uint64_t (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v132, v98, v103);
            float *v110 = (float)v108;
            uint64_t result = v109(&v132, 0);
            v102 += 2;
            if (v99 == v101)
            {
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v95 = v121;
              uint64_t v97 = v120[0];
              uint64_t v96 = v129;
              goto LABEL_129;
            }
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_129:
      if (++v98 == v96) {
        return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v122, v95);
      }
    }
    goto LABEL_141;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v122, v95);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (**v9)(char *, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  double v25;
  void (*v26)(Swift::Int *, void);
  double *v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int *v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  uint64_t v47;
  void *v48;
  BOOL v49;
  void (*v50)(Swift::Int *, void);
  double *v51;
  unint64_t v52;
  void *v53;
  BOOL v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  void *v58;
  BOOL v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(Swift::Int *, void);
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float v90;
  char v91;
  uint64_t (*v92)(Swift::Int *, void);
  double *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t (*v108)(Swift::Int *, void);
  double *v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::Int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void v119[2];
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  Swift::Int v131;
  unint64_t v132;
  uint64_t v133;

  uint64_t v124 = a2;
  uint64_t v130 = a3;
  unint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  v119[0] = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v121 = (char *)v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  uint64_t v126 = *(uint64_t **)(v128 - 8);
  MEMORY[0x270FA5388](v128);
  uint64_t v127 = (char *)v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  uint64_t v129 = *(uint64_t **)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v9 = *(uint64_t (***)(char *, uint64_t))(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v123 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype())
  {
    unint64_t v122 = v7;
    uint64_t v123 = v5;
    AnyColumn.wrappedElementType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (!swift_dynamicCastMetatype())
    {
      AnyColumn.wrappedElementType.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
      if (!swift_dynamicCastMetatype()) {
        goto LABEL_89;
      }
      uint64_t v60 = v122;
      AnyColumn.assumingType<A>(_:)();
      uint64_t v61 = v123;
      uint64_t result = Column.count.getter();
      if (result < 0) {
        goto LABEL_142;
      }
      uint64_t v62 = (char *)result;
      uint64_t v63 = v129;
      if (!result) {
        return ((uint64_t (*)(char *, uint64_t))v63[1])(v60, v61);
      }
      uint64_t v64 = 0;
      uint64_t v65 = v124[2];
      uint64_t v127 = (char *)result;
      unint64_t v128 = (uint64_t)(v124 + 5);
      while (1)
      {
        if ((char *)v64 == v62) {
          goto LABEL_137;
        }
        Column.subscript.getter();
        uint64_t v66 = v131;
        if (v131)
        {
          if (v65) {
            goto LABEL_75;
          }
        }
        else
        {
          uint64_t v66 = Dictionary.init(dictionaryLiteral:)();
          if (v65)
          {
LABEL_75:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
            uint64_t v67 = 0;
            uint64_t v68 = (uint64_t *)v128;
            while (1)
            {
              uint64_t v69 = v130 + v67;
              if (__OFADD__(v130, v67)) {
                break;
              }
              if (*(void *)(v66 + 16))
              {
                uint64_t v70 = *(v68 - 1);
                uint64_t v71 = *v68;
                swift_bridgeObjectRetain();
                unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
                double v73 = 0;
                if (v74) {
                  double v73 = *(void *)(*(void *)(v66 + 56) + 8 * v72);
                }
                swift_bridgeObjectRelease();
              }
              else
              {
                double v73 = 0;
              }
              ++v67;
              float v75 = (void (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v131, v64, v69);
              *uint64_t v76 = v73;
              v75(&v131, 0);
              v68 += 2;
              if (v65 == v67)
              {
                uint64_t result = swift_bridgeObjectRelease();
                uint64_t v60 = v122;
                uint64_t v61 = v123;
                uint64_t v63 = v129;
                uint64_t v62 = v127;
                goto LABEL_86;
              }
            }
            __break(1u);
LABEL_132:
            uint64_t v131 = 0;
            Swift::Int v132 = 0xE000000000000000;
            _StringGuts.grow(_:)(52);
            v110._id object = (void *)0x80000002272D5780;
            v110._uint64_t countAndFlagsBits = 0xD000000000000024;
            String.append(_:)(v110);
            v111._uint64_t countAndFlagsBits = AnyColumn.name.getter();
            String.append(_:)(v111);
            swift_bridgeObjectRelease();
            v112._uint64_t countAndFlagsBits = 0x6720747562202C27;
            v112._id object = (void *)0xEB0000000020746FLL;
            String.append(_:)(v112);
            AnyColumn.wrappedElementType.getter();
            v113._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v113);
            swift_bridgeObjectRelease();
            v114._uint64_t countAndFlagsBits = 46;
            v114._id object = (void *)0xE100000000000000;
            String.append(_:)(v114);
            Swift::String v115 = v131;
            Swift::Int v116 = v132;
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            unint64_t v117 = swift_allocError();
            *(void *)uint64_t v118 = v115;
            *(void *)(v118 + 8) = v116;
            *(_OWORD *)(v118 + 16) = 0u;
            *(_OWORD *)(v118 + 32) = 0u;
            *(unsigned char *)(v118 + 48) = 0;
            v119[1] = v117;
            return swift_willThrow();
          }
        }
        uint64_t result = swift_bridgeObjectRelease();
LABEL_86:
        if ((char *)++v64 == v62) {
          return ((uint64_t (*)(char *, uint64_t))v63[1])(v60, v61);
        }
      }
    }
    AnyColumn.assumingType<A>(_:)();
    uint64_t result = Column.count.getter();
    if (result < 0) {
      goto LABEL_140;
    }
    if (!result) {
      return v9[1](v11, v8);
    }
    uint64_t v126 = v124 + 4;
    uint64_t v129 = (uint64_t *)v124[2];
    uint64_t v28 = 0;
    unint64_t v122 = (char *)v9;
    uint64_t v123 = v8;
    unint64_t v120 = result;
    uint64_t v121 = v11;
    while (1)
    {
      if (v28 == result) {
        goto LABEL_136;
      }
      Column.subscript.getter();
      Swift::Int v29 = v131 ? v131 : MEMORY[0x263F8EE78];
      uint64_t v30 = Set.init(minimumCapacity:)();
      unint64_t v133 = v30;
      uint64_t v31 = *(void *)(v29 + 16);
      if (v31)
      {
        uint64_t v32 = (Swift::Int *)(v29 + 40);
        do
        {
          Swift::Int v33 = *(v32 - 1);
          Swift::Int v34 = *v32;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v131, v33, v34);
          swift_bridgeObjectRelease();
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        uint64_t v35 = v133;
      }
      else
      {
        uint64_t v35 = v30;
        swift_bridgeObjectRelease();
      }
      if (v129) {
        break;
      }
LABEL_66:
      ++v28;
      swift_bridgeObjectRelease();
      uint64_t result = v120;
      char v11 = v121;
      uint64_t v9 = (uint64_t (**)(char *, uint64_t))v122;
      uint64_t v8 = v123;
      if (v28 == v120) {
        return v9[1](v11, v8);
      }
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
    uint64_t v37 = 0;
    unint64_t v128 = v125 + *(int *)(v36 + 44);
    uint64_t v127 = (char *)(v35 + 56);
    while (1)
    {
      uint64_t v38 = (uint64_t)v37 + v130;
      if (__OFADD__(v130, v37))
      {
        __break(1u);
        goto LABEL_110;
      }
      if (!*(void *)(v35 + 16))
      {
        float v46 = 0.0;
        goto LABEL_49;
      }
      uint64_t v39 = v28;
      uint64_t v40 = &v126[2 * (void)v37];
      uint64_t v42 = *v40;
      uint64_t v41 = v40[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v43 = Hasher._finalize()();
      uint64_t v44 = -1 << *(unsigned char *)(v35 + 32);
      unint64_t v45 = v43 & ~v44;
      float v46 = 0.0;
      if ((*(void *)&v127[(v45 >> 3) & 0xFFFFFFFFFFFFFF8] >> v45))
      {
        uint64_t v47 = *(void *)(v35 + 48);
        uint64_t v48 = (void *)(v47 + 16 * v45);
        BOOL v49 = *v48 == v42 && v48[1] == v41;
        if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          float v46 = 1.0;
        }
        else
        {
          uint64_t v124 = (uint64_t *)~v44;
          unint64_t v52 = (v45 + 1) & ~v44;
          if ((*(void *)&v127[(v52 >> 3) & 0xFFFFFFFFFFFFFF8] >> v52))
          {
            int v53 = (void *)(v47 + 16 * v52);
            BOOL v54 = *v53 == v42 && v53[1] == v41;
            uint64_t v28 = v39;
            if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_57:
              float v46 = 1.0;
            }
            else
            {
              unint64_t v55 = v52 + 1;
              uint64_t v56 = v124;
              while (1)
              {
                unint64_t v57 = v55 & (unint64_t)v56;
                if (((*(void *)&v127[((v55 & (unint64_t)v56) >> 3) & 0xFFFFFFFFFFFFFF8] >> (v55 & v56)) & 1) == 0) {
                  break;
                }
                uint64_t v58 = (void *)(v47 + 16 * v57);
                BOOL v59 = *v58 == v42 && v58[1] == v41;
                if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_57;
                }
                unint64_t v55 = v57 + 1;
              }
            }
            goto LABEL_47;
          }
        }
      }
      uint64_t v28 = v39;
LABEL_47:
      swift_bridgeObjectRelease();
LABEL_49:
      uint64_t v37 = (uint64_t *)((char *)v37 + 1);
      uint64_t v50 = (void (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v131, v28, v38);
      *uint64_t v51 = v46;
      v50(&v131, 0);
      if (v37 == v129) {
        goto LABEL_66;
      }
    }
  }
  AnyColumn.assumingType<A>(_:)();
  uint64_t result = Column.count.getter();
  if (result < 0) {
    goto LABEL_138;
  }
  unint64_t v128 = (uint64_t)v14;
  uint64_t v129 = (uint64_t *)v12;
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(v123 + 8))(v128, v129);
  }
  uint64_t v16 = 0;
  uint64_t v17 = v124[2];
  uint64_t v126 = v124 + 5;
  uint64_t v127 = (char *)result;
  while (1)
  {
    if (v16 == result)
    {
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    if (v17) {
      break;
    }
LABEL_20:
    ++v16;
    uint64_t result = (uint64_t)v127;
    if ((char *)v16 == v127) {
      return (*(uint64_t (**)(uint64_t, uint64_t *))(v123 + 8))(v128, v129);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  uint64_t v18 = 0;
  int v19 = v126;
  while (1)
  {
    uint64_t v20 = v130 + v18;
    if (__OFADD__(v130, v18)) {
      break;
    }
    uint64_t v21 = *(v19 - 1);
    uint64_t v22 = *v19;
    swift_bridgeObjectRetain();
    Column.subscript.getter();
    if (v132)
    {
      if (v21 == v131 && v132 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        float v25 = 1.0;
        goto LABEL_19;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      float v25 = 1.0;
      if (v24) {
        goto LABEL_19;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    float v25 = 0.0;
LABEL_19:
    ++v18;
    uint64_t v26 = (void (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v131, v16, v20);
    *uint64_t v27 = v25;
    v26(&v131, 0);
    v19 += 2;
    if (v17 == v18) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_89:
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v77 = v127;
    AnyColumn.assumingType<A>(_:)();
    uint64_t v78 = v128;
    uint64_t result = Column.count.getter();
    if (result < 0) {
      goto LABEL_143;
    }
    uint64_t v79 = v126;
    if (!result) {
      return ((uint64_t (*)(char *, uint64_t))v79[1])(v77, v78);
    }
    uint64_t v80 = 0;
    uint64_t v129 = (uint64_t *)result;
    uint64_t v81 = v124[2];
    v124 += 5;
    uint64_t v82 = result;
    while (v80 != v82)
    {
      Column.subscript.getter();
      uint64_t v83 = v131;
      if (v131)
      {
        if (v81) {
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v83 = Dictionary.init(dictionaryLiteral:)();
        if (v81)
        {
LABEL_96:
          uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
          uint64_t v84 = 0;
          uint64_t v85 = v124;
          while (1)
          {
            uint64_t v86 = v130 + v84;
            if (__OFADD__(v130, v84)) {
              break;
            }
            if (*(void *)(v83 + 16))
            {
              uint64_t v87 = *(v85 - 1);
              uint64_t v88 = *v85;
              swift_bridgeObjectRetain();
              uint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v87, v88);
              unint64_t v90 = 0.0;
              if (v91) {
                unint64_t v90 = *(float *)(*(void *)(v83 + 56) + 4 * v89);
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v90 = 0.0;
            }
            ++v84;
            char v92 = (uint64_t (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v131, v80, v86);
            *uint64_t v93 = v90;
            uint64_t result = v92(&v131, 0);
            v85 += 2;
            if (v81 == v84)
            {
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v77 = v127;
              uint64_t v78 = v128;
              uint64_t v79 = v126;
              uint64_t v82 = (uint64_t)v129;
              goto LABEL_107;
            }
          }
          __break(1u);
          goto LABEL_134;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_107:
      if (++v80 == v82) {
        return ((uint64_t (*)(char *, uint64_t))v79[1])(v77, v78);
      }
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    return result;
  }
LABEL_110:
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if (!swift_dynamicCastMetatype()) {
    goto LABEL_132;
  }
  AnyColumn.assumingType<A>(_:)();
  int v94 = v120;
  uint64_t result = Column.count.getter();
  if (result < 0) {
    goto LABEL_144;
  }
  uint64_t v95 = result;
  uint64_t v96 = v119[0];
  if (result)
  {
    uint64_t v97 = 0;
    uint64_t v98 = v124[2];
    unint64_t v128 = result;
    uint64_t v129 = v124 + 5;
    while (v97 != v95)
    {
      Column.subscript.getter();
      uint64_t v99 = v131;
      if (v131)
      {
        if (v98) {
          goto LABEL_117;
        }
      }
      else
      {
        uint64_t v99 = Dictionary.init(dictionaryLiteral:)();
        if (v98)
        {
LABEL_117:
          uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
          uint64_t v100 = 0;
          uint64_t v101 = v129;
          while (1)
          {
            uint64_t v102 = v130 + v100;
            if (__OFADD__(v130, v100)) {
              goto LABEL_135;
            }
            if (*(void *)(v99 + 16))
            {
              uint64_t v103 = *(v101 - 1);
              uint64_t v104 = *v101;
              swift_bridgeObjectRetain();
              uint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v103, v104);
              if (v106) {
                char v107 = *(void *)(*(void *)(v99 + 56) + 8 * v105);
              }
              else {
                char v107 = 0;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              char v107 = 0;
            }
            ++v100;
            uint64_t v108 = (uint64_t (*)(Swift::Int *, void))specialized DenseMatrix.subscript.modify(&v131, v97, v102);
            *long long v109 = (double)v107;
            uint64_t result = v108(&v131, 0);
            v101 += 2;
            if (v98 == v100)
            {
              uint64_t result = swift_bridgeObjectRelease();
              int v94 = v120;
              uint64_t v96 = v119[0];
              uint64_t v95 = v128;
              goto LABEL_129;
            }
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_129:
      if (++v97 == v95) {
        return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v121, v94);
      }
    }
    goto LABEL_141;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v121, v94);
}

void specialized FeatureMatrixBuilder.fillDictionary(from:descriptors:column:)()
{
  OUTLINED_FUNCTION_9_0();
  float v46 = v3;
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  OUTLINED_FUNCTION_0();
  uint64_t v33 = v7;
  uint64_t v34 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v32 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  OUTLINED_FUNCTION_0();
  uint64_t v36 = v9;
  uint64_t v37 = v10;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v35 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  OUTLINED_FUNCTION_0();
  uint64_t v39 = v13;
  uint64_t v40 = v12;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v38 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  OUTLINED_FUNCTION_0();
  uint64_t v42 = v16;
  uint64_t v43 = v15;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_40_0();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  OUTLINED_FUNCTION_0();
  uint64_t v41 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_41_1();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  OUTLINED_FUNCTION_0();
  uint64_t v22 = v21;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_41_0();
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    OUTLINED_FUNCTION_35_5();
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v20);
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UInt8]);
  if (OUTLINED_FUNCTION_41_4())
  {
    OUTLINED_FUNCTION_38_3();
    OUTLINED_FUNCTION_35_5();
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v0, v17);
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int32]);
  if (OUTLINED_FUNCTION_41_4())
  {
    OUTLINED_FUNCTION_38_3();
    OUTLINED_FUNCTION_35_5();
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v2, v43);
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
  if (OUTLINED_FUNCTION_41_4())
  {
    uint64_t v24 = v38;
    OUTLINED_FUNCTION_38_3();
    OUTLINED_FUNCTION_35_5();
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
    uint64_t v26 = v39;
    uint64_t v25 = v40;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
  if (OUTLINED_FUNCTION_41_4())
  {
    uint64_t v24 = v35;
    OUTLINED_FUNCTION_38_3();
    OUTLINED_FUNCTION_35_5();
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any?]);
  if (OUTLINED_FUNCTION_41_4())
  {
    OUTLINED_FUNCTION_38_3();
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(v32, v44, v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  }
  else
  {
    _StringGuts.grow(_:)(56);
    v27._id object = (void *)0x80000002272D57B0;
    v27._uint64_t countAndFlagsBits = 0xD000000000000028;
    String.append(_:)(v27);
    v28._uint64_t countAndFlagsBits = AnyColumn.name.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_4();
    AnyColumn.wrappedElementType.getter();
    v29._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v30 = OUTLINED_FUNCTION_85();
    *uint64_t v31 = 0;
    v31[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_8_4(v30, (uint64_t)v31);
  }
LABEL_6:
  OUTLINED_FUNCTION_8_1();
}

void specialized FeatureMatrixBuilder.fillInteger(from:column:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_36_3(v2, v3, v4, v5, v6);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  OUTLINED_FUNCTION_0();
  uint64_t v61 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_45_2((uint64_t)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_0();
  uint64_t v64 = v11;
  uint64_t v65 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_55_3(v12, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  OUTLINED_FUNCTION_0();
  uint64_t v67 = v14;
  uint64_t v68 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_57_3(v15, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float16>);
  OUTLINED_FUNCTION_0();
  uint64_t v70 = v17;
  uint64_t v71 = v16;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_54_3(v18, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  OUTLINED_FUNCTION_0();
  uint64_t v73 = v19;
  uint64_t v74 = v20;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_29_3(v21, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v76 = v23;
  uint64_t v77 = v22;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_56_4(v24, (uint64_t)v60[0]);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  OUTLINED_FUNCTION_0();
  uint64_t v79 = v26;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_41_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  OUTLINED_FUNCTION_0();
  uint64_t v78 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_40_0();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v32 = v31;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_58_2();
  if (!swift_dynamicCastMetatype())
  {
    uint64_t v34 = v79;
    if (swift_dynamicCastMetatype())
    {
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_53_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      uint64_t v35 = OUTLINED_FUNCTION_80_1();
      v36(v35);
      goto LABEL_5;
    }
    if (swift_dynamicCastMetatype())
    {
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_53_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v0, v25);
      goto LABEL_5;
    }
    if (swift_dynamicCastMetatype())
    {
      uint64_t v37 = v75;
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_53_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      uint64_t v39 = v76;
      uint64_t v38 = v77;
LABEL_10:
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
      goto LABEL_5;
    }
    if (swift_dynamicCastMetatype())
    {
      uint64_t v40 = v72;
      OUTLINED_FUNCTION_34_3();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v40, v80, &demangling cache variable for type metadata for Column<Int64>);
      uint64_t v41 = v73;
      uint64_t v42 = v74;
    }
    else if (swift_dynamicCastMetatype())
    {
      uint64_t v40 = v69;
      OUTLINED_FUNCTION_28_4();
      uint64_t v43 = OUTLINED_FUNCTION_20_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v43);
      uint64_t v42 = v70;
      uint64_t v41 = v71;
    }
    else
    {
      if (!swift_dynamicCastMetatype())
      {
        if (swift_dynamicCastMetatype())
        {
          uint64_t v37 = v63;
          OUTLINED_FUNCTION_28_4();
          uint64_t v47 = OUTLINED_FUNCTION_20_4();
          specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v47);
          uint64_t v39 = v64;
          uint64_t v38 = v65;
          goto LABEL_10;
        }
        type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (!swift_dynamicCastMetatype())
        {
          OUTLINED_FUNCTION_60_2();
          OUTLINED_FUNCTION_50_2();
          v83._uint64_t countAndFlagsBits = AnyColumn.name.getter();
          OUTLINED_FUNCTION_78_1(v83);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_4();
          AnyColumn.wrappedElementType.getter();
          v84._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          OUTLINED_FUNCTION_78_1(v84);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_88_0();
          uint64_t v56 = v81;
          uint64_t v57 = v82;
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          uint64_t v58 = OUTLINED_FUNCTION_85();
          *BOOL v59 = v56;
          v59[1] = v57;
          OUTLINED_FUNCTION_8_4(v58, (uint64_t)v59);
          goto LABEL_5;
        }
        OUTLINED_FUNCTION_52_2();
        int v48 = OUTLINED_FUNCTION_20_4();
        specialized FeatureMatrixBuilder.fillInteger(from:column:)(v48, v49, v50, v51, v52, v53, v54, v55, v60[0], (uint64_t)v60[1], (uint64_t)v60[2], (uint64_t)v60[3], v61, v62, v63, v64, v65, v66, v67,
          v68,
          v69,
          v70,
          v71,
          v72,
          v73,
          v74);
        uint64_t v46 = OUTLINED_FUNCTION_51_3();
LABEL_18:
        v45(v46, v41);
        goto LABEL_5;
      }
      uint64_t v40 = v66;
      OUTLINED_FUNCTION_28_4();
      uint64_t v44 = OUTLINED_FUNCTION_20_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v44);
      uint64_t v42 = v67;
      uint64_t v41 = v68;
    }
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    uint64_t v46 = v40;
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_34_3();
  specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v1, v80, &demangling cache variable for type metadata for Column<Int>);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v1, v30);
LABEL_5:
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60[4];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_36_3(v2, v3, v4, v5, v6);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  OUTLINED_FUNCTION_0();
  uint64_t v61 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_45_2((uint64_t)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_0();
  uint64_t v64 = v11;
  uint64_t v65 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_55_3(v12, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  OUTLINED_FUNCTION_0();
  uint64_t v67 = v14;
  uint64_t v68 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_57_3(v15, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float16>);
  OUTLINED_FUNCTION_0();
  uint64_t v70 = v17;
  uint64_t v71 = v16;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_54_3(v18, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  OUTLINED_FUNCTION_0();
  uint64_t v73 = v19;
  uint64_t v74 = v20;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_29_3(v21, (uint64_t)v60[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v76 = v23;
  uint64_t v77 = v22;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_56_4(v24, (uint64_t)v60[0]);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  OUTLINED_FUNCTION_0();
  uint64_t v79 = v26;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_41_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  OUTLINED_FUNCTION_0();
  uint64_t v78 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_40_0();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v32 = v31;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_58_2();
  if (!swift_dynamicCastMetatype())
  {
    uint64_t v34 = v79;
    if (swift_dynamicCastMetatype())
    {
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_53_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      uint64_t v35 = OUTLINED_FUNCTION_80_1();
      v36(v35);
      goto LABEL_5;
    }
    if (swift_dynamicCastMetatype())
    {
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_53_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v0, v25);
      goto LABEL_5;
    }
    if (swift_dynamicCastMetatype())
    {
      uint64_t v37 = v75;
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_53_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      uint64_t v39 = v76;
      uint64_t v38 = v77;
LABEL_10:
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
      goto LABEL_5;
    }
    if (swift_dynamicCastMetatype())
    {
      uint64_t v40 = v72;
      OUTLINED_FUNCTION_34_3();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v40, v80, &demangling cache variable for type metadata for Column<Int64>);
      uint64_t v41 = v73;
      uint64_t v42 = v74;
    }
    else if (swift_dynamicCastMetatype())
    {
      uint64_t v40 = v69;
      OUTLINED_FUNCTION_28_4();
      uint64_t v43 = OUTLINED_FUNCTION_20_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v43);
      uint64_t v42 = v70;
      uint64_t v41 = v71;
    }
    else
    {
      if (!swift_dynamicCastMetatype())
      {
        if (swift_dynamicCastMetatype())
        {
          uint64_t v37 = v63;
          OUTLINED_FUNCTION_28_4();
          uint64_t v47 = OUTLINED_FUNCTION_20_4();
          specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v47);
          uint64_t v39 = v64;
          uint64_t v38 = v65;
          goto LABEL_10;
        }
        type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (!swift_dynamicCastMetatype())
        {
          OUTLINED_FUNCTION_60_2();
          OUTLINED_FUNCTION_50_2();
          v83._uint64_t countAndFlagsBits = AnyColumn.name.getter();
          OUTLINED_FUNCTION_78_1(v83);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_4();
          AnyColumn.wrappedElementType.getter();
          v84._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          OUTLINED_FUNCTION_78_1(v84);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_88_0();
          uint64_t v56 = v81;
          uint64_t v57 = v82;
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          uint64_t v58 = OUTLINED_FUNCTION_85();
          *BOOL v59 = v56;
          v59[1] = v57;
          OUTLINED_FUNCTION_8_4(v58, (uint64_t)v59);
          goto LABEL_5;
        }
        OUTLINED_FUNCTION_52_2();
        int v48 = OUTLINED_FUNCTION_20_4();
        specialized FeatureMatrixBuilder.fillInteger(from:column:)(v48, v49, v50, v51, v52, v53, v54, v55, v60[0], (uint64_t)v60[1], (uint64_t)v60[2], (uint64_t)v60[3], v61, v62, v63, v64, v65, v66, v67,
          v68,
          v69,
          v70,
          v71,
          v72,
          v73,
          v74);
        uint64_t v46 = OUTLINED_FUNCTION_51_3();
LABEL_18:
        v45(v46, v41);
        goto LABEL_5;
      }
      uint64_t v40 = v66;
      OUTLINED_FUNCTION_28_4();
      uint64_t v44 = OUTLINED_FUNCTION_20_4();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v44);
      uint64_t v42 = v67;
      uint64_t v41 = v68;
    }
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    uint64_t v46 = v40;
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_34_3();
  specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v1, v80, &demangling cache variable for type metadata for Column<Int>);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v1, v30);
LABEL_5:
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_8_1();
}

uint64_t specialized FeatureMatrixBuilder.fillArray(from:size:column:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = a3;
  uint64_t v69 = a2;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  uint64_t v48 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  int v50 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v52 = *(void *)(v53 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v53);
  uint64_t v47 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int v51 = (char *)&v47 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  MEMORY[0x270FA5388](v7);
  int v54 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v57 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v60 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v65 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v63 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v66 = *(void *)(v15 - 8);
  uint64_t v67 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  uint64_t v68 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v24, v69, v70);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  uint64_t v26 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float16]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v20, v69, v70);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v20, v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v17, v69, v70);
    uint64_t v28 = v66;
    uint64_t v27 = v67;
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v17 = v63;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v17, v69, v70);
    uint64_t v28 = v64;
    uint64_t v27 = v65;
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v17 = v60;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray(from:size:column:)((uint64_t)v17, v69, v70);
    uint64_t v28 = v61;
    uint64_t v27 = v62;
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  uint64_t v29 = swift_dynamicCastMetatype();
  uint64_t v30 = v69;
  uint64_t v31 = v70;
  if (v29)
  {
    uint64_t v32 = (uint64_t)v57;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v32, v30, v31);
    uint64_t v34 = v58;
    uint64_t v33 = v59;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v32 = (uint64_t)v54;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v32, v30, v31);
    uint64_t v34 = v55;
    uint64_t v33 = v56;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v35 = (uint64_t)v51;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v35, v30, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v35, v53);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      uint64_t v36 = (uint64_t)v47;
      uint64_t v37 = v49;
      uint64_t v38 = v50;
      Column.mapNonNil<A>(_:)();
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v36, v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v36, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v38, v37);
    }
    else
    {
      uint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v39._id object = (void *)0x80000002272D5690;
      v39._uint64_t countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v39);
      v40._uint64_t countAndFlagsBits = AnyColumn.name.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._uint64_t countAndFlagsBits = 0x6720747562202C27;
      v41._id object = (void *)0xEB0000000020746FLL;
      String.append(_:)(v41);
      AnyColumn.wrappedElementType.getter();
      v42._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._uint64_t countAndFlagsBits = 46;
      v43._id object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      uint64_t v44 = v71;
      unint64_t v45 = v72;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v46 = v44;
      *(void *)(v46 + 8) = v45;
      *(_OWORD *)(v46 + 16) = 0u;
      *(_OWORD *)(v46 + 32) = 0u;
      *(unsigned char *)(v46 + 48) = 0;
      return swift_willThrow();
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;

  uint64_t v70 = a3;
  uint64_t v69 = a2;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  uint64_t v48 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  int v50 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  uint64_t v52 = *(void *)(v53 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v53);
  uint64_t v47 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int v51 = (char *)&v47 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  MEMORY[0x270FA5388](v7);
  int v54 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v57 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v60 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v65 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v63 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v66 = *(void *)(v15 - 8);
  uint64_t v67 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  uint64_t v68 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v24, v69, v70);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  uint64_t v26 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float16]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v20, v69, v70);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v20, v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v17, v69, v70);
    uint64_t v28 = v66;
    uint64_t v27 = v67;
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v17 = v63;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v17, v69, v70);
    uint64_t v28 = v64;
    uint64_t v27 = v65;
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v17 = v60;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray(from:size:column:)((uint64_t)v17, v69, v70);
    uint64_t v28 = v61;
    uint64_t v27 = v62;
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  uint64_t v29 = swift_dynamicCastMetatype();
  uint64_t v30 = v69;
  uint64_t v31 = v70;
  if (v29)
  {
    uint64_t v32 = (uint64_t)v57;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v32, v30, v31);
    uint64_t v34 = v58;
    uint64_t v33 = v59;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v32 = (uint64_t)v54;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v32, v30, v31);
    uint64_t v34 = v55;
    uint64_t v33 = v56;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v35 = (uint64_t)v51;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v35, v30, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v35, v53);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      uint64_t v36 = (uint64_t)v47;
      uint64_t v37 = v49;
      uint64_t v38 = v50;
      Column.mapNonNil<A>(_:)();
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v36, v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v36, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v38, v37);
    }
    else
    {
      uint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v39._id object = (void *)0x80000002272D5690;
      v39._uint64_t countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v39);
      v40._uint64_t countAndFlagsBits = AnyColumn.name.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._uint64_t countAndFlagsBits = 0x6720747562202C27;
      v41._id object = (void *)0xEB0000000020746FLL;
      String.append(_:)(v41);
      AnyColumn.wrappedElementType.getter();
      v42._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._uint64_t countAndFlagsBits = 46;
      v43._id object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      uint64_t v44 = v71;
      unint64_t v45 = v72;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v46 = v44;
      *(void *)(v46 + 8) = v45;
      *(_OWORD *)(v46 + 16) = 0u;
      *(_OWORD *)(v46 + 32) = 0u;
      *(unsigned char *)(v46 + 48) = 0;
      return swift_willThrow();
    }
  }
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t (*v21)(uint64_t *, void);
  float *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t (**v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  long long v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  Swift::String v43 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  Swift::String v41 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t v35 = v3;
  if (result)
  {
    uint64_t v15 = 0;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    Swift::String v39 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v42 = xmmword_2272CB370;
    uint64_t v37 = result;
    uint64_t v38 = v8;
    while (v15 != v14)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        (*v36)(v12, v8, v9);
      }
      uint64_t v16 = MLShapedArray.shape.getter();
      if (*(void *)(v16 + 16) != 1 || *(void *)(v16 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = 0;
        unint64_t v45 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v23._uint64_t countAndFlagsBits = 0xD000000000000023;
        v23._id object = (void *)0x80000002272D5730;
        String.append(_:)(v23);
        uint64_t v46 = a2;
        v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v25._id object = (void *)0xEF27206572757461;
        String.append(_:)(v25);
        v26._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._id object = (void *)0x80000002272D5760;
        v27._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v27);
        MLShapedArray.shape.getter();
        v28._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v29._id object = (void *)0xE800000000000000;
        String.append(_:)(v29);
        uint64_t v46 = v15;
        v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 46;
        v31._id object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        uint64_t v32 = v44;
        uint64_t v33 = v45;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v34 = v32;
        *(void *)(v34 + 8) = v33;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(unsigned char *)(v34 + 48) = 0;
        swift_willThrow();
        return (*v39)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        uint64_t v17 = 0;
        while (1)
        {
          uint64_t v18 = v43 + v17;
          if (__OFADD__(v43, v17)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = v42;
          *(void *)(v19 + 32) = v17;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v20 = (float)(int)v44;
          uint64_t v21 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v44, v15, v18);
          *uint64_t v22 = v20;
          uint64_t result = v21(&v44, 0);
          if (a2 == ++v17) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v15;
      uint64_t result = (*v39)(v12, v9);
      uint64_t v14 = v37;
      uint64_t v8 = v38;
      if (v15 == v37) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t (*v21)(uint64_t *, void);
  double *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t (**v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  long long v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  Swift::String v43 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  Swift::String v41 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t v35 = v3;
  if (result)
  {
    uint64_t v15 = 0;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    Swift::String v39 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v42 = xmmword_2272CB370;
    uint64_t v37 = result;
    uint64_t v38 = v8;
    while (v15 != v14)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        (*v36)(v12, v8, v9);
      }
      uint64_t v16 = MLShapedArray.shape.getter();
      if (*(void *)(v16 + 16) != 1 || *(void *)(v16 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = 0;
        unint64_t v45 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v23._uint64_t countAndFlagsBits = 0xD000000000000023;
        v23._id object = (void *)0x80000002272D5730;
        String.append(_:)(v23);
        uint64_t v46 = a2;
        v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v25._id object = (void *)0xEF27206572757461;
        String.append(_:)(v25);
        v26._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._id object = (void *)0x80000002272D5760;
        v27._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v27);
        MLShapedArray.shape.getter();
        v28._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v29._id object = (void *)0xE800000000000000;
        String.append(_:)(v29);
        uint64_t v46 = v15;
        v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 46;
        v31._id object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        uint64_t v32 = v44;
        uint64_t v33 = v45;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v34 = v32;
        *(void *)(v34 + 8) = v33;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(unsigned char *)(v34 + 48) = 0;
        swift_willThrow();
        return (*v39)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v17 = 0;
        while (1)
        {
          uint64_t v18 = v43 + v17;
          if (__OFADD__(v43, v17)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = v42;
          *(void *)(v19 + 32) = v17;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v20 = (double)(int)v44;
          uint64_t v21 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v44, v15, v18);
          *uint64_t v22 = v20;
          uint64_t result = v21(&v44, 0);
          if (a2 == ++v17) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v15;
      uint64_t result = (*v39)(v12, v9);
      uint64_t v14 = v37;
      uint64_t v8 = v38;
      if (v15 == v37) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

#error "2270AD070: call analysis failed (funcsize=34)"

#error "2270AD100: call analysis failed (funcsize=34)"

#error "2270AD190: call analysis failed (funcsize=34)"

#error "2270AD214: call analysis failed (funcsize=32)"

#error "2270AD2A4: call analysis failed (funcsize=34)"

#error "2270AD334: call analysis failed (funcsize=34)"

#error "2270AD3C4: call analysis failed (funcsize=34)"

#error "2270AD448: call analysis failed (funcsize=32)"

#error "2270AD4D8: call analysis failed (funcsize=34)"

#error "2270AD564: call analysis failed (funcsize=33)"

#error "2270AD5F4: call analysis failed (funcsize=34)"

#error "2270AD684: call analysis failed (funcsize=34)"

#error "2270AD714: call analysis failed (funcsize=34)"

#error "2270AD7A0: call analysis failed (funcsize=33)"

#error "2270AD864: call analysis failed (funcsize=45)"

#error "2270AD924: call analysis failed (funcsize=46)"

uint64_t specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27) {
        uint64_t v8 = v27;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._uint64_t countAndFlagsBits = 0xD000000000000015;
        v15._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v15);
        uint64_t v29 = a2;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 0xD000000000000017;
        v17._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v19._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v29 = v9;
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._id object = (void *)0x80000002272D5710;
        v21._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        uint64_t v29 = v7;
        v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 46;
        v23._id object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        uint64_t v24 = v27;
        unint64_t v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v26 = v24;
        *(void *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(unsigned char *)(v26 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          float v12 = (float)*(uint64_t *)(v8 + 32 + 8 * v10);
          uint64_t v13 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *uint64_t v14 = v12;
          uint64_t result = v13(&v27, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t (*v13)(uint64_t *, void);
  double *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27) {
        uint64_t v8 = v27;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._uint64_t countAndFlagsBits = 0xD000000000000015;
        v15._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v15);
        uint64_t v29 = a2;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 0xD000000000000017;
        v17._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v19._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v29 = v9;
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._id object = (void *)0x80000002272D5710;
        v21._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        uint64_t v29 = v7;
        v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 46;
        v23._id object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        uint64_t v24 = v27;
        unint64_t v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v26 = v24;
        *(void *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(unsigned char *)(v26 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          float v12 = (double)*(uint64_t *)(v8 + 32 + 8 * v10);
          uint64_t v13 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *uint64_t v14 = v12;
          uint64_t result = v13(&v27, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v18)(uint64_t *, void);
  _DWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v32) {
        uint64_t v8 = v32;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v20._uint64_t countAndFlagsBits = 0xD000000000000015;
        v20._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v20);
        uint64_t v34 = a2;
        v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._uint64_t countAndFlagsBits = 0xD000000000000017;
        v22._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v22);
        v23._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v24._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        uint64_t v34 = v9;
        v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._id object = (void *)0x80000002272D5710;
        v26._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v26);
        uint64_t v34 = v7;
        v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._uint64_t countAndFlagsBits = 46;
        v28._id object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        uint64_t v29 = v32;
        uint64_t v30 = v33;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v31 = v29;
        *(void *)(v31 + 8) = v30;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(unsigned char *)(v31 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          _H0 = *(_WORD *)(v8 + 32 + 2 * v10);
          __asm { FCVT            S8, H0 }
          Swift::String v18 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v32, v7, a3 + v10);
          *Swift::String v19 = _S8;
          uint64_t result = v18(&v32, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t (*v13)(uint64_t *, void);
  _DWORD *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27) {
        uint64_t v8 = v27;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._uint64_t countAndFlagsBits = 0xD000000000000015;
        v15._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v15);
        uint64_t v29 = a2;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 0xD000000000000017;
        v17._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v19._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v29 = v9;
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._id object = (void *)0x80000002272D5710;
        v21._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        uint64_t v29 = v7;
        v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 46;
        v23._id object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        uint64_t v24 = v27;
        unint64_t v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v26 = v24;
        *(void *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(unsigned char *)(v26 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          float v12 = *(_DWORD *)(v8 + 32 + 4 * v10);
          uint64_t v13 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *uint64_t v14 = v12;
          uint64_t result = v13(&v27, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t (*v13)(uint64_t *, void);
  float *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27) {
        uint64_t v8 = v27;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._uint64_t countAndFlagsBits = 0xD000000000000015;
        v15._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v15);
        uint64_t v29 = a2;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 0xD000000000000017;
        v17._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v19._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v29 = v9;
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._id object = (void *)0x80000002272D5710;
        v21._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        uint64_t v29 = v7;
        v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 46;
        v23._id object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        uint64_t v24 = v27;
        unint64_t v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v26 = v24;
        *(void *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(unsigned char *)(v26 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          float v12 = *(double *)(v8 + 32 + 8 * v10);
          uint64_t v13 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *uint64_t v14 = v12;
          uint64_t result = v13(&v27, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v18)(uint64_t *, void);
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v32) {
        uint64_t v8 = v32;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v20._uint64_t countAndFlagsBits = 0xD000000000000015;
        v20._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v20);
        uint64_t v34 = a2;
        v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._uint64_t countAndFlagsBits = 0xD000000000000017;
        v22._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v22);
        v23._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v24._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        uint64_t v34 = v9;
        v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._id object = (void *)0x80000002272D5710;
        v26._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v26);
        uint64_t v34 = v7;
        v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._uint64_t countAndFlagsBits = 46;
        v28._id object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        uint64_t v29 = v32;
        uint64_t v30 = v33;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v31 = v29;
        *(void *)(v31 + 8) = v30;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(unsigned char *)(v31 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          _H0 = *(_WORD *)(v8 + 32 + 2 * v10);
          __asm { FCVT            D8, H0 }
          Swift::String v18 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v32, v7, a3 + v10);
          *Swift::String v19 = _D8;
          uint64_t result = v18(&v32, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t (*v13)(uint64_t *, void);
  double *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27) {
        uint64_t v8 = v27;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._uint64_t countAndFlagsBits = 0xD000000000000015;
        v15._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v15);
        uint64_t v29 = a2;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 0xD000000000000017;
        v17._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v19._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v29 = v9;
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._id object = (void *)0x80000002272D5710;
        v21._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        uint64_t v29 = v7;
        v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 46;
        v23._id object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        uint64_t v24 = v27;
        unint64_t v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v26 = v24;
        *(void *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(unsigned char *)(v26 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          float v12 = *(float *)(v8 + 32 + 4 * v10);
          uint64_t v13 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *uint64_t v14 = v12;
          uint64_t result = v13(&v27, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, void);
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27) {
        uint64_t v8 = v27;
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 != a2)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._uint64_t countAndFlagsBits = 0xD000000000000015;
        v15._id object = (void *)0x80000002272D56D0;
        String.append(_:)(v15);
        uint64_t v29 = a2;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 0xD000000000000017;
        v17._id object = (void *)0x80000002272D56F0;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x6720747562202C27;
        v19._id object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v29 = v9;
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._id object = (void *)0x80000002272D5710;
        v21._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        uint64_t v29 = v7;
        v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 46;
        v23._id object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        uint64_t v24 = v27;
        unint64_t v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v26 = v24;
        *(void *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(unsigned char *)(v26 + 48) = 0;
        return swift_willThrow();
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        unint64_t v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(void *)(v8 + 16)) {
            goto LABEL_19;
          }
          unint64_t v11 = v10 + 1;
          float v12 = *(void *)(v8 + 32 + 8 * v10);
          uint64_t v13 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *uint64_t v14 = v12;
          uint64_t result = v13(&v27, 0);
          unint64_t v10 = v11;
          if (a2 == v11) {
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 == v6) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v26)(uint64_t *, void);
  _DWORD *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t (**v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  uint64_t v48 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  float v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  uint64_t v46 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  Swift::String v40 = v3;
  if (result)
  {
    Swift::String v15 = 0;
    Swift::String v41 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v44 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    uint64_t v47 = xmmword_2272CB370;
    Swift::String v42 = result;
    Swift::String v43 = v8;
    while (v15 != v14)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
      }
      else
      {
        (*v41)(v12, v8, v9);
      }
      Swift::String v16 = MLShapedArray.shape.getter();
      if (*(void *)(v16 + 16) != 1 || *(void *)(v16 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = 0;
        int v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v28._uint64_t countAndFlagsBits = 0xD000000000000023;
        v28._id object = (void *)0x80000002272D5730;
        String.append(_:)(v28);
        int v51 = a2;
        v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v30._id object = (void *)0xEF27206572757461;
        String.append(_:)(v30);
        v31._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._id object = (void *)0x80000002272D5760;
        v32._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v32);
        MLShapedArray.shape.getter();
        v33._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v34._id object = (void *)0xE800000000000000;
        String.append(_:)(v34);
        int v51 = v15;
        v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        v36._uint64_t countAndFlagsBits = 46;
        v36._id object = (void *)0xE100000000000000;
        String.append(_:)(v36);
        uint64_t v37 = v49;
        uint64_t v38 = v50;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)Swift::String v39 = v37;
        *(void *)(v39 + 8) = v38;
        *(_OWORD *)(v39 + 16) = 0u;
        *(_OWORD *)(v39 + 32) = 0u;
        *(unsigned char *)(v39 + 48) = 0;
        swift_willThrow();
        return (*v44)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        Swift::String v17 = 0;
        while (1)
        {
          Swift::String v18 = v48 + v17;
          if (__OFADD__(v48, v17)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          Swift::String v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = v47;
          *(void *)(v19 + 32) = v17;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          _H0 = v49;
          __asm { FCVT            S8, H0 }
          uint64_t v26 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v49, v15, v18);
          *uint64_t v27 = _S8;
          uint64_t result = v26(&v49, 0);
          if (a2 == ++v17) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v15;
      uint64_t result = (*v44)(v12, v9);
      uint64_t v14 = v42;
      uint64_t v8 = v43;
      if (v15 == v42) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(uint64_t *, void);
  _DWORD *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t (**v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  long long v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  Swift::String v42 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  float v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  Swift::String v40 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v34 = v3;
  if (result)
  {
    uint64_t v14 = 0;
    uint64_t v35 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v41 = xmmword_2272CB370;
    uint64_t v36 = result;
    uint64_t v37 = v8;
    while (v14 != result)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      }
      else
      {
        (*v35)(v12, v8, v9);
      }
      Swift::String v15 = MLShapedArray.shape.getter();
      if (*(void *)(v15 + 16) != 1 || *(void *)(v15 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        Swift::String v43 = 0;
        uint64_t v44 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v22._uint64_t countAndFlagsBits = 0xD000000000000023;
        v22._id object = (void *)0x80000002272D5730;
        String.append(_:)(v22);
        unint64_t v45 = a2;
        v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v24._id object = (void *)0xEF27206572757461;
        String.append(_:)(v24);
        v25._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._id object = (void *)0x80000002272D5760;
        v26._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v26);
        MLShapedArray.shape.getter();
        v27._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v28._id object = (void *)0xE800000000000000;
        String.append(_:)(v28);
        unint64_t v45 = v14;
        v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 46;
        v30._id object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        uint64_t v31 = v43;
        uint64_t v32 = v44;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v33 = v31;
        *(void *)(v33 + 8) = v32;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = 0u;
        *(unsigned char *)(v33 + 48) = 0;
        swift_willThrow();
        return (*v38)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        Swift::String v16 = 0;
        while (1)
        {
          Swift::String v17 = v42 + v16;
          if (__OFADD__(v42, v16)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          Swift::String v18 = swift_allocObject();
          *(_OWORD *)(v18 + 16) = v41;
          *(void *)(v18 + 32) = v16;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v19 = v43;
          Swift::String v20 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v43, v14, v17);
          *Swift::String v21 = v19;
          uint64_t result = v20(&v43, 0);
          if (a2 == ++v16) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v14;
      (*v38)(v12, v9);
      uint64_t result = v36;
      uint64_t v8 = v37;
      if (v14 == v36) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t (*v21)(double *, void);
  float *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  double v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t (**v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  long long v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  uint64_t v46;

  Swift::String v43 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  float v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  Swift::String v41 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t v35 = v3;
  if (result)
  {
    Swift::String v15 = 0;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    Swift::String v39 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v42 = xmmword_2272CB370;
    uint64_t v37 = result;
    uint64_t v38 = v8;
    while (v15 != v14)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Double>?);
      }
      else
      {
        (*v36)(v12, v8, v9);
      }
      Swift::String v16 = MLShapedArray.shape.getter();
      if (*(void *)(v16 + 16) != 1 || *(void *)(v16 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = 0.0;
        unint64_t v45 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v23._uint64_t countAndFlagsBits = 0xD000000000000023;
        v23._id object = (void *)0x80000002272D5730;
        String.append(_:)(v23);
        uint64_t v46 = a2;
        v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v25._id object = (void *)0xEF27206572757461;
        String.append(_:)(v25);
        v26._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._id object = (void *)0x80000002272D5760;
        v27._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v27);
        MLShapedArray.shape.getter();
        v28._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v29._id object = (void *)0xE800000000000000;
        String.append(_:)(v29);
        uint64_t v46 = v15;
        v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 46;
        v31._id object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        uint64_t v32 = v44;
        uint64_t v33 = v45;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(double *)uint64_t v34 = v32;
        *(void *)(v34 + 8) = v33;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(unsigned char *)(v34 + 48) = 0;
        swift_willThrow();
        return (*v39)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        Swift::String v17 = 0;
        while (1)
        {
          Swift::String v18 = v43 + v17;
          if (__OFADD__(v43, v17)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          Swift::String v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = v42;
          *(void *)(v19 + 32) = v17;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v20 = v44;
          Swift::String v21 = (uint64_t (*)(double *, void))specialized DenseMatrix.subscript.modify(&v44, v15, v18);
          *Swift::String v22 = v20;
          uint64_t result = v21(&v44, 0);
          if (a2 == ++v17) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v15;
      uint64_t result = (*v39)(v12, v9);
      uint64_t v14 = v37;
      uint64_t v8 = v38;
      if (v15 == v37) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v26)(uint64_t *, void);
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t (**v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  uint64_t v48 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  float v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  uint64_t v46 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  Swift::String v40 = v3;
  if (result)
  {
    Swift::String v15 = 0;
    Swift::String v41 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v44 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    uint64_t v47 = xmmword_2272CB370;
    Swift::String v42 = result;
    Swift::String v43 = v8;
    while (v15 != v14)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
      }
      else
      {
        (*v41)(v12, v8, v9);
      }
      Swift::String v16 = MLShapedArray.shape.getter();
      if (*(void *)(v16 + 16) != 1 || *(void *)(v16 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = 0;
        int v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v28._uint64_t countAndFlagsBits = 0xD000000000000023;
        v28._id object = (void *)0x80000002272D5730;
        String.append(_:)(v28);
        int v51 = a2;
        v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v30._id object = (void *)0xEF27206572757461;
        String.append(_:)(v30);
        v31._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._id object = (void *)0x80000002272D5760;
        v32._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v32);
        MLShapedArray.shape.getter();
        v33._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v34._id object = (void *)0xE800000000000000;
        String.append(_:)(v34);
        int v51 = v15;
        v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        v36._uint64_t countAndFlagsBits = 46;
        v36._id object = (void *)0xE100000000000000;
        String.append(_:)(v36);
        uint64_t v37 = v49;
        uint64_t v38 = v50;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)Swift::String v39 = v37;
        *(void *)(v39 + 8) = v38;
        *(_OWORD *)(v39 + 16) = 0u;
        *(_OWORD *)(v39 + 32) = 0u;
        *(unsigned char *)(v39 + 48) = 0;
        swift_willThrow();
        return (*v44)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        Swift::String v17 = 0;
        while (1)
        {
          Swift::String v18 = v48 + v17;
          if (__OFADD__(v48, v17)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          Swift::String v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = v47;
          *(void *)(v19 + 32) = v17;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          _H0 = v49;
          __asm { FCVT            D8, H0 }
          uint64_t v26 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v49, v15, v18);
          *uint64_t v27 = _D8;
          uint64_t result = v26(&v49, 0);
          if (a2 == ++v17) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v15;
      uint64_t result = (*v44)(v12, v9);
      uint64_t v14 = v42;
      uint64_t v8 = v43;
      if (v15 == v42) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t (*v21)(uint64_t *, void);
  double *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t (**v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  long long v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  Swift::String v43 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  float v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  Swift::String v41 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t v35 = v3;
  if (result)
  {
    Swift::String v15 = 0;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    Swift::String v39 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v42 = xmmword_2272CB370;
    uint64_t v37 = result;
    uint64_t v38 = v8;
    while (v15 != v14)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      }
      else
      {
        (*v36)(v12, v8, v9);
      }
      Swift::String v16 = MLShapedArray.shape.getter();
      if (*(void *)(v16 + 16) != 1 || *(void *)(v16 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = 0;
        unint64_t v45 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v23._uint64_t countAndFlagsBits = 0xD000000000000023;
        v23._id object = (void *)0x80000002272D5730;
        String.append(_:)(v23);
        uint64_t v46 = a2;
        v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v25._id object = (void *)0xEF27206572757461;
        String.append(_:)(v25);
        v26._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._id object = (void *)0x80000002272D5760;
        v27._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v27);
        MLShapedArray.shape.getter();
        v28._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v29._id object = (void *)0xE800000000000000;
        String.append(_:)(v29);
        uint64_t v46 = v15;
        v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 46;
        v31._id object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        uint64_t v32 = v44;
        uint64_t v33 = v45;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v34 = v32;
        *(void *)(v34 + 8) = v33;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(unsigned char *)(v34 + 48) = 0;
        swift_willThrow();
        return (*v39)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        Swift::String v17 = 0;
        while (1)
        {
          Swift::String v18 = v43 + v17;
          if (__OFADD__(v43, v17)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          Swift::String v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = v42;
          *(void *)(v19 + 32) = v17;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v20 = *(float *)&v44;
          Swift::String v21 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v44, v15, v18);
          *Swift::String v22 = v20;
          uint64_t result = v21(&v44, 0);
          if (a2 == ++v17) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v15;
      uint64_t result = (*v39)(v12, v9);
      uint64_t v14 = v37;
      uint64_t v8 = v38;
      if (v15 == v37) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t *, void);
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t (**v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  long long v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  Swift::String v42 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  float v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  Swift::String v40 = a1;
  uint64_t result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v34 = v3;
  if (result)
  {
    uint64_t v14 = 0;
    uint64_t v35 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
    Swift::String v41 = xmmword_2272CB370;
    uint64_t v36 = result;
    uint64_t v37 = v8;
    while (v14 != result)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for MLShapedArray<Double>?);
      }
      else
      {
        (*v35)(v12, v8, v9);
      }
      Swift::String v15 = MLShapedArray.shape.getter();
      if (*(void *)(v15 + 16) != 1 || *(void *)(v15 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        Swift::String v43 = 0;
        uint64_t v44 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v22._uint64_t countAndFlagsBits = 0xD000000000000023;
        v22._id object = (void *)0x80000002272D5730;
        String.append(_:)(v22);
        unint64_t v45 = a2;
        v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
        v24._id object = (void *)0xEF27206572757461;
        String.append(_:)(v24);
        v25._uint64_t countAndFlagsBits = Column.name.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._id object = (void *)0x80000002272D5760;
        v26._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v26);
        MLShapedArray.shape.getter();
        v27._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28._uint64_t countAndFlagsBits = 0x20776F7220746120;
        v28._id object = (void *)0xE800000000000000;
        String.append(_:)(v28);
        unint64_t v45 = v14;
        v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 46;
        v30._id object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        uint64_t v31 = v43;
        uint64_t v32 = v44;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v33 = v31;
        *(void *)(v33 + 8) = v32;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = 0u;
        *(unsigned char *)(v33 + 48) = 0;
        swift_willThrow();
        return (*v38)(v12, v9);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (a2 < 0) {
        goto LABEL_20;
      }
      if (a2)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        Swift::String v16 = 0;
        while (1)
        {
          Swift::String v17 = v42 + v16;
          if (__OFADD__(v42, v16)) {
            break;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          Swift::String v18 = swift_allocObject();
          *(_OWORD *)(v18 + 16) = v41;
          *(void *)(v18 + 32) = v16;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v19 = v43;
          Swift::String v20 = (uint64_t (*)(uint64_t *, void))specialized DenseMatrix.subscript.modify(&v43, v14, v17);
          *Swift::String v21 = v19;
          uint64_t result = v20(&v43, 0);
          if (a2 == ++v16) {
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v14;
      (*v38)(v12, v9);
      uint64_t result = v36;
      uint64_t v8 = v37;
      if (v14 == v36) {
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

#error "2270B1B84: call analysis failed (funcsize=100)"

#error "2270B1D20: call analysis failed (funcsize=100)"

#error "2270B1EBC: call analysis failed (funcsize=100)"

void specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)()
{
  OUTLINED_FUNCTION_61_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  uint64_t v4 = Column.count.getter();
  if (v4 < 0) {
    goto LABEL_27;
  }
  uint64_t v5 = v4;
  if (v4)
  {
    OUTLINED_FUNCTION_47_3();
    while (1)
    {
      if (v1 == v5) {
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_39_4();
      uint64_t v6 = v42;
      if (!(void)v42) {
        uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
      }
      if (v38) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_20:
      OUTLINED_FUNCTION_66_1();
      if (v28) {
        return;
      }
    }
    uint64_t v37 = v1;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_64_1();
    while (1)
    {
      OUTLINED_FUNCTION_16_6();
      if (v0)
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = OUTLINED_FUNCTION_14_5();
        if (v8)
        {
          uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
          uint64_t v10 = swift_bridgeObjectRelease();
          *(void *)&long long v39 = v9;
          Swift::String v18 = OUTLINED_FUNCTION_69_1(v10, v11, v12, v13, v14, v15, v16, v17, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
                  v40,
                  MEMORY[0x263F8D538],
                  v42);
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_74_0();
      }
      OUTLINED_FUNCTION_76_1();
LABEL_15:
      if (__OFADD__(v36, v5))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }
      unint64_t v25 = OUTLINED_FUNCTION_37_2((uint64_t)v18, v19, v20, v21, v22, v23, v36 + v5, v24, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
              *((uint64_t *)&v39 + 1),
              v40,
              v41,
              v42);
      v26(v25);
      if (v0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30_5();
        outlined destroy of URL?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        return;
      }
      OUTLINED_FUNCTION_68_1();
      outlined destroy of URL?(v27, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v3, v2);
      if (v38 == ++v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v2 = v29;
        uint64_t v5 = v30;
        uint64_t v1 = v37;
        goto LABEL_20;
      }
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *);
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;

  OUTLINED_FUNCTION_61_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  uint64_t v4 = Column.count.getter();
  if (v4 < 0) {
    goto LABEL_27;
  }
  uint64_t v5 = v4;
  if (v4)
  {
    OUTLINED_FUNCTION_47_3();
    while (1)
    {
      if (v1 == v5) {
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_39_4();
      uint64_t v6 = v42;
      if (!(void)v42) {
        uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
      }
      if (v38) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_20:
      OUTLINED_FUNCTION_66_1();
      if (v28) {
        return;
      }
    }
    uint64_t v37 = v1;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_64_1();
    while (1)
    {
      OUTLINED_FUNCTION_16_6();
      if (v0)
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = OUTLINED_FUNCTION_14_5();
        if (v8)
        {
          uint64_t v9 = *(_DWORD *)(*(void *)(v6 + 56) + 4 * v7);
          uint64_t v10 = swift_bridgeObjectRelease();
          LODWORD(v39) = v9;
          Swift::String v18 = OUTLINED_FUNCTION_69_1(v10, v11, v12, v13, v14, v15, v16, v17, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
                  v40,
                  MEMORY[0x263F8D5C8],
                  v42);
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_74_0();
      }
      OUTLINED_FUNCTION_76_1();
LABEL_15:
      if (__OFADD__(v36, v5))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }
      unint64_t v25 = OUTLINED_FUNCTION_37_2((uint64_t)v18, v19, v20, v21, v22, v23, v36 + v5, v24, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
              *((uint64_t *)&v39 + 1),
              v40,
              v41,
              v42);
      v26(v25);
      if (v0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30_5();
        outlined destroy of URL?((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        return;
      }
      OUTLINED_FUNCTION_68_1();
      outlined destroy of URL?(v27, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v3, v2);
      if (v38 == ++v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v2 = v29;
        uint64_t v5 = v30;
        uint64_t v1 = v37;
        goto LABEL_20;
      }
    }
  }
}

void specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  uint64_t v6 = Column.count.getter();
  if (v6 < 0) {
    goto LABEL_29;
  }
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v29 = *(void *)(a2 + 16);
    uint64_t v9 = (unsigned __int8 *)(a2 + 56);
    uint64_t v20 = v6;
    uint64_t v19 = (unsigned __int8 *)(a2 + 56);
    while (1)
    {
      if (v8 == v7) {
        goto LABEL_28;
      }
      Column.subscript.getter();
      uint64_t v10 = *(void *)&v28[0];
      if (!*(void *)&v28[0])
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
      }
      if (v29) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_23:
      if (++v8 == v7) {
        return;
      }
    }
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v12 = *((void *)v9 - 3);
      uint64_t v11 = *((void *)v9 - 2);
      uint64_t v13 = *((void *)v9 - 1);
      uint64_t v14 = *v9;
      if (!*(void *)(v10 + 16)) {
        break;
      }
      swift_bridgeObjectRetain_n();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v13, v14);
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
      if (v16)
      {
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v10 + 56) + 32 * v15, (uint64_t)&v22, &demangling cache variable for type metadata for Any?);
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 1;
      }
      swift_bridgeObjectRelease();
      if (v25 == 1) {
        goto LABEL_15;
      }
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      *(void *)&long long v26 = swift_allocObject();
      outlined init with take of Any?((uint64_t)&v22, v26 + 16);
      outlined init with take of Any(&v26, v28);
LABEL_17:
      OUTLINED_FUNCTION_83_1();
      if (v17)
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        return;
      }
      a4(v28, v12, v11, v13, v14, v8);
      if (v4)
      {
        swift_bridgeObjectRelease();
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v13, v14);
        swift_bridgeObjectRelease();
        outlined destroy of URL?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        return;
      }
      v9 += 32;
      outlined destroy of URL?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_32_4(v13);
      if (v18)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v19;
        uint64_t v7 = v20;
        goto LABEL_23;
      }
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 1;
    swift_bridgeObjectRetain();
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v13, v14);
LABEL_15:
    outlined destroy of URL?((uint64_t)&v22, &demangling cache variable for type metadata for Any??);
    memset(v28, 0, 32);
    goto LABEL_17;
  }
}

uint64_t specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v76 = a7;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v81, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v82 + 1)) {
    return outlined destroy of URL?((uint64_t)&v81, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any(&v81, &v83);
  switch((char)a5)
  {
    case 4:
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) == 0)
      {
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(a4, 4);
        *(void *)&long long v81 = 0;
        *((void *)&v81 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(62);
        unint64_t v37 = 0xD000000000000024;
        uint64_t v38 = "Expected string values for feature '";
        goto LABEL_38;
      }
      uint64_t v75 = v8;
      uint64_t v15 = *((void *)&v77 + 1);
      uint64_t v16 = a4;
      uint64_t v17 = *(void *)(a4 + 16);
      if (v17)
      {
        uint64_t v18 = v77;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        uint64_t v19 = 0;
        uint64_t v20 = (void *)(v16 + 40);
        while (1)
        {
          uint64_t v21 = v76 + v19;
          if (__OFADD__(v76, v19)) {
            break;
          }
          float v22 = 1.0;
          if (*(v20 - 1) != v18 || *v20 != v15)
          {
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              float v22 = 1.0;
            }
            else {
              float v22 = 0.0;
            }
          }
          ++v19;
          uint64_t v24 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v81, a6, v21);
          *uint64_t v25 = v22;
          v24(&v81, 0);
          v20 += 2;
          if (v17 == v19) {
            goto LABEL_17;
          }
        }
        __break(1u);
LABEL_61:
        __break(1u);
        JUMPOUT(0x2270B3188);
      }
LABEL_17:
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v83);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v16, 4);
      return swift_bridgeObjectRelease();
    case 5:
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast())
      {
        uint64_t v74 = *(void *)(a4 + 16);
        if (v74)
        {
          uint64_t v75 = v7;
          uint64_t v73 = a6;
          uint64_t v26 = 0;
          uint64_t v72 = a4;
          uint64_t v27 = (unsigned __int8 *)(a4 + 56);
          while (1)
          {
            uint64_t v29 = *((void *)v27 - 3);
            uint64_t v28 = *((void *)v27 - 2);
            uint64_t v30 = *((void *)v27 - 1);
            uint64_t v31 = *v27;
            if (*(void *)(v77 + 16))
            {
              swift_bridgeObjectRetain_n();
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
              unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
              if (v33)
              {
                outlined init with copy of Any(*(void *)(v77 + 56) + 32 * v32, (uint64_t)&v81);
              }
              else
              {
                long long v81 = 0u;
                long long v82 = 0u;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              long long v81 = 0u;
              long long v82 = 0u;
              swift_bridgeObjectRetain();
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
            }
            if (__OFADD__(v76, v26)) {
              goto LABEL_61;
            }
            specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(&v81, v29, v28, v30, v31, v73, v76 + v26);
            swift_bridgeObjectRelease();
            if (v8) {
              break;
            }
            v27 += 32;
            outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
            outlined destroy of URL?((uint64_t)&v81, &demangling cache variable for type metadata for Any?);
            if (v74 == ++v26)
            {
              swift_bridgeObjectRelease();
              a4 = v72;
              goto LABEL_46;
            }
          }
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
          outlined destroy of URL?((uint64_t)&v81, &demangling cache variable for type metadata for Any?);
          uint64_t v56 = v72;
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_46:
          uint64_t v56 = a4;
        }
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v56, 5);
        goto LABEL_57;
      }
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(a4, 5);
      *(void *)&long long v81 = 0;
      *((void *)&v81 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      unint64_t v37 = 0xD000000000000028;
      uint64_t v38 = "Expected dictionary values for feature '";
LABEL_38:
      unint64_t v39 = (unint64_t)(v38 - 32) | 0x8000000000000000;
      goto LABEL_39;
    case 6:
      if (!a4)
      {
        outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
        if (!swift_dynamicCast())
        {
          uint64_t v79 = 0;
          long long v77 = 0u;
          long long v78 = 0u;
          outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryInteger?);
          outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
          if ((swift_dynamicCast() & 1) == 0)
          {
            uint64_t v79 = 0;
            long long v77 = 0u;
            long long v78 = 0u;
            outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryFloatingPoint?);
            outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
            type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            if (swift_dynamicCast())
            {
              uint64_t v34 = (void *)v77;
              float v36 = (float)(uint64_t)objc_msgSend((id)v77, sel_integerValue);
              goto LABEL_56;
            }
LABEL_59:
            *(void *)&long long v81 = 0;
            *((void *)&v81 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(63);
            unint64_t v39 = 0x80000002272D5630;
            unint64_t v37 = 0xD000000000000025;
LABEL_39:
            String.append(_:)(*(Swift::String *)&v37);
            swift_bridgeObjectRetain();
            v40._uint64_t countAndFlagsBits = a2;
            v40._id object = a3;
            String.append(_:)(v40);
            swift_bridgeObjectRelease();
            v41._uint64_t countAndFlagsBits = 0x6720747562202C27;
            v41._id object = (void *)0xEB0000000020746FLL;
            String.append(_:)(v41);
            __swift_project_boxed_opaque_existential_1(&v83, v84);
            swift_getDynamicType();
            v42._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v42);
            swift_bridgeObjectRelease();
            v43._uint64_t countAndFlagsBits = 0x20776F7220746120;
            v43._id object = (void *)0xE800000000000000;
            String.append(_:)(v43);
            *(void *)&long long v77 = a6;
            v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v44);
            swift_bridgeObjectRelease();
            v45._uint64_t countAndFlagsBits = 46;
            v45._id object = (void *)0xE100000000000000;
            String.append(_:)(v45);
            long long v46 = v81;
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError();
            *(_OWORD *)uint64_t v47 = v46;
            *(_OWORD *)(v47 + 16) = 0u;
            *(_OWORD *)(v47 + 32) = 0u;
            *(unsigned char *)(v47 + 48) = 0;
            swift_willThrow();
            goto LABEL_57;
          }
          goto LABEL_48;
        }
LABEL_41:
        uint64_t v75 = v7;
        outlined init with take of BinaryFloatingPoint(&v77, (uint64_t)&v81);
        uint64_t v48 = *((void *)&v82 + 1);
        uint64_t v49 = __swift_project_boxed_opaque_existential_1(&v81, *((uint64_t *)&v82 + 1));
        uint64_t v50 = *(void *)(v48 - 8);
        MEMORY[0x270FA5388](v49);
        uint64_t v52 = (char *)&v71 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v50 + 16))(v52);
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
        {
          char v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v48);
          if (v54) {
            float v53 = (float)v55;
          }
          else {
            float v53 = (float)(unint64_t)v55;
          }
        }
        else
        {
          lazy protocol witness table accessor for type Float and conformance Float();
          lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          static BinaryFloatingPoint<>._convert<A>(from:)();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v48);
          float v53 = *(float *)&v77;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        uint64_t v65 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v77, a6, v76);
        float *v66 = v53;
        v65(&v77, 0);
        goto LABEL_53;
      }
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
      if (swift_dynamicCast()) {
        goto LABEL_41;
      }
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryInteger?);
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
      if (swift_dynamicCast())
      {
LABEL_48:
        outlined init with take of BinaryFloatingPoint(&v77, (uint64_t)&v81);
        uint64_t v57 = *((void *)&v82 + 1);
        uint64_t v58 = __swift_project_boxed_opaque_existential_1(&v81, *((uint64_t *)&v82 + 1));
        MEMORY[0x270FA5388](v58);
        uint64_t v60 = (char *)&v71 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v61 + 16))(v60);
        float v62 = specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v60, v57);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        uint64_t v63 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v77, a6, v76);
        float *v64 = v62;
        v63(&v77, 0);
LABEL_53:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v83);
        uint64_t v67 = &v81;
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
      }
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryFloatingPoint?);
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (!swift_dynamicCast()) {
        goto LABEL_59;
      }
      uint64_t v34 = (void *)v77;
      objc_msgSend((id)v77, sel_floatValue);
      float v36 = v35;
LABEL_56:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      uint64_t v68 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v81, a6, v76);
      *uint64_t v69 = v36;
      v68(&v81, 0);

LABEL_57:
      uint64_t v67 = &v83;
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
    default:
      specialized FeatureMatrixBuilder.fillArray(_:descriptor:size:row:column:)((uint64_t)&v83, a2, (uint64_t)a3, a4, a5, a4, a6, v76, (uint64_t)&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>, (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), v70, v71, v72, v73, v74, v75,
        v76,
        (uint64_t *)v77,
        *((void (**)(void))&v77 + 1),
        (void (*)(uint64_t, uint64_t, void *, uint64_t, void, uint64_t, uint64_t, uint64_t))v78,
        *((void (**)(void))&v78 + 1),
        v79);
      goto LABEL_57;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  double v22;
  void (*v24)(long long *, void);
  double *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void *v34;
  float v35;
  double v36;
  unint64_t v37;
  const char *v38;
  unint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  double v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  double v62;
  void (*v63)(long long *, void);
  double *v64;
  void (*v65)(long long *, void);
  double *v66;
  long long *v67;
  void (*v68)(long long *, void);
  double *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  long long v77;
  long long v78;
  void (*v79)(void);
  unsigned char v80[32];
  long long v81;
  long long v82;
  long long v83;
  uint64_t v84;

  uint64_t v76 = a7;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v81, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v82 + 1)) {
    return outlined destroy of URL?((uint64_t)&v81, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any(&v81, &v83);
  switch((char)a5)
  {
    case 4:
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) == 0)
      {
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(a4, 4);
        *(void *)&long long v81 = 0;
        *((void *)&v81 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(62);
        unint64_t v37 = 0xD000000000000024;
        uint64_t v38 = "Expected string values for feature '";
        goto LABEL_38;
      }
      uint64_t v75 = v8;
      uint64_t v15 = *((void *)&v77 + 1);
      uint64_t v16 = a4;
      uint64_t v17 = *(void *)(a4 + 16);
      if (v17)
      {
        uint64_t v18 = v77;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v19 = 0;
        uint64_t v20 = (void *)(v16 + 40);
        while (1)
        {
          uint64_t v21 = v76 + v19;
          if (__OFADD__(v76, v19)) {
            break;
          }
          float v22 = 1.0;
          if (*(v20 - 1) != v18 || *v20 != v15)
          {
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              float v22 = 1.0;
            }
            else {
              float v22 = 0.0;
            }
          }
          ++v19;
          uint64_t v24 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v81, a6, v21);
          *uint64_t v25 = v22;
          v24(&v81, 0);
          v20 += 2;
          if (v17 == v19) {
            goto LABEL_17;
          }
        }
        __break(1u);
LABEL_61:
        __break(1u);
        JUMPOUT(0x2270B3D18);
      }
LABEL_17:
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v83);
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v16, 4);
      return swift_bridgeObjectRelease();
    case 5:
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast())
      {
        uint64_t v74 = *(void *)(a4 + 16);
        if (v74)
        {
          uint64_t v75 = v7;
          uint64_t v73 = a6;
          uint64_t v26 = 0;
          uint64_t v72 = a4;
          uint64_t v27 = (unsigned __int8 *)(a4 + 56);
          while (1)
          {
            uint64_t v29 = *((void *)v27 - 3);
            uint64_t v28 = *((void *)v27 - 2);
            uint64_t v30 = *((void *)v27 - 1);
            uint64_t v31 = *v27;
            if (*(void *)(v77 + 16))
            {
              swift_bridgeObjectRetain_n();
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
              unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
              if (v33)
              {
                outlined init with copy of Any(*(void *)(v77 + 56) + 32 * v32, (uint64_t)&v81);
              }
              else
              {
                long long v81 = 0u;
                long long v82 = 0u;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              long long v81 = 0u;
              long long v82 = 0u;
              swift_bridgeObjectRetain();
              outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
            }
            if (__OFADD__(v76, v26)) {
              goto LABEL_61;
            }
            specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(&v81, v29, v28, v30, v31, v73, v76 + v26);
            swift_bridgeObjectRelease();
            if (v8) {
              break;
            }
            v27 += 32;
            outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
            outlined destroy of URL?((uint64_t)&v81, &demangling cache variable for type metadata for Any?);
            if (v74 == ++v26)
            {
              swift_bridgeObjectRelease();
              a4 = v72;
              goto LABEL_46;
            }
          }
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v30, v31);
          outlined destroy of URL?((uint64_t)&v81, &demangling cache variable for type metadata for Any?);
          uint64_t v56 = v72;
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_46:
          uint64_t v56 = a4;
        }
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v56, 5);
        goto LABEL_57;
      }
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(a4, 5);
      *(void *)&long long v81 = 0;
      *((void *)&v81 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      unint64_t v37 = 0xD000000000000028;
      uint64_t v38 = "Expected dictionary values for feature '";
LABEL_38:
      unint64_t v39 = (unint64_t)(v38 - 32) | 0x8000000000000000;
      goto LABEL_39;
    case 6:
      if (!a4)
      {
        outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
        if (!swift_dynamicCast())
        {
          uint64_t v79 = 0;
          long long v77 = 0u;
          long long v78 = 0u;
          outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryInteger?);
          outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
          if ((swift_dynamicCast() & 1) == 0)
          {
            uint64_t v79 = 0;
            long long v77 = 0u;
            long long v78 = 0u;
            outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryFloatingPoint?);
            outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
            type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            if (swift_dynamicCast())
            {
              uint64_t v34 = (void *)v77;
              float v36 = (double)(uint64_t)objc_msgSend((id)v77, sel_integerValue);
              goto LABEL_56;
            }
LABEL_59:
            *(void *)&long long v81 = 0;
            *((void *)&v81 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(63);
            unint64_t v39 = 0x80000002272D5630;
            unint64_t v37 = 0xD000000000000025;
LABEL_39:
            String.append(_:)(*(Swift::String *)&v37);
            swift_bridgeObjectRetain();
            v40._uint64_t countAndFlagsBits = a2;
            v40._id object = a3;
            String.append(_:)(v40);
            swift_bridgeObjectRelease();
            v41._uint64_t countAndFlagsBits = 0x6720747562202C27;
            v41._id object = (void *)0xEB0000000020746FLL;
            String.append(_:)(v41);
            __swift_project_boxed_opaque_existential_1(&v83, v84);
            swift_getDynamicType();
            v42._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v42);
            swift_bridgeObjectRelease();
            v43._uint64_t countAndFlagsBits = 0x20776F7220746120;
            v43._id object = (void *)0xE800000000000000;
            String.append(_:)(v43);
            *(void *)&long long v77 = a6;
            v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v44);
            swift_bridgeObjectRelease();
            v45._uint64_t countAndFlagsBits = 46;
            v45._id object = (void *)0xE100000000000000;
            String.append(_:)(v45);
            long long v46 = v81;
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError();
            *(_OWORD *)uint64_t v47 = v46;
            *(_OWORD *)(v47 + 16) = 0u;
            *(_OWORD *)(v47 + 32) = 0u;
            *(unsigned char *)(v47 + 48) = 0;
            swift_willThrow();
            goto LABEL_57;
          }
          goto LABEL_48;
        }
LABEL_41:
        uint64_t v75 = v7;
        outlined init with take of BinaryFloatingPoint(&v77, (uint64_t)&v81);
        uint64_t v48 = *((void *)&v82 + 1);
        uint64_t v49 = __swift_project_boxed_opaque_existential_1(&v81, *((uint64_t *)&v82 + 1));
        uint64_t v50 = *(void *)(v48 - 8);
        MEMORY[0x270FA5388](v49);
        uint64_t v52 = (char *)&v71 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v50 + 16))(v52);
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
        {
          char v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v48);
          if (v54) {
            float v53 = (double)v55;
          }
          else {
            float v53 = (double)(unint64_t)v55;
          }
        }
        else
        {
          lazy protocol witness table accessor for type Double and conformance Double();
          lazy protocol witness table accessor for type UInt64 and conformance UInt64();
          static BinaryFloatingPoint<>._convert<A>(from:)();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v48);
          float v53 = *(double *)&v77;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v65 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v77, a6, v76);
        float *v66 = v53;
        v65(&v77, 0);
        goto LABEL_53;
      }
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
      if (swift_dynamicCast()) {
        goto LABEL_41;
      }
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryInteger?);
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)v80);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
      if (swift_dynamicCast())
      {
LABEL_48:
        outlined init with take of BinaryFloatingPoint(&v77, (uint64_t)&v81);
        uint64_t v57 = *((void *)&v82 + 1);
        uint64_t v58 = __swift_project_boxed_opaque_existential_1(&v81, *((uint64_t *)&v82 + 1));
        MEMORY[0x270FA5388](v58);
        uint64_t v60 = (char *)&v71 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v61 + 16))(v60);
        float v62 = specialized BinaryFloatingPoint.init<A>(_:)((uint64_t)v60, v57);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        uint64_t v63 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v77, a6, v76);
        float *v64 = v62;
        v63(&v77, 0);
LABEL_53:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v83);
        uint64_t v67 = &v81;
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
      }
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      outlined destroy of URL?((uint64_t)&v77, &demangling cache variable for type metadata for BinaryFloatingPoint?);
      outlined init with copy of Any((uint64_t)&v83, (uint64_t)&v81);
      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (!swift_dynamicCast()) {
        goto LABEL_59;
      }
      uint64_t v34 = (void *)v77;
      objc_msgSend((id)v77, sel_floatValue);
      float v36 = v35;
LABEL_56:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      uint64_t v68 = (void (*)(long long *, void))specialized DenseMatrix.subscript.modify(&v81, a6, v76);
      *uint64_t v69 = v36;
      v68(&v81, 0);

LABEL_57:
      uint64_t v67 = &v83;
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
    default:
      specialized FeatureMatrixBuilder.fillArray(_:descriptor:size:row:column:)((uint64_t)&v83, a2, (uint64_t)a3, a4, a5, a4, a6, v76, (uint64_t)&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>, (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), (uint64_t)specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:), v70, v71, v72, v73, v74, v75,
        v76,
        (uint64_t *)v77,
        *((void (**)(void))&v77 + 1),
        (void (*)(uint64_t, uint64_t, void *, uint64_t, void, uint64_t, uint64_t, uint64_t))v78,
        *((void (**)(void))&v78 + 1),
        v79);
      goto LABEL_57;
  }
}

void specialized FeatureMatrixBuilder.fillArray(_:descriptor:size:row:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,void (*a22)(void),void (*a23)(uint64_t, uint64_t, void *, uint64_t, void, uint64_t, uint64_t, uint64_t),void (*a24)(void),void (*a25)(void))
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v156 = v25;
  uint64_t v165 = v27;
  uint64_t v155 = v28;
  uint64_t v157 = v30;
  unint64_t v158 = v29;
  unsigned int v154 = v31;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  uint64_t v39 = OUTLINED_FUNCTION_17(v38);
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v40);
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  OUTLINED_FUNCTION_0();
  uint64_t v143 = v41;
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v43);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  uint64_t v45 = OUTLINED_FUNCTION_17(v44);
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v46);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  OUTLINED_FUNCTION_0();
  uint64_t v150 = v47;
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_49();
  uint64_t v148 = v49;
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_45_2((uint64_t)&v140 - v51);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  uint64_t v53 = OUTLINED_FUNCTION_17(v52);
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_24_4();
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  OUTLINED_FUNCTION_0();
  uint64_t v147 = v54;
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v56);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  uint64_t v58 = OUTLINED_FUNCTION_17(v57);
  MEMORY[0x270FA5388](v58);
  uint64_t v60 = (char *)&v140 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v149 = v62;
  MEMORY[0x270FA5388](v63);
  OUTLINED_FUNCTION_32();
  outlined init with copy of Any(v37, (uint64_t)v160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Int>);
  uint64_t v64 = MEMORY[0x263F8EE58] + 8;
  if (!OUTLINED_FUNCTION_31_3())
  {
    uint64_t v141 = v33;
    uint64_t v66 = v157;
    uint64_t v140 = v35;
    outlined init with copy of Any(v37, (uint64_t)v160);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Float>);
    if (OUTLINED_FUNCTION_31_3())
    {
      uint64_t v67 = OUTLINED_FUNCTION_19_5();
      lazy protocol witness table accessor for type Float and conformance Float();
      OUTLINED_FUNCTION_86_0();
      uint64_t v68 = MEMORY[0x263F8D5C8];
LABEL_7:
      uint64_t v142 = v68;
      uint64_t v143 = v37;
      uint64_t v140 = v67;
      uint64_t v141 = v64;
      OUTLINED_FUNCTION_42_3();
      uint64_t v76 = v165;
LABEL_8:
      FeatureMatrixBuilder.fillArray<A, B>(_:descriptor:size:row:column:)(v69, v70, v71, v72, v73, v74, v75, v76, v140, v141, v142, v143);
      goto LABEL_9;
    }
    outlined init with copy of Any(v37, (uint64_t)v160);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Double>);
    uint64_t v64 = MEMORY[0x263F8EE58] + 8;
    if (OUTLINED_FUNCTION_31_3())
    {
      uint64_t v67 = OUTLINED_FUNCTION_19_5();
      lazy protocol witness table accessor for type Double and conformance Double();
      OUTLINED_FUNCTION_86_0();
      uint64_t v68 = MEMORY[0x263F8D538];
      goto LABEL_7;
    }
    outlined init with copy of Any(v37, (uint64_t)&v161);
    if (swift_dynamicCast())
    {
      OUTLINED_FUNCTION_82_1();
      __swift_storeEnumTagSinglePayload(v77, v78, v79, v61);
      if (__swift_getEnumTagSinglePayload((uint64_t)v60, 1, v61) != 1)
      {
        OUTLINED_FUNCTION_59_3();
        OUTLINED_FUNCTION_3();
        v80();
        OUTLINED_FUNCTION_42_3();
        a22();
        uint64_t v81 = OUTLINED_FUNCTION_70_1();
        uint64_t v83 = v61;
LABEL_22:
        v82(v81, v83);
        goto LABEL_10;
      }
    }
    else
    {
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v84, v85, v86, v61);
    }
    outlined destroy of URL?((uint64_t)v60, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
    uint64_t v87 = v37;
    outlined init with copy of Any(v37, (uint64_t)&v161);
    uint64_t v88 = v152;
    if (swift_dynamicCast())
    {
      OUTLINED_FUNCTION_82_1();
      __swift_storeEnumTagSinglePayload(v89, v90, v91, v88);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v26, 1, v88);
      uint64_t v93 = v158;
      uint64_t v94 = v141;
      if (EnumTagSinglePayload != 1)
      {
        OUTLINED_FUNCTION_59_3();
        uint64_t v95 = v146;
        OUTLINED_FUNCTION_3();
        v96();
        a23(v95, v140, v93, v94, v154, v66, v155, v165);
        uint64_t v81 = OUTLINED_FUNCTION_70_1();
        uint64_t v83 = v88;
        goto LABEL_22;
      }
    }
    else
    {
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v97, v98, v99, v88);
      uint64_t v94 = v141;
    }
    outlined destroy of URL?(v26, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    outlined init with copy of Any(v87, (uint64_t)&v161);
    uint64_t v100 = v151;
    uint64_t v101 = v153;
    if (swift_dynamicCast())
    {
      OUTLINED_FUNCTION_82_1();
      __swift_storeEnumTagSinglePayload(v102, v103, v104, v101);
      if (__swift_getEnumTagSinglePayload(v100, 1, v101) != 1)
      {
        OUTLINED_FUNCTION_59_3();
        OUTLINED_FUNCTION_3();
        v105();
        OUTLINED_FUNCTION_27_5();
        a24();
        uint64_t v81 = OUTLINED_FUNCTION_70_1();
        uint64_t v83 = v101;
        goto LABEL_22;
      }
    }
    else
    {
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v106, v107, v108, v101);
    }
    outlined destroy of URL?(v100, &demangling cache variable for type metadata for MLShapedArray<Double>?);
    outlined init with copy of Any(v87, (uint64_t)&v161);
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    long long v109 = (void *)v87;
    if (swift_dynamicCast())
    {
      id v110 = (id)v159;
      MLShapedArray.init(_:)();
      OUTLINED_FUNCTION_27_5();
      a24();
      OUTLINED_FUNCTION_25_0();
      v111();

      goto LABEL_10;
    }
    outlined init with copy of Any(v87, (uint64_t)v160);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Float16>);
    if ((OUTLINED_FUNCTION_31_3() & 1) == 0)
    {
      outlined init with copy of Any(v87, (uint64_t)&v161);
      uint64_t v117 = v144;
      uint64_t v118 = v145;
      char v119 = swift_dynamicCast();
      uint64_t v120 = v155;
      if (v119)
      {
        OUTLINED_FUNCTION_82_1();
        __swift_storeEnumTagSinglePayload(v121, v122, v123, v118);
        if (__swift_getEnumTagSinglePayload(v117, 1, v118) != 1)
        {
          uint64_t v124 = v143;
          uint64_t v125 = v142;
          OUTLINED_FUNCTION_3();
          v126();
          OUTLINED_FUNCTION_27_5();
          a25();
          (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v125, v118);
          goto LABEL_10;
        }
      }
      else
      {
        OUTLINED_FUNCTION_79_1();
        __swift_storeEnumTagSinglePayload(v127, v128, v129, v118);
      }
      outlined destroy of URL?(v117, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
      uint64_t v161 = 0;
      unint64_t v162 = 0xE000000000000000;
      _StringGuts.grow(_:)(75);
      v130._id object = (void *)0x80000002272D5690;
      v130._uint64_t countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v130);
      uint64_t v131 = v158;
      swift_bridgeObjectRetain();
      v132._uint64_t countAndFlagsBits = v140;
      v132._id object = v131;
      String.append(_:)(v132);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13_4();
      __swift_project_boxed_opaque_existential_1(v109, v109[3]);
      swift_getDynamicType();
      v133._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v133);
      swift_bridgeObjectRelease();
      v134._uint64_t countAndFlagsBits = 0x20776F7220746120;
      v134._id object = (void *)0xE800000000000000;
      String.append(_:)(v134);
      *(void *)&long long v159 = v120;
      v135._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v135);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_88_0();
      uint64_t v136 = v161;
      unint64_t v137 = v162;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v138 = OUTLINED_FUNCTION_85();
      *uint64_t v139 = v136;
      v139[1] = v137;
      OUTLINED_FUNCTION_8_4(v138, (uint64_t)v139);
      goto LABEL_10;
    }
    outlined init with take of BinaryFloatingPoint(&v159, (uint64_t)&v161);
    uint64_t v112 = v163;
    uint64_t v113 = v164;
    uint64_t v114 = v94;
    Swift::String v115 = __swift_project_boxed_opaque_existential_1(&v161, v163);
    uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(a21);
    lazy protocol witness table accessor for type Float16 and conformance Float16();
    OUTLINED_FUNCTION_86_0();
    uint64_t v142 = MEMORY[0x263F8E9F8];
    uint64_t v143 = v113;
    uint64_t v140 = v116;
    uint64_t v141 = v112;
    uint64_t v69 = (uint64_t)v115;
    uint64_t v70 = v116;
    uint64_t v71 = v158;
    uint64_t v72 = v114;
    uint64_t v73 = v154;
    uint64_t v74 = v66;
    uint64_t v75 = v155;
    uint64_t v76 = v165;
    goto LABEL_8;
  }
  uint64_t v65 = OUTLINED_FUNCTION_19_5();
  lazy protocol witness table accessor for type Int and conformance Int();
  OUTLINED_FUNCTION_86_0();
  FeatureMatrixBuilder.fillArray<A, B>(_:descriptor:size:row:column:)((uint64_t)v60, v35, v158, v33, v154, v157, v155, v165, v65, v64, MEMORY[0x263F8D6C8], v37);
LABEL_9:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v161);
LABEL_10:
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_8_1();
}

uint64_t specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        float v17 = (float)SLODWORD(v32[0]);
        uint64_t v18 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *uint64_t v19 = v17;
        uint64_t result = v18(v32, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    v20._id object = (void *)0x80000002272D5730;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._id object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = a2;
    v23._id object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._id object = (void *)0x80000002272D5760;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v26._id object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 46;
    v28._id object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v29 = 0;
    *(void *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t inited;
  void *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t (*v18)(void *, void);
  double *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        float v17 = (double)SLODWORD(v32[0]);
        uint64_t v18 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *uint64_t v19 = v17;
        uint64_t result = v18(v32, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    v20._id object = (void *)0x80000002272D5730;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._id object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = a2;
    v23._id object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._id object = (void *)0x80000002272D5760;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v26._id object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 46;
    v28._id object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v29 = 0;
    *(void *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t inited;
  void *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(void *, void);
  _DWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        float v17 = v32[0];
        uint64_t v18 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *uint64_t v19 = v17;
        uint64_t result = v18(v32, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    v20._id object = (void *)0x80000002272D5730;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._id object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = a2;
    v23._id object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._id object = (void *)0x80000002272D5760;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v26._id object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 46;
    v28._id object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v29 = 0;
    *(void *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t inited;
  void *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t (*v18)(double *, void);
  float *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  double v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        float v17 = v32[0];
        uint64_t v18 = (uint64_t (*)(double *, void))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *uint64_t v19 = v17;
        uint64_t result = v18(v32, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    v20._id object = (void *)0x80000002272D5730;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._id object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = a2;
    v23._id object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._id object = (void *)0x80000002272D5760;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v26._id object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    *(void *)&v32[4] = a7;
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 46;
    v28._id object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v29 = 0;
    *(void *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t inited;
  void *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v23)(void *, void);
  _DWORD *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  void v37[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        _H0 = v37[0];
        __asm { FCVT            S8, H0 }
        Swift::String v23 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v37, a7, a8 + v15);
        *Swift::String v24 = _S8;
        uint64_t result = v23(v37, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v25._uint64_t countAndFlagsBits = 0xD000000000000023;
    v25._id object = (void *)0x80000002272D5730;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v27._id object = (void *)0xEF27206572757461;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._uint64_t countAndFlagsBits = a2;
    v28._id object = a3;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._id object = (void *)0x80000002272D5760;
    v29._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v29);
    MLShapedArray.shape.getter();
    v30._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v31._id object = (void *)0xE800000000000000;
    String.append(_:)(v31);
    v37[4] = a7;
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 46;
    v33._id object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v34 = 0;
    *(void *)(v34 + 8) = 0xE000000000000000;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(unsigned char *)(v34 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t inited;
  void *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t (*v18)(void *, void);
  double *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        float v17 = *(float *)v32;
        uint64_t v18 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *uint64_t v19 = v17;
        uint64_t result = v18(v32, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    v20._id object = (void *)0x80000002272D5730;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._id object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = a2;
    v23._id object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._id object = (void *)0x80000002272D5760;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v26._id object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 46;
    v28._id object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v29 = 0;
    *(void *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t inited;
  void *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, void);
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        float v17 = v32[0];
        uint64_t v18 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *uint64_t v19 = v17;
        uint64_t result = v18(v32, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    v20._id object = (void *)0x80000002272D5730;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v22._id object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = a2;
    v23._id object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._id object = (void *)0x80000002272D5760;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v26._id object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 46;
    v28._id object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v29 = 0;
    *(void *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(unsigned char *)(v29 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t inited;
  void *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v23)(void *, void);
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  void v37[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  uint64_t v12 = (void *)MLShapedArray.shape.getter();
  BOOL v13 = specialized static Array<A>.== infix(_:_:)((void *)inited, v12);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      uint64_t v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
        *(void *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        _H0 = v37[0];
        __asm { FCVT            D8, H0 }
        Swift::String v23 = (uint64_t (*)(void *, void))specialized DenseMatrix.subscript.modify(v37, a7, a8 + v15);
        *Swift::String v24 = _D8;
        uint64_t result = v23(v37, 0);
        if (a6 == ++v15) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v25._uint64_t countAndFlagsBits = 0xD000000000000023;
    v25._id object = (void *)0x80000002272D5730;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 0x656620726F66205DLL;
    v27._id object = (void *)0xEF27206572757461;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._uint64_t countAndFlagsBits = a2;
    v28._id object = a3;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._id object = (void *)0x80000002272D5760;
    v29._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v29);
    MLShapedArray.shape.getter();
    v30._uint64_t countAndFlagsBits = MEMORY[0x22A674D80]();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0x20776F7220746120;
    v31._id object = (void *)0xE800000000000000;
    String.append(_:)(v31);
    v37[4] = a7;
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 46;
    v33._id object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v34 = 0;
    *(void *)(v34 + 8) = 0xE000000000000000;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(unsigned char *)(v34 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

void partial apply for closure #1 in FeatureVectorizer.fitted(to:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t outlined consume of FeatureVectorizer<Float>.Transformer?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, char a2)
{
  if ((a2 & 0xFE) == 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, char a2)
{
  if ((a2 & 0xFE) == 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized DenseMatrix.subscript.modify(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = malloc(0x60uLL);
  *a1 = v6;
  uint64_t v7 = (uint64_t)(v6 + 4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  if ((DenseMatrix.layout.getter() & 1) == 0)
  {
    uint64_t result = DenseMatrix.columnCount.getter();
    uint64_t v9 = a2 * result;
    if ((unsigned __int128)(a2 * (__int128)result) >> 64 == (a2 * result) >> 63)
    {
      BOOL v10 = __OFADD__(v9, a3);
      unint64_t v11 = v9 + a3;
      if (!v10)
      {
        v6[8] = DenseMatrix.storage.modify();
        specialized ContiguousArray.subscript.modify(v7, v11);
        v6[9] = v12;
        return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = DenseMatrix.rowCount.getter();
  uint64_t v14 = a3 * result;
  if ((unsigned __int128)(a3 * (__int128)result) >> 64 != (a3 * result) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v15 = v14 + a2;
  if (!__OFADD__(v14, a2))
  {
    v6[10] = DenseMatrix.storage.modify();
    specialized ContiguousArray.subscript.modify(v7, v15);
    v6[11] = v16;
    return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
  }
LABEL_12:
  __break(1u);
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  uint64_t v6 = malloc(0x60uLL);
  *a1 = v6;
  uint64_t v7 = (uint64_t)(v6 + 4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  if ((DenseMatrix.layout.getter() & 1) == 0)
  {
    uint64_t result = DenseMatrix.columnCount.getter();
    uint64_t v9 = a2 * result;
    if ((unsigned __int128)(a2 * (__int128)result) >> 64 == (a2 * result) >> 63)
    {
      BOOL v10 = __OFADD__(v9, a3);
      unint64_t v11 = v9 + a3;
      if (!v10)
      {
        v6[8] = DenseMatrix.storage.modify();
        specialized ContiguousArray.subscript.modify(v7, v11);
        v6[9] = v12;
        return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = DenseMatrix.rowCount.getter();
  uint64_t v14 = a3 * result;
  if ((unsigned __int128)(a3 * (__int128)result) >> 64 != (a3 * result) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v15 = v14 + a2;
  if (!__OFADD__(v14, a2))
  {
    v6[10] = DenseMatrix.storage.modify();
    specialized ContiguousArray.subscript.modify(v7, v15);
    v6[11] = v16;
    return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
  }
LABEL_12:
  __break(1u);
  return result;
}

void DenseMatrix.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(void (**)(uint64_t))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  uint64_t v3 = OUTLINED_FUNCTION_84_0();
  v2(v3);

  free(v1);
}

{
  void *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t vars8;

  uint64_t v1 = *(void **)a1;
  char v2 = *(void (**)(uint64_t))(*(void *)a1 + 80);
  (*(void (**)(void))(*(void *)a1 + 88))();
  uint64_t v3 = OUTLINED_FUNCTION_84_0();
  v2(v3);

  free(v1);
}

void specialized ContiguousArray.subscript.modify(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v4 = v6;
    uint64_t *v2 = v6;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(v4 + 16) <= a2) {
LABEL_7:
  }
    __break(1u);
}

{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  uint64_t v4 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v4 = v6;
    uint64_t *v2 = v6;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(v4 + 16) <= a2) {
LABEL_7:
  }
    __break(1u);
}

uint64_t outlined init with take of BinaryFloatingPoint(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

double specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v71 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v69 = (char *)&v64 - v4;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v66 = (char *)&v64 - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v65 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  BOOL v13 = (char *)&v64 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v64 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  Swift::String v22 = (char *)&v64 - v21;
  MEMORY[0x270FA5388](v20);
  Swift::String v24 = (char *)&v64 - v23;
  uint64_t v25 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  uint64_t v26 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  if (v25 == 11)
  {
    if (v26 == 52)
    {
      uint64_t v33 = v8;
      uint64_t v34 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v24, v72, a2);
      int v35 = swift_dynamicCast();
      _D8 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v22, v34, a2);
      if (v35)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v22, a2);
      }
      else
      {
        uint64_t v51 = dispatch thunk of FloatingPoint.sign.getter();
        uint64_t v52 = v66;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v53 = v68;
        swift_getAssociatedConformanceWitness();
        __int16 v54 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v52, v53);
        uint64_t v55 = v33;
        uint64_t v56 = v69;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v22, a2);
        uint64_t v57 = v71;
        swift_getAssociatedConformanceWitness();
        uint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v56, v57);
        *(void *)&_D8 = (v51 << 63) | ((unint64_t)(v54 & 0x7FF) << 52) | v58 & 0xFFFFFFFFFFFFFLL;
      }
      return _D8;
    }
    goto LABEL_16;
  }
  if (v25 == 8)
  {
    if (v26 == 23)
    {
      uint64_t v37 = v8;
      uint64_t v38 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v19, v72, a2);
      int v39 = swift_dynamicCast();
      float v40 = *(float *)&v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v16, v38, a2);
      if (v39)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, a2);
      }
      else
      {
        dispatch thunk of FloatingPoint.sign.getter();
        uint64_t v59 = v66;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v60 = v68;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v59, v60);
        uint64_t v61 = v69;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v16, a2);
        uint64_t v62 = v71;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v61, v62);
        Float.init(sign:exponentBitPattern:significandBitPattern:)();
        return v63;
      }
      return v40;
    }
LABEL_16:
    lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v41 = v72;
    static BinaryFloatingPoint._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v41, a2);
    return v73;
  }
  if (v25 != 5 || v26 != 10) {
    goto LABEL_16;
  }
  uint64_t v28 = v8;
  uint64_t v29 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v72, a2);
  int v30 = swift_dynamicCast();
  _H8 = LOWORD(v73);
  uint64_t v32 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v65, v29, a2);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v32, a2);
  }
  else
  {
    dispatch thunk of FloatingPoint.sign.getter();
    uint64_t v43 = v66;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
    uint64_t v44 = v68;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v43, v44);
    uint64_t v45 = v69;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, a2);
    uint64_t v46 = v71;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v45, v46);
    Float16.init(sign:exponentBitPattern:significandBitPattern:)();
    _H8 = v47;
  }
  __asm { FCVT            D8, H8 }
  return _D8;
}

float specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v71 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v69 = (char *)&v64 - v4;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v66 = (char *)&v64 - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v65 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  BOOL v13 = (char *)&v64 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v64 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  Swift::String v22 = (char *)&v64 - v21;
  MEMORY[0x270FA5388](v20);
  Swift::String v24 = (char *)&v64 - v23;
  uint64_t v25 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  uint64_t v26 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  if (v25 == 11)
  {
    if (v26 == 52)
    {
      uint64_t v33 = v8;
      uint64_t v34 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v24, v72, a2);
      int v35 = swift_dynamicCast();
      double v36 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v22, v34, a2);
      if (v35)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v22, a2);
      }
      else
      {
        uint64_t v51 = dispatch thunk of FloatingPoint.sign.getter();
        uint64_t v52 = v66;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v53 = v68;
        swift_getAssociatedConformanceWitness();
        __int16 v54 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v52, v53);
        uint64_t v55 = v33;
        uint64_t v56 = v69;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v22, a2);
        uint64_t v57 = v71;
        swift_getAssociatedConformanceWitness();
        uint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v56, v57);
        *(void *)&double v36 = (v51 << 63) | ((unint64_t)(v54 & 0x7FF) << 52) | v58 & 0xFFFFFFFFFFFFFLL;
      }
      return v36;
    }
LABEL_16:
    lazy protocol witness table accessor for type Float and conformance Float();
    uint64_t v41 = v72;
    static BinaryFloatingPoint._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v41, a2);
    return *(float *)&v73;
  }
  if (v25 == 8)
  {
    if (v26 == 23)
    {
      uint64_t v37 = v8;
      uint64_t v38 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v19, v72, a2);
      int v39 = swift_dynamicCast();
      _S8 = *(float *)&v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v16, v38, a2);
      if (v39)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, a2);
      }
      else
      {
        dispatch thunk of FloatingPoint.sign.getter();
        uint64_t v59 = v66;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v60 = v68;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v59, v60);
        uint64_t v61 = v69;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v16, a2);
        uint64_t v62 = v71;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v61, v62);
        Float.init(sign:exponentBitPattern:significandBitPattern:)();
        return v63;
      }
      return _S8;
    }
    goto LABEL_16;
  }
  if (v25 != 5 || v26 != 10) {
    goto LABEL_16;
  }
  uint64_t v28 = v8;
  uint64_t v29 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v72, a2);
  int v30 = swift_dynamicCast();
  _H8 = LOWORD(v73);
  uint64_t v32 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v65, v29, a2);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v32, a2);
  }
  else
  {
    dispatch thunk of FloatingPoint.sign.getter();
    uint64_t v43 = v66;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
    uint64_t v44 = v68;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v43, v44);
    uint64_t v45 = v69;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, a2);
    uint64_t v46 = v71;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v45, v46);
    Float16.init(sign:exponentBitPattern:significandBitPattern:)();
    _H8 = v47;
  }
  __asm { FCVT            S8, H8 }
  return _S8;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Float16 and conformance Float16()
{
  unint64_t result = lazy protocol witness table cache variable for type Float16 and conformance Float16;
  if (!lazy protocol witness table cache variable for type Float16 and conformance Float16)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float16 and conformance Float16);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

uint64_t sub_2270B79BC()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  }

  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(uint64_t (*a1)(void))
{
  return a1();
}

void closure #1 in FeatureVectorizer.fitted(to:)partial apply(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return Column.subscript.getter();
}

uint64_t *OUTLINED_FUNCTION_4_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_5_6()
{
  return Column.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_7_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized DenseMatrix.subscript.modify(&a9, v10, v9);
}

uint64_t OUTLINED_FUNCTION_8_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized DenseMatrix.subscript.modify(&a9, v10, v9);
}

void OUTLINED_FUNCTION_13_4()
{
  uint64_t v1 = 0x6720747562202C27;
  unint64_t v2 = 0xEB0000000020746FLL;
  String.append(_:)(*(Swift::String *)&v1);
}

unint64_t OUTLINED_FUNCTION_14_5()
{
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v3, v2);
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

char *OUTLINED_FUNCTION_15_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  return &a23;
}

uint64_t OUTLINED_FUNCTION_16_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_17_5()
{
  return Column.count.getter();
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  outlined init with take of BinaryFloatingPoint((long long *)(v1 - 200), v1 - 128);
  __swift_project_boxed_opaque_existential_1((void *)(v1 - 128), *(void *)(v1 - 104));
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_20_4()
{
  return v0;
}

void OUTLINED_FUNCTION_25_7()
{
  *(void *)(v1 - 72) = *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_28_4()
{
  return AnyColumn.assumingType<A>(_:)();
}

void OUTLINED_FUNCTION_29_3(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_30_5()
{
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v1, v0);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_32_4(uint64_t a1)
{
  return outlined consume of ColumnDescriptor.ColumnTypeDescriptor(a1, v1);
}

uint64_t OUTLINED_FUNCTION_34_3()
{
  return AnyColumn.assumingType<A>(_:)();
}

void OUTLINED_FUNCTION_36_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v7 - 288) = a5;
  *(void *)(v7 - 296) = a4;
  *(void *)(v7 - 304) = a3;
  *(void *)(v7 - 120) = v6;
  *(void *)(v7 - 112) = a2;
  *(void *)(v7 - 72) = v5;
}

char *OUTLINED_FUNCTION_37_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  return &a23;
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_39_4()
{
  return Column.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_41_4()
{
  return swift_dynamicCastMetatype();
}

void OUTLINED_FUNCTION_45_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_48_2()
{
  return *(void *)(v0 - 96);
}

void OUTLINED_FUNCTION_50_2()
{
  uint64_t v2 = *(void *)(v0 - 96);
  *(void *)(v0 - 104) = *(void *)(v0 - 104);
  *(void *)(v0 - 96) = v2;
  uint64_t v3 = *(void *)(v0 - 296);
  uint64_t v4 = *(void *)(v0 - 288);
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_51_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_2()
{
  return AnyColumn.assumingType<A>(_:)();
}

void OUTLINED_FUNCTION_54_3(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_55_3(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_56_4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_57_3(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_58_2()
{
  return AnyColumn.wrappedElementType.getter();
}

void OUTLINED_FUNCTION_60_2()
{
  *(void *)(v0 - 104) = 0;
  *(void *)(v0 - 96) = 0xE000000000000000;
  Swift::Int v2 = *(void *)(v0 - 304);
  _StringGuts.grow(_:)(v2);
}

_OWORD *OUTLINED_FUNCTION_69_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21,long long a22)
{
  return outlined init with take of Any(&a19, &a22);
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_71_1()
{
  return *(void *)(v0 - 96);
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v1, v0);
}

double OUTLINED_FUNCTION_76_1()
{
  return 0.0;
}

void OUTLINED_FUNCTION_78_1(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_80_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_81_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return v0;
}

void OUTLINED_FUNCTION_88_0()
{
  uint64_t v1 = 46;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

NSString __swiftcall NSString.__allocating_init(string:)(Swift::String string)
{
  id object = string._object;
  uint64_t countAndFlagsBits = string._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x22A674AE0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithString_, v4);

  return v5;
}

void MLDataTable.write(to:)(uint64_t a1)
{
  uint64_t v4 = v3;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0_6();
  uint64_t v7 = v6;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v37[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  BOOL v13 = &v37[-v12];
  uint64_t v14 = *(void **)v2;
  LODWORD(object) = *(unsigned __int8 *)(v2 + 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(&v37[-v12], a1, v1);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    int v38 = (int)object;
    uint64_t v41 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_2272CB370;
    uint64_t v39 = 0;
    unint64_t v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v17._uint64_t countAndFlagsBits = 0x27204C5255;
    v17._id object = (void *)0xE500000000000000;
    String.append(_:)(v17);
    lazy protocol witness table accessor for type URL and conformance URL();
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._id object = (void *)0x80000002272D57E0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v19);
    if (one-time initialization token for tmpPath != -1) {
      swift_once();
    }
    uint64_t countAndFlagsBits = tmpPath._countAndFlagsBits;
    id object = tmpPath._object;
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = countAndFlagsBits;
    v21._id object = object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 10030;
    v22._id object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    uint64_t v23 = v39;
    unint64_t v24 = v40;
    *(void *)(v16 + 56) = MEMORY[0x263F8D310];
    *(void *)(v16 + 32) = v23;
    *(void *)(v16 + 40) = v24;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:)();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v13, v1);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v13, v11, v1);
    uint64_t v14 = v41;
    LOBYTE(object) = v38;
  }
  v25._uint64_t countAndFlagsBits = 0x6C62615461746144;
  v25._id object = (void *)0xE900000000000065;
  URL.appendPathComponent(_:)(v25);
  static _FileUtilities.prepareForWriting(to:isDirectory:)((uint64_t)v13, 1);
  if (v4)
  {
    uint64_t v26 = OUTLINED_FUNCTION_1_11();
    v27(v26);
  }
  else if (object)
  {
    uint64_t v28 = v14;
    swift_willThrow();
    uint64_t v29 = OUTLINED_FUNCTION_1_11();
    v30(v29);
  }
  else
  {
    uint64_t v31 = v14[2];
    swift_retain();
    uint64_t v32 = URL.path.getter();
    uint64_t v34 = v33;
    swift_retain();
    specialized String.withCString<A>(_:)(v32, v34, 1, v31);
    uint64_t v35 = OUTLINED_FUNCTION_1_11();
    v36(v35);
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v14, 0);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLDataTable.write(toDirectory:)(Swift::String toDirectory)
{
}

void MLDataTable.writeCSV(to:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v1;
  char v5 = *(unsigned char *)(v1 + 8);
  if (URL.isFileURL.getter())
  {
    static _FileUtilities.prepareForWriting(to:isDirectory:)(a1, 0);
    if (!v2)
    {
      if (v5)
      {
        uint64_t v6 = v4;
        swift_willThrow();
      }
      else
      {
        uint64_t v8 = v4[2];
        outlined copy of Result<_DataTable, Error>(v4, 0);
        swift_retain();
        uint64_t v9 = URL.path.getter();
        uint64_t v11 = v10;
        swift_retain();
        specialized String.withCString<A>(_:)(v9, v11, 0, v8);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Result<_DataTable, Error>(v4, 0);
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD00000000000002CLL;
    *(void *)(v7 + 8) = 0x80000002272D5820;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(unsigned char *)(v7 + 48) = 0;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLDataTable.writeCSV(toFile:)(Swift::String toFile)
{
}

uint64_t MLDataTable.write(toDirectory:)(uint64_t a1, void *a2, void (*a3)(char *))
{
  uint64_t v20 = a3;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0_6();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v4;
  char v13 = *((unsigned char *)v4 + 8);
  type metadata accessor for NSString();
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = a1;
  v14._id object = a2;
  NSString v15 = NSString.__allocating_init(string:)(v14);
  id v16 = objc_msgSend(v15, sel_stringByExpandingTildeInPath);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = v12;
  char v19 = v13;
  v20(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v3);
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = _StringObject.sharedUTF8.getter();
    }
    closure #1 in CMLTable.save(to:type:)(v6, a3, a4);
    return swift_release();
  }
  v8[0] = a1;
  v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in CMLTable.save(to:type:)((uint64_t)v8, a3, a4);
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void v10[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
LABEL_11:
    swift_release();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v7 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v7, v8, (uint64_t (*)(void))partial apply for closure #1 in CMLParameters.add(key:featureValue:));
    goto LABEL_11;
  }
  v10[0] = a1;
  v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a3 + 16), v10, *(void *)(a4 + 16));
  if (v4)
  {
    swift_release();
    return swift_release();
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v6;
  uint64_t v7;
  void v9[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v6, v7, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in CMLTable.renameColumn(named:to:));
    return swift_release();
  }
  v9[0] = a1;
  v9[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a3 + 16), a4, v9);
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void, void *, void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void v16[2];

  if ((a2 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_17_7(), !v12))
  {
    OUTLINED_FUNCTION_15_7();
LABEL_11:
    swift_release();
    return swift_release();
  }
  if ((v10 & 0x2000000000000000) == 0)
  {
    if ((v9 & 0x1000000000000000) != 0) {
      char v13 = OUTLINED_FUNCTION_13_6(v7, v8, v9, v10);
    }
    else {
      char v13 = OUTLINED_FUNCTION_25_8();
    }
    OUTLINED_FUNCTION_26_5(v13, v14);
    goto LABEL_11;
  }
  v16[0] = v9;
  v16[1] = v10 & 0xFFFFFFFFFFFFFFLL;
  v11(*(void *)(a3 + 16), v16, *(void *)(a4 + 16));
  if (v4)
  {
    swift_release();
    return swift_release();
  }
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLTable.save(to:type:)(uint64_t a1)
{
  return closure #1 in CMLTable.save(to:type:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t OUTLINED_FUNCTION_1_11()
{
  return v0;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8NSNumberCGSaySo12MLMultiArrayCGG_Si5label_AL9embeddingts5NeverOTg505_sSo8f5CSo12gh42CSiADIgggdo_AB_ADtSi5label_AD9embeddingts5k128OIegnrzr_TR098_s8CreateML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  unint64_t v6 = a1;
  unint64_t v31 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_67;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v37 = a2 >> 62;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v8 >= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v39 = MEMORY[0x263F8EE78];
    uint64_t v34 = v9 & ~(v9 >> 63);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v9 < 0)
    {
      __break(1u);
LABEL_70:

      __break(1u);
      return;
    }
    uint64_t v29 = v4;
    if (!v9) {
      break;
    }
    uint64_t v30 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v31)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v33 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    unint64_t v11 = 0;
    unint64_t v38 = v6 & 0xC000000000000001;
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v36 = a2 & 0xC000000000000001;
    uint64_t v32 = v9;
    unint64_t v12 = v6;
    while (v34 != v11)
    {
      if (v33 == v11) {
        goto LABEL_59;
      }
      if (v38)
      {
        id v13 = (id)MEMORY[0x22A6753B0](v11, v6);
      }
      else
      {
        if (v11 >= *(void *)(v30 + 16)) {
          goto LABEL_66;
        }
        id v13 = *(id *)(v6 + 8 * v11 + 32);
      }
      unint64_t v3 = (unint64_t)v13;
      if (v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v11 == v14) {
        goto LABEL_70;
      }
      if (v36)
      {
        id v15 = (id)MEMORY[0x22A6753B0](v11, a2);
      }
      else
      {
        if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_60;
        }
        id v15 = *(id *)(a2 + 8 * v11 + 32);
      }
      id v16 = v15;
      id v17 = objc_msgSend((id)v3, sel_integerValue, v29);

      unint64_t v18 = *(void *)(v39 + 16);
      unint64_t v3 = v18 + 1;
      if (v18 >= *(void *)(v39 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v11;
      *(void *)(v39 + 16) = v3;
      uint64_t v19 = v39 + 16 * v18;
      *(void *)(v19 + 32) = v17;
      *(void *)(v19 + 40) = v16;
      uint64_t v9 = v32;
      unint64_t v6 = v12;
      if (v32 == v11)
      {
        uint64_t v10 = v30;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
  unint64_t v38 = v6 & 0xC000000000000001;
  uint64_t v4 = a2 & 0xFFFFFFFFFFFFFF8;
  unint64_t v36 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_33:
  unint64_t v35 = v6;
  for (uint64_t i = v9 + 4; ; ++i)
  {
    if (v31)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(void *)(v10 + 16);
    }
    unint64_t v6 = i - 4;
    if (i - 4 == v21)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v38)
    {
      id v22 = (id)MEMORY[0x22A6753B0](i - 4, v35);
    }
    else
    {
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_61;
      }
      if (v6 >= *(void *)(v10 + 16)) {
        goto LABEL_62;
      }
      id v22 = *(id *)(v35 + 8 * i);
    }
    uint64_t v23 = v22;
    if (__OFADD__(v6, 1)) {
      goto LABEL_63;
    }
    if (v37)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = *(void *)(v4 + 16);
    }
    if (v6 == v24) {
      break;
    }
    if (v36)
    {
      id v25 = (id)MEMORY[0x22A6753B0](i - 4, a2);
    }
    else
    {
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_64;
      }
      if (v6 >= *(void *)(v4 + 16)) {
        goto LABEL_65;
      }
      id v25 = *(id *)(a2 + 8 * i);
    }
    id v26 = v25;
    id v27 = objc_msgSend(v23, sel_integerValue, v29);

    unint64_t v3 = *(void *)(v39 + 16);
    if (v3 >= *(void *)(v39 + 24) >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    *(void *)(v39 + 16) = v3 + 1;
    uint64_t v28 = v39 + 16 * v3;
    *(void *)(v28 + 32) = v27;
    *(void *)(v28 + 40) = v26;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t MLFewShotSoundClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of MLFewShotSoundClassifier.ModelParameters(v1, a1, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
}

uint64_t MLFewShotSoundClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier();
  return outlined init with copy of MLFewShotSoundClassifier.ModelParameters(v1 + *(int *)(v3 + 20), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLFewShotSoundClassifier;
  if (!type metadata singleton initialization cache for MLFewShotSoundClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MLFewShotSoundClassifier.trainingMetrics.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_5_7();
  return outlined assign with take of MLClassifierMetrics(v0, v1 + *(int *)(v2 + 20), (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t (*MLFewShotSoundClassifier.trainingMetrics.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLFewShotSoundClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLFewShotSoundClassifier();
  return outlined init with copy of MLFewShotSoundClassifier.ModelParameters(v1 + *(int *)(v3 + 24), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLFewShotSoundClassifier.validationMetrics.setter()
{
  uint64_t v2 = OUTLINED_FUNCTION_5_7();
  return outlined assign with take of MLClassifierMetrics(v0, v1 + *(int *)(v2 + 24), (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t (*MLFewShotSoundClassifier.validationMetrics.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLFewShotSoundClassifier.validationLoss.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MLFewShotSoundClassifier() + 28));
}

uint64_t MLFewShotSoundClassifier.validationLoss.setter(double a1)
{
  uint64_t result = type metadata accessor for MLFewShotSoundClassifier();
  *(double *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.validationLoss.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLFewShotSoundClassifier.init(trainingData:modelParameters:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v118 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v117 = v9;
  uint64_t v115 = type metadata accessor for ComputeDevice();
  OUTLINED_FUNCTION_0();
  uint64_t v119 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  uint64_t v114 = v12;
  uint64_t v116 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_16_2();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v122 = (uint64_t)&v102 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v113 = (uint64_t)&v102 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v20 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v120 = v21;
  uint64_t v121 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v123 = v22;
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  id v26 = (char *)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v102 - v28;
  MEMORY[0x270FA5388](v27);
  unint64_t v31 = (char *)&v102 - v30;
  uint64_t v32 = (int *)type metadata accessor for MLFewShotSoundClassifier();
  uint64_t v125 = a3 + v32[5];
  MLClassifierMetrics.init()((uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v102, v103, (uint64_t)v104, (uint64_t)v105, v106, (uint64_t)v107, v108, v109, v110, v111, v112,
    v113);
  uint64_t v124 = a3 + v32[6];
  MLClassifierMetrics.init()(v40, v41, v42, v43, v44, v45, v46, v47, v102, v103, (uint64_t)v104, (uint64_t)v105, v106, (uint64_t)v107, v108, v109, v110, v111, v112,
    v113);
  *(void *)(a3 + v32[7]) = 0;
  uint64_t v126 = a3;
  outlined init with copy of MLFewShotSoundClassifier.ModelParameters(a2, a3, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  uint64_t v48 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v51 = v127;
  uint64_t v52 = MLFewShotSoundClassifier.DataSource.extractFeatures(with:)((void *)(a2 + *(int *)(v48 + 32)));
  uint64_t v58 = v51;
  if (v51)
  {
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(v49, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(a1, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.DataSource);
    int v59 = 0;
    uint64_t v60 = v126;
    goto LABEL_27;
  }
  uint64_t v61 = (void *)v52;
  uint64_t v109 = v48;
  uint64_t v104 = v26;
  uint64_t v107 = v29;
  uint64_t v105 = v31;
  uint64_t v106 = 0;
  uint64_t v127 = 0;
  uint64_t v60 = v126;
  *(void *)(v126 + v32[12]) = v52;
  uint64_t v103 = v32[8];
  *(void *)(v60 + v103) = &outlined read-only object #0 of MLFewShotSoundClassifier.init(trainingData:modelParameters:);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)&outlined read-only object #0 of MLFewShotSoundClassifier.init(trainingData:modelParameters:), 0, qword_26DB3FCD0, v53, v54, v55, v56, v57, v102, v103, (uint64_t)v104, (uint64_t)v105, v106, (uint64_t)v107, v108, v109, v110, v111);
  *(void *)(v60 + v32[9]) = v62;
  id v63 = objc_msgSend(v61, sel_trainingDataEmbeddings);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  unint64_t v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v64 >> 62)
  {
    OUTLINED_FUNCTION_10_5();
    uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v66 = v122;
  uint64_t v67 = v123;
  if (!v65) {
    goto LABEL_19;
  }
  uint64_t v108 = v50;
  if ((v64 & 0xC000000000000001) != 0)
  {
    id v68 = (id)MEMORY[0x22A6753B0](0, v64);
  }
  else
  {
    if (!*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_39;
    }
    id v68 = *(id *)(v64 + 32);
  }
  uint64_t v69 = v68;
  swift_bridgeObjectRelease();
  id v70 = objc_msgSend(v69, sel_shape);

  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v64 >> 62))
  {
    uint64_t v71 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_11;
  }
LABEL_39:
  OUTLINED_FUNCTION_10_5();
  uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v50 = v108;
  if (v71 != 3)
  {
LABEL_19:
    uint64_t v58 = v127;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v83 = 0xD000000000000038;
    *(void *)(v83 + 8) = 0x80000002272D5850;
    *(_OWORD *)(v83 + 16) = 0u;
    *(_OWORD *)(v83 + 32) = 0u;
    *(unsigned char *)(v83 + 48) = 2;
    swift_willThrow();
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(v49, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(v50, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.DataSource);
    int v59 = 0;
    goto LABEL_27;
  }
  uint64_t v72 = v120;
  outlined init with copy of URL?(v49 + *(int *)(v109 + 36), v120, &demangling cache variable for type metadata for URL?);
  uint64_t v73 = v121;
  if (__swift_getEnumTagSinglePayload(v72, 1, v121) == 1)
  {
    outlined destroy of URL?(v72, &demangling cache variable for type metadata for URL?);
    if ((v64 & 0xC000000000000001) != 0)
    {
      id v75 = (id)MEMORY[0x22A6753B0](1, v64);
      uint64_t v74 = v119;
      goto LABEL_16;
    }
    uint64_t v74 = v119;
    if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) > 1uLL)
    {
      id v75 = *(id *)(v64 + 40);
LABEL_16:
      swift_bridgeObjectRelease();
      objc_msgSend(v75, sel_integerValue);

      MLFewShotSoundClassifier.TemporalClassifier.init(outputs:inputChannels:)();
      uint64_t v76 = v114;
      static ComputeDevice.cpu.getter();
      lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
      OUTLINED_FUNCTION_7_10();
      Layer.placed(on:)();
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v115);
      outlined destroy of MLFewShotSoundClassifier.ModelParameters(v66, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
LABEL_17:
      outlined init with take of MLFewShotSoundClassifier.TemporalClassifier((uint64_t)v75, v60 + v32[10]);
      uint64_t v77 = (uint64_t)v117;
      *uint64_t v117 = 1065353216;
      uint64_t v78 = *MEMORY[0x263F58408];
      uint64_t v79 = type metadata accessor for GradientClippingMode();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 104))(v77, v78, v79);
      __swift_storeEnumTagSinglePayload(v77, 0, 1, v79);
      uint64_t v81 = type metadata accessor for RegularizationKind();
      __swift_storeEnumTagSinglePayload(v118, 1, 1, v81);
      lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
      Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)();
      uint64_t v82 = v106;
      MLFewShotSoundClassifier.train()();
      if (!v82)
      {
        outlined destroy of MLFewShotSoundClassifier.ModelParameters(v49, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
        outlined destroy of MLFewShotSoundClassifier.ModelParameters(v108, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.DataSource);
        return;
      }
      outlined destroy of MLFewShotSoundClassifier.ModelParameters(v49, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
      outlined destroy of MLFewShotSoundClassifier.ModelParameters(v108, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.DataSource);
      int v59 = 1;
      goto LABEL_26;
    }
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  uint64_t v122 = v49;
  uint64_t v84 = v72;
  uint64_t v85 = (uint64_t)v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v105, v84, v73);
  uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v86(v107, v85, v73);
  if ((v64 & 0xC000000000000001) != 0)
  {
    id v88 = (id)MEMORY[0x22A6753B0](1, v64);
    uint64_t v87 = (uint64_t)v104;
  }
  else
  {
    uint64_t v87 = (uint64_t)v104;
    if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 1uLL) {
      goto LABEL_43;
    }
    id v88 = *(id *)(v64 + 40);
  }
  swift_bridgeObjectRelease();
  id v89 = objc_msgSend(v88, sel_integerValue);

  uint64_t v90 = (uint64_t)v107;
  uint64_t v91 = v121;
  v86((char *)v87, (uint64_t)v107, v121);
  uint64_t v92 = v106;
  uint64_t v93 = Data.init(contentsOf:options:)();
  if (!v92)
  {
    BlobsFile.init(data:)(v93, v94, (uint64_t)v128);
    id v75 = 0;
    uint64_t v96 = v123 + 8;
    uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
    v97(v87, v91);
    uint64_t v98 = v112;
    MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:)((uint64_t)v89, (uint64_t)v128, v112);
    uint64_t v49 = v122;
    uint64_t v106 = 0;
    uint64_t v99 = OUTLINED_FUNCTION_6_8();
    ((void (*)(uint64_t))v97)(v99);
    uint64_t v100 = v110;
    outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(v98, v110);
    uint64_t v123 = v96;
    static ComputeDevice.cpu.getter();
    lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    OUTLINED_FUNCTION_7_10();
    Layer.placed(on:)();
    OUTLINED_FUNCTION_25_0();
    v101();
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(v100, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    v97((uint64_t)v105, v91);
    goto LABEL_17;
  }
  uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
  v95(v87, v91);
  v95(v90, v91);
  outlined destroy of MLFewShotSoundClassifier.ModelParameters(v122, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  outlined destroy of MLFewShotSoundClassifier.ModelParameters(v108, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.DataSource);
  v95((uint64_t)v105, v91);
  int v59 = 0;
LABEL_26:
  uint64_t v58 = v127;
LABEL_27:
  outlined destroy of MLFewShotSoundClassifier.ModelParameters(v60, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  outlined destroy of MLFewShotSoundClassifier.ModelParameters(v125, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLFewShotSoundClassifier.ModelParameters(v124, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  if (v58)
  {
    if (!v59) {
      goto LABEL_29;
    }
LABEL_32:
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(v60 + v32[10], (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    outlined destroy of URL?(v60 + v32[11], &demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
    if (v58) {
      return;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v59) {
    goto LABEL_32;
  }
LABEL_29:
  if (v58) {
    return;
  }
LABEL_33:
}

uint64_t MLFewShotSoundClassifier.train()()
{
  uint64_t v1 = type metadata accessor for MLClassifierMetrics(0);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v124 = (double *)((char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v2);
  Swift::String v133 = (double *)((char *)&v120 - v4);
  uint64_t v168 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  uint64_t v5 = MEMORY[0x270FA5388](v168);
  uint64_t v121 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v161 = (uint64_t)&v120 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  unint64_t v160 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  Swift::String v135 = (char *)&v120 - v11;
  uint64_t v165 = type metadata accessor for Tensor();
  uint64_t v153 = *(void (***)(void))(v165 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v165);
  uint64_t v164 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  long long v159 = (char *)&v120 - v15;
  MEMORY[0x270FA5388](v14);
  long long v177 = (char *)&v120 - v16;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
  uint64_t v17 = MEMORY[0x270FA5388](v167);
  uint64_t v142 = (uint64_t)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v158 = (char *)&v120 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  uint64_t v146 = *(char **)(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v141 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v120 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  MEMORY[0x270FA5388](v25 - 8);
  unint64_t v162 = (char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  MEMORY[0x270FA5388](v134);
  uint64_t v174 = (uint64_t)&v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for LearningPhase();
  uint64_t v157 = *(void (***)(char *, uint64_t, uint64_t))(v150 - 8);
  MEMORY[0x270FA5388](v150);
  uint64_t v149 = (char *)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v173 = (uint64_t)&v120 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v122 = (uint64_t)&v120 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v125 = (uint64_t)&v120 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, embedding: MLMultiArray)], DataSample<Tensor, Tensor>>.PrefetchMode);
  uint64_t v171 = *(void *)(v35 - 8);
  uint64_t v172 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v170 = (char *)&v120 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for ComputeDevice();
  uint64_t v37 = *(void *)(v139 - 8);
  uint64_t v38 = *(void *)(v37 + 64);
  uint64_t v39 = MEMORY[0x270FA5388](v139);
  uint64_t v163 = (char *)&v120 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v138 = (char *)&v120 - v40;
  uint64_t v41 = type metadata accessor for MLFewShotSoundClassifier();
  MEMORY[0x270FA5388](v41);
  char v176 = (char *)&v120 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, embedding: MLMultiArray)], DataSample<Tensor, Tensor>>);
  uint64_t v123 = *(void *)(v137 - 8);
  MEMORY[0x270FA5388](v137);
  uint64_t v140 = (char *)&v120 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  CMTimeValue v166 = (void (**)(char *, uint64_t))v0[2];
  uint64_t v136 = *v0;
  uint64_t v130 = *(int *)(v41 + 48);
  uint64_t v44 = *(void **)((char *)v0 + v130);
  unint64_t v169 = v0;
  id v45 = objc_msgSend(v44, sel_trainingDataLabels);
  uint64_t v129 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v47 = objc_msgSend(v44, sel_trainingDataEmbeddings);
  uint64_t v128 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v49 = v175;
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8NSNumberCGSaySo12MLMultiArrayCGG_Si5label_AL9embeddingts5NeverOTg505_sSo8f5CSo12gh42CSiADIgggdo_AB_ADtSi5label_AD9embeddingts5k128OIegnrzr_TR098_s8CreateML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n(v46, v48);
  uint64_t v51 = v50;
  uint64_t v152 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v52 = (uint64_t)v176;
  outlined init with copy of MLFewShotSoundClassifier.ModelParameters((uint64_t)v0, (uint64_t)v176, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier);
  uint64_t v53 = v138;
  static ComputeDevice.cpu.getter();
  uint64_t v175 = (int *)v41;
  uint64_t v54 = *(void *)(*(void *)(v52 + *(int *)(v41 + 32)) + 16);
  uint64_t v180 = 0;
  uint64_t v181 = v51;
  long long v178 = 0u;
  long long v179 = 0u;
  uint64_t v55 = v163;
  uint64_t v56 = v53;
  uint64_t v57 = v139;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v163, v56, v139);
  unint64_t v58 = (*(unsigned __int8 *)(v37 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = v54;
  (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v59 + v58, v55, v57);
  (*(void (**)(char *, void, uint64_t))(v171 + 104))(v170, *MEMORY[0x263F58528], v172);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: Int, embedding: MLMultiArray)]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [(label: Int, embedding: MLMultiArray)] and conformance [A], &demangling cache variable for type metadata for [(label: Int, embedding: MLMultiArray)]);
  lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance DataSample<A, B>, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  uint64_t v60 = 1;
  uint64_t v61 = v169;
  Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v131 = v37 + 8;
  uint64_t v127 = v62;
  v62(v138, v139);
  outlined destroy of MLFewShotSoundClassifier.ModelParameters((uint64_t)v176, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier);
  uint64_t v63 = v125;
  swift_bridgeObjectRelease();
  uint64_t v64 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  uint64_t v65 = v173;
  outlined init with copy of URL?((uint64_t)v61 + *(int *)(v64 + 36), v173, &demangling cache variable for type metadata for URL?);
  uint64_t v66 = type metadata accessor for URL();
  LODWORD(v57) = __swift_getEnumTagSinglePayload(v65, 1, v66);
  outlined destroy of URL?(v65, &demangling cache variable for type metadata for URL?);
  if (v57 != 1)
  {
    outlined init with copy of MLFewShotSoundClassifier.ModelParameters((uint64_t)v61 + v175[10], v63, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    uint64_t v60 = 0;
  }
  uint64_t result = __swift_storeEnumTagSinglePayload(v63, v60, 1, v168);
  if (v136 < 1)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    uint64_t v151 = v175[8];
    uint64_t v143 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
    unsigned int v132 = *MEMORY[0x263F583A8];
    uint64_t v148 = (char **)(v157 + 13);
    uint64_t v147 = (void (**)(char *, uint64_t))(v157 + 1);
    uint64_t v157 = (void (**)(char *, uint64_t, uint64_t))(v146 + 32);
    uint64_t v156 = (void (**)(char *, uint64_t, uint64_t))(v153 + 4);
    uint64_t v155 = (void (**)(char *, char *, uint64_t))(v153 + 2);
    uint64_t v163 = (char *)(v153 + 1);
    CMTimeValue v166 = (void (**)(char *, uint64_t))(v146 + 8);
    unsigned int v126 = *MEMORY[0x263F583B0];
    uint64_t v68 = 1;
    double v69 = 1.79769313e308;
    uint64_t v70 = (uint64_t)v135;
    char v176 = v24;
    uint64_t v71 = (uint64_t)v162;
    uint64_t v154 = v20;
    while (1)
    {
      uint64_t v72 = *(void *)(*(uint64_t *)((char *)v61 + v151) + 16);
      swift_allocObject();
      uint64_t v73 = v152;
      uint64_t v173 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v72);
      if (v73) {
        goto LABEL_28;
      }
      uint64_t v144 = v68;
      uint64_t v152 = 0;
      uint64_t v74 = v149;
      uint64_t v75 = v150;
      uint64_t v146 = *v148;
      ((void (*)(char *, void, uint64_t))v146)(v149, v132, v150);
      uint64_t v76 = (uint64_t)v61 + v175[10];
      uint64_t v170 = (char *)lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
      uint64_t v172 = v76;
      Layer.prepare(for:)();
      uint64_t v145 = *v147;
      v145(v74, v75);
      uint64_t v77 = v174;
      Dataset.makeIterator()();
      uint64_t v153 = (void (**)(void))(v77 + *(int *)(v134 + 44));
      uint64_t v171 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator, &demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
        dispatch thunk of IteratorProtocol.next()();
        if ((void)v178)
        {
          uint64_t v78 = (void (*)(uint64_t *))*v153;
          uint64_t v181 = v178;
          v78(&v181);
          swift_bridgeObjectRelease();
          uint64_t v79 = v71;
          uint64_t v80 = 0;
        }
        else
        {
          uint64_t v79 = v71;
          uint64_t v80 = 1;
        }
        __swift_storeEnumTagSinglePayload(v79, v80, 1, v20);
        uint64_t v61 = v169;
        if (__swift_getEnumTagSinglePayload(v71, 1, v20) == 1) {
          break;
        }
        (*v157)(v24, v71, v20);
        uint64_t v81 = v165;
        __swift_storeEnumTagSinglePayload(v70, 1, 1, v165);
        uint64_t v82 = v70;
        uint64_t v83 = v161;
        uint64_t v84 = outlined init with copy of MLFewShotSoundClassifier.ModelParameters(v172, v161, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        MEMORY[0x270FA5388](v84);
        valueWithGradient<A>(at:of:)();
        uint64_t v85 = v83;
        uint64_t v86 = (uint64_t)v160;
        outlined destroy of MLFewShotSoundClassifier.ModelParameters(v85, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        outlined init with copy of URL?(v82, v86, &demangling cache variable for type metadata for Tensor?);
        uint64_t result = __swift_getEnumTagSinglePayload(v86, 1, v81);
        if (result == 1) {
          goto LABEL_32;
        }
        uint64_t v87 = v158;
        id v88 = v159;
        (*v156)(v159, v86, v81);
        outlined destroy of URL?(v82, &demangling cache variable for type metadata for Tensor?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
        Adam.update(_:with:)();
        swift_bridgeObjectRelease();
        (*v155)(v87, v177, v81);
        softmax(_:alongAxis:)();
        id v89 = *(void (**)(char *, uint64_t))v163;
        (*(void (**)(char *, uint64_t))v163)(v88, v81);
        v89(v177, v81);
        uint64_t v90 = v164;
        uint64_t v91 = v154;
        DataSample.labels.getter();
        _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)();
        v89(v90, v81);
        uint64_t v92 = (uint64_t)v87;
        uint64_t v24 = v176;
        outlined destroy of URL?(v92, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
        (*v166)(v24, v91);
        uint64_t v70 = v82;
        uint64_t v20 = v91;
        uint64_t v71 = (uint64_t)v162;
      }
      outlined destroy of URL?(v174, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
      uint64_t v93 = v133;
      unint64_t v94 = v152;
      static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(*(uint64_t *)((char *)v61 + v151), v133);
      uint64_t v152 = v94;
      if (v94) {
        goto LABEL_23;
      }
      outlined assign with take of MLClassifierMetrics((uint64_t)v93, (uint64_t)v61 + v175[5], (void (*)(void))type metadata accessor for MLClassifierMetrics);
      uint64_t v95 = v149;
      uint64_t v96 = v150;
      ((void (*)(char *, void, uint64_t))v146)(v149, v126, v150);
      uint64_t v97 = v168;
      Layer.prepare(for:)();
      v145(v95, v96);
      uint64_t v98 = *(void **)((char *)v61 + v130);
      id v99 = objc_msgSend(v98, sel_validationDataEmbeddings);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v100 = objc_msgSend(v98, sel_validationDataLabels);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v101 = v138;
      static ComputeDevice.cpu.getter();
      uint64_t v102 = (uint64_t)v141;
      MLFewShotSoundClassifier.validationData(features:labels:device:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v127(v101, v139);
      uint64_t v103 = v142;
      MLFewShotSoundClassifier.performValidationStep(on:)(v142, v142 + *(int *)(v167 + 48), v102);
      Tensor.scalar<A>(as:)();
      double v104 = *(float *)&v178;
      if (v69 >= *(float *)&v178)
      {
        uint64_t v106 = v125;
        outlined destroy of URL?(v125, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
        outlined init with copy of MLFewShotSoundClassifier.ModelParameters(v172, v106, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        __swift_storeEnumTagSinglePayload(v106, 0, 1, v97);
        uint64_t v107 = v151;
        uint64_t v108 = *(void *)(*(uint64_t *)((char *)v61 + v151) + 16);
        swift_allocObject();
        uint64_t v109 = v152;
        _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v108);
        if (v109)
        {
          swift_release();
          outlined destroy of URL?(v142, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
          (*v166)(v141, v20);
          goto LABEL_28;
        }
        uint64_t v110 = v20;
        uint64_t v111 = v164;
        uint64_t v152 = 0;
        uint64_t v112 = v141;
        DataSample.labels.getter();
        uint64_t v113 = v112;
        _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)();
        uint64_t v114 = v111;
        uint64_t v20 = v110;
        (*(void (**)(char *, uint64_t))v163)(v114, v165);
        uint64_t v115 = v124;
        uint64_t v116 = v152;
        static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(*(uint64_t *)((char *)v61 + v107), v124);
        swift_release();
        swift_release();
        outlined destroy of URL?(v142, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
        (*v166)(v113, v110);
        uint64_t v152 = v116;
        if (v116) {
          goto LABEL_28;
        }
        uint64_t v105 = v175;
        outlined assign with take of MLClassifierMetrics((uint64_t)v115, (uint64_t)v61 + v175[6], (void (*)(void))type metadata accessor for MLClassifierMetrics);
        double v69 = v104;
      }
      else
      {
        swift_release();
        outlined destroy of URL?(v103, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
        (*v166)((char *)v102, v20);
        uint64_t v105 = v175;
      }
      *(double *)((char *)v61 + v105[7]) = v104;
      uint64_t v70 = (uint64_t)v135;
      uint64_t v24 = v176;
      if (v144 == v136) {
        break;
      }
      uint64_t v68 = v144 + 1;
      if (__OFADD__(v144, 1))
      {
        __break(1u);
LABEL_23:
        swift_release();
LABEL_28:
        outlined destroy of URL?(v125, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
        return (*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v140, v137);
      }
    }
    (*(void (**)(char *, uint64_t))(v123 + 8))(v140, v137);
    uint64_t v117 = v122;
    outlined init with take of MLFewShotSoundClassifier.TemporalClassifier?(v125, v122);
    if (__swift_getEnumTagSinglePayload(v117, 1, v97) == 1)
    {
      uint64_t v118 = v172;
      uint64_t v119 = v121;
      outlined init with copy of MLFewShotSoundClassifier.ModelParameters(v172, v121, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      outlined destroy of URL?(v117, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
    }
    else
    {
      uint64_t v119 = v121;
      outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(v117, v121);
      uint64_t v118 = v172;
    }
    return outlined assign with take of MLClassifierMetrics(v119, v118, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
  }
  return result;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier()
{
  unint64_t result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier)
  {
    type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier);
  }
  return result;
}

uint64_t outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    uint64_t v19 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)v3 + v9;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(v8 + 36);
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (char *)v3 + v14;
    if (__swift_getEnumTagSinglePayload((uint64_t)v3 + v14, 1, v12))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v13((uint64_t)v15, (uint64_t)v16, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v12);
    }
    uint64_t v20 = v6[5];
    uint64_t v21 = (id *)(a1 + v20);
    uint64_t v22 = (id *)((char *)v3 + v20);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v112 = v3;
    uint64_t v113 = v6;
    if (EnumCaseMultiPayload == 2)
    {
      id v30 = *v22;
      id v31 = *v22;
      *uint64_t v21 = v30;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v21 = *v22;
      uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v25 = *(int *)(v24 + 20);
      uint64_t v109 = (char *)v21 + v25;
      uint64_t v26 = (char *)v22 + v25;
      uint64_t v27 = type metadata accessor for DataFrame();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      uint64_t v29 = v26;
      uint64_t v3 = v112;
      v28(v109, v29, v27);
      v28((char *)v21 + *(int *)(v24 + 24), (char *)v22 + *(int *)(v24 + 24), v27);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v33 - 8) + 16))(v21, v22, v33);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = v6[6];
    uint64_t v35 = (id *)(a1 + v34);
    uint64_t v36 = (id *)((char *)v3 + v34);
    int v37 = swift_getEnumCaseMultiPayload();
    if (v37 == 2)
    {
      id v45 = *v36;
      id v46 = *v36;
      *uint64_t v35 = v45;
    }
    else if (v37 == 1)
    {
      *uint64_t v35 = *v36;
      uint64_t v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v39 = *(int *)(v38 + 20);
      uint64_t v110 = (char *)v35 + v39;
      uint64_t v40 = (char *)v36 + v39;
      uint64_t v41 = type metadata accessor for DataFrame();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
      uint64_t v43 = v40;
      uint64_t v6 = v113;
      v42(v110, v43, v41);
      uint64_t v44 = v41;
      uint64_t v3 = v112;
      v42((char *)v35 + *(int *)(v38 + 24), (char *)v36 + *(int *)(v38 + 24), v44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        id v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        id v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v48 - 8) + 16))(v35, v36, v48);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = v6[8];
    *(void *)(a1 + v6[7]) = *(uint64_t *)((char *)v3 + v6[7]);
    *(void *)(a1 + v49) = *(uint64_t *)((char *)v3 + v49);
    uint64_t v50 = v6[10];
    *(void *)(a1 + v6[9]) = *(uint64_t *)((char *)v3 + v6[9]);
    uint64_t v51 = a1 + v50;
    uint64_t v52 = (uint64_t)v3 + v50;
    uint64_t v53 = type metadata accessor for Conv2D();
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v108 = v51;
    v54(v51, v52, v53);
    uint64_t v55 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
    *(_DWORD *)(v51 + *(int *)(v55 + 20)) = *(_DWORD *)(v52 + *(int *)(v55 + 20));
    uint64_t v56 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
    uint64_t v57 = v56[5];
    uint64_t v111 = a1;
    unint64_t v58 = (_OWORD *)(v51 + v57);
    uint64_t v59 = v52 + v57;
    _OWORD *v58 = *(_OWORD *)(v52 + v57);
    uint64_t v60 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
    uint64_t v61 = *(int *)(v60 + 20);
    uint64_t v62 = (char *)v58 + v61;
    uint64_t v63 = v59 + v61;
    uint64_t v64 = type metadata accessor for Conv1D();
    uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16);
    v65(v62, v63, v64);
    *(_DWORD *)((char *)v58 + *(int *)(v60 + 24)) = *(_DWORD *)(v59 + *(int *)(v60 + 24));
    uint64_t v66 = v56[6];
    uint64_t v67 = v108 + v66;
    uint64_t v68 = v52 + v66;
    *(_OWORD *)(v108 + v66) = *(_OWORD *)(v52 + v66);
    v65((char *)(v108 + v66 + *(int *)(v60 + 20)), v52 + v66 + *(int *)(v60 + 20), v64);
    *(_DWORD *)(v67 + *(int *)(v60 + 24)) = *(_DWORD *)(v68 + *(int *)(v60 + 24));
    uint64_t v69 = v56[7];
    uint64_t v70 = v108 + v69;
    uint64_t v71 = v52 + v69;
    *(_OWORD *)(v108 + v69) = *(_OWORD *)(v52 + v69);
    v65((char *)(v108 + v69 + *(int *)(v60 + 20)), v52 + v69 + *(int *)(v60 + 20), v64);
    *(_DWORD *)(v70 + *(int *)(v60 + 24)) = *(_DWORD *)(v71 + *(int *)(v60 + 24));
    uint64_t v72 = v56[8];
    uint64_t v73 = v108 + v72;
    uint64_t v74 = v52 + v72;
    *(_OWORD *)(v108 + v72) = *(_OWORD *)(v52 + v72);
    v65((char *)(v108 + v72 + *(int *)(v60 + 20)), v52 + v72 + *(int *)(v60 + 20), v64);
    *(_DWORD *)(v73 + *(int *)(v60 + 24)) = *(_DWORD *)(v74 + *(int *)(v60 + 24));
    uint64_t v75 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
    uint64_t v76 = v108 + v75;
    uint64_t v77 = v52 + v75;
    uint64_t v78 = type metadata accessor for Dense();
    uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 16);
    v79(v76, v77, v78);
    uint64_t v80 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
    v79(v76 + *(int *)(v80 + 20), v77 + *(int *)(v80 + 20), v78);
    uint64_t v19 = v111;
    uint64_t v81 = v113[11];
    uint64_t v82 = v111 + v81;
    uint64_t v83 = (uint64_t)v112 + v81;
    *(_OWORD *)(v111 + v81) = *(_OWORD *)((char *)v112 + v81);
    uint64_t v84 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
    uint64_t v85 = v84[12];
    uint64_t v86 = (void *)(v82 + v85);
    uint64_t v87 = (const void *)(v83 + v85);
    uint64_t v88 = type metadata accessor for GradientClippingMode();
    if (__swift_getEnumTagSinglePayload((uint64_t)v87, 1, v88))
    {
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
      memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v88 - 8) + 16))(v86, v87, v88);
      __swift_storeEnumTagSinglePayload((uint64_t)v86, 0, 1, v88);
    }
    uint64_t v90 = v84[13];
    uint64_t v91 = (void *)(v82 + v90);
    uint64_t v92 = (const void *)(v83 + v90);
    uint64_t v93 = type metadata accessor for RegularizationKind();
    if (__swift_getEnumTagSinglePayload((uint64_t)v92, 1, v93))
    {
      uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
      memcpy(v91, v92, *(void *)(*(void *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v93 - 8) + 16))(v91, v92, v93);
      __swift_storeEnumTagSinglePayload((uint64_t)v91, 0, 1, v93);
    }
    *(_DWORD *)(v82 + v84[14]) = *(_DWORD *)(v83 + v84[14]);
    *(void *)(v82 + v84[15]) = *(void *)(v83 + v84[15]);
    uint64_t v95 = v84[16];
    uint64_t v96 = v82 + v95;
    uint64_t v97 = v83 + v95;
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
    id v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 16);
    v99(v96, v97, v98);
    v99(v82 + v84[17], v83 + v84[17], v98);
    uint64_t v100 = v84[18];
    uint64_t v101 = (void *)(v82 + v100);
    uint64_t v102 = (const void *)(v83 + v100);
    if (__swift_getEnumTagSinglePayload(v83 + v100, 1, v98))
    {
      uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
      memcpy(v101, v102, *(void *)(*(void *)(v103 - 8) + 64));
    }
    else
    {
      v99((uint64_t)v101, (uint64_t)v102, v98);
      __swift_storeEnumTagSinglePayload((uint64_t)v101, 0, 1, v98);
    }
    uint64_t v104 = v113[12];
    uint64_t v105 = *(void **)((char *)v112 + v104);
    *(void *)(v111 + v104) = v105;
    id v106 = v105;
  }
  return v19;
}

void destroy for MLFewShotSoundClassifier(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = a1 + *(int *)(v4 + 36);
  if (!__swift_getEnumTagSinglePayload(v8, 1, v6)) {
    v7(v8, v6);
  }
  uint64_t v9 = (id *)(a1 + a2[5]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      uint64_t v12 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v13 = (char *)v9 + *(int *)(v12 + 20);
      uint64_t v14 = type metadata accessor for DataFrame();
      uint64_t v15 = *(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8);
      v15(v13, v14);
      v15((char *)v9 + *(int *)(v12 + 24), v14);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v11 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v11 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(v11);
      (*(void (**)(id *, uint64_t))(*(void *)(v16 - 8) + 8))(v9, v16);
      break;
  }
  uint64_t v17 = (id *)(a1 + a2[6]);
  int v18 = swift_getEnumCaseMultiPayload();
  switch(v18)
  {
    case 2:

      break;
    case 1:
      uint64_t v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v21 = (char *)v17 + *(int *)(v20 + 20);
      uint64_t v22 = type metadata accessor for DataFrame();
      uint64_t v23 = *(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8);
      v23(v21, v22);
      v23((char *)v17 + *(int *)(v20 + 24), v22);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v19 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v19 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v19);
      (*(void (**)(id *, uint64_t))(*(void *)(v24 - 8) + 8))(v17, v24);
      break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = a1 + a2[10];
  uint64_t v26 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  uint64_t v27 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v28 = v25 + v27[5];
  uint64_t v29 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v30 = v28 + *(int *)(v29 + 20);
  uint64_t v31 = type metadata accessor for Conv1D();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8);
  v32(v30, v31);
  v32(v25 + v27[6] + *(int *)(v29 + 20), v31);
  v32(v25 + v27[7] + *(int *)(v29 + 20), v31);
  v32(v25 + v27[8] + *(int *)(v29 + 20), v31);
  uint64_t v33 = v25 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v34 = type metadata accessor for Dense();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8);
  v35(v33, v34);
  uint64_t v36 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v35(v33 + *(int *)(v36 + 20), v34);
  uint64_t v37 = a1 + a2[11];
  uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v39 = v37 + v38[12];
  uint64_t v40 = type metadata accessor for GradientClippingMode();
  if (!__swift_getEnumTagSinglePayload(v39, 1, v40)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v39, v40);
  }
  uint64_t v41 = v37 + v38[13];
  uint64_t v42 = type metadata accessor for RegularizationKind();
  if (!__swift_getEnumTagSinglePayload(v41, 1, v42)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  }
  uint64_t v43 = v37 + v38[16];
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  id v45 = *(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8);
  v45(v43, v44);
  v45(v37 + v38[17], v44);
  uint64_t v46 = v37 + v38[18];
  if (!__swift_getEnumTagSinglePayload(v46, 1, v44)) {
    v45(v46, v44);
  }
  id v47 = *(void **)(a1 + a2[12]);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v6 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = v3 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(v6 + 36);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(v3 + v12);
  if (__swift_getEnumTagSinglePayload(v3 + v12, 1, v10))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v13, (uint64_t)v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
  }
  uint64_t v16 = a3[5];
  uint64_t v17 = (id *)(a1 + v16);
  int v18 = (id *)(v3 + v16);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v107 = v3;
  if (EnumCaseMultiPayload == 2)
  {
    id v26 = *v18;
    id v27 = *v18;
    *uint64_t v17 = v26;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v17 = *v18;
    uint64_t v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v21 = *(int *)(v20 + 20);
    uint64_t v104 = (char *)v17 + v21;
    uint64_t v22 = (char *)v18 + v21;
    uint64_t v23 = type metadata accessor for DataFrame();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
    uint64_t v25 = v22;
    uint64_t v3 = v107;
    v24(v104, v25, v23);
    v24((char *)v17 + *(int *)(v20 + 24), (char *)v18 + *(int *)(v20 + 24), v23);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v29 - 8) + 16))(v17, v18, v29);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = a3[6];
  uint64_t v31 = (id *)(a1 + v30);
  uint64_t v32 = (id *)(v3 + v30);
  int v33 = swift_getEnumCaseMultiPayload();
  if (v33 == 2)
  {
    id v40 = *v32;
    id v41 = *v32;
    *uint64_t v31 = v40;
  }
  else if (v33 == 1)
  {
    *uint64_t v31 = *v32;
    uint64_t v34 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v35 = *(int *)(v34 + 20);
    uint64_t v105 = (char *)v31 + v35;
    uint64_t v36 = (char *)v32 + v35;
    uint64_t v37 = type metadata accessor for DataFrame();
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16);
    v38(v105, v36, v37);
    uint64_t v39 = v37;
    uint64_t v3 = v107;
    v38((char *)v31 + *(int *)(v34 + 24), (char *)v32 + *(int *)(v34 + 24), v39);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v43 - 8) + 16))(v31, v32, v43);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(v3 + a3[7]);
  *(void *)(a1 + v44) = *(void *)(v3 + v44);
  uint64_t v45 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(v3 + a3[9]);
  uint64_t v46 = a1 + v45;
  uint64_t v47 = v3 + v45;
  uint64_t v48 = type metadata accessor for Conv2D();
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v103 = v46;
  v49(v46, v47, v48);
  uint64_t v50 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v46 + *(int *)(v50 + 20)) = *(_DWORD *)(v47 + *(int *)(v50 + 20));
  uint64_t v51 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v52 = v51[5];
  uint64_t v106 = a1;
  uint64_t v53 = (_OWORD *)(v46 + v52);
  uint64_t v54 = v47 + v52;
  _OWORD *v53 = *(_OWORD *)(v47 + v52);
  uint64_t v55 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v56 = *(int *)(v55 + 20);
  uint64_t v57 = (char *)v53 + v56;
  uint64_t v58 = v54 + v56;
  uint64_t v59 = type metadata accessor for Conv1D();
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
  v60(v57, v58, v59);
  *(_DWORD *)((char *)v53 + *(int *)(v55 + 24)) = *(_DWORD *)(v54 + *(int *)(v55 + 24));
  uint64_t v61 = v51[6];
  uint64_t v62 = v103 + v61;
  uint64_t v63 = v47 + v61;
  *(_OWORD *)(v103 + v61) = *(_OWORD *)(v47 + v61);
  v60((char *)(v103 + v61 + *(int *)(v55 + 20)), v47 + v61 + *(int *)(v55 + 20), v59);
  *(_DWORD *)(v62 + *(int *)(v55 + 24)) = *(_DWORD *)(v63 + *(int *)(v55 + 24));
  uint64_t v64 = v51[7];
  uint64_t v65 = v103 + v64;
  uint64_t v66 = v47 + v64;
  *(_OWORD *)(v103 + v64) = *(_OWORD *)(v47 + v64);
  v60((char *)(v103 + v64 + *(int *)(v55 + 20)), v47 + v64 + *(int *)(v55 + 20), v59);
  *(_DWORD *)(v65 + *(int *)(v55 + 24)) = *(_DWORD *)(v66 + *(int *)(v55 + 24));
  uint64_t v67 = v51[8];
  uint64_t v68 = v103 + v67;
  uint64_t v69 = v47 + v67;
  *(_OWORD *)(v103 + v67) = *(_OWORD *)(v47 + v67);
  v60((char *)(v103 + v67 + *(int *)(v55 + 20)), v47 + v67 + *(int *)(v55 + 20), v59);
  *(_DWORD *)(v68 + *(int *)(v55 + 24)) = *(_DWORD *)(v69 + *(int *)(v55 + 24));
  uint64_t v70 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v71 = v103 + v70;
  uint64_t v72 = v47 + v70;
  uint64_t v73 = type metadata accessor for Dense();
  uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16);
  v74(v71, v72, v73);
  uint64_t v75 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v74(v71 + *(int *)(v75 + 20), v72 + *(int *)(v75 + 20), v73);
  uint64_t v76 = a3[11];
  uint64_t v77 = v106 + v76;
  uint64_t v78 = v107 + v76;
  *(_OWORD *)(v106 + v76) = *(_OWORD *)(v107 + v76);
  uint64_t v79 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v80 = v79[12];
  uint64_t v81 = (void *)(v77 + v80);
  uint64_t v82 = (const void *)(v78 + v80);
  uint64_t v83 = type metadata accessor for GradientClippingMode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v82, 1, v83))
  {
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
    __swift_storeEnumTagSinglePayload((uint64_t)v81, 0, 1, v83);
  }
  uint64_t v85 = v79[13];
  uint64_t v86 = (void *)(v77 + v85);
  uint64_t v87 = (const void *)(v78 + v85);
  uint64_t v88 = type metadata accessor for RegularizationKind();
  if (__swift_getEnumTagSinglePayload((uint64_t)v87, 1, v88))
  {
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v88 - 8) + 16))(v86, v87, v88);
    __swift_storeEnumTagSinglePayload((uint64_t)v86, 0, 1, v88);
  }
  *(_DWORD *)(v77 + v79[14]) = *(_DWORD *)(v78 + v79[14]);
  *(void *)(v77 + v79[15]) = *(void *)(v78 + v79[15]);
  uint64_t v90 = v79[16];
  uint64_t v91 = v77 + v90;
  uint64_t v92 = v78 + v90;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 16);
  v94(v91, v92, v93);
  v94(v77 + v79[17], v78 + v79[17], v93);
  uint64_t v95 = v79[18];
  uint64_t v96 = (void *)(v77 + v95);
  uint64_t v97 = (const void *)(v78 + v95);
  if (__swift_getEnumTagSinglePayload(v78 + v95, 1, v93))
  {
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v96, v97, *(void *)(*(void *)(v98 - 8) + 64));
  }
  else
  {
    v94((uint64_t)v96, (uint64_t)v97, v93);
    __swift_storeEnumTagSinglePayload((uint64_t)v96, 0, 1, v93);
  }
  uint64_t v99 = a3[12];
  uint64_t v100 = *(void **)(v107 + v99);
  *(void *)(v106 + v99) = v100;
  id v101 = v100;
  return v106;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = v3 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(v5 + 36);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(v3 + v12);
  LODWORD(v8) = __swift_getEnumTagSinglePayload(a1 + v12, 1, v9);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v9);
  if (v8)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v13, v14, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v11((uint64_t)v13, (uint64_t)v14, v9);
LABEL_7:
  uint64_t v113 = v3;
  if (a1 != v3)
  {
    uint64_t v17 = a3[5];
    int v18 = (id *)(a1 + v17);
    uint64_t v19 = (id *)(v3 + v17);
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(a1 + v17, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      id v26 = *v19;
      id v27 = *v19;
      *int v18 = v26;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *int v18 = *v19;
      uint64_t v21 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v22 = *(int *)(v21 + 20);
      uint64_t v110 = (char *)v18 + v22;
      uint64_t v23 = (char *)v19 + v22;
      uint64_t v24 = type metadata accessor for DataFrame();
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      v25(v110, v23, v24);
      v25((char *)v18 + *(int *)(v21 + 24), (char *)v19 + *(int *)(v21 + 24), v24);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v29 - 8) + 16))(v18, v19, v29);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = a3[6];
    uint64_t v31 = (id *)(a1 + v30);
    uint64_t v32 = (id *)(v3 + v30);
    outlined destroy of MLFewShotSoundClassifier.ModelParameters(a1 + v30, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int v33 = swift_getEnumCaseMultiPayload();
    if (v33 == 2)
    {
      id v40 = *v32;
      id v41 = *v32;
      *uint64_t v31 = v40;
    }
    else if (v33 == 1)
    {
      *uint64_t v31 = *v32;
      uint64_t v34 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v35 = *(int *)(v34 + 20);
      uint64_t v111 = (char *)v31 + v35;
      uint64_t v36 = (char *)v32 + v35;
      uint64_t v37 = type metadata accessor for DataFrame();
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16);
      uint64_t v39 = v36;
      uint64_t v3 = v113;
      v38(v111, v39, v37);
      v38((char *)v31 + *(int *)(v34 + 24), (char *)v32 + *(int *)(v34 + 24), v37);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v43 - 8) + 16))(v31, v32, v43);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[7]) = *(void *)(v3 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(v3 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(v3 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[10];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = v3 + v44;
  uint64_t v47 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  uint64_t v48 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v45 + *(int *)(v48 + 20)) = *(_DWORD *)(v46 + *(int *)(v48 + 20));
  uint64_t v109 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v112 = a1;
  uint64_t v49 = v109[5];
  uint64_t v50 = (void *)(v45 + v49);
  uint64_t v51 = v46 + v49;
  *uint64_t v50 = *(void *)(v46 + v49);
  v50[1] = *(void *)(v46 + v49 + 8);
  uint64_t v52 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v53 = *(int *)(v52 + 20);
  uint64_t v54 = (char *)v50 + v53;
  uint64_t v55 = v51 + v53;
  uint64_t v56 = type metadata accessor for Conv1D();
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 24);
  v57(v54, v55, v56);
  *(_DWORD *)((char *)v50 + *(int *)(v52 + 24)) = *(_DWORD *)(v51 + *(int *)(v52 + 24));
  uint64_t v58 = v109[6];
  uint64_t v59 = (void *)(v45 + v58);
  uint64_t v60 = v46 + v58;
  *uint64_t v59 = *(void *)(v46 + v58);
  v59[1] = *(void *)(v46 + v58 + 8);
  v57((char *)(v45 + v58 + *(int *)(v52 + 20)), v46 + v58 + *(int *)(v52 + 20), v56);
  *(_DWORD *)((char *)v59 + *(int *)(v52 + 24)) = *(_DWORD *)(v60 + *(int *)(v52 + 24));
  uint64_t v61 = v109[7];
  uint64_t v62 = (void *)(v45 + v61);
  uint64_t v63 = v46 + v61;
  *uint64_t v62 = *(void *)(v46 + v61);
  v62[1] = *(void *)(v46 + v61 + 8);
  v57((char *)(v45 + v61 + *(int *)(v52 + 20)), v46 + v61 + *(int *)(v52 + 20), v56);
  *(_DWORD *)((char *)v62 + *(int *)(v52 + 24)) = *(_DWORD *)(v63 + *(int *)(v52 + 24));
  uint64_t v64 = v109[8];
  uint64_t v65 = (void *)(v45 + v64);
  uint64_t v66 = v46 + v64;
  *uint64_t v65 = *(void *)(v46 + v64);
  v65[1] = *(void *)(v46 + v64 + 8);
  v57((char *)(v45 + v64 + *(int *)(v52 + 20)), v46 + v64 + *(int *)(v52 + 20), v56);
  *(_DWORD *)((char *)v65 + *(int *)(v52 + 24)) = *(_DWORD *)(v66 + *(int *)(v52 + 24));
  uint64_t v67 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v68 = v45 + v67;
  uint64_t v69 = v46 + v67;
  uint64_t v70 = type metadata accessor for Dense();
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 24);
  v71(v68, v69, v70);
  uint64_t v72 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v71(v68 + *(int *)(v72 + 20), v69 + *(int *)(v72 + 20), v70);
  uint64_t v73 = a3[11];
  uint64_t v74 = (char *)(v112 + v73);
  uint64_t v75 = v113 + v73;
  *(_DWORD *)uint64_t v74 = *(_DWORD *)(v113 + v73);
  *((_DWORD *)v74 + 1) = *(_DWORD *)(v113 + v73 + 4);
  *((_DWORD *)v74 + 2) = *(_DWORD *)(v113 + v73 + 8);
  *((_DWORD *)v74 + 3) = *(_DWORD *)(v113 + v73 + 12);
  uint64_t v76 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v77 = v76[12];
  uint64_t v78 = &v74[v77];
  uint64_t v79 = (const void *)(v75 + v77);
  uint64_t v80 = type metadata accessor for GradientClippingMode();
  LODWORD(v68) = __swift_getEnumTagSinglePayload((uint64_t)v78, 1, v80);
  int v81 = __swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80);
  if (v68)
  {
    if (!v81)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v80 - 8) + 16))(v78, v79, v80);
      __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v80);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v82 = *(void *)(v80 - 8);
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v78, v80);
LABEL_30:
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v78, v79, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, const void *, uint64_t))(v82 + 24))(v78, v79, v80);
LABEL_31:
  uint64_t v84 = v76[13];
  uint64_t v85 = &v74[v84];
  uint64_t v86 = (const void *)(v75 + v84);
  uint64_t v87 = type metadata accessor for RegularizationKind();
  int v88 = __swift_getEnumTagSinglePayload((uint64_t)v85, 1, v87);
  int v89 = __swift_getEnumTagSinglePayload((uint64_t)v86, 1, v87);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
      __swift_storeEnumTagSinglePayload((uint64_t)v85, 0, 1, v87);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v90 = *(void *)(v87 - 8);
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v85, v87);
LABEL_36:
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v85, v86, *(void *)(*(void *)(v91 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, const void *, uint64_t))(v90 + 24))(v85, v86, v87);
LABEL_37:
  *(_DWORD *)&v74[v76[14]] = *(_DWORD *)(v75 + v76[14]);
  *(void *)&v74[v76[15]] = *(void *)(v75 + v76[15]);
  uint64_t v92 = v76[16];
  uint64_t v93 = &v74[v92];
  uint64_t v94 = v75 + v92;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v96 = *(void *)(v95 - 8);
  uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 24);
  v97(v93, v94, v95);
  v97(&v74[v76[17]], v75 + v76[17], v95);
  uint64_t v98 = v76[18];
  uint64_t v99 = &v74[v98];
  uint64_t v100 = (const void *)(v75 + v98);
  LODWORD(v93) = __swift_getEnumTagSinglePayload((uint64_t)&v74[v98], 1, v95);
  int v101 = __swift_getEnumTagSinglePayload((uint64_t)v100, 1, v95);
  if (!v93)
  {
    uint64_t v102 = v113;
    if (!v101)
    {
      v97(v99, (uint64_t)v100, v95);
      goto LABEL_43;
    }
    (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v95);
    goto LABEL_42;
  }
  uint64_t v102 = v113;
  if (v101)
  {
LABEL_42:
    uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, const void *, uint64_t))(v96 + 16))(v99, v100, v95);
  __swift_storeEnumTagSinglePayload((uint64_t)v99, 0, 1, v95);
LABEL_43:
  uint64_t v104 = a3[12];
  uint64_t v105 = *(void **)(v102 + v104);
  uint64_t v106 = *(void **)(v112 + v104);
  *(void *)(v112 + v104) = v105;
  id v107 = v105;

  return v112;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v7 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = v4 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(v7 + 36);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(v4 + v13);
  if (__swift_getEnumTagSinglePayload(v4 + v13, 1, v11))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v14, (uint64_t)v15, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = a3[5];
  int v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(v4 + v17);
  uint64_t v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v102 = v4;
  uint64_t v103 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)int v18 = *(void *)v19;
    uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v25 = *(int *)(v24 + 20);
    id v26 = &v18[v25];
    id v27 = &v19[v25];
    uint64_t v28 = type metadata accessor for DataFrame();
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32);
    uint64_t v30 = v27;
    a3 = v103;
    v29(v26, v30, v28);
    uint64_t v31 = v28;
    uint64_t v4 = v102;
    v29(&v18[*(int *)(v24 + 24)], &v19[*(int *)(v24 + 24)], v31);
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v18, v19, v23);
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
LABEL_13:
  uint64_t v32 = a3[6];
  int v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(v4 + v32);
  int v35 = swift_getEnumCaseMultiPayload();
  if (v35 == 1)
  {
    *(void *)int v33 = *(void *)v34;
    uint64_t v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v39 = *(int *)(v38 + 20);
    id v40 = &v33[v39];
    id v41 = &v34[v39];
    uint64_t v42 = type metadata accessor for DataFrame();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32);
    uint64_t v44 = v41;
    a3 = v103;
    v43(v40, v44, v42);
    uint64_t v45 = v42;
    uint64_t v4 = v102;
    v43(&v33[*(int *)(v38 + 24)], &v34[*(int *)(v38 + 24)], v45);
LABEL_20:
    swift_storeEnumTagMultiPayload();
    goto LABEL_22;
  }
  if (!v35)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v36 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v36 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v33, v34, v37);
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  memcpy(v33, v34, *(void *)(*(void *)(v20 - 8) + 64));
LABEL_22:
  uint64_t v46 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(v4 + a3[7]);
  *(void *)(a1 + v46) = *(void *)(v4 + v46);
  uint64_t v47 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(v4 + a3[9]);
  uint64_t v48 = a1 + v47;
  uint64_t v49 = v4 + v47;
  uint64_t v50 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
  uint64_t v51 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v48 + *(int *)(v51 + 20)) = *(_DWORD *)(v49 + *(int *)(v51 + 20));
  uint64_t v52 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v53 = v52[5];
  uint64_t v101 = a1;
  uint64_t v54 = v48 + v53;
  uint64_t v55 = v49 + v53;
  *(_OWORD *)(v48 + v53) = *(_OWORD *)(v49 + v53);
  uint64_t v56 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v57 = *(int *)(v56 + 20);
  uint64_t v100 = v54 + v57;
  uint64_t v58 = v55 + v57;
  uint64_t v59 = type metadata accessor for Conv1D();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 32);
  v60(v100, v58, v59);
  *(_DWORD *)(v54 + *(int *)(v56 + 24)) = *(_DWORD *)(v55 + *(int *)(v56 + 24));
  uint64_t v61 = v52[6];
  uint64_t v62 = v48 + v61;
  uint64_t v63 = v49 + v61;
  *(_OWORD *)(v48 + v61) = *(_OWORD *)(v49 + v61);
  v60(v48 + v61 + *(int *)(v56 + 20), v49 + v61 + *(int *)(v56 + 20), v59);
  *(_DWORD *)(v62 + *(int *)(v56 + 24)) = *(_DWORD *)(v63 + *(int *)(v56 + 24));
  uint64_t v64 = v52[7];
  uint64_t v65 = v48 + v64;
  uint64_t v66 = v49 + v64;
  *(_OWORD *)(v48 + v64) = *(_OWORD *)(v49 + v64);
  v60(v48 + v64 + *(int *)(v56 + 20), v49 + v64 + *(int *)(v56 + 20), v59);
  *(_DWORD *)(v65 + *(int *)(v56 + 24)) = *(_DWORD *)(v66 + *(int *)(v56 + 24));
  uint64_t v67 = v52[8];
  uint64_t v68 = v48 + v67;
  uint64_t v69 = v49 + v67;
  *(_OWORD *)(v48 + v67) = *(_OWORD *)(v49 + v67);
  v60(v48 + v67 + *(int *)(v56 + 20), v49 + v67 + *(int *)(v56 + 20), v59);
  *(_DWORD *)(v68 + *(int *)(v56 + 24)) = *(_DWORD *)(v69 + *(int *)(v56 + 24));
  uint64_t v70 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v71 = v48 + v70;
  uint64_t v72 = v49 + v70;
  uint64_t v73 = type metadata accessor for Dense();
  uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 32);
  v74(v71, v72, v73);
  uint64_t v75 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v74(v71 + *(int *)(v75 + 20), v72 + *(int *)(v75 + 20), v73);
  uint64_t v76 = v103[11];
  uint64_t v77 = v101 + v76;
  uint64_t v78 = v102 + v76;
  *(_OWORD *)(v101 + v76) = *(_OWORD *)(v102 + v76);
  uint64_t v79 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v80 = v79[12];
  int v81 = (void *)(v77 + v80);
  uint64_t v82 = (const void *)(v78 + v80);
  uint64_t v83 = type metadata accessor for GradientClippingMode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v82, 1, v83))
  {
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v83 - 8) + 32))(v81, v82, v83);
    __swift_storeEnumTagSinglePayload((uint64_t)v81, 0, 1, v83);
  }
  uint64_t v85 = v79[13];
  uint64_t v86 = (void *)(v77 + v85);
  uint64_t v87 = (const void *)(v78 + v85);
  uint64_t v88 = type metadata accessor for RegularizationKind();
  if (__swift_getEnumTagSinglePayload((uint64_t)v87, 1, v88))
  {
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v88 - 8) + 32))(v86, v87, v88);
    __swift_storeEnumTagSinglePayload((uint64_t)v86, 0, 1, v88);
  }
  *(_DWORD *)(v77 + v79[14]) = *(_DWORD *)(v78 + v79[14]);
  *(void *)(v77 + v79[15]) = *(void *)(v78 + v79[15]);
  uint64_t v90 = v79[16];
  uint64_t v91 = v77 + v90;
  uint64_t v92 = v78 + v90;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 32);
  v94(v91, v92, v93);
  v94(v77 + v79[17], v78 + v79[17], v93);
  uint64_t v95 = v79[18];
  uint64_t v96 = (void *)(v77 + v95);
  uint64_t v97 = (const void *)(v78 + v95);
  if (__swift_getEnumTagSinglePayload(v78 + v95, 1, v93))
  {
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v96, v97, *(void *)(*(void *)(v98 - 8) + 64));
  }
  else
  {
    v94((uint64_t)v96, (uint64_t)v97, v93);
    __swift_storeEnumTagSinglePayload((uint64_t)v96, 0, 1, v93);
  }
  *(void *)(v101 + v103[12]) = *(void *)(v102 + v103[12]);
  return v101;
}

uint64_t assignWithTake for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v6 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = v4 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = *(int *)(v6 + 36);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(v4 + v13);
  LODWORD(v9) = __swift_getEnumTagSinglePayload(a1 + v13, 1, v10);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v10);
  if (v9)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v12((uint64_t)v14, (uint64_t)v15, v10);
LABEL_7:
  uint64_t v114 = a3;
  uint64_t v115 = v4;
  if (a1 == v4) {
    goto LABEL_26;
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(v4 + v18);
  outlined destroy of MLFewShotSoundClassifier.ModelParameters(a1 + v18, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v21 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v25 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v26 = *(int *)(v25 + 20);
    id v27 = &v19[v26];
    uint64_t v28 = &v20[v26];
    uint64_t v29 = type metadata accessor for DataFrame();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
    uint64_t v31 = v28;
    uint64_t v4 = v115;
    v30(v27, v31, v29);
    uint64_t v32 = v29;
    a3 = v114;
    v30(&v19[*(int *)(v25 + 24)], &v20[*(int *)(v25 + 24)], v32);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    goto LABEL_17;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v19, v20, v24);
    swift_storeEnumTagMultiPayload();
    goto LABEL_15;
  }
  memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
LABEL_17:
  uint64_t v33 = a3[6];
  uint64_t v34 = (char *)(a1 + v33);
  int v35 = (char *)(v4 + v33);
  outlined destroy of MLFewShotSoundClassifier.ModelParameters(a1 + v33, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  int v36 = swift_getEnumCaseMultiPayload();
  if (v36 == 1)
  {
    *(void *)uint64_t v34 = *(void *)v35;
    uint64_t v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v40 = *(int *)(v39 + 20);
    id v41 = &v34[v40];
    uint64_t v42 = &v35[v40];
    uint64_t v43 = type metadata accessor for DataFrame();
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
    uint64_t v45 = v42;
    uint64_t v4 = v115;
    v44(v41, v45, v43);
    uint64_t v46 = v43;
    a3 = v114;
    v44(&v34[*(int *)(v39 + 24)], &v35[*(int *)(v39 + 24)], v46);
LABEL_24:
    swift_storeEnumTagMultiPayload();
    goto LABEL_26;
  }
  if (!v36)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v37 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v37 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(v37);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v34, v35, v38);
    swift_storeEnumTagMultiPayload();
    goto LABEL_24;
  }
  memcpy(v34, v35, *(void *)(*(void *)(v21 - 8) + 64));
LABEL_26:
  uint64_t v47 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(v4 + a3[7]);
  *(void *)(a1 + v47) = *(void *)(v4 + v47);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(v4 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[10];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = v4 + v48;
  uint64_t v51 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 40))(v49, v50, v51);
  uint64_t v52 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v49 + *(int *)(v52 + 20)) = *(_DWORD *)(v50 + *(int *)(v52 + 20));
  uint64_t v53 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v54 = v53[5];
  uint64_t v113 = a1;
  uint64_t v55 = v49 + v54;
  uint64_t v56 = v50 + v54;
  *(_OWORD *)(v49 + v54) = *(_OWORD *)(v50 + v54);
  uint64_t v57 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v58 = *(int *)(v57 + 20);
  uint64_t v112 = v55 + v58;
  uint64_t v59 = v56 + v58;
  uint64_t v60 = type metadata accessor for Conv1D();
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 40);
  v61(v112, v59, v60);
  *(_DWORD *)(v55 + *(int *)(v57 + 24)) = *(_DWORD *)(v56 + *(int *)(v57 + 24));
  uint64_t v62 = v53[6];
  uint64_t v63 = v49 + v62;
  uint64_t v64 = v50 + v62;
  *(_OWORD *)(v49 + v62) = *(_OWORD *)(v50 + v62);
  v61(v49 + v62 + *(int *)(v57 + 20), v50 + v62 + *(int *)(v57 + 20), v60);
  *(_DWORD *)(v63 + *(int *)(v57 + 24)) = *(_DWORD *)(v64 + *(int *)(v57 + 24));
  uint64_t v65 = v53[7];
  uint64_t v66 = v49 + v65;
  uint64_t v67 = v50 + v65;
  *(_OWORD *)(v49 + v65) = *(_OWORD *)(v50 + v65);
  v61(v49 + v65 + *(int *)(v57 + 20), v50 + v65 + *(int *)(v57 + 20), v60);
  *(_DWORD *)(v66 + *(int *)(v57 + 24)) = *(_DWORD *)(v67 + *(int *)(v57 + 24));
  uint64_t v68 = v53[8];
  uint64_t v69 = v49 + v68;
  uint64_t v70 = v50 + v68;
  *(_OWORD *)(v49 + v68) = *(_OWORD *)(v50 + v68);
  v61(v49 + v68 + *(int *)(v57 + 20), v50 + v68 + *(int *)(v57 + 20), v60);
  *(_DWORD *)(v69 + *(int *)(v57 + 24)) = *(_DWORD *)(v70 + *(int *)(v57 + 24));
  uint64_t v71 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  uint64_t v72 = v49 + v71;
  uint64_t v73 = v50 + v71;
  uint64_t v74 = type metadata accessor for Dense();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 40);
  v75(v72, v73, v74);
  uint64_t v76 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v75(v72 + *(int *)(v76 + 20), v73 + *(int *)(v76 + 20), v74);
  uint64_t v77 = v114[11];
  uint64_t v78 = v113 + v77;
  uint64_t v79 = v115 + v77;
  *(_OWORD *)(v113 + v77) = *(_OWORD *)(v115 + v77);
  uint64_t v80 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v81 = v80[12];
  uint64_t v82 = (void *)(v78 + v81);
  uint64_t v83 = (const void *)(v79 + v81);
  uint64_t v84 = type metadata accessor for GradientClippingMode();
  LODWORD(v60) = __swift_getEnumTagSinglePayload((uint64_t)v82, 1, v84);
  int v85 = __swift_getEnumTagSinglePayload((uint64_t)v83, 1, v84);
  if (v60)
  {
    if (!v85)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v84 - 8) + 32))(v82, v83, v84);
      __swift_storeEnumTagSinglePayload((uint64_t)v82, 0, 1, v84);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v86 = *(void *)(v84 - 8);
  if (v85)
  {
    (*(void (**)(void *, uint64_t))(v86 + 8))(v82, v84);
LABEL_31:
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v82, v83, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(void *, const void *, uint64_t))(v86 + 40))(v82, v83, v84);
LABEL_32:
  uint64_t v88 = v80[13];
  uint64_t v89 = (void *)(v78 + v88);
  uint64_t v90 = (const void *)(v79 + v88);
  uint64_t v91 = type metadata accessor for RegularizationKind();
  int v92 = __swift_getEnumTagSinglePayload((uint64_t)v89, 1, v91);
  int v93 = __swift_getEnumTagSinglePayload((uint64_t)v90, 1, v91);
  if (v92)
  {
    if (!v93)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v91 - 8) + 32))(v89, v90, v91);
      __swift_storeEnumTagSinglePayload((uint64_t)v89, 0, 1, v91);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v94 = *(void *)(v91 - 8);
  if (v93)
  {
    (*(void (**)(void *, uint64_t))(v94 + 8))(v89, v91);
LABEL_37:
    uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v89, v90, *(void *)(*(void *)(v95 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(void *, const void *, uint64_t))(v94 + 40))(v89, v90, v91);
LABEL_38:
  *(_DWORD *)(v78 + v80[14]) = *(_DWORD *)(v79 + v80[14]);
  *(void *)(v78 + v80[15]) = *(void *)(v79 + v80[15]);
  uint64_t v96 = v80[16];
  uint64_t v97 = v78 + v96;
  uint64_t v98 = v79 + v96;
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  uint64_t v100 = *(void *)(v99 - 8);
  uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 40);
  v101(v97, v98, v99);
  v101(v78 + v80[17], v79 + v80[17], v99);
  uint64_t v102 = v80[18];
  uint64_t v103 = (void *)(v78 + v102);
  uint64_t v104 = (const void *)(v79 + v102);
  LODWORD(v98) = __swift_getEnumTagSinglePayload(v78 + v102, 1, v99);
  int v105 = __swift_getEnumTagSinglePayload((uint64_t)v104, 1, v99);
  if (!v98)
  {
    id v107 = v114;
    uint64_t v106 = v115;
    if (!v105)
    {
      v101((uint64_t)v103, (uint64_t)v104, v99);
      goto LABEL_44;
    }
    (*(void (**)(void *, uint64_t))(v100 + 8))(v103, v99);
    goto LABEL_43;
  }
  id v107 = v114;
  uint64_t v106 = v115;
  if (v105)
  {
LABEL_43:
    uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v103, v104, *(void *)(*(void *)(v108 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(void *, const void *, uint64_t))(v100 + 32))(v103, v104, v99);
  __swift_storeEnumTagSinglePayload((uint64_t)v103, 0, 1, v99);
LABEL_44:
  uint64_t v109 = v107[12];
  uint64_t v110 = *(void **)(v113 + v109);
  *(void *)(v113 + v109) = *(void *)(v106 + v109);

  return v113;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2270BECA0);
}

uint64_t sub_2270BECA0(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[5];
LABEL_12:
    uint64_t v9 = a1 + v12;
    goto LABEL_13;
  }
  if (a2 != 0x7FFFFFFF)
  {
    type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v16 + 84) == a2)
    {
      uint64_t v8 = v15;
      uint64_t v12 = a3[10];
    }
    else
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
      uint64_t v12 = a3[11];
    }
    goto LABEL_12;
  }
  unint64_t v13 = *(void *)(a1 + a3[8]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2270BEDB0);
}

void sub_2270BEDB0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for MLClassifierMetrics(0);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(void *)(a1 + a4[8]) = (a2 - 1);
        return;
      }
      type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
      OUTLINED_FUNCTION_6_1();
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        uint64_t v10 = v15;
        uint64_t v14 = a4[10];
      }
      else
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
        uint64_t v14 = a4[11];
      }
    }
    uint64_t v11 = a1 + v14;
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for MLFewShotSoundClassifier()
{
  type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Adam<MLFewShotSoundClassifier.TemporalClassifier>();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void type metadata accessor for Adam<MLFewShotSoundClassifier.TemporalClassifier>()
{
  if (!lazy cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>)
  {
    type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(255);
    lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    unint64_t v0 = type metadata accessor for Adam();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
    }
  }
}

uint64_t sub_2270BF078()
{
  type metadata accessor for ComputeDevice();
  OUTLINED_FUNCTION_8();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = ((v2 + 24) & ~v2) + *(void *)(v1 + 56);
  uint64_t v4 = v2 | 7;
  OUTLINED_FUNCTION_25_0();
  v5();

  return MEMORY[0x270FA0238](v0, v3, v4);
}

uint64_t partial apply for closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ComputeDevice() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)(v4, v5, a1);
}

uint64_t outlined destroy of MLFewShotSoundClassifier.ModelParameters(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t outlined init with take of MLFewShotSoundClassifier.TemporalClassifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t outlined assign with take of MLClassifierMetrics(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in MLFewShotSoundClassifier.performStep(on:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in MLFewShotSoundClassifier.performStep(on:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 40), a2, *(float *)(v2 + 24), *(float *)(v2 + 28), *(float *)(v2 + 32));
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return type metadata accessor for MLFewShotSoundClassifier();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return *(void *)(v0 - 344);
}

uint64_t OUTLINED_FUNCTION_7_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLImageClassifier.ModelParameters.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ModelAlgorithmType?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_57_1();
  outlined init with copy of Any?(v1 + 48, (uint64_t)v10);
  if (v11)
  {
    uint64_t v6 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
    int v7 = swift_dynamicCast();
    __swift_storeEnumTagSinglePayload(v2, v7 ^ 1u, 1, v6);
    if (__swift_getEnumTagSinglePayload(v2, 1, v6) != 1) {
      return outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v2, a1, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v10, &demangling cache variable for type metadata for Any?);
    uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v9);
  }
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 0;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  swift_storeEnumTagMultiPayload();
  return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, &demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ModelAlgorithmType?);
}

uint64_t MLImageClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)v0;
}

uint64_t MLImageClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MLImageClassifier.ModelParameters.maxIterations.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLImageClassifier.ModelParameters.augmentationOptions.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *MLImageClassifier.ModelParameters.augmentationOptions.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*MLImageClassifier.ModelParameters.augmentationOptions.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLImageClassifier.ModelParameters.algorithm.setter(uint64_t a1)
{
  v5[3] = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  return outlined assign with take of Any?((uint64_t)v5, v1 + 48);
}

void (*MLImageClassifier.ModelParameters.algorithm.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v3[9] = v4;
  OUTLINED_FUNCTION_17(v4);
  size_t v6 = *(void *)(v5 + 64);
  v3[10] = malloc(v6);
  int v7 = malloc(v6);
  v3[11] = v7;
  MLImageClassifier.ModelParameters.algorithm.getter((uint64_t)v7);
  return MLImageClassifier.ModelParameters.algorithm.modify;
}

void MLImageClassifier.ModelParameters.algorithm.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v2[10];
    uint64_t v3 = (void *)v2[11];
    uint64_t v6 = v2[8];
    uint64_t v5 = v2[9];
    outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v3, (uint64_t)v4, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    v2[3] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2);
    outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v4, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of Any?((uint64_t)v2, v6 + 48);
    outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v3, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  }
  else
  {
    uint64_t v4 = (void *)v2[10];
    uint64_t v3 = (void *)v2[11];
    uint64_t v8 = v2[8];
    v2[7] = v2[9];
    uint64_t v9 = __swift_allocate_boxed_opaque_existential_0(v2 + 4);
    outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v3, (uint64_t)v9, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of Any?((uint64_t)(v2 + 4), v8 + 48);
  }
  free(v3);
  free(v4);

  free(v2);
}

uint64_t MLImageClassifier.ModelParameters.validationData.getter()
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.DataSource();
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_0();
  type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  int v7 = (uint64_t *)&v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v13[-v8];
  outlined init with copy of Any?(v0 + 16, (uint64_t)&v14);
  if (!v15)
  {
    __break(1u);
    JUMPOUT(0x2270BF960);
  }
  outlined init with take of Any(&v14, &v16);
  swift_dynamicCast();
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v9, (uint64_t)v7, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v11 = EnumCaseMultiPayload;
  switch(EnumCaseMultiPayload)
  {
    case 1u:
      outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v7, v1, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
      uint64_t v11 = static _ImageUtilities.getImageURLsAndLabels(from:)(v1);
      outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(v1, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
      break;
    case 2u:
      uint64_t v11 = *v7;
      break;
    case 3u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      break;
    default:
      break;
  }
  outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v9, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return v11;
}

uint64_t key path setter for MLImageClassifier.ModelParameters.validationData : MLImageClassifier.ModelParameters()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return MLImageClassifier.ModelParameters.validationData.setter(v0);
}

uint64_t MLImageClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v11 - v7;
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      *(void *)uint64_t v2 = a1;
      type metadata accessor for MLImageClassifier.DataSource();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 16) = 256;
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v2, (uint64_t)v8, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v11[3] = v4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v11);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v8, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return outlined assign with take of Any?((uint64_t)v11, v1 + 16);
}

uint64_t MLImageClassifier.ModelParameters.validation.getter()
{
  uint64_t result = outlined init with copy of Any?(v0 + 16, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLImageClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  v5[3] = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return outlined assign with take of Any?((uint64_t)v5, v1 + 16);
}

uint64_t (*MLImageClassifier.ModelParameters.validationData.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = MLImageClassifier.ModelParameters.validationData.getter();
  return MLImageClassifier.ModelParameters.validationData.modify;
}

uint64_t MLImageClassifier.ModelParameters.validationData.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return MLImageClassifier.ModelParameters.validationData.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  MLImageClassifier.ModelParameters.validationData.setter(v2);

  return swift_bridgeObjectRelease();
}

uint64_t key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(void), uint64_t (*a7)(char *))
{
  uint64_t v10 = a5(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (uint64_t)&v14 - v11, a6);
  return a7(v12);
}

void (*MLImageClassifier.ModelParameters.validation.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[16] = v1;
  v3[17] = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  size_t v5 = *(void *)(v4 + 64);
  v3[18] = malloc(v5);
  v3[19] = malloc(v5);
  uint64_t result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v1 + 16, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    swift_dynamicCast();
    return MLImageClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLImageClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[18];
  uint64_t v4 = (void *)(*a1)[19];
  uint64_t v5 = (*a1)[17];
  uint64_t v6 = (*a1)[16] + 16;
  if (a2)
  {
    outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType((*a1)[19], (uint64_t)v3, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v3, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v6);
    outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v4, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  }
  else
  {
    v2[15] = v5;
    uint64_t v8 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v4, (uint64_t)v8, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v6);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t MLImageClassifier.ModelParameters.featureExtractor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_57_1();
  MLImageClassifier.ModelParameters.algorithm.getter(v1);
  return outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v1, a1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

uint64_t MLImageClassifier.ModelParameters.featureExtractor.setter(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v11 - v7;
  MLImageClassifier.ModelParameters.algorithm.getter((uint64_t)v11 - v7);
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, v2, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v11[3] = v4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v11);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v2, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v11, v1 + 48);
  outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  return outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v8, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

void (*MLImageClassifier.ModelParameters.featureExtractor.modify(void *a1))(void *a1, char a2)
{
  *a1 = v1;
  uint64_t v3 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_17(v3);
  uint64_t v5 = malloc(*(void *)(v4 + 64));
  a1[1] = v5;
  uint64_t v6 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_17(v6);
  size_t v8 = *(void *)(v7 + 64);
  a1[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  a1[3] = v9;
  MLImageClassifier.ModelParameters.algorithm.getter((uint64_t)v5);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v5, (uint64_t)v9, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  return MLImageClassifier.ModelParameters.featureExtractor.modify;
}

void MLImageClassifier.ModelParameters.featureExtractor.modify(void *a1, char a2)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = (void *)a1[3];
  uint64_t v4 = (void *)a1[1];
  if (a2)
  {
    outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1[3], (uint64_t)v2, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    MLImageClassifier.ModelParameters.featureExtractor.setter((uint64_t)v2);
    outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v3, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  }
  else
  {
    MLImageClassifier.ModelParameters.featureExtractor.setter(a1[3]);
  }
  free(v3);
  free(v2);

  free(v4);
}

uint64_t MLImageClassifier.ModelParameters.init(validation:maxIterations:augmentation:algorithm:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = OUTLINED_FUNCTION_4_9();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_1_12();
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, v5, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  uint64_t v18 = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v17);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v5, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v17, v6);
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a4, v4, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  uint64_t v18 = v10;
  uint64_t v15 = __swift_allocate_boxed_opaque_existential_0(v17);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v4, (uint64_t)v15, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v17, a3);
  outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a4, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  return outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
}

uint64_t MLImageClassifier.ModelParameters.init(featureExtractor:validation:maxIterations:augmentationOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = OUTLINED_FUNCTION_4_9();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_1_12();
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a2, v5, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  uint64_t v18 = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v17);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v5, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v17, v6);
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, v4, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  uint64_t v18 = v10;
  uint64_t v15 = __swift_allocate_boxed_opaque_existential_0(v17);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(v4, (uint64_t)v15, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v17, a4);
  outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a2, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  return outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

uint64_t MLImageClassifier.ModelParameters.init(featureExtractor:validationData:maxIterations:augmentationOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a4;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(void *)a5 = a3;
  *(void *)(a5 + 8) = v14;
  MLImageClassifier.ModelParameters.validationData.setter(a2);
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (uint64_t)v13, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  uint64_t v17[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v17);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v13, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v17, a5 + 48);
  return outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v19[5];

  uint64_t v10 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a4;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(void *)a5 = a3;
  *(void *)(a5 + 8) = v14;
  uint64_t v15 = static _ImageUtilities.getImageURLsAndLabels(from:)(a2);
  MLImageClassifier.ModelParameters.validationData.setter(v15);
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (uint64_t)v13, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v19[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v13, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v19, a5 + 48);
  outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a2, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
  return outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
}

unint64_t MLImageClassifier.ModelParameters.description.getter()
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_57_1();
  uint64_t v4 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLImageClassifier.ModelParameters.algorithm.getter((uint64_t)v7);
  outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType((uint64_t)v7, v1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  unint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v16 = 0xD000000000000013;
  unint64_t v17 = 0x80000002272D5890;
  v8._uint64_t countAndFlagsBits = MLImageClassifier.FeatureExtractorType.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 10;
  v9._id object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v10._id object = (void *)0x80000002272D58B0;
  String.append(_:)(v10);
  outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(v1, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v15._uint64_t countAndFlagsBits = 0;
  v15._id object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0xD000000000000010;
  v15._id object = (void *)0x80000002272D3F00;
  v14[1] = *v0;
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 10;
  v12._id object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v16;
}

unint64_t MLImageClassifier.ModelParameters.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MLImageClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.ModelParameters.validate()()
{
  uint64_t v2 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  uint64_t v3 = OUTLINED_FUNCTION_17(v2);
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_0();
  MLImageClassifier.ModelParameters.algorithm.getter(v1);
  MLImageClassifier.ModelParameters.ModelAlgorithmType.validate()();
  outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(v1, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  if (!v4)
  {
    uint64_t v5 = *(void *)v0;
    outlined init with copy of MLImageClassifier.ModelParameters(v0, (uint64_t)&v15);
    if (v5 < 1)
    {
      outlined destroy of MLImageClassifier.ModelParameters((uint64_t)&v15);
    }
    else
    {
      uint64_t v6 = v15;
      outlined destroy of MLImageClassifier.ModelParameters((uint64_t)&v15);
      if (v6 < 0x7FFFFFFF) {
        return;
      }
    }
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v7._id object = (void *)0x80000002272D58D0;
    v7._uint64_t countAndFlagsBits = 0xD000000000000048;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0x6F6720747562202CLL;
    v9._id object = (void *)0xEA00000000002074;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 46;
    v11._id object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    uint64_t v12 = v15;
    unint64_t v13 = v16;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v14 = v12;
    *(void *)(v14 + 8) = v13;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(unsigned char *)(v14 + 48) = 0;
    swift_willThrow();
  }
}

uint64_t outlined init with take of MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_2270C0CF0@<X0>(uint64_t a1@<X8>)
{
  return MLImageClassifier.ModelParameters.algorithm.getter(a1);
}

uint64_t sub_2270C0D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType, (uint64_t (*)(char *))MLImageClassifier.ModelParameters.algorithm.setter);
}

uint64_t sub_2270C0D68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLImageClassifier.ModelParameters.validationData.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2270C0D98()
{
  return MLImageClassifier.ModelParameters.validation.getter();
}

uint64_t sub_2270C0DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData, (uint64_t (*)(char *))MLImageClassifier.ModelParameters.validation.setter);
}

uint64_t sub_2270C0E10@<X0>(uint64_t a1@<X8>)
{
  return MLImageClassifier.ModelParameters.featureExtractor.getter(a1);
}

uint64_t sub_2270C0E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, type metadata accessor for MLImageClassifier.FeatureExtractorType, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType, (uint64_t (*)(char *))MLImageClassifier.ModelParameters.featureExtractor.setter);
}

uint64_t destroy for MLImageClassifier.ModelParameters(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 40)) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_0(result + 16);
  }
  if (*(void *)(v1 + 72))
  {
    return __swift_destroy_boxed_opaque_existential_0(v1 + 48);
  }
  return result;
}

uint64_t initializeWithCopy for MLImageClassifier.ModelParameters(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 16);
  uint64_t v7 = *((void *)a2 + 5);
  if (v7)
  {
    *(void *)(a1 + 40) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    long long v8 = v4[1];
    *uint64_t v6 = *v4;
    v6[1] = v8;
  }
  Swift::String v9 = (_OWORD *)(a1 + 48);
  Swift::String v10 = a2 + 3;
  uint64_t v11 = *((void *)a2 + 9);
  if (v11)
  {
    *(void *)(a1 + 72) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
  }
  else
  {
    long long v12 = a2[4];
    *Swift::String v9 = *v10;
    *(_OWORD *)(a1 + 64) = v12;
  }
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = (_OWORD *)(a1 + 16);
  long long v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_0(a1 + 16);
  }
  else if (v6)
  {
    *(void *)(a1 + 40) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
    goto LABEL_8;
  }
  long long v7 = v5[1];
  _OWORD *v4 = *v5;
  v4[1] = v7;
LABEL_8:
  uint64_t v8 = *(void *)(a2 + 72);
  if (!*(void *)(a1 + 72))
  {
    if (v8)
    {
      *(void *)(a1 + 72) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_14:
    long long v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
    return a1;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 48);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for MLImageClassifier.ModelParameters(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = a2 + 1;
  *(_OWORD *)a1 = *a2;
  long long v5 = (_OWORD *)(a1 + 16);
  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 16);
  }
  long long v6 = v4[1];
  *long long v5 = *v4;
  v5[1] = v6;
  if (*(void *)(a1 + 72)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 48);
  }
  long long v7 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.ModelParameters()
{
  return &type metadata for MLImageClassifier.ModelParameters;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters(long long *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of MLImageClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

double OUTLINED_FUNCTION_1_12()
{
  uint64_t v3 = *v0;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
}

int *MLHandActionClassifier.ModelParameters.init(validation:batchSize:maximumIterations:predictionWindowSize:augmentationOptions:algorithm:targetFrameRate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v12 = *a5;
  outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData(a1, a6, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  double result = (int *)OUTLINED_FUNCTION_4_10();
  *(void *)(a6 + v14) = a2;
  *(void *)(a6 + result[6]) = a3;
  *(void *)(a6 + result[7]) = a4;
  *(void *)(a6 + result[8]) = v12;
  *(double *)(a6 + result[10]) = a7;
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.ModelParameters.ValidationData);
}

uint64_t type metadata accessor for MLHandActionClassifier.ModelParameters(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.ModelParameters);
}

uint64_t MLHandActionClassifier.ModelParameters.validation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v1, a1);
}

uint64_t outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLHandActionClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  return outlined assign with take of MLHandActionClassifier.ModelParameters.ValidationData(a1, v1);
}

uint64_t outlined assign with take of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MLHandActionClassifier.ModelParameters.validation.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.batchSize.getter()
{
  OUTLINED_FUNCTION_4_10();
  return *(void *)(v0 + v1);
}

uint64_t MLHandActionClassifier.ModelParameters.batchSize.setter(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_4_10();
  *(void *)(v1 + v4) = a1;
  return result;
}

uint64_t (*MLHandActionClassifier.ModelParameters.batchSize.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.maximumIterations.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 24));
}

uint64_t MLHandActionClassifier.ModelParameters.maximumIterations.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*MLHandActionClassifier.ModelParameters.maximumIterations.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.predictionWindowSize.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28));
}

uint64_t MLHandActionClassifier.ModelParameters.predictionWindowSize.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*MLHandActionClassifier.ModelParameters.predictionWindowSize.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.augmentationOptions.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *a1 = *(void *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t MLHandActionClassifier.ModelParameters.augmentationOptions.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*MLHandActionClassifier.ModelParameters.augmentationOptions.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t (*MLHandActionClassifier.ModelParameters.algorithm.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLHandActionClassifier.ModelParameters.targetFrameRate.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 40));
}

uint64_t MLHandActionClassifier.ModelParameters.targetFrameRate.setter(double a1)
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(double *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*MLHandActionClassifier.ModelParameters.targetFrameRate.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hash(into:)()
{
}

uint64_t static MLHandActionClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)()
{
  return 1;
}

Swift::Int MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return 1;
}

void MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(void *a1, void *a2)
{
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLHandActionClassifier.DataSource.videosWithAnnotations()();
  if (!v3)
  {
    uint64_t v31 = a1;
    uint64_t v42 = a2;
    id v12 = v32;
    char v13 = v33;
    outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v2, (uint64_t)v11);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        int v15 = swift_getEnumCaseMultiPayload();
        if (v15 == 5)
        {
          OUTLINED_FUNCTION_2_10();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for DataFrame();
          OUTLINED_FUNCTION_8();
          (*(void (**)(char *))(v28 + 8))(v11);
          goto LABEL_14;
        }
        if (v15 == 3)
        {
          OUTLINED_FUNCTION_2_10();
          outlined consume of Result<_DataTable, Error>(*(id *)v11, v11[8]);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_14:
          uint64_t v29 = v31;
          *uint64_t v31 = 0;
          *((unsigned char *)v29 + 8) = -1;
          id v27 = v42;
          *uint64_t v42 = 0;
          goto LABEL_15;
        }
        outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)v11, (uint64_t)v8, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
        MLHandActionClassifier.DataSource.videosWithAnnotations()();
        outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)v8, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
        uint64_t v30 = v31;
        id v20 = v32;
        char v21 = v33;
        *uint64_t v31 = v12;
        *((unsigned char *)v30 + 8) = v13;
LABEL_9:
        uint64_t v24 = v42;
        *uint64_t v42 = v20;
        *((unsigned char *)v24 + 8) = v21;
        return;
      }
      id v32 = v12;
      LOBYTE(v33) = v13;
      MLDataTable.size.getter();
      if (v25)
      {
        uint64_t v26 = v31;
        *uint64_t v31 = v12;
        *((unsigned char *)v26 + 8) = v13;
        id v27 = v42;
        *uint64_t v42 = 0;
LABEL_15:
        *((unsigned char *)v27 + 8) = -1;
        return;
      }
    }
    else
    {
      id v16 = *(id *)v11;
      uint64_t v17 = *((void *)v11 + 1);
      char v18 = v11[16];
      char v19 = v11[17];
      id v32 = v12;
      LOBYTE(v33) = v13;
      if (MLDataTable.size.getter() >= 1)
      {
        id v36 = v12;
        char v37 = v13;
        id v32 = v16;
        uint64_t v33 = v17;
        char v34 = v18;
        char v35 = v19;
        MLDataTable.randomSplitBySequence(strategy:by:on:)((uint64_t)&v40, (uint64_t)&v38, (uint64_t)&v32, (void *)0x7461506F65646976, (void *)0xE900000000000068, (void *)0x6C6562616CLL, (void *)0xE500000000000000);
        OUTLINED_FUNCTION_2_10();
        id v20 = v40;
        char v21 = v41;
        char v22 = v39;
        uint64_t v23 = v31;
        *uint64_t v31 = v38;
        *((unsigned char *)v23 + 8) = v22;
        goto LABEL_9;
      }
    }
    OUTLINED_FUNCTION_2_10();
    goto LABEL_14;
  }
}

unint64_t MLHandActionClassifier.ModelParameters.description.getter()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  unint64_t v16 = 0xD000000000000014;
  unint64_t v17 = 0x80000002272D5920;
  uint64_t v1 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 10;
  v3._id object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  strcpy((char *)&v15, "Batch Size: ");
  BYTE5(v15._object) = 0;
  HIWORD(v15._object) = -5120;
  v4._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_12();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_9();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_12();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  v6._uint64_t countAndFlagsBits = 0xD000000000000018;
  v6._id object = (void *)0x80000002272D5940;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_9();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0xD000000000000013;
  v15._id object = (void *)0x80000002272D5960;
  v7._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  v8._uint64_t countAndFlagsBits = 0xD000000000000013;
  v8._id object = (void *)0x80000002272D5960;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_9();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + *(int *)(v1 + 32));
  v15._uint64_t countAndFlagsBits = 0xD000000000000016;
  v15._id object = (void *)0x80000002272D5980;
  if (v9 == 1) {
    unint64_t v10 = 0xD000000000000011;
  }
  else {
    unint64_t v10 = 0;
  }
  if (v9 == 1) {
    unint64_t v11 = 0x80000002272D59C0;
  }
  else {
    unint64_t v11 = 0xE000000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_9();
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000015;
  v13._id object = (void *)0x80000002272D59A0;
  String.append(_:)(v13);
  return v16;
}

unint64_t MLHandActionClassifier.ModelParameters.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MLHandActionClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ModelParameters(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v27 = *a2;
    *(void *)a1 = *a2;
    a1 = &v27[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v28 = type metadata accessor for URL();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
          break;
        case 3u:
          uint64_t v29 = *a2;
          char v30 = *((unsigned char *)a2 + 8);
          outlined copy of Result<_DataTable, Error>(*a2, v30);
          *(void *)a1 = v29;
          a1[8] = v30;
          uint64_t v31 = a2[3];
          *((void *)a1 + 2) = a2[2];
          *((void *)a1 + 3) = v31;
          id v32 = a2[5];
          *((void *)a1 + 4) = a2[4];
          *((void *)a1 + 5) = v32;
          uint64_t v33 = a2[7];
          *((void *)a1 + 6) = a2[6];
          *((void *)a1 + 7) = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          char v34 = *a2;
          char v35 = *((unsigned char *)a2 + 8);
          outlined copy of Result<_DataTable, Error>(*a2, v35);
          *(void *)a1 = v34;
          a1[8] = v35;
          id v36 = a2[3];
          *((void *)a1 + 2) = a2[2];
          *((void *)a1 + 3) = v36;
          char v37 = a2[5];
          *((void *)a1 + 4) = a2[4];
          *((void *)a1 + 5) = v37;
          uint64_t v38 = a2[7];
          *((void *)a1 + 6) = a2[6];
          *((void *)a1 + 7) = v38;
          char v39 = a2[9];
          *((void *)a1 + 8) = a2[8];
          *((void *)a1 + 9) = v39;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 5u:
          uint64_t v40 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
          char v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v42 = v41[12];
          uint64_t v43 = &a1[v42];
          uint64_t v44 = (uint64_t *)((char *)a2 + v42);
          uint64_t v46 = *v44;
          uint64_t v45 = v44[1];
          *(void *)uint64_t v43 = v46;
          *((void *)v43 + 1) = v45;
          uint64_t v47 = v41[16];
          uint64_t v48 = &a1[v47];
          uint64_t v49 = (char **)((char *)a2 + v47);
          uint64_t v50 = v49[1];
          *(void *)uint64_t v48 = *v49;
          *((void *)v48 + 1) = v50;
          uint64_t v51 = v41[20];
          uint64_t v52 = &a1[v51];
          uint64_t v53 = (char **)((char *)a2 + v51);
          uint64_t v54 = v53[1];
          *(void *)uint64_t v52 = *v53;
          *((void *)v52 + 1) = v54;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v55 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v55 - 8) + 16))(a1, a2, v55);
          uint64_t v56 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v57 = v56[12];
          uint64_t v58 = &a1[v57];
          uint64_t v59 = (uint64_t *)((char *)a2 + v57);
          uint64_t v61 = *v59;
          uint64_t v60 = v59[1];
          *(void *)uint64_t v58 = v61;
          *((void *)v58 + 1) = v60;
          uint64_t v62 = v56[16];
          uint64_t v63 = &a1[v62];
          uint64_t v64 = (char **)((char *)a2 + v62);
          uint64_t v65 = v64[1];
          *(void *)uint64_t v63 = *v64;
          *((void *)v63 + 1) = v65;
          uint64_t v66 = v56[20];
          uint64_t v67 = &a1[v66];
          uint64_t v68 = (char **)((char *)a2 + v66);
          uint64_t v69 = v68[1];
          *(void *)uint64_t v67 = *v68;
          *((void *)v67 + 1) = v69;
          uint64_t v70 = v56[24];
          uint64_t v71 = &a1[v70];
          uint64_t v72 = (char **)((char *)a2 + v70);
          uint64_t v73 = v72[1];
          *(void *)uint64_t v71 = *v72;
          *((void *)v71 + 1) = v73;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v8 = type metadata accessor for URL();
          uint64_t v9 = *(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16);
          v9(a1, a2, v8);
          unint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v9(&a1[v10[12]], (char **)((char *)a2 + v10[12]), v8);
          uint64_t v11 = v10[16];
          unint64_t v12 = &a1[v11];
          Swift::String v13 = (char **)((char *)a2 + v11);
          uint64_t v14 = v13[1];
          *(void *)unint64_t v12 = *v13;
          *((void *)v12 + 1) = v14;
          uint64_t v15 = v10[20];
          unint64_t v16 = &a1[v15];
          unint64_t v17 = (char **)((char *)a2 + v15);
          uint64_t v18 = v17[1];
          *(void *)unint64_t v16 = *v17;
          *((void *)v16 + 1) = v18;
          uint64_t v19 = v10[24];
          id v20 = &a1[v19];
          char v21 = (char **)((char *)a2 + v19);
          uint64_t v22 = v21[1];
          *(void *)id v20 = *v21;
          *((void *)v20 + 1) = v22;
          uint64_t v23 = v10[28];
          uint64_t v24 = &a1[v23];
          uint64_t v25 = (char **)((char *)a2 + v23);
          uint64_t v26 = v25[1];
          *(void *)uint64_t v24 = *v25;
          *((void *)v24 + 1) = v26;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v74 = a3[6];
    *(void *)&a1[a3[5]] = *(char **)((char *)a2 + a3[5]);
    *(void *)&a1[v74] = *(char **)((char *)a2 + v74);
    uint64_t v75 = a3[8];
    *(void *)&a1[a3[7]] = *(char **)((char *)a2 + a3[7]);
    *(void *)&a1[v75] = *(char **)((char *)a2 + v75);
    *(void *)&a1[a3[10]] = *(char **)((char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.ModelParameters(uint64_t a1)
{
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        uint64_t v5 = type metadata accessor for URL();
        Swift::String v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
        v6(a1, v5);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v6(a1 + *(int *)(v7 + 48), v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 1:
      case 2:
        uint64_t v3 = type metadata accessor for URL();
        Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
        return v4(a1, v3);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 5:
        uint64_t v8 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 6:
        uint64_t v9 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

char *initializeWithCopy for MLHandActionClassifier.ModelParameters(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v26 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
        break;
      case 3u:
        id v27 = *(id *)a2;
        char v28 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v28);
        *(void *)a1 = v27;
        a1[8] = v28;
        uint64_t v29 = *(void *)(a2 + 24);
        *((void *)a1 + 2) = *(void *)(a2 + 16);
        *((void *)a1 + 3) = v29;
        uint64_t v30 = *(void *)(a2 + 40);
        *((void *)a1 + 4) = *(void *)(a2 + 32);
        *((void *)a1 + 5) = v30;
        uint64_t v31 = *(void *)(a2 + 56);
        *((void *)a1 + 6) = *(void *)(a2 + 48);
        *((void *)a1 + 7) = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v32 = *(id *)a2;
        char v33 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v33);
        *(void *)a1 = v32;
        a1[8] = v33;
        uint64_t v34 = *(void *)(a2 + 24);
        *((void *)a1 + 2) = *(void *)(a2 + 16);
        *((void *)a1 + 3) = v34;
        uint64_t v35 = *(void *)(a2 + 40);
        *((void *)a1 + 4) = *(void *)(a2 + 32);
        *((void *)a1 + 5) = v35;
        uint64_t v36 = *(void *)(a2 + 56);
        *((void *)a1 + 6) = *(void *)(a2 + 48);
        *((void *)a1 + 7) = v36;
        uint64_t v37 = *(void *)(a2 + 72);
        *((void *)a1 + 8) = *(void *)(a2 + 64);
        *((void *)a1 + 9) = v37;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v38 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        char v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v40 = v39[12];
        char v41 = &a1[v40];
        uint64_t v42 = (uint64_t *)(a2 + v40);
        uint64_t v44 = *v42;
        uint64_t v43 = v42[1];
        *(void *)char v41 = v44;
        *((void *)v41 + 1) = v43;
        uint64_t v45 = v39[16];
        uint64_t v46 = &a1[v45];
        uint64_t v47 = (void *)(a2 + v45);
        uint64_t v48 = v47[1];
        *(void *)uint64_t v46 = *v47;
        *((void *)v46 + 1) = v48;
        uint64_t v49 = v39[20];
        uint64_t v50 = &a1[v49];
        uint64_t v51 = (void *)(a2 + v49);
        uint64_t v52 = v51[1];
        *(void *)uint64_t v50 = *v51;
        *((void *)v50 + 1) = v52;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v53 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(a1, a2, v53);
        uint64_t v54 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v55 = v54[12];
        uint64_t v56 = &a1[v55];
        uint64_t v57 = (uint64_t *)(a2 + v55);
        uint64_t v59 = *v57;
        uint64_t v58 = v57[1];
        *(void *)uint64_t v56 = v59;
        *((void *)v56 + 1) = v58;
        uint64_t v60 = v54[16];
        uint64_t v61 = &a1[v60];
        uint64_t v62 = (void *)(a2 + v60);
        uint64_t v63 = v62[1];
        *(void *)uint64_t v61 = *v62;
        *((void *)v61 + 1) = v63;
        uint64_t v64 = v54[20];
        uint64_t v65 = &a1[v64];
        uint64_t v66 = (void *)(a2 + v64);
        uint64_t v67 = v66[1];
        *(void *)uint64_t v65 = *v66;
        *((void *)v65 + 1) = v67;
        uint64_t v68 = v54[24];
        uint64_t v69 = &a1[v68];
        uint64_t v70 = (void *)(a2 + v68);
        uint64_t v71 = v70[1];
        *(void *)uint64_t v69 = *v70;
        *((void *)v69 + 1) = v71;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for URL();
        uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
        v8(a1, a2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(&a1[v9[12]], a2 + v9[12], v7);
        uint64_t v10 = v9[16];
        uint64_t v11 = &a1[v10];
        unint64_t v12 = (void *)(a2 + v10);
        uint64_t v13 = v12[1];
        *(void *)uint64_t v11 = *v12;
        *((void *)v11 + 1) = v13;
        uint64_t v14 = v9[20];
        uint64_t v15 = &a1[v14];
        unint64_t v16 = (void *)(a2 + v14);
        uint64_t v17 = v16[1];
        *(void *)uint64_t v15 = *v16;
        *((void *)v15 + 1) = v17;
        uint64_t v18 = v9[24];
        uint64_t v19 = &a1[v18];
        id v20 = (void *)(a2 + v18);
        uint64_t v21 = v20[1];
        *(void *)uint64_t v19 = *v20;
        *((void *)v19 + 1) = v21;
        uint64_t v22 = v9[28];
        uint64_t v23 = &a1[v22];
        uint64_t v24 = (void *)(a2 + v22);
        uint64_t v25 = v24[1];
        *(void *)uint64_t v23 = *v24;
        *((void *)v23 + 1) = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, (const void *)a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v72 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)(a2 + a3[5]);
  *(void *)&a1[v72] = *(void *)(a2 + v72);
  uint64_t v73 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)(a2 + a3[7]);
  *(void *)&a1[v73] = *(void *)(a2 + v73);
  *(void *)&a1[a3[10]] = *(void *)(a2 + a3[10]);
  return a1;
}

char *assignWithCopy for MLHandActionClassifier.ModelParameters(char *a1, uint64_t a2, int *a3)
{
  if (a1 != (char *)a2)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v7 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
          goto LABEL_15;
        case 3u:
          id v23 = *(id *)a2;
          char v24 = *(unsigned char *)(a2 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)a2, v24);
          *(void *)a1 = v23;
          a1[8] = v24;
          *((void *)a1 + 2) = *(void *)(a2 + 16);
          *((void *)a1 + 3) = *(void *)(a2 + 24);
          *((void *)a1 + 4) = *(void *)(a2 + 32);
          *((void *)a1 + 5) = *(void *)(a2 + 40);
          *((void *)a1 + 6) = *(void *)(a2 + 48);
          *((void *)a1 + 7) = *(void *)(a2 + 56);
          goto LABEL_10;
        case 4u:
          id v25 = *(id *)a2;
          char v26 = *(unsigned char *)(a2 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)a2, v26);
          *(void *)a1 = v25;
          a1[8] = v26;
          *((void *)a1 + 2) = *(void *)(a2 + 16);
          *((void *)a1 + 3) = *(void *)(a2 + 24);
          *((void *)a1 + 4) = *(void *)(a2 + 32);
          *((void *)a1 + 5) = *(void *)(a2 + 40);
          *((void *)a1 + 6) = *(void *)(a2 + 48);
          *((void *)a1 + 7) = *(void *)(a2 + 56);
          *((void *)a1 + 8) = *(void *)(a2 + 64);
          *((void *)a1 + 9) = *(void *)(a2 + 72);
          goto LABEL_13;
        case 5u:
          uint64_t v27 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
          char v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v29 = v28[12];
          uint64_t v30 = &a1[v29];
          uint64_t v31 = (void *)(a2 + v29);
          *(void *)uint64_t v30 = *v31;
          *((void *)v30 + 1) = v31[1];
          uint64_t v32 = v28[16];
          char v33 = &a1[v32];
          uint64_t v34 = (void *)(a2 + v32);
          *(void *)char v33 = *v34;
          *((void *)v33 + 1) = v34[1];
          uint64_t v35 = v28[20];
          uint64_t v36 = &a1[v35];
          uint64_t v37 = (void *)(a2 + v35);
          *(void *)uint64_t v36 = *v37;
          *((void *)v36 + 1) = v37[1];
LABEL_10:
          swift_bridgeObjectRetain();
          goto LABEL_11;
        case 6u:
          uint64_t v38 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
          char v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v40 = v39[12];
          char v41 = &a1[v40];
          uint64_t v42 = (void *)(a2 + v40);
          *(void *)char v41 = *v42;
          *((void *)v41 + 1) = v42[1];
          uint64_t v43 = v39[16];
          uint64_t v44 = &a1[v43];
          uint64_t v45 = (void *)(a2 + v43);
          *(void *)uint64_t v44 = *v45;
          *((void *)v44 + 1) = v45[1];
          uint64_t v46 = v39[20];
          uint64_t v47 = &a1[v46];
          uint64_t v48 = (void *)(a2 + v46);
          *(void *)uint64_t v47 = *v48;
          *((void *)v47 + 1) = v48[1];
          uint64_t v49 = v39[24];
          uint64_t v50 = &a1[v49];
          uint64_t v51 = (void *)(a2 + v49);
          *(void *)uint64_t v50 = *v51;
          *((void *)v50 + 1) = v51[1];
LABEL_13:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v8 = type metadata accessor for URL();
          uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
          v9(a1, a2, v8);
          uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v9(&a1[v10[12]], a2 + v10[12], v8);
          uint64_t v11 = v10[16];
          unint64_t v12 = &a1[v11];
          uint64_t v13 = (void *)(a2 + v11);
          *(void *)unint64_t v12 = *v13;
          *((void *)v12 + 1) = v13[1];
          uint64_t v14 = v10[20];
          uint64_t v15 = &a1[v14];
          unint64_t v16 = (void *)(a2 + v14);
          *(void *)uint64_t v15 = *v16;
          *((void *)v15 + 1) = v16[1];
          uint64_t v17 = v10[24];
          uint64_t v18 = &a1[v17];
          uint64_t v19 = (void *)(a2 + v17);
          *(void *)uint64_t v18 = *v19;
          *((void *)v18 + 1) = v19[1];
          uint64_t v20 = v10[28];
          uint64_t v21 = &a1[v20];
          uint64_t v22 = (void *)(a2 + v20);
          *(void *)uint64_t v21 = *v22;
          *((void *)v21 + 1) = v22[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_11:
          swift_bridgeObjectRetain();
          break;
      }
      swift_bridgeObjectRetain();
LABEL_15:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, (const void *)a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)(a2 + a3[5]);
  *(void *)&a1[a3[6]] = *(void *)(a2 + a3[6]);
  *(void *)&a1[a3[7]] = *(void *)(a2 + a3[7]);
  *(void *)&a1[a3[8]] = *(void *)(a2 + a3[8]);
  *(void *)&a1[a3[10]] = *(void *)(a2 + a3[10]);
  return a1;
}

char *initializeWithTake for MLHandActionClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v8 = type metadata accessor for URL();
        uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
        v9(a1, a2, v8);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v9(&a1[v10[12]], &a2[v10[12]], v8);
        *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
        *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
        *(_OWORD *)&a1[v10[24]] = *(_OWORD *)&a2[v10[24]];
        *(_OWORD *)&a1[v10[28]] = *(_OWORD *)&a2[v10[28]];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        goto LABEL_9;
      case 5u:
        uint64_t v12 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
        *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
        *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
        goto LABEL_9;
      case 6u:
        uint64_t v14 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
        *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
        *(_OWORD *)&a1[v15[20]] = *(_OWORD *)&a2[v15[20]];
        *(_OWORD *)&a1[v15[24]] = *(_OWORD *)&a2[v15[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v16 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  return a1;
}

char *assignWithTake for MLHandActionClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v8 = type metadata accessor for URL();
          uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
          v9(a1, a2, v8);
          uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v9(&a1[v10[12]], &a2[v10[12]], v8);
          *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
          *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
          *(_OWORD *)&a1[v10[24]] = *(_OWORD *)&a2[v10[24]];
          *(_OWORD *)&a1[v10[28]] = *(_OWORD *)&a2[v10[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          uint64_t v11 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
          goto LABEL_10;
        case 5u:
          uint64_t v12 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
          uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
          *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
          *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
          goto LABEL_10;
        case 6u:
          uint64_t v14 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
          uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
          *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
          *(_OWORD *)&a1[v15[20]] = *(_OWORD *)&a2[v15[20]];
          *(_OWORD *)&a1[v15[24]] = *(_OWORD *)&a2[v15[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v16 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2270C38D4);
}

uint64_t sub_2270C38D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2270C3930);
}

uint64_t sub_2270C3930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);

  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for MLHandActionClassifier.ModelParameters()
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ModelParameters.ModelAlgorithmType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for MLHandActionClassifier.ModelParameters.ModelAlgorithmType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2270C3B1CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLHandActionClassifier.ModelParameters.ModelAlgorithmType;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ModelParameters.ValidationData(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v26 = *a2;
    *(void *)a1 = *a2;
    a1 = &v26[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v27 = type metadata accessor for URL();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
          break;
        case 3u:
          char v28 = *a2;
          char v29 = *((unsigned char *)a2 + 8);
          outlined copy of Result<_DataTable, Error>(*a2, v29);
          *(void *)a1 = v28;
          a1[8] = v29;
          uint64_t v30 = a2[3];
          *((void *)a1 + 2) = a2[2];
          *((void *)a1 + 3) = v30;
          uint64_t v31 = a2[5];
          *((void *)a1 + 4) = a2[4];
          *((void *)a1 + 5) = v31;
          uint64_t v32 = a2[6];
          char v33 = a2[7];
          *((void *)a1 + 6) = v32;
          *((void *)a1 + 7) = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          uint64_t v34 = *a2;
          char v35 = *((unsigned char *)a2 + 8);
          outlined copy of Result<_DataTable, Error>(*a2, v35);
          *(void *)a1 = v34;
          a1[8] = v35;
          uint64_t v36 = a2[3];
          *((void *)a1 + 2) = a2[2];
          *((void *)a1 + 3) = v36;
          uint64_t v37 = a2[5];
          *((void *)a1 + 4) = a2[4];
          *((void *)a1 + 5) = v37;
          uint64_t v38 = a2[7];
          *((void *)a1 + 6) = a2[6];
          *((void *)a1 + 7) = v38;
          char v39 = a2[8];
          uint64_t v40 = a2[9];
          *((void *)a1 + 8) = v39;
          *((void *)a1 + 9) = v40;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 5u:
          uint64_t v41 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
          uint64_t v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v43 = v42[12];
          uint64_t v44 = &a1[v43];
          uint64_t v45 = (uint64_t *)((char *)a2 + v43);
          uint64_t v47 = *v45;
          uint64_t v46 = v45[1];
          *(void *)uint64_t v44 = v47;
          *((void *)v44 + 1) = v46;
          uint64_t v48 = v42[16];
          uint64_t v49 = &a1[v48];
          uint64_t v50 = (char **)((char *)a2 + v48);
          uint64_t v51 = v50[1];
          *(void *)uint64_t v49 = *v50;
          *((void *)v49 + 1) = v51;
          uint64_t v52 = v42[20];
          uint64_t v53 = &a1[v52];
          uint64_t v54 = (char **)((char *)a2 + v52);
          uint64_t v55 = v54[1];
          *(void *)uint64_t v53 = *v54;
          *((void *)v53 + 1) = v55;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v56 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
          uint64_t v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v58 = v57[12];
          uint64_t v59 = &a1[v58];
          uint64_t v60 = (uint64_t *)((char *)a2 + v58);
          uint64_t v62 = *v60;
          uint64_t v61 = v60[1];
          *(void *)uint64_t v59 = v62;
          *((void *)v59 + 1) = v61;
          uint64_t v63 = v57[16];
          uint64_t v64 = &a1[v63];
          uint64_t v65 = (char **)((char *)a2 + v63);
          uint64_t v66 = v65[1];
          *(void *)uint64_t v64 = *v65;
          *((void *)v64 + 1) = v66;
          uint64_t v67 = v57[20];
          uint64_t v68 = &a1[v67];
          uint64_t v69 = (char **)((char *)a2 + v67);
          uint64_t v70 = v69[1];
          *(void *)uint64_t v68 = *v69;
          *((void *)v68 + 1) = v70;
          uint64_t v71 = v57[24];
          uint64_t v72 = &a1[v71];
          uint64_t v73 = (char **)((char *)a2 + v71);
          uint64_t v74 = v73[1];
          *(void *)uint64_t v72 = *v73;
          *((void *)v72 + 1) = v74;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v7 = type metadata accessor for URL();
          uint64_t v8 = *(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16);
          v8(a1, a2, v7);
          uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v8(&a1[v9[12]], (char **)((char *)a2 + v9[12]), v7);
          uint64_t v10 = v9[16];
          uint64_t v11 = &a1[v10];
          uint64_t v12 = (char **)((char *)a2 + v10);
          uint64_t v13 = v12[1];
          *(void *)uint64_t v11 = *v12;
          *((void *)v11 + 1) = v13;
          uint64_t v14 = v9[20];
          uint64_t v15 = &a1[v14];
          uint64_t v16 = (char **)((char *)a2 + v14);
          uint64_t v17 = v16[1];
          *(void *)uint64_t v15 = *v16;
          *((void *)v15 + 1) = v17;
          uint64_t v18 = v9[24];
          uint64_t v19 = &a1[v18];
          uint64_t v20 = (char **)((char *)a2 + v18);
          uint64_t v21 = v20[1];
          *(void *)uint64_t v19 = *v20;
          *((void *)v19 + 1) = v21;
          uint64_t v22 = v9[28];
          id v23 = &a1[v22];
          char v24 = (char **)((char *)a2 + v22);
          uint64_t v25 = v24[1];
          *(void *)id v23 = *v24;
          *((void *)v23 + 1) = v25;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        uint64_t v5 = type metadata accessor for URL();
        uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
        v6(a1, v5);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v6(a1 + *(int *)(v7 + 48), v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 1:
      case 2:
        uint64_t v3 = type metadata accessor for URL();
        unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
        return v4(a1, v3);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 5:
        uint64_t v8 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 6:
        uint64_t v9 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

char *initializeWithCopy for MLHandActionClassifier.ModelParameters.ValidationData(char *a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v25 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        break;
      case 3u:
        id v26 = *(id *)a2;
        char v27 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v27);
        *(void *)a1 = v26;
        a1[8] = v27;
        uint64_t v28 = *(void *)(a2 + 24);
        *((void *)a1 + 2) = *(void *)(a2 + 16);
        *((void *)a1 + 3) = v28;
        uint64_t v29 = *(void *)(a2 + 40);
        *((void *)a1 + 4) = *(void *)(a2 + 32);
        *((void *)a1 + 5) = v29;
        uint64_t v30 = *(void *)(a2 + 48);
        uint64_t v31 = *(void *)(a2 + 56);
        *((void *)a1 + 6) = v30;
        *((void *)a1 + 7) = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v32 = *(id *)a2;
        char v33 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v33);
        *(void *)a1 = v32;
        a1[8] = v33;
        uint64_t v34 = *(void *)(a2 + 24);
        *((void *)a1 + 2) = *(void *)(a2 + 16);
        *((void *)a1 + 3) = v34;
        uint64_t v35 = *(void *)(a2 + 40);
        *((void *)a1 + 4) = *(void *)(a2 + 32);
        *((void *)a1 + 5) = v35;
        uint64_t v36 = *(void *)(a2 + 56);
        *((void *)a1 + 6) = *(void *)(a2 + 48);
        *((void *)a1 + 7) = v36;
        uint64_t v37 = *(void *)(a2 + 64);
        uint64_t v38 = *(void *)(a2 + 72);
        *((void *)a1 + 8) = v37;
        *((void *)a1 + 9) = v38;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v39 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
        uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v41 = v40[12];
        uint64_t v42 = &a1[v41];
        uint64_t v43 = (uint64_t *)(a2 + v41);
        uint64_t v45 = *v43;
        uint64_t v44 = v43[1];
        *(void *)uint64_t v42 = v45;
        *((void *)v42 + 1) = v44;
        uint64_t v46 = v40[16];
        uint64_t v47 = &a1[v46];
        uint64_t v48 = (void *)(a2 + v46);
        uint64_t v49 = v48[1];
        *(void *)uint64_t v47 = *v48;
        *((void *)v47 + 1) = v49;
        uint64_t v50 = v40[20];
        uint64_t v51 = &a1[v50];
        uint64_t v52 = (void *)(a2 + v50);
        uint64_t v53 = v52[1];
        *(void *)uint64_t v51 = *v52;
        *((void *)v51 + 1) = v53;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v54 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
        uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v56 = v55[12];
        uint64_t v57 = &a1[v56];
        uint64_t v58 = (uint64_t *)(a2 + v56);
        uint64_t v60 = *v58;
        uint64_t v59 = v58[1];
        *(void *)uint64_t v57 = v60;
        *((void *)v57 + 1) = v59;
        uint64_t v61 = v55[16];
        uint64_t v62 = &a1[v61];
        uint64_t v63 = (void *)(a2 + v61);
        uint64_t v64 = v63[1];
        *(void *)uint64_t v62 = *v63;
        *((void *)v62 + 1) = v64;
        uint64_t v65 = v55[20];
        uint64_t v66 = &a1[v65];
        uint64_t v67 = (void *)(a2 + v65);
        uint64_t v68 = v67[1];
        *(void *)uint64_t v66 = *v67;
        *((void *)v66 + 1) = v68;
        uint64_t v69 = v55[24];
        uint64_t v70 = &a1[v69];
        uint64_t v71 = (void *)(a2 + v69);
        uint64_t v72 = v71[1];
        *(void *)uint64_t v70 = *v71;
        *((void *)v70 + 1) = v72;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v7(&a1[v8[12]], a2 + v8[12], v6);
        uint64_t v9 = v8[16];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = (void *)(a2 + v9);
        uint64_t v12 = v11[1];
        *(void *)uint64_t v10 = *v11;
        *((void *)v10 + 1) = v12;
        uint64_t v13 = v8[20];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = (void *)(a2 + v13);
        uint64_t v16 = v15[1];
        *(void *)uint64_t v14 = *v15;
        *((void *)v14 + 1) = v16;
        uint64_t v17 = v8[24];
        uint64_t v18 = &a1[v17];
        uint64_t v19 = (void *)(a2 + v17);
        uint64_t v20 = v19[1];
        *(void *)uint64_t v18 = *v19;
        *((void *)v18 + 1) = v20;
        uint64_t v21 = v8[28];
        uint64_t v22 = &a1[v21];
        id v23 = (void *)(a2 + v21);
        uint64_t v24 = v23[1];
        *(void *)uint64_t v22 = *v23;
        *((void *)v22 + 1) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for MLHandActionClassifier.ModelParameters.ValidationData(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1 != (char *)a2)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v6 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          goto LABEL_14;
        case 3u:
          id v22 = *(id *)a2;
          char v23 = *(unsigned char *)(a2 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)a2, v23);
          *(void *)a1 = v22;
          a1[8] = v23;
          *((void *)a1 + 2) = *(void *)(a2 + 16);
          *((void *)a1 + 3) = *(void *)(a2 + 24);
          *((void *)a1 + 4) = *(void *)(a2 + 32);
          *((void *)a1 + 5) = *(void *)(a2 + 40);
          *((void *)a1 + 6) = *(void *)(a2 + 48);
          *((void *)a1 + 7) = *(void *)(a2 + 56);
          goto LABEL_10;
        case 4u:
          id v24 = *(id *)a2;
          char v25 = *(unsigned char *)(a2 + 8);
          outlined copy of Result<_DataTable, Error>(*(id *)a2, v25);
          *(void *)a1 = v24;
          a1[8] = v25;
          *((void *)a1 + 2) = *(void *)(a2 + 16);
          *((void *)a1 + 3) = *(void *)(a2 + 24);
          *((void *)a1 + 4) = *(void *)(a2 + 32);
          *((void *)a1 + 5) = *(void *)(a2 + 40);
          *((void *)a1 + 6) = *(void *)(a2 + 48);
          *((void *)a1 + 7) = *(void *)(a2 + 56);
          *((void *)a1 + 8) = *(void *)(a2 + 64);
          *((void *)a1 + 9) = *(void *)(a2 + 72);
          goto LABEL_12;
        case 5u:
          uint64_t v26 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
          char v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v28 = v27[12];
          uint64_t v29 = &a1[v28];
          uint64_t v30 = (void *)(a2 + v28);
          *(void *)uint64_t v29 = *v30;
          *((void *)v29 + 1) = v30[1];
          uint64_t v31 = v27[16];
          id v32 = &a1[v31];
          char v33 = (void *)(a2 + v31);
          *(void *)id v32 = *v33;
          *((void *)v32 + 1) = v33[1];
          uint64_t v34 = v27[20];
          uint64_t v35 = &a1[v34];
          uint64_t v36 = (void *)(a2 + v34);
          *(void *)uint64_t v35 = *v36;
          *((void *)v35 + 1) = v36[1];
LABEL_10:
          swift_bridgeObjectRetain();
          break;
        case 6u:
          uint64_t v37 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
          uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v39 = v38[12];
          uint64_t v40 = &a1[v39];
          uint64_t v41 = (void *)(a2 + v39);
          *(void *)uint64_t v40 = *v41;
          *((void *)v40 + 1) = v41[1];
          uint64_t v42 = v38[16];
          uint64_t v43 = &a1[v42];
          uint64_t v44 = (void *)(a2 + v42);
          *(void *)uint64_t v43 = *v44;
          *((void *)v43 + 1) = v44[1];
          uint64_t v45 = v38[20];
          uint64_t v46 = &a1[v45];
          uint64_t v47 = (void *)(a2 + v45);
          *(void *)uint64_t v46 = *v47;
          *((void *)v46 + 1) = v47[1];
          uint64_t v48 = v38[24];
          uint64_t v49 = &a1[v48];
          uint64_t v50 = (void *)(a2 + v48);
          *(void *)uint64_t v49 = *v50;
          *((void *)v49 + 1) = v50[1];
LABEL_12:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v7 = type metadata accessor for URL();
          uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
          v8(a1, a2, v7);
          uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v8(&a1[v9[12]], a2 + v9[12], v7);
          uint64_t v10 = v9[16];
          uint64_t v11 = &a1[v10];
          uint64_t v12 = (void *)(a2 + v10);
          *(void *)uint64_t v11 = *v12;
          *((void *)v11 + 1) = v12[1];
          uint64_t v13 = v9[20];
          uint64_t v14 = &a1[v13];
          uint64_t v15 = (void *)(a2 + v13);
          *(void *)uint64_t v14 = *v15;
          *((void *)v14 + 1) = v15[1];
          uint64_t v16 = v9[24];
          uint64_t v17 = &a1[v16];
          uint64_t v18 = (void *)(a2 + v16);
          *(void *)uint64_t v17 = *v18;
          *((void *)v17 + 1) = v18[1];
          uint64_t v19 = v9[28];
          uint64_t v20 = &a1[v19];
          uint64_t v21 = (void *)(a2 + v19);
          *(void *)uint64_t v20 = *v21;
          *((void *)v20 + 1) = v21[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for MLHandActionClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL();
        uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(&a1[v9[12]], &a2[v9[12]], v7);
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
        *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
        *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_9;
      case 5u:
        uint64_t v11 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
        *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
        *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
        goto LABEL_9;
      case 6u:
        uint64_t v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
        *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
        *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
        *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLHandActionClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v7 = type metadata accessor for URL();
          uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
          v8(a1, a2, v7);
          uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v8(&a1[v9[12]], &a2[v9[12]], v7);
          *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
          *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
          *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
          *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          uint64_t v10 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
          goto LABEL_10;
        case 5u:
          uint64_t v11 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
          uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
          *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
          *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
          goto LABEL_10;
        case 6u:
          uint64_t v13 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
          uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
          *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
          *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
          *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLHandActionClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for MLHandActionClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void OUTLINED_FUNCTION_2_10()
{
  outlined consume of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_4_10()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters(0);
}

uint64_t MLSplitStrategy.dictionary.getter()
{
  if (*((unsigned char *)v0 + 17))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    uint64_t v2 = MEMORY[0x263F8D310];
    *(void *)(inited + 32) = 1684957547;
    *(void *)(inited + 40) = 0xE400000000000000;
    *(void *)(inited + 72) = v2;
    *(void *)(inited + 48) = 0x6974616D6F747561;
    *(void *)(inited + 56) = 0xE900000000000063;
    return Dictionary.init(dictionaryLiteral:)();
  }
  else
  {
    uint64_t v4 = v0[1];
    char v5 = *((unsigned char *)v0 + 16);
    uint64_t v6 = *v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_2272CB4D0;
    *(void *)(v7 + 32) = 1684957547;
    *(void *)(v7 + 40) = 0xE400000000000000;
    uint64_t v8 = MEMORY[0x263F8D310];
    *(void *)(v7 + 48) = 0x6465786966;
    *(void *)(v7 + 56) = 0xE500000000000000;
    *(void *)(v7 + 72) = v8;
    *(void *)(v7 + 80) = 0x6F69746172;
    *(void *)(v7 + 88) = 0xE500000000000000;
    *(void *)(v7 + 120) = MEMORY[0x263F8D538];
    *(void *)(v7 + 96) = v6;
    uint64_t result = Dictionary.init(dictionaryLiteral:)();
    uint64_t v10 = result;
    if ((v5 & 1) == 0)
    {
      v9[3] = MEMORY[0x263F8D6C8];
      v9[0] = v4;
      specialized Dictionary.subscript.setter((uint64_t)v9, 1684366707, 0xE400000000000000);
      return v10;
    }
  }
  return result;
}

uint64_t MLSplitStrategy.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_24;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v5 & 1) == 0) {
    goto LABEL_24;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v14);
  if ((OUTLINED_FUNCTION_0_7() & 1) == 0) {
    goto LABEL_24;
  }
  BOOL v6 = v12 == 0x6974616D6F747561 && v13 == 0xE900000000000063;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 256;
LABEL_10:
    *(unsigned char *)(a2 + 18) = 0;
    return result;
  }
  if (v12 == 0x6465786966 && v13 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_24;
    }
  }
  specialized Dictionary.subscript.getter(0x6F69746172, 0xE500000000000000, a1, &v14);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of Any?((uint64_t)&v14);
    goto LABEL_25;
  }
  if (OUTLINED_FUNCTION_0_7())
  {
    specialized Dictionary.subscript.getter(1684366707, 0xE400000000000000, a1, &v14);
    swift_bridgeObjectRelease();
    if (v15)
    {
      uint64_t result = OUTLINED_FUNCTION_0_7();
      uint64_t v10 = v12;
      if (!result) {
        uint64_t v10 = 0;
      }
      __int16 v11 = result ^ 1;
    }
    else
    {
      uint64_t result = outlined destroy of Any?((uint64_t)&v14);
      uint64_t v10 = 0;
      __int16 v11 = 1;
    }
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v10;
    *(_WORD *)(a2 + 16) = v11;
    goto LABEL_10;
  }
LABEL_24:
  uint64_t result = swift_bridgeObjectRelease();
LABEL_25:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 18) = 1;
  return result;
}

Swift::tuple_ratio_Double_seed_Int __swiftcall MLSplitStrategy.resolve(count:)(Swift::Int count)
{
  if (*(unsigned char *)(v1 + 17))
  {
    if (count >= 50) {
      double v2 = dbl_2272CC890[(unint64_t)count < 0xC8];
    }
    else {
      double v2 = 0.0;
    }
    Swift::Int v3 = 1;
  }
  else
  {
    double v2 = *(double *)v1;
    if (*(unsigned char *)(v1 + 16)) {
      Swift::Int v3 = 1;
    }
    else {
      Swift::Int v3 = *(void *)(v1 + 8);
    }
  }
  result.ratio = v2;
  result.seed = v3;
  return result;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MLSplitStrategy(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MLSplitStrategy(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 18) = v3;
  return result;
}

uint64_t getEnumTag for MLSplitStrategy(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for MLSplitStrategy(uint64_t result, int a2)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 17) = v2;
  return result;
}

ValueMetadata *type metadata accessor for MLSplitStrategy()
{
  return &type metadata for MLSplitStrategy;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_7()
{
  return swift_dynamicCast();
}

uint64_t MLShapedArray<>.init(shape:nestedArray:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MLShapedArray<>.init(shape:nestedArray:)(a1, a2, &demangling cache variable for type metadata for [Any], a3);
}

{
  return MLShapedArray<>.init(shape:nestedArray:)(a1, a2, &demangling cache variable for type metadata for [Any?], a3);
}

uint64_t MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a5 >> 1 == a4)
  {
    outlined init with copy of Any?(a6, (uint64_t)&v50);
    if (v52)
    {
      if (OUTLINED_FUNCTION_0_8())
      {
        unint64_t v50 = *(void *)&v49[0];
        *(void *)&v49[0] = a1;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
        return MLShapedArray.subscript.setter();
      }
    }
    else
    {
LABEL_23:
      outlined destroy of Any?((uint64_t)&v50);
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v24 = 0xD000000000000035;
    *(void *)(v24 + 8) = 0x80000002272D5A00;
    goto LABEL_48;
  }
  if ((uint64_t)(a5 >> 1) <= a4) {
    goto LABEL_59;
  }
  uint64_t v53 = *(void *)(a3 + 8 * a4);
  outlined init with copy of Any?(a6, (uint64_t)&v50);
  if (v52)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (OUTLINED_FUNCTION_0_8())
    {
      if (*(void *)(*(void *)&v49[0] + 16) == v53)
      {
        uint64_t v53 = *(void *)&v49[0];
        swift_unknownObjectRetain();
        uint64_t v11 = OUTLINED_FUNCTION_2_11();
        uint64_t v46 = v12;
        uint64_t v47 = v11;
        uint64_t v45 = v13;
        uint64_t v7 = v14;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_60;
        }
        while (1)
        {
          unint64_t v16 = *(void *)(a1 + 16);
          unint64_t v15 = *(void *)(a1 + 24);
          uint64_t v17 = v53;
          if (v16 >= v15 >> 1)
          {
            OUTLINED_FUNCTION_3_13(v15);
            a1 = v42;
            uint64_t v17 = v53;
          }
          *(void *)(a1 + 16) = v16 + 1;
          *(void *)(a1 + 8 * v16 + 32) = 0;
          uint64_t v18 = *(void *)(v17 + 16);
          if (!v18) {
            break;
          }
          unint64_t v19 = 0;
          uint64_t v20 = v17 + 32;
          while (v19 < *(void *)(v17 + 16))
          {
            unint64_t v50 = v19;
            outlined init with copy of Any(v20, (uint64_t)&v51);
            outlined init with take of Any(&v51, v49);
            unint64_t v21 = *(void *)(a1 + 16);
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if (!v21) {
                goto LABEL_22;
              }
            }
            else
            {
              specialized _ArrayBuffer._consumeAndCreateNew()();
              a1 = v23;
              if (!v21)
              {
LABEL_22:
                __break(1u);
                goto LABEL_23;
              }
            }
            if (v21 > *(void *)(a1 + 16)) {
              goto LABEL_56;
            }
            *(void *)(a1 + 8 * (v21 - 1) + 32) = v19;
            outlined init with copy of Any((uint64_t)v49, (uint64_t)v48);
            uint64_t v22 = swift_bridgeObjectRetain();
            MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(v22, v47, v46, v45, v7, v48);
            if (v6)
            {
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              outlined destroy of Any?((uint64_t)v48);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
            ++v19;
            swift_bridgeObjectRelease();
            outlined destroy of Any?((uint64_t)v48);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
            v20 += 32;
            uint64_t v17 = v53;
            if (v18 == v19) {
              goto LABEL_49;
            }
          }
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          OUTLINED_FUNCTION_1_13();
          a1 = v41;
        }
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v50);
  }
  outlined init with copy of Any?(a6, (uint64_t)&v50);
  if (!v52)
  {
LABEL_45:
    outlined destroy of Any?((uint64_t)&v50);
    goto LABEL_47;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  if ((OUTLINED_FUNCTION_0_8() & 1) == 0)
  {
LABEL_47:
    unint64_t v50 = 0;
    *(void *)&long long v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    unint64_t v50 = 0xD00000000000001DLL;
    *(void *)&long long v51 = 0x80000002272D59E0;
    *(void *)&v49[0] = v53;
    v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 0x746E656D656C6520;
    v38._id object = (void *)0xEA00000000002E73;
    String.append(_:)(v38);
    unint64_t v39 = v50;
    uint64_t v40 = v51;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v24 = v39;
    *(void *)(v24 + 8) = v40;
LABEL_48:
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(unsigned char *)(v24 + 48) = 0;
    return swift_willThrow();
  }
  uint64_t v25 = *(void *)&v49[0];
  if (*(void *)(*(void *)&v49[0] + 16) != v53)
  {
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  swift_unknownObjectRetain();
  uint64_t v53 = OUTLINED_FUNCTION_2_11();
  uint64_t v46 = v27;
  uint64_t v47 = v26;
  uint64_t v45 = v28;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_13();
    a1 = v43;
  }
  unint64_t v30 = *(void *)(a1 + 16);
  unint64_t v29 = *(void *)(a1 + 24);
  if (v30 >= v29 >> 1)
  {
    OUTLINED_FUNCTION_3_13(v29);
    a1 = v44;
  }
  *(void *)(a1 + 16) = v30 + 1;
  *(void *)(a1 + 8 * v30 + 32) = 0;
  uint64_t v31 = *(void *)(v25 + 16);
  if (!v31)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  unint64_t v32 = 0;
  uint64_t v7 = v25;
  uint64_t v33 = v25 + 32;
  while (1)
  {
    if (v32 >= *(void *)(v7 + 16)) {
      goto LABEL_57;
    }
    unint64_t v50 = v32;
    outlined init with copy of Any?(v33, (uint64_t)&v51);
    outlined init with take of Any?((uint64_t)&v51, (uint64_t)v49);
    unint64_t v34 = *(void *)(a1 + 16);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (!v34) {
        goto LABEL_44;
      }
    }
    else
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      a1 = v36;
      if (!v34)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    if (v34 > *(void *)(a1 + 16)) {
      goto LABEL_58;
    }
    *(void *)(a1 + 8 * (v34 - 1) + 32) = v32;
    uint64_t v35 = swift_bridgeObjectRetain();
    MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(v35, v53, v47, v46, v45, v49);
    if (v6) {
      break;
    }
    ++v32;
    outlined destroy of Any?((uint64_t)v49);
    swift_bridgeObjectRelease();
    v33 += 32;
    if (v31 == v32) {
      goto LABEL_50;
    }
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)v49);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArray<>.init(shape:nestedArray:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
  swift_bridgeObjectRetain();
  MLShapedArrayProtocol.init(repeating:shape:)();
  uint64_t v9 = specialized MutableCollection.subscript.getter(0, a1);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  v18[3] = __swift_instantiateConcreteTypeFromMangledName(a3);
  v18[0] = a2;
  uint64_t v16 = v18[5];
  MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(MEMORY[0x263F8EE78], v9, v11, v13, v15, (uint64_t)v18);
  if (v16) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a4, v8);
  }
  swift_unknownObjectRelease();
  return outlined destroy of Any?((uint64_t)v18);
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = a5 >> 1;
    __n128 result = specialized ArraySlice.index(_:offsetBy:limitedBy:)(a4, result, a5 >> 1);
    if (v10) {
      __n128 result = v9;
    }
    if (v9 >= result)
    {
      uint64_t v11 = specialized ArraySlice.subscript.getter(result, v9, a2, a3, a4, a5);
      swift_unknownObjectRelease();
      return v11;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_1_13()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  return specialized Collection.dropFirst(_:)(1, v3, v2, v1, v0);
}

void OUTLINED_FUNCTION_3_13(unint64_t a1@<X8>)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v33 = type metadata accessor for NeuralNetwork.WeightParameters();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_33_0();
  uint64_t v40 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v32 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v37 = v7;
  uint64_t v36 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v14 = v13;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v32 - v19;
  Dense.weight.getter();
  Tensor.shape.getter();
  unint64_t v21 = *(void (**)(void))(v14 + 8);
  ((void (*)(char *, uint64_t))v21)(v20, v12);
  uint64_t v22 = TensorShape.subscript.getter();
  uint64_t v23 = v9 + 8;
  uint64_t v24 = *(void (**)(void))(v9 + 8);
  uint64_t v34 = v23;
  uint64_t v35 = v22;
  uint64_t v25 = v12;
  OUTLINED_FUNCTION_9();
  v24();
  Dense.weight.getter();
  Tensor.shape.getter();
  Swift::String v38 = v21;
  uint64_t v41 = v14 + 8;
  ((void (*)(char *, uint64_t))v21)(v18, v12);
  TensorShape.subscript.getter();
  OUTLINED_FUNCTION_9();
  v24();
  uint64_t v26 = v37;
  NeuralNetwork.Layer.InnerProductParameters.init(inputChannelCount:outputChannelCount:)();
  Dense.bias.getter();
  if (__swift_getEnumTagSinglePayload(v26, 1, v25) == 1)
  {
    outlined destroy of Tensor?(v26);
    NeuralNetwork.Layer.InnerProductParameters.hasBias.setter();
    uint64_t v27 = v38;
  }
  else
  {
    Tensor.scalars<A>(as:)();
    uint64_t v28 = v38;
    OUTLINED_FUNCTION_9();
    v28();
    NeuralNetwork.Layer.InnerProductParameters.hasBias.setter();
    uint64_t v29 = v32;
    NeuralNetwork.WeightParameters.init(_:updatable:)();
    __swift_storeEnumTagSinglePayload(v29, 0, 1, v33);
    NeuralNetwork.Layer.InnerProductParameters.bias.setter();
    uint64_t v27 = v28;
  }
  Dense.weight.getter();
  Tensor.scalars<A>(as:)();
  OUTLINED_FUNCTION_9();
  v27();
  NeuralNetwork.WeightParameters.init(_:updatable:)();
  NeuralNetwork.Layer.InnerProductParameters.weights.setter();
  uint64_t v30 = type metadata accessor for Dense();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(a1, v30);
}

uint64_t outlined destroy of Tensor?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLLogisticRegressionClassifier.PersistentParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DataFrame();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v9, 1, v7))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15);
    *uint64_t v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + v15) = v19;
    uint64_t v20 = a3[8];
    unint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    *(uint64_t *)((char *)a1 + v20) = *(uint64_t *)((char *)a2 + v20);
    uint64_t v23 = (_OWORD *)((char *)a1 + v20 + 8);
    uint64_t v24 = *((void *)v22 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v24)
    {
      *((void *)v21 + 4) = v24;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))((uint64_t)(v21 + 8), (uint64_t)(v22 + 8), v24);
    }
    else
    {
      long long v25 = *(_OWORD *)(v22 + 24);
      *uint64_t v23 = *(_OWORD *)(v22 + 8);
      *(_OWORD *)(v21 + 24) = v25;
    }
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
    v21[72] = v22[72];
  }
  return a1;
}

uint64_t destroy for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataFrame();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4)) {
    v5(v6, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(a2 + 32);
  if (*(void *)(v8 + 32))
  {
    return __swift_destroy_boxed_opaque_existential_0(v8 + 8);
  }
  return result;
}

char *initializeWithCopy for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  uint64_t v16 = *((void *)v15 + 1);
  uint64_t v17 = *(void *)&a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  *(void *)&a1[v13] = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  unint64_t v21 = &a1[v18 + 8];
  uint64_t v22 = *((void *)v20 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22)
  {
    *((void *)v19 + 4) = v22;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v22 - 8))((uint64_t)(v19 + 8), (uint64_t)(v20 + 8), v22);
  }
  else
  {
    long long v23 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)unint64_t v21 = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(v19 + 24) = v23;
  }
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(v20 + 40);
  *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 56);
  v19[72] = v20[72];
  return a1;
}

char *assignWithCopy for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  uint64_t v21 = (uint64_t)&a1[v18 + 8];
  uint64_t v22 = *((void *)v20 + 4);
  if (!*(void *)&a1[v18 + 32])
  {
    if (v22)
    {
      *((void *)v19 + 4) = v22;
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(v21, (uint64_t)(v20 + 8));
      goto LABEL_14;
    }
LABEL_13:
    long long v23 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(v21 + 16) = v23;
    goto LABEL_14;
  }
  if (!v22)
  {
    __swift_destroy_boxed_opaque_existential_0(v21);
    goto LABEL_13;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v21, (uint64_t *)v20 + 1);
LABEL_14:
  *((void *)v19 + 5) = *((void *)v20 + 5);
  *((void *)v19 + 6) = *((void *)v20 + 6);
  *((void *)v19 + 7) = *((void *)v20 + 7);
  *((void *)v19 + 8) = *((void *)v20 + 8);
  v19[72] = v20[72];
  return a1;
}

char *initializeWithTake for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  memcpy(&a1[a3[8]], &a2[a3[8]], 0x49uLL);
  return a1;
}

char *assignWithTake for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DataFrame();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)&a1[v20] = *(void *)&a2[v20];
  long long v23 = &a1[v20 + 8];
  if (*(void *)&a1[v20 + 32]) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  }
  long long v24 = *(_OWORD *)(v22 + 24);
  *(_OWORD *)long long v23 = *(_OWORD *)(v22 + 8);
  *((_OWORD *)v23 + 1) = v24;
  *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
  v21[72] = v22[72];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2270C7264);
}

uint64_t sub_2270C7264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2270C7334);
}

void sub_2270C7334(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLLogisticRegressionClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier.PersistentParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MLLogisticRegressionClassifier.PersistentParameters()
{
  type metadata accessor for DataFrame();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DataFrame?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML30MLLogisticRegressionClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML30ijk13V20Persistentm48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05l5G0V14nd3O07c5N00N5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DataFrame();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DataFrame?(a1, (uint64_t)v10);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    uint64_t v11 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
    uint64_t v12 = a2;
    uint64_t v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    uint64_t v14 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v12 = a2;
    uint64_t v13 = 0;
    uint64_t v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLLogisticRegressionClassifier.PersistentParameters.init(sessionDirectory:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v133 = a1;
  uint64_t v139 = *MEMORY[0x263EF8340];
  uint64_t v118 = type metadata accessor for CSVType();
  OUTLINED_FUNCTION_0();
  uint64_t v126 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v5);
  uint64_t v6 = type metadata accessor for CSVReadingOptions();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  uint64_t v115 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.ModelParameters.ValidationData?);
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  uint64_t v124 = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v16);
  uint64_t v17 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v117 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v21);
  uint64_t v128 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v25);
  uint64_t v26 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v131 = v27;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_16_2();
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v103 - v32;
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v36 = (char *)&v103 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34);
  uint64_t v39 = (char *)&v103 - v38;
  uint64_t v40 = MEMORY[0x270FA5388](v37);
  uint64_t v42 = (char *)&v103 - v41;
  MEMORY[0x270FA5388](v40);
  uint64_t v44 = (char *)&v103 - v43;
  uint64_t v45 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  uint64_t v46 = *(int *)(v45 + 20);
  uint64_t v132 = a2;
  uint64_t v129 = a2 + v46;
  uint64_t v122 = v17;
  __swift_storeEnumTagSinglePayload(a2 + v46, 1, 1, v17);
  uint64_t v47 = v133;
  URL.appendingPathComponent(_:)();
  id v48 = v130;
  uint64_t v49 = Data.init(contentsOf:options:)();
  id v130 = v48;
  if (v48)
  {
    long long v51 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    v51(v47, v26);
    v51((uint64_t)v44, v26);
    uint64_t v52 = v129;
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v52, &demangling cache variable for type metadata for DataFrame?);
  }
  id v107 = v36;
  uint64_t v106 = v33;
  uint64_t v108 = v39;
  uint64_t v109 = v42;
  uint64_t v114 = v45;
  uint64_t v53 = v131;
  uint64_t v54 = *(void (**)(void))(v131 + 8);
  uint64_t v55 = v49;
  unint64_t v56 = v50;
  OUTLINED_FUNCTION_24_5();
  v54();
  uint64_t v57 = self;
  uint64_t v58 = v26;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v136 = 0;
  id v60 = objc_msgSend(v57, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v136);

  id v61 = (id)v136;
  if (!v60)
  {
    int v85 = v61;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v55, v56);
    OUTLINED_FUNCTION_24_5();
    v54();
LABEL_25:
    uint64_t v52 = v129;
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v52, &demangling cache variable for type metadata for DataFrame?);
  }
  uint64_t v110 = v55;
  unint64_t v111 = v56;
  uint64_t v112 = v54;
  uint64_t v113 = v58;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v138, (uint64_t)&v136);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_19_0(v86, 0xD000000000000037);
    OUTLINED_FUNCTION_8_7();
    OUTLINED_FUNCTION_18_5();
    OUTLINED_FUNCTION_24_5();
    v87();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v138);
    goto LABEL_25;
  }
  uint64_t v62 = v134;
  specialized Dictionary.subscript.getter(0x746567726174, 0xE600000000000000, v134, &v136);
  if (!v137)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v136, &demangling cache variable for type metadata for Any?);
LABEL_28:
    uint64_t v52 = v129;
LABEL_34:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_19_0(v88, 0xD000000000000034);
    OUTLINED_FUNCTION_8_7();
    uint64_t v89 = OUTLINED_FUNCTION_18_5();
    v90(v89);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v138);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v52, &demangling cache variable for type metadata for DataFrame?);
  }
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  uint64_t v64 = v134;
  uint64_t v63 = v135;
  OUTLINED_FUNCTION_15_6((uint64_t)"selectedFeatures");
  if (!v137)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v136, &demangling cache variable for type metadata for Any?);
LABEL_33:
    uint64_t v52 = v129;
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  uint64_t v104 = v64;
  uint64_t v65 = v134;
  specialized Dictionary.subscript.getter(0x617265744978616DLL, 0xED0000736E6F6974, v62, &v136);
  if (!v137) {
    goto LABEL_29;
  }
  uint64_t v105 = v65;
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v66 = v134;
  specialized Dictionary.subscript.getter(0x746C616E6550316CLL, 0xE900000000000079, v62, &v136);
  if (!v137) {
    goto LABEL_36;
  }
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
  {
    OUTLINED_FUNCTION_17_6();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  uint64_t v67 = v134;
  specialized Dictionary.subscript.getter(0x746C616E6550326CLL, 0xE900000000000079, v62, &v136);
  if (!v137)
  {
LABEL_36:
    OUTLINED_FUNCTION_17_6();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v136, &demangling cache variable for type metadata for Any?);
    goto LABEL_33;
  }
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v68 = v134;
  specialized Dictionary.subscript.getter(0x657A695370657473, 0xE800000000000000, v62, &v136);
  if (!v137)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
  {
LABEL_31:
    OUTLINED_FUNCTION_17_6();
    goto LABEL_32;
  }
  uint64_t v103 = v66;
  uint64_t v69 = v134;
  specialized Dictionary.subscript.getter(0xD000000000000014, 0x80000002272D5A40, v62, &v136);
  if (!v137) {
    goto LABEL_29;
  }
  uint64_t v70 = v63;
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
  {
    OUTLINED_FUNCTION_17_6();
    swift_bridgeObjectRelease();
LABEL_42:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  uint64_t v71 = v134;
  OUTLINED_FUNCTION_15_6((uint64_t)"featureRescaling");
  swift_bridgeObjectRelease();
  if (!v137)
  {
    OUTLINED_FUNCTION_17_6();
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v136, &demangling cache variable for type metadata for Any?);
    goto LABEL_33;
  }
  if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
  {
    OUTLINED_FUNCTION_17_6();
    goto LABEL_42;
  }
  char v72 = v134;
  uint64_t v73 = v114;
  uint64_t v74 = v132;
  uint64_t v75 = (uint64_t *)(v132 + *(int *)(v114 + 24));
  *uint64_t v75 = v104;
  v75[1] = v70;
  *(void *)(v74 + *(int *)(v73 + 28)) = v105;
  uint64_t v76 = (uint64_t)v121;
  *uint64_t v121 = 0;
  *(void *)(v76 + 8) = 0;
  *(_WORD *)(v76 + 16) = 256;
  uint64_t v77 = v128;
  swift_storeEnumTagMultiPayload();
  uint64_t v78 = v74 + *(int *)(v73 + 32);
  *(_OWORD *)(v78 + 8) = 0u;
  *(_OWORD *)(v78 + 24) = 0u;
  *(void *)uint64_t v78 = 10;
  *(_OWORD *)(v78 + 40) = xmmword_2272CC8C0;
  *(_OWORD *)(v78 + 56) = xmmword_2272CC8D0;
  *(unsigned char *)(v78 + 72) = 1;
  uint64_t v79 = v120;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v76, v120);
  uint64_t v137 = v77;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v136);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v79, (uint64_t)boxed_opaque_existential_0);
  uint64_t v120 = v78 + 8;
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)&v136, v78 + 8, &demangling cache variable for type metadata for Any?);
  outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v76);
  *(void *)uint64_t v78 = v103;
  *(void *)(v78 + 40) = v67;
  *(void *)(v78 + 48) = v68;
  *(void *)(v78 + 56) = v69;
  *(void *)(v78 + 64) = v71;
  *(unsigned char *)(v78 + 72) = v72;
  uint64_t v81 = v109;
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_11_2();
  URL.appendingPathComponent(_:)();
  uint64_t v82 = *(void (**)(void))(v53 + 16);
  uint64_t v131 = v53 + 16;
  ((void (*)(char *, char *, uint64_t))v82)(v107, v81, v113);
  OUTLINED_FUNCTION_16_7();
  id v83 = v130;
  DataFrame.init(contentsOfSFrameDirectory:columns:rows:)();
  id v130 = v83;
  if (v83)
  {
    OUTLINED_FUNCTION_6_9();
    v82();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v84 = *(void (**)(void))(v126 + 104);
    LODWORD(v127) = *MEMORY[0x263F1BF38];
    v126 += 104;
    uint64_t v125 = (void (*)(uint64_t, void, uint64_t))v84;
    v84(v119);
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
    OUTLINED_FUNCTION_23_2();
    OUTLINED_FUNCTION_20_5();
    v95();
    OUTLINED_FUNCTION_6_9();
    v82();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    v125(v119, v127, v118);
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
    OUTLINED_FUNCTION_16_7();
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();

    uint64_t v96 = v116;
    __swift_storeEnumTagSinglePayload(v116, 0, 1, v122);
    uint64_t v127 = v96;
  }
  else
  {
    OUTLINED_FUNCTION_23_2();
    OUTLINED_FUNCTION_20_5();
    v92();
    OUTLINED_FUNCTION_6_9();
    v82();
    id v93 = v130;
    DataFrame.init(contentsOfSFrameDirectory:columns:rows:)();
    if (v93)
    {

      uint64_t v94 = 1;
    }
    else
    {
      uint64_t v94 = 0;
    }
    __swift_storeEnumTagSinglePayload(v127, v94, 1, v122);
  }
  uint64_t v97 = v129;
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v127, v129, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v98 = v124;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML30MLLogisticRegressionClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML30ijk13V20Persistentm48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05l5G0V14nd3O07c5N00N5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n(v97, v124);
  if (__swift_getEnumTagSinglePayload(v98, 1, v128) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v124, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v124, v123);
  }
  uint64_t v137 = v128;
  uint64_t v99 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v136);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v123, (uint64_t)v99);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)&v136, v120, &demangling cache variable for type metadata for Any?);
  OUTLINED_FUNCTION_8_7();
  uint64_t v100 = v112;
  OUTLINED_FUNCTION_24_5();
  v100();
  uint64_t v101 = OUTLINED_FUNCTION_7_11((uint64_t)&v135);
  ((void (*)(uint64_t))v100)(v101);
  uint64_t v102 = OUTLINED_FUNCTION_7_11((uint64_t)&v136);
  ((void (*)(uint64_t))v100)(v102);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v138);
}

uint64_t outlined destroy of MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t MLLogisticRegressionClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v57 = a1;
  v59[53] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v50 = v5;
  type metadata accessor for CSVWritingOptions();
  OUTLINED_FUNCTION_0();
  uint64_t v53 = v6;
  uint64_t v54 = v7;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_49();
  uint64_t v49 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_106();
  uint64_t v52 = v10;
  uint64_t v58 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v56 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v48 = v13;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  long long v51 = (char *)&v46 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v46 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4C0;
  *(void *)(inited + 32) = 0x746567726174;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v20 = (int *)type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  uint64_t v21 = (void *)(v2 + v20[6]);
  uint64_t v22 = v21[1];
  uint64_t v23 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = *v21;
  *(void *)(inited + 56) = v22;
  *(void *)(inited + 72) = v23;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000002272D4EF0;
  uint64_t v24 = *(void *)(v2 + v20[7]);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 96) = v24;
  *(void *)(inited + 120) = v25;
  strcpy((char *)(inited + 128), "maxIterations");
  *(_WORD *)(inited + 142) = -4864;
  uint64_t v26 = v2 + v20[8];
  uint64_t v27 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 144) = *(void *)v26;
  *(void *)(inited + 168) = v27;
  *(void *)(inited + 176) = 0x746C616E6550316CLL;
  *(void *)(inited + 184) = 0xE900000000000079;
  uint64_t v28 = MEMORY[0x263F8D538];
  *(void *)(inited + 192) = *(void *)(v26 + 40);
  *(void *)(inited + 216) = v28;
  *(void *)(inited + 224) = 0x746C616E6550326CLL;
  *(void *)(inited + 232) = 0xE900000000000079;
  *(void *)(inited + 240) = *(void *)(v26 + 48);
  *(void *)(inited + 264) = v28;
  *(void *)(inited + 272) = 0x657A695370657473;
  *(void *)(inited + 280) = 0xE800000000000000;
  *(void *)(inited + 288) = *(void *)(v26 + 56);
  *(void *)(inited + 312) = v28;
  *(void *)(inited + 320) = 0xD000000000000014;
  *(void *)(inited + 328) = 0x80000002272D5A40;
  *(void *)(inited + 336) = *(void *)(v26 + 64);
  *(void *)(inited + 360) = v28;
  *(void *)(inited + 368) = 0xD000000000000010;
  *(void *)(inited + 376) = 0x80000002272D5A60;
  LOBYTE(v26) = *(unsigned char *)(v26 + 72);
  *(void *)(inited + 408) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 384) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_24_6();
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v29 = self;
  OUTLINED_FUNCTION_24_6();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v59[0] = 0;
  id v31 = objc_msgSend(v29, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, v59);

  id v32 = v59[0];
  if (v31)
  {
    uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    URL.appendingPathComponent(_:)();
    unint64_t v36 = v55;
    Data.write(to:options:)();
    if (v36)
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v18, v58);
      return outlined consume of Data._Representation(v33, v35);
    }
    else
    {
      unint64_t v55 = v35;
      uint64_t v56 = *(void *)(v56 + 8);
      OUTLINED_FUNCTION_21_4();
      v39();
      URL.appendingPathComponent(_:)();
      OUTLINED_FUNCTION_12_3();
      uint64_t v40 = v52;
      OUTLINED_FUNCTION_5_10();
      uint64_t v47 = type metadata accessor for DataFrame();
      DataFrameProtocol.writeCSV(to:options:)();
      uint64_t v41 = v54 + 8;
      uint64_t v52 = *(void (**)(void, void))(v54 + 8);
      v52(v40, v53);
      uint64_t v42 = (void (*)(void))v56;
      OUTLINED_FUNCTION_21_4();
      v42();
      uint64_t v43 = v2 + v20[5];
      uint64_t v44 = v50;
      outlined init with copy of DataFrame?(v43, v50);
      if (__swift_getEnumTagSinglePayload(v44, 1, v47) == 1)
      {
        outlined consume of Data._Representation(v33, v55);
        return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v44, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        uint64_t v54 = v41;
        OUTLINED_FUNCTION_11_2();
        URL.appendingPathComponent(_:)();
        OUTLINED_FUNCTION_12_3();
        uint64_t v45 = v49;
        OUTLINED_FUNCTION_5_10();
        DataFrameProtocol.writeCSV(to:options:)();
        outlined consume of Data._Representation(v33, v55);
        v52(v45, v53);
        OUTLINED_FUNCTION_21_4();
        v42();
        return (*(uint64_t (**)(uint64_t))(*(void *)(v47 - 8) + 8))(v44);
      }
    }
  }
  else
  {
    uint64_t v38 = v32;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_5_10()
{
  return MEMORY[0x270F05A08](1, 0, 0, 0, 0xE000000000000000, 1702195828, 0xE400000000000000, 0x65736C6166);
}

uint64_t OUTLINED_FUNCTION_7_11@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  uint64_t v2 = *(void *)(v0 - 440);
  unint64_t v3 = *(void *)(v0 - 432);
  return outlined consume of Data._Representation(v2, v3);
}

double OUTLINED_FUNCTION_15_6@<D0>(uint64_t a1@<X8>)
{
  return specialized Dictionary.subscript.getter(0xD000000000000010, (a1 - 32) | 0x8000000000000000, v1, (_OWORD *)(v2 - 192));
}

uint64_t OUTLINED_FUNCTION_16_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return *(void *)(v0 - 232);
}

uint64_t OUTLINED_FUNCTION_24_6()
{
  return v0;
}

void *static NLLanguageRecognizer.dominantLanguage(for:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = (void **)MEMORY[0x263F13E78];
  if (v1)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v23;
    uint64_t v5 = self;
    uint64_t v6 = *v3;
    uint64_t v7 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      swift_bridgeObjectRetain();
      uint64_t v10 = (void *)MEMORY[0x22A674AE0](v8, v9);
      id v11 = objc_msgSend(v5, sel_dominantLanguageForString_, v10);

      if (!v11) {
        id v11 = v6;
      }
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v23 + 16);
      unint64_t v12 = *(void *)(v23 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      }
      v7 += 2;
      *(void *)(v23 + 16) = v13 + 1;
      *(void *)(v23 + 8 * v13 + 32) = v11;
      --v1;
    }
    while (v1);
  }
  uint64_t v14 = (void *)specialized Collection<>.mostFrequent()(v2);
  swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0) {
        return v14;
      }
    }
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_19_0(v21, 0xD00000000000001ELL);

  return v14;
}

uint64_t specialized Collection<>.mostFrequent()(uint64_t a1)
{
  type metadata accessor for NLLanguage(0);
  lazy protocol witness table accessor for type NLLanguage and conformance NLLanguage();
  uint64_t v2 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    while (1)
    {
      id v5 = *(id *)(a1 + 8 * v4 + 32);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
      uint64_t v9 = v2[2];
      BOOL v10 = (v8 & 1) == 0;
      Swift::Int v11 = v9 + v10;
      if (__OFADD__(v9, v10)) {
        break;
      }
      unint64_t v12 = v7;
      char v13 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<NLLanguage, Int>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11))
      {
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
        if ((v13 & 1) != (v15 & 1)) {
          goto LABEL_17;
        }
        unint64_t v12 = v14;
      }
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        v2[(v12 >> 6) + 8] |= 1 << v12;
        *(void *)(v2[6] + 8 * v12) = v5;
        *(void *)(v2[7] + 8 * v12) = 0;
        uint64_t v16 = v2[2];
        BOOL v17 = __OFADD__(v16, 1);
        uint64_t v18 = v16 + 1;
        if (v17) {
          goto LABEL_16;
        }
        v2[2] = v18;
        id v19 = v5;
      }
      uint64_t v20 = v2[7];
      uint64_t v21 = *(void *)(v20 + 8 * v12);
      BOOL v17 = __OFADD__(v21, 1);
      uint64_t v22 = v21 + 1;
      if (v17) {
        goto LABEL_15;
      }
      ++v4;
      *(void *)(v20 + 8 * v12) = v22;

      if (v3 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_13:
    specialized Sequence.max(by:)((uint64_t)v2);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    return v24;
  }
  return result;
}

id static NLEmbedding.requestIfNotPresent(embeddingType:language:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = self;
  id result = objc_msgSend(v4, sel_assetsAvailableForEmbeddingType_language_, a1, a2);
  if (!result)
  {
    v8[4] = MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
    v8[5] = 0;
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 1107296256;
    void v8[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed Error?) -> ();
    v8[3] = &block_descriptor_2;
    uint64_t v6 = _Block_copy(v8);
    objc_msgSend(v4, sel_requestAssetsForEmbeddingType_language_withCompletionHandler_, a1, a2, v6);
    _Block_release(v6);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    return (id)OUTLINED_FUNCTION_19_0(v7, 0xD000000000000080);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void specialized Sequence.max(by:)(uint64_t a1)
{
  specialized _NativeDictionary.makeIterator()(&v21, a1);
  uint64_t v1 = v22;
  if (!v25)
  {
    int64_t v18 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      goto LABEL_43;
    }
    int64_t v4 = (unint64_t)(v23 + 64) >> 6;
    if (v18 < v4)
    {
      unint64_t v19 = *(void *)(v22 + 8 * v18);
      int64_t v5 = v24 + 1;
      if (v19)
      {
LABEL_28:
        unint64_t v2 = (v19 - 1) & v19;
        unint64_t v3 = __clz(__rbit64(v19)) + (v5 << 6);
        goto LABEL_3;
      }
      int64_t v5 = v24 + 2;
      if (v24 + 2 < v4)
      {
        unint64_t v19 = *(void *)(v22 + 8 * v5);
        if (v19) {
          goto LABEL_28;
        }
        int64_t v5 = v24 + 3;
        if (v24 + 3 < v4)
        {
          unint64_t v19 = *(void *)(v22 + 8 * v5);
          if (v19) {
            goto LABEL_28;
          }
          int64_t v5 = v24 + 4;
          if (v24 + 4 < v4)
          {
            unint64_t v19 = *(void *)(v22 + 8 * v5);
            if (v19) {
              goto LABEL_28;
            }
            int64_t v5 = v24 + 5;
            if (v24 + 5 < v4)
            {
              unint64_t v19 = *(void *)(v22 + 8 * v5);
              if (!v19)
              {
                int64_t v20 = v24 + 6;
                do
                {
                  if (v20 >= v4) {
                    goto LABEL_41;
                  }
                  unint64_t v19 = *(void *)(v22 + 8 * v20++);
                }
                while (!v19);
                int64_t v5 = v20 - 1;
              }
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRetain();
    outlined release of _NativeDictionary<NLLanguage, Int>.Iterator((uint64_t)&v21);
    return;
  }
  unint64_t v2 = (v25 - 1) & v25;
  unint64_t v3 = __clz(__rbit64(v25)) | (v24 << 6);
  int64_t v4 = (unint64_t)(v23 + 64) >> 6;
  int64_t v5 = v24;
LABEL_3:
  uint64_t v6 = v21;
  uint64_t v7 = *(void **)(*(void *)(v21 + 48) + 8 * v3);
  uint64_t v8 = *(void *)(*(void *)(v21 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  id v9 = v7;
  while (1)
  {
    if (v2)
    {
      unint64_t v10 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      unint64_t v11 = v10 | (v5 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v12 >= v4) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v1 + 8 * v12);
    int64_t v14 = v5 + 1;
    if (!v13)
    {
      int64_t v14 = v5 + 2;
      if (v5 + 2 >= v4) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v1 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v5 + 3;
        if (v5 + 3 >= v4) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v1 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v5 + 4;
          if (v5 + 4 >= v4) {
            goto LABEL_24;
          }
          unint64_t v13 = *(void *)(v1 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v5 + 5;
            if (v5 + 5 >= v4) {
              goto LABEL_24;
            }
            unint64_t v13 = *(void *)(v1 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v5 + 6;
              while (v15 < v4)
              {
                unint64_t v13 = *(void *)(v1 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_24:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v2 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v5 = v14;
LABEL_22:
    uint64_t v16 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    if (v8 < v16)
    {
      id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v11);

      id v9 = v17;
      uint64_t v8 = v16;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type NLLanguage and conformance NLLanguage()
{
  unint64_t result = lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage;
  if (!lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage)
  {
    type metadata accessor for NLLanguage(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage);
  }
  return result;
}

uint64_t outlined release of _NativeDictionary<NLLanguage, Int>.Iterator(uint64_t a1)
{
  return a1;
}

id specialized binaryDo<A, B, C>(_:_:_:)(id a1, char a2, id a3, char a4, uint64_t a5, uint64_t *a6)
{
  id v7 = a1;
  if (a2)
  {
    id v10 = a1;
    swift_bridgeObjectRelease();
  }
  else if (a4)
  {
    id v11 = a3;
    swift_bridgeObjectRelease();
    return a3;
  }
  else
  {
    id v13 = a3;
    id v14 = a1;
    outlined copy of Result<_DataTable, Error>(a3, 0);
    outlined copy of Result<_DataTable, Error>(v7, 0);
    closure #1 in MLDataTable.join(with:on:type:)((uint64_t *)&v14, (uint64_t *)&v13, a5, a6, &v15);
    outlined consume of Result<_DataTable, Error>(a3, 0);
    outlined consume of Result<_DataTable, Error>(v7, 0);
    swift_bridgeObjectRelease();
    return (id)v15;
  }
  return v7;
}

uint64_t MLDataTable.init(contentsOf:options:)@<X0>(char *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v109 = a3;
  uint64_t v5 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v108 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  id v107 = (void (*)(void))((char *)&v106 - v12);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)&v106 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x270FA5388](v15 - 8);
  id v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v111 = v19;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v117 = (char *)&v106 - v22;
  memcpy(__dst, a2, 0x90uLL);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    outlined release of MLDataTable.ParsingOptions((uint64_t)__dst);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v37 = swift_allocError();
    *uint64_t v38 = 0xD00000000000002ALL;
    v38[1] = 0x80000002272D5B50;
    OUTLINED_FUNCTION_4_3(v37, (uint64_t)v38);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(a1, v5);
  }
  uint64_t v106 = v7;
  uint64_t v110 = v5;
  URL.pathExtension.getter();
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18) != 1)
  {
    uint64_t v40 = v111;
    (*(void (**)(void))(v111 + 32))();
    static UTType.commaSeparatedText.getter();
    char v41 = UTType.conforms(to:)();
    uint64_t v42 = *(void (**)(void))(v40 + 8);
    OUTLINED_FUNCTION_38_0();
    v42();
    if (v41)
    {
      type metadata accessor for CMLTable();
      URL.path.getter();
      OUTLINED_FUNCTION_10_6();
      MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(&v114);
      outlined init with take of MLDataTable.ParsingOptions?((uint64_t)&v114, (uint64_t)v113);
      uint64_t v43 = OUTLINED_FUNCTION_13_5();
      uint64_t v44 = v112;
      uint64_t v48 = CMLTable.__allocating_init(from:isCSV:options:)(v43, v45, v46, v47);
      if (v44)
      {
        uint64_t v49 = OUTLINED_FUNCTION_6_10();
        v50(v49);
LABEL_39:
        OUTLINED_FUNCTION_38_0();
        return ((uint64_t (*)(void))v42)();
      }
      uint64_t v87 = v48;
      uint64_t v88 = OUTLINED_FUNCTION_6_10();
      v89(v88);
    }
    else
    {
      static UTType.plainText.getter();
      char v67 = UTType.conforms(to:)();
      OUTLINED_FUNCTION_38_0();
      v42();
      if (v67)
      {
        type metadata accessor for CMLTable();
        URL.path.getter();
        OUTLINED_FUNCTION_10_6();
        MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(&v114);
        outlined init with take of MLDataTable.ParsingOptions?((uint64_t)&v114, (uint64_t)v113);
        uint64_t v68 = OUTLINED_FUNCTION_13_5();
      }
      else
      {
        outlined release of MLDataTable.ParsingOptions((uint64_t)__dst);
        static UTType.json.getter();
        char v78 = UTType.conforms(to:)();
        OUTLINED_FUNCTION_38_0();
        v42();
        if ((v78 & 1) == 0)
        {
          OUTLINED_FUNCTION_14_6();
          OUTLINED_FUNCTION_2_13();
          v92._uint64_t countAndFlagsBits = URL.pathExtension.getter();
          String.append(_:)(v92);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_9_6((uint64_t)"' must be a file of type CSV or JSON or a path to a folder containing a DataTab"
                                         "le binary representation.");
          uint64_t v94 = v114;
          uint64_t v93 = v115;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
          uint64_t v95 = swift_allocObject();
          *(_OWORD *)(v95 + 16) = xmmword_2272CB370;
          *(void *)(v95 + 56) = MEMORY[0x263F8D310];
          *(void *)(v95 + 32) = v94;
          *(void *)(v95 + 40) = v93;
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_11_6();
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          uint64_t v96 = swift_allocError();
          uint64_t *v97 = v94;
          v97[1] = v93;
          OUTLINED_FUNCTION_4_3(v96, (uint64_t)v97);
          uint64_t v98 = OUTLINED_FUNCTION_1_14();
          v99(v98);
          goto LABEL_39;
        }
        type metadata accessor for CMLTable();
        uint64_t v79 = URL.path.getter();
        uint64_t v81 = v80;
        _s8CreateML11MLDataTableV14ParsingOptionsVSgWOi0_(&v114);
        outlined init with take of MLDataTable.ParsingOptions?((uint64_t)&v114, (uint64_t)v113);
        uint64_t v71 = v113;
        uint64_t v68 = v79;
        uint64_t v69 = v81;
        int v70 = 0;
      }
      uint64_t v82 = v112;
      uint64_t v83 = CMLTable.__allocating_init(from:isCSV:options:)(v68, v69, v70, (uint64_t)v71);
      if (v82)
      {
        uint64_t v84 = OUTLINED_FUNCTION_1_14();
        v85(v84);
        goto LABEL_39;
      }
      uint64_t v87 = v83;
      uint64_t v90 = OUTLINED_FUNCTION_1_14();
      v91(v90);
    }
    OUTLINED_FUNCTION_38_0();
    v42();
LABEL_45:
    uint64_t v101 = v109;
    type metadata accessor for _DataTable();
    swift_allocObject();
    uint64_t result = (uint64_t)_DataTable.init(impl:)(v87);
    *(void *)uint64_t v101 = result;
    *(unsigned char *)(v101 + 8) = 0;
    return result;
  }
  outlined release of MLDataTable.ParsingOptions((uint64_t)__dst);
  outlined destroy of UTType?((uint64_t)v17);
  OUTLINED_FUNCTION_4_11();
  char v23 = URL.hasDirectoryPath.getter();
  uint64_t v24 = v106;
  uint64_t v25 = v106 + 8;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v106 + 8);
  uint64_t v27 = v110;
  v26(v14, v110);
  if ((v23 & 1) == 0)
  {
    id v107 = (void (*)(void))v26;
    uint64_t v111 = v25;
    char v51 = URL.hasDirectoryPath.getter();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    uint64_t v53 = v108;
    uint64_t v117 = a1;
    v52(v108, a1, v27);
    if (v51)
    {
      id v54 = objc_msgSend(self, sel_defaultManager);
      URL.appendingPathComponent(_:)();
      uint64_t v55 = URL.path.getter();
      uint64_t v57 = v56;
      uint64_t v58 = v107;
      OUTLINED_FUNCTION_24_5();
      v58();
      uint64_t v59 = (void *)MEMORY[0x22A674AE0](v55, v57);
      swift_bridgeObjectRelease();
      LOBYTE(v57) = objc_msgSend(v54, sel_fileExistsAtPath_, v59);

      OUTLINED_FUNCTION_24_5();
      v58();
      if (v57)
      {
        uint64_t v60 = URL.path.getter();
        uint64_t v62 = v61;
        if ((v61 & 0x1000000000000000) != 0 || !(v61 & 0x2000000000000000 | v60 & 0x1000000000000000))
        {
          uint64_t v105 = v112;
          _StringGuts._slowWithCString<A>(_:)();
          if (v105)
          {
            swift_bridgeObjectRelease();
            uint64_t v58 = v107;
            goto LABEL_28;
          }
          swift_bridgeObjectRelease();
          uint64_t v58 = v107;
        }
        else
        {
          MEMORY[0x270FA5388](v60);
          *(&v106 - 2) = (uint64_t)closure #1 in CMLTable.init(from:);
          *(&v106 - 1) = 0;
          if ((v62 & 0x2000000000000000) != 0)
          {
            uint64_t v114 = v63;
            uint64_t v115 = v62 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v102 = v112;
            uint64_t result = specialized handling<A, B>(_:_:)(&v114);
            if (v102)
            {
LABEL_47:
              swift_bridgeObjectRelease();
              goto LABEL_28;
            }
            if (!result) {
              goto LABEL_60;
            }
          }
          else
          {
            if ((v63 & 0x1000000000000000) != 0)
            {
              uint64_t v64 = (v62 & 0xFFFFFFFFFFFFFFFLL) + 32;
              uint64_t v65 = v63 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v64 = _StringObject.sharedUTF8.getter();
            }
            uint64_t v66 = v112;
            uint64_t result = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v64, v65, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
            if (v66) {
              goto LABEL_47;
            }
          }
          v113[0] = result;
          swift_bridgeObjectRelease();
        }
        uint64_t v103 = v113[0];
        type metadata accessor for CMLTable();
        uint64_t v87 = swift_allocObject();
        *(void *)(v87 + 16) = v103;
        OUTLINED_FUNCTION_24_5();
        v58();
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v58 = v107;
      ((void (*)(char *, uint64_t))v107)(v53, v27);
    }
    OUTLINED_FUNCTION_14_6();
    OUTLINED_FUNCTION_2_13();
    v72._uint64_t countAndFlagsBits = URL.pathExtension.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_6((uint64_t)"' must be a file of type CSV or JSON or a path to a folder containing a DataTable bin"
                                   "ary representation.");
    uint64_t v74 = v114;
    uint64_t v73 = v115;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_2272CB370;
    *(void *)(v75 + 56) = MEMORY[0x263F8D310];
    *(void *)(v75 + 32) = v74;
    *(void *)(v75 + 40) = v73;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_11_6();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v76 = swift_allocError();
    *uint64_t v77 = v74;
    v77[1] = v73;
    OUTLINED_FUNCTION_4_3(v76, (uint64_t)v77);
LABEL_28:
    OUTLINED_FUNCTION_24_5();
    return ((uint64_t (*)(void))v58)();
  }
  uint64_t v28 = v107;
  OUTLINED_FUNCTION_4_11();
  uint64_t v29 = URL.path.getter();
  uint64_t v31 = v30;
  uint64_t v32 = ((uint64_t (*)(void (*)(void), uint64_t))v26)(v28, v27);
  if ((v31 & 0x1000000000000000) != 0 || !(v31 & 0x2000000000000000 | v29 & 0x1000000000000000))
  {
    uint64_t v104 = v112;
    _StringGuts._slowWithCString<A>(_:)();
    if (!v104)
    {
LABEL_41:
      swift_bridgeObjectRelease();
LABEL_44:
      uint64_t v100 = v113[0];
      type metadata accessor for CMLTable();
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = v100;
      v26(a1, v110);
      goto LABEL_45;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_38_0();
    return ((uint64_t (*)(void))v26)();
  }
  MEMORY[0x270FA5388](v32);
  *(&v106 - 2) = (uint64_t)closure #1 in CMLTable.init(from:);
  *(&v106 - 1) = 0;
  if ((v31 & 0x2000000000000000) == 0)
  {
    if ((v29 & 0x1000000000000000) != 0)
    {
      uint64_t v33 = (v31 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v34 = v29 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v33 = _StringObject.sharedUTF8.getter();
    }
    uint64_t v35 = v112;
    uint64_t v36 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v33, v34, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    if (v35) {
      goto LABEL_34;
    }
    v113[0] = v36;
    goto LABEL_41;
  }
  uint64_t v114 = v29;
  uint64_t v115 = v31 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v86 = v112;
  uint64_t result = specialized handling<A, B>(_:_:)(&v114);
  if (v86) {
    goto LABEL_34;
  }
  if (result)
  {
    v113[0] = result;
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

__n128 MLDataTable.ParsingOptions.init(containsHeader:delimiter:comment:escape:doubleQuote:quote:skipInitialSpaces:missingValues:lineTerminator:selectColumns:maxRows:skipRows:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, long long a13, __n128 a14, uint64_t a15, char a16, uint64_t a17)
{
  __n128 result = a14;
  *(unsigned char *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(unsigned char *)(a9 + 80) = a12;
  *(_OWORD *)(a9 + 88) = a13;
  *(__n128 *)(a9 + 104) = a14;
  *(void *)(a9 + 120) = a15;
  *(unsigned char *)(a9 + 128) = a16 & 1;
  *(void *)(a9 + 136) = a17 & ~(a17 >> 63);
  return result;
}

uint64_t MLDataTable.ParsingOptions.containsHeader.getter()
{
  return *v0;
}

uint64_t MLDataTable.ParsingOptions.containsHeader.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.containsHeader.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.delimiter.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLDataTable.ParsingOptions.delimiter.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v0;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.delimiter.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.comment.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLDataTable.ParsingOptions.comment.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.comment.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.escape.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLDataTable.ParsingOptions.escape.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.escape.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.doubleQuote.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t MLDataTable.ParsingOptions.doubleQuote.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.doubleQuote.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.quote.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLDataTable.ParsingOptions.quote.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.quote.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.skipInitialSpaces.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t MLDataTable.ParsingOptions.skipInitialSpaces.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.skipInitialSpaces.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.missingValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLDataTable.ParsingOptions.missingValues.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.missingValues.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.lineTerminator.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLDataTable.ParsingOptions.lineTerminator.setter()
{
  OUTLINED_FUNCTION_7_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v0;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.lineTerminator.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.selectColumns.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLDataTable.ParsingOptions.selectColumns.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = a1;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.selectColumns.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.maxRows.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t MLDataTable.ParsingOptions.maxRows.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 120) = result;
  *(unsigned char *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.maxRows.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.skipRows.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t MLDataTable.ParsingOptions.skipRows.setter(uint64_t result)
{
  *(void *)(v1 + 136) = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.skipRows.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

void *specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, void *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t outlined release of MLDataTable.ParsingOptions(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of UTType?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0@<X0>(void *a1@<X8>)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

void _s8CreateML11MLDataTableV14ParsingOptionsVSgWOi0_(void *a1)
{
}

uint64_t outlined init with take of MLDataTable.ParsingOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataTable.ParsingOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for MLDataTable.ParsingOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

void *__swift_memcpy144_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

uint64_t assignWithTake for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.ParsingOptions(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 144))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDataTable.ParsingOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.ParsingOptions()
{
  return &type metadata for MLDataTable.ParsingOptions;
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return v0;
}

void OUTLINED_FUNCTION_2_13()
{
  uint64_t v2 = *(void *)(v0 + 208);
  *(void *)(v0 + 200) = *(void *)(v0 + 200);
  *(void *)(v0 + 208) = v2;
  uint64_t v3 = 0x7420666F204C5255;
  unint64_t v4 = 0xED00002720657079;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return v0;
}

void OUTLINED_FUNCTION_9_6(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000068;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

void *OUTLINED_FUNCTION_10_6()
{
  return memcpy((void *)(v0 + 200), (const void *)(v1 - 232), 0x90uLL);
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  return print(_:separator:terminator:)();
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return v0;
}

void OUTLINED_FUNCTION_14_6()
{
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = 0xE000000000000000;
  _StringGuts.grow(_:)(119);
}

uint64_t CMLParameters.add(key:column:)(char a1, uint64_t a2)
{
  return CMLParameters.add(key:column:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  unint64_t v4 = CMLParameters.Key.rawValue.getter(a1);
  uint64_t v6 = v5;
  swift_retain();
  swift_retain();
  specialized String.withCString<A>(_:)(v4, v6, v2, a2);
  return swift_bridgeObjectRelease();
}

uint64_t CMLFeatureValue.__allocating_init(_:)(uint64_t a1)
{
  return CMLFeatureValue.__allocating_init(_:)(a1, (uint64_t (*)(void))specialized handling<A, B>(_:_:));
}

{
  return CMLFeatureValue.__allocating_init(_:)(a1, (uint64_t (*)(void))specialized handling<A, B>(_:_:));
}

{
  return CMLFeatureValue.__allocating_init(_:)(a1, (uint64_t (*)(void))specialized handling<A, B>(_:_:));
}

uint64_t CMLParameters.add(key:featureValue:)(char a1, uint64_t a2)
{
  uint64_t v4 = CMLParameters.Key.rawValue.getter(a1);
  uint64_t v6 = v5;
  swift_retain();
  swift_retain();
  specialized String.withCString<A>(_:)(v4, v6, v2, a2);
  return swift_bridgeObjectRelease();
}

uint64_t CMLFeatureValue.__allocating_init(_:)()
{
  uint64_t v1 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = specialized handling<A, B>(_:_:)(v1 + 32);
  uint64_t result = swift_release();
  if (!v0)
  {
    if (v2)
    {
      uint64_t v4 = OUTLINED_FUNCTION_6_3();
      *(void *)(v4 + 16) = v2;
      return OUTLINED_FUNCTION_5_11(v4);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void *CMLModel.callFunction(name:arguments:)(char a1, uint64_t a2)
{
  unint64_t v4 = MethodName.rawValue.getter(a1);
  uint64_t v9 = v2;
  uint64_t v10 = a2;
  uint64_t v6 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLModel.callFunction(name:arguments:), (uint64_t)&v8, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

void CMLVariant.featureValue()()
{
  specialized handling<A, B>(_:_:)(*(void *)(v0 + 16));
  OUTLINED_FUNCTION_18_6();
  if (!v1)
  {
    if (v0)
    {
      type metadata accessor for CMLFeatureValue();
      uint64_t v2 = OUTLINED_FUNCTION_6_3();
      OUTLINED_FUNCTION_0_9(v2);
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLFeatureValue.stringValue()()
{
  uint64_t v2 = specialized handling<A, B>(_:_:)(*(void *)(v0 + 16));
  if (!v1)
  {
    if (v2) {
      uint64_t v2 = String.init(cString:)();
    }
    else {
      __break(1u);
    }
  }
  result._id object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t CMLSequence.append(_:)(uint64_t a1)
{
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(v1 + 16), *(void *)(a1 + 16));
  if (!v2 && result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t CMLTable.__allocating_init(from:isCSV:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  HIDWORD(v93) = a3;
  outlined init with take of MLDataTable.ParsingOptions?(a4, (uint64_t)v194);
  uint64_t v7 = MEMORY[0x22A676420](0);
  if (!v7)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v8 = v7;
  type metadata accessor for CMLParameters();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v8;
  specialized handling<A, B>(_:_:)(0, v10, v11, v12, v13, v14, v15, v16, v84, v89, v93, a1, v103, v108, v113, v118, v123, v128, v133,
    v138,
    v143,
    v148,
    v153,
    v158,
    v163,
    v168,
    v173,
    v178,
    v183,
    v184);
  if (v5) {
    goto LABEL_46;
  }
  uint64_t v18 = v17;
  if (!v17) {
    goto LABEL_39;
  }
  type metadata accessor for CMLFeatureValue();
  uint64_t v19 = swift_initStackObject();
  *(void *)(v19 + 16) = v18;
  OUTLINED_FUNCTION_5_11(v19);
  OUTLINED_FUNCTION_9_7(9);
  OUTLINED_FUNCTION_22_8();
  swift_release();
  outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v194, (uint64_t)v193);
  uint64_t ML11MLDataTableV14ParsingOptionsVSgWOg = _s8CreateML11MLDataTableV14ParsingOptionsVSgWOg((uint64_t)v193);
  if (ML11MLDataTableV14ParsingOptionsVSgWOg == 1) {
    goto LABEL_18;
  }
  specialized handling<A, B>(_:_:)(v193[0], v21, v22, v23, v24, v25, v26, v27, v85, v4, v94, v99, v104, v109, v114, v119, v124, v129, v134,
    v139,
    v144,
    v149,
    v154,
    v159,
    v164,
    v169,
    v174,
    v179,
    v183,
    v184);
  if (v4) {
    goto LABEL_46;
  }
  if (!v28) {
    goto LABEL_40;
  }
  uint64_t v29 = swift_initStackObject();
  OUTLINED_FUNCTION_0_9(v29);
  OUTLINED_FUNCTION_9_7(10);
  OUTLINED_FUNCTION_11_7();
  swift_release();
  outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v194, (uint64_t)&v183);
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_21_6();
  OUTLINED_FUNCTION_10_7(11);
  OUTLINED_FUNCTION_11_7();
  swift_release();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_21_6();
  OUTLINED_FUNCTION_10_7(12);
  OUTLINED_FUNCTION_11_7();
  swift_release();
  uint64_t v30 = v185;
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_21_6();
  OUTLINED_FUNCTION_10_7(13);
  OUTLINED_FUNCTION_22_8();
  swift_release();
  specialized handling<A, B>(_:_:)(v186, v31, v32, v33, v34, v35, v36, v37, v86, v90, v95, v100, v105, v110, v115, v120, v125, v130, v135,
    v140,
    v145,
    v150,
    v155,
    v160,
    v165,
    v170,
    v175,
    v180,
    v183,
    v184);
  if (v30) {
    goto LABEL_46;
  }
  if (!v38)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v39 = swift_initStackObject();
  OUTLINED_FUNCTION_0_9(v39);
  OUTLINED_FUNCTION_9_7(14);
  OUTLINED_FUNCTION_11_7();
  swift_release();
  uint64_t v40 = v187;
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_21_6();
  OUTLINED_FUNCTION_10_7(15);
  OUTLINED_FUNCTION_22_8();
  swift_release();
  specialized handling<A, B>(_:_:)(v188, v41, v42, v43, v44, v45, v46, v47, v87, v91, v96, v101, v106, v111, v116, v121, v126, v131, v136,
    v141,
    v146,
    v151,
    v156,
    v161,
    v166,
    v171,
    v176,
    v181,
    v183,
    v184);
  if (!v40)
  {
    if (v48)
    {
      uint64_t v49 = swift_initStackObject();
      OUTLINED_FUNCTION_0_9(v49);
      OUTLINED_FUNCTION_9_7(16);
      OUTLINED_FUNCTION_11_7();
      swift_release();
      uint64_t v50 = swift_bridgeObjectRetain();
      specialized Array<A>.featureSequence.getter(v50);
      CMLFeatureValue.__allocating_init(_:)(v51, (uint64_t (*)(void))specialized handling<A, B>(_:_:));
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_7(17);
      OUTLINED_FUNCTION_11_7();
      swift_release();
      OUTLINED_FUNCTION_23_3();
      OUTLINED_FUNCTION_8_8();
      OUTLINED_FUNCTION_21_6();
      OUTLINED_FUNCTION_10_7(18);
      OUTLINED_FUNCTION_11_7();
      swift_release();
      if (v189)
      {
        uint64_t v59 = swift_bridgeObjectRetain();
        specialized Array<A>.featureSequence.getter(v59);
        uint64_t v61 = CMLFeatureValue.__allocating_init(_:)(v60, (uint64_t (*)(void))specialized handling<A, B>(_:_:));
        swift_bridgeObjectRelease();
        CMLParameters.add(key:featureValue:)(19, v61);
        swift_release();
      }
      if ((v191 & 1) == 0)
      {
        specialized handling<A, B>(_:_:)(v190, v52, v53, v54, v55, v56, v57, v58, v88, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137,
          v142,
          v147,
          v152,
          v157,
          v162,
          v167,
          v172,
          v177,
          v182,
          v183,
          v184);
        if (!v62)
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        uint64_t v63 = swift_initStackObject();
        OUTLINED_FUNCTION_0_9(v63);
        OUTLINED_FUNCTION_9_7(20);
        OUTLINED_FUNCTION_11_7();
        swift_release();
      }
      outlined release of MLDataTable.ParsingOptions?(v194);
      specialized handling<A, B>(_:_:)(v192, v64, v65, v66, v67, v68, v69, v70, v88, v92, v97, v102, v107, v112, v117, v122, v127, v132, v137,
        v142,
        v147,
        v152,
        v157,
        v162,
        v167,
        v172,
        v177,
        v182,
        v183,
        v184);
      uint64_t v4 = v71;
      if (v71)
      {
        uint64_t v72 = swift_initStackObject();
        OUTLINED_FUNCTION_0_9(v72);
        OUTLINED_FUNCTION_9_7(21);
        OUTLINED_FUNCTION_22_8();
        uint64_t ML11MLDataTableV14ParsingOptionsVSgWOg = swift_release();
LABEL_18:
        uint64_t v73 = MEMORY[0x270FA5388](ML11MLDataTableV14ParsingOptionsVSgWOg);
        if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | v74 & 0x1000000000000000))
        {
          _StringGuts._slowWithCString<A>(_:)();
          if (v4) {
            goto LABEL_30;
          }
          swift_bridgeObjectRelease();
          uint64_t v81 = v194[20];
LABEL_34:
          swift_setDeallocating();
          tc_v1_release();
          uint64_t result = OUTLINED_FUNCTION_70();
          *(void *)(result + 16) = v81;
          return result;
        }
        MEMORY[0x270FA5388](v73);
        if ((a2 & 0x2000000000000000) == 0)
        {
          if ((v75 & 0x1000000000000000) != 0)
          {
            uint64_t v77 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
            uint64_t v78 = v75 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v77 = _StringObject.sharedUTF8.getter();
          }
          uint64_t v79 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v77, v78, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
          if (v4) {
            goto LABEL_30;
          }
          uint64_t v81 = v79;
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        uint64_t v183 = v75;
        uint64_t v184 = a2 & 0xFFFFFFFFFFFFFFLL;
        if (v76)
        {
          uint64_t v80 = specialized handling<A, B, C>(_:_:_:)(&v183, *(void *)(inited + 16));
          if (v4)
          {
LABEL_30:
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            return tc_v1_release();
          }
          uint64_t v81 = v80;
          if (v80) {
            goto LABEL_33;
          }
          __break(1u);
        }
        uint64_t v82 = specialized handling<A, B>(_:_:)(&v183);
        if (v4) {
          goto LABEL_30;
        }
        uint64_t v81 = v82;
        if (v82)
        {
LABEL_33:
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        goto LABEL_45;
      }
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_46:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t __CMLFeatureValueType.init(rawValue:)(unint64_t a1)
{
  if (a1 > 9) {
    return 8;
  }
  else {
    return byte_2272CCB5E[a1];
  }
}

unint64_t CMLFeatureValueType.init(_:)(char a1)
{
  return 0x605050403020100uLL >> (8 * a1);
}

unint64_t CMLFeatureValueType.rawValue.getter(char a1)
{
  return 0x7050403020100uLL >> (8 * a1);
}

uint64_t CMLFeatureValue.deinit()
{
  if (*(unsigned char *)(v0 + 24) == 1) {
    tc_v1_release();
  }
  return v0;
}

uint64_t CMLFeatureValue.__deallocating_deinit()
{
  CMLFeatureValue.deinit();
  OUTLINED_FUNCTION_24_7();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CMLFeatureValue()
{
  return self;
}

uint64_t CMLFeatureValue.init(rawValue:ownsValue:)(uint64_t a1, char a2)
{
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2;
  return v2;
}

uint64_t CMLFeatureValue.releaseRawValue()()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result)
  {
    *(void *)(v0 + 16) = 0;
    *(unsigned char *)(v0 + 24) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CMLFeatureValue.__allocating_init()()
{
  uint64_t result = MEMORY[0x22A676380](0);
  if (result)
  {
    uint64_t v1 = result;
    OUTLINED_FUNCTION_24_7();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v1;
    return OUTLINED_FUNCTION_5_11(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CMLFeatureValue.__allocating_init(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(*(void *)(a1 + 16));
  if (v2) {
    return swift_release();
  }
  uint64_t v4 = result;
  if (result)
  {
    swift_release();
    uint64_t v5 = OUTLINED_FUNCTION_6_3();
    *(void *)(v5 + 16) = v4;
    return OUTLINED_FUNCTION_5_11(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t CMLFeatureValue.type.getter()
{
  unint64_t v0 = tc_v1_ft_type();
  unint64_t result = __CMLFeatureValueType.init(rawValue:)(v0);
  if (result == 8)
  {
    __break(1u);
  }
  else
  {
    return CMLFeatureValueType.init(_:)(result);
  }
  return result;
}

uint64_t CMLFeatureValue.isInt64.getter()
{
  return tc_v1_ft_is_int64();
}

uint64_t CMLFeatureValue.isDouble.getter()
{
  return tc_v1_ft_is_double();
}

uint64_t CMLFeatureValue.isUndefined.getter()
{
  return tc_v1_ft_is_undefined();
}

uint64_t type metadata accessor for CMLSequence()
{
  return self;
}

void CMLSequence.value(at:)(uint64_t a1)
{
  if (a1 < 0) {
    goto LABEL_7;
  }
  specialized handling<A, B, C>(_:_:_:)(*(void *)(v1 + 16), a1);
  OUTLINED_FUNCTION_18_6();
  if (v2) {
    return;
  }
  if (!v1)
  {
    __break(1u);
LABEL_7:
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_1_15();
    __break(1u);
    return;
  }
  type metadata accessor for CMLFeatureValue();
  uint64_t v3 = OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_0_9(v3);
}

uint64_t CMLSequence.size.getter()
{
  return CMLSequence.size.getter();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t result;

  unint64_t v0 = OUTLINED_FUNCTION_29_4();
  unint64_t result = v1(v0);
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CMLFVTypeSequence()
{
  return self;
}

#error "2270CBE58: call analysis failed (funcsize=19)"

uint64_t type metadata accessor for CMLDictionary()
{
  return self;
}

uint64_t CMLDictionary.size.getter()
{
  return CMLSequence.size.getter();
}

#error "2270CBF1C: call analysis failed (funcsize=42)"

#error "2270CBFB0: call analysis failed (funcsize=44)"

uint64_t type metadata accessor for CMLMultiArray()
{
  return self;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLMultiArray.dimensions()()
{
  return CMLMultiArray.dimensions()();
}

uint64_t CMLMultiArray.shape()()
{
  return CMLMultiArray.shape()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t result;

  uint64_t v1 = OUTLINED_FUNCTION_29_4();
  unint64_t result = v2(v1);
  if (!v0 && !result) {
    __break(1u);
  }
  return result;
}

uint64_t CMLMultiArray.strides()()
{
  return CMLMultiArray.shape()();
}

uint64_t CMLMultiArray.data()()
{
  return CMLMultiArray.shape()();
}

uint64_t type metadata accessor for CMLColumn()
{
  return self;
}

#error "2270CC154: call analysis failed (funcsize=27)"

uint64_t CMLColumn.__allocating_init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = specialized handling<A, B, C>(_:_:_:)(*(void *)(a1 + 16));
    if (v2) {
      return swift_release();
    }
    uint64_t v5 = v3;
    if (v3)
    {
      swift_release();
      uint64_t result = OUTLINED_FUNCTION_70();
      *(void *)(result + 16) = v5;
      return result;
    }
    __break(1u);
  }
  OUTLINED_FUNCTION_2_14();
  uint64_t result = OUTLINED_FUNCTION_1_15();
  __break(1u);
  return result;
}

uint64_t CMLColumn.__allocating_init(_:type:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (CMLSequence.size.getter())
  {
    uint64_t v13 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
    if (!v2)
    {
      uint64_t v14 = v13;
      if (v13)
      {
        swift_release();
        uint64_t result = OUTLINED_FUNCTION_70();
        *(void *)(result + 16) = v14;
        return result;
      }
      __break(1u);
      goto LABEL_33;
    }
    return swift_release();
  }
  else
  {
    switch(a2)
    {
      case 1:
        specialized handling<A, B>(_:_:)(0, v6, v7, v8, v9, v10, v11, v12, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
          v45,
          v46,
          v47,
          v48,
          v49,
          v50,
          v51,
          v52,
          v53,
          v54,
          v55);
        if (v2) {
          return swift_release();
        }
        if (v24) {
          goto LABEL_17;
        }
        goto LABEL_38;
      case 2:
        type metadata accessor for CMLFeatureValue();
        uint64_t v21 = CMLFeatureValue.__allocating_init(_:)();
        goto LABEL_23;
      case 3:
        if (!MEMORY[0x22A676370](0)) {
          goto LABEL_35;
        }
        type metadata accessor for CMLFeatureValue();
        type metadata accessor for CMLSequence();
        uint64_t inited = swift_initStackObject();
        uint64_t v19 = OUTLINED_FUNCTION_0_9(inited);
        uint64_t v20 = specialized handling<A, B>(_:_:);
        goto LABEL_14;
      case 4:
        goto LABEL_9;
      case 5:
        type metadata accessor for CMLFeatureValue();
        uint64_t v21 = CMLFeatureValue.__allocating_init()();
        goto LABEL_25;
      case 6:
        specialized handling<A, B, C, D, E>(_:_:_:_:_:)(1, (uint64_t)&unk_26DB3E3A0, (uint64_t)&unk_26DB3E3C8, (uint64_t)&unk_26DB3E3F0, v9, v10, v11, v12, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
          v45,
          v46,
          v47,
          v48,
          v49,
          v50,
          v51,
          v52,
          v53,
          v54,
          v55);
        if (v2) {
          goto LABEL_40;
        }
        uint64_t v27 = v26;
        if (!v26) {
          goto LABEL_36;
        }
        type metadata accessor for CMLMultiArray();
        uint64_t v28 = swift_initStackObject();
        *(void *)(v28 + 16) = v27;
        type metadata accessor for CMLFeatureValue();
        uint64_t v23 = specialized handling<A, B>(_:_:);
        uint64_t v19 = v28;
        goto LABEL_22;
      default:
        specialized handling<A, B>(_:_:)(0, v6, v7, v8, v9, v10, v11, v12, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
          v45,
          v46,
          v47,
          v48,
          v49,
          v50,
          v51,
          v52,
          v53,
          v54,
          v55);
        if (v2) {
          return swift_release();
        }
        if (v16)
        {
LABEL_17:
          type metadata accessor for CMLFeatureValue();
          uint64_t v25 = OUTLINED_FUNCTION_6_3();
          OUTLINED_FUNCTION_0_9(v25);
        }
        else
        {
          __break(1u);
LABEL_9:
          uint64_t v17 = MEMORY[0x22A676330](0);
          if (!v17)
          {
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
          uint64_t v18 = v17;
          type metadata accessor for CMLFeatureValue();
          type metadata accessor for CMLDictionary();
          uint64_t v19 = swift_initStackObject();
          *(void *)(v19 + 16) = v18;
          uint64_t v20 = specialized handling<A, B>(_:_:);
LABEL_14:
          uint64_t v23 = v20;
LABEL_22:
          uint64_t v21 = CMLFeatureValue.__allocating_init(_:)(v19, (uint64_t (*)(void))v23);
LABEL_23:
          uint64_t v3 = v2;
          if (v2) {
            return swift_release();
          }
LABEL_25:
          uint64_t v25 = v21;
        }
        uint64_t v29 = MEMORY[0x22A676370](0);
        if (!v29)
        {
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        uint64_t v30 = v29;
        type metadata accessor for CMLSequence();
        uint64_t v31 = swift_initStackObject();
        *(void *)(v31 + 16) = v30;
        OUTLINED_FUNCTION_5_11(v31);
        CMLSequence.append(_:)(v25);
        if (v3)
        {
          swift_release();
          swift_release();
          swift_setDeallocating();
          CMLFeatureValue.deinit();
          uint64_t result = swift_deallocClassInstance();
        }
        else
        {
          swift_retain();
          uint64_t v32 = specialized handling<A, B>(_:_:)(v30);
          if (!v32)
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            OUTLINED_FUNCTION_7_12();
            swift_unexpectedError();
            __break(1u);
            JUMPOUT(0x2270CC610);
          }
          swift_release();
          *(void *)(swift_initStackObject() + 16) = v32;
          uint64_t v33 = specialized handling<A, B, C>(_:_:_:)(v32, 0);
          if (!v33) {
            goto LABEL_39;
          }
          swift_release();
          swift_release();
          swift_setDeallocating();
          CMLFeatureValue.deinit();
          swift_deallocClassInstance();
          swift_release();
          uint64_t result = OUTLINED_FUNCTION_70();
          *(void *)(result + 16) = v33;
        }
        break;
    }
  }
  return result;
}

uint64_t CMLColumn.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2)
{
  return CMLColumn.__allocating_init(concatenating:and:)(a1, a2, (uint64_t (*)(void, void))specialized handling<A, B, C>(_:_:_:));
}

uint64_t CMLColumn.size.getter()
{
  return CMLSequence.size.getter();
}

unint64_t CMLColumn.type.getter()
{
  unint64_t v0 = tc_v1_sarray_type();
  unint64_t result = __CMLFeatureValueType.init(rawValue:)(v0);
  if (result == 8)
  {
    __break(1u);
  }
  else
  {
    return CMLFeatureValueType.init(_:)(result);
  }
  return result;
}

void CMLColumn.value(at:)(uint64_t a1)
{
  if (a1 < 0) {
    goto LABEL_7;
  }
  specialized handling<A, B, C>(_:_:_:)(*(void *)(v1 + 16), a1);
  OUTLINED_FUNCTION_18_6();
  if (v2) {
    return;
  }
  if (!v1)
  {
    __break(1u);
LABEL_7:
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_1_15();
    __break(1u);
    return;
  }
  type metadata accessor for CMLFeatureValue();
  uint64_t v3 = OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_0_9(v3);
}

#error "2270CC760: call analysis failed (funcsize=7)"

void CMLColumn.sum()()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  uint64_t v2 = OUTLINED_FUNCTION_29_4();
  v3(v2);
  OUTLINED_FUNCTION_18_6();
  if (!v1)
  {
    if (v0)
    {
      type metadata accessor for CMLFeatureValue();
      uint64_t v4 = OUTLINED_FUNCTION_6_3();
      OUTLINED_FUNCTION_0_9(v4);
    }
    else
    {
      __break(1u);
    }
  }
}

void CMLColumn.min()()
{
}

void CMLColumn.max()()
{
}

void CMLColumn.mean()()
{
}

void CMLColumn.stdev()()
{
}

#error "2270CC97C: call analysis failed (funcsize=76)"

uint64_t closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for CMLFeatureValue();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = 0;
  a2();
  swift_release();
  uint64_t v5 = CMLFeatureValue.releaseRawValue()();
  swift_release();
  return v5;
}

uint64_t specialized static UnsafeMutablePointer.allocate(capacity:)(uint64_t result)
{
  if ((unint64_t)(result - 0x800000000000000) >> 60 == 15) {
    return swift_slowAlloc();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CMLTable()
{
  return self;
}

uint64_t closure #1 in CMLTable.init(from:isCSV:options:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a2)
  {
    uint64_t result = specialized handling<A, B, C>(_:_:_:)(a1, *(void *)(a3 + 16));
    if (v4) {
      return result;
    }
    if (result) {
      goto LABEL_7;
    }
    __break(1u);
  }
  uint64_t result = specialized handling<A, B>(_:_:)();
  if (v4) {
    return result;
  }
  if (!result)
  {
    __break(1u);
    return result;
  }
LABEL_7:
  *a4 = result;
  return result;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v6)
    {
LABEL_7:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v11 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v11, v12, (uint64_t (*)(void))partial apply for closure #1 in CMLTable.renameColumn(named:to:));
    if (v6) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v14[0] = a1;
  v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, a5, (uint64_t)v14);
  if (v6)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9 = v8;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v8)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    goto LABEL_13;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v15 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v15, v16, partial apply for closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:));
    if (v8) {
      goto LABEL_7;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v20[0] = a1;
  v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, a5, a6, a7 & 1, a8, (uint64_t)v20);
  if (v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v7)
    {
LABEL_7:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v13 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v13, v14, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:));
    if (v7) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v18[0] = a1;
  v18[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, a5 & 1, a6, a7, (uint64_t)v18);
  if (v8)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v10 = _StringObject.sharedUTF8.getter();
    }
    closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(v10, a3 & 1, a4, a5, a6);
    return swift_release();
  }
  v12[0] = a1;
  v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)((uint64_t)v12, a3 & 1, a4, a5, a6);
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9, uint64_t a10, void (*a11)(void, uint64_t, uint64_t, void *))
{
  uint64_t v13 = v11;
  v28[4] = a3;
  v28[5] = a4;
  v28[6] = a5;
  v28[7] = a6;
  v28[8] = a7;
  if ((a2 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_17_7(), !v23))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v11)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    goto LABEL_13;
  }
  if ((v21 & 0x2000000000000000) == 0)
  {
    if ((v20 & 0x1000000000000000) != 0) {
      uint64_t v24 = OUTLINED_FUNCTION_13_6(v18, v19, v20, v21);
    }
    else {
      uint64_t v24 = OUTLINED_FUNCTION_25_8();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v24, v25, a8);
    if (v11) {
      goto LABEL_7;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v26 = v22;
  v29[3] = v28;
  v29[0] = v20;
  v29[1] = v21 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, v26, a6, a7, (uint64_t)v29, a9, a10, a11);
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void, uint64_t, uint64_t, void *))
{
  uint64_t v10 = v9;
  if ((a2 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_17_7(), !v20))
  {
    OUTLINED_FUNCTION_15_7();
    if (v9)
    {
LABEL_7:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
  if ((v17 & 0x2000000000000000) == 0)
  {
    if ((v16 & 0x1000000000000000) != 0) {
      uint64_t v21 = OUTLINED_FUNCTION_13_6(v14, v15, v16, v17);
    }
    else {
      uint64_t v21 = OUTLINED_FUNCTION_25_8();
    }
    OUTLINED_FUNCTION_26_5(v21, v22);
    if (v9) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v24 = v19;
  uint64_t v25 = v18;
  v26[0] = v16;
  v26[1] = v17 & 0xFFFFFFFFFFFFFFLL;
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, a5, v25, (uint64_t)v26, v24, a9);
  if (v10)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), void (*a7)(void, uint64_t, uint64_t, void *))
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v8 = OUTLINED_FUNCTION_13_6(a1, a2, a1, a2);
    }
    else {
      uint64_t v8 = OUTLINED_FUNCTION_25_8();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v8, v9, a6);
    return swift_release();
  }
  v11[0] = a1;
  v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  a7(*(void *)(a3 + 16), a4, a5, v11);
  return swift_release();
}

uint64_t closure #1 in CMLTable.init(from:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in CMLTable.init(from:)(specialized handling<A, B>(_:_:), a1);
}

#error "2270CD900: call analysis failed (funcsize=18)"

uint64_t CMLTable.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2)
{
  return CMLColumn.__allocating_init(concatenating:and:)(a1, a2, (uint64_t (*)(void, void))specialized handling<A, B, C>(_:_:_:));
}

uint64_t CMLColumn.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  uint64_t result = a3(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (v3)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      swift_release();
      swift_release();
      uint64_t result = OUTLINED_FUNCTION_70();
      *(void *)(result + 16) = v5;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.rows()()
{
  return CMLMultiArray.dimensions()();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.columns()()
{
  return CMLMultiArray.dimensions()();
}

uint64_t CMLMultiArray.dimensions()()
{
  uint64_t v1 = OUTLINED_FUNCTION_29_4();
  uint64_t result = v2(v1);
  if (!v0 && result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t CMLTable.addColumn(name:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  swift_retain();
  return specialized String.withCString<A>(_:)(a1, a2, v3, a3);
}

#error "2270CDAE8: call analysis failed (funcsize=9)"

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.renameColumn(named:to:)(Swift::String named, Swift::String to)
{
  id object = to._object;
  uint64_t countAndFlagsBits = to._countAndFlagsBits;
  uint64_t v5 = named._object;
  uint64_t v6 = named._countAndFlagsBits;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized String.withCString<A>(_:)(v6, (uint64_t)v5, countAndFlagsBits, (uint64_t)object, v2);
}

uint64_t closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a1);
}

uint64_t closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a3, a1);
}

uint64_t closure #1 in CMLTable.column(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_14_7(a1, a2);
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(v3);
  if (!v2)
  {
    if (result)
    {
      type metadata accessor for CMLColumn();
      uint64_t v5 = OUTLINED_FUNCTION_70();
      return OUTLINED_FUNCTION_19_6(v5);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in CMLTable.columnType(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_14_7(a1, a2);
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(v4);
  if (!v3)
  {
    uint64_t result = __CMLFeatureValueType.init(rawValue:)(result);
    if (result == 8)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = CMLFeatureValueType.init(_:)(result);
      unsigned char *v2 = result;
    }
  }
  return result;
}

#error "2270CDC8C: call analysis failed (funcsize=20)"

void CMLTable.row(at:)(uint64_t a1)
{
  if (a1 < 0) {
    goto LABEL_7;
  }
  specialized handling<A, B, C>(_:_:_:)(*(void *)(v1 + 16), a1);
  OUTLINED_FUNCTION_18_6();
  if (v2) {
    return;
  }
  if (!v1)
  {
    __break(1u);
LABEL_7:
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_1_15();
    __break(1u);
    return;
  }
  type metadata accessor for CMLSequence();
  uint64_t v3 = OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_0_9(v3);
}

#error "2270CDD80: call analysis failed (funcsize=49)"

uint64_t closure #1 in CMLTable.save(to:type:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (a2 == 2)
  {
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = "json";
  }
  else if (a2 == 1)
  {
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = "binary";
  }
  else
  {
    if (a2) {
      return result;
    }
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = "csv";
  }
  return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v4, v3, v5, 0);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.description()()
{
  uint64_t v2 = specialized handling<A, B>(_:_:)(*(void *)(v0 + 16));
  if (!v1)
  {
    uint64_t v2 = specialized handling<A, B>(_:_:)(v2);
    if (v2) {
      uint64_t v2 = String.init(cString:)();
    }
    else {
      __break(1u);
    }
  }
  result._id object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

#error "2270CDF88: call analysis failed (funcsize=70)"

uint64_t closure #1 in CMLTable.apply(transform:type:)(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for CMLSequence();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = 0;
  a2();
  swift_release();
  uint64_t v5 = CMLFeatureValue.releaseRawValue()();
  swift_release();
  return v5;
}

uint64_t releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
    swift_arrayDestroy();
    JUMPOUT(0x22A676210);
  }
  return result;
}

uint64_t invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t result, void (**a2)(uint64_t *__return_ptr, uint64_t *))
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    if (result)
    {
      uint64_t v2 = *a2;
      uint64_t v4 = result;
      swift_retain();
      v2(&v3, &v4);
      swift_release();
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t @objc invokeContext #1 (rawInput:context:error:) in CMLTable.apply(transform:type:)(uint64_t a1, void (**a2)(uint64_t *__return_ptr, uint64_t *))
{
  return invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:)(a1, a2);
}

uint64_t @objc releaseContext #1 (context:) in CMLTable.apply(transform:type:)(uint64_t a1)
{
  return releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:)(a1);
}

uint64_t closure #1 in CMLTable.fillMissing(columnNamed:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
  if (!v3)
  {
    if (result)
    {
      type metadata accessor for CMLTable();
      uint64_t v5 = OUTLINED_FUNCTION_70();
      return OUTLINED_FUNCTION_19_6(v5);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t CMLTable.filtered(_:columnName:isExcluding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_4_12();
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = String.utf8CString.getter();
  uint64_t v11 = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, v9, v10 + 32, a4);
  uint64_t result = swift_release();
  if (!v5)
  {
    if (v11)
    {
      uint64_t result = OUTLINED_FUNCTION_70();
      *(void *)(result + 16) = v11;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void *closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return closure #1 in CMLTable.stack(columnName:to:)(a1, a2, a3, a4, (void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in closure #1 in CMLTable.stack(columnName:to:), a5);
}

uint64_t closure #1 in closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(*(void *)(a2 + 16), a3, a1, 0);
  if (!v4)
  {
    uint64_t v7 = result;
    if (result)
    {
      type metadata accessor for CMLTable();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v7;
      *a4 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void *closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return closure #1 in CMLTable.stack(columnName:to:)(a1, a2, a3, a4, (void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:), a5);
}

void *closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *(*a5)(uint64_t *__return_ptr, void *)@<X4>, void *a6@<X8>)
{
  v9[3] = a1;
  CGImageRef v9[2] = a4;
  uint64_t result = specialized String.withCString<A>(_:)(a5, (uint64_t)v9, a2, a3);
  if (!v6) {
    *a6 = result;
  }
  return result;
}

uint64_t closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a3, a1);
  if (!v4)
  {
    uint64_t v7 = result;
    if (result)
    {
      type metadata accessor for CMLTable();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v7;
      *a4 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

#error "2270CE420: call analysis failed (funcsize=37)"

void *closure #1 in CMLTable.unpack(columnName:types:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v8[5] = a4;
  void v8[2] = a2;
  v8[3] = a1;
  v8[4] = a3;
  uint64_t result = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:), (uint64_t)v8, 0, 0xE000000000000000);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

#error "2270CE520: call analysis failed (funcsize=51)"

uint64_t type metadata accessor for CMLVariant()
{
  return self;
}

uint64_t type metadata accessor for CMLParameters()
{
  return self;
}

uint64_t CMLParameters.featureValue(for:)(char a1)
{
  return CMLParameters.featureValue(for:)(a1, (uint64_t)partial apply for closure #1 in CMLParameters.featureValue(for:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized String.withCString<A>(_:));
}

uint64_t closure #1 in CMLParameters.featureValue(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(a2 + 16), a1);
  if (!v3)
  {
    uint64_t v6 = result;
    if (result)
    {
      type metadata accessor for CMLFeatureValue();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v6;
      *(unsigned char *)(result + 24) = 1;
      *a3 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t CMLParameters.table(for:)(char a1)
{
  return CMLParameters.featureValue(for:)(a1, (uint64_t)partial apply for closure #1 in CMLParameters.table(for:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized String.withCString<A>(_:));
}

uint64_t CMLParameters.featureValue(for:)(char a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = CMLParameters.Key.rawValue.getter(a1);
  uint64_t v8 = a3(a2, v3, v6, v7);
  OUTLINED_FUNCTION_22_8();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t closure #1 in CMLParameters.table(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(*(void *)(a2 + 16), a1);
  if (!v3)
  {
    uint64_t v6 = result;
    if (result)
    {
      type metadata accessor for CMLTable();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v6;
      *a3 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in CMLParameters.add(key:featureValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
}

uint64_t CMLParameters.add(key:table:)(char a1, uint64_t a2)
{
  return CMLParameters.add(key:column:)(a1, a2);
}

uint64_t closure #1 in CMLTable.addColumn(name:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, void))
{
  return a4(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
}

uint64_t type metadata accessor for CMLAggregator()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLAggregator.add(operation:toColumnName:fromColumnName:)(Swift::String operation, Swift::String toColumnName, Swift::String fromColumnName)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(Swift::Bool isMax, Swift::String toColumnName, Swift::String aggColumnName, Swift::String outputColumnName)
{
  id object = outputColumnName._object;
  OUTLINED_FUNCTION_16_8();
  char v7 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = OUTLINED_FUNCTION_20_6();
  specialized String.withCString<A>(_:)(v8, v9, v10, v11, v12, (uint64_t)object, v7, v4);
}

uint64_t closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a6, a7, a1);
}

uint64_t closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a6, a1);
}

uint64_t closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  if (a2) {
    return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, a4, a5, a1);
  }
  else {
    return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, a4, a5, a1);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(Swift::String concatToColumnName, Swift::String keyColumnName, Swift::String valueColumnName)
{
}

uint64_t CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8, uint64_t a9, void (*a10)(void, uint64_t, uint64_t, void *))
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, a5, a6, v10, a7, a8, a9, a10);
}

uint64_t closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void, uint64_t, uint64_t, void *))
{
  OUTLINED_FUNCTION_16_8();
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_20_6();
  return specialized String.withCString<A>(_:)(v12, v13, v14, v15, v16, v11, a7, a8, a9);
}

uint64_t closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), void (*a7)(void, uint64_t, uint64_t, void *))
{
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a1, a6, a7);
}

uint64_t closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t))
{
  return a5(*(void *)(a2 + 16), a3, a4, a1);
}

uint64_t type metadata accessor for CMLPlot()
{
  return self;
}

uint64_t CMLEmbedding.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CMLEmbedding()
{
  return self;
}

uint64_t type metadata accessor for CMLGazetteer()
{
  return self;
}

uint64_t CMLFVTypeSequence.__deallocating_deinit()
{
  tc_v1_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CMLModel()
{
  return self;
}

uint64_t sub_2270CEE0C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1)
{
  return closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(a1, *(void (**)(void))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned OpaquePointer)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t closure #1 in CMLModel.init(name:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in CMLTable.init(from:)(specialized handling<A, B>(_:_:), a1);
}

uint64_t closure #1 in CMLModel.init(url:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in CMLTable.init(from:)(specialized handling<A, B>(_:_:), a1);
}

uint64_t closure #1 in CMLTable.init(from:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    if (result) {
      *a2 = result;
    }
    else {
      __break(1u);
    }
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLModel.name()()
{
  uint64_t v2 = specialized handling<A, B>(_:_:)(*(void *)(v0 + 16));
  if (!v1)
  {
    if (v2) {
      uint64_t v2 = String.init(cString:)();
    }
    else {
      __break(1u);
    }
  }
  result._id object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t closure #1 in CMLModel.callFunction(name:arguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized handling<A, B, C, D>(_:_:_:_:)(*(void *)(a2 + 16), a1, *(void *)(a3 + 16));
  if (!v4)
  {
    uint64_t v7 = result;
    if (result)
    {
      type metadata accessor for CMLVariant();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v7;
      *a4 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLModel.callFunction(name:arguments:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in CMLModel.callFunction(name:arguments:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in CMLParameters.featureValue(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in CMLParameters.featureValue(for:)(a1, v2, a2);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:)()
{
  return closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:)();
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #1 in CMLTable.stack(columnName:to:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in CMLTable.apply(transform:type:)(uint64_t a1)
{
  return closure #1 in CMLTable.apply(transform:type:)(a1, *(void (**)(void))(v1 + 16));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1)
{
  return partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t closure #1 in CMLCallFunction(name:arguments:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = specialized handling<A, B, C>(_:_:_:)(a1, *(void *)(a2 + 16));
  if (!v2)
  {
    if (result)
    {
      type metadata accessor for CMLVariant();
      uint64_t v4 = OUTLINED_FUNCTION_70();
      return OUTLINED_FUNCTION_19_6(v4);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)()
{
  OUTLINED_FUNCTION_28_5();
  return closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(v0, v1, v2, v3, v4, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1)
{
  return partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, void *))
{
  return closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v4[2], v4[3], v4[4], v4[5], v4[6], a2, a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)()
{
  OUTLINED_FUNCTION_28_5();
  return closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(v0, v1, v2, v3, v4, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (void (*)(void, uint64_t, uint64_t, void *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)()
{
  OUTLINED_FUNCTION_28_5();
  return closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(v1, v2, v3, v4, v5, *(unsigned char *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in CMLParameters.table(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in CMLParameters.table(for:)(a1, v2, a2);
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:column:)(uint64_t a1)
{
  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, uint64_t, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:featureValue:)(uint64_t a1)
{
  return closure #1 in CMLParameters.add(key:featureValue:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:table:)(uint64_t a1)
{
  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, uint64_t, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1)
{
  return closure #1 in CMLTable.renameColumn(named:to:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1)
{
  return closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLTable.addColumn(name:_:)(uint64_t a1)
{
  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, uint64_t, void))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t _s8CreateML11MLDataTableV14ParsingOptionsVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t partial apply for closure #1 in CMLTable.init(from:isCSV:options:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in CMLTable.init(from:isCSV:options:)(a1, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t *outlined release of MLDataTable.ParsingOptions?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of MLDataTable.ParsingOptions?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CMLFeatureValueType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CMLFeatureValueType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2270CF658);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CMLFeatureValueType()
{
  return &type metadata for CMLFeatureValueType;
}

unint64_t lazy protocol witness table accessor for type CMLFeatureValueType and conformance CMLFeatureValueType()
{
  unint64_t result = lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType;
  if (!lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_9(uint64_t result)
{
  *(void *)(result + 16) = v1;
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_11(uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_8()
{
  return CMLFeatureValue.__allocating_init(_:)();
}

uint64_t OUTLINED_FUNCTION_9_7(char a1)
{
  return CMLParameters.add(key:featureValue:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_10_7(char a1)
{
  return CMLParameters.add(key:featureValue:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_11_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t OUTLINED_FUNCTION_14_7(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t OUTLINED_FUNCTION_15_7()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19_6(uint64_t result)
{
  *(void *)(result + 16) = v2;
  *uint64_t v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_3()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_24_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_8()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t OUTLINED_FUNCTION_26_5(uint64_t a1, uint64_t a2)
{
  return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_27_6()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_29_4()
{
  return *(void *)(v0 + 16);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.init(validation:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v16 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_3_0();
  uint64_t v20 = v19 - v18;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(unsigned char *)(a4 + 72) = a3;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, v19 - v18);
  v23[3] = v16;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v20, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v23, a4 + 8);
  return outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  v5[3] = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1 + 8);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)v0;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.maxIterations.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validationData.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t result = outlined init with copy of Any?(v1 + 8, (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    swift_dynamicCast();
    MLLogisticRegressionClassifier.ModelParameters.ValidationData.asTable()(a1);
    return outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = MLLogisticRegressionClassifier.ModelParameters.validationData.getter((uint64_t)&v4);
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1 = *(unsigned char *)(a1 + 8);
  id v3 = *(id *)a1;
  unsigned __int8 v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  long long v8 = *(void **)a1;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  v13[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  if (v9 == 255)
  {
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(void *)uint64_t v7 = v8;
    *(unsigned char *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v13, v2 + 8);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validation.getter()
{
  uint64_t result = outlined init with copy of Any?(v0 + 8, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*MLLogisticRegressionClassifier.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  MLLogisticRegressionClassifier.ModelParameters.validationData.getter(a1);
  return MLLogisticRegressionClassifier.ModelParameters.validationData.modify;
}

void MLLogisticRegressionClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  long long v2 = *(void **)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    long long v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    outlined copy of MLDataTable?(v2, v3);
    MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    long long v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLLogisticRegressionClassifier.ModelParameters.validation : MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v2 - 8);
  long long v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLLogisticRegressionClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

void (*MLLogisticRegressionClassifier.ModelParameters.validation.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[16] = v1;
  v3[17] = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  size_t v5 = *(void *)(v4 + 64);
  v3[18] = malloc(v5);
  v3[19] = malloc(v5);
  uint64_t result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v1 + 8, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    swift_dynamicCast();
    return MLLogisticRegressionClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLLogisticRegressionClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[18];
  uint64_t v4 = (void *)(*a1)[19];
  uint64_t v5 = (*a1)[17];
  uint64_t v6 = (*a1)[16] + 8;
  if (a2)
  {
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v6);
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    long long v8 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v8);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v6);
  }
  free(v4);
  free(v3);

  free(v2);
}

double MLLogisticRegressionClassifier.ModelParameters.l1Penalty.getter()
{
  return *(double *)(v0 + 40);
}

void MLLogisticRegressionClassifier.ModelParameters.l1Penalty.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.l1Penalty.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.l2Penalty.getter()
{
  return *(double *)(v0 + 48);
}

void MLLogisticRegressionClassifier.ModelParameters.l2Penalty.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.l2Penalty.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.stepSize.getter()
{
  return *(double *)(v0 + 56);
}

void MLLogisticRegressionClassifier.ModelParameters.stepSize.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.stepSize.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.getter()
{
  return *(double *)(v0 + 64);
}

void MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.featureRescaling.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.featureRescaling.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 72) = result;
  return result;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.featureRescaling.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.init(validationData:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v8 = *a1;
  char v9 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(unsigned char *)(a4 + 72) = a3;
  uint64_t v11 = v8;
  char v12 = v9;
  return MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v11);
}

unint64_t MLLogisticRegressionClassifier.ModelParameters.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 10;
  v2._id object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x6C616E655020314CLL;
  v3._id object = (void *)0xEC000000203A7974;
  String.append(_:)(v3);
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_3_15(v4, v5, v6, v7, v8, v9, v10, v11, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x6C616E655020324CLL;
  v12._id object = (void *)0xEC000000203A7974;
  String.append(_:)(v12);
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_3_15(v13, v14, v15, v16, v17, v18, v19, v20, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x7A69532070657453;
  v21._id object = (void *)0xEB00000000203A65;
  String.append(_:)(v21);
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_3_15(v22, v23, v24, v25, v26, v27, v28, v29, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  v30._uint64_t countAndFlagsBits = 0xD000000000000017;
  v30._id object = (void *)0x80000002272D5EA0;
  String.append(_:)(v30);
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_0_10();
  v31._uint64_t countAndFlagsBits = 0;
  v31._id object = (void *)0xE000000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 72)) {
    uint64_t v32 = 1702195828;
  }
  else {
    uint64_t v32 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 72)) {
    unint64_t v33 = 0xE400000000000000;
  }
  else {
    unint64_t v33 = 0xE500000000000000;
  }
  unint64_t v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_10();
  v35._uint64_t countAndFlagsBits = 0xD000000000000013;
  v35._id object = (void *)0x80000002272D5EC0;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

unint64_t MLLogisticRegressionClassifier.ModelParameters.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MLLogisticRegressionClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2270D04C0()
{
  return MLLogisticRegressionClassifier.ModelParameters.validation.getter();
}

uint64_t destroy for MLLogisticRegressionClassifier.ModelParameters(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return __swift_destroy_boxed_opaque_existential_0(result + 8);
  }
  return result;
}

uint64_t initializeWithCopy for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(void *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v7 = a2[4];
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    long long v8 = v4[1];
    *uint64_t v6 = *v4;
    v6[1] = v8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  return a1;
}

uint64_t assignWithCopy for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v6)
    {
      *(void *)(a1 + 32) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    long long v7 = v5[1];
    _OWORD *v4 = *v5;
    v4[1] = v7;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void *__swift_memcpy73_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x49uLL);
}

uint64_t assignWithTake for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  v4[1] = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 73))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 32);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLLogisticRegressionClassifier.ModelParameters()
{
  return &type metadata for MLLogisticRegressionClassifier.ModelParameters;
}

void OUTLINED_FUNCTION_0_10()
{
  uint64_t v1 = 10;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  return Double.write<A>(to:)();
}

void OUTLINED_FUNCTION_3_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  String.append(_:)(*(Swift::String *)&a9);
}

uint64_t static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)@<X0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  Swift::String v35 = a2;
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v34 = v5;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = &v30[-v10];
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_0();
  uint64_t v15 = v14 - v13;
  _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
  static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v15, *(void *)(a1 + 16));
  double v17 = v16;
  _MetricUtilities.ConfusionMatrixMeter.valueAsMetricTable(classLabels:)(a1, &v36);
  if (v2)
  {
    OUTLINED_FUNCTION_21_4();
    return v18();
  }
  else
  {
    uint64_t v20 = (uint64_t)v11;
    uint64_t v33 = v4;
    Swift::String v21 = v36;
    char v22 = v37;
    static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:)(v15, a1, (uint64_t)&v36);
    uint64_t v23 = v36;
    int v31 = v37;
    uint64_t v36 = v21;
    unsigned __int8 v37 = v22;
    outlined copy of Result<_DataTable, Error>(v21, v22);
    uint64_t v32 = v20;
    DataFrame.init(_:)((uint64_t)&v36, v20);
    uint64_t v36 = v23;
    unsigned __int8 v37 = v31;
    uint64_t v24 = v9;
    DataFrame.init(_:)((uint64_t)&v36, (uint64_t)v9);
    outlined consume of Result<_DataTable, Error>(v21, v22);
    OUTLINED_FUNCTION_21_4();
    v25();
    uint64_t v26 = v35;
    *Swift::String v35 = 1.0 - v17;
    uint64_t v27 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v28 = v33;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 32);
    v29((char *)v26 + *(int *)(v27 + 20), v32, v33);
    v29((char *)v26 + *(int *)(v27 + 24), (uint64_t)v24, v28);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sds5NeverOTg5015_sS2dIgyd_S2ds5d16OIegnrzr_TR011_sF77Iegnr_C58Iegyd_TR40_ss3absyxxSLRzs13SignedNumericRzlFSd_TG5Tf3npf_nTf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v8;
    uint64_t v4 = (double *)(a1 + 32);
    do
    {
      double v5 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(double *)(result + 8 * v7 + 32) = fabs(v5);
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5022_sS3dIegyyd_Sd_SdtSds5f68OIegnrzr_TR059_s8CreateML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    unint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    unint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v27 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  if (v6)
  {
    unint64_t v7 = (double *)(a1 + 32);
    uint64_t v8 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = v6;
    unint64_t v10 = v4;
    unint64_t v11 = v5;
    unint64_t v12 = v5;
    while (v4)
    {
      if (!v11) {
        goto LABEL_22;
      }
      double v13 = *v7;
      double v14 = *v8;
      unint64_t v16 = *(void *)(v27 + 16);
      unint64_t v15 = *(void *)(v27 + 24);
      if (v16 >= v15 >> 1)
      {
        unint64_t v22 = v10;
        unint64_t v23 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        unint64_t v10 = v22;
        unint64_t v12 = v23;
      }
      --v11;
      *(void *)(v27 + 16) = v16 + 1;
      *(double *)(v27 + 8 * v16 + 32) = v13 - v14;
      --v4;
      ++v8;
      ++v7;
      if (!--v9) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = v4;
    unint64_t v12 = v5;
LABEL_13:
    if (v10 <= v12)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    while (v6 < v10)
    {
      if (v12 == v6) {
        goto LABEL_20;
      }
      if (v6 >= v12) {
        goto LABEL_24;
      }
      double v17 = *(double *)(v26 + 32 + 8 * v6);
      double v18 = *(double *)(v25 + 32 + 8 * v6);
      unint64_t v20 = *(void *)(v27 + 16);
      unint64_t v19 = *(void *)(v27 + 24);
      if (v20 >= v19 >> 1)
      {
        unint64_t v21 = v10;
        unint64_t v24 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        unint64_t v12 = v24;
        unint64_t v10 = v21;
      }
      ++v6;
      *(void *)(v27 + 16) = v20 + 1;
      *(double *)(v27 + 8 * v20 + 32) = v17 - v18;
      if (v10 == v6) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v35 = v1;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_31_1();
  uint64_t v34 = type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_22_0();
  uint64_t v33 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  uint64_t v31 = v12;
  OUTLINED_FUNCTION_20_3();
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)v28 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v32 = (char *)v28 - v17;
  Tensor.argmax(squeezingAxis:)();
  static ScalarType.int.getter();
  unsigned int v30 = *MEMORY[0x263F8E1F8];
  uint64_t v29 = *(void (**)(uint64_t))(v4 + 104);
  v29(v0);
  Tensor.cast(to:roundingRule:)();
  uint64_t v18 = *(void *)(v4 + 8);
  v28[4] = v4 + 8;
  v28[5] = v18;
  OUTLINED_FUNCTION_21_4();
  v19();
  uint64_t v20 = *(void *)(v7 + 8);
  v28[2] = v7 + 8;
  _OWORD v28[3] = v20;
  OUTLINED_FUNCTION_25_0();
  v21();
  uint64_t v22 = v10 + 8;
  unint64_t v23 = *(void (**)(void))(v10 + 8);
  v28[1] = v22;
  ((void (*)(char *, uint64_t))v23)(v16, v33);
  Tensor.argmax(squeezingAxis:)();
  static ScalarType.int.getter();
  ((void (*)(uint64_t, void, uint64_t))v29)(v0, v30, v2);
  Tensor.cast(to:roundingRule:)();
  OUTLINED_FUNCTION_25_0();
  v24();
  OUTLINED_FUNCTION_25_0();
  v25();
  OUTLINED_FUNCTION_38_0();
  v23();
  uint64_t v26 = Tensor.scalars<A>(as:)();
  uint64_t v27 = Tensor.scalars<A>(as:)();
  _MetricUtilities.ConfusionMatrixMeter.add(predictedIds:targetIds:)((Swift::OpaquePointer)v26, (Swift::OpaquePointer)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_38_0();
  v23();
  OUTLINED_FUNCTION_38_0();
  v23();
  OUTLINED_FUNCTION_12_4();
}

uint64_t static _MetricUtilities.rmse(target:prediction:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_34_4();
    uint64_t v3 = v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v18 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
      uint64_t v5 = 0;
      uint64_t v6 = v18;
      unint64_t v7 = *(void *)(v18 + 16);
      do
      {
        double v8 = *(double *)(v3 + 8 * v5 + 32);
        unint64_t v9 = *(void *)(v18 + 24);
        if (v7 >= v9 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + 1, 1);
        }
        ++v5;
        *(void *)(v18 + 16) = v7 + 1;
        *(double *)(v18 + 8 * v7++ + 32) = v8 * v8;
      }
      while (v4 != v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    uint64_t v10 = *(void *)(v6 + 16);
    if (v10)
    {
      uint64_t v11 = (double *)(v6 + 32);
      double v12 = 0.0;
      do
      {
        double v13 = *v11++;
        double v12 = v12 + v13;
        --v10;
      }
      while (v10);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96();
    v15._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_15_8();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0xD000000000000011;
    v16._id object = (void *)0x80000002272D5FD0;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_15_8();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_8();
    uint64_t result = OUTLINED_FUNCTION_17_8();
    __break(1u);
  }
  return result;
}

uint64_t static _MetricUtilities.maximumError(target:prediction:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_34_4();
    uint64_t v3 = v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sds5NeverOTg5015_sS2dIgyd_S2ds5d16OIegnrzr_TR011_sF77Iegnr_C58Iegyd_TR40_ss3absyxxSLRzs13SignedNumericRzlFSd_TG5Tf3npf_nTf3nnnpf_nTf1cn_n(v3);
    swift_bridgeObjectRelease();
    uint64_t v5 = specialized Sequence<>.max()(v4);
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96();
    v7._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_15_8();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 0xD000000000000011;
    v8._id object = (void *)0x80000002272D5FD0;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_15_8();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_8();
    uint64_t result = OUTLINED_FUNCTION_17_8();
    __break(1u);
  }
  return result;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  *(void *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2272CB4D0;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a1;
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
  MLShapedArrayProtocol.init(repeating:shape:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion, v10, v4);
  return v2;
}

Swift::Void __swiftcall _MetricUtilities.ConfusionMatrixMeter.add(predictedIds:targetIds:)(Swift::OpaquePointer predictedIds, Swift::OpaquePointer targetIds)
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_0();
  uint64_t v13 = v12 - v11;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v17);
  uint64_t v35 = (char *)&v28 - v18;
  uint64_t v37 = v4;
  uint64_t v19 = *(void *)(v4 + 16);
  if (v19 && (uint64_t v33 = *(void *)(v6 + 16)) != 0)
  {
    uint64_t v20 = *(void *)(v37 + 32);
    uint64_t v21 = v2 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
    swift_bridgeObjectRetain();
    uint64_t v34 = v6;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v22 = 0;
    uint64_t v31 = v9 + 8;
    uint64_t v32 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    uint64_t v29 = v19 - 1;
    uint64_t v30 = v15 + 8;
    long long v38 = xmmword_2272CB4D0;
    while (1)
    {
      uint64_t v23 = *(void *)(v34 + 8 * v22 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v38;
      *(void *)(v24 + 32) = v20;
      *(void *)(v24 + 40) = v23;
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = v38;
      *(void *)(v25 + 32) = v20;
      *(void *)(v25 + 40) = v23;
      (*v32)(v13, v21, v7);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
      MLShapedArrayProtocol.subscript.getter();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_25_0();
      v26();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArraySlice<Int32> and conformance MLShapedArraySlice<A>, &demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
      MLShapedArrayProtocol.scalar.getter();
      OUTLINED_FUNCTION_25_0();
      v27();
      if (v40) {
        break;
      }
      if (__OFADD__(v39, 1))
      {
        __break(1u);
        break;
      }
      ++v39;
      MLShapedArraySlice.init(scalar:)();
      swift_beginAccess();
      MLShapedArrayProtocol.subscript.setter();
      swift_endAccess();
      if (v29 != v22)
      {
        uint64_t v20 = *(void *)(v37 + 8 * v22++ + 40);
        if (v33 != v22) {
          continue;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    OUTLINED_FUNCTION_12_4();
  }
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.valueAsMetricTable(classLabels:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_22_0();
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_5_12();
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(a1 + 16);
  uint64_t v67 = v2;
  if (v13 != *(void *)(v2 + 16))
  {
LABEL_35:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v78 = v67 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
    uint64_t v75 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v74 = v10 + 8;
    uint64_t v73 = v7 + 8;
    uint64_t v66 = a1 + 32;
    uint64_t v65 = (uint64_t *)(a1 + 40);
    long long v72 = xmmword_2272CB4D0;
    uint64_t v79 = MEMORY[0x263F8EE78];
    uint64_t v83 = MEMORY[0x263F8EE78];
    uint64_t v80 = MEMORY[0x263F8EE78];
    uint64_t v69 = v5;
    uint64_t v68 = v3;
    unint64_t v71 = v13;
    while (1)
    {
      if (v14 == v13) {
        goto LABEL_33;
      }
      uint64_t v15 = *(void *)(v67 + 16);
      if (v15 < 0) {
        break;
      }
      if (v15)
      {
        swift_beginAccess();
        unint64_t v16 = 0;
        uint64_t v70 = (uint64_t *)(v66 + 16 * v14);
        uint64_t v17 = v65;
        uint64_t v77 = v15;
        do
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v18 = swift_allocObject();
          *(_OWORD *)(v18 + 16) = v72;
          *(void *)(v18 + 32) = v14;
          *(void *)(v18 + 40) = v16;
          (*v75)(v12, v78, v76);
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_25_0();
          v19();
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArraySlice<Int32> and conformance MLShapedArraySlice<A>, &demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
          MLShapedArrayProtocol.scalar.getter();
          OUTLINED_FUNCTION_25_0();
          v20();
          if ((v81 & 0x100000000) == 0)
          {
            uint64_t v21 = v14;
            uint64_t v22 = v81;
            if ((int)v81 > 0)
            {
              uint64_t v24 = *v70;
              uint64_t v23 = v70[1];
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                OUTLINED_FUNCTION_37_3();
                uint64_t v83 = v39;
              }
              unint64_t v26 = *(void *)(v83 + 16);
              unint64_t v25 = *(void *)(v83 + 24);
              if (v26 >= v25 >> 1)
              {
                OUTLINED_FUNCTION_32_5(v25);
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v83 = v40;
              }
              uint64_t v27 = v83;
              *(void *)(v83 + 16) = v26 + 1;
              uint64_t v28 = v27 + 16 * v26;
              *(void *)(v28 + 32) = v24;
              *(void *)(v28 + 40) = v23;
              if (v16 >= v71)
              {
                __break(1u);
LABEL_33:
                __break(1u);
                goto LABEL_34;
              }
              uint64_t v30 = *(v17 - 1);
              uint64_t v29 = *v17;
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                OUTLINED_FUNCTION_37_3();
                uint64_t v79 = v41;
              }
              unint64_t v32 = *(void *)(v79 + 16);
              unint64_t v31 = *(void *)(v79 + 24);
              if (v32 >= v31 >> 1)
              {
                OUTLINED_FUNCTION_32_5(v31);
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v79 = v42;
              }
              uint64_t v33 = v79;
              *(void *)(v79 + 16) = v32 + 1;
              uint64_t v34 = v33 + 16 * v32;
              *(void *)(v34 + 32) = v30;
              *(void *)(v34 + 40) = v29;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                char v43 = OUTLINED_FUNCTION_11_8();
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43, v44, v45, v46);
                uint64_t v80 = v47;
              }
              uint64_t v35 = *(void *)(v80 + 16);
              OUTLINED_FUNCTION_29_5();
              if (v37)
              {
                char v48 = OUTLINED_FUNCTION_1_17(v36);
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48, v49, v50, v80);
                uint64_t v80 = v51;
              }
              uint64_t v38 = v80;
              *(void *)(v80 + 16) = v29;
              *(void *)(v38 + 8 * v35 + 32) = v22;
            }
            uint64_t v14 = v21;
          }
          ++v16;
          v17 += 2;
        }
        while (v77 != v16);
      }
      ++v14;
      unint64_t v13 = v71;
      if (v14 == v71) {
        goto LABEL_29;
      }
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v79 = MEMORY[0x263F8EE78];
  uint64_t v83 = MEMORY[0x263F8EE78];
  uint64_t v80 = MEMORY[0x263F8EE78];
LABEL_29:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  OUTLINED_FUNCTION_25_9();
  *(void *)(v53 + 32) = v54;
  *(void *)(v53 + 40) = 0xE500000000000000;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 72) = v55;
  uint64_t v56 = lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  *(void *)(inited + 48) = v83;
  *(void *)(inited + 80) = v56;
  *(void *)(inited + 88) = 0x6574636964657270;
  *(void *)(inited + 128) = v55;
  *(void *)(inited + 136) = v56;
  *(void *)(inited + 96) = 0xEF7373616C635F64;
  *(void *)(inited + 104) = v79;
  *(void *)(inited + 144) = 0x746E756F63;
  *(void *)(inited + 152) = 0xE500000000000000;
  *(void *)(inited + 184) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  *(void *)(inited + 192) = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
  *(void *)(inited + 160) = v80;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  uint64_t v57 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v58 = v64;
  uint64_t result = MLDataTable.init(dictionary:)(v57, (uint64_t)&v81);
  if (!v58)
  {
    char v60 = v82;
    uint64_t v61 = v63;
    *uint64_t v63 = v81;
    *((unsigned char *)v61 + 8) = v60;
  }
  return result;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.__deallocating_deinit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_25_0();
  v0();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for _MetricUtilities.ConfusionMatrixMeter()
{
  return type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
}

uint64_t type metadata accessor for _MetricUtilities.ConfusionMatrixMeter()
{
  uint64_t result = type metadata singleton initialization cache for _MetricUtilities.ConfusionMatrixMeter;
  if (!type metadata singleton initialization cache for _MetricUtilities.ConfusionMatrixMeter) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for _MetricUtilities.ConfusionMatrixMeter()
{
  type metadata accessor for MLShapedArray<Int32>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for MLShapedArray<Int32>()
{
  if (!lazy cache variable for type metadata for MLShapedArray<Int32>)
  {
    unint64_t v0 = type metadata accessor for MLShapedArray();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLShapedArray<Int32>);
    }
  }
}

id static _MetricUtilities.supplementConfusionMatrixWithMissingClasses(_:classes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)*(unsigned __int8 *)(a1 + 8);
  id v31 = *(id *)a1;
  id v5 = v31;
  char v32 = (char)v6;
  OUTLINED_FUNCTION_21_7();
  OUTLINED_FUNCTION_30_6((uint64_t)&v29);
  outlined consume of Result<_DataTable, Error>(v5, (char)v6);
  uint64_t v9 = v29;
  char v7 = v30;
  MLUntypedColumn.dropDuplicates()(&v31);
  outlined consume of Result<_DataTable, Error>(v9, v7);
  id v8 = v31;
  LOBYTE(v9) = v32;
  if (v32) {
    goto LABEL_36;
  }
  outlined copy of Result<_DataTable, Error>(v31, 0);
  _UntypedColumn.type.getter(&v29);
  outlined consume of Result<_DataTable, Error>(v8, 0);
  if (v29 != 2) {
    goto LABEL_36;
  }
  uint64_t v9 = (void *)specialized Array<A>.init(_:)(v8, 0);
  unint64_t v10 = v9[2];
  unint64_t v11 = *(void *)(a2 + 16);
  if (v10 >= v11)
  {
    swift_bridgeObjectRelease();
    *(void *)a3 = v5;
    *(unsigned char *)(a3 + 8) = (_BYTE)v6;
    return OUTLINED_FUNCTION_21_7();
  }
  uint64_t v27 = a3;
  id v31 = v5;
  char v32 = (char)v6;
  uint64_t v12 = a2 + 32;
  OUTLINED_FUNCTION_21_7();
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  uint64_t v6 = 0;
  uint64_t v28 = a2 + 32;
  while (1)
  {
    if (v13 == v11)
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v14 = (uint64_t *)(v12 + 16 * v13);
    uint64_t v15 = *v14;
    id v8 = (id)v14[1];
    if (!v10) {
      goto LABEL_13;
    }
    BOOL v16 = v9[4] == v15 && v9[5] == (void)v8;
    if (!v16 && (OUTLINED_FUNCTION_6_11() & 1) == 0)
    {
      if (v10 == 1) {
        goto LABEL_13;
      }
      BOOL v20 = v9[6] == v15 && v9[7] == (void)v8;
      if (!v20 && (OUTLINED_FUNCTION_6_11() & 1) == 0) {
        break;
      }
    }
LABEL_15:
    if (++v13 == v11)
    {
      swift_bridgeObjectRelease();
      id result = (id)swift_bridgeObjectRelease();
      char v26 = v32;
      *(void *)uint64_t v27 = v31;
      *(unsigned char *)(v27 + 8) = v26;
      return result;
    }
  }
  if (v10 == 2)
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
    *(void *)(inited + 32) = 0x7373616C63;
    *(void *)(inited + 40) = 0xE500000000000000;
    uint64_t v18 = MEMORY[0x263F8D310];
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 48) = v15;
    *(void *)(inited + 56) = v8;
    *(void *)(inited + 80) = &protocol witness table for String;
    *(void *)(inited + 88) = 0x6574636964657270;
    *(void *)(inited + 96) = 0xEF7373616C635F64;
    *(void *)(inited + 104) = v15;
    *(void *)(inited + 128) = v18;
    *(void *)(inited + 136) = &protocol witness table for String;
    *(void *)(inited + 112) = v8;
    *(void *)(inited + 144) = 0x746E756F63;
    *(void *)(inited + 152) = 0xE500000000000000;
    *(void *)(inited + 184) = MEMORY[0x263F8D6C8];
    *(void *)(inited + 192) = &protocol witness table for Int;
    *(void *)(inited + 160) = 0;
    swift_bridgeObjectRetain_n();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
    MLDataTable.init(dictionary:)(v19, (uint64_t)&v29);
    OUTLINED_FUNCTION_19_7();
    outlined consume of Result<_DataTable, Error>((id)inited, v15);
LABEL_14:
    uint64_t v12 = v28;
    goto LABEL_15;
  }
  uint64_t v21 = v9 + 9;
  uint64_t v22 = 2;
  while (1)
  {
    uint64_t v23 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    BOOL v24 = *(v21 - 1) == v15 && *v21 == (void)v8;
    if (v24 || (OUTLINED_FUNCTION_6_11() & 1) != 0) {
      goto LABEL_14;
    }
    v21 += 2;
    ++v22;
    if (v23 == v10) {
      goto LABEL_13;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  outlined consume of Result<_DataTable, Error>(v8, (char)v9);
  __break(1u);

  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static _MetricUtilities.supplementPrecisionRecallWithMissingClasses(_:classes:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v1 = v0;
  uint64_t v38 = v2;
  id v5 = (void *)*(unsigned __int8 *)(v4 + 8);
  id v43 = *(id *)v4;
  id v3 = v43;
  char v44 = (char)v5;
  OUTLINED_FUNCTION_21_7();
  OUTLINED_FUNCTION_30_6((uint64_t)&v45);
  outlined consume of Result<_DataTable, Error>(v43, (char)v5);
  id v6 = v45;
  LOBYTE(v7) = v46;
  if (v46) {
    goto LABEL_36;
  }
  outlined copy of Result<_DataTable, Error>(v45, 0);
  _UntypedColumn.type.getter(&v43);
  outlined consume of Result<_DataTable, Error>(v6, 0);
  if (v43 != 2) {
    goto LABEL_36;
  }
  char v7 = (void *)specialized Array<A>.init(_:)(v6, 0);
  unint64_t v8 = v7[2];
  unint64_t v9 = *(void *)(v1 + 16);
  if (v8 >= v9)
  {
    swift_bridgeObjectRelease();
    *(void *)uint64_t v38 = v3;
    *(unsigned char *)(v38 + 8) = (_BYTE)v5;
    OUTLINED_FUNCTION_21_7();
LABEL_33:
    OUTLINED_FUNCTION_12_4();
    return;
  }
  id v45 = v3;
  char v46 = (char)v5;
  uint64_t v10 = v1 + 32;
  OUTLINED_FUNCTION_21_7();
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  id v5 = 0;
  OUTLINED_FUNCTION_96();
  uint64_t v40 = v12;
  uint64_t v41 = v13;
  OUTLINED_FUNCTION_96();
  uint64_t v39 = v14;
  uint64_t v42 = v1 + 32;
  while (1)
  {
    if (v11 == v9)
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v15 = (uint64_t *)(v10 + 16 * v11);
    uint64_t v16 = *v15;
    id v6 = (id)v15[1];
    if (!v8) {
      goto LABEL_13;
    }
    BOOL v17 = v7[4] == v16 && v7[5] == (void)v6;
    if (!v17 && (OUTLINED_FUNCTION_6_11() & 1) == 0)
    {
      if (v8 == 1) {
        goto LABEL_13;
      }
      BOOL v32 = v7[6] == v16 && v7[7] == (void)v6;
      if (!v32 && (OUTLINED_FUNCTION_6_11() & 1) == 0) {
        break;
      }
    }
LABEL_15:
    if (++v11 == v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v37 = v46;
      *(void *)uint64_t v38 = v45;
      *(unsigned char *)(v38 + 8) = v37;
      goto LABEL_33;
    }
  }
  if (v8 == 2)
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    uint64_t inited = (_OWORD *)swift_initStackObject();
    inited[1] = xmmword_2272CCC70;
    OUTLINED_FUNCTION_39_5();
    uint64_t v19[4] = v20;
    v19[5] = 0xEC000000746E756FLL;
    v19[9] = MEMORY[0x263F8D6C8];
    v19[6] = 0;
    OUTLINED_FUNCTION_25_9();
    v21[10] = v23;
    v21[11] = v22;
    v21[12] = 0xE500000000000000;
    v21[16] = MEMORY[0x263F8D310];
    v21[17] = &protocol witness table for String;
    v21[13] = v16;
    v21[14] = v6;
    v21[18] = 0xD000000000000016;
    v21[19] = v41;
    v21[20] = 0;
    v21[23] = v24;
    v21[24] = v23;
    OUTLINED_FUNCTION_33_4();
    v25[25] = v26;
    v25[26] = 0xE90000000000006ELL;
    uint64_t v27 = MEMORY[0x263F8D538];
    v25[30] = MEMORY[0x263F8D538];
    v25[27] = 0;
    v25[31] = &protocol witness table for Double;
    v25[32] = 0x6C6C61636572;
    v25[37] = v27;
    v25[38] = &protocol witness table for Double;
    v25[33] = 0xE600000000000000;
    v25[34] = 0x7FF8000000000000;
    v25[39] = v28;
    v25[40] = v40;
    v25[44] = v29;
    v25[45] = v30;
    v25[41] = 0;
    v25[46] = v28 + 7;
    v25[47] = v39;
    v25[48] = 0;
    v25[51] = v29;
    v25[52] = v30;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    uint64_t v31 = Dictionary.init(dictionaryLiteral:)();
    MLDataTable.init(dictionary:)(v31, (uint64_t)&v43);
    OUTLINED_FUNCTION_19_7();
    outlined consume of Result<_DataTable, Error>(inited, v16);
LABEL_14:
    uint64_t v10 = v42;
    goto LABEL_15;
  }
  uint64_t v33 = v7 + 9;
  uint64_t v34 = 2;
  while (1)
  {
    uint64_t v35 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    BOOL v36 = *(v33 - 1) == v16 && *v33 == (void)v6;
    if (v36 || (OUTLINED_FUNCTION_6_11() & 1) != 0) {
      goto LABEL_14;
    }
    v33 += 2;
    ++v34;
    if (v35 == v8) {
      goto LABEL_13;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  outlined consume of Result<_DataTable, Error>(v6, (char)v7);
  __break(1u);

  OUTLINED_FUNCTION_17_8();
  __break(1u);
}

void _MetricUtilities.ConfusionMatrixMeter.value(normalized:)()
{
  OUTLINED_FUNCTION_19_4();
  int v54 = v2;
  uint64_t v47 = v3;
  type metadata accessor for FloatingPointRoundingRule();
  OUTLINED_FUNCTION_0();
  uint64_t v52 = v5;
  uint64_t v53 = v4;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v51 = v7 - v6;
  uint64_t v50 = type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_0();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x270FA5388](v14 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v48 = v19;
  uint64_t v49 = v18;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_49();
  v46[2] = v20;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v21);
  v46[0] = (char *)v46 - v22;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v23);
  v46[3] = (char *)v46 - v24;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v25);
  v46[1] = (char *)v46 - v26;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_46_2();
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)v46 - v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_0();
  uint64_t v33 = v32;
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLMultiArray();
  uint64_t v35 = v0 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v1, v35, v31);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
  BOOL v36 = (void *)MLMultiArray.init<A>(_:)();
  uint64_t v37 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v37);
  id v38 = v36;
  Tensor.init(_:device:)(v38, v17);
  uint64_t v39 = v50;
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v13, *MEMORY[0x263F58330], v50);
  (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))(v51, *MEMORY[0x263F8E1F8], v53);
  uint64_t v55 = v30;
  Tensor.cast(to:roundingRule:)();
  uint64_t v40 = v48;
  uint64_t v41 = v49;
  OUTLINED_FUNCTION_25_0();
  v42();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v39);
  id v43 = *(void (**)(void))(v40 + 8);
  OUTLINED_FUNCTION_3_16();
  v43();
  if ((v54 & 1) == 0)
  {

    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v47, v55, v41);
    goto LABEL_6;
  }
  uint64_t v44 = Tensor.rank.getter();
  if (v44 < 0)
  {
    __break(1u);
  }
  else
  {
    specialized Sequence.reversed()(0, v44);
    Tensor.transposed(permutation:)();
    swift_bridgeObjectRelease();
    Tensor.sum(squeezingAxes:)();
    Tensor.init(floatLiteral:)();
    static Tensor.+ infix(_:_:)();
    OUTLINED_FUNCTION_3_16();
    v43();
    OUTLINED_FUNCTION_3_16();
    v43();
    static Tensor./ infix(_:_:)();
    OUTLINED_FUNCTION_3_16();
    v43();
    OUTLINED_FUNCTION_3_16();
    v43();
    uint64_t v45 = Tensor.rank.getter();
    if ((v45 & 0x8000000000000000) == 0)
    {
      specialized Sequence.reversed()(0, v45);
      Tensor.transposed(permutation:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_16();
      v43();
      OUTLINED_FUNCTION_3_16();
      v43();
LABEL_6:
      OUTLINED_FUNCTION_12_4();
      return;
    }
  }
  __break(1u);
}

uint64_t static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_46_2();
  uint64_t result = MEMORY[0x270FA5388](v9);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = type metadata accessor for ComputeDevice();
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    Tensor.init<A>(oneHotAtIndices:depth:onValue:offValue:on:)();
    static Tensor.* infix(_:_:)();
    Tensor.sum()();
    uint64_t v12 = *(void (**)(void))(v6 + 8);
    OUTLINED_FUNCTION_38_0();
    v12();
    OUTLINED_FUNCTION_26_6();
    OUTLINED_FUNCTION_38_0();
    v12();
    Tensor.sum()();
    OUTLINED_FUNCTION_26_6();
    OUTLINED_FUNCTION_38_0();
    v12();
    OUTLINED_FUNCTION_38_0();
    return ((uint64_t (*)(void))v12)();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

unint64_t type metadata accessor for MLMultiArray()
{
  unint64_t result = lazy cache variable for type metadata for MLMultiArray;
  if (!lazy cache variable for type metadata for MLMultiArray)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  return result;
}

uint64_t static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v124 = a1;
  uint64_t v128 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_5_12();
  MEMORY[0x270FA5388](v7);
  uint64_t v121 = (char *)v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_7();
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v104 - v11;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_28_6();
  uint64_t v117 = v13;
  OUTLINED_FUNCTION_18_7();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_28_6();
  uint64_t v116 = v15;
  OUTLINED_FUNCTION_18_7();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_28_6();
  uint64_t v115 = v17;
  OUTLINED_FUNCTION_18_7();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_28_6();
  uint64_t v123 = v19;
  OUTLINED_FUNCTION_18_7();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_28_6();
  uint64_t v122 = v21;
  OUTLINED_FUNCTION_18_7();
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)v104 - v24;
  uint64_t v108 = *(void *)(a2 + 16);
  if (v108)
  {
    uint64_t v105 = v3;
    uint64_t v106 = a3;
    uint64_t v26 = (void (**)(void))(v23 + 8);
    swift_bridgeObjectRetain();
    uint64_t v27 = 0;
    uint64_t v28 = MEMORY[0x263F8EE78];
    v104[1] = a2;
    uint64_t v29 = (void *)(a2 + 40);
    long long v127 = xmmword_2272CB370;
    uint64_t v118 = MEMORY[0x263F8EE78];
    uint64_t v119 = MEMORY[0x263F8EE78];
    uint64_t v125 = MEMORY[0x263F8EE78];
    uint64_t v120 = v12;
    uint64_t v114 = v25;
    uint64_t v107 = v26;
    while (1)
    {
      uint64_t v126 = v27;
      uint64_t v113 = v28;
      uint64_t v111 = *(v29 - 1);
      uint64_t v109 = v29;
      uint64_t v30 = *v29;
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TensorRangeExpression?>);
      uint64_t v32 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_4_13(v32);
      v33[7] = MEMORY[0x263F8D6C8];
      uint64_t v34 = MEMORY[0x263F585B8];
      v33[8] = MEMORY[0x263F585B8];
      v33[4] = v27;
      uint64_t v112 = v30;
      swift_bridgeObjectRetain();
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v35 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_4_13(v35);
      v36[7] = MEMORY[0x263F8D6C8];
      v36[8] = v34;
      v36[4] = v27;
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v37 = *v26;
      OUTLINED_FUNCTION_23_1();
      v37();
      Tensor.sum(alongAxes:)();
      uint64_t v110 = (void (*)(void))v31;
      id v38 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_4_13(v38);
      v39[7] = MEMORY[0x263F8D6C8];
      v39[8] = MEMORY[0x263F585B8];
      v39[4] = 0;
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_1();
      v37();
      uint64_t v40 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_4_13(v40);
      *(void *)(v41 + 56) = MEMORY[0x263F8D6C8];
      OUTLINED_FUNCTION_13_7(v41, MEMORY[0x263F585B8]);
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_4();
      v37();
      static Tensor./ infix(_:_:)();
      OUTLINED_FUNCTION_21_4();
      v37();
      OUTLINED_FUNCTION_21_4();
      v37();
      uint64_t v42 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_4_13(v42);
      *(void *)(v43 + 56) = MEMORY[0x263F8D6C8];
      OUTLINED_FUNCTION_13_7(v43, MEMORY[0x263F585B8]);
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v44 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_4_13(v44);
      *(void *)(v45 + 56) = MEMORY[0x263F8D6C8];
      OUTLINED_FUNCTION_13_7(v45, MEMORY[0x263F585B8]);
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_4();
      v37();
      Tensor.sum(alongAxes:)();
      char v46 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_4_13(v46);
      *(void *)(v47 + 56) = MEMORY[0x263F8D6C8];
      OUTLINED_FUNCTION_13_7(v47, MEMORY[0x263F585B8]);
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_4();
      v37();
      uint64_t v48 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_38_4(v48);
      *(void *)(v49 + 64) = MEMORY[0x263F585B8];
      *(void *)(v49 + 32) = 0;
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_4();
      v37();
      static Tensor./ infix(_:_:)();
      OUTLINED_FUNCTION_21_4();
      v37();
      OUTLINED_FUNCTION_21_4();
      v37();
      uint64_t v50 = (__n128 *)OUTLINED_FUNCTION_9_8();
      OUTLINED_FUNCTION_38_4(v50);
      OUTLINED_FUNCTION_13_7(v51, MEMORY[0x263F585B8]);
      uint64_t v52 = v122;
      Tensor.subscript.getter();
      swift_bridgeObjectRelease();
      Tensor.sum()();
      uint64_t v110 = v37;
      OUTLINED_FUNCTION_21_4();
      v37();
      uint64_t v53 = v119;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_11_8();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v53 = v77;
      }
      uint64_t v54 = *(void *)(v53 + 16);
      OUTLINED_FUNCTION_29_5();
      uint64_t v28 = v113;
      uint64_t v56 = v114;
      uint64_t v57 = v118;
      if (v58)
      {
        OUTLINED_FUNCTION_1_17(v55);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v53 = v78;
      }
      *(void *)(v53 + 16) = v52;
      uint64_t v59 = v53 + 16 * v54;
      uint64_t v60 = v112;
      *(void *)(v59 + 32) = v111;
      *(void *)(v59 + 40) = v60;
      Tensor.scalar<A>(as:)();
      float v61 = *(float *)&v129;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_11_8();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v57 = v79;
      }
      uint64_t v62 = *(void *)(v57 + 16);
      OUTLINED_FUNCTION_29_5();
      if (v58)
      {
        OUTLINED_FUNCTION_1_17(v63);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v57 = v80;
      }
      *(void *)(v57 + 16) = v56;
      *(double *)(v57 + 8 * v62 + 32) = v61;
      uint64_t v64 = v120;
      Tensor.scalar<A>(as:)();
      float v65 = *(float *)&v129;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v66 = v125;
      }
      else
      {
        OUTLINED_FUNCTION_11_8();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v66 = v81;
      }
      uint64_t v67 = *(void *)(v66 + 16);
      OUTLINED_FUNCTION_29_5();
      if (v58)
      {
        OUTLINED_FUNCTION_1_17(v69);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v68 = v82;
      }
      *(void *)(v68 + 16) = v64;
      uint64_t v125 = v68;
      *(double *)(v68 + 8 * v67 + 32) = v65;
      uint64_t v70 = v121;
      uint64_t result = Tensor.scalar<A>(as:)();
      float v72 = *(float *)&v129;
      if ((~v129 & 0x7F800000) == 0) {
        break;
      }
      if (*(float *)&v129 <= -9.2234e18) {
        goto LABEL_30;
      }
      if (*(float *)&v129 >= 9.2234e18) {
        goto LABEL_31;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v83 = OUTLINED_FUNCTION_11_8();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v83, v84, v85, v28);
        uint64_t v28 = v86;
      }
      uint64_t v73 = *(void *)(v28 + 16);
      OUTLINED_FUNCTION_29_5();
      if (v58)
      {
        char v87 = OUTLINED_FUNCTION_1_17(v74);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v87, v88, v89, v28);
        uint64_t v28 = v90;
      }
      uint64_t v118 = v57;
      uint64_t v119 = v53;
      uint64_t v27 = v126 + 1;
      uint64_t v75 = v110;
      uint64_t v76 = v109 + 2;
      *(void *)(v28 + 16) = v70;
      uint64_t v29 = v76;
      *(void *)(v28 + 8 * v73 + 32) = (uint64_t)v72;
      uint64_t v26 = v107;
      ((void (*)(char *, uint64_t))v75)(v121, v128);
      OUTLINED_FUNCTION_23_1();
      v75();
      OUTLINED_FUNCTION_23_1();
      v75();
      if (v108 == v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v105;
        a3 = v106;
        uint64_t v92 = v118;
        uint64_t v91 = v119;
        uint64_t v93 = v125;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    uint64_t v91 = MEMORY[0x263F8EE78];
    uint64_t v92 = MEMORY[0x263F8EE78];
    uint64_t v93 = MEMORY[0x263F8EE78];
    uint64_t v28 = MEMORY[0x263F8EE78];
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB360;
    OUTLINED_FUNCTION_25_9();
    *(void *)(v95 + 32) = v96;
    *(void *)(v95 + 40) = 0xE500000000000000;
    *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
    *(void *)(inited + 48) = v91;
    OUTLINED_FUNCTION_33_4();
    *(void *)(inited + 80) = v97;
    *(void *)(inited + 88) = v98;
    *(void *)(inited + 96) = 0xE90000000000006ELL;
    uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    *(void *)(inited + 128) = v99;
    uint64_t v100 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A], &demangling cache variable for type metadata for [Double]);
    *(void *)(inited + 104) = v92;
    *(void *)(inited + 136) = v100;
    *(void *)(inited + 144) = 0x6C6C61636572;
    *(void *)(inited + 184) = v99;
    *(void *)(inited + 192) = v100;
    *(void *)(inited + 152) = 0xE600000000000000;
    *(void *)(inited + 160) = v93;
    OUTLINED_FUNCTION_39_5();
    *(void *)(inited + 200) = v101;
    *(void *)(inited + 208) = 0xEC000000746E756FLL;
    *(void *)(inited + 240) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    *(void *)(inited + 248) = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
    *(void *)(inited + 216) = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    uint64_t v102 = Dictionary.init(dictionaryLiteral:)();
    uint64_t result = MLDataTable.init(dictionary:)(v102, (uint64_t)&v129);
    if (!v4)
    {
      char v103 = v130;
      *(void *)a3 = v129;
      *(unsigned char *)(a3 + 8) = v103;
    }
  }
  return result;
}

uint64_t specialized Sequence.reversed()(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(result + 16);
  if (v4 < 2) {
    return v3;
  }
  unint64_t v5 = 0;
  unint64_t v6 = v4 >> 1;
  for (unint64_t i = v4 + 3; ; --i)
  {
    if (v5 == i - 4) {
      goto LABEL_10;
    }
    unint64_t v8 = *(void *)(v3 + 16);
    if (v5 >= v8) {
      break;
    }
    if (i - 4 >= v8) {
      goto LABEL_13;
    }
    uint64_t v9 = *(void *)(v3 + 8 * v5 + 32);
    uint64_t v10 = *(void *)(v3 + 8 * i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      uint64_t v3 = result;
    }
    *(void *)(v3 + 8 * v5 + 32) = v10;
    *(void *)(v3 + 8 * i) = v9;
LABEL_10:
    if (v6 == ++v5) {
      return v3;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[8 * v8] <= v12) {
      memmove(v12, v13, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}