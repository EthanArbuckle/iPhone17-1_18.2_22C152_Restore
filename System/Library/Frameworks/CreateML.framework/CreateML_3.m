void destroy for MLDecisionTreeClassifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  int EnumCaseMultiPayload;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  void **v15;
  int v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void (*v24)(void **, uint64_t);
  uint64_t v25;
  void (*v26)(void **, uint64_t);
  uint64_t vars8;

  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(type metadata accessor for AnyTreeClassifierModel() + 24);
  v5 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[8];
  if (*(void *)(v6 + 32)) {
    __swift_destroy_boxed_opaque_existential_0(v6 + 8);
  }
  v7 = (id *)(a1 + a2[9]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v10 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v11 = (char *)v7 + *(int *)(v10 + 20);
      v12 = type metadata accessor for DataFrame();
      v13 = *(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8);
      v13(v11, v12);
      v13((char *)v7 + *(int *)(v10 + 24), v12);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
      (*(void (**)(id *, uint64_t))(*(void *)(v14 - 8) + 8))(v7, v14);
      break;
  }
  v15 = (void **)(a1 + a2[10]);
  v16 = swift_getEnumCaseMultiPayload();
  if (v16 == 2)
  {
    v18 = *v15;
  }
  else
  {
    if (v16 == 1)
    {
      v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v20 = (char *)v15 + *(int *)(v19 + 20);
      v21 = type metadata accessor for DataFrame();
      v26 = *(void (**)(void **, uint64_t))(*(void *)(v21 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v26)((void *)(v21 - 8), v20, v21);
      v22 = (void **)((char *)v15 + *(int *)(v19 + 24));
      v23 = v21;
      v24 = v26;
    }
    else
    {
      if (v16) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      v25 = __swift_instantiateConcreteTypeFromMangledName(v17);
      v24 = *(void (**)(void **, uint64_t))(*(void *)(v25 - 8) + 8);
      v23 = v25;
      v22 = v15;
    }
    v24(v22, v23);
  }
}

void *initializeWithCopy for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  uint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = v18[8];
  *(void *)v17 = v19;
  v17[8] = (char)v18;
  uint64_t v20 = a3[5];
  uint64_t v21 = a3[6];
  v22 = *(void **)((char *)a2 + v20);
  *(void *)((char *)a1 + v20) = v22;
  v23 = (void *)((char *)a1 + v21);
  v24 = (void *)((char *)a2 + v21);
  uint64_t v25 = v24[1];
  void *v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = a3[8];
  v63 = a3;
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(void *)((char *)a1 + v26) = *(void *)((char *)a2 + v26);
  v29 = (_OWORD *)((char *)a1 + v26 + 8);
  v30 = (_OWORD *)((char *)a2 + v26 + 8);
  uint64_t v31 = *(void *)((char *)a2 + v26 + 32);
  swift_bridgeObjectRetain();
  id v32 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    *((void *)v27 + 4) = v31;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v31 - 8))(v29, v30, v31);
  }
  else
  {
    long long v33 = v30[1];
    _OWORD *v29 = *v30;
    v29[1] = v33;
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
  *((void *)v27 + 7) = *((void *)v28 + 7);
  v34 = a3;
  uint64_t v35 = a3[9];
  v36 = (void **)((char *)a1 + v35);
  v37 = (void **)((char *)a2 + v35);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v43 = *v37;
    id v44 = v43;
    *v36 = v43;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v36 = *v37;
    uint64_t v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v40 = *(int *)(v39 + 20);
    v61 = (char *)v37 + v40;
    v62 = (char *)v36 + v40;
    uint64_t v41 = type metadata accessor for DataFrame();
    v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
    v42(v62, v61, v41);
    v42((char *)v36 + *(int *)(v39 + 24), (char *)v37 + *(int *)(v39 + 24), v41);
    v34 = v63;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(v45);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v46 - 8) + 16))(v36, v37, v46);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v47 = v34[10];
  v48 = (void **)((char *)a1 + v47);
  v49 = (void **)((char *)a2 + v47);
  int v50 = swift_getEnumCaseMultiPayload();
  if (v50 == 2)
  {
    v56 = *v49;
    id v57 = v56;
    *v48 = v56;
  }
  else if (v50 == 1)
  {
    *v48 = *v49;
    uint64_t v51 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v52 = *(int *)(v51 + 20);
    v64 = (char *)v48 + v52;
    v53 = (char *)v49 + v52;
    uint64_t v54 = type metadata accessor for DataFrame();
    v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16);
    v55(v64, v53, v54);
    v55((char *)v48 + *(int *)(v51 + 24), (char *)v49 + *(int *)(v51 + 24), v54);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v58 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      v58 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(v58);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v59 - 8) + 16))(v48, v49, v59);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 2;
  v8 = a2 + 2;
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      uint64_t v9 = a2[4];
      *uint64_t v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v8;
    a1[4] = a2[4];
    *uint64_t v6 = v10;
  }
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = v18[8];
  *(void *)v17 = v19;
  v17[8] = (char)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[5];
  uint64_t v21 = *(void **)((char *)a2 + v20);
  v22 = *(void **)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = v21;
  id v23 = v21;

  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[8];
  v28 = (void *)((char *)a1 + v27);
  v29 = (void *)((char *)a2 + v27);
  *(void *)((char *)a1 + v27) = *(void *)((char *)a2 + v27);
  uint64_t v30 = (uint64_t)a1 + v27 + 8;
  uint64_t v31 = (uint64_t)a2 + v27 + 8;
  uint64_t v32 = *(void *)((char *)a2 + v27 + 32);
  if (*(void *)((char *)a1 + v27 + 32))
  {
    if (v32)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v30, (uint64_t *)v31);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v30);
  }
  else if (v32)
  {
    v28[4] = v32;
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))(v30, v31);
    goto LABEL_15;
  }
  long long v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
LABEL_15:
  v28[5] = v29[5];
  v28[6] = v29[6];
  v28[7] = v29[7];
  if (a1 != a2)
  {
    uint64_t v34 = a3[9];
    uint64_t v35 = (void **)((char *)a1 + v34);
    v36 = (void **)((char *)a2 + v34);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v34, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v42 = *v36;
      id v43 = v42;
      *uint64_t v35 = v42;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v35 = *v36;
      uint64_t v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v39 = *(int *)(v38 + 20);
      v61 = (char *)v36 + v39;
      v62 = (char *)v35 + v39;
      uint64_t v40 = type metadata accessor for DataFrame();
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
      v41(v62, v61, v40);
      v41((char *)v35 + *(int *)(v38 + 24), (char *)v36 + *(int *)(v38 + 24), v40);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        id v44 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        id v44 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(v44);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v45 - 8) + 16))(v35, v36, v45);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = a3[10];
    uint64_t v47 = (void **)((char *)a1 + v46);
    v48 = (void **)((char *)a2 + v46);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v46, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int v49 = swift_getEnumCaseMultiPayload();
    if (v49 == 2)
    {
      v56 = *v48;
      id v57 = v56;
      *uint64_t v47 = v56;
    }
    else if (v49 == 1)
    {
      *uint64_t v47 = *v48;
      uint64_t v50 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v51 = *(int *)(v50 + 20);
      uint64_t v52 = (char *)v47 + v51;
      v53 = (char *)v48 + v51;
      uint64_t v54 = type metadata accessor for DataFrame();
      v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16);
      v55(v52, v53, v54);
      v55((char *)v47 + *(int *)(v50 + 24), (char *)v48 + *(int *)(v50 + 24), v54);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        v58 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        v58 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(v58);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v59 - 8) + 16))(v47, v48, v59);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLDecisionTreeClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  v17 = (_OWORD *)(a1 + v16);
  v18 = (_OWORD *)(a2 + v16);
  long long v19 = v18[1];
  _OWORD *v17 = *v18;
  v17[1] = v19;
  long long v20 = v18[2];
  long long v21 = v18[3];
  uint64_t v22 = a3[9];
  id v23 = (char *)(a1 + v22);
  uint64_t v24 = (char *)(a2 + v22);
  v17[2] = v20;
  v17[3] = v21;
  uint64_t v25 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)id v23 = *(void *)v24;
    uint64_t v29 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v30 = *(int *)(v29 + 20);
    uint64_t v46 = &v24[v30];
    uint64_t v47 = &v23[v30];
    uint64_t v31 = type metadata accessor for DataFrame();
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32);
    v32(v47, v46, v31);
    v32(&v23[*(int *)(v29 + 24)], &v24[*(int *)(v29 + 24)], v31);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v27 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v23, v24, v28);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_10:
  uint64_t v33 = a3[10];
  uint64_t v34 = (char *)(a1 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  int v36 = swift_getEnumCaseMultiPayload();
  if (v36 == 1)
  {
    *(void *)uint64_t v34 = *(void *)v35;
    uint64_t v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v40 = *(int *)(v39 + 20);
    uint64_t v41 = &v34[v40];
    v42 = &v35[v40];
    uint64_t v43 = type metadata accessor for DataFrame();
    id v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
    v44(v41, v42, v43);
    v44(&v34[*(int *)(v39 + 24)], &v35[*(int *)(v39 + 24)], v43);
  }
  else
  {
    if (v36)
    {
      memcpy(v34, v35, *(void *)(*(void *)(v25 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v37 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      v37 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(v37);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v34, v35, v38);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for MLDecisionTreeClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  uint64_t v9 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v16) = v16[8];
  *(void *)uint64_t v15 = v17;
  v15[8] = (char)v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[5];
  long long v19 = *(void **)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);

  uint64_t v20 = a3[6];
  long long v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *long long v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = (_OWORD *)((char *)a2 + v25 + 8);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  uint64_t v29 = (_OWORD *)((char *)a1 + v25 + 8);
  if (*(void *)((char *)a1 + v25 + 32)) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
  }
  long long v30 = v28[1];
  _OWORD *v29 = *v28;
  v29[1] = v30;
  *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
  *((void *)v26 + 7) = *((void *)v27 + 7);
  if (a1 == a2) {
    return a1;
  }
  uint64_t v31 = a3[9];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v31, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v34 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v32 = *(void *)v33;
    uint64_t v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v39 = *(int *)(v38 + 20);
    v55 = &v33[v39];
    v56 = &v32[v39];
    uint64_t v40 = type metadata accessor for DataFrame();
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32);
    v41(v56, v55, v40);
    v41(&v32[*(int *)(v38 + 24)], &v33[*(int *)(v38 + 24)], v40);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      int v36 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      int v36 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v32, v33, v37);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  uint64_t v42 = a3[10];
  uint64_t v43 = (char *)a1 + v42;
  id v44 = (char *)a2 + v42;
  outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v42, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  int v45 = swift_getEnumCaseMultiPayload();
  if (v45 == 1)
  {
    *(void *)uint64_t v43 = *(void *)v44;
    uint64_t v48 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v49 = *(int *)(v48 + 20);
    uint64_t v50 = &v43[v49];
    uint64_t v51 = &v44[v49];
    uint64_t v52 = type metadata accessor for DataFrame();
    v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32);
    v53(v50, v51, v52);
    v53(&v43[*(int *)(v48 + 24)], &v44[*(int *)(v48 + 24)], v52);
  }
  else
  {
    if (v45)
    {
      memcpy(v43, v44, *(void *)(*(void *)(v34 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v43, v44, v47);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271F0C78);
}

uint64_t sub_2271F0C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_8:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    goto LABEL_8;
  }
  unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271F0D3C);
}

void sub_2271F0D3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return;
    }
    uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v11 = a1 + *(int *)(a4 + 36);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for MLDecisionTreeClassifier()
{
  uint64_t result = type metadata accessor for AnyTreeClassifierModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_2271F0EE0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_7_1(v8);
  *uint64_t v9 = v10;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in static MLDecisionTreeClassifier.handleResult(_:session:fulfill:)(a1, v3, v4, v5, v6, v7);
}

uint64_t outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t _s8CreateML22AnyTreeClassifierModelVWObTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_47()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_36()
{
  return *(void *)(v0 - 240);
}

uint64_t OUTLINED_FUNCTION_25_25()
{
  uint64_t v2 = *(void *)(v0 - 272);
  return outlined destroy of MLDecisionTreeClassifier.ModelParameters(v2);
}

uint64_t OUTLINED_FUNCTION_34_12(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(v2 - 568);
  return outlined destroy of URL?(v4, a2);
}

uint64_t OUTLINED_FUNCTION_51_9(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 344);
  return outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v4, a2);
}

uint64_t OUTLINED_FUNCTION_52_8()
{
  return type metadata accessor for MLDecisionTreeClassifier();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVy6CoreML13MLShapedArrayVySfGGAJySSGG_18CreateMLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n(void (**a1)(char *, char *, uint64_t))
{
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  uint64_t v120 = *(void *)(v113 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v113);
  v122 = (char *)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  v101 = (char *)&v93 - v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  v110 = (void (**)(char *, uint64_t))((char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v112 = (void (**)(char *, uint64_t))((char *)&v93 - v9);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v111 = (uint64_t *)((char *)&v93 - v11);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v98 = (uint64_t)&v93 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v99 = (uint64_t)&v93 - v15;
  MEMORY[0x270FA5388](v14);
  v100 = (char *)&v93 - v16;
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
  uint64_t v17 = MEMORY[0x270FA5388](v114);
  uint64_t v109 = (uint64_t)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v97 = (uint64_t)&v93 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v96 = (uint64_t)&v93 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v95 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  v116 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  uint64_t v94 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  v119 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  uint64_t v27 = v26 - 8;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>.Iterator);
  uint64_t v31 = v30 - 8;
  MEMORY[0x270FA5388](v30);
  v118 = (char *)&v93 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v121 = a1;
  uint64_t v33 = dispatch thunk of Sequence.underestimatedCount.getter();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  uint64_t v34 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v34 < v33) {
    uint64_t v33 = v34;
  }
  uint64_t v126 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  outlined init with copy of Any?((uint64_t)v121, (uint64_t)v29, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v119, v29, v24);
  uint64_t v35 = v118;
  dispatch thunk of Sequence.makeIterator()();
  int v36 = &v29[*(int *)(v27 + 60)];
  uint64_t v37 = (uint64_t)v35;
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v116, v36, v22);
  v115 = (char *)v35 + *(int *)(v31 + 60);
  uint64_t v123 = v22;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v117 = *(int *)(v31 + 64);
  *((unsigned char *)v35 + v117) = 0;
  if (v33 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    uint64_t result = outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for MLShapedArray<Float>?);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  else
  {
    uint64_t v38 = (uint64_t)v100;
    if (v33)
    {
      uint64_t v35 = (void *)((char *)v35
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<MLShapedArray<Float>>>)
                              + 36));
      v107 = (void (**)(char *, uint64_t))(v94 + 8);
      v108 = (void (**)(char *, uint64_t, uint64_t))(v94 + 16);
      v106 = (void (**)(char *, char *, uint64_t))(v95 + 16);
      v105 = (void (**)(char *, uint64_t))(v95 + 8);
      uint64_t v103 = v120 + 32;
      uint64_t v104 = v24;
      v102 = v35;
      do
      {
        if (!v33)
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (*(unsigned char *)(v37 + v117)) {
          goto LABEL_41;
        }
        v121 = (void (**)(char *, char *, uint64_t))v33;
        uint64_t v39 = *v35;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
        uint64_t result = dispatch thunk of Collection.endIndex.getter();
        if (v39 == v124) {
          goto LABEL_44;
        }
        uint64_t v41 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v42 = v112;
        outlined init with copy of Any?(v43, (uint64_t)v112, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        v41(&v124, 0);
        id v44 = v119;
        (*v108)(v119, v37, v24);
        dispatch thunk of Collection.formIndex(after:)();
        (*v107)(v44, v24);
        uint64_t v35 = v111;
        outlined init with take of (offset: Int, element: Layer)?((uint64_t)v42, (uint64_t)v111, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
        uint64_t v46 = v115;
        uint64_t v47 = *(void *)&v115[*(int *)(v45 + 36)];
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
        dispatch thunk of Collection.endIndex.getter();
        if (v47 == v124) {
          goto LABEL_43;
        }
        uint64_t v48 = v123;
        uint64_t v49 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v50 = v46;
        uint64_t v53 = *v51;
        unint64_t v52 = v51[1];
        swift_bridgeObjectRetain();
        v49(&v124, 0);
        uint64_t v54 = v116;
        (*v106)(v116, v50, v48);
        dispatch thunk of Collection.formIndex(after:)();
        (*v105)(v54, v48);
        uint64_t v55 = v109;
        v56 = (void *)(v109 + *(int *)(v114 + 48));
        outlined init with take of (offset: Int, element: Layer)?((uint64_t)v35, v109, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        void *v56 = v53;
        v56[1] = v52;
        id v57 = v110;
        outlined init with copy of Any?(v55, (uint64_t)v110, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
        uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v57, 1, v58);
        if (result == 1) {
          goto LABEL_45;
        }
        if (v52) {
          uint64_t v59 = v53;
        }
        else {
          uint64_t v59 = 0;
        }
        unint64_t v60 = 0xE000000000000000;
        if (v52) {
          unint64_t v60 = v52;
        }
        uint64_t v124 = v59;
        unint64_t v125 = v60;
        swift_bridgeObjectRetain();
        AnnotatedFeature.init(feature:annotation:)();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v55, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
        uint64_t v61 = v126;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v35 = v102;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v61 = v126;
        }
        uint64_t v24 = v104;
        unint64_t v63 = *(void *)(v61 + 16);
        if (v63 >= *(void *)(v61 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v61 = v126;
        }
        *(void *)(v61 + 16) = v63 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v120 + 32))(v61+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(void *)(v120 + 72) * v63, v122, v113);
        uint64_t v33 = (uint64_t)v121 - 1;
        uint64_t v37 = (uint64_t)v118;
      }
      while (v121 != (void (**)(char *, char *, uint64_t))1);
      uint64_t v38 = (uint64_t)v100;
      if (v118[v117]) {
        goto LABEL_39;
      }
    }
    uint64_t v64 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
    v121 = (void (**)(char *, char *, uint64_t))(v94 + 16);
    v112 = (void (**)(char *, uint64_t))(v94 + 8);
    v110 = (void (**)(char *, uint64_t))(v95 + 8);
    v111 = (void *)(v95 + 16);
    v108 = (void (**)(char *, uint64_t, uint64_t))(v120 + 32);
    uint64_t v109 = v64;
    while (1)
    {
      v65 = (char *)v37;
      uint64_t v66 = *(void *)(v37
                      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<MLShapedArray<Float>>>)
                               + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v66 == v124) {
        break;
      }
      v67 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v68 = v99;
      outlined init with copy of Any?(v69, v99, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      v67(&v124, 0);
      v70 = v119;
      (*v121)(v119, v65, v24);
      dispatch thunk of Collection.formIndex(after:)();
      (*v112)(v70, v24);
      outlined init with take of (offset: Int, element: Layer)?(v68, v38, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      v72 = v115;
      uint64_t v73 = *(void *)&v115[*(int *)(v71 + 36)];
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
      dispatch thunk of Collection.endIndex.getter();
      if (v73 == v124)
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v38, &demangling cache variable for type metadata for MLShapedArray<Float>?);
        v65 = v118;
        break;
      }
      uint64_t v74 = v123;
      v75 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      v122 = *v76;
      uint64_t v77 = v38;
      v78 = v76[1];
      swift_bridgeObjectRetain();
      v75(&v124, 0);
      v79 = v116;
      ((void (*)(char *, char *, uint64_t))*v111)(v116, v72, v74);
      dispatch thunk of Collection.formIndex(after:)();
      (*v110)(v79, v74);
      uint64_t v80 = v114;
      uint64_t v81 = v97;
      v82 = (char **)(v97 + *(int *)(v114 + 48));
      outlined init with take of (offset: Int, element: Layer)?(v77, v97, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      *v82 = v122;
      v82[1] = v78;
      uint64_t v83 = v96;
      outlined init with take of (offset: Int, element: Layer)?(v81, v96, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
      v84 = (uint64_t *)(v83 + *(int *)(v80 + 48));
      uint64_t v86 = *v84;
      unint64_t v85 = v84[1];
      uint64_t v87 = v98;
      outlined init with copy of Any?(v83, v98, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
      uint64_t result = __swift_getEnumTagSinglePayload(v87, 1, v88);
      if (result == 1) {
        goto LABEL_46;
      }
      if (v85) {
        uint64_t v89 = v86;
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = 0xE000000000000000;
      if (v85) {
        unint64_t v90 = v85;
      }
      uint64_t v124 = v89;
      unint64_t v125 = v90;
      swift_bridgeObjectRetain();
      AnnotatedFeature.init(feature:annotation:)();
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v83, &demangling cache variable for type metadata for (MLShapedArray<Float>?, String?));
      uint64_t v91 = v126;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v91 = v126;
      }
      uint64_t v38 = (uint64_t)v100;
      unint64_t v92 = *(void *)(v91 + 16);
      if (v92 >= *(void *)(v91 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v91 = v126;
      }
      *(void *)(v91 + 16) = v92 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v120 + 32))(v91+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(void *)(v120 + 72) * v92, v101, v113);
      uint64_t v37 = (uint64_t)v118;
      if (v118[v117]) {
        goto LABEL_39;
      }
    }
    v65[v117] = 1;
    uint64_t v37 = (uint64_t)v65;
LABEL_39:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v37, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>.Iterator);
    return v126;
  }
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result = specialized _NativeDictionary.startIndex.getter();
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return specialized Dictionary.Keys.subscript.getter(result, v3, 0, a1);
  }
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized Collection.first.getter(a1, &demangling cache variable for type metadata for (key: String, value: MLProgram.Block), specialized Dictionary.startIndex.getter, (uint64_t (*)(char *, uint64_t, uint64_t, void, uint64_t))specialized Dictionary.subscript.getter, MEMORY[0x263F53328], a2);
}

{
  return specialized Collection.first.getter(a1, &demangling cache variable for type metadata for (key: String, value: Tensor), specialized Dictionary.startIndex.getter, (uint64_t (*)(char *, uint64_t, uint64_t, void, uint64_t))specialized Dictionary.subscript.getter, MEMORY[0x263F58508], a2);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for FeatureDescription();
  if (v3)
  {
    OUTLINED_FUNCTION_46_4();
    v5();
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return __swift_storeEnumTagSinglePayload(a2, v6, 1, v4);
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of Any(a1 + 32, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Collection.first.getter()
{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Int]>, &lazy protocol witness table cache variable for type Column<[Int]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Int32]>, &lazy protocol witness table cache variable for type Column<[Int32]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[UInt8]>, &lazy protocol witness table cache variable for type Column<[UInt8]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Float16]>, &lazy protocol witness table cache variable for type Column<[Float16]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Float]>, &lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<[Double]>, &lazy protocol witness table cache variable for type Column<[Double]> and conformance Column<A>);
}

{
  char v0;
  void (*v1)(unsigned char *, void);
  id *v2;
  id v3;
  id v4;
  unsigned char v6[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLMultiArray> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLMultiArray>);
  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_26_18();
  OUTLINED_FUNCTION_12_28();
  if (v0) {
    return 1;
  }
  uint64_t v1 = (void (*)(unsigned char *, void))OUTLINED_FUNCTION_24_26();
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  v1(v6, 0);
  return (uint64_t)v3;
}

uint64_t specialized Collection.first.getter(uint64_t *a1, unint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a2, a1);
  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_26_18();
  OUTLINED_FUNCTION_12_28();
  if (v4) {
    return 1;
  }
  uint64_t v5 = (void (*)(unsigned char *, void))OUTLINED_FUNCTION_24_26();
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain();
  v5(v9, 0);
  return v7;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Int32>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>?, a1);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Float16>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>?, a1);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Float>?, a1);
}

{
  return specialized Collection.first.getter(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>, &lazy protocol witness table cache variable for type Column<MLShapedArray<Double>> and conformance Column<A>, &demangling cache variable for type metadata for MLShapedArray<Double>?, a1);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a2, a1);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  OUTLINED_FUNCTION_12_28();
  if (v8)
  {
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v9 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    outlined init with copy of Any?(v10, a4, a3);
    v9(v14, 0);
    uint64_t v11 = 0;
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return __swift_storeEnumTagSinglePayload(a4, v11, 1, v12);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(char *, uint64_t, uint64_t, void, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_41_0();
  uint64_t result = a3(a1);
  if (v17) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v16)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    return __swift_storeEnumTagSinglePayload((uint64_t)a6, 1, 1, v13);
  }
  else
  {
    uint64_t v18 = a4((char *)v6 + *(int *)(v13 + 48), result, v16, 0, a1);
    *uint64_t v6 = v18;
    v6[1] = v19;
    *a6 = v18;
    a6[1] = v19;
    a5(0);
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_46_4();
    v20();
    swift_bridgeObjectRetain();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v6, a2);
    return __swift_storeEnumTagSinglePayload((uint64_t)a6, 0, 1, v13);
  }
}

uint64_t specialized DataFrame.containsColumn<A>(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for AnyColumn();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  Swift::Int_optional v13 = DataFrame.indexOfColumn(_:)(v8);
  if (v13.is_nil) {
    return 0;
  }
  unint64_t value = v13.value;
  uint64_t result = DataFrame.columns.getter();
  if ((value & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (value < *(void *)(result + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, result+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * value, v4);
    swift_bridgeObjectRelease();
    uint64_t v11 = AnyColumn.wrappedElementType.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v11 == MEMORY[0x263F8D310];
  }
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.DataSource.annotatedFeatures()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v0;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v37 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v35 = v7;
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v33 = v8;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_41_0();
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  OUTLINED_FUNCTION_0();
  uint64_t v32 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  uint64_t v13 = v12;
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_27_7();
  uint64_t v40 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_3_0();
  uint64_t v20 = v19 - v18;
  outlined init with copy of MLSoundClassifier.DataSource(v3, v2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v38 = v1;
    char v26 = *(unsigned char *)(v2 + 8);
    uint64_t v24 = *(void *)(v2 + 16);
    uint64_t v23 = *(void *)(v2 + 24);
    uint64_t v41 = *(void *)v2;
    char v42 = v26;
    DataFrame.init(_:)((uint64_t)&v41, v20);
  }
  else
  {
    if (EnumCaseMultiPayload != 4)
    {
      outlined destroy of MLSoundClassifier.DataSource(v2);
      goto LABEL_9;
    }
    uint64_t v38 = v1;
    uint64_t v22 = (uint64_t *)(v2
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters))
                             + 48));
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    OUTLINED_FUNCTION_3();
    v25();
  }
  MEMORY[0x22A672220](v24, v23);
  swift_bridgeObjectRelease();
  static MLSoundClassifier.convertFeatures(_:)();
  uint64_t v27 = OUTLINED_FUNCTION_19_27();
  v28(v27);
  if (v38)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_10();
    v29();
  }
  else
  {
    DataFrame.subscript.getter();
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t, uint64_t))(v32 + 16))(v37, v13, v39);
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))((char *)v37 + *(int *)(v34 + 52), v33, v36);
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVy6CoreML13MLShapedArrayVySfGGAJySSGG_18CreateMLComponents16AnnotatedFeatureVyANSSGs5NeverOTg503_s6i4ML13kl13VySfGSgSSSg18m14MLComponents16opt21ADSSGIgngr_AE_AFtAJs5q43OIegnrzr_TR03_s8e75ML17MLSoundClassifierV10g64SourceO17annotatedFeaturesSay0A12MLComponents16gh4Vy04a4B013cD30tU36GSSGGSgyKFAnMSg_SSSgtXEfU_Tf3nnnpf_nTf1cn_n(v37);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v37, &demangling cache variable for type metadata for Zip2Sequence<Column<MLShapedArray<Float>>, Column<String>>);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v36);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v13, v39);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v40);
  }
LABEL_9:
  OUTLINED_FUNCTION_8_1();
  result.value._rawValue = v30;
  result.is_nil = v31;
  return result;
}

void static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v41 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  OUTLINED_FUNCTION_0();
  uint64_t v46 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v42 = v8;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v43 = (char *)&v40 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v45 = (char *)&v40 - v12;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  OUTLINED_FUNCTION_0();
  uint64_t v44 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33_0();
  uint64_t v16 = v15;
  uint64_t v17 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_49();
  uint64_t v47 = v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v40 - v23;
  uint64_t v25 = v4;
  uint64_t v48 = v2;
  MEMORY[0x22A672220](v4, v2);
  AnyColumn.wrappedElementType.getter();
  char v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  v26(v24, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  if (swift_dynamicCastMetatype())
  {
    uint64_t v40 = v16;
    DataFrame.subscript.getter();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    uint64_t v27 = v45;
    uint64_t v28 = v41;
    Column.map<A>(_:)();
    uint64_t v41 = v28;
    uint64_t v29 = v46;
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v42, v27, v5);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<MLMultiArray> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLMultiArray>);
    swift_bridgeObjectRetain_n();
    uint64_t v30 = v43;
    Column.init<A>(name:contents:)();
    Column.eraseToAnyColumn()();
    Swift::Bool v31 = *(void (**)(char *, uint64_t))(v29 + 8);
    v31(v30, v5);
    uint64_t v32 = OUTLINED_FUNCTION_23_14();
    MEMORY[0x22A672230](v32);
    v31(v27, v5);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v40, v49);
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    OUTLINED_FUNCTION_20_1();
    v33._countAndFlagsBits = 0xD000000000000062;
    String.append(_:)(v33);
    uint64_t v34 = v47;
    MEMORY[0x22A672220](v25, v48);
    AnyColumn.wrappedElementType.getter();
    v26(v34, v17);
    v35._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88_0();
    uint64_t v36 = v50;
    unint64_t v37 = v51;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v38 = OUTLINED_FUNCTION_85();
    *uint64_t v39 = v36;
    v39[1] = v37;
    OUTLINED_FUNCTION_8_4(v38, (uint64_t)v39);
  }
  OUTLINED_FUNCTION_8_1();
}

void specialized stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_9_0();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v95 = v29;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_22_0();
  uint64_t v31 = swift_bridgeObjectRetain();
  a10 = specialized _copyCollectionToContiguousArray<A>(_:)(v31);
  specialized MutableCollection<>.sort(by:)(&a10);
  if (v20)
  {
LABEL_48:
    swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = a10;
    uint64_t v82 = *(void *)(a10 + 16);
    if (v82)
    {
      uint64_t v83 = v27;
      unint64_t v33 = 0;
      uint64_t v84 = a10 + 32;
      uint64_t v85 = v25;
      uint64_t v34 = MEMORY[0x263F8EE78];
      uint64_t v87 = v28;
      uint64_t v81 = a10;
      while (1)
      {
        if (v33 >= *(void *)(v32 + 16))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_48;
        }
        unint64_t v86 = v33;
        Swift::String v35 = (uint64_t *)(v84 + 16 * v33);
        uint64_t v37 = *v35;
        uint64_t v36 = v35[1];
        swift_bridgeObjectRetain_n();
        uint64_t v91 = v37;
        uint64_t v38 = specialized Dictionary.subscript.getter(v37, v36, v85);
        uint64_t v93 = v36;
        swift_bridgeObjectRelease();
        if (!v38) {
          goto LABEL_46;
        }
        uint64_t v96 = v38;
        uint64_t v39 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v38 + 16));
        specialized randomSplit<A>(indices:proportions:generator:)((uint64_t)v39, v83);
        uint64_t v89 = v40;
        swift_release();
        uint64_t v88 = *(void *)(v83 + 16);
        if (v88) {
          break;
        }
LABEL_36:
        unint64_t v33 = v86 + 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = v81;
        if (v86 + 1 == v82) {
          goto LABEL_37;
        }
      }
      unint64_t v41 = 0;
      while (1)
      {
        if (*(void *)(v34 + 16) <= v41)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
          uint64_t v42 = Dictionary.init(dictionaryLiteral:)();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v34 = v79;
          }
          unint64_t v43 = *(void *)(v34 + 16);
          if (v43 >= *(void *)(v34 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v34 = v80;
          }
          *(void *)(v34 + 16) = v43 + 1;
          *(void *)(v34 + 8 * v43 + 32) = v42;
        }
        if (v41 >= *(void *)(v89 + 16))
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        unint64_t v92 = v41;
        uint64_t v44 = *(void *)(v89 + 32 + 8 * v41);
        uint64_t v45 = *(void *)(v44 + 16);
        if (v45) {
          break;
        }
        uint64_t v48 = MEMORY[0x263F8EE78];
LABEL_24:
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          uint64_t v34 = v78;
        }
        if (v92 >= *(void *)(v34 + 16)) {
          goto LABEL_42;
        }
        uint64_t v55 = v21;
        uint64_t v56 = v34;
        uint64_t v57 = v34 + 32;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        a10 = *(void *)(v57 + 8 * v92);
        uint64_t v59 = a10;
        uint64_t v60 = v57;
        *(void *)(v57 + 8 * v92) = 0x8000000000000000;
        unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v93);
        uint64_t v63 = *(void *)(v59 + 16);
        BOOL v64 = (v62 & 1) == 0;
        Swift::Int v65 = v63 + v64;
        if (__OFADD__(v63, v64)) {
          goto LABEL_43;
        }
        unint64_t v66 = v61;
        char v67 = v62;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
        Swift::Bool v68 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v65);
        uint64_t v34 = v56;
        if (v68)
        {
          unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v93);
          if ((v67 & 1) != (v70 & 1)) {
            goto LABEL_47;
          }
          unint64_t v66 = v69;
        }
        uint64_t v71 = a10;
        if (v67)
        {
          uint64_t v72 = *(void *)(a10 + 56);
          swift_bridgeObjectRelease();
          *(void *)(v72 + 8 * v66) = v48;
        }
        else
        {
          OUTLINED_FUNCTION_27_21(a10 + 8 * (v66 >> 6));
          uint64_t v74 = (uint64_t *)(v73 + 16 * v66);
          *uint64_t v74 = v91;
          v74[1] = v93;
          *(void *)(*(void *)(v71 + 56) + 8 * v66) = v48;
          uint64_t v75 = *(void *)(v71 + 16);
          BOOL v76 = __OFADD__(v75, 1);
          uint64_t v77 = v75 + 1;
          if (v76) {
            goto LABEL_44;
          }
          *(void *)(v71 + 16) = v77;
          swift_bridgeObjectRetain();
        }
        *(void *)(v60 + 8 * v92) = v71;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v41 = v92 + 1;
        uint64_t v21 = v55;
        if (v92 + 1 == v88) {
          goto LABEL_36;
        }
      }
      uint64_t v90 = v34;
      a10 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
      uint64_t v46 = v87;
      uint64_t v47 = 0;
      uint64_t v48 = a10;
      unint64_t v94 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
      while (1)
      {
        unint64_t v49 = *(void *)(v44 + 8 * v47 + 32);
        if ((v49 & 0x8000000000000000) != 0) {
          break;
        }
        if (v49 >= *(void *)(v96 + 16)) {
          goto LABEL_40;
        }
        uint64_t v50 = *(void *)(v95 + 72);
        OUTLINED_FUNCTION_46_4();
        v51();
        a10 = v48;
        uint64_t v52 = v21;
        unint64_t v54 = *(void *)(v48 + 16);
        unint64_t v53 = *(void *)(v48 + 24);
        if (v54 >= v53 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
          uint64_t v46 = v87;
          uint64_t v48 = a10;
        }
        ++v47;
        *(void *)(v48 + 16) = v54 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v95 + 32))(v48 + v94 + v54 * v50, v52, v46);
        uint64_t v21 = v52;
        if (v45 == v47)
        {
          swift_bridgeObjectRelease();
          uint64_t v34 = v90;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
LABEL_37:
      swift_release();
    }
    OUTLINED_FUNCTION_8_1();
  }
}

void specialized randomSplit<A>(indices:proportions:generator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v7 = 0xD000000000000024;
    uint64_t v8 = "At least one proportion is required.";
    goto LABEL_16;
  }
  double v5 = COERCE_DOUBLE(specialized Sequence<>.min()(a2));
  if (v6) {
    goto LABEL_46;
  }
  if (v5 < 0.0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v7 = 0xD00000000000002ALL;
    uint64_t v8 = "Only non-negative proportions are allowed.";
LABEL_16:
    *(void *)(v7 + 8) = (unint64_t)(v8 - 32) | 0x8000000000000000;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(unsigned char *)(v7 + 48) = 0;
    swift_willThrow();
    return;
  }
  double v9 = COERCE_DOUBLE(specialized Sequence<>.max()(a2));
  if ((v10 & 1) == 0)
  {
    if (v9 <= 0.0)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      *(void *)uint64_t v7 = 0xD00000000000002DLL;
      uint64_t v8 = "At least one non-zero proportion is required.";
      goto LABEL_16;
    }
    uint64_t v49 = a1;
    specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(a1 + 16));
    specialized MutableCollection<>.shuffle<A>(using:)();
    uint64_t v11 = 0;
    uint64_t v12 = a2 + 32;
    double v13 = 0.0;
    do
    {
      double v14 = *(double *)(v12 + 8 * v11++);
      double v13 = v13 + v14;
    }
    while (v2 != v11);
    uint64_t v52 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v15 = 0;
    unint64_t v16 = *(void *)(v52 + 16);
    do
    {
      double v17 = *(double *)(v12 + 8 * v15);
      unint64_t v18 = *(void *)(v52 + 24);
      unint64_t v19 = v16 + 1;
      if (v16 >= v18 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v16 + 1, 1);
      }
      ++v15;
      *(void *)(v52 + 16) = v19;
      *(double *)(v52 + 8 * v16++ + 32) = v17 / v13;
    }
    while (v2 != v15);
    uint64_t v50 = v2;
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v21 = v20;
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(v20 + 16);
    uint64_t v24 = 8 * v23;
    do
    {
      if (v23 + v22) {
        double v25 = *(double *)(v21 + v24 + 8 * v22 + 24);
      }
      else {
        double v25 = 0.0;
      }
      double v26 = *(double *)(v52 + 32 + 8 * v22);
      if ((unint64_t)(v23 + v22) >= *(void *)(v21 + 24) >> 1)
      {
        OUTLINED_FUNCTION_34_13();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v21 = v27;
      }
      *(void *)(v21 + 16) = v23 + v22 + 1;
      *(double *)(v21 + v24 + 8 * v22++ + 32) = v26 + v25;
    }
    while (v19 != v22);
    swift_release_n();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sis5NeverOTg5058_s8CreateML11randomSplit7indices11proportions9generatorSayi7SiGGAF_i15SdGxztKSGRzlFSiL6XEfU1_SaySiGTf1cn_n(v21, v49);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    uint64_t v51 = v29;
    uint64_t v32 = v29 + 32;
    uint64_t v33 = MEMORY[0x263F8EE78];
    while (v31 < *(void *)(v51 + 16))
    {
      if (v30 < *(void *)(v32 + 8 * v31))
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
        OUTLINED_FUNCTION_25_26();
        unint64_t v37 = v30;
        while ((v30 & 0x8000000000000000) == 0)
        {
          if (v37 >= *(void *)(v35 + 16)) {
            goto LABEL_43;
          }
          unint64_t v38 = *(void *)(v36 + 8 * v37);
          if (v38 >= v34) {
            goto LABEL_44;
          }
          uint64_t v39 = *(void *)(v49 + 32 + 8 * v38);
          unint64_t v40 = *(void *)(v21 + 16);
          if (v40 >= *(void *)(v21 + 24) >> 1)
          {
            char v41 = OUTLINED_FUNCTION_34_13();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41, v42, v43, v44);
            OUTLINED_FUNCTION_25_26();
          }
          *(void *)(v21 + 16) = v40 + 1;
          *(void *)(v21 + 8 * v40 + 32) = v39;
          if ((int64_t)++v37 >= *(void *)(v32 + 8 * v31)) {
            goto LABEL_35;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        break;
      }
      unint64_t v37 = v30;
      uint64_t v21 = MEMORY[0x263F8EE78];
LABEL_35:
      uint64_t v45 = v33;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v33 = v45;
      }
      else
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v33 = v47;
      }
      unint64_t v46 = *(void *)(v33 + 16);
      if (v46 >= *(void *)(v33 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v33 = v48;
      }
      ++v31;
      *(void *)(v33 + 16) = v46 + 1;
      *(void *)(v33 + 8 * v46 + 32) = v21;
      uint64_t v30 = v37;
      if (v31 == v50)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
  }
  __break(1u);
}

void MLSoundClassifier.DataSource.labeledSounds()()
{
  OUTLINED_FUNCTION_9_0();
  type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_33();
  MEMORY[0x270FA5388](v2);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33();
  MEMORY[0x270FA5388](v4);
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = OUTLINED_FUNCTION_23_14();
  outlined init with copy of MLSoundClassifier.DataSource(v9, v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_3();
      v13();
      static UTType.audio.getter();
      static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
      if (v0) {
        goto LABEL_5;
      }
      goto LABEL_10;
    case 2u:
      unint64_t v16 = *(char **)v8;
      goto LABEL_11;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)v8, *(unsigned char *)(v8 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 4u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      (*(void (**)(uint64_t))(v17 + 8))(v8);
LABEL_9:
      static os_log_type_t.info.getter();
      OUTLINED_FUNCTION_20_1();
      log(_:type:)(v18, v19);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
      Dictionary.init(dictionaryLiteral:)();
      goto LABEL_71;
    default:
      OUTLINED_FUNCTION_3();
      v11();
      static UTType.audio.getter();
      static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
      if (v0)
      {
LABEL_5:
        OUTLINED_FUNCTION_7_42();
        v14();
        OUTLINED_FUNCTION_25_10();
        v15();
        goto LABEL_71;
      }
LABEL_10:
      unint64_t v16 = v12;
      OUTLINED_FUNCTION_7_42();
      v20();
      OUTLINED_FUNCTION_25_10();
      v21();
LABEL_11:
      unint64_t v94 = v16 + 64;
      OUTLINED_FUNCTION_8_35();
      unint64_t v25 = v24 & v23;
      int64_t v96 = (unint64_t)(v26 + 63) >> 6;
      uint64_t v27 = MEMORY[0x263F8EE80];
      if (!v25) {
        goto LABEL_13;
      }
LABEL_12:
      uint64_t v99 = (v25 - 1) & v25;
      int64_t v97 = v22;
      unint64_t v28 = __clz(__rbit64(v25)) | (v22 << 6);
      break;
  }
  while (1)
  {
    uint64_t v33 = v16;
    unint64_t v34 = (uint64_t *)(*((void *)v16 + 6) + 16 * v28);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    swift_bridgeObjectRetain();
    uint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v38 = static _AudioUtilities.validateAudioURLs(from:)(v37);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v98 = v27;
    uint64_t v40 = OUTLINED_FUNCTION_48_1();
    unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
    uint64_t v44 = *(void *)(v27 + 16);
    BOOL v45 = (v43 & 1) == 0;
    Swift::Int v46 = v44 + v45;
    if (__OFADD__(v44, v45))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    unint64_t v47 = v42;
    char v48 = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v46))
    {
      uint64_t v49 = OUTLINED_FUNCTION_48_1();
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
      if ((v48 & 1) != (v52 & 1)) {
        goto LABEL_78;
      }
      unint64_t v47 = v51;
    }
    uint64_t v27 = v98;
    if (v48)
    {
      uint64_t v53 = *(void *)(v98 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v53 + 8 * v47) = v38;
    }
    else
    {
      OUTLINED_FUNCTION_27_21(v98 + 8 * (v47 >> 6));
      uint64_t v55 = (void *)(v54 + 16 * v47);
      void *v55 = v36;
      v55[1] = v35;
      *(void *)(*(void *)(v98 + 56) + 8 * v47) = v38;
      uint64_t v56 = *(void *)(v98 + 16);
      BOOL v29 = __OFADD__(v56, 1);
      uint64_t v57 = v56 + 1;
      if (v29) {
        goto LABEL_73;
      }
      *(void *)(v98 + 16) = v57;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v16 = v33;
    int64_t v22 = v97;
    unint64_t v25 = v99;
    if (v99) {
      goto LABEL_12;
    }
LABEL_13:
    BOOL v29 = __OFADD__(v22, 1);
    int64_t v30 = v22 + 1;
    if (v29) {
      goto LABEL_75;
    }
    if (v30 >= v96) {
      break;
    }
    unint64_t v31 = *(void *)&v94[8 * v30];
    if (v31) {
      goto LABEL_23;
    }
    int64_t v32 = v30 + 1;
    if (v30 + 1 >= v96) {
      break;
    }
    unint64_t v31 = *(void *)&v94[8 * v32];
    if (!v31)
    {
      int64_t v32 = v30 + 2;
      if (v30 + 2 >= v96) {
        break;
      }
      unint64_t v31 = *(void *)&v94[8 * v32];
      if (!v31)
      {
        int64_t v32 = v30 + 3;
        if (v30 + 3 >= v96) {
          break;
        }
        unint64_t v31 = *(void *)&v94[8 * v32];
        if (!v31)
        {
          while (1)
          {
            int64_t v30 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_76;
            }
            if (v30 >= v96) {
              goto LABEL_38;
            }
            unint64_t v31 = *(void *)&v94[8 * v30];
            ++v32;
            if (v31) {
              goto LABEL_23;
            }
          }
        }
      }
    }
    int64_t v30 = v32;
LABEL_23:
    uint64_t v99 = (v31 - 1) & v31;
    int64_t v97 = v30;
    unint64_t v28 = __clz(__rbit64(v31)) + (v30 << 6);
  }
LABEL_38:
  swift_release();
  uint64_t v58 = swift_bridgeObjectRetain();
  uint64_t v59 = specialized _NativeDictionary.filter(_:)(v58);
  swift_bridgeObjectRelease();
  uint64_t v93 = v59 + 8;
  OUTLINED_FUNCTION_8_35();
  uint64_t v62 = v61 & v60;
  int64_t v95 = (unint64_t)(v63 + 63) >> 6;
  uint64_t v100 = (uint64_t)v59;
  swift_retain();
  int64_t v64 = 0;
  uint64_t v65 = MEMORY[0x263F8D310];
  if (!v62) {
    goto LABEL_40;
  }
LABEL_39:
  OUTLINED_FUNCTION_23_20();
  for (unint64_t i = v66 | (v64 << 6); ; unint64_t i = __clz(__rbit64(v69)) + (v64 << 6))
  {
    uint64_t v77 = (uint64_t *)(v59[6] + 16 * i);
    uint64_t v78 = *v77;
    uint64_t v79 = (void *)v77[1];
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v80._countAndFlagsBits = v78;
    v80._object = v79;
    String.append(_:)(v80);
    swift_bridgeObjectRelease();
    v81._countAndFlagsBits = 11815;
    v81._object = (void *)0xE200000000000000;
    String.append(_:)(v81);
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_2272CB370;
    *(void *)(v82 + 56) = v65;
    *(void *)(v82 + 32) = 0xD000000000000019;
    *(void *)(v82 + 40) = 0x80000002272D74F0;
    swift_bridgeObjectRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    uint64_t v83 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_2272CB370;
    *(void *)(v84 + 56) = v65;
    *(void *)(v84 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v84 + 32) = 0xD000000000000019;
    *(void *)(v84 + 40) = 0x80000002272D74F0;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v62) {
      goto LABEL_39;
    }
LABEL_40:
    int64_t v68 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      goto LABEL_74;
    }
    if (v68 >= v95) {
      break;
    }
    unint64_t v69 = v93[v68];
    ++v64;
    if (!v69)
    {
      int64_t v64 = v68 + 1;
      OUTLINED_FUNCTION_20_29();
      if (v70 == v29) {
        break;
      }
      OUTLINED_FUNCTION_18_24();
      if (!v69)
      {
        int64_t v64 = v71 + 2;
        OUTLINED_FUNCTION_20_29();
        if (v70 == v29) {
          break;
        }
        OUTLINED_FUNCTION_18_24();
        if (!v69)
        {
          int64_t v64 = v72 + 3;
          OUTLINED_FUNCTION_20_29();
          if (v70 == v29) {
            break;
          }
          OUTLINED_FUNCTION_18_24();
          if (!v69)
          {
            int64_t v64 = v73 + 4;
            OUTLINED_FUNCTION_20_29();
            if (v70 == v29) {
              break;
            }
            OUTLINED_FUNCTION_18_24();
            if (!v69)
            {
              int64_t v75 = v74 + 5;
              if (v75 >= v95) {
                break;
              }
              unint64_t v69 = v93[v75];
              if (!v69)
              {
                while (1)
                {
                  int64_t v64 = v75 + 1;
                  if (__OFADD__(v75, 1)) {
                    break;
                  }
                  OUTLINED_FUNCTION_20_29();
                  if (v70 == v29) {
                    goto LABEL_65;
                  }
                  OUTLINED_FUNCTION_18_24();
                  int64_t v75 = v76 + 1;
                  if (v69) {
                    goto LABEL_62;
                  }
                }
LABEL_77:
                __break(1u);
LABEL_78:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x2271F4378);
              }
              int64_t v64 = v75;
            }
          }
        }
      }
    }
LABEL_62:
    uint64_t v62 = (v69 - 1) & v69;
  }
LABEL_65:
  swift_release();
  if (v59[2])
  {
    swift_bridgeObjectRelease();
    unint64_t v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(69);
    OUTLINED_FUNCTION_20_1();
    v86._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v86);
    uint64_t v87 = specialized Collection.first.getter(v100);
    if (v88) {
      unint64_t v85 = v88;
    }
    else {
      uint64_t v87 = 0;
    }
    unint64_t v89 = v85;
    String.append(_:)(*(Swift::String *)&v87);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_1();
    String.append(_:)(v90);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
    v91._countAndFlagsBits = Dictionary.Keys.description.getter();
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v92 = 0;
    *(void *)(v92 + 8) = 0xE000000000000000;
    *(_OWORD *)(v92 + 16) = 0u;
    *(_OWORD *)(v92 + 32) = 0u;
    *(unsigned char *)(v92 + 48) = 0;
    swift_willThrow();
    swift_release();
  }
  else
  {
    swift_release();
  }
LABEL_71:
  OUTLINED_FUNCTION_8_1();
}

void MLSoundClassifier.DataSource.validate(modelParameters:)(uint64_t a1)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_3_0();
  uint64_t v12 = v11 - v10;
  outlined init with copy of MLSoundClassifier.DataSource(v1, v11 - v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    char v20 = *(unsigned char *)(v12 + 8);
    uint64_t v21 = *(void **)(v12 + 48);
    uint64_t v35 = *(void *)(v12 + 56);
    char v33 = *(unsigned char *)(v12 + 64);
    uint64_t v31 = *(void *)(v12 + 72);
    char v29 = *(unsigned char *)(v12 + 80);
    id v37 = *(id *)v12;
    LOBYTE(v38) = v20;
    id v22 = v37;
    outlined copy of Result<_DataTable, Error>(v37, v20);
    DataFrame.init(_:)((uint64_t)&v37, v7);
    MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)();
    if (v2)
    {
      uint64_t v23 = OUTLINED_FUNCTION_11_37();
      v24(v23);
      outlined consume of Result<_DataTable, Error>(v22, v20);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t v27 = OUTLINED_FUNCTION_11_37();
    v28(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v37 = v21;
    uint64_t v38 = v35;
    char v39 = v33;
    uint64_t v40 = v31;
    char v41 = v29;
    static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)((uint64_t)&v37, a1);
    outlined consume of Result<_DataTable, Error>(v22, v20);
  }
  else if (EnumCaseMultiPayload == 4)
  {
    uint64_t v36 = a1;
    uint64_t v14 = v12
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters))
                 + 80);
    uint64_t v15 = *(void **)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    char v34 = *(unsigned char *)(v14 + 16);
    uint64_t v32 = *(void *)(v14 + 24);
    char v30 = *(unsigned char *)(v14 + 32);
    OUTLINED_FUNCTION_3();
    v17();
    OUTLINED_FUNCTION_23_14();
    MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)();
    if (v2)
    {
      uint64_t v18 = OUTLINED_FUNCTION_10_31();
      v19(v18);
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v37 = v15;
    uint64_t v38 = v16;
    char v39 = v34;
    uint64_t v40 = v32;
    char v41 = v30;
    static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)((uint64_t)&v37, v36);
    uint64_t v25 = OUTLINED_FUNCTION_10_31();
    v26(v25);
  }
  else
  {
    outlined destroy of MLSoundClassifier.DataSource(v12);
  }
}

void MLSoundClassifier.DataSource.validateFeatures(dataFrame:featuresColumnName:labelsColumnName:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v25 = v0;
  uint64_t v2 = v1;
  uint64_t v26 = v3;
  uint64_t v27 = v4;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_22_0();
  type metadata accessor for DataFrame.Rows();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_27_7();
  DataFrame.rows.getter();
  BOOL v7 = specialized Collection.isEmpty.getter();
  OUTLINED_FUNCTION_48_1();
  OUTLINED_FUNCTION_25_10();
  v8();
  if (!v7)
  {
    v12._countAndFlagsBits = v27;
    v12._object = v26;
    Swift::Int_optional v28 = DataFrame.indexOfColumn(_:)(v12);
    if (v28.is_nil)
    {
      OUTLINED_FUNCTION_21_30();
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = v27;
      v20._object = v26;
      String.append(_:)(v20);
      OUTLINED_FUNCTION_88_0();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v9 = OUTLINED_FUNCTION_85();
      *uint64_t v10 = 0xD00000000000002FLL;
      v10[1] = 0x80000002272DA210;
      goto LABEL_9;
    }
    DataFrame.subscript.getter();
    uint64_t v13 = AnyColumn.wrappedElementType.getter();
    if (static MLSoundClassifier.DataSource.isNumericArray(_:)(v13))
    {
      v14._countAndFlagsBits = v2;
      v14._object = v25;
      Swift::Int_optional v29 = DataFrame.indexOfColumn(_:)(v14);
      if (v29.is_nil)
      {
        OUTLINED_FUNCTION_21_30();
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = v2;
        v22._object = v25;
        String.append(_:)(v22);
        OUTLINED_FUNCTION_88_0();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v15 = OUTLINED_FUNCTION_85();
        *uint64_t v16 = 0xD00000000000002FLL;
        v16[1] = 0x80000002272DA210;
        goto LABEL_13;
      }
      if (specialized DataFrame.containsColumn<A>(_:_:)(v2, v25))
      {
LABEL_14:
        uint64_t v23 = OUTLINED_FUNCTION_23_14();
        v24(v23);
        goto LABEL_15;
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_9_36();
      uint64_t v18 = v17 + 11;
      os_log_type_t v19 = "Provided feature table label column is not of string type.";
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_9_36();
      uint64_t v18 = v21 + 17;
      os_log_type_t v19 = "Provided feature table feature column is not of multiarray type.";
    }
    *uint64_t v16 = v18;
    v16[1] = (unint64_t)(v19 - 32) | 0x8000000000000000;
LABEL_13:
    OUTLINED_FUNCTION_8_4(v15, (uint64_t)v16);
    goto LABEL_14;
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_9_36();
  *uint64_t v10 = v11 - 15;
  v10[1] = 0x80000002272DA2D0;
LABEL_9:
  OUTLINED_FUNCTION_8_4(v9, (uint64_t)v10);
LABEL_15:
  OUTLINED_FUNCTION_8_1();
}

BOOL static MLSoundClassifier.DataSource.isNumericArray(_:)(uint64_t a1)
{
  return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>) == a1
      || __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>) == a1
      || type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float?]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double?]) == a1|| __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]) == a1;
}

uint64_t MLSoundClassifier.DataSource.stratifiedSplit(proportions:seed:)(uint64_t a1, uint64_t a2)
{
  MLSoundClassifier.DataSource.labeledSounds()();
  if (v3) {
    return v2;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v6;
    type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject();
    MersenneTwisterGenerator.init(seed:)(a2);
    specialized stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(a1, (uint64_t)var28, v7, v9, v10, v11, v12, v13, v16, v17, v18, v19, v20, v8, var28[1], var28[2], var28[3], var28[4], var28[5],
      var28[6]);
    uint64_t v2 = v14;
    swift_bridgeObjectRelease();
    swift_release();
    return v2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MLSoundClassifier.DataSource.stratifiedSplit<A>(proportions:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MLSoundClassifier.DataSource.labeledSounds()();
  if (!v4)
  {
    uint64_t v8 = v7;
    uint64_t v9 = OUTLINED_FUNCTION_48_1();
    a4 = stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(v9, v10, v8, a3, a4);
    swift_bridgeObjectRelease();
  }
  return a4;
}

void *closure #1 in static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *result;
  if (!*result)
  {
    id v9 = 0;
LABEL_13:
    *a2 = v9;
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2272CBA80;
  uint64_t v6 = *(void *)(v4 + 16);
  *(void *)(v5 + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v6);
  v13[0] = v5;
  specialized Array._endMutation()();
  id v7 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v8 = @nonobjc MLMultiArray.init(shape:dataType:)(v5, 65600);
  if (!v2)
  {
    id v9 = v8;
    uint64_t result = (void *)UnsafeMutableBufferPointer.init(_:)();
    if (v6)
    {
      uint64_t v10 = result;
      uint64_t v11 = v4 + 32;
      while (1)
      {
        outlined init with copy of Any?(v11, (uint64_t)v13, &demangling cache variable for type metadata for Any?);
        if (!v13[3]) {
          break;
        }
        uint64_t result = (void *)swift_dynamicCast();
        if (!result) {
          goto LABEL_9;
        }
        uint64_t v12 = v13[5];
LABEL_10:
        *v10++ = v12;
        v11 += 32;
        if (!--v6) {
          goto LABEL_13;
        }
      }
      uint64_t result = (void *)outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v13, &demangling cache variable for type metadata for Any?);
LABEL_9:
      uint64_t v12 = 0;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t result = (void *)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t type metadata accessor for MLSoundClassifier.DataSource()
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLSoundClassifier.DataSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLSoundClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (uint64_t *)isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    uint64_t v6 = specialized closure #1 in _NativeDictionary.filter(_:)(v5, v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    id v7 = (uint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v7);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)(v7, v4, (uint64_t)v2);
    MEMORY[0x22A676210](v7, -1, -1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t *v2;
  char v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  void v9[2];

  uint64_t v2 = (uint64_t *)isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v5 = (void *)((char *)v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    uint64_t v6 = specialized closure #1 in _NativeDictionary.filter(_:)(v5, v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    id v7 = (uint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v7);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)(v7, v4, (uint64_t)v2);
    MEMORY[0x22A676210](v7, -1, -1);
  }
  return v2;
}

char *initializeBufferWithCopyOfBuffer for MLSoundClassifier.DataSource(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v7 = *a2;
    *(void *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        id v8 = *a2;
        char v9 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v9);
        *(void *)a1 = v8;
        a1[8] = v9;
        uint64_t v10 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v10;
        uint64_t v11 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v11;
        long long v12 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v12;
        a1[80] = *((unsigned char *)a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v15 = v14[12];
        uint64_t v16 = &a1[v15];
        uint64_t v17 = (uint64_t *)((char *)a2 + v15);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        *(void *)uint64_t v16 = v19;
        *((void *)v16 + 1) = v18;
        uint64_t v20 = v14[16];
        uint64_t v21 = &a1[v20];
        Swift::String v22 = (char **)((char *)a2 + v20);
        uint64_t v23 = v22[1];
        *(void *)uint64_t v21 = *v22;
        *((void *)v21 + 1) = v23;
        uint64_t v24 = v14[20];
        uint64_t v25 = &a1[v24];
        uint64_t v26 = (uint64_t)a2 + v24;
        long long v27 = *(_OWORD *)(v26 + 16);
        *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
        *((_OWORD *)v25 + 1) = v27;
        v25[32] = *(unsigned char *)(v26 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      uint64_t v3 = type metadata accessor for URL();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 2:
      goto LABEL_7;
    case 3:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 4:
      uint64_t v5 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for MLSoundClassifier.DataSource(uint64_t a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v5 = *a2;
      char v6 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>((id)*a2, v6);
      *(void *)a1 = v5;
      *(unsigned char *)(a1 + 8) = v6;
      uint64_t v7 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v7;
      uint64_t v8 = a2[5];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v8;
      long long v9 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = v9;
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      uint64_t v10 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v12 = v11[12];
      uint64_t v13 = (void *)(a1 + v12);
      uint64_t v14 = (uint64_t *)((char *)a2 + v12);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      void *v13 = v16;
      v13[1] = v15;
      uint64_t v17 = v11[16];
      uint64_t v18 = (void *)(a1 + v17);
      uint64_t v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v20 = v19[1];
      void *v18 = *v19;
      v18[1] = v20;
      uint64_t v21 = v11[20];
      uint64_t v22 = a1 + v21;
      uint64_t v23 = (uint64_t)a2 + v21;
      long long v24 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *(_OWORD *)(v22 + 16) = v24;
      *(unsigned char *)(v22 + 32) = *(unsigned char *)(v23 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MLSoundClassifier.DataSource(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of MLSoundClassifier.DataSource(a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v5 = *a2;
        char v6 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>((id)*a2, v6);
        *(void *)a1 = v5;
        *(unsigned char *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        long long v7 = *((_OWORD *)a2 + 3);
        long long v8 = *((_OWORD *)a2 + 4);
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(_OWORD *)(a1 + 48) = v7;
        *(_OWORD *)(a1 + 64) = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v9 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v11 = v10[12];
        uint64_t v12 = (void *)(a1 + v11);
        uint64_t v13 = (uint64_t *)((char *)a2 + v11);
        *uint64_t v12 = *v13;
        v12[1] = v13[1];
        uint64_t v14 = v10[16];
        uint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (uint64_t *)((char *)a2 + v14);
        *uint64_t v15 = *v16;
        v15[1] = v16[1];
        uint64_t v17 = v10[20];
        uint64_t v18 = a1 + v17;
        uint64_t v19 = (uint64_t)a2 + v17;
        char v20 = *(unsigned char *)(v19 + 32);
        long long v21 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(_OWORD *)(v18 + 16) = v21;
        *(unsigned char *)(v18 + 32) = v20;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MLSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLSoundClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for MLSoundClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v7 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    long long v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v8[12]] = *(_OWORD *)&a2[v8[12]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    uint64_t v9 = v8[20];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    long long v12 = *((_OWORD *)v11 + 1);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v12;
    v10[32] = v11[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.DataSource((uint64_t)a1);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v7 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      long long v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v8[12]] = *(_OWORD *)&a2[v8[12]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      uint64_t v9 = v8[20];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      long long v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v12;
      v10[32] = v11[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for MLSoundClassifier.DataSource()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t v5 = v4;
    uint64_t v6 = MEMORY[0x263F8CF50] + 64;
    uint64_t v7 = "Q";
    uint64_t result = type metadata accessor for DataFrame();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout();
      long long v8 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (!*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v12) + 16))
    {
      *(uint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (uint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      OUTLINED_FUNCTION_23_20();
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      uint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0) {
      break;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    char v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    void *v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v9;
    }
  }
  char v26 = 0;
  unint64_t v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    BOOL v28 = v24 == v27;
    if (v24 == v27) {
      unint64_t v24 = 0;
    }
    v26 |= v28;
    uint64_t v29 = *(void *)(v12 + 8 * v24);
    if (v29 != -1)
    {
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.Keys.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a4 + 48) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_10_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_27()
{
  return v0;
}

void OUTLINED_FUNCTION_21_30()
{
  *(void *)(v0 - 96) = 0;
  *(void *)(v0 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
}

uint64_t OUTLINED_FUNCTION_24_26()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_26_18()
{
  return dispatch thunk of Collection.endIndex.getter();
}

void OUTLINED_FUNCTION_27_21(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t OUTLINED_FUNCTION_31_15()
{
  return dispatch thunk of Collection.startIndex.getter();
}

BOOL OUTLINED_FUNCTION_34_13()
{
  return (!v1 & v0) != 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B24RtzlFZS2SAK_SSALt_tXEfU_So0R0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v17;
    uint64_t v6 = a1 + 56;
    do
    {
      uint64_t v7 = *(void *)(v6 - 24);
      uint64_t v8 = *(void *)(v6 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = (void *)MEMORY[0x22A674AE0](v7, v8);
      id v10 = objc_msgSend(a2, sel_predictedLabelForString_, v9);

      if (v10)
      {
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v13 = v12;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v11 = 0;
        unint64_t v13 = 0xE000000000000000;
      }
      unint64_t v14 = *(void *)(v17 + 16);
      if (v14 >= *(void *)(v17 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v17 + 16) = v14 + 1;
      uint64_t v15 = v17 + 16 * v14;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v13;
      v6 += 32;
      --v3;
    }
    while (v3);
  }
  else
  {

    return MEMORY[0x263F8EE78];
  }
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4text_SS5labeltG_SSs5NeverOTg50111_s8CreateML16MLTextClassifierV10evaluation2on5usingAA19MLClassifierMetricsVx_So7NLModelCtSlRzSS4text_SS5labelt7B80RtzlFZS2SAK_SSALt_tcfu_33_9884fbf80a26ee2659924377586aa6b9SSAK_SSALtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v59 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int64_t v68 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>)
      - 8;
  MEMORY[0x270FA5388](v73);
  uint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator)
      - 8;
  MEMORY[0x270FA5388](v74);
  char v67 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  uint64_t v7 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v8 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v76 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  outlined init with copy of URL?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  id v10 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  uint64_t v11 = v68;
  v10(v68, v5, v2);
  uint64_t v12 = (uint64_t)v67;
  dispatch thunk of Sequence.makeIterator()();
  v10(v11, &v5[*(int *)(v73 + 60)], v2);
  uint64_t v13 = v74;
  uint64_t v65 = v12 + *(int *)(v74 + 60);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v66 = *(int *)(v13 + 64);
  *(unsigned char *)(v12 + v66) = 0;
  if (v9 < 0)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    uint64_t v64 = v2;
    if (v9)
    {
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
                   + 36);
      uint64_t v15 = (uint64_t *)(v12 + v14);
      uint64_t v16 = v65;
      uint64_t v17 = (uint64_t *)(v65 + v14);
      uint64_t v61 = (uint64_t *)(v12 + v14);
      uint64_t v62 = (void (***)(char *, uint64_t))(v59 + 8);
      uint64_t v60 = (uint64_t *)(v65 + v14);
      uint64_t v63 = (void (**)(char *, uint64_t, uint64_t))(v59 + 16);
      do
      {
        if (*(unsigned char *)(v12 + v66))
        {
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v18 = *v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
        dispatch thunk of Collection.endIndex.getter();
        if (v18 == v75[0]) {
          goto LABEL_52;
        }
        uint64_t v73 = v9;
        uint64_t v19 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v21 = *(void *)(v20 + 8);
        uint64_t v72 = *(void (**)(void, void, void))v20;
        uint64_t v74 = v21;
        swift_bridgeObjectRetain();
        v19(v75, 0);
        uint64_t v22 = v68;
        uint64_t v71 = *v63;
        v71(v68, v12, v2);
        dispatch thunk of Collection.formIndex(after:)();
        char v70 = *v62;
        ((void (*)(char *, uint64_t))v70)(v22, v2);
        uint64_t v23 = *v17;
        dispatch thunk of Collection.endIndex.getter();
        if (v23 == v75[0]) {
          goto LABEL_54;
        }
        unint64_t v24 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
        unint64_t v26 = v25[1];
        unint64_t v69 = (void (**)(void, void, void))*v25;
        swift_bridgeObjectRetain();
        v24(v75, 0);
        v71(v22, v16, v2);
        dispatch thunk of Collection.formIndex(after:)();
        ((void (*)(char *, uint64_t))v70)(v22, v2);
        if (v74) {
          unint64_t v27 = v72;
        }
        else {
          unint64_t v27 = 0;
        }
        if (v74) {
          unint64_t v28 = v74;
        }
        else {
          unint64_t v28 = 0xE000000000000000;
        }
        if (v26) {
          uint64_t v29 = v69;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v26) {
          unint64_t v30 = v26;
        }
        else {
          unint64_t v30 = 0xE000000000000000;
        }
        uint64_t v31 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v31 = v76;
        }
        uint64_t v32 = v73;
        unint64_t v33 = *(void *)(v31 + 16);
        if (v33 >= *(void *)(v31 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v31 = v76;
        }
        *(void *)(v31 + 16) = v33 + 1;
        char v34 = (void *)(v31 + 32 * v33);
        v34[4] = v27;
        v34[5] = v28;
        v34[6] = v29;
        v34[7] = v30;
        uint64_t v9 = v32 - 1;
        uint64_t v2 = v64;
        uint64_t v16 = v65;
        uint64_t v12 = (uint64_t)v67;
        uint64_t v17 = v60;
        uint64_t v15 = v61;
      }
      while (v9);
      if (v67[v66]) {
        goto LABEL_50;
      }
    }
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    uint64_t v35 = (void (**)(void, void, void))(v59 + 16);
    unint64_t v69 = (void (**)(void, void, void))(v59 + 16);
    char v70 = (void (**)(char *, uint64_t))(v59 + 8);
    while (1)
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      uint64_t v37 = *(void *)(v12 + *(int *)(v36 + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v37 == v75[0]) {
        break;
      }
      uint64_t v38 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v40 = v39[1];
      uint64_t v73 = *v39;
      uint64_t v74 = v40;
      swift_bridgeObjectRetain();
      v38(v75, 0);
      uint64_t v41 = v12;
      unint64_t v42 = v68;
      uint64_t v72 = *v35;
      v72(v68, v41, v2);
      dispatch thunk of Collection.formIndex(after:)();
      char v43 = *v70;
      (*v70)(v42, v2);
      uint64_t v44 = v65;
      uint64_t v45 = *(void *)(v65 + *(int *)(v36 + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v45 == v75[0])
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = (uint64_t)v67;
        break;
      }
      Swift::Int v46 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      unint64_t v48 = *(void *)(v47 + 8);
      uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))v47;
      swift_bridgeObjectRetain();
      v46(v75, 0);
      v72(v42, v44, v2);
      dispatch thunk of Collection.formIndex(after:)();
      v43(v42, v2);
      unint64_t v49 = v74;
      if (v74) {
        uint64_t v50 = v73;
      }
      else {
        uint64_t v50 = 0;
      }
      if (!v74) {
        unint64_t v49 = 0xE000000000000000;
      }
      uint64_t v74 = v49;
      if (v48) {
        unint64_t v51 = v71;
      }
      else {
        unint64_t v51 = 0;
      }
      if (v48) {
        unint64_t v52 = v48;
      }
      else {
        unint64_t v52 = 0xE000000000000000;
      }
      uint64_t v53 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v53 = v76;
      }
      unint64_t v54 = *(void *)(v53 + 16);
      uint64_t v35 = v69;
      if (v54 >= *(void *)(v53 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v53 = v76;
      }
      *(void *)(v53 + 16) = v54 + 1;
      uint64_t v55 = (void *)(v53 + 32 * v54);
      uint64_t v56 = v74;
      v55[4] = v50;
      v55[5] = v56;
      v55[6] = v51;
      v55[7] = v52;
      uint64_t v12 = (uint64_t)v67;
      uint64_t v2 = v64;
      if (v67[v66]) {
        goto LABEL_50;
      }
    }
    *(unsigned char *)(v12 + v66) = 1;
LABEL_50:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v12, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
    return v76;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void specialized Set.init<A>(_:)()
{
  OUTLINED_FUNCTION_19_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_57_1();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_41_1();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_16_32();
  uint64_t v4 = Set.init(minimumCapacity:)();
  OUTLINED_FUNCTION_1_49(v4);
  Swift::Int v5 = (uint64_t *)(v0 + *(int *)(v3 + 44));
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v6 = *v5;
  OUTLINED_FUNCTION_5_48();
  if (v6 != v17)
  {
    do
    {
      uint64_t v7 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      Swift::Int v9 = *v8;
      Swift::Int v10 = v8[1];
      swift_bridgeObjectRetain();
      uint64_t v11 = OUTLINED_FUNCTION_31_16();
      v7(v11);
      uint64_t v12 = OUTLINED_FUNCTION_4_52();
      v13(v12);
      OUTLINED_FUNCTION_26_19();
      uint64_t v14 = OUTLINED_FUNCTION_9_37();
      v15(v14);
      specialized Set._Variant.insert(_:)(&v17, v9, v10);
      swift_bridgeObjectRelease();
      uint64_t v16 = *v5;
      OUTLINED_FUNCTION_5_48();
    }
    while (v16 != v17);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>);
  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_12_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t);

  OUTLINED_FUNCTION_19_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_57_1();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Int>>);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_41_1();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Int> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>);
  OUTLINED_FUNCTION_16_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, &demangling cache variable for type metadata for Int?);
  uint64_t v3 = OUTLINED_FUNCTION_38_17();
  OUTLINED_FUNCTION_1_49(v3);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Int> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>);
  OUTLINED_FUNCTION_11_38();
  OUTLINED_FUNCTION_22_25();
  if (!v4)
  {
    OUTLINED_FUNCTION_36_17();
    do
    {
      OUTLINED_FUNCTION_30_23();
      Swift::Int v5 = OUTLINED_FUNCTION_19_28();
      v6(v5);
      uint64_t v7 = OUTLINED_FUNCTION_4_52();
      v8(v7);
      OUTLINED_FUNCTION_48_10();
      Swift::Int v9 = OUTLINED_FUNCTION_9_37();
      v10(v9);
      OUTLINED_FUNCTION_42_17();
      OUTLINED_FUNCTION_11_38();
      OUTLINED_FUNCTION_22_25();
    }
    while (!v4);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Int>>);
  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_12_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (**v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(void);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  Swift::Int v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33();
  Swift::Int v9 = v7 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_24_4();
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  Set.init(minimumCapacity:)();
  uint64_t v13 = *(void *)(v2 + 16);
  if (v13)
  {
    uint64_t v14 = v5 + 16;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v19 = *(void *)(v14 + 56);
    uint64_t v20 = v15;
    Swift::Int v17 = (void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    while (1)
    {
      v20(v0, v16, v3);
      __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
      if (__swift_getEnumTagSinglePayload(v0, 1, v3) == 1) {
        break;
      }
      (*v17)(v9, v0, v3);
      specialized Set._Variant.insert(_:)();
      OUTLINED_FUNCTION_10_4();
      v18();
      v16 += v19;
      if (!--v13) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    __swift_storeEnumTagSinglePayload(v0, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (**v11)(uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t *, void);
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(void);
  char v16;
  uint64_t v17[5];

  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_57_1();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<Int>>>);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_1();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  OUTLINED_FUNCTION_16_32();
  uint64_t v8 = Set.init(minimumCapacity:)();
  OUTLINED_FUNCTION_1_49(v8);
  Swift::Int v9 = (uint64_t *)(v1 + *(int *)(v7 + 44));
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  Swift::Int v10 = *v9;
  OUTLINED_FUNCTION_5_48();
  if (v10 != v17[0])
  {
    uint64_t v11 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    do
    {
      uint64_t v12 = (void (*)(uint64_t *, void))OUTLINED_FUNCTION_28_19();
      uint64_t v14 = *v13;
      v12(v17, 0);
      (*v11)(v0, v1, v2);
      OUTLINED_FUNCTION_26_19();
      OUTLINED_FUNCTION_10_4();
      v15();
      specialized Set._Variant.insert(_:)(v17, v14);
      OUTLINED_FUNCTION_5_48();
      OUTLINED_FUNCTION_22_25();
    }
    while (!v16);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<Int>>>);
  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_12_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t);
  Swift::Int *v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t);
  Swift::Int v14;

  OUTLINED_FUNCTION_19_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_57_1();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_41_1();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_16_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
  uint64_t v3 = OUTLINED_FUNCTION_38_17();
  OUTLINED_FUNCTION_1_49(v3);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_5_48();
  OUTLINED_FUNCTION_22_25();
  if (!v4)
  {
    OUTLINED_FUNCTION_36_17();
    do
    {
      Swift::Int v5 = (void (*)(uint64_t))OUTLINED_FUNCTION_28_19();
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      swift_bridgeObjectRetain();
      Swift::Int v9 = OUTLINED_FUNCTION_31_16();
      v5(v9);
      Swift::Int v10 = OUTLINED_FUNCTION_4_52();
      v11(v10);
      OUTLINED_FUNCTION_26_19();
      uint64_t v12 = OUTLINED_FUNCTION_9_37();
      v13(v12);
      specialized Set._Variant.insert(_:)(&v14, v7, v8);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_48();
      OUTLINED_FUNCTION_22_25();
    }
    while (!v4);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_12_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t);

  OUTLINED_FUNCTION_19_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_57_1();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<Int>>);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_41_1();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_16_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, &demangling cache variable for type metadata for Int?);
  uint64_t v3 = OUTLINED_FUNCTION_38_17();
  OUTLINED_FUNCTION_1_49(v3);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_11_38();
  OUTLINED_FUNCTION_22_25();
  if (!v4)
  {
    OUTLINED_FUNCTION_36_17();
    do
    {
      OUTLINED_FUNCTION_30_23();
      Swift::Int v5 = OUTLINED_FUNCTION_19_28();
      v6(v5);
      uint64_t v7 = OUTLINED_FUNCTION_4_52();
      v8(v7);
      OUTLINED_FUNCTION_48_10();
      Swift::Int v9 = OUTLINED_FUNCTION_9_37();
      v10(v9);
      OUTLINED_FUNCTION_42_17();
      OUTLINED_FUNCTION_11_38();
      OUTLINED_FUNCTION_22_25();
    }
    while (!v4);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0, &demangling cache variable for type metadata for IndexingIterator<Column<Int>>);
  OUTLINED_FUNCTION_27_22();
  OUTLINED_FUNCTION_12_4();
}

void *specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v18 = Set.init(minimumCapacity:)();
  uint64_t result = specialized _NativeDictionary.makeIterator()(v19, a1);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v20;
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    uint64_t v14 = (Swift::Int *)(*(void *)(v3 + 48) + 16 * v9);
    Swift::Int v15 = *v14;
    Swift::Int v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v18;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v5 = v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  Class v7 = static MLTextClassifier.buildOptions(_:)(a3);
  if (!v3)
  {
    Class v8 = v7;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t v11 = MEMORY[0x263F8D310];
    Class v35 = v7;
    if (v9)
    {
      uint64_t v34 = a2;
      uint64_t aBlock = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NSDictionary);
      int64_t v12 = (uint64_t *)(a1 + 56);
      do
      {
        uint64_t v14 = *(v12 - 3);
        uint64_t v13 = *(v12 - 2);
        uint64_t v15 = *(v12 - 1);
        uint64_t v16 = *v12;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_2272CB4D0;
        *(void *)(v17 + 32) = 0x6C6562614CLL;
        *(void *)(v17 + 40) = 0xE500000000000000;
        *(void *)(v17 + 56) = v11;
        *(void *)(v17 + 64) = v15;
        *(void *)(v17 + 72) = v16;
        *(void *)(v17 + 88) = v11;
        *(void *)(v17 + 96) = 0x676E69727453;
        *(void *)(v17 + 104) = 0xE600000000000000;
        *(void *)(v17 + 152) = v11;
        *(void *)(v17 + 120) = v11;
        *(void *)(v17 + 128) = v14;
        *(void *)(v17 + 136) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        NSDictionary.init(dictionaryLiteral:)();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v12 += 4;
        --v9;
      }
      while (v9);
      uint64_t v10 = aBlock;
      Class v8 = v35;
      a2 = v34;
    }
    uint64_t v43 = v10;
    uint64_t v18 = *(void *)(a2 + 16);
    uint64_t v19 = MEMORY[0x263F8EE78];
    if (v18)
    {
      uint64_t v33 = v10;
      uint64_t aBlock = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NSDictionary);
      uint64_t v20 = v18;
      uint64_t v21 = (uint64_t *)(a2 + 56);
      do
      {
        uint64_t v22 = *(v21 - 3);
        uint64_t v23 = *(v21 - 2);
        uint64_t v24 = *(v21 - 1);
        uint64_t v25 = *v21;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_2272CB4D0;
        *(void *)(v26 + 32) = 0x6C6562614CLL;
        *(void *)(v26 + 40) = 0xE500000000000000;
        *(void *)(v26 + 56) = v11;
        *(void *)(v26 + 64) = v24;
        *(void *)(v26 + 72) = v25;
        *(void *)(v26 + 88) = v11;
        *(void *)(v26 + 96) = 0x676E69727453;
        *(void *)(v26 + 104) = 0xE600000000000000;
        *(void *)(v26 + 152) = v11;
        *(void *)(v26 + 120) = v11;
        *(void *)(v26 + 128) = v22;
        *(void *)(v26 + 136) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        NSDictionary.init(dictionaryLiteral:)();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v21 += 4;
        --v20;
      }
      while (v20);
      uint64_t v19 = aBlock;
      Class v8 = v35;
      uint64_t v10 = v33;
    }
    uint64_t v44 = 0;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || v10 < 0
      || (v10 & 0x4000000000000000) != 0)
    {
      uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    }
    uint64_t v42 = v19;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || v19 < 0
      || (v19 & 0x4000000000000000) != 0)
    {
      uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
    }
    uint64_t v40 = implicit closure #1 in closure #1 in closure #3 in static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:);
    uint64_t v41 = 0;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v37 = 1107296256;
    uint64_t v38 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Int) -> (@unowned Unmanaged<CFDictionaryRef>?);
    char v39 = &block_descriptor_7;
    unint64_t v27 = _Block_copy(&aBlock);
    uint64_t v40 = (void *(*)(uint64_t, uint64_t))MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
    uint64_t v41 = 0;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v37 = 1107296256;
    uint64_t v38 = thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ();
    char v39 = &block_descriptor_4;
    unint64_t v28 = _Block_copy(&aBlock);
    uint64_t TrainedModelWithData = NLPClassifierModelCreateTrainedModelWithData();
    _Block_release(v28);
    _Block_release(v27);
    specialized Array._endMutation()();
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    uint64_t v29 = v44;
    if (v44)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      swift_allocError();
      void *v30 = v29;
    }
    else
    {
      if (TrainedModelWithData)
      {

        swift_bridgeObjectRelease();
        return TrainedModelWithData;
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v32 = 0xD00000000000002DLL;
      *(void *)(v32 + 8) = 0x80000002272DA420;
      *(_OWORD *)(v32 + 16) = 0u;
      *(_OWORD *)(v32 + 32) = 0u;
      *(unsigned char *)(v32 + 48) = 0;
    }
    swift_willThrow();

    swift_bridgeObjectRelease();
  }
  return TrainedModelWithData;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Int) -> (@unowned Unmanaged<CFDictionaryRef>?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = v5(a2, a3);
  swift_release();
  return v6;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  int64_t v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  v5(a2, a3);
  swift_release();
}

id MLTextClassifier.model.getter()
{
  return *(id *)(v0 + 16);
}

void key path setter for MLTextClassifier.model : MLTextClassifier(id *a1)
{
}

void MLTextClassifier.model.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

void (*MLTextClassifier.model.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *a1 = v2;
  a1[1] = v1;
  id v3 = v2;
  return MLTextClassifier.model.modify;
}

void MLTextClassifier.model.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(v2 + 16);
  if (a2)
  {
    id v5 = v3;

    *(void *)(v2 + 16) = v5;
  }
  else
  {

    *(void *)(v2 + 16) = v3;
  }
}

uint64_t MLTextClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLTextClassifier();
  return outlined init with copy of MLTextClassifier.ModelParameters(v1 + *(int *)(v3 + 28), a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
}

uint64_t type metadata accessor for MLTextClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier;
  if (!type metadata singleton initialization cache for MLTextClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MLTextClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLTextClassifier();
  return outlined init with copy of MLTextClassifier.ModelParameters(v1 + *(int *)(v3 + 32), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLTextClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLTextClassifier();
  return outlined init with copy of MLTextClassifier.ModelParameters(v1 + *(int *)(v3 + 36), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

#error "2271F8368: call analysis failed (funcsize=60)"

void MLTextClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_9_0();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v27 = OUTLINED_FUNCTION_17(v26);
  MEMORY[0x270FA5388](v27);
  uint64_t v28 = OUTLINED_FUNCTION_24_27();
  OUTLINED_FUNCTION_0();
  uint64_t v30 = v29;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_33();
  uint64_t v34 = v32 - v33;
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&a9 - v36;
  OUTLINED_FUNCTION_20_30();
  specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(v38, v39, v40, v41, v42);
  if (v20)
  {
    outlined destroy of MLTextClassifier.ModelParameters(v25, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v34, v37, v28);
    outlined init with copy of MLTextClassifier.ModelParameters(v25, v21, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
    OUTLINED_FUNCTION_20_30();
    MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)();
    outlined destroy of MLTextClassifier.ModelParameters(v25, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v28);
  }
  OUTLINED_FUNCTION_8_1();
}

void MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  v145 = v0;
  uint64_t v4 = v3;
  v149 = v5;
  v150 = v6;
  uint64_t v141 = v8;
  uint64_t v142 = v7;
  uint64_t v10 = v9;
  int64_t v12 = v11;
  uint64_t v130 = type metadata accessor for DataFrame.Rows();
  OUTLINED_FUNCTION_0();
  uint64_t v131 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v15);
  uint64_t v134 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v17);
  uint64_t v18 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  uint64_t v19 = OUTLINED_FUNCTION_17(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_33();
  uint64_t v132 = v20 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v136 = (uint64_t)&v121 - v23;
  uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v25);
  uint64_t v138 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_33_0();
  uint64_t v139 = v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v29 = OUTLINED_FUNCTION_17(v28);
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_3_0();
  uint64_t v32 = v31 - v30;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n = v34;
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_24_4();
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v37 = OUTLINED_FUNCTION_17(v36);
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_24_27();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_33();
  uint64_t v41 = v39 - v40;
  MEMORY[0x270FA5388](v42);
  uint64_t v147 = v44;
  v148 = (char *)&v121 - v43;
  uint64_t v45 = *(void (**)(void))(v44 + 16);
  uint64_t v143 = v10;
  uint64_t v146 = v46;
  v45();
  uint64_t v47 = type metadata accessor for MLTextClassifier();
  unint64_t v48 = v12;
  uint64_t v49 = (uint64_t)v12 + *(int *)(v47 + 28);
  uint64_t v144 = v4;
  outlined init with copy of MLTextClassifier.ModelParameters(v4, v49, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
  MLTextClassifier.ModelParameters.validateRevision()();
  if (v50)
  {
    uint64_t v51 = v49;
LABEL_3:
    uint64_t v52 = (uint64_t)v148;
LABEL_7:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v56 = v146;
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
    v57(v143, v146);
    v57(v52, v56);
    outlined destroy of MLTextClassifier.ModelParameters(v144, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
LABEL_8:
    uint64_t v58 = v51;
LABEL_9:
    outlined destroy of MLTextClassifier.ModelParameters(v58, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
    OUTLINED_FUNCTION_8_1();
    return;
  }
  uint64_t v127 = v2;
  uint64_t v126 = v32;
  uint64_t v128 = v1;
  uint64_t v129 = v33;
  uint64_t v125 = v41;
  uint64_t v124 = v47;
  v145 = v48;
  uint64_t v53 = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v54 = v49 + *(int *)(v53 + 36);
  if ((*(unsigned char *)(v54 + 8) & 1) == 0 && *(uint64_t *)v54 <= 0)
  {
    uint64_t v51 = v49;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v61 = 0xD000000000000036;
    *(void *)(v61 + 8) = 0x80000002272DA360;
    *(_OWORD *)(v61 + 16) = 0u;
    *(_OWORD *)(v61 + 32) = 0u;
    *(unsigned char *)(v61 + 48) = 0;
    swift_willThrow();
    goto LABEL_3;
  }
  uint64_t v51 = v49;
  MLTextClassifier.ModelParameters.validateCustomEmbeddingURL()();
  uint64_t v52 = (uint64_t)v148;
  if (v55) {
    goto LABEL_7;
  }
  uint64_t v59 = v141;
  static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)();
  uint64_t v60 = 0;
  uint64_t v62 = v128;
  DataFrame.subscript.getter();
  *(void *)&long long v153 = 0;
  *((void *)&v153 + 1) = 0xE000000000000000;
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_29_23();
  uint64_t v64 = *(void *)(v63 - 256);
  uint64_t v123 = v65;
  OptionalColumnProtocol.filled(with:)();
  v122 = *(void (**)(uint64_t, uint64_t))(ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n
                                                 + 8);
  ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n += 8;
  v122(v62, v64);
  specialized Set.init<A>(_:)();
  v145[1].super.isa = v66;
  outlined init with copy of URL?(v49 + *(int *)(v53 + 24), (uint64_t)&v151, &demangling cache variable for type metadata for Any?);
  if (v152)
  {
    outlined init with take of Any(&v151, &v153);
    uint64_t v67 = v139;
    swift_dynamicCast();
    uint64_t v68 = v126;
    MLTextClassifier.ModelParameters.ValidationData.createValidationData(trainingData:textColumn:labelColumn:)(v52, v142, v149, v59, v150, v126);
    uint64_t v138 = v53;
    outlined destroy of MLTextClassifier.ModelParameters(v67, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    uint64_t v69 = v146;
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v68, 1, v146);
    uint64_t v71 = v147;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v68, &demangling cache variable for type metadata for DataFrame?);
      ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n = MEMORY[0x263F8EE78];
      uint64_t v72 = v133;
    }
    else
    {
      uint64_t v139 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 32))(v125, v68, v69);
      uint64_t v73 = v128;
      DataFrame.subscript.getter();
      *(void *)&long long v153 = 0;
      *((void *)&v153 + 1) = 0xE000000000000000;
      OUTLINED_FUNCTION_29_23();
      uint64_t v75 = *(void *)(v74 - 256);
      OptionalColumnProtocol.filled(with:)();
      v122(v73, v75);
      specialized Set.init<A>(_:)();
      uint64_t v77 = v76;
      uint64_t v78 = swift_bridgeObjectRetain();
      LOBYTE(v73) = specialized Set.isSubset(of:)(v78, v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v73 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_21_31(v102, 0xD00000000000003ELL);
        swift_willThrow();
        uint64_t v103 = *(void (**)(void))(v71 + 8);
        OUTLINED_FUNCTION_5_4();
        v103();
        OUTLINED_FUNCTION_5_4();
        v103();
        OUTLINED_FUNCTION_5_4();
        v103();
        outlined destroy of MLTextClassifier.ModelParameters(v144, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
        goto LABEL_14;
      }
      uint64_t v79 = v71;
      uint64_t v72 = v133;
      uint64_t v80 = v125;
      DataFrame.subscript.getter();
      OUTLINED_FUNCTION_50_10();
      DataFrame.subscript.getter();
      uint64_t v81 = v139;
      ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(v72);
      uint64_t v60 = v81;
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v72, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v146);
    }
    DataFrame.subscript.getter();
    OUTLINED_FUNCTION_50_10();
    DataFrame.subscript.getter();
    uint64_t v82 = v60;
    uint64_t v83 = (void *)_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k145OIegnrzr_TR095_s8CreateML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n(v72);
    uint64_t v84 = v82;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v72, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v85 = v51;
    uint64_t v86 = v135;
    outlined init with copy of MLTextClassifier.ModelParameters(v51, v135, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v88 = v136;
    if (EnumCaseMultiPayload != 2)
    {
      outlined destroy of MLTextClassifier.ModelParameters(v86, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
      uint64_t v101 = v147;
      uint64_t v92 = ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n;
      goto LABEL_34;
    }
    outlined init with take of MLTextClassifier.FeatureExtractorType(v86, v136);
    v150 = v83;
    ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n((uint64_t)v83);
    Swift::String v90 = *(void **)(v51 + *(int *)(v138 + 20));
    uint64_t v91 = v147;
    uint64_t v92 = ML16MLTextClassifierV23createAnnotatedFeatures33_F2EF627AFE10E52D0E593E242B327365LL_10a24Column05labelQ0SaySS0P0_X56R0tG11f30Data0T5FrameV_S2StFZSSAH_SSAItM19_ANtXEfU_Tf3nnnpf_nTf1cn_n;
    if (v90)
    {
      uint64_t v139 = v82;
      id v93 = v90;
      uint64_t v94 = v132;
    }
    else
    {
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NLLanguageRecognizer);
      v112 = static NLLanguageRecognizer.dominantLanguage(for:)(ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n);
      uint64_t v139 = v82;
      uint64_t v94 = v132;
      if (v82)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v113 = *(void (**)(void))(v91 + 8);
        OUTLINED_FUNCTION_12_29();
        v113();
        outlined destroy of MLTextClassifier.ModelParameters(v88, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
        OUTLINED_FUNCTION_12_29();
        v113();
        outlined destroy of MLTextClassifier.ModelParameters(v144, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
        goto LABEL_14;
      }
      id v93 = v112;
    }
    swift_bridgeObjectRelease();
    outlined init with copy of MLTextClassifier.ModelParameters(v88, v94, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    id v95 = NLModelEmbeddingType.init(_:)(v94);
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 0x6D6F74737543 && v96 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v98 & 1) == 0)
      {
        type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NLEmbedding);
        uint64_t v99 = v139;
        static NLEmbedding.requestIfNotPresent(embeddingType:language:)((uint64_t)v95, (uint64_t)v93);
        if (v99)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          uint64_t v100 = *(void (**)(void))(v147 + 8);
          OUTLINED_FUNCTION_21_4();
          v100();
          outlined destroy of MLTextClassifier.ModelParameters(v88, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
          OUTLINED_FUNCTION_21_4();
          v100();
          outlined destroy of MLTextClassifier.ModelParameters(v144, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
LABEL_14:
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
        outlined destroy of MLTextClassifier.ModelParameters(v88, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);

        uint64_t v84 = 0;
        goto LABEL_33;
      }
    }
    outlined destroy of MLTextClassifier.ModelParameters(v88, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);

    uint64_t v84 = v139;
LABEL_33:
    uint64_t v85 = v51;
    uint64_t v101 = v147;
    uint64_t v83 = v150;
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v104 = specialized static MLTextClassifier.createClassifier<A, B>(trainingExamples:validatingExamples:modelParameters:)((uint64_t)v83, v92, v85);
    if (v84)
    {
      swift_bridgeObjectRelease();
      v105 = *(void (**)(void))(v101 + 8);
      OUTLINED_FUNCTION_12_29();
      v105();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_12_29();
      v105();
      outlined destroy of MLTextClassifier.ModelParameters(v144, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
      swift_bridgeObjectRelease();
    }
    else
    {
      v106 = (objc_class *)v104;
      swift_bridgeObjectRelease();
      v107 = v145;
      v145->super.isa = v106;
      v108 = v106;
      v109.super.isa = NLModel.asCoreML()().super.isa;
      if (!v110)
      {
        v107[2].super.isa = v109.super.isa;
        uint64_t v114 = v124;
        specialized static MLTextClassifier.evaluation<A>(on:using:)((uint64_t)v83, v108);
        swift_bridgeObjectRelease();
        if (*(void *)(v92 + 16))
        {
          specialized static MLTextClassifier.evaluation<A>(on:using:)(v92, v108);
          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_85();
          OUTLINED_FUNCTION_21_31(v115, 0xD00000000000001CLL);
          *(Class *)((char *)&v107->super.isa + *(int *)(v114 + 36)) = v116;
          type metadata accessor for MLClassifierMetrics.Contents(0);
          swift_storeEnumTagMultiPayload();
        }
        DataFrame.rows.getter();
        uint64_t v117 = DataFrame.Rows.count.getter();
        OUTLINED_FUNCTION_5_4();
        v118();
        uint64_t v119 = v144;
        static MLTextClassifier.reportAnalytics(trainingExampleCount:labelCount:algorithm:language:)(v117, *((void *)v107[1].super.isa + 2), v144, *(void *)(v144 + *(int *)(v138 + 20)));
        uint64_t v120 = *(void (**)(void))(v147 + 8);
        OUTLINED_FUNCTION_10_4();
        v120();
        OUTLINED_FUNCTION_10_4();
        v120();
        uint64_t v58 = v119;
        goto LABEL_9;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v111 = *(void (**)(void))(v101 + 8);
      OUTLINED_FUNCTION_12_29();
      v111();
      OUTLINED_FUNCTION_12_29();
      v111();
      outlined destroy of MLTextClassifier.ModelParameters(v144, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
    }
    goto LABEL_14;
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for MLTextClassifier.ModelParameters();
  id v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_3_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for DataFrame();
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_0();
  uint64_t v13 = v12 - v11;
  LOBYTE(v12) = *((unsigned char *)v3 + 8);
  uint64_t v14 = *v3;
  uint64_t v15 = v12;
  DataFrame.init(_:)((uint64_t)&v14, v13);
  outlined init with copy of MLTextClassifier.ModelParameters(v1, v8, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
  MLTextClassifier.init(trainingData:textColumn:labelColumn:parameters:)();
  outlined destroy of MLTextClassifier.ModelParameters(v1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters);
  OUTLINED_FUNCTION_8_1();
}

void static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v37 = v0;
  uint64_t v34 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33();
  int64_t v12 = (char *)(v10 - v11);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v33 - v14;
  v16._countAndFlagsBits = v5;
  v16._object = v3;
  Swift::Int_optional v38 = DataFrame.indexOfColumn(_:)(v16);
  if (v38.is_nil)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    OUTLINED_FUNCTION_44_14();
    v24._countAndFlagsBits = v23 - 18;
    v24._object = (void *)0x80000002272DA450;
    String.append(_:)(v24);
    uint64_t v25 = v5;
    uint64_t v26 = v3;
LABEL_10:
    String.append(_:)(*(Swift::String *)&v25);
    v30._object = (void *)0x80000002272DA470;
    v30._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v30);
    uint64_t v21 = v35;
    uint64_t v27 = (void *)v36;
    os_log_type_t v20 = static os_log_type_t.error.getter();
    goto LABEL_11;
  }
  DataFrame.subscript.getter();
  AnyColumn.wrappedElementType.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v15, v6);
  if (!swift_dynamicCastMetatype())
  {
    os_log_type_t v20 = static os_log_type_t.error.getter();
    uint64_t v21 = 0xD00000000000002DLL;
    uint64_t v22 = "Text column does not contain string elements.";
    goto LABEL_8;
  }
  uint64_t v18 = v34;
  v19._countAndFlagsBits = v34;
  v19._object = v37;
  Swift::Int_optional v39 = DataFrame.indexOfColumn(_:)(v19);
  if (v39.is_nil)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    OUTLINED_FUNCTION_44_14();
    v29._countAndFlagsBits = v28 - 17;
    v29._object = (void *)0x80000002272DA4D0;
    String.append(_:)(v29);
    uint64_t v25 = v18;
    uint64_t v26 = v37;
    goto LABEL_10;
  }
  DataFrame.subscript.getter();
  AnyColumn.wrappedElementType.getter();
  v17(v12, v6);
  if (!swift_dynamicCastMetatype())
  {
    os_log_type_t v20 = static os_log_type_t.error.getter();
    uint64_t v21 = 0xD00000000000002ELL;
    uint64_t v22 = "Label column does not contain string elements.";
LABEL_8:
    uint64_t v27 = (void *)((unint64_t)(v22 - 32) | 0x8000000000000000);
LABEL_11:
    v31._countAndFlagsBits = v21;
    v31._object = v27;
    log(_:type:)(v31, v20);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v32 = v21;
    *(void *)(v32 + 8) = v27;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(unsigned char *)(v32 + 48) = 1;
    swift_willThrow();
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t specialized Set.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v31 = a2 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  uint64_t v32 = a1 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v12)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (i << 6);
      int64_t v12 = i;
      goto LABEL_23;
    }
    int64_t v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v30) {
      goto LABEL_40;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    int64_t v12 = i + 1;
    if (!v14)
    {
      int64_t v12 = i + 2;
      if (i + 2 >= v30) {
        goto LABEL_40;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = i + 3;
        if (i + 3 >= v30) {
          goto LABEL_40;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v12);
        if (!v14) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_23:
    if (!*(void *)(v4 + 16))
    {
      uint64_t v2 = 0;
      goto LABEL_41;
    }
    uint64_t v16 = v3;
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = v4;
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = v20 & ~v22;
    if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_38;
    }
    uint64_t v24 = *(void *)(v21 + 48);
    uint64_t v25 = (void *)(v24 + 16 * v23);
    BOOL v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v27 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v27;
        if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v28 = (void *)(v24 + 16 * v23);
        BOOL v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_37;
        }
      }
LABEL_38:
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
LABEL_41:
      outlined consume of [String : [Int]].Iterator._Variant();
      return v2;
    }
LABEL_37:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v16;
    uint64_t v4 = v21;
  }
  int64_t v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_40:
    uint64_t v2 = 1;
    goto LABEL_41;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v15);
  if (v14)
  {
    int64_t v12 = i + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v30) {
      goto LABEL_40;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t specialized static MLTextClassifier.evaluation<A>(on:using:)(uint64_t a1, void *a2)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t static MLTextClassifier.reportAnalytics(trainingExampleCount:labelCount:algorithm:language:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t)AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    v8._object = (void *)0x80000002272D5370;
    v8._countAndFlagsBits = 0xD000000000000011;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_textClassifier, v8, (float)a1);
    v9._object = (void *)0x80000002272D7790;
    v9._countAndFlagsBits = 0xD000000000000011;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_textClassifier, v9, (float)a2);
    v10._countAndFlagsBits = MLTextClassifier.ModelAlgorithmType.description.getter();
    int64_t v12 = v11;
    v13._countAndFlagsBits = 0x687469726F676C41;
    v13._object = (void *)0xE90000000000006DLL;
    v10._object = v12;
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_textClassifier, v13, v10);
    swift_bridgeObjectRelease();
    if (a4)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0xD000000000000014;
      unint64_t v16 = 0x80000002272DA3C0;
    }
    v17._countAndFlagsBits = 0x65676175676E614CLL;
    v17._object = (void *)0xE800000000000000;
    unint64_t v18 = v16;
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_textClassifier, v17, *(Swift::String *)&v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t unpackLabeledTexts(_:)(uint64_t a1)
{
  uint64_t v42 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v43 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v4 = swift_bridgeObjectRetain();
  int64_t v5 = 0;
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v44 = v4;
  if (!v3) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (unint64_t i = v8 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v5 << 6))
  {
    uint64_t v13 = *(void *)(*(void *)(v4 + 56) + 8 * i);
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      unint64_t v15 = (uint64_t *)(*(void *)(v4 + 48) + 16 * i);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v18 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v19 = v18;
      v18[2] = v14;
      v18[4] = v16;
      v18[5] = v17;
      if (v14 != 1)
      {
        v18[6] = v16;
        v18[7] = v17;
        uint64_t v20 = v14 - 2;
        if (v20)
        {
          uint64_t v21 = v18 + 9;
          do
          {
            *(v21 - 1) = v16;
            *uint64_t v21 = v17;
            swift_bridgeObjectRetain();
            v21 += 2;
            --v20;
          }
          while (v20);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v22 = v19[2];
    uint64_t v23 = v6[2];
    if (__OFADD__(v23, v22))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v23 + v22 > v6[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v6 = v24;
    }
    if (v19[2])
    {
      uint64_t v25 = v6[2];
      if ((v6[3] >> 1) - v25 < v22) {
        goto LABEL_63;
      }
      unint64_t v26 = (unint64_t)&v6[2 * v25 + 4];
      if ((unint64_t)(v19 + 4) < v26 + 16 * v22 && v26 < (unint64_t)&v19[2 * v22 + 4]) {
        goto LABEL_69;
      }
      swift_arrayInitWithCopy();
      if (v22)
      {
        uint64_t v28 = v6[2];
        BOOL v29 = __OFADD__(v28, v22);
        uint64_t v30 = v28 + v22;
        if (v29) {
          goto LABEL_65;
        }
        v6[2] = v30;
      }
    }
    else if (v22)
    {
      goto LABEL_60;
    }
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void *)(v13 + 16);
    uint64_t v32 = *(void *)(v7 + 16);
    if (__OFADD__(v32, v31)) {
      goto LABEL_61;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v32 + v31 > *(void *)(v7 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v7 = v33;
    }
    if (*(void *)(v13 + 16))
    {
      uint64_t v34 = *(void *)(v7 + 16);
      if ((*(void *)(v7 + 24) >> 1) - v34 < v31) {
        goto LABEL_64;
      }
      unint64_t v35 = v7 + 16 * v34 + 32;
      if (v13 + 32 < v35 + 16 * v31 && v35 < v13 + 32 + 16 * v31) {
        goto LABEL_69;
      }
      swift_arrayInitWithCopy();
      if (v31)
      {
        uint64_t v37 = *(void *)(v7 + 16);
        BOOL v29 = __OFADD__(v37, v31);
        uint64_t v38 = v37 + v31;
        if (v29) {
          goto LABEL_66;
        }
        *(void *)(v7 + 16) = v38;
      }
    }
    else if (v31)
    {
      goto LABEL_62;
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v44;
    if (v3) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_67;
    }
    if (v10 >= v43) {
      goto LABEL_58;
    }
    unint64_t v11 = *(void *)(v42 + 8 * v10);
    ++v5;
    if (!v11)
    {
      int64_t v5 = v10 + 1;
      if (v10 + 1 >= v43) {
        goto LABEL_58;
      }
      unint64_t v11 = *(void *)(v42 + 8 * v5);
      if (!v11)
      {
        int64_t v5 = v10 + 2;
        if (v10 + 2 >= v43) {
          goto LABEL_58;
        }
        unint64_t v11 = *(void *)(v42 + 8 * v5);
        if (!v11) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v3 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v43)
  {
LABEL_58:
    swift_release();
    uint64_t v39 = specialized _copySequenceToContiguousArray<A>(_:)(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = specialized _arrayForceCast<A, B>(_:)(v39);
    swift_release();
    return v40;
  }
  unint64_t v11 = *(void *)(v42 + 8 * v12);
  if (v11)
  {
    int64_t v5 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v5 >= v43) {
      goto LABEL_58;
    }
    unint64_t v11 = *(void *)(v42 + 8 * v5);
    ++v12;
    if (v11) {
      goto LABEL_18;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = unpackLabeledTexts(_:)(a1);
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v8 = *(void *)(v32 + 16);
  if (v8)
  {
    uint64_t v28 = a3;
    uint64_t v29 = a4;
    uint64_t v30 = a5;
    OUTLINED_FUNCTION_35_16();
    uint64_t v9 = v32;
    int64_t v10 = (uint64_t *)(v32 + 40);
    uint64_t v11 = v8;
    do
    {
      uint64_t v13 = *(v10 - 1);
      uint64_t v12 = *v10;
      unint64_t v15 = *(void *)(v32 + 16);
      unint64_t v14 = *(void *)(v32 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v14 >> 1) {
        OUTLINED_FUNCTION_33_16();
      }
      v10 += 4;
      *(void *)(v32 + 16) = v15 + 1;
      uint64_t v16 = v32 + 16 * v15;
      *(void *)(v16 + 32) = v13;
      *(void *)(v16 + 40) = v12;
      --v11;
    }
    while (v11);
    OUTLINED_FUNCTION_35_16();
    uint64_t v17 = v32;
    unint64_t v18 = (uint64_t *)(v32 + 56);
    a4 = v29;
    do
    {
      uint64_t v19 = *(v18 - 1);
      uint64_t v20 = *v18;
      unint64_t v22 = *(void *)(v32 + 16);
      unint64_t v21 = *(void *)(v32 + 24);
      swift_bridgeObjectRetain();
      if (v22 >= v21 >> 1) {
        OUTLINED_FUNCTION_33_16();
      }
      *(void *)(v32 + 16) = v22 + 1;
      uint64_t v23 = v32 + 16 * v22;
      *(void *)(v23 + 32) = v19;
      *(void *)(v23 + 40) = v20;
      v18 += 4;
      --v8;
    }
    while (v8);
    swift_release();
    a5 = v30;
    a3 = v28;
  }
  else
  {
    swift_release();
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Any?])>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2272CB4D0;
  *(void *)(v24 + 32) = a2;
  *(void *)(v24 + 40) = a3;
  swift_bridgeObjectRetain();
  uint64_t v25 = specialized _arrayForceCast<A, B>(_:)(v9);
  swift_bridgeObjectRelease();
  *(void *)(v24 + 48) = v25;
  *(void *)(v24 + 56) = a4;
  *(void *)(v24 + 64) = a5;
  swift_bridgeObjectRetain();
  uint64_t v26 = specialized _arrayForceCast<A, B>(_:)(v17);
  swift_bridgeObjectRelease();
  *(void *)(v24 + 72) = v26;
  return DataFrame.init(dictionaryLiteral:)();
}

void MLTextClassifier.debugDescription.getter()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_3_0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for MLTextClassifier();
  unint64_t v6 = MLTextClassifier.ModelParameters.description.getter();
  uint64_t v8 = v7;
  unint64_t v9 = MLClassifierMetrics.description.getter();
  uint64_t v11 = v10;
  outlined init with copy of MLTextClassifier.ModelParameters(v0 + *(int *)(v5 + 36), v4, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v5) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLTextClassifier.ModelParameters(v4, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  unint64_t v12 = MLClassifierMetrics.description.getter();
  unint64_t v14 = v13;
  v15._countAndFlagsBits = v6;
  v15._object = v8;
  String.append(_:)(v15);
  OUTLINED_FUNCTION_33_9(0xD00000000000001ELL);
  v16._countAndFlagsBits = v9;
  v16._object = v11;
  String.append(_:)(v16);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (v5 <= 1)
  {
    OUTLINED_FUNCTION_33_9(0xD000000000000020);
    v17._countAndFlagsBits = v12;
    v17._object = v14;
    String.append(_:)(v17);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_4();
}

NSAttributedString MLTextClassifier.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  MLTextClassifier.debugDescription.getter();
  result.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = result.super.isa;
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.ModelParameters(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of MLTextClassifier.ModelParameters(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

id sub_2271FA68C@<X0>(void *a1@<X8>)
{
  id result = MLTextClassifier.model.getter();
  *a1 = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLTextClassifier(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    uint64_t v9 = a3[7];
    int64_t v10 = &a1[v9];
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    uint64_t v13 = v4;
    swift_bridgeObjectRetain();
    unint64_t v14 = v8;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v15 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 4, v15))
      {
        uint64_t v16 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v11, v15);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 4, v15);
      }
      uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      Swift::String v18 = &v10[v17];
      uint64_t v19 = &v11[v17];
      *(void *)Swift::String v18 = *(void *)v19;
      v18[8] = v19[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    uint64_t v20 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
    uint64_t v21 = v20[5];
    unint64_t v22 = *(void **)&v11[v21];
    *(void *)&v10[v21] = v22;
    uint64_t v23 = v20[6];
    uint64_t v24 = &v10[v23];
    uint64_t v25 = &v11[v23];
    uint64_t v26 = *(void *)&v11[v23 + 24];
    id v27 = v22;
    if (v26)
    {
      *((void *)v24 + 3) = v26;
      (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
    }
    else
    {
      long long v28 = *((_OWORD *)v25 + 1);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v28;
    }
    uint64_t v29 = v20[7];
    uint64_t v30 = &v10[v29];
    uint64_t v31 = &v11[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)uint64_t v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = v20[8];
    uint64_t v34 = &v10[v33];
    unint64_t v35 = &v11[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = v20[9];
    uint64_t v38 = &v10[v37];
    uint64_t v39 = &v11[v37];
    v38[8] = v39[8];
    *(void *)uint64_t v38 = *(void *)v39;
    uint64_t v40 = a3[8];
    uint64_t v41 = (void **)&v7[v40];
    uint64_t v42 = (void **)((char *)a2 + v40);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      unint64_t v48 = *v42;
      id v49 = v48;
      *uint64_t v41 = v48;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v41 = *v42;
      uint64_t v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v45 = *(int *)(v44 + 20);
      uint64_t v67 = (char *)v42 + v45;
      uint64_t v68 = (char *)v41 + v45;
      uint64_t v46 = type metadata accessor for DataFrame();
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
      v47(v68, v67, v46);
      v47((char *)v41 + *(int *)(v44 + 24), (char *)v42 + *(int *)(v44 + 24), v46);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(v50);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v51 - 8) + 16))(v41, v42, v51);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v52 = a3[9];
    uint64_t v53 = (void **)&v7[v52];
    uint64_t v54 = (void **)((char *)a2 + v52);
    int v55 = swift_getEnumCaseMultiPayload();
    if (v55 == 2)
    {
      uint64_t v62 = *v54;
      id v63 = v62;
      char *v53 = v62;
    }
    else if (v55 == 1)
    {
      char *v53 = *v54;
      uint64_t v56 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v57 = *(int *)(v56 + 20);
      uint64_t v58 = (char *)v53 + v57;
      uint64_t v59 = (char *)v54 + v57;
      uint64_t v60 = type metadata accessor for DataFrame();
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
      v61(v58, v59, v60);
      v61((char *)v53 + *(int *)(v56 + 24), (char *)v54 + *(int *)(v56 + 24), v60);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v64 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v64 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(v64);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v65 - 8) + 16))(v53, v54, v65);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v7;
}

void destroy for MLTextClassifier(id *a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t)a1 + a2[7];
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v5 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v4, 4, v5)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
  }
  uint64_t v6 = type metadata accessor for MLTextClassifier.ModelParameters();

  uint64_t v7 = v4 + *(int *)(v6 + 24);
  if (*(void *)(v7 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (id *)((char *)a1 + a2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      uint64_t v11 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v12 = (char *)v8 + *(int *)(v11 + 20);
      uint64_t v13 = type metadata accessor for DataFrame();
      unint64_t v14 = *(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8);
      v14(v12, v13);
      v14((char *)v8 + *(int *)(v11 + 24), v13);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        int64_t v10 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        int64_t v10 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(v10);
      (*(void (**)(id *, uint64_t))(*(void *)(v15 - 8) + 8))(v8, v15);
      break;
  }
  uint64_t v16 = (id *)((char *)a1 + a2[9]);
  int v17 = swift_getEnumCaseMultiPayload();
  if (v17 == 2)
  {
    uint64_t v19 = *v16;
  }
  else
  {
    if (v17 == 1)
    {
      uint64_t v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v21 = (char *)v16 + *(int *)(v20 + 20);
      uint64_t v22 = type metadata accessor for DataFrame();
      id v27 = *(void (**)(void **, uint64_t))(*(void *)(v22 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v27)((void *)(v22 - 8), v21, v22);
      uint64_t v23 = (void **)((char *)v16 + *(int *)(v20 + 24));
      uint64_t v24 = v22;
      uint64_t v25 = v27;
    }
    else
    {
      if (v17) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        Swift::String v18 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        Swift::String v18 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(v18);
      uint64_t v25 = *(void (**)(void **, uint64_t))(*(void *)(v26 - 8) + 8);
      uint64_t v24 = v26;
      uint64_t v23 = v16;
    }
    v25(v23, v24);
  }
}

void *initializeWithCopy for MLTextClassifier(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = *(void **)(a2 + 16);
  a1[2] = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  int64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  id v13 = v6;
  swift_bridgeObjectRetain();
  id v14 = v8;
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v15 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 4, v15))
    {
      uint64_t v16 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v11, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 4, v15);
    }
    uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    Swift::String v18 = &v10[v17];
    uint64_t v19 = &v11[v17];
    *(void *)Swift::String v18 = *(void *)v19;
    v18[8] = v19[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v20 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v21 = v20[5];
  uint64_t v22 = *(void **)&v11[v21];
  *(void *)&v10[v21] = v22;
  uint64_t v23 = v20[6];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  uint64_t v26 = *(void *)&v11[v23 + 24];
  id v27 = v22;
  if (v26)
  {
    *((void *)v24 + 3) = v26;
    (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
  }
  else
  {
    long long v28 = *((_OWORD *)v25 + 1);
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v28;
  }
  uint64_t v29 = v20[7];
  uint64_t v30 = &v10[v29];
  uint64_t v31 = &v11[v29];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = v20[8];
  uint64_t v34 = &v10[v33];
  unint64_t v35 = &v11[v33];
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v36;
  uint64_t v37 = v20[9];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  v38[8] = v39[8];
  *(void *)uint64_t v38 = *(void *)v39;
  uint64_t v40 = *(int *)(v3 + 32);
  uint64_t v41 = (id *)((char *)v5 + v40);
  uint64_t v42 = (id *)(a2 + v40);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    id v50 = *v42;
    id v51 = *v42;
    *uint64_t v41 = v50;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v41 = *v42;
    uint64_t v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v45 = *(int *)(v44 + 20);
    uint64_t v69 = (char *)v41 + v45;
    uint64_t v70 = v3;
    uint64_t v46 = (char *)v42 + v45;
    uint64_t v47 = type metadata accessor for DataFrame();
    uint64_t v71 = v5;
    unint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
    id v49 = v46;
    uint64_t v3 = v70;
    v48(v69, v49, v47);
    v48((char *)v41 + *(int *)(v44 + 24), (char *)v42 + *(int *)(v44 + 24), v47);
    uint64_t v5 = v71;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(v52);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v53 - 8) + 16))(v41, v42, v53);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v54 = *(int *)(v3 + 36);
  int v55 = (void **)((char *)v5 + v54);
  uint64_t v56 = (void **)(a2 + v54);
  int v57 = swift_getEnumCaseMultiPayload();
  if (v57 == 2)
  {
    uint64_t v64 = *v56;
    id v65 = v64;
    void *v55 = v64;
  }
  else if (v57 == 1)
  {
    void *v55 = *v56;
    uint64_t v58 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v59 = *(int *)(v58 + 20);
    uint64_t v60 = (char *)v55 + v59;
    uint64_t v61 = (char *)v56 + v59;
    uint64_t v62 = type metadata accessor for DataFrame();
    uint64_t v72 = v5;
    id v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
    v63(v60, v61, v62);
    v63((char *)v55 + *(int *)(v58 + 24), (char *)v56 + *(int *)(v58 + 24), v62);
    uint64_t v5 = v72;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v66 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v66 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(v66);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v67 - 8) + 16))(v55, v56, v67);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v5;
}

uint64_t assignWithCopy for MLTextClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(a2 + 16);
  int64_t v10 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  id v11 = v9;

  uint64_t v12 = a3[7];
  id v13 = (char *)(a1 + v12);
  id v14 = (char *)(a2 + v12);
  if (a1 != a2)
  {
    outlined destroy of MLTextClassifier.ModelParameters(a1 + v12, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    uint64_t v15 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v16 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v14, 4, v16))
      {
        uint64_t v17 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 4, v16);
      }
      uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      uint64_t v19 = &v13[v18];
      uint64_t v20 = &v14[v18];
      char v21 = v20[8];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v21;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v22 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v23 = v22[5];
  uint64_t v24 = *(void **)&v13[v23];
  uint64_t v25 = *(void **)&v14[v23];
  *(void *)&v13[v23] = v25;
  id v26 = v25;

  uint64_t v27 = v22[6];
  uint64_t v28 = (uint64_t)&v13[v27];
  uint64_t v29 = (uint64_t *)&v14[v27];
  uint64_t v30 = *(void *)&v14[v27 + 24];
  if (*(void *)&v13[v27 + 24])
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(void *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_15;
  }
  long long v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_15:
  uint64_t v32 = v22[7];
  uint64_t v33 = &v13[v32];
  uint64_t v34 = &v14[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v22[8];
  uint64_t v36 = &v13[v35];
  uint64_t v37 = &v14[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v22[9];
  uint64_t v39 = &v13[v38];
  uint64_t v40 = &v14[v38];
  uint64_t v41 = *(void *)v40;
  v39[8] = v40[8];
  *(void *)uint64_t v39 = v41;
  if (a1 != a2)
  {
    uint64_t v42 = a3[8];
    int64_t v43 = (id *)(a1 + v42);
    uint64_t v44 = (id *)(a2 + v42);
    outlined destroy of MLTextClassifier.ModelParameters(a1 + v42, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      id v50 = *v44;
      id v51 = *v44;
      id *v43 = v50;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      id *v43 = *v44;
      uint64_t v46 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v47 = *(int *)(v46 + 20);
      uint64_t v68 = (char *)v44 + v47;
      uint64_t v69 = (char *)v43 + v47;
      uint64_t v48 = type metadata accessor for DataFrame();
      id v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16);
      v49(v69, v68, v48);
      v49((char *)v43 + *(int *)(v46 + 24), (char *)v44 + *(int *)(v46 + 24), v48);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v52 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(v52);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v53 - 8) + 16))(v43, v44, v53);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v54 = a3[9];
    int v55 = (void **)(a1 + v54);
    uint64_t v56 = (void **)(a2 + v54);
    outlined destroy of MLTextClassifier.ModelParameters(a1 + v54, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int v57 = swift_getEnumCaseMultiPayload();
    if (v57 == 2)
    {
      id v63 = *v56;
      id v64 = v63;
      void *v55 = v63;
    }
    else if (v57 == 1)
    {
      void *v55 = *v56;
      uint64_t v58 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v59 = *(int *)(v58 + 20);
      uint64_t v70 = (char *)v55 + v59;
      uint64_t v60 = (char *)v56 + v59;
      uint64_t v61 = type metadata accessor for DataFrame();
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
      v62(v70, v60, v61);
      v62((char *)v55 + *(int *)(v58 + 24), (char *)v56 + *(int *)(v58 + 24), v61);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        id v65 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        id v65 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(v65);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v66 - 8) + 16))(v55, v56, v66);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLTextClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)(a1 + v6);
  id v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v10 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 4, v10))
    {
      uint64_t v11 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 4, v10);
    }
    uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                 + 48);
    id v13 = &v7[v12];
    id v14 = &v8[v12];
    *(void *)id v13 = *(void *)v14;
    v13[8] = v14[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v15 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  *(void *)&v7[v15[5]] = *(void *)&v8[v15[5]];
  uint64_t v16 = v15[6];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  long long v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *(_OWORD *)&v7[v15[7]] = *(_OWORD *)&v8[v15[7]];
  *(_OWORD *)&v7[v15[8]] = *(_OWORD *)&v8[v15[8]];
  uint64_t v20 = v15[9];
  char v21 = &v7[v20];
  uint64_t v22 = &v8[v20];
  v21[8] = v22[8];
  *(void *)char v21 = *(void *)v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)(v5 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v31 = *(int *)(v30 + 20);
    uint64_t v32 = &v24[v31];
    uint64_t v33 = &v25[v31];
    uint64_t v50 = v5;
    uint64_t v34 = type metadata accessor for DataFrame();
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32);
    v35(v32, v33, v34);
    uint64_t v36 = v34;
    uint64_t v5 = v50;
    v35(&v24[*(int *)(v30 + 24)], &v25[*(int *)(v30 + 24)], v36);
LABEL_14:
    swift_storeEnumTagMultiPayload();
    goto LABEL_16;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v24, v25, v29);
    swift_storeEnumTagMultiPayload();
    goto LABEL_14;
  }
  memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
LABEL_16:
  uint64_t v37 = a3[9];
  uint64_t v38 = (char *)(v5 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  int v40 = swift_getEnumCaseMultiPayload();
  if (v40 == 1)
  {
    *(void *)uint64_t v38 = *(void *)v39;
    uint64_t v43 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v44 = *(int *)(v43 + 20);
    uint64_t v45 = &v38[v44];
    uint64_t v46 = &v39[v44];
    uint64_t v47 = type metadata accessor for DataFrame();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32);
    v48(v45, v46, v47);
    v48(&v38[*(int *)(v43 + 24)], &v39[*(int *)(v43 + 24)], v47);
  }
  else
  {
    if (v40)
    {
      memcpy(v38, v39, *(void *)(*(void *)(v26 - 8) + 64));
      return v5;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v41 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v41);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v38, v39, v42);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v5;
}

void **assignWithTake for MLTextClassifier(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[2];
  a1[2] = a2[2];

  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  if (a1 != a2)
  {
    outlined destroy of MLTextClassifier.ModelParameters((uint64_t)a1 + v8, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    uint64_t v11 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v12 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 4, v12))
      {
        uint64_t v13 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 4, v12);
      }
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      uint64_t v15 = &v9[v14];
      uint64_t v16 = &v10[v14];
      *(void *)uint64_t v15 = *(void *)v16;
      v15[8] = v16[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v17 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v18 = v17[5];
  long long v19 = *(void **)&v9[v18];
  *(void *)&v9[v18] = *(void *)&v10[v18];

  uint64_t v20 = v17[6];
  char v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  if (*(void *)&v9[v20 + 24]) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  }
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)char v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  uint64_t v24 = v17[7];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = v17[8];
  uint64_t v30 = &v9[v29];
  uint64_t v31 = &v10[v29];
  uint64_t v33 = *(void *)v31;
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v17[9];
  uint64_t v35 = &v9[v34];
  uint64_t v36 = &v10[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  if (a1 == a2) {
    return a1;
  }
  uint64_t v37 = a3[8];
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  outlined destroy of MLTextClassifier.ModelParameters((uint64_t)a1 + v37, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v40 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v38 = *(void *)v39;
    uint64_t v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v45 = *(int *)(v44 + 20);
    uint64_t v62 = &v38[v45];
    uint64_t v46 = &v39[v45];
    uint64_t v47 = type metadata accessor for DataFrame();
    id v63 = a3;
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32);
    v48(v62, v46, v47);
    v48(&v38[*(int *)(v44 + 24)], &v39[*(int *)(v44 + 24)], v47);
    a3 = v63;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
      goto LABEL_20;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v38, v39, v43);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  uint64_t v49 = a3[9];
  uint64_t v50 = (char *)a1 + v49;
  id v51 = (char *)a2 + v49;
  outlined destroy of MLTextClassifier.ModelParameters((uint64_t)a1 + v49, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  int v52 = swift_getEnumCaseMultiPayload();
  if (v52 == 1)
  {
    *(void *)uint64_t v50 = *(void *)v51;
    uint64_t v55 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v56 = *(int *)(v55 + 20);
    int v57 = &v50[v56];
    uint64_t v58 = &v51[v56];
    uint64_t v59 = type metadata accessor for DataFrame();
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32);
    v60(v57, v58, v59);
    v60(&v50[*(int *)(v55 + 24)], &v51[*(int *)(v55 + 24)], v59);
  }
  else
  {
    if (v52)
    {
      memcpy(v50, v51, *(void *)(*(void *)(v40 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v53 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v53 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(v53);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v50, v51, v54);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2271FC508);
}

uint64_t sub_2271FC508(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for MLTextClassifier.ModelParameters();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 28);
    }
    else
    {
      uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v11 = *(int *)(a3 + 32);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2271FC5C8);
}

void *sub_2271FC5C8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *id result = (a2 - 1);
  }
  else
  {
    type metadata accessor for MLTextClassifier.ModelParameters();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 28);
    }
    else
    {
      uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v11 = *(int *)(a4 + 32);
    }
    return (void *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for MLTextClassifier()
{
  uint64_t result = type metadata accessor for MLTextClassifier.ModelParameters();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  OUTLINED_FUNCTION_43_5();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      OUTLINED_FUNCTION_43_5();
      if ((v19 & 1) == 0) {
        break;
      }
      uint64_t v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_45_14();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  BOOL v15;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int *v18;
  Swift::Int v19;
  uint64_t v20;

  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  char v11 = ~v9;
  uint64_t v12 = *(void *)(v7 + 48);
  while (1)
  {
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = v13[1];
    if (v14) {
      break;
    }
    if (!a3) {
      goto LABEL_18;
    }
LABEL_15:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (!a3) {
    goto LABEL_15;
  }
  uint64_t v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v18 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
  char v19 = v18[1];
  *a1 = *v18;
  a1[1] = v19;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  int v8 = a3 & 1;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    do
    {
      uint64_t v14 = *(void *)(v9 + 48) + 16 * v12;
      if (*(unsigned char *)(v14 + 8))
      {
        if (v8) {
          goto LABEL_13;
        }
      }
      else if (!v8 && *(void *)v14 == a2)
      {
LABEL_13:
        uint64_t result = 0;
        uint64_t v17 = *(void *)(*v4 + 48) + 16 * v12;
        a2 = *(void *)v17;
        LOBYTE(v8) = *(unsigned char *)(v17 + 8);
        goto LABEL_14;
      }
      unint64_t v12 = (v12 + 1) & v13;
    }
    while (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, v12, isUniquelyReferenced_nonNull_native);
  *uint64_t v4 = v18;
  swift_bridgeObjectRelease();
  uint64_t result = 1;
LABEL_14:
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = v8;
  return result;
}

void specialized Set._Variant.insert(_:)()
{
  OUTLINED_FUNCTION_19_4();
  unint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_24_4();
  uint64_t v11 = *v0;
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  swift_bridgeObjectRetain();
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v27 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v24 = v6;
    uint64_t v25 = ~v13;
    uint64_t v23 = v9;
    uint64_t v17 = *(void (**)(void, void, void))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v26 = *(void *)(v16 + 56);
    while (1)
    {
      uint64_t v18 = v11;
      char v19 = v15;
      v15(v1, *(void *)(v11 + 48) + v26 * v14, v7);
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v21 = *(void (**)(void))(v16 - 8);
      OUTLINED_FUNCTION_21_4();
      v21();
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v25;
      uint64_t v11 = v18;
      uint64_t v15 = v19;
      if (((*(void *)(v27 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v24;
        uint64_t v9 = v23;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_21_4();
    v21();
    v19(v24, *(void *)(*v2 + 48) + v26 * v14, v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v9 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15(v1, v4, v7);
    uint64_t v28 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v1, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6, v4, v7);
  }
  OUTLINED_FUNCTION_12_4();
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  OUTLINED_FUNCTION_47_15();
  if ((v10 & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_45_14();
    id v26 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v26, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v30;
    swift_bridgeObjectRelease();
    *a1 = v26;
    return 1;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = OUTLINED_FUNCTION_25_27();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v17;
        OUTLINED_FUNCTION_47_15();
        if ((v18 & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
          goto LABEL_16;
        }
        char v24 = OUTLINED_FUNCTION_25_27();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v24 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v28 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v28;
  id v29 = v28;
  return 0;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v31 = v0;
    uint64_t v32 = v2 + 56;
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v11 << 6))
    {
      char v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_28:
      *(void *)(v9 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      id v29 = (void *)(*(void *)(v4 + 48) + 16 * v24);
      void *v29 = v19;
      v29[1] = v20;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        break;
      }
      uint64_t v15 = (void *)(v2 + 56);
      unint64_t v16 = *(void *)(v32 + 8 * v14);
      ++v11;
      if (!v16)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_30;
        }
        unint64_t v16 = *(void *)(v32 + 8 * v11);
        if (!v16)
        {
          int64_t v17 = v14 + 2;
          if (v17 >= v8)
          {
LABEL_30:
            swift_release();
            uint64_t v1 = v31;
            goto LABEL_32;
          }
          unint64_t v16 = *(void *)(v32 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v11 >= v8) {
                goto LABEL_30;
              }
              unint64_t v16 = *(void *)(v32 + 8 * v11);
              ++v17;
              if (v16) {
                goto LABEL_18;
              }
            }
          }
          int64_t v11 = v17;
        }
      }
LABEL_18:
      unint64_t v7 = (v16 - 1) & v16;
    }
    swift_release();
    uint64_t v1 = v31;
    uint64_t v15 = (void *)(v2 + 56);
LABEL_32:
    uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
    if (v30 > 63) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v30 + 63) >> 6, v15);
    }
    else {
      *uint64_t v15 = -1 << v30;
    }
    *(void *)(v2 + 16) = 0;
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v2 + 56);
    uint64_t v30 = (void *)(v2 + 56);
    unint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      int64_t v8 = ~(-1 << v7);
    }
    else {
      int64_t v8 = -1;
    }
    uint64_t v9 = v8 & v6;
    char v10 = (unint64_t)(v7 + 63) >> 6;
    int64_t v11 = result + 56;
    if ((v8 & v6) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
    {
      int64_t v17 = *(void *)(v2 + 48) + 16 * i;
      char v18 = *(void *)v17;
      uint64_t v19 = *(unsigned __int8 *)(v17 + 8);
      Hasher.init(_seed:)();
      if (v19 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v18);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          unint64_t v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v11 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = *(void *)(v4 + 48) + 16 * v23;
      *(void *)uint64_t v28 = v18;
      *(unsigned char *)(v28 + 8) = v19;
      ++*(void *)(v4 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_41;
      }
      if (v14 >= v10) {
        goto LABEL_35;
      }
      uint64_t v15 = v30[v14];
      ++v5;
      if (!v15)
      {
        uint64_t v5 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_35;
        }
        uint64_t v15 = v30[v5];
        if (!v15)
        {
          uint64_t v5 = v14 + 2;
          if (v14 + 2 >= v10) {
            goto LABEL_35;
          }
          uint64_t v15 = v30[v5];
          if (!v15)
          {
            unint64_t v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_35:
              id v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                char *v30 = -1 << v29;
              }
              uint64_t v1 = v0;
              *(void *)(v2 + 16) = 0;
              break;
            }
            uint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v5 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_42;
                }
                if (v5 >= v10) {
                  goto LABEL_35;
                }
                uint64_t v15 = v30[v5];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v5 = v16;
          }
        }
      }
LABEL_20:
      uint64_t v9 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    char v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    uint64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      unint64_t v22 = v4;
      unint64_t v23 = *(void *)(v4 + 48);
      unint64_t v24 = *(void *)(v39 + 72);
      char v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      BOOL v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          uint64_t v32 = v28 == v31;
          if (v28 == v31) {
            uint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            id v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      id v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      uint64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      char v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      uint64_t v19 = v37[v18];
      uint64_t v20 = v13 + 1;
      if (!v19)
      {
        uint64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        uint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          uint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                char *v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            uint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                uint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      char v10 = (v19 - 1) & v19;
      uint64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    unint64_t v7 = (uint64_t *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 56);
    int64_t v8 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v27 = -1 << v8;
    uint64_t v28 = v1;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    char v10 = v9 & v6;
    id v29 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v12 = result + 56;
    if ((v9 & v6) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      char v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      uint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          char v25 = v21 == v24;
          if (v21 == v24) {
            uint64_t v21 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v15 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v11) {
        goto LABEL_32;
      }
      unint64_t v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        uint64_t v5 = v15 + 1;
        if (v15 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v16 = v7[v5];
        if (!v16)
        {
          uint64_t v5 = v15 + 2;
          if (v15 + 2 >= v11) {
            goto LABEL_32;
          }
          unint64_t v16 = v7[v5];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, (void *)(v2 + 56));
              }
              else {
                *unint64_t v7 = v27;
              }
              uint64_t v1 = v28;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v5 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v5 >= v11) {
                  goto LABEL_32;
                }
                unint64_t v16 = v7[v5];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v5 = v17;
          }
        }
      }
LABEL_20:
      char v10 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int64_t v28;
  void *v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v28 = (unint64_t)(v5 + 63) >> 6;
    int64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    char v10 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    int64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      unint64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      int64_t v17 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      char v18 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v19 = v17 & ~v18;
      uint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) == 0)
      {
        unint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v18) >> 6;
        while (++v20 != v23 || (v22 & 1) == 0)
        {
          unint64_t v24 = v20 == v23;
          if (v20 == v23) {
            uint64_t v20 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v8 + 8 * v20);
          if (v25 != -1)
          {
            uint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      uint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v8 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(void *)(*(void *)(v4 + 48) + 8 * v21) = v16;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_38;
      }
      if (v13 >= v28) {
        goto LABEL_32;
      }
      int64_t v14 = v29[v13];
      ++v10;
      if (!v14)
      {
        char v10 = v13 + 1;
        if (v13 + 1 >= v28) {
          goto LABEL_32;
        }
        int64_t v14 = v29[v10];
        if (!v14)
        {
          char v10 = v13 + 2;
          if (v13 + 2 >= v28) {
            goto LABEL_32;
          }
          int64_t v14 = v29[v10];
          if (!v14)
          {
            uint64_t v15 = v13 + 3;
            if (v15 >= v28)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v27;
              unint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
              if (v26 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v26 + 63) >> 6, v29);
              }
              else {
                void *v29 = -1 << v26;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            int64_t v14 = v29[v15];
            if (!v14)
            {
              while (1)
              {
                char v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_39;
                }
                if (v10 >= v28) {
                  goto LABEL_32;
                }
                int64_t v14 = v29[v10];
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            char v10 = v15;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v14 - 1) & v14;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v10 = 0;
    if (!v7) {
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      unint64_t result = specialized _NativeSet._unsafeInsertNew(_:)(*(void *)(*(void *)(v2 + 48) + 16 * i), *(void *)(*(void *)(v2 + 48) + 16 * i + 8), v3);
      if (v7) {
        goto LABEL_5;
      }
LABEL_6:
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }
      if (v13 >= v8) {
        goto LABEL_22;
      }
      unint64_t v14 = v5[v13];
      ++v10;
      if (!v14)
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = v5[v10];
        if (!v14)
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v8) {
            goto LABEL_22;
          }
          unint64_t v14 = v5[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v8)
            {
LABEL_22:
              swift_release();
              uint64_t v16 = 1 << *(unsigned char *)(v2 + 32);
              if (v16 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v16 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *uint64_t v5 = -1 << v16;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v14 = v5[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_28;
                }
                if (v10 >= v8) {
                  goto LABEL_22;
                }
                unint64_t v14 = v5[v10];
                ++v15;
                if (v14) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
      }
LABEL_19:
      unint64_t v7 = (v14 - 1) & v14;
    }
  }
  unint64_t result = swift_release();
  *uint64_t v1 = v3;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  unint64_t v7 = (void *)(*(void *)(a3 + 48) + 16 * result);
  *unint64_t v7 = a1;
  v7[1] = a2;
  ++*(void *)(a3 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        char v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  Swift::Int *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v10 > v9)
      {
        unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_23;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    if (a2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    unint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v14 = ~v12;
      int64_t v15 = *(void *)(v11 + 48);
      do
      {
        BOOL v16 = (void *)(v15 + 16 * a3);
        uint64_t v17 = v16[1];
        if (v17)
        {
          if (a2)
          {
            if (*v16 == v8 && v17 == a2) {
              goto LABEL_26;
            }
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_26;
            }
          }
        }
        else if (!a2)
        {
          goto LABEL_26;
        }
        a3 = (a3 + 1) & v14;
      }
      while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_23:
  uint64_t v19 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v20 = (Swift::Int *)(*(void *)(v19 + 48) + 16 * a3);
  *uint64_t v20 = v8;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  uint64_t v22 = __OFADD__(v21, 1);
  BOOL v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v19 + 16) = v23;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, char a2, unint64_t a3, char a4)
{
  Swift::UInt v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if (a4)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_19;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v10 = *v4;
    Hasher.init(_seed:)();
    if (a2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7);
    }
    unint64_t result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
    a3 = result & ~v11;
    if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v12 = ~v11;
      do
      {
        uint64_t v13 = *(void *)(v10 + 48) + 16 * a3;
        if (*(unsigned char *)(v13 + 8))
        {
          if (a2) {
            goto LABEL_22;
          }
        }
        else if ((a2 & 1) == 0 && *(void *)v13 == v7)
        {
          goto LABEL_22;
        }
        a3 = (a3 + 1) & v12;
      }
      while (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_19:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v15 = *(void *)(v14 + 48) + 16 * a3;
  *(void *)uint64_t v15 = v7;
  *(unsigned char *)(v15 + 8) = a2 & 1;
  uint64_t v16 = *(void *)(v14 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
LABEL_22:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v14 + 16) = v18;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    BOOL v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  uint64_t v4 = v3;
  unint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  uint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      BOOL v26 = *(void *)(v25 + 16);
      uint64_t v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v10 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  BOOL v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  BOOL v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_25;
      }
      uint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for NSURLResourceKey(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    void *v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  int64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    int64_t v19 = *(void *)(v2 + 48) + 16 * i;
    uint64_t v20 = *(void *)v19;
    LOBYTE(v19) = *(unsigned char *)(v19 + 8);
    uint64_t v21 = *(void *)(v4 + 48) + 16 * i;
    *(void *)uint64_t v21 = v20;
    *(unsigned char *)(v21 + 8) = v19;
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_25:
    uint64_t v12 = (v17 - 1) & v17;
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  uint64_t v24 = v1;
  uint64_t v25 = (const void *)(v6 + 56);
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, v25, 8 * v10);
  }
  uint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v14 = *(void *)(v6 + 56);
  unint64_t v15 = -1;
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  uint64_t v16 = v15 & v14;
  BOOL v26 = (unint64_t)(v13 + 63) >> 6;
  if ((v15 & v14) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  int64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    uint64_t v22 = *(void *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v22, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v22, v5, v2);
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v26) {
      goto LABEL_28;
    }
    uint64_t v20 = *((void *)v25 + v19);
    ++v12;
    if (!v20)
    {
      uint64_t v12 = v19 + 1;
      if (v19 + 1 >= v26) {
        goto LABEL_28;
      }
      uint64_t v20 = *((void *)v25 + v12);
      if (!v20)
      {
        uint64_t v12 = v19 + 2;
        if (v19 + 2 >= v26) {
          goto LABEL_28;
        }
        uint64_t v20 = *((void *)v25 + v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_25:
    uint64_t v16 = (v20 - 1) & v20;
  }
  uint64_t v21 = v19 + 3;
  if (v21 >= v26)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_30;
  }
  uint64_t v20 = *((void *)v25 + v21);
  if (v20)
  {
    uint64_t v12 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_28;
    }
    uint64_t v20 = *((void *)v25 + v12);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  int64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_25:
    uint64_t v12 = (v17 - 1) & v17;
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * i) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = v2 + 56;
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v29 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain_n();
    int64_t v11 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_27:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      void *v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_33;
      }
      if (v14 >= v29) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v14);
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v29) {
          goto LABEL_29;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15)
        {
          int64_t v16 = v14 + 2;
          if (v16 >= v29)
          {
LABEL_29:
            uint64_t result = swift_release_n();
            uint64_t v1 = v0;
            goto LABEL_31;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v16);
          int64_t v11 = v16;
          if (!v15) {
            break;
          }
        }
      }
LABEL_17:
      unint64_t v8 = (v15 - 1) & v15;
    }
    while (1)
    {
      int64_t v11 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        break;
      }
      if (v11 >= v29) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      ++v16;
      if (v15) {
        goto LABEL_17;
      }
    }
LABEL_34:
    __break(1u);
  }
  else
  {
    uint64_t result = swift_release();
LABEL_31:
    *uint64_t v1 = v4;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  int64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    int64_t v16 = *(void *)(v2 + 48) + 16 * i;
    int64_t v17 = *(void *)v16;
    uint64_t v18 = *(unsigned __int8 *)(v16 + 8);
    Hasher.init(_seed:)();
    if (v18 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v17);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
    {
      unint64_t v23 = 0;
      char v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        unint64_t v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        BOOL v26 = *(void *)(v10 + 8 * v21);
        if (v26 != -1)
        {
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t v27 = *(void *)(v4 + 48) + 16 * v22;
    *(void *)uint64_t v27 = v17;
    *(unsigned char *)(v27 + 8) = v18;
    ++*(void *)(v4 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    unint64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_39;
    }
    if (v13 >= v28) {
      goto LABEL_35;
    }
    int64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      uint64_t v5 = v13 + 1;
      if (v13 + 1 >= v28) {
        goto LABEL_35;
      }
      int64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        uint64_t v5 = v13 + 2;
        if (v13 + 2 >= v28) {
          goto LABEL_35;
        }
        int64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v9 = (v14 - 1) & v14;
  }
  unint64_t v15 = v13 + 3;
  if (v15 >= v28)
  {
LABEL_35:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_37;
  }
  int64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    uint64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_35;
    }
    int64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<URL>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  int64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    unint64_t v22 = v6;
    unint64_t v23 = *(void *)(v6 + 48);
    char v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      int64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        uint64_t v31 = v27 == v30;
        if (v27 == v30) {
          uint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          uint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    uint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      uint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        uint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  unint64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_34;
  }
  uint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    uint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  BOOL v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  int64_t v11 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    int64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      unint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        char v24 = v20 == v23;
        if (v20 == v23) {
          uint64_t v20 = 0;
        }
        v22 |= v24;
        unint64_t v25 = *(void *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v17;
    ++*(void *)(v4 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      uint64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        uint64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    uint64_t v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_6:
  int64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    int64_t v16 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    int64_t v17 = v16;
    String.hash(into:)();
    uint64_t v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) == 0)
    {
      unint64_t v23 = 0;
      char v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        unint64_t v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        BOOL v26 = *(void *)(v8 + 8 * v21);
        if (v26 != -1)
        {
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v8 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v4 + 48) + 8 * v22) = v17;
    ++*(void *)(v4 + 16);
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    unint64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_36;
    }
    if (v13 >= v29) {
      goto LABEL_32;
    }
    int64_t v14 = *(void *)(v28 + 8 * v13);
    ++v10;
    if (!v14)
    {
      uint64_t v10 = v13 + 1;
      if (v13 + 1 >= v29) {
        goto LABEL_32;
      }
      int64_t v14 = *(void *)(v28 + 8 * v10);
      if (!v14)
      {
        uint64_t v10 = v13 + 2;
        if (v13 + 2 >= v29) {
          goto LABEL_32;
        }
        int64_t v14 = *(void *)(v28 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v7 = (v14 - 1) & v14;
  }
  unint64_t v15 = v13 + 3;
  if (v15 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_34;
  }
  int64_t v14 = *(void *)(v28 + 8 * v15);
  if (v14)
  {
    uint64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_32;
    }
    int64_t v14 = *(void *)(v28 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    unint64_t result = swift_release();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    int64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    unint64_t result = specialized _NativeSet._unsafeInsertNew(_:)(v17, v18, v3);
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type String? and conformance <A> A?(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result, void *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = a2[2];
  if (v3 >= v2) {
    uint64_t v4 = *(void *)(result + 16);
  }
  else {
    uint64_t v4 = a2[2];
  }
  if (v4)
  {
    uint64_t v6 = (void *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    unint64_t v7 = (void *)swift_allocObject();
    uint64_t v8 = (uint64_t)(_swift_stdlib_malloc_size(v7) - 32) / 32;
    v7[2] = v4;
    v7[3] = 2 * v8;
    uint64_t result = v6[5];
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    v7[4] = v6[4];
    v7[5] = result;
    uint64_t v11 = v8 & 0x7FFFFFFFFFFFFFFFLL;
    v7[6] = v9;
    v7[7] = v10;
    if (v4 != 1)
    {
      uint64_t v25 = v11;
      unint64_t v26 = v3;
      int64_t v13 = v7 + 8;
      unint64_t v14 = a2 + 7;
      int64_t v15 = v6 + 7;
      unint64_t v16 = 1;
      while (v16 < v2)
      {
        ++v16;
        uint64_t v18 = *(v15 - 1);
        uint64_t v17 = *v15;
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v19 = *(v14 - 1);
        uint64_t v20 = *v14;
        void *v13 = v18;
        v13[1] = v17;
        v13[2] = v19;
        v13[3] = v20;
        v14 += 2;
        v15 += 2;
        v13 += 4;
        if (v4 == v16)
        {
          uint64_t v12 = v25 - v16;
          unint64_t v3 = v26;
          goto LABEL_13;
        }
      }
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v12 = v11 - 1;
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v2 <= v3) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
    if (!v2) {
      goto LABEL_15;
    }
  }
  if (v2 <= v3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  unint64_t v21 = v7[3];
  if (v21 < 2) {
    return (uint64_t)v7;
  }
  unint64_t v22 = v21 >> 1;
  BOOL v23 = __OFSUB__(v22, v12);
  unint64_t v24 = v22 - v12;
  if (!v23)
  {
    v7[2] = v24;
    return (uint64_t)v7;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_1_49(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t OUTLINED_FUNCTION_4_52()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_48()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_9_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_38()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_16_32()
{
  return dispatch thunk of Sequence.underestimatedCount.getter();
}

uint64_t OUTLINED_FUNCTION_19_28()
{
  return v0 - 120;
}

double OUTLINED_FUNCTION_21_31@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 2;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_27()
{
  return type metadata accessor for DataFrame();
}

uint64_t OUTLINED_FUNCTION_25_27()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_26_19()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t OUTLINED_FUNCTION_27_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_19()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_29_23()
{
  return v0 - 120;
}

uint64_t OUTLINED_FUNCTION_30_23()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_31_16()
{
  return v0 - 120;
}

void OUTLINED_FUNCTION_33_16()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_35_16()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_38_17()
{
  return Set.init(minimumCapacity:)();
}

uint64_t OUTLINED_FUNCTION_42_17()
{
  return specialized Set._Variant.insert(_:)(v2 - 120, v0, v1);
}

void OUTLINED_FUNCTION_44_14()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 96) = *(void *)(v0 - 96);
  *(void *)(v0 - 88) = v1;
}

void OUTLINED_FUNCTION_45_14()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_48_10()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_18CreateMLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f71ML17MLSoundClassifierV10DataSourceO13annotatedURLsSay0A12MLComponents16hI51Vy10Foundation3URLVSSGGyKFANSS_SayALGtXEfU_AmLXEfU_SSTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  unint64_t v24 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  uint64_t v8 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v19[1] = v3;
    uint64_t v29 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v12 = v29;
    unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v20 = *(void *)(v13 + 56);
    unint64_t v21 = v14;
    v19[2] = v8 + 32;
    uint64_t v22 = v13;
    unint64_t v16 = v24;
    do
    {
      v21(v16, v15, v25);
      uint64_t v27 = v26;
      uint64_t v28 = a3;
      swift_bridgeObjectRetain();
      AnnotatedFeature.init(feature:annotation:)();
      uint64_t v29 = v12;
      unint64_t v17 = *(void *)(v12 + 16);
      if (v17 >= *(void *)(v12 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v12 = v29;
      }
      *(void *)(v12 + 16) = v17 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v17, v10, v23);
      v15 += v20;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v12;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_36_2();
  uint64_t v6 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_57_4(v3, 1, v6);
  if (v7)
  {
    outlined destroy of DefaultIndices<DataFrame.Rows>(v3, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    OUTLINED_FUNCTION_25_0();
    v8();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  return swift_task_create();
}

void *specialized Sequence.max(by:)(uint64_t a1)
{
  double result = specialized _NativeDictionary.makeIterator()(&v21, a1);
  uint64_t v3 = v22;
  if (!v25)
  {
    int64_t v18 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      goto LABEL_44;
    }
    int64_t v6 = (unint64_t)(v23 + 64) >> 6;
    if (v18 < v6)
    {
      unint64_t v19 = *(void *)(v22 + 8 * v18);
      int64_t v7 = v24 + 1;
      if (v19)
      {
LABEL_28:
        uint64_t v26 = v1;
        unint64_t v4 = (v19 - 1) & v19;
        unint64_t v5 = __clz(__rbit64(v19)) + (v7 << 6);
        goto LABEL_3;
      }
      int64_t v7 = v24 + 2;
      if (v24 + 2 < v6)
      {
        unint64_t v19 = *(void *)(v22 + 8 * v7);
        if (v19) {
          goto LABEL_28;
        }
        int64_t v7 = v24 + 3;
        if (v24 + 3 < v6)
        {
          unint64_t v19 = *(void *)(v22 + 8 * v7);
          if (v19) {
            goto LABEL_28;
          }
          int64_t v7 = v24 + 4;
          if (v24 + 4 < v6)
          {
            unint64_t v19 = *(void *)(v22 + 8 * v7);
            if (v19) {
              goto LABEL_28;
            }
            int64_t v7 = v24 + 5;
            if (v24 + 5 < v6)
            {
              unint64_t v19 = *(void *)(v22 + 8 * v7);
              if (!v19)
              {
                int64_t v20 = v24 + 6;
                do
                {
                  if (v20 >= v6) {
                    goto LABEL_41;
                  }
                  unint64_t v19 = *(void *)(v22 + 8 * v20++);
                }
                while (!v19);
                int64_t v7 = v20 - 1;
              }
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRetain();
    outlined release of _NativeDictionary<NLLanguage, Int>.Iterator((uint64_t)&v21);
    return 0;
  }
  uint64_t v26 = v1;
  unint64_t v4 = (v25 - 1) & v25;
  unint64_t v5 = __clz(__rbit64(v25)) | (v24 << 6);
  int64_t v6 = (unint64_t)(v23 + 64) >> 6;
  int64_t v7 = v24;
LABEL_3:
  uint64_t v8 = v21;
  uint64_t v9 = *(void *)(*(void *)(v21 + 48) + 16 * v5);
  uint64_t v10 = *(void *)(*(void *)(v21 + 56) + 8 * v5);
  swift_bridgeObjectRetain();
  double result = (void *)swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      unint64_t v11 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v13 >= v6) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    int64_t v15 = v7 + 1;
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v6) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v7 + 4;
          if (v7 + 4 >= v6) {
            goto LABEL_24;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v7 + 5;
            if (v7 + 5 >= v6) {
              goto LABEL_24;
            }
            unint64_t v14 = *(void *)(v3 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v7 + 6;
              while (v16 < v6)
              {
                unint64_t v14 = *(void *)(v3 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_21;
                }
              }
LABEL_24:
              swift_release();
              return (void *)v9;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v7 = v15;
LABEL_22:
    uint64_t v17 = *(void *)(*(void *)(v8 + 56) + 8 * v12);
    if (v10 < v17)
    {
      uint64_t v9 = *(void *)(*(void *)(v8 + 48) + 16 * v12);
      swift_bridgeObjectRetain();
      double result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = v17;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t static MLSoundClassifier.createTablePrinter(hasValidation:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_57_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey))
                 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2272CB370;
  uint64_t v9 = (void *)(v8 + v7);
  *uint64_t v9 = 0xD000000000000011;
  v9[1] = 0x80000002272DA5F0;
  static MetricsKey.trainingAccuracy.getter();
  uint64_t v10 = type metadata accessor for MetricsKey();
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
  if (a1)
  {
    static MetricsKey.validationAccuracy.getter();
    OUTLINED_FUNCTION_82_1();
    __swift_storeEnumTagSinglePayload(v12, v13, v14, v10);
    specialized Dictionary.subscript.setter();
  }
  uint64_t v15 = type metadata accessor for TrainingTablePrinter(0);
  *(void *)(a2 + *(int *)(v15 + 24)) = v11;
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(void *)(a2 + *(int *)(v15 + 20)) = OS_os_log.init(subsystem:category:)();
  return Date.init()();
}

uint64_t static MLSoundClassifier.validateFeatureExtractionParameters(featureExtractionParameters:parameters:)(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)a1;
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  uint64_t v7 = type metadata accessor for MLSoundClassifier.ModelParameters();
  if (v4 != *(double *)(a2 + *(int *)(v7 + 24)))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v13 = 0xD00000000000004DLL;
    uint64_t v14 = "Mismatching feature extraction parameters and model parameters: overlapFactor";
LABEL_24:
    *(void *)(v13 + 8) = (unint64_t)(v14 - 32) | 0x8000000000000000;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(unsigned char *)(v13 + 48) = 0;
    return swift_willThrow();
  }
  uint64_t v8 = v7;
  if (*(unsigned char *)(a1 + 16)) {
    double v9 = 0.975;
  }
  else {
    double v9 = *(double *)(a1 + 8);
  }
  if (v9 != MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v13 = 0xD00000000000005FLL;
    uint64_t v14 = "Mismatching feature extraction parameters and model parameters: featureExtractionTimeWindowSize";
    goto LABEL_24;
  }
  outlined init with copy of URL?(a2 + *(int *)(v8 + 28), (uint64_t)v19, &demangling cache variable for type metadata for Any?);
  if (v20)
  {
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v11 = v17;
      char v12 = v18;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t result = outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v19, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v11 = 1;
  char v12 = 1;
LABEL_13:
  if (v6)
  {
    if (v5 == v11) {
      char v15 = v12;
    }
    else {
      char v15 = 0;
    }
    if (v15) {
      return result;
    }
    goto LABEL_23;
  }
  if (v5 == v11) {
    char v16 = v12;
  }
  else {
    char v16 = 1;
  }
  if (v16)
  {
LABEL_23:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v13 = 0xD000000000000051;
    uint64_t v14 = "Mismatching feature extraction parameters and model parameters: feature extractor";
    goto LABEL_24;
  }
  return result;
}

void static MLSoundClassifier.convertFeatures(_:)()
{
  OUTLINED_FUNCTION_9_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double?]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float?]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  OUTLINED_FUNCTION_0();
  uint64_t v20 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_41_0();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_40_0();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  OUTLINED_FUNCTION_0();
  uint64_t v22 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_27_7();
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      Column.mapNonNil<A>(_:)();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v13);
    }
    else
    {
      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
      if (swift_dynamicCastMetatype())
      {
        AnyColumn.assumingType<A>(_:)();
        Column.mapNonNil<A>(_:)();
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v2, v10);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        if (OUTLINED_FUNCTION_34_14())
        {
          OUTLINED_FUNCTION_51_10();
          Column.mapNonNil<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v0, v23);
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
          if (OUTLINED_FUNCTION_34_14())
          {
            OUTLINED_FUNCTION_51_10();
            OUTLINED_FUNCTION_73_1();
            Column.mapNonNil<A>(_:)();
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
            if (OUTLINED_FUNCTION_34_14())
            {
              OUTLINED_FUNCTION_51_10();
              OUTLINED_FUNCTION_73_1();
              OUTLINED_FUNCTION_36_18();
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float?]);
              if (!OUTLINED_FUNCTION_34_14())
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double?]);
                if (!OUTLINED_FUNCTION_34_14())
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
                  if (!OUTLINED_FUNCTION_34_14())
                  {
                    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                    OUTLINED_FUNCTION_85();
                    OUTLINED_FUNCTION_32_2(v19, 0xD000000000000040);
                    swift_willThrow();
                    goto LABEL_19;
                  }
                }
              }
              OUTLINED_FUNCTION_90_0();
              OUTLINED_FUNCTION_73_1();
              OUTLINED_FUNCTION_36_18();
            }
          }
          uint64_t v16 = OUTLINED_FUNCTION_47_4();
          v18(v16, v17);
        }
      }
    }
  }
LABEL_19:
  OUTLINED_FUNCTION_8_1();
}

uint64_t static MLSoundClassifier._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLSoundClassifier._defaultSessionParameters);
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v3, a1);
}

id MLSoundClassifier.model.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLSoundClassifier() + 24));

  return v1;
}

uint64_t type metadata accessor for MLSoundClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier;
  if (!type metadata singleton initialization cache for MLSoundClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void key path setter for MLSoundClassifier.model : MLSoundClassifier(id *a1)
{
}

void MLSoundClassifier.model.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLSoundClassifier() + 24);

  *(void *)(v1 + v3) = a1;
}

void (*MLSoundClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLSoundClassifier() + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  id v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLSoundClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLSoundClassifier();
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v1 + *(int *)(v3 + 28), a1);
}

uint64_t MLSoundClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLSoundClassifier();
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v1 + *(int *)(v3 + 32), a1);
}

uint64_t MLSoundClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLSoundClassifier();
  return _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v1 + *(int *)(v3 + 36), a1);
}

#error "227202CCC: call analysis failed (funcsize=293)"

uint64_t closure #1 in MLSoundClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in MLSoundClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLSoundClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_25();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v0[5], v0[6]);
  OUTLINED_FUNCTION_77_4();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in MLSoundClassifier.init(trainingData:parameters:);
  uint64_t v2 = OUTLINED_FUNCTION_76_3();
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    return v10();
  }
}

uint64_t specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  type metadata accessor for MLClassifierMetrics(0);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  type metadata accessor for MLSoundClassifier.Model();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TrainingTablePrinter(0);
  v4[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[16] = v7;
  v4[17] = *(void *)(v7 + 64);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[24] = swift_task_alloc();
  uint64_t v8 = *(void *)(type metadata accessor for MLSoundClassifier.Classifier() - 8);
  v4[25] = v8;
  v4[26] = *(void *)(v8 + 64);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLSoundClassifier.init<A, B>(training:validation:parameters:), 0, 0);
}

{
  void *v4;
  uint64_t v6;

  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  v4[18] = type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized MLSoundClassifier.init<A, B>(training:validation:parameters:), 0, 0);
}

void specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_92_1(*(void *)(v3 + 24), a2, a3, *(void *)(v3 + 120));
  uint64_t v5 = type metadata accessor for MLSoundClassifier();
  *(void *)(v3 + 232) = v5;
  *(_DWORD *)(v3 + 304) = *(_DWORD *)(v5 + 32);
  MLClassifierMetrics.init()(v5, v6, v7, v8, v9, v10, v11, v12, v71, v72, v73, v74, v75, v76, v78, v80, v81, v82, v84,
    v85);
  *(_DWORD *)(v3 + 308) = *(_DWORD *)(v5 + 36);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v13 = swift_allocError();
  *(void *)(v3 + 240) = OUTLINED_FUNCTION_44_15(v13, v14, 0xD0000000000000C0);
  swift_storeEnumTagMultiPayload();
  MLSoundClassifier.ModelParameters.validate()();
  *(void *)(v3 + 248) = v15;
  if (v15)
  {
    outlined destroy of MLSoundClassifier.ModelParameters(*(void *)(v3 + 48), (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of DefaultIndices<DataFrame.Rows>(*(void *)(v3 + 24), &demangling cache variable for type metadata for TrainingTablePrinter?);
    if (!*(void *)(v3 + 248))
    {
      uint64_t v16 = OUTLINED_FUNCTION_47_16();
      outlined destroy of MLSoundClassifier.ModelParameters(v16, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    }
    uint64_t v17 = OUTLINED_FUNCTION_20_31();
    outlined destroy of MLSoundClassifier.ModelParameters(v17, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLSoundClassifier.ModelParameters(v4, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_46_12();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v20 = *(void *)(v3 + 224);
  uint64_t v21 = *(void *)(v3 + 184);
  uint64_t v22 = *(void *)(v3 + 192);
  uint64_t v86 = *(void *)(v3 + 120);
  uint64_t v23 = v5;
  uint64_t v24 = *(void *)(v3 + 48);
  uint64_t v26 = *(void *)(v3 + 24);
  uint64_t v25 = *(void *)(v3 + 32);
  uint64_t v83 = v23;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v24, v26 + *(int *)(v23 + 28));
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(v25, v3 + 16, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  *(void *)(v3 + 256) = specialized Set.init<A>(_:)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v24, v22);
  uint64_t v28 = swift_bridgeObjectRetain();
  MLSoundClassifier.Classifier.init(labels:parameters:)(v28, v22, v20);
  type metadata accessor for EventCollector();
  swift_allocObject();
  uint64_t v29 = EventCollector.init()();
  *(void *)(v3 + 264) = v29;
  outlined init with copy of URL?(v26, v21, &demangling cache variable for type metadata for TrainingTablePrinter?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v21, 1, v86);
  outlined destroy of DefaultIndices<DataFrame.Rows>(v21, &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v31 = *(void *)(v3 + 168);
    uint64_t v32 = *(void *)(v3 + 176);
    uint64_t v33 = *(void *)(v3 + 120);
    uint64_t v34 = *(void *)(v3 + 24);
    static MLSoundClassifier.createTablePrinter(hasValidation:)(*(void *)(*(void *)(v3 + 40) + 16) != 0, v32);
    OUTLINED_FUNCTION_82_1();
    __swift_storeEnumTagSinglePayload(v35, v36, v37, v33);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v32, v34, &demangling cache variable for type metadata for TrainingTablePrinter?);
    outlined init with copy of URL?(v34, v31, &demangling cache variable for type metadata for TrainingTablePrinter?);
    OUTLINED_FUNCTION_57_4(v31, 1, v33);
    if (v38)
    {
      __break(1u);
      return;
    }
    uint64_t v39 = *(void *)(v3 + 168);
    TrainingTablePrinter.beginTable()();
    outlined destroy of MLSoundClassifier.ModelParameters(v39, (void (*)(void))type metadata accessor for TrainingTablePrinter);
  }
  uint64_t v40 = *(void *)(v3 + 160);
  uint64_t v41 = *(void *)(v3 + 120);
  outlined init with copy of URL?(*(void *)(v3 + 24), v40, &demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_57_4(v40, 1, v41);
  if (!v38)
  {
    uint64_t v42 = *(void *)(v3 + 216);
    uint64_t v43 = *(void *)(v3 + 224);
    uint64_t v45 = *(void *)(v3 + 200);
    uint64_t v44 = *(void *)(v3 + 208);
    uint64_t v46 = *(void *)(v3 + 152);
    uint64_t v47 = *(void *)(v3 + 144);
    uint64_t v48 = *(void *)(v3 + 40);
    outlined init with take of MLSoundClassifier.ModelParameters(*(void *)(v3 + 160), v46);
    uint64_t v49 = *(void *)(v48 + 16);
    *(void *)(v3 + 272) = v49;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v43, v42);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v46, v47);
    unint64_t v50 = (*(unsigned __int8 *)(v45 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    unint64_t v51 = (v44 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = *(void *)(v3 + 216);
    uint64_t v53 = *(void *)(v3 + 144);
    uint64_t v54 = *(void *)(v3 + 128);
    if (v49)
    {
      uint64_t v55 = (uint64_t *)(v3 + 104);
      uint64_t v56 = *(void *)(v3 + 32);
      uint64_t v77 = *(void *)(v3 + 144);
      uint64_t v79 = *(void *)(v3 + 40);
      uint64_t v57 = v29;
      unint64_t v58 = (v52 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v59 = (v58 + *(unsigned __int8 *)(v54 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v60 = swift_allocObject();
      outlined init with take of MLSoundClassifier.ModelParameters(v87, v60 + v50);
      *(void *)(v60 + v51) = v56;
      *(void *)(v60 + v52) = v79;
      *(void *)(v60 + v58) = v57;
      outlined init with take of MLSoundClassifier.ModelParameters(v77, v60 + v59);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v55 = (uint64_t *)(v3 + 112);
      uint64_t v61 = *(void *)(v3 + 32);
      unint64_t v62 = (v52 + *(unsigned __int8 *)(v54 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v63 = swift_allocObject();
      outlined init with take of MLSoundClassifier.ModelParameters(v87, v63 + v50);
      *(void *)(v63 + v51) = v61;
      *(void *)(v63 + v52) = v29;
      outlined init with take of MLSoundClassifier.ModelParameters(v53, v63 + v62);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    specialized blockAwait<A>(_:)();
    uint64_t v64 = *v55;
    uint64_t v65 = *(void *)(v3 + 24);
    swift_release();
    outlined init with take of MLSoundClassifier.ModelParameters(v64, v65 + *(int *)(v83 + 20));
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_2272CB370;
    uint64_t v67 = MEMORY[0x263F8D750];
    *(void *)(v66 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v66 + 64) = v67;
    *(void *)(v66 + 32) = 3;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v68 = (void *)swift_task_alloc();
    *(void *)(v3 + 280) = v68;
    *uint64_t v68 = v3;
    v68[1] = specialized MLSoundClassifier.init<A, B>(training:validation:parameters:);
    OUTLINED_FUNCTION_46_12();
    __asm { BR              X0 }
  }
  outlined destroy of DefaultIndices<DataFrame.Rows>(*(void *)(v3 + 160), &demangling cache variable for type metadata for TrainingTablePrinter?);
  _assertionFailure(_:_:file:line:flags:)();
  OUTLINED_FUNCTION_46_12();
}

uint64_t specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  void *v8 = v7;
  *(void *)(v5 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  else {
    *(void *)(v5 + 296) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_release();
  outlined destroy of MLSoundClassifier.ModelParameters(v3, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLSoundClassifier.ModelParameters(v2, (void (*)(void))type metadata accessor for TrainingTablePrinter);
  outlined destroy of MLSoundClassifier.ModelParameters(v1, (void (*)(void))type metadata accessor for MLSoundClassifier.Classifier);
  outlined destroy of DefaultIndices<DataFrame.Rows>(*(void *)(v0 + 24), &demangling cache variable for type metadata for TrainingTablePrinter?);
  uint64_t v4 = OUTLINED_FUNCTION_100_0();
  outlined destroy of MLSoundClassifier.ModelParameters(v4, (void (*)(void))type metadata accessor for MLSoundClassifier.Model);
  if (!*(void *)(v0 + 248))
  {
    uint64_t v5 = OUTLINED_FUNCTION_47_16();
    outlined destroy of MLSoundClassifier.ModelParameters(v5, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  }
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = v6 + *(int *)(v0 + 308);
  outlined destroy of MLSoundClassifier.ModelParameters(v6 + *(int *)(v0 + 304), (void (*)(void))type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLSoundClassifier.ModelParameters(v7, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  OUTLINED_FUNCTION_91_0();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(*(void *)(v0 + 136), v1);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v1 + *(int *)(v2 + 24));
  uint64_t v6 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  outlined init with copy of URL?(v1 + *(int *)(v2 + 28), v0 + 64, &demangling cache variable for type metadata for Any?);
  if (*(void *)(v0 + 88))
  {
    if (swift_dynamicCast())
    {
      uint64_t v7 = *(void *)(v0 + 96);
      uint64_t v8 = *(unsigned char *)(v0 + 104);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of DefaultIndices<DataFrame.Rows>(v0 + 64, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v7 = 1;
  uint64_t v8 = 1;
LABEL_6:
  outlined destroy of MLSoundClassifier.ModelParameters(*(void *)(v0 + 160), (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  *(void *)(v0 + 16) = v5;
  *(double *)(v0 + 24) = v6;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 48) = v7;
  *(unsigned char *)(v0 + 56) = v8;
  type metadata accessor for MLSoundClassifier.FeatureExtractor();
  swift_allocObject();
  uint64_t v9 = swift_bridgeObjectRetain();
  specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(v9, (_OWORD *)(v0 + 16));
  uint64_t v10 = MLSoundClassifier.FeatureExtractor.extractFeatures()();
  swift_release();
  swift_allocObject();
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(v11, (_OWORD *)(v0 + 16));
  uint64_t v12 = MLSoundClassifier.FeatureExtractor.extractFeatures()();
  uint64_t v13 = *(void *)(v0 + 152);
  uint64_t v14 = *(void *)(v0 + 136);
  swift_release();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v14, v13);
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)
                                                                   + async function pointer to specialized MLSoundClassifier.init<A, B>(training:validation:parameters:));
  swift_task_alloc();
  OUTLINED_FUNCTION_38();
  *(void *)(v0 + 168) = v15;
  *uint64_t v15 = v16;
  v15[1] = specialized MLSoundClassifier.init<A, B>(training:validation:parameters:);
  uint64_t v17 = *(void *)(v0 + 152);
  char v18 = *(void *)(v0 + 112);
  return v20(v18, v10, v12, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_60_0();
  outlined destroy of MLSoundClassifier.ModelParameters(*(void *)(v0 + 136), (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_25();
  outlined destroy of MLSoundClassifier.ModelParameters(*(void *)(v0 + 136), (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

void specialized MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 32);
  *(void *)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 232) + 24)) = *(void *)(v0 + 296);
  specialized MLSoundClassifier.evaluate<A>(on:)(v2);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of MLSoundClassifier.ModelParameters(v5, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLSoundClassifier.ModelParameters(v4, (void (*)(void))type metadata accessor for TrainingTablePrinter);
    outlined destroy of MLSoundClassifier.ModelParameters(v3, (void (*)(void))type metadata accessor for MLSoundClassifier.Classifier);
    outlined destroy of DefaultIndices<DataFrame.Rows>(*(void *)(v0 + 24), &demangling cache variable for type metadata for TrainingTablePrinter?);
    uint64_t v7 = OUTLINED_FUNCTION_100_0();
    outlined destroy of MLSoundClassifier.ModelParameters(v7, (void (*)(void))type metadata accessor for MLSoundClassifier.Model);

    if (!*(void *)(v0 + 248))
    {
      uint64_t v8 = OUTLINED_FUNCTION_47_16();
      outlined destroy of MLSoundClassifier.ModelParameters(v8, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    }
    uint64_t v9 = OUTLINED_FUNCTION_20_31();
    outlined destroy of MLSoundClassifier.ModelParameters(v9, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLSoundClassifier.ModelParameters(v6, (void (*)(void))type metadata accessor for MLClassifierMetrics);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 24) + *(int *)(v0 + 304);
    uint64_t v13 = *(void (**)(uint64_t, void, void))(*(void *)(v0 + 64) + 32);
    v13(v11, *(void *)(v0 + 80), *(void *)(v0 + 56));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    outlined assign with take of MLClassifierMetrics(v11, v12);
    if (v10)
    {
      specialized MLSoundClassifier.evaluate<A>(on:)(*(void *)(v0 + 40));
      v13(*(void *)(v0 + 88), *(void *)(v0 + 72), *(void *)(v0 + 56));
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v14 = OUTLINED_FUNCTION_111_0();
      outlined assign with take of MLClassifierMetrics(v14, v15);
    }
    uint64_t v16 = *(void *)(v0 + 224);
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 48);
    swift_bridgeObjectRelease();
    Swift::Int v19 = OUTLINED_FUNCTION_111_0();
    static MLSoundClassifier.reportAnalytics(trainingExampleCount:classCount:parameters:)(v19, v20, v18);
    swift_release();
    outlined destroy of MLSoundClassifier.ModelParameters(v18, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLSoundClassifier.ModelParameters(v17, (void (*)(void))type metadata accessor for TrainingTablePrinter);
    outlined destroy of MLSoundClassifier.ModelParameters(v16, (void (*)(void))type metadata accessor for MLSoundClassifier.Classifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
  }
  OUTLINED_FUNCTION_46_12();
  __asm { BRAA            X1, X16 }
}

uint64_t closure #2 in MLSoundClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MLSoundClassifier.ModelParameters();
  v4[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in MLSoundClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #2 in MLSoundClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_25();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v0[5], v0[6]);
  OUTLINED_FUNCTION_77_4();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  uint64_t v2 = OUTLINED_FUNCTION_76_3();
  return v3(v2);
}

uint64_t partial apply for closure #2 in MLSoundClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v0 = type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_39_0(v0);
  OUTLINED_FUNCTION_108_1();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_7_1(v1);
  *uint64_t v2 = v3;
  v2[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_52_9();
  return closure #2 in MLSoundClassifier.init(trainingData:parameters:)(v4, v5, v6, v7);
}

uint64_t objectdestroyTm_4()
{
  uint64_t v1 = type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_57_5();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v4;
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int v8 = OUTLINED_FUNCTION_56_10();
  if (v8 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v8 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(OUTLINED_FUNCTION_56_10())
    {
      case 0u:
      case 1u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v9();
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v7, *(unsigned char *)(v7 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v11();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_114_1();
        goto LABEL_5;
      default:
        break;
    }
  }
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  if (*(void *)(v10 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v10);
  }

  return MEMORY[0x270FA0238](v0, v4 + v6, v3 | 7);
}

uint64_t partial apply for closure #1 in MLSoundClassifier.init(trainingData:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v0 = type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_39_0(v0);
  OUTLINED_FUNCTION_108_1();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_7_1(v1);
  *uint64_t v2 = v3;
  v2[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_52_9();
  return closure #1 in MLSoundClassifier.init(trainingData:parameters:)(v4, v5, v6, v7);
}

uint64_t MLSoundClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_6_19();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_27_7();
  *uint64_t v3 = a1;
  swift_storeEnumTagMultiPayload();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(a2, v2);
  MLSoundClassifier.init(trainingData:parameters:)(v3, v2);
  return outlined destroy of MLSoundClassifier.ModelParameters(a2, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
}

uint64_t specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = *(void *)(type metadata accessor for TrainingTablePrinter(0) - 8);
  v6[8] = v7;
  v6[9] = *(void *)(v7 + 64);
  v6[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:), 0, 0);
}

uint64_t specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v0[7], v1);
  OUTLINED_FUNCTION_87_1();
  uint64_t v4 = swift_allocObject();
  v0[11] = v4;
  *(void *)(v4 + 16) = v3;
  outlined init with take of MLSoundClassifier.ModelParameters(v1, v4 + v2);
  OUTLINED_FUNCTION_85_0();
  swift_task_alloc();
  OUTLINED_FUNCTION_38();
  v0[12] = v5;
  *uint64_t v5 = v6;
  v5[1] = specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:);
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[2];
  return v11(v9, v7, v8, partial apply for closure #1 in closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:), v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

uint64_t specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = *(void *)(type metadata accessor for TrainingTablePrinter(0) - 8);
  v5[7] = v6;
  v5[8] = *(void *)(v6 + 64);
  v5[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:), 0, 0);
}

uint64_t specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[5];
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v0[6], v1);
  OUTLINED_FUNCTION_87_1();
  uint64_t v4 = swift_allocObject();
  v0[10] = v4;
  *(void *)(v4 + 16) = v3;
  outlined init with take of MLSoundClassifier.ModelParameters(v1, v4 + v2);
  OUTLINED_FUNCTION_85_0();
  swift_task_alloc();
  OUTLINED_FUNCTION_38();
  v0[11] = v5;
  *uint64_t v5 = v6;
  v5[1] = specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:);
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[2];
  return v10(v8, v7, partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:), v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_30();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

uint64_t specialized MLSoundClassifier.evaluate<A>(on:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for MLSoundClassifier();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5 - 8);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v3, (uint64_t)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  outlined init with take of MLSoundClassifier.ModelParameters((uint64_t)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *(void *)(v9 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  swift_bridgeObjectRetain();
  specialized blockAwait<A>(_:)();
  uint64_t v11 = v10;
  uint64_t result = swift_release();
  if (!v2)
  {
    MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(v11, (uint64_t)v17, &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
    swift_bridgeObjectRelease();
    uint64_t v16 = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm;
    v14[1] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(a1, (uint64_t)v15, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    return ClassificationMetrics.init<A, B>(_:_:)();
  }
  return result;
}

uint64_t static MLSoundClassifier.reportAnalytics(trainingExampleCount:classCount:parameters:)(Swift::Int a1, Swift::Int a2, uint64_t a3)
{
  uint64_t result = (uint64_t)AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    v7._object = (void *)0x80000002272D5370;
    v7._countAndFlagsBits = 0xD000000000000011;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_soundClassifier, v7, a1);
    v8._object = (void *)0x80000002272D7790;
    v8._countAndFlagsBits = 0xD000000000000011;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_soundClassifier, v8, a2);
    uint64_t v9 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
    v10._countAndFlagsBits = 0x726574492078614DLL;
    v10._object = (void *)0xEE00736E6F697461;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_soundClassifier, v10, *(void *)(a3 + v9[5]));
    Swift::Float v11 = *(double *)(a3 + v9[6]);
    v12._countAndFlagsBits = 0x2070616C7265764FLL;
    v12._object = (void *)0xEE00726F74636146;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_soundClassifier, v12, v11);
    outlined init with copy of URL?(a3 + v9[7], (uint64_t)&v20, &demangling cache variable for type metadata for Any?);
    if (v21)
    {
      if (swift_dynamicCast())
      {
        uint64_t v13 = v18;
        char v14 = v19;
LABEL_7:
        v20._countAndFlagsBits = v13;
        LOBYTE(v20._object) = v14;
        v20._countAndFlagsBits = MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
        v20._object = v15;
        swift_bridgeObjectRetain();
        v16._countAndFlagsBits = 0xD000000000000012;
        v16._object = (void *)0x80000002272D6480;
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0x687469726F676C41;
        v17._object = (void *)0xE90000000000006DLL;
        AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_soundClassifier, v17, v20);
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v13 = 1;
    char v14 = 1;
    goto LABEL_7;
  }
  return result;
}

uint64_t MLSoundClassifier.init(checkpoint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.Model();
  uint64_t v7 = OUTLINED_FUNCTION_1(v6);
  uint64_t v78 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v79 = v10;
  uint64_t v80 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v86 = (uint64_t)&v75 - v11;
  OUTLINED_FUNCTION_65();
  uint64_t v84 = type metadata accessor for MLSoundClassifier.Classifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_29_18(v13, v75);
  uint64_t v83 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_31_1();
  uint64_t v15 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  uint64_t v82 = v17;
  OUTLINED_FUNCTION_65();
  uint64_t v81 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33_0();
  uint64_t v90 = v19;
  uint64_t v91 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_5_8();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  MEMORY[0x270FA5388](v25);
  unint64_t v89 = (char *)&v75 - v26;
  uint64_t v27 = OUTLINED_FUNCTION_65();
  type metadata accessor for TrainingTablePrinter(v27);
  uint64_t v28 = OUTLINED_FUNCTION_50_11();
  __swift_storeEnumTagSinglePayload(v28, v29, v30, v31);
  uint64_t v32 = type metadata accessor for MLSoundClassifier();
  uint64_t v93 = a2 + *(int *)(v32 + 32);
  MLClassifierMetrics.init()(v32, v33, v34, v35, v36, v37, v38, v39, v75, v76, v77, v78, v79, v80, (uint64_t)v81, v82, (uint64_t)v83, v84, v85,
    v86);
  uint64_t v88 = v32;
  uint64_t v40 = *(int *)(v32 + 36);
  uint64_t v94 = a2;
  uint64_t v41 = (void *)(a2 + v40);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_32_2(v42, 0xD0000000000000C0);
  *uint64_t v41 = v43;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v92 = v41;
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = *(int *)(type metadata accessor for MLCheckpoint() + 20);
  uint64_t v95 = a1;
  switch(*(unsigned char *)(a1 + v44))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0)
      {
        OUTLINED_FUNCTION_85();
        *(void *)uint64_t v52 = 0xD00000000000003BLL;
        *(void *)(v52 + 8) = 0x80000002272DA520;
        *(_OWORD *)(v52 + 16) = 0u;
        *(_OWORD *)(v52 + 32) = 0u;
        *(unsigned char *)(v52 + 48) = 0;
        swift_willThrow();
        outlined destroy of MLSoundClassifier.ModelParameters(v95, (void (*)(void))type metadata accessor for MLCheckpoint);
        goto LABEL_7;
      }
LABEL_4:
      uint64_t v77 = v3;
      uint64_t v46 = v89;
      uint64_t v47 = v95;
      URL.deletingLastPathComponent()();
      URL.appendingPathComponent(_:)();
      URL.appendingPathExtension(_:)();
      uint64_t v48 = *(void (**)(void))(v21 + 8);
      uint64_t v49 = v91;
      OUTLINED_FUNCTION_11_3();
      v48();
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v2, v46, v49);
      uint64_t v50 = v90;
      unint64_t v51 = v87;
      MLSoundClassifier.PersistentParameters.init(sessionDirectory:)(v2, v90);
      if (v51)
      {
        outlined destroy of MLSoundClassifier.ModelParameters(v47, (void (*)(void))type metadata accessor for MLCheckpoint);
        OUTLINED_FUNCTION_11_3();
        v48();
        OUTLINED_FUNCTION_11_3();
        v48();
LABEL_7:
        uint64_t v53 = v93;
        uint64_t v54 = (uint64_t)v92;
        outlined destroy of DefaultIndices<DataFrame.Rows>(v94, &demangling cache variable for type metadata for TrainingTablePrinter?);
        outlined destroy of MLSoundClassifier.ModelParameters(v53, (void (*)(void))type metadata accessor for MLClassifierMetrics);
        return outlined destroy of MLSoundClassifier.ModelParameters(v54, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      }
      uint64_t v87 = v48;
      uint64_t v76 = v94 + *(int *)(v88 + 28);
      uint64_t v57 = v81;
      uint64_t v56 = v82;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v50 + v81[5], v82);
      uint64_t v58 = *(void *)(v50 + v57[8]);
      uint64_t v59 = *(void *)(v50 + v57[6]);
      uint64_t v60 = v50 + v57[9];
      uint64_t v75 = *(void *)v60;
      LODWORD(v81) = *(unsigned __int8 *)(v60 + 8);
      uint64_t v61 = v83;
      uint64_t v62 = v77;
      uint64_t v63 = (_OWORD *)(v77 + v83[7]);
      _OWORD *v63 = 0u;
      v63[1] = 0u;
      uint64_t v64 = v62 + v61[8];
      *(void *)uint64_t v64 = 0;
      *(unsigned char *)(v64 + 8) = 1;
      *(void *)(v62 + v61[9]) = 32;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v56, v62);
      *(void *)(v62 + v61[5]) = v58;
      *(void *)(v62 + v61[6]) = v59;
      char v98 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
      uint64_t v96 = v75;
      char v97 = (char)v81;
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)&v96, (uint64_t)v63, &demangling cache variable for type metadata for Any?);
      outlined destroy of MLSoundClassifier.ModelParameters(v56, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      uint64_t v65 = v76;
      outlined init with take of MLSoundClassifier.ModelParameters(v62, v76);
      _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v65, v62);
      uint64_t v66 = v85;
      MLSoundClassifier.Classifier.init(labels:parameters:)(MEMORY[0x263F8EE88], v62, v85);
      _s8CreateML17MLSoundClassifierV0D0VAE0A12MLComponents28UpdatableSupervisedEstimatorAAWlTm_0(&lazy protocol witness table cache variable for type MLSoundClassifier.Classifier and conformance MLSoundClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Classifier);
      uint64_t v67 = v86;
      UpdatableSupervisedEstimator.readWithOptimizer(from:)();
      uint64_t v68 = v80;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v67, v80);
      OUTLINED_FUNCTION_115_1();
      uint64_t v69 = swift_allocObject();
      outlined init with take of MLSoundClassifier.ModelParameters(v68, v69 + v66);
      specialized blockAwait<A>(_:)();
      uint64_t v70 = v87;
      uint64_t v72 = v71;
      swift_release();
      outlined destroy of MLSoundClassifier.ModelParameters(v95, (void (*)(void))type metadata accessor for MLCheckpoint);
      outlined destroy of MLSoundClassifier.ModelParameters(v66, (void (*)(void))type metadata accessor for MLSoundClassifier.Classifier);
      outlined destroy of MLSoundClassifier.ModelParameters(v90, (void (*)(void))type metadata accessor for MLSoundClassifier.PersistentParameters);
      OUTLINED_FUNCTION_11_3();
      v70();
      OUTLINED_FUNCTION_11_3();
      v70();
      uint64_t v73 = v88;
      uint64_t v74 = v94;
      *(void *)(v94 + *(int *)(v88 + 24)) = v72;
      return outlined init with take of MLSoundClassifier.ModelParameters(v67, v74 + *(int *)(v73 + 20));
  }
}

uint64_t closure #1 in MLSoundClassifier.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLSoundClassifier.init(checkpoint:);
  return v4();
}

uint64_t closure #1 in MLSoundClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  void *v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  OUTLINED_FUNCTION_12();
  return v1();
}

uint64_t static MLSoundClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MLSoundClassifier.DataSource.labeledSounds()();
  if (!v3)
  {
    a3 = static MLSoundClassifier.train(trainingData:parameters:sessionParameters:)(v6, a2, a3);
    swift_bridgeObjectRelease();
  }
  return a3;
}

{
  uint64_t v3;
  void *v4;
  uint64_t v8;
  uint64_t result;

  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_6_19();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_24_4();
  *uint64_t v4 = a1;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  static MLSoundClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)((uint64_t)v4, a2, a3);
  uint64_t result = outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)v4, (void (*)(void))type metadata accessor for MLSoundClassifier.DataSource);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLSoundClassifier>);
    OUTLINED_FUNCTION_31_0();
    return specialized MLJob.init(_:)();
  }
  return result;
}

void static MLSoundClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v9 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v28 - v12;
  uint64_t v14 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_32();
  uint64_t v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_14_0();
  uint64_t v18 = type metadata accessor for MLSoundClassifier.DataSource();
  uint64_t v19 = OUTLINED_FUNCTION_17(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_40_0();
  MLSoundClassifier.ModelParameters.validate()();
  if (!v20)
  {
    MLSoundClassifier.ModelParameters.ValidationData.validate(modelParameters:)(a2);
    double v21 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(a1, v6);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(a2, v5);
    uint64_t v22 = *(void *)(a2 + v16[5]);
    double v23 = *(double *)(a2 + v16[6]);
    outlined init with copy of URL?(a2 + v16[7], (uint64_t)&v30, &demangling cache variable for type metadata for Any?);
    if (v32)
    {
      if (swift_dynamicCast())
      {
        uint64_t v24 = v28[1];
        char v25 = v29;
LABEL_7:
        uint64_t v30 = v24;
        char v31 = v25;
        MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:featureExtractionTimeWindowSize:)(v5, v22, (uint64_t)&v30, v4, v23, v21);
        _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v34, (uint64_t)v13);
        uint64_t v26 = type metadata accessor for SoundClassifierTrainingSessionDelegate();
        OUTLINED_FUNCTION_31_0();
        uint64_t v27 = SoundClassifierTrainingSessionDelegate.init(trainingData:featureExtractionOnly:modelParameters:sessionParameters:)(v6, 0, v4, (uint64_t)v13);
        uint64_t v32 = v26;
        uint64_t v33 = &protocol witness table for SoundClassifierTrainingSessionDelegate;
        uint64_t v30 = v27;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v34, v3);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>);
        OUTLINED_FUNCTION_31_0();
        specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v30, v3, 19);
        return;
      }
    }
    else
    {
      outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v24 = 1;
    char v25 = 1;
    goto LABEL_7;
  }
}

uint64_t static MLSoundClassifier.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

uint64_t static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v4;
  char v12 = *(unsigned char *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  char v10 = *(unsigned char *)(a2 + 32);
  uint64_t result = static MLSoundClassifier.makeFeatureExtractionSession(trainingData:parameters:sessionParameters:)(a1, (uint64_t)v9, a3);
  if (!v3)
  {
    uint64_t v7 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLSoundClassifier.DataSource>);
    uint64_t v8 = OUTLINED_FUNCTION_31_0();
    return specialized MLJob.init(_:)(v8, v7, (uint64_t)v11);
  }
  return result;
}

uint64_t static MLSoundClassifier.makeFeatureExtractionSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a3;
  uint64_t v37 = a1;
  uint64_t v4 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v35 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = type metadata accessor for MLSoundClassifier.DataSource();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v35 - v19;
  double v21 = *(double *)a2;
  double v22 = *(double *)(a2 + 8);
  int v23 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 24);
  LOBYTE(a2) = *(unsigned char *)(a2 + 32);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  *((_WORD *)v14 + 8) = 256;
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = v24;
  char v39 = a2;
  BOOL v25 = v23 == 0;
  uint64_t v26 = v36;
  if (v25) {
    double v27 = v22;
  }
  else {
    double v27 = 0.975;
  }
  MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:featureExtractionTimeWindowSize:)((uint64_t)v14, 25, (uint64_t)&v38, (uint64_t)v20, v21, v27);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v37, (uint64_t)v11);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6((uint64_t)v20, (uint64_t)v18);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v26, (uint64_t)v8);
  uint64_t v28 = type metadata accessor for SoundClassifierTrainingSessionDelegate();
  swift_allocObject();
  uint64_t v29 = v42;
  uint64_t v30 = SoundClassifierTrainingSessionDelegate.init(trainingData:featureExtractionOnly:modelParameters:sessionParameters:)((uint64_t)v11, 1, (uint64_t)v18, (uint64_t)v8);
  if (v29)
  {
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)v20, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  }
  else
  {
    uint64_t v40 = v28;
    uint64_t v41 = &protocol witness table for SoundClassifierTrainingSessionDelegate;
    uint64_t v38 = v30;
    uint64_t v31 = v26;
    uint64_t v32 = v35;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v31, v35);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>);
    swift_allocObject();
    swift_retain();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v38, v32, 19);
    uint64_t v26 = v33;
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)v20, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    swift_release();
  }
  return v26;
}

void closure #1 in closure #1 in static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier.DataSource, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_41_1();
  if (v10)
  {
    *uint64_t v0 = v12;
    swift_storeEnumTagMultiPayload();
    id v21 = v12;
    v4(v0);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(v8 + direct field offset for MLTrainingSession.delegate, (uint64_t)&v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    OUTLINED_FUNCTION_36_2();
    type metadata accessor for SoundClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v24 = v22;
    uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    uint64_t v15 = (void *)((char *)v0 + v14[12]);
    uint64_t v16 = v14[16];
    v22[1] = v2;
    int v23 = v4;
    uint64_t v17 = (void *)((char *)v0 + v16);
    uint64_t v18 = (char *)v0 + v14[20];
    OUTLINED_FUNCTION_53();
    uint64_t v19 = swift_bridgeObjectRetain();
    static SoundClassifierTrainingSessionDelegate.createDataFrame(from:)(v19);
    swift_bridgeObjectRelease();
    *uint64_t v15 = 0x7365727574616566;
    v15[1] = 0xE800000000000000;
    void *v17 = 0x62614C7373616C63;
    v17[1] = 0xEA00000000006C65;
    long long v20 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v6;
    *((_OWORD *)v18 + 1) = v20;
    v18[32] = *(unsigned char *)(v6 + 32);
    type metadata accessor for MLSoundClassifier.DataSource();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v23(v0);
    swift_release();
  }
  outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v0, &demangling cache variable for type metadata for Result<MLSoundClassifier.DataSource, Error>);
  OUTLINED_FUNCTION_12_4();
}

void static MLSoundClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v14[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(a1, (uint64_t)&v14[-1] - v7);
  uint64_t v9 = type metadata accessor for SoundClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v10 = SoundClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v2)
  {
    v14[3] = v9;
    v14[4] = &protocol witness table for SoundClassifierTrainingSessionDelegate;
    v14[0] = v10;
    uint64_t v11 = OUTLINED_FUNCTION_47_4();
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v11, v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, v1, 19);
  }
}

uint64_t closure #1 in closure #1 in static MLSoundClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_24_4();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_57_1();
  if (a2)
  {
    *uint64_t v6 = a1;
    swift_storeEnumTagMultiPayload();
    id v20 = a1;
    a4(v6);
    return outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v6, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for SoundClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v15 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_92_1(v5, v16, v17, v15);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v21;
    v18[5] = a4;
    v18[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:), (uint64_t)v18);
    return swift_release();
  }
}

uint64_t closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  swift_task_alloc();
  OUTLINED_FUNCTION_38();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v2;
  v1[1] = closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:);
  return v4();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of DefaultIndices<DataFrame.Rows>(v1, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLSoundClassifier.init(delegate:)()
{
  OUTLINED_FUNCTION_11();
  v0[18] = v1;
  v0[19] = v2;
  uint64_t v3 = type metadata accessor for MLClassifierMetrics(0);
  v0[20] = v3;
  OUTLINED_FUNCTION_17(v3);
  v0[21] = OUTLINED_FUNCTION_5();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  OUTLINED_FUNCTION_17(v4);
  v0[22] = swift_task_alloc();
  v0[23] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  OUTLINED_FUNCTION_17(v5);
  v0[24] = OUTLINED_FUNCTION_5();
  uint64_t v6 = type metadata accessor for MLSoundClassifier();
  v0[25] = v6;
  OUTLINED_FUNCTION_17(v6);
  v0[26] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_17(v7);
  v0[27] = OUTLINED_FUNCTION_5();
  uint64_t v8 = type metadata accessor for MLSoundClassifier.ModelParameters();
  v0[28] = v8;
  OUTLINED_FUNCTION_17(v8);
  v0[29] = swift_task_alloc();
  v0[30] = swift_task_alloc();
  v0[31] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_17(v9);
  v0[32] = OUTLINED_FUNCTION_5();
  uint64_t v10 = type metadata accessor for MLSoundClassifier.PersistentParameters();
  v0[33] = v10;
  OUTLINED_FUNCTION_17(v10);
  v0[34] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 152) + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  uint64_t result = OUTLINED_FUNCTION_57_4(v1, 1, v2);
  if (v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = *(int **)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 240);
  uint64_t v9 = *(void *)(v0 + 216);
  uint64_t v10 = *(int **)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v40 = *(void *)(v0 + 248);
  uint64_t v41 = *(void *)(v0 + 152);
  outlined init with take of MLSoundClassifier.ModelParameters(*(void *)(v0 + 256), v6);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v6 + v7[5], v9);
  uint64_t v12 = *(void *)(v6 + v7[8]);
  uint64_t v13 = *(void *)(v6 + v7[6]);
  uint64_t v14 = v6 + v7[9];
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *(unsigned char *)(v14 + 8);
  uint64_t v17 = (_OWORD *)(v8 + v10[7]);
  void *v17 = 0u;
  v17[1] = 0u;
  uint64_t v18 = v8 + v10[8];
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  *(void *)(v8 + v10[9]) = 32;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v9, v8);
  *(void *)(v8 + v10[5]) = v12;
  *(void *)(v8 + v10[6]) = v13;
  *(void *)(v0 + 16) = v15;
  *(void *)(v0 + 40) = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  *(unsigned char *)(v0 + 24) = v16;
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 16, (uint64_t)v17, &demangling cache variable for type metadata for Any?);
  outlined destroy of MLSoundClassifier.ModelParameters(v9, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  outlined init with take of MLSoundClassifier.ModelParameters(v8, v40);
  uint64_t v19 = v41 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v19, v11, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
  id v20 = type metadata accessor for MLSoundClassifier.Model();
  uint64_t result = OUTLINED_FUNCTION_57_4(v11, 1, v20);
  if (v5)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  double v22 = *(int **)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 208);
  int v23 = *(void *)(v0 + 192);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(*(void *)(v0 + 248), *(void *)(v0 + 232));
  type metadata accessor for TrainingTablePrinter(0);
  uint64_t v24 = OUTLINED_FUNCTION_50_11();
  uint64_t v28 = __swift_storeEnumTagSinglePayload(v24, v25, v26, v27);
  *(_DWORD *)(v0 + 304) = v22[8];
  MLClassifierMetrics.init()(v28, v29, v30, v31, v32, v33, v34, v35, v40, v41, v43, v44, v45, v46, v47, v48, v49, v50, v51,
    v0);
  *(_DWORD *)(v0 + 308) = v22[9];
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v36 = swift_allocError();
  OUTLINED_FUNCTION_44_15(v36, v37, 0xD0000000000000C0);
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = v22[5];
  *(_DWORD *)(v0 + 312) = v38;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v23, v21 + v38);
  char v39 = (void *)OUTLINED_FUNCTION_35_9();
  *(void *)(v0 + 280) = v39;
  *char v39 = v0;
  v39[1] = MLSoundClassifier.init(delegate:);
  return v42();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  char *v8 = v7;
  *(void *)(v5 + 288) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 296) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = v2 + *(int *)(v0 + 312);
  uint64_t v5 = v2 + *(int *)(v0 + 308);
  uint64_t v6 = v2 + *(int *)(v0 + 304);
  outlined destroy of MLSoundClassifier.ModelParameters(*(void *)(v0 + 232), (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined destroy of MLSoundClassifier.ModelParameters(v3, (void (*)(void))type metadata accessor for MLSoundClassifier.Model);
  outlined destroy of DefaultIndices<DataFrame.Rows>(v2, &demangling cache variable for type metadata for TrainingTablePrinter?);
  outlined destroy of MLSoundClassifier.ModelParameters(v4, (void (*)(void))type metadata accessor for MLSoundClassifier.Model);
  outlined destroy of MLSoundClassifier.ModelParameters(v6, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLSoundClassifier.ModelParameters(v5, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  swift_release();
  outlined destroy of MLSoundClassifier.ModelParameters(v9, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined destroy of MLSoundClassifier.ModelParameters(v1, (void (*)(void))type metadata accessor for MLSoundClassifier.PersistentParameters);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v7();
}

uint64_t MLSoundClassifier.init(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v13 = v12[37];
  uint64_t v14 = v12[29];
  uint64_t v16 = v12[25];
  uint64_t v15 = v12[26];
  uint64_t v17 = v12[23];
  uint64_t v19 = v12[19];
  uint64_t v18 = v12[20];
  uint64_t v20 = v12[18];
  outlined destroy of MLSoundClassifier.ModelParameters(v12[24], (void (*)(void))type metadata accessor for MLSoundClassifier.Model);
  *(void *)(v15 + *(int *)(v16 + 24)) = v13;
  outlined init with take of MLSoundClassifier.ModelParameters(v14, v15 + *(int *)(v16 + 28));
  outlined init with take of MLSoundClassifier.ModelParameters(v15, v20);
  uint64_t v21 = v19 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v21, v17, &demangling cache variable for type metadata for MLClassifierMetrics?);
  uint64_t result = OUTLINED_FUNCTION_57_4(v17, 1, v18);
  if (v23)
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = v12[34];
    uint64_t v25 = v12[25];
    uint64_t v27 = v12[22];
    uint64_t v26 = v12[23];
    uint64_t v29 = v12[19];
    uint64_t v28 = v12[20];
    uint64_t v30 = v12[18];
    outlined destroy of MLSoundClassifier.ModelParameters(v12[31], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
    outlined destroy of MLSoundClassifier.ModelParameters(v24, (void (*)(void))type metadata accessor for MLSoundClassifier.PersistentParameters);
    outlined assign with take of MLClassifierMetrics(v26, v30 + *(int *)(v25 + 32));
    uint64_t v31 = v29 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_53();
    outlined init with copy of URL?(v31, v27, &demangling cache variable for type metadata for MLClassifierMetrics?);
    swift_release();
    OUTLINED_FUNCTION_57_4(v27, 1, v28);
    if (v23)
    {
      outlined destroy of DefaultIndices<DataFrame.Rows>(v12[22], &demangling cache variable for type metadata for MLClassifierMetrics?);
    }
    else
    {
      uint64_t v32 = v12[25];
      uint64_t v33 = v12[21];
      uint64_t v34 = v12[18];
      outlined init with take of MLSoundClassifier.ModelParameters(v12[22], v33);
      outlined assign with take of MLClassifierMetrics(v33, v34 + *(int *)(v32 + 36));
    }
    uint64_t v43 = v12[21];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_38_6();
    return v36(v35, v36, v37, v38, v39, v40, v41, v42, v43, a10, a11, a12);
  }
  return result;
}

uint64_t MLSoundClassifier.evaluation(on:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_24_4();
  MLSoundClassifier.DataSource.labeledSounds()();
  MLSoundClassifier.evaluate(on:)(v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, v1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t MLSoundClassifier.evaluate(on:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MLSoundClassifier();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v3 + *(int *)(v9 + 28), (uint64_t)v8);
  specialized Sequence.flatMap<A>(_:)(a1);
  specialized Set.init<A>(_:)();
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)&v8[*(int *)(v6 + 32)];
  double v13 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  outlined init with copy of URL?((uint64_t)&v8[*(int *)(v6 + 36)], (uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  if (v21)
  {
    if (swift_dynamicCast())
    {
      uint64_t v14 = v17;
      char v15 = v18;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v14 = 1;
  char v15 = 1;
LABEL_6:
  outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)v8, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  type metadata accessor for MLSoundClassifier.FeatureExtractor();
  *(void *)&long long v19 = v12;
  *((double *)&v19 + 1) = v13;
  uint64_t v20 = 0;
  uint64_t v21 = v11;
  uint64_t v22 = v14;
  char v23 = v15;
  uint64_t result = static MLSoundClassifier.FeatureExtractor.extractFeatures(from:options:)(a1, &v19);
  if (!v2)
  {
    specialized MLSoundClassifier.evaluate<A>(on:)(result);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MLSoundClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_0();
  MLSoundClassifier.evaluate(on:)(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a2, v2, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)()
{
  type metadata accessor for MLSoundClassifier();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Transformer.prediction<A, B>(from:eventHandler:)
                             + async function pointer to specialized Transformer.prediction<A, B>(from:eventHandler:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized closure #1 in MLSoundClassifier.evaluate<A>(on:);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_11();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  char *v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

void MLSoundClassifier.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v51 = v0;
  uint64_t v3 = v2;
  uint64_t v54 = v4;
  uint64_t v5 = type metadata accessor for MLSoundClassifier.Model();
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_29_18(v7, v42);
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v47 = v9;
  uint64_t v48 = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_1();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = v13 - v12;
  uint64_t v49 = v3[1];
  unint64_t v15 = v3[3];
  unint64_t v52 = v3[2];
  uint64_t v53 = *v3;
  uint64_t v16 = v3[4];
  uint64_t v17 = v3[5];
  uint64_t v18 = v3[6];
  uint64_t v19 = v3[7];
  uint64_t v20 = v3[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v54, 0x616C43646E756F53, (void *)0xEF72656966697373, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v13 - v12);
  if (!v1)
  {
    uint64_t v44 = v20;
    uint64_t v45 = v19;
    uint64_t v46 = v18;
    uint64_t v21 = type metadata accessor for MLSoundClassifier();
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v51 + *(int *)(v21 + 20), v50);
    if (v49)
    {
      uint64_t v22 = v53;
      uint64_t v23 = v53;
      uint64_t v24 = v49;
      unint64_t v25 = v52;
      unint64_t v26 = v15;
      uint64_t v27 = v16;
      uint64_t v28 = v17;
      uint64_t v29 = v18;
      unint64_t v30 = v45;
    }
    else
    {
      uint64_t v31 = NSFullUserName();
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v32;

      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v20 = 0;
      unint64_t v26 = 0x80000002272D4DC0;
      unint64_t v30 = 0xE100000000000000;
      unint64_t v25 = 0xD000000000000033;
      uint64_t v29 = 49;
      uint64_t v22 = v53;
    }
    v55[0] = v23;
    v55[1] = v24;
    v55[2] = v25;
    v55[3] = v26;
    v55[4] = v27;
    v55[5] = v28;
    v55[6] = v29;
    v55[7] = v30;
    v55[8] = v20;
    outlined copy of MLModelMetadata?(v22, v49);
    specialized CoreMLExportable.export(metadata:)((uint64_t)v55, v33, v34, v35, v36, v37, v38, v39, v43, v14, v10, 0, v44, v45, v46, v17, v16, v47, v48,
      v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLSoundClassifier.ModelParameters(v50, (void (*)(void))type metadata accessor for MLSoundClassifier.Model);
    Model.write(to:)();
    OUTLINED_FUNCTION_25_0();
    v40();
    OUTLINED_FUNCTION_47_4();
    OUTLINED_FUNCTION_25_0();
    v41();
  }
  OUTLINED_FUNCTION_8_1();
}

void MLSoundClassifier.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_32();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v9 = OUTLINED_FUNCTION_50_11();
  __swift_storeEnumTagSinglePayload(v9, v10, v11, v7);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, *MEMORY[0x263F06E50], v1);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLSoundClassifier.write(to:metadata:)();
  OUTLINED_FUNCTION_11_3();
  v12();
  OUTLINED_FUNCTION_8_1();
}

uint64_t MLSoundClassifier.predictions(from:)(uint64_t a1)
{
  type metadata accessor for MLSoundClassifier();
  type metadata accessor for MLSoundClassifier.ModelParameters();
  double v2 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  return MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(a1, v2, v2);
}

uint64_t MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(uint64_t a1, double a2, double a3)
{
  uint64_t v136 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v132 = v10;
  uint64_t v138 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v135 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v131 = v13;
  uint64_t v130 = (char *)v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_65();
  uint64_t v14 = type metadata accessor for MLSoundClassifier();
  uint64_t v15 = v14 - 8;
  uint64_t v129 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v129 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v128 = (uint64_t)v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33_0();
  uint64_t v137 = v19;
  uint64_t v20 = type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_32();
  uint64_t v22 = *(int *)(v15 + 36);
  uint64_t v133 = v3;
  uint64_t v23 = v3 + v22;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v3 + v22, v5);
  uint64_t v140 = *(void *)(a1 + 16);
  uint64_t v24 = *(void *)(v5 + *(int *)(v20 + 24));
  double v25 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  outlined init with copy of URL?(v5 + *(int *)(v20 + 28), (uint64_t)&v149, &demangling cache variable for type metadata for Any?);
  if (v151)
  {
    if (swift_dynamicCast())
    {
      uint64_t v26 = v143;
      char v27 = BYTE8(v143);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v149, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v26 = 1;
  char v27 = 1;
LABEL_6:
  uint64_t v28 = type metadata accessor for MLSoundClassifier.FeatureExtractor();
  outlined destroy of MLSoundClassifier.ModelParameters(v5, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  *(void *)&long long v149 = v24;
  *((double *)&v149 + 1) = v25;
  uint64_t v29 = v140;
  uint64_t v150 = 0;
  uint64_t v151 = v140;
  uint64_t v152 = v26;
  char v153 = v27;
  uint64_t v30 = v136;
  uint64_t v31 = v28;
  uint64_t v32 = static MLSoundClassifier.FeatureExtractor.extractFeatures(from:options:)(v136, &v149);
  if (!v4)
  {
    uint64_t v33 = v32;
    outlined init with copy of URL?(v23 + *(int *)(v20 + 28), (uint64_t)&v149, &demangling cache variable for type metadata for Any?);
    if (v151)
    {
      swift_dynamicCast();
      OUTLINED_FUNCTION_116_0();
      if ((v34 & 1) != 0 && (BYTE8(v143) & 1) == 0 && a3 != 0.975)
      {
        swift_bridgeObjectRelease();
        *(void *)&long long v149 = 0;
        *((void *)&v149 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(86);
        v35._countAndFlagsBits = 0xD00000000000004BLL;
        v35._object = (void *)0x80000002272DA5A0;
        String.append(_:)(v35);
        Double.write<A>(to:)();
        v36._countAndFlagsBits = 0x73646E6F63657320;
        v36._object = (void *)0xE90000000000002ELL;
        String.append(_:)(v36);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v37 = OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_109_1(v37, v38);
        *(unsigned char *)(v39 + 48) = 1;
LABEL_18:
        swift_willThrow();
        return v29;
      }
    }
    else
    {
      outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v149, &demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_116_0();
    }
    if (a3 < 0.5 || a3 > 15.0)
    {
      swift_bridgeObjectRelease();
      *(void *)&long long v149 = 0;
      *((void *)&v149 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v41._object = (void *)0x80000002272DA560;
      v41._countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v41);
      Double.write<A>(to:)();
      v42._countAndFlagsBits = 544175136;
      v42._object = (void *)0xE400000000000000;
      String.append(_:)(v42);
      Double.write<A>(to:)();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v43 = OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_109_1(v43, v44);
      *(unsigned char *)(v45 + 48) = 0;
      goto LABEL_18;
    }
    uint64_t v134 = 0;
    uint64_t v124 = v33;
    if (v29)
    {
      uint64_t v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16);
      uint64_t v47 = *(unsigned __int8 *)(v135 + 80);
      uint64_t v119 = ~v47;
      uint64_t v122 = v30 + ((v47 + 32) & ~v47);
      uint64_t v121 = *(void *)(v135 + 72);
      v135 += 16;
      v118 = (void (**)(char *, uint64_t, uint64_t))(v135 + 16);
      uint64_t v117 = v16 + 7;
      uint64_t v120 = v47;
      uint64_t v116 = v47 + 8;
      swift_bridgeObjectRetain();
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v29 = MEMORY[0x263F8EE78];
      v115[1] = MEMORY[0x263F8EE60] + 8;
      v115[0] = MEMORY[0x263F8EE58] + 8;
      while (1)
      {
        uint64_t v125 = v49;
        v123(v31, v122 + v121 * v49, v23);
        OUTLINED_FUNCTION_82_1();
        __swift_storeEnumTagSinglePayload(v50, v51, v52, v23);
        if (__swift_getEnumTagSinglePayload(v31, 1, v23) == 1) {
          break;
        }
        uint64_t v139 = v29;
        uint64_t v53 = v128;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v133, v128);
        uint64_t v127 = *v118;
        uint64_t v54 = v130;
        v127(v130, v31, v23);
        OUTLINED_FUNCTION_115_1();
        unint64_t v55 = (v117 + v31) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v56 = (v116 + v55) & v119;
        uint64_t v57 = v23;
        uint64_t v58 = swift_allocObject();
        outlined init with take of MLSoundClassifier.ModelParameters(v53, v58 + v31);
        *(void *)(v58 + v55) = v124;
        v127((char *)(v58 + v56), (uint64_t)v54, v57);
        type metadata accessor for ResultBox();
        uint64_t v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = 0u;
        uint64_t v127 = (void (*)(char *, uint64_t, uint64_t))(v59 + 16);
        *(_OWORD *)(v59 + 32) = 0u;
        *(unsigned char *)(v59 + 48) = -1;
        swift_bridgeObjectRetain();
        dispatch_semaphore_t v60 = dispatch_semaphore_create(0);
        uint64_t v61 = type metadata accessor for TaskPriority();
        uint64_t v62 = v132;
        __swift_storeEnumTagSinglePayload(v132, 1, 1, v61);
        uint64_t v63 = (void *)swift_allocObject();
        v63[2] = 0;
        v63[3] = 0;
        v63[4] = v59;
        v63[5] = &async function pointer to partial apply for closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:);
        v63[6] = v58;
        v63[7] = v60;
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v62, 1, v61);
        swift_retain();
        uint64_t v126 = v58;
        swift_retain();
        uint64_t v65 = v60;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of DefaultIndices<DataFrame.Rows>(v62, &demangling cache variable for type metadata for TaskPriority?);
          uint64_t v66 = 0;
        }
        else
        {
          unsigned __int8 v67 = TaskPriority.rawValue.getter();
          OUTLINED_FUNCTION_25_0();
          v70(v68, v69);
          uint64_t v66 = v67;
        }
        uint64_t v29 = v66;
        if (v63[2])
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v71 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v73 = v72;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v71 = 0;
          uint64_t v73 = 0;
        }
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = &async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:);
        *(void *)(v74 + 24) = v63;
        if (v73 | v71)
        {
          uint64_t v144 = 0;
          uint64_t v145 = 0;
          uint64_t v146 = v71;
          uint64_t v147 = v73;
        }
        uint64_t v75 = (uint64_t)v127;
        swift_task_create();
        swift_release();
        OS_dispatch_semaphore.wait()();
        swift_beginAccess();
        outlined init with copy of URL?(v75, (uint64_t)&v149, &demangling cache variable for type metadata for Result<Any, Error>?);
        if (v152 == 255) {
          goto LABEL_61;
        }
        if (v152)
        {
          uint64_t v142 = v149;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          swift_willThrowTypedImpl();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v48);
          return v29;
        }
        outlined init with take of Any(&v149, &v143);
        swift_release();

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<String>]);
        swift_dynamicCast();
        uint64_t v76 = v148;
        swift_release();
        uint64_t v77 = v134;
        MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(v76, (uint64_t)v141, &demangling cache variable for type metadata for ClassificationDistribution<String>);
        uint64_t v134 = v77;
        swift_bridgeObjectRelease();
        uint64_t v79 = *(void *)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm
                        + 16);
        uint64_t v127 = (void (*)(char *, uint64_t, uint64_t))MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm;
        if (v79)
        {
          uint64_t v80 = (uint64_t *)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm
                          + 40);
          uint64_t v81 = (void *)MEMORY[0x263F8EE80];
          while (1)
          {
            uint64_t v83 = *(v80 - 1);
            uint64_t v82 = *v80;
            swift_bridgeObjectRetain();
            outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v48);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v149 = v81;
            unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v82);
            uint64_t v87 = v81[2];
            BOOL v88 = (v86 & 1) == 0;
            Swift::Int v89 = v87 + v88;
            if (__OFADD__(v87, v88)) {
              break;
            }
            unint64_t v90 = v85;
            char v91 = v86;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
            Swift::Bool v92 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v89);
            uint64_t v81 = (void *)v149;
            if (v92)
            {
              unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v82);
              if ((v91 & 1) != (v94 & 1)) {
                goto LABEL_63;
              }
              unint64_t v90 = v93;
            }
            swift_bridgeObjectRelease();
            if ((v91 & 1) == 0)
            {
              v81[(v90 >> 6) + 8] |= 1 << v90;
              uint64_t v95 = (uint64_t *)(v81[6] + 16 * v90);
              *uint64_t v95 = v83;
              v95[1] = v82;
              *(void *)(v81[7] + 8 * v90) = 0;
              uint64_t v96 = v81[2];
              uint64_t v97 = v96 + 1;
              BOOL v98 = __OFADD__(v96, 1);
              swift_bridgeObjectRetain();
              if (v98) {
                goto LABEL_60;
              }
              v81[2] = v97;
            }
            swift_bridgeObjectRetain();
            uint64_t v99 = v81[7];
            swift_bridgeObjectRelease();
            uint64_t v100 = *(void *)(v99 + 8 * v90);
            BOOL v101 = __OFADD__(v100, 1);
            uint64_t v102 = v100 + 1;
            if (v101) {
              goto LABEL_59;
            }
            v80 += 2;
            *(void *)(v99 + 8 * v90) = v102;
            swift_bridgeObjectRelease();
            uint64_t v48 = specialized OptionSet<>.init();
            if (!--v79) {
              goto LABEL_47;
            }
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
LABEL_47:
        swift_bridgeObjectRelease();
        uint64_t v103 = swift_bridgeObjectRetain();
        uint64_t v104 = v134;
        v105 = specialized Sequence.max(by:)(v103);
        uint64_t v107 = v106;
        uint64_t v134 = v104;
        swift_bridgeObjectRelease();
        if (!v107) {
          goto LABEL_62;
        }
        swift_bridgeObjectRelease();
        uint64_t v29 = v139;
        char v108 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v23 = v138;
        uint64_t v109 = v140;
        if ((v108 & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v29 = v113;
        }
        unint64_t v110 = *(void *)(v29 + 16);
        uint64_t v111 = v125;
        if (v110 >= *(void *)(v29 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v111 = v125;
          uint64_t v29 = v114;
        }
        uint64_t v49 = v111 + 1;
        *(void *)(v29 + 16) = v110 + 1;
        uint64_t v112 = v29 + 16 * v110;
        *(void *)(v112 + 32) = v105;
        *(void *)(v112 + 40) = v107;
        uint64_t v31 = v137;
        if (v49 == v109) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = 0;
      uint64_t v29 = MEMORY[0x263F8EE78];
LABEL_55:
      __swift_storeEnumTagSinglePayload(v31, 1, 1, v23);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v48);
  }
  return v29;
}

uint64_t closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MLSoundClassifier.Model();
  v4[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:), 0, 0);
}

uint64_t closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = type metadata accessor for MLSoundClassifier();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v4 + *(int *)(v5 + 20), v2);
  uint64_t result = specialized Dictionary.subscript.getter(v1, v3);
  v0[7] = result;
  if (result)
  {
    uint64_t v7 = (void *)OUTLINED_FUNCTION_35_9();
    v0[8] = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:);
    OUTLINED_FUNCTION_14();
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_25();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v4 + 48);
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  outlined destroy of MLSoundClassifier.ModelParameters(v7, (void (*)(void))type metadata accessor for MLSoundClassifier.Model);
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_11();
  **(void **)(v0 + 16) = *(void *)(v0 + 80);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v0();
}

uint64_t specialized Transformer.applied<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = type metadata accessor for MLSoundClassifier.Model();
  v4[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Event();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v4[18] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  v4[19] = v8;
  v4[20] = *(void *)(v8 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v4[22] = v9;
  v4[23] = *(void *)(v9 - 8);
  v4[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  v4[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized Transformer.applied<A>(to:eventHandler:), 0, 0);
}

uint64_t specialized Transformer.applied<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v17 = *(void *)(*(void *)(v16 + 16) + 16);
  *(void *)(v16 + 208) = v17;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v19 = v18;
  if (v17)
  {
    uint64_t v20 = *(void *)(v16 + 176);
    uint64_t v21 = *(void *)(v16 + 184);
    uint64_t v22 = *(void (**)(uint64_t))(v21 + 16);
    v21 += 16;
    *(_DWORD *)(v16 + 280) = *(_DWORD *)(v21 + 64);
    *(void *)(v16 + 216) = *(void *)(v21 + 56);
    *(void *)(v16 + 224) = v22;
    *(void *)(v16 + 232) = 0;
    *(void *)(v16 + 240) = v18;
    uint64_t v23 = *(void *)(v16 + 200);
    swift_bridgeObjectRetain();
    uint64_t v24 = OUTLINED_FUNCTION_111_0();
    v22(v24);
    OUTLINED_FUNCTION_82_1();
    __swift_storeEnumTagSinglePayload(v25, v26, v27, v20);
    OUTLINED_FUNCTION_57_4(v23, 1, v20);
    if (!v28)
    {
      OUTLINED_FUNCTION_10_10();
      v29();
      static Task<>.checkCancellation()();
      uint64_t v43 = OUTLINED_FUNCTION_54_8();
      outlined init with copy of URL?(v43, v19, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        OUTLINED_FUNCTION_10_10();
        v45();
        uint64_t v46 = swift_task_alloc();
        uint64_t v47 = (void *)OUTLINED_FUNCTION_97_1(v46);
        *uint64_t v47 = v48;
        v47[1] = specialized Transformer.applied<A>(to:eventHandler:);
        OUTLINED_FUNCTION_32_20();
        OUTLINED_FUNCTION_38_6();
        return MEMORY[0x270EEA930](v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12, a13, a14, a15, a16);
      }
      else
      {
        OUTLINED_FUNCTION_10_10();
        v57();
        uint64_t v58 = swift_task_alloc();
        uint64_t v59 = (void *)OUTLINED_FUNCTION_98_1(v58);
        *uint64_t v59 = v60;
        v59[1] = specialized Transformer.applied<A>(to:eventHandler:);
        OUTLINED_FUNCTION_33_17();
        OUTLINED_FUNCTION_38_6();
        return MEMORY[0x270EEA920](v61, v62, v63, v64, v65, v66, v67, v68, a9, a10, a11, a12, a13, a14, a15, a16);
      }
    }
  }
  else
  {
    uint64_t v30 = *(void *)(v16 + 176);
    swift_bridgeObjectRetain();
    uint64_t v31 = OUTLINED_FUNCTION_50_11();
    __swift_storeEnumTagSinglePayload(v31, v32, v33, v30);
  }
  OUTLINED_FUNCTION_12_30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_6();
  return v36(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12);
}

{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  char v20;
  unint64_t v21;
  void (*v22)(unint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  char v33;
  uint64_t v35;
  void (*v36)(void);
  void (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v66)(uint64_t);
  uint64_t v67;

  OUTLINED_FUNCTION_29_24();
  v19();
  OUTLINED_FUNCTION_75_0();
  if (v20) {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  uint64_t v21 = OUTLINED_FUNCTION_28_20();
  v22(v21);
  if (v17)
  {
    uint64_t v23 = OUTLINED_FUNCTION_49_7();
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v23, v18);
    swift_retain();
    String.init<A>(describing:)();
    OUTLINED_FUNCTION_112_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    _s8CreateML17MLSoundClassifierV0D0VAE0A12MLComponents28UpdatableSupervisedEstimatorAAWlTm_0(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, MEMORY[0x263F042E0]);
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_28_7();
    v66(v17);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v66);
    uint64_t v24 = OUTLINED_FUNCTION_101_0();
    v25(v24);
  }
  uint64_t v26 = v16[26];
  uint64_t v27 = v16[29] + 1;
  OUTLINED_FUNCTION_25_0();
  v28();
  if (v27 == v26)
  {
    OUTLINED_FUNCTION_92_1(v16[25], v29, v30, v16[22]);
    goto LABEL_9;
  }
  uint64_t v31 = OUTLINED_FUNCTION_24_28();
  v32(v31);
  __swift_storeEnumTagSinglePayload(v26, 0, 1, v27);
  OUTLINED_FUNCTION_57_4(v26, 1, v27);
  if (v33)
  {
LABEL_9:
    OUTLINED_FUNCTION_12_30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_71_2();
    OUTLINED_FUNCTION_3_24();
    __asm { BRAA            X2, X16 }
  }
  OUTLINED_FUNCTION_10_10();
  v36();
  static Task<>.checkCancellation()();
  if (v67)
  {
    OUTLINED_FUNCTION_29_24();
    v37();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_12_30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_59_4();
    OUTLINED_FUNCTION_3_24();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v40 = OUTLINED_FUNCTION_54_8();
  outlined init with copy of URL?(v40, v26, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_10_10();
    v41();
    Swift::String v42 = swift_task_alloc();
    uint64_t v43 = (void *)OUTLINED_FUNCTION_97_1(v42);
    id *v43 = v44;
    v43[1] = specialized Transformer.applied<A>(to:eventHandler:);
    OUTLINED_FUNCTION_32_20();
    OUTLINED_FUNCTION_3_24();
    return MEMORY[0x270EEA930](v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_10_10();
    v53();
    uint64_t v54 = swift_task_alloc();
    uint64_t v55 = (void *)OUTLINED_FUNCTION_98_1(v54);
    uint64_t *v55 = v56;
    v55[1] = specialized Transformer.applied<A>(to:eventHandler:);
    OUTLINED_FUNCTION_33_17();
    OUTLINED_FUNCTION_3_24();
    return MEMORY[0x270EEA920](v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  char v20;
  unint64_t v21;
  void (*v22)(unint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  char v33;
  uint64_t v35;
  void (*v36)(void);
  void (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v66)(uint64_t);
  uint64_t v67;

  OUTLINED_FUNCTION_29_24();
  v19();
  OUTLINED_FUNCTION_75_0();
  if (v20) {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  uint64_t v21 = OUTLINED_FUNCTION_28_20();
  v22(v21);
  if (v17)
  {
    uint64_t v23 = OUTLINED_FUNCTION_49_7();
    _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v23, v18);
    swift_retain();
    String.init<A>(describing:)();
    OUTLINED_FUNCTION_112_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    _s8CreateML17MLSoundClassifierV0D0VAE0A12MLComponents28UpdatableSupervisedEstimatorAAWlTm_0(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, MEMORY[0x263F042E0]);
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_28_7();
    v66(v17);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v66);
    uint64_t v24 = OUTLINED_FUNCTION_101_0();
    v25(v24);
  }
  uint64_t v26 = v16[26];
  uint64_t v27 = v16[29] + 1;
  OUTLINED_FUNCTION_25_0();
  v28();
  if (v27 == v26)
  {
    OUTLINED_FUNCTION_92_1(v16[25], v29, v30, v16[22]);
    goto LABEL_9;
  }
  uint64_t v31 = OUTLINED_FUNCTION_24_28();
  v32(v31);
  __swift_storeEnumTagSinglePayload(v26, 0, 1, v27);
  OUTLINED_FUNCTION_57_4(v26, 1, v27);
  if (v33)
  {
LABEL_9:
    OUTLINED_FUNCTION_12_30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_71_2();
    OUTLINED_FUNCTION_3_24();
    __asm { BRAA            X2, X16 }
  }
  OUTLINED_FUNCTION_10_10();
  v36();
  static Task<>.checkCancellation()();
  if (v67)
  {
    OUTLINED_FUNCTION_29_24();
    v37();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_12_30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_59_4();
    OUTLINED_FUNCTION_3_24();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v40 = OUTLINED_FUNCTION_54_8();
  outlined init with copy of URL?(v40, v26, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_10_10();
    v41();
    Swift::String v42 = swift_task_alloc();
    uint64_t v43 = (void *)OUTLINED_FUNCTION_97_1(v42);
    id *v43 = v44;
    v43[1] = specialized Transformer.applied<A>(to:eventHandler:);
    OUTLINED_FUNCTION_32_20();
    OUTLINED_FUNCTION_3_24();
    return MEMORY[0x270EEA930](v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_10_10();
    v53();
    uint64_t v54 = swift_task_alloc();
    uint64_t v55 = (void *)OUTLINED_FUNCTION_98_1(v54);
    uint64_t *v55 = v56;
    v55[1] = specialized Transformer.applied<A>(to:eventHandler:);
    OUTLINED_FUNCTION_33_17();
    OUTLINED_FUNCTION_3_24();
    return MEMORY[0x270EEA920](v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t specialized Transformer.applied<A>(to:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 272) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t specialized Transformer.applied<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_29_24();
  v12();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_7();
  v13();
  OUTLINED_FUNCTION_12_30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38_6();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  void (*v12)(void);
  void (*v13)(void);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  OUTLINED_FUNCTION_29_24();
  v12();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_7();
  v13();
  OUTLINED_FUNCTION_12_30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38_6();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

void MLSoundClassifier.debugDescription.getter()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = type metadata accessor for MLSoundClassifier();
  uint64_t v4 = MLSoundClassifier.ModelParameters.description.getter();
  uint64_t v6 = v5;
  unint64_t v7 = MLClassifierMetrics.description.getter();
  uint64_t v9 = v8;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_6(v0 + *(int *)(v3 + 36), v1);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLSoundClassifier.ModelParameters(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  unint64_t v10 = MLClassifierMetrics.description.getter();
  uint64_t v12 = v11;
  v13._countAndFlagsBits = v4;
  v13._object = v6;
  String.append(_:)(v13);
  OUTLINED_FUNCTION_33_9(0xD00000000000001ELL);
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  String.append(_:)(v14);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    OUTLINED_FUNCTION_33_9(0xD000000000000020);
    v15._countAndFlagsBits = v10;
    v15._object = v12;
    String.append(_:)(v15);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_4();
}

NSAttributedString MLSoundClassifier.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  MLSoundClassifier.debugDescription.getter();
  result.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = result.super.isa;
  return result;
}

uint64_t closure #1 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
  MLShapedArrayProtocol.init<A>(converting:)();
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v8);
}

uint64_t closure #2 in static MLSoundClassifier.convertFeatures(_:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  Swift::String v3 = *a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
  id v5 = v3;
  MLShapedArrayProtocol.init(converting:)();
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
}

uint64_t closure #3 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2272CB370;
  *(void *)(v4 + 32) = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v5);
}

uint64_t closure #4 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v14;
    uint64_t v6 = (double *)(v3 + 32);
    unint64_t v7 = *(void *)(v14 + 16);
    uint64_t v8 = v4;
    do
    {
      double v9 = *v6;
      uint64_t v15 = v5;
      if (v7 >= *(void *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v15;
      }
      float v10 = v9;
      *(void *)(v5 + 16) = v7 + 1;
      *(float *)(v5 + 4 * v7 + 32) = v10;
      ++v6;
      ++v7;
      --v8;
    }
    while (v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2272CB370;
  *(void *)(v11 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v12);
}

uint64_t closure #5 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v3 + 32;
    do
    {
      outlined init with copy of Any(v6, (uint64_t)v12);
      float v7 = static MLSoundClassifier.convertToFloat(_:)((uint64_t)v12);
      outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v12, &demangling cache variable for type metadata for Any?);
      uint64_t v5 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v13;
      }
      unint64_t v8 = *(void *)(v5 + 16);
      if (v8 >= *(void *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v13;
      }
      *(void *)(v5 + 16) = v8 + 1;
      *(float *)(v5 + 4 * v8 + 32) = v7;
      v6 += 32;
      --v4;
    }
    while (v4);
  }
  v12[0] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2272CB370;
  *(void *)(v9 + 32) = *(void *)(v3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v10);
}

float static MLSoundClassifier.convertToFloat(_:)(uint64_t a1)
{
  outlined init with copy of URL?(a1, (uint64_t)v8, &demangling cache variable for type metadata for Any?);
  if (!v9) {
    goto LABEL_16;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)v7, &demangling cache variable for type metadata for Any?);
  if (!OUTLINED_FUNCTION_37_15())
  {
    if (OUTLINED_FUNCTION_37_15())
    {
      float v1 = *(double *)&v5;
      goto LABEL_14;
    }
    if (OUTLINED_FUNCTION_37_15())
    {
      float v1 = (float)(uint64_t)v5;
      goto LABEL_14;
    }
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if (OUTLINED_FUNCTION_37_15())
    {
      objc_msgSend(v5, sel_floatValue);
      float v1 = v2;

      goto LABEL_14;
    }
    if (swift_dynamicCast())
    {
      unint64_t v3 = specialized Float.init<A>(_:)((uint64_t)v5, v6);
      if ((v3 & 0x100000000) != 0) {
        float v1 = NAN;
      }
      else {
        float v1 = *(float *)&v3;
      }
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
LABEL_16:
    float v1 = NAN;
    goto LABEL_17;
  }
  float v1 = *(float *)&v5;
LABEL_14:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
LABEL_17:
  outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v8, &demangling cache variable for type metadata for Any?);
  return v1;
}

uint64_t closure #6 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v13;
    unint64_t v6 = *(void *)(v13 + 16);
    float v7 = (float *)(v3 + 36);
    uint64_t v8 = v4;
    do
    {
      if (*(unsigned char *)v7) {
        float v9 = NAN;
      }
      else {
        float v9 = *(v7 - 1);
      }
      uint64_t v14 = v5;
      if (v6 >= *(void *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v14;
      }
      *(void *)(v5 + 16) = v6 + 1;
      *(float *)(v5 + 4 * v6 + 32) = v9;
      v7 += 2;
      ++v6;
      --v8;
    }
    while (v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2272CB370;
  *(void *)(v10 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v11);
}

uint64_t closure #7 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (v4)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v15;
    unint64_t v6 = *(void *)(v15 + 16);
    float v7 = (double *)(v3 + 40);
    uint64_t v8 = v4;
    do
    {
      double v9 = *(v7 - 1);
      int v10 = *(unsigned __int8 *)v7;
      uint64_t v16 = v5;
      if (v6 >= *(void *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v16;
      }
      float v11 = v9;
      if (v10) {
        float v11 = NAN;
      }
      *(void *)(v5 + 16) = v6 + 1;
      *(float *)(v5 + 4 * v6 + 32) = v11;
      v7 += 2;
      ++v6;
      --v8;
    }
    while (v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2272CB370;
  *(void *)(v12 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v13);
}

uint64_t closure #8 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v3 + 32;
    uint64_t v14 = v4;
    while (1)
    {
      outlined init with copy of URL?(v6, (uint64_t)v21, &demangling cache variable for type metadata for Any?);
      outlined init with copy of URL?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for Any?);
      if (!v20) {
        goto LABEL_18;
      }
      outlined init with copy of URL?((uint64_t)v19, (uint64_t)v18, &demangling cache variable for type metadata for Any?);
      if (swift_dynamicCast())
      {
        float v7 = *(float *)&v16;
      }
      else if (swift_dynamicCast())
      {
        float v7 = *(double *)&v16;
      }
      else if (swift_dynamicCast())
      {
        float v7 = (float)(uint64_t)v16;
      }
      else
      {
        type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          objc_msgSend(v16, sel_floatValue);
          float v7 = v8;
        }
        else
        {
          if (!swift_dynamicCast())
          {
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
LABEL_18:
            float v7 = NAN;
            goto LABEL_19;
          }
          unint64_t v9 = specialized Float.init<A>(_:)((uint64_t)v16, v17);
          if ((v9 & 0x100000000) != 0) {
            float v7 = NAN;
          }
          else {
            float v7 = *(float *)&v9;
          }
        }
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
LABEL_19:
      outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v19, &demangling cache variable for type metadata for Any?);
      outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v21, &demangling cache variable for type metadata for Any?);
      uint64_t v5 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v22;
      }
      unint64_t v10 = *(void *)(v5 + 16);
      if (v10 >= *(void *)(v5 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v22;
      }
      *(void *)(v5 + 16) = v10 + 1;
      *(float *)(v5 + 4 * v10 + 32) = v7;
      v6 += 32;
      if (!--v4)
      {
        uint64_t v2 = a2;
        uint64_t v4 = v14;
        break;
      }
    }
  }
  v21[0] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2272CB370;
  *(void *)(v11 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  MLShapedArray.init<A>(scalars:shape:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  return __swift_storeEnumTagSinglePayload(v2, 0, 1, v12);
}

unint64_t specialized Float.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (float v7 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_Sb_TG5TA_0);
      swift_bridgeObjectRelease();
    }
  }
  return (unint64_t)((v6 & 1) == 0) << 32;
}

uint64_t sub_22720C308()
{
  type metadata accessor for MLSoundClassifier.Model();
  OUTLINED_FUNCTION_57_5();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = v0 + v3;
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int v7 = OUTLINED_FUNCTION_56_10();
  if (v7 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v7 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(OUTLINED_FUNCTION_56_10())
    {
      case 0u:
      case 1u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v8();
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v6, *(unsigned char *)(v6 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v12();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_114_1();
        goto LABEL_5;
      default:
        break;
    }
  }
  uint64_t v9 = v6 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters() + 28);
  if (*(void *)(v9 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v9);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  OUTLINED_FUNCTION_91_1(EnumCaseMultiPayload, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v11();

  return MEMORY[0x270FA0238](v0, v3 + v5, v2 | 7);
}

uint64_t partial apply for closure #1 in MLSoundClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MLSoundClassifier.Model();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  *uint64_t v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLSoundClassifier.init(checkpoint:)(v1);
}

uint64_t specialized closure #1 in blockAwait<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return MEMORY[0x270FA2498](specialized closure #1 in blockAwait<A>(_:), 0, 0);
}

{
  void *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return OUTLINED_FUNCTION_4_42((uint64_t)specialized closure #1 in blockAwait<A>(_:));
}

uint64_t specialized closure #1 in blockAwait<A>(_:)()
{
  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_35_17();
  uint64_t v0 = type metadata accessor for MLHandPoseClassifier();
  OUTLINED_FUNCTION_70_4(v0);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_69_3();
  *(void *)(v0 + 40) = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_60_0();
  uint64_t v0 = OUTLINED_FUNCTION_35_17();
  uint64_t v1 = type metadata accessor for MLStyleTransfer(v0);
  OUTLINED_FUNCTION_70_4(v1);
  OUTLINED_FUNCTION_3_56();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_19_29(v2);
  *uint64_t v3 = v4;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v5 = OUTLINED_FUNCTION_13_37();
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = *(void *)(v0 + 144);
  *(unsigned char *)(v0 + 48) = 0;
  uint64_t v2 = v1 + 16;
  swift_beginAccess();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 16, v2, &demangling cache variable for type metadata for Result<Any, Error>?);
  swift_endAccess();
  OS_dispatch_semaphore.signal()();
  OUTLINED_FUNCTION_30();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 144);
  __swift_deallocate_boxed_opaque_existential_0(v0 + 16);
  *(void *)(v0 + 56) = v1;
  *(unsigned char *)(v0 + 88) = 1;
  swift_beginAccess();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0 + 56, v2 + 16, &demangling cache variable for type metadata for Result<Any, Error>?);
  swift_endAccess();
  OS_dispatch_semaphore.signal()();
  OUTLINED_FUNCTION_30();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_69_3();
  *(void *)(v0 + 40) = type metadata accessor for _Model();
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_35_17();
  uint64_t v0 = type metadata accessor for MLImageClassifier();
  OUTLINED_FUNCTION_70_4(v0);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_69_3();
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnnotatedFeature<CIImage, String>], [AnnotatedFeature<CIImage, String>]));
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_69_3();
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(predicted: String, label: String)]);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_35_17();
  uint64_t v0 = type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_70_4(v0);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_35_17();
  uint64_t v0 = type metadata accessor for MLSoundClassifier();
  OUTLINED_FUNCTION_70_4(v0);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_69_3();
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedPrediction<ClassificationDistribution<String>, String>]);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_35_17();
  uint64_t v0 = type metadata accessor for MLSoundClassifier.Model();
  OUTLINED_FUNCTION_70_4(v0);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_69_3();
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<String>]);
  OUTLINED_FUNCTION_3_56();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_19_29(v1);
  *uint64_t v2 = v3;
  v2[1] = specialized closure #1 in blockAwait<A>(_:);
  uint64_t v4 = OUTLINED_FUNCTION_13_37();
  return v5(v4);
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = *(int **)(v0 + 152);
  *(void *)(v0 + 40) = &type metadata for MLRegressorMetrics;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_19_29(v2);
  *uint64_t v3 = v4;
  v3[1] = specialized closure #1 in blockAwait<A>(_:);
  return v6(v0 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v3();
}

uint64_t sub_22720D56C()
{
  uint64_t v1 = (int *)type metadata accessor for MLSoundClassifier();
  OUTLINED_FUNCTION_57_5();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v41 = *(void *)(v4 + 64);
  uint64_t v42 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  uint64_t v39 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v40 = (v3 + 16) & ~v3;
  uint64_t v7 = v0 + v40;
  uint64_t v8 = type metadata accessor for TrainingTablePrinter(0);
  if (!__swift_getEnumTagSinglePayload(v0 + v40, 1, v8))
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_6_19();
    OUTLINED_FUNCTION_25_0();
    v9();

    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v7 + v1[5];
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v12 = OUTLINED_FUNCTION_67_4();
        v13(v12);
        break;
      case 2u:
        goto LABEL_7;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(unsigned char *)(v10 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v36();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      default:
        break;
    }
  }
  uint64_t v14 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v15 = v10 + *(int *)(v14 + 28);
  if (*(void *)(v15 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v15);
  }
  type metadata accessor for MLSoundClassifier.Model();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  int v16 = swift_getEnumCaseMultiPayload();
  OUTLINED_FUNCTION_91_1(v16, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v17();

  uint64_t v18 = v7 + v1[7];
  int v19 = swift_getEnumCaseMultiPayload();
  if (v19 == 2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
  else if (v19 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v20 = OUTLINED_FUNCTION_67_4();
        v21(v20);
        break;
      case 2u:
        goto LABEL_14;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v18, *(unsigned char *)(v18 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_14;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v37();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_14;
      default:
        break;
    }
  }
  uint64_t v22 = v18 + *(int *)(v14 + 28);
  if (*(void *)(v22 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v22);
  }
  uint64_t v23 = (id *)(v7 + v1[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int v24 = swift_getEnumCaseMultiPayload();
  switch(v24)
  {
    case 2:

      break;
    case 1:
      type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v26 = *(void (**)(void))(*(void *)(type metadata accessor for DataFrame() - 8) + 8);
      OUTLINED_FUNCTION_68_3();
      v26();
      OUTLINED_FUNCTION_68_3();
      v26();
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_110_1() == 1) {
        uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      __swift_instantiateConcreteTypeFromMangledName(v25);
      OUTLINED_FUNCTION_6_19();
      (*(void (**)(id *))(v27 + 8))(v23);
      break;
  }
  char v28 = (id *)(v7 + v1[9]);
  OUTLINED_FUNCTION_111_0();
  int v29 = swift_getEnumCaseMultiPayload();
  switch(v29)
  {
    case 2:

      break;
    case 1:
      type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v31 = *(void (**)(void))(*(void *)(type metadata accessor for DataFrame() - 8) + 8);
      OUTLINED_FUNCTION_68_3();
      v31();
      OUTLINED_FUNCTION_68_3();
      v31();
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_56_10() == 1) {
        uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      __swift_instantiateConcreteTypeFromMangledName(v30);
      OUTLINED_FUNCTION_6_19();
      (*(void (**)(id *))(v32 + 8))(v28);
      break;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + ((((v41 + v40 + 7) & 0xFFFFFFFFFFFFFFF8) + v39 + 8) & ~v39), v42);
  uint64_t v33 = OUTLINED_FUNCTION_94_0();

  return MEMORY[0x270FA0238](v33, v34, v35);
}

uint64_t partial apply for closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v0 = type metadata accessor for MLSoundClassifier();
  OUTLINED_FUNCTION_1(v0);
  uint64_t v1 = type metadata accessor for URL();
  OUTLINED_FUNCTION_39_0(v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_96_1(v2);
  *uint64_t v3 = v4;
  v3[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  OUTLINED_FUNCTION_52_9();
  return closure #1 in MLSoundClassifier.predictions(from:overlapFactor:predictionTimeWindowSize:)(v5, v6, v7, v8);
}

uint64_t sub_22720DC90()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_22720DD98()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_7_1(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  uint64_t v3 = OUTLINED_FUNCTION_31_17();
  return v4(v3);
}

id sub_22720DE68@<X0>(void *a1@<X8>)
{
  id result = MLSoundClassifier.model.getter();
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLSoundClassifier(void *a1, char *a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v6 = a3;
  uint64_t v7 = type metadata accessor for TrainingTablePrinter(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, v3, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, v3, v10);
    uint64_t v11 = *(int *)(v7 + 20);
    uint64_t v12 = *(void **)&v3[v11];
    *(void *)((char *)a1 + v11) = v12;
    *(void *)((char *)a1 + *(int *)(v7 + 24)) = *(void *)&v3[*(int *)(v7 + 24)];
    id v13 = v12;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
  }
  uint64_t v14 = v6[5];
  uint64_t v15 = (void *)((char *)a1 + v14);
  int v16 = &v3[v14];
  uint64_t v17 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v15 = *(void *)v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
      goto LABEL_17;
    }
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v15 = *(void *)v16;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v20 = *(void *)v16;
        char v21 = v16[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v16, v21);
        *uint64_t v15 = v20;
        *((unsigned char *)v15 + 8) = v21;
        uint64_t v22 = *((void *)v16 + 3);
        v15[2] = *((void *)v16 + 2);
        v15[3] = v22;
        uint64_t v23 = *((void *)v16 + 5);
        v15[4] = *((void *)v16 + 4);
        v15[5] = v23;
        long long v24 = *((_OWORD *)v16 + 4);
        *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
        *((_OWORD *)v15 + 4) = v24;
        *((unsigned char *)v15 + 80) = v16[80];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v25 = type metadata accessor for DataFrame();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v15, v16, v25);
        uint64_t v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v27 = v26[12];
        char v28 = (void *)((char *)v15 + v27);
        int v29 = &v16[v27];
        uint64_t v31 = *(void *)v29;
        uint64_t v30 = *((void *)v29 + 1);
        void *v28 = v31;
        v28[1] = v30;
        uint64_t v32 = v26[16];
        uint64_t v33 = (void *)((char *)v15 + v32);
        uint64_t v34 = &v16[v32];
        uint64_t v35 = *((void *)v34 + 1);
        *uint64_t v33 = *(void *)v34;
        v33[1] = v35;
        uint64_t v36 = v26[20];
        uint64_t v37 = (char *)v15 + v36;
        uint64_t v38 = &v16[v36];
        long long v39 = *((_OWORD *)v38 + 1);
        *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
        *((_OWORD *)v37 + 1) = v39;
        v37[32] = v38[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v19 = type metadata accessor for URL();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v15, v16, v19);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_17:
  uint64_t v40 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)((char *)v15 + v40[5]) = *(void *)&v16[v40[5]];
  *(void *)((char *)v15 + v40[6]) = *(void *)&v16[v40[6]];
  uint64_t v41 = v40[7];
  uint64_t v42 = (char *)v15 + v41;
  uint64_t v43 = &v16[v41];
  uint64_t v44 = *(void *)&v16[v41 + 24];
  if (v44)
  {
    *((void *)v42 + 3) = v44;
    (**(void (***)(void))(v44 - 8))();
  }
  else
  {
    long long v45 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v45;
  }
  uint64_t v46 = v40[8];
  uint64_t v47 = (char *)v15 + v46;
  uint64_t v48 = &v16[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v48[8];
  *(void *)((char *)v15 + v40[9]) = *(void *)&v16[v40[9]];
  uint64_t v49 = *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  uint64_t v50 = (char *)v15 + v49;
  uint64_t v51 = &v16[v49];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v52 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v52 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(v52);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v50, v51, v53);
  swift_storeEnumTagMultiPayload();
  uint64_t v54 = v6[6];
  uint64_t v55 = v6[7];
  uint64_t v56 = *(void **)&v3[v54];
  *(void *)((char *)a1 + v54) = v56;
  uint64_t v57 = (char *)a1 + v55;
  uint64_t v58 = &v3[v55];
  id v59 = v56;
  int v60 = swift_getEnumCaseMultiPayload();
  if (v60 == 2)
  {
    *(void *)uint64_t v57 = *(void *)v58;
    swift_bridgeObjectRetain();
LABEL_35:
    swift_storeEnumTagMultiPayload();
    goto LABEL_36;
  }
  if (v60 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)uint64_t v57 = *(void *)v58;
        goto LABEL_33;
      case 3u:
        uint64_t v62 = v6;
        uint64_t v63 = a1;
        uint64_t v64 = *(void *)v58;
        char v65 = v58[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v58, v65);
        *(void *)uint64_t v57 = v64;
        a1 = v63;
        uint64_t v6 = v62;
        v57[8] = v65;
        uint64_t v66 = *((void *)v58 + 3);
        *((void *)v57 + 2) = *((void *)v58 + 2);
        *((void *)v57 + 3) = v66;
        uint64_t v67 = *((void *)v58 + 5);
        *((void *)v57 + 4) = *((void *)v58 + 4);
        *((void *)v57 + 5) = v67;
        long long v68 = *((_OWORD *)v58 + 4);
        *((_OWORD *)v57 + 3) = *((_OWORD *)v58 + 3);
        *((_OWORD *)v57 + 4) = v68;
        v57[80] = v58[80];
        goto LABEL_32;
      case 4u:
        uint64_t v69 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16))(v57, v58, v69);
        uint64_t v70 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v71 = v70[12];
        uint64_t v72 = &v57[v71];
        uint64_t v73 = &v58[v71];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        *(void *)uint64_t v72 = v75;
        *((void *)v72 + 1) = v74;
        uint64_t v76 = v70[16];
        uint64_t v77 = &v57[v76];
        uint64_t v78 = &v58[v76];
        uint64_t v79 = *((void *)v78 + 1);
        *(void *)uint64_t v77 = *(void *)v78;
        *((void *)v77 + 1) = v79;
        uint64_t v80 = v70[20];
        uint64_t v81 = &v57[v80];
        uint64_t v82 = &v58[v80];
        long long v83 = *((_OWORD *)v82 + 1);
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
        *((_OWORD *)v81 + 1) = v83;
        v81[32] = v82[32];
LABEL_32:
        swift_bridgeObjectRetain();
LABEL_33:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v61 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v57, v58, v61);
        break;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_35;
  }
  memcpy(v57, v58, *(void *)(*(void *)(v17 - 8) + 64));
LABEL_36:
  *(void *)&v57[v40[5]] = *(void *)&v58[v40[5]];
  *(void *)&v57[v40[6]] = *(void *)&v58[v40[6]];
  uint64_t v84 = v40[7];
  unint64_t v85 = &v57[v84];
  char v86 = &v58[v84];
  uint64_t v87 = *(void *)&v58[v84 + 24];
  if (v87)
  {
    *((void *)v85 + 3) = v87;
    (**(void (***)(void))(v87 - 8))();
  }
  else
  {
    long long v88 = *((_OWORD *)v86 + 1);
    *(_OWORD *)unint64_t v85 = *(_OWORD *)v86;
    *((_OWORD *)v85 + 1) = v88;
  }
  uint64_t v89 = v40[8];
  unint64_t v90 = &v57[v89];
  char v91 = &v58[v89];
  *(void *)unint64_t v90 = *(void *)v91;
  v90[8] = v91[8];
  *(void *)&v57[v40[9]] = *(void *)&v58[v40[9]];
  uint64_t v92 = v6[8];
  unint64_t v93 = (id *)((char *)a1 + v92);
  char v94 = (id *)&v3[v92];
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int v95 = swift_getEnumCaseMultiPayload();
  if (v95 == 2)
  {
    id v103 = *v94;
    id v104 = *v94;
    *unint64_t v93 = v103;
  }
  else if (v95 == 1)
  {
    *unint64_t v93 = *v94;
    uint64_t v96 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v97 = *(int *)(v96 + 20);
    BOOL v98 = (char *)v93 + v97;
    uint64_t v123 = a1;
    uint64_t v99 = (char *)v94 + v97;
    uint64_t v100 = type metadata accessor for DataFrame();
    uint64_t v122 = v3;
    BOOL v101 = *(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 16);
    uint64_t v102 = v99;
    a1 = v123;
    v101(v98, v102, v100);
    v101((char *)v93 + *(int *)(v96 + 24), (char *)v94 + *(int *)(v96 + 24), v100);
    uint64_t v3 = v122;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      v105 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      v105 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(v105);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v106 - 8) + 16))(v93, v94, v106);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v107 = v6[9];
  char v108 = (void **)((char *)a1 + v107);
  uint64_t v109 = (void **)&v3[v107];
  int v110 = swift_getEnumCaseMultiPayload();
  if (v110 == 2)
  {
    uint64_t v117 = *v109;
    id v118 = v117;
    objc_class *v108 = v117;
  }
  else if (v110 == 1)
  {
    objc_class *v108 = *v109;
    uint64_t v111 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v112 = *(int *)(v111 + 20);
    uint64_t v113 = (char *)v108 + v112;
    uint64_t v114 = (char *)v109 + v112;
    uint64_t v115 = type metadata accessor for DataFrame();
    uint64_t v116 = *(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 16);
    v116(v113, v114, v115);
    v116((char *)v108 + *(int *)(v111 + 24), (char *)v109 + *(int *)(v111 + 24), v115);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v119 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v119 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(v119);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v120 - 8) + 16))(v108, v109, v120);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void destroy for MLSoundClassifier(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for TrainingTablePrinter(0);
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);

    swift_bridgeObjectRelease();
  }
  uint64_t v6 = a1 + a2[5];
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
        break;
      case 2u:
        goto LABEL_7;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v6, *(unsigned char *)(v6 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 4u:
        uint64_t v37 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v6, v37);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      default:
        break;
    }
  }
  uint64_t v9 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v10 = v6 + *(int *)(v9 + 28);
  if (*(void *)(v10 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v10);
  }
  uint64_t v11 = v6 + *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v12 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v12 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);

  uint64_t v14 = a1 + a2[7];
  int v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 2)
  {
LABEL_17:
    swift_bridgeObjectRelease();
  }
  else if (v15 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v16 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v14, v16);
        break;
      case 2u:
        goto LABEL_17;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v14, *(unsigned char *)(v14 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_17;
      case 4u:
        uint64_t v38 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_17;
      default:
        break;
    }
  }
  uint64_t v17 = v14 + *(int *)(v9 + 28);
  if (*(void *)(v17 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v17);
  }
  uint64_t v18 = (id *)(a1 + a2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int v19 = swift_getEnumCaseMultiPayload();
  switch(v19)
  {
    case 2:

      break;
    case 1:
      uint64_t v21 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v22 = (char *)v18 + *(int *)(v21 + 20);
      uint64_t v23 = type metadata accessor for DataFrame();
      long long v24 = *(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8);
      v24(v22, v23);
      v24((char *)v18 + *(int *)(v21 + 24), v23);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(v20);
      (*(void (**)(id *, uint64_t))(*(void *)(v25 - 8) + 8))(v18, v25);
      break;
  }
  uint64_t v26 = (void **)(a1 + a2[9]);
  int v27 = swift_getEnumCaseMultiPayload();
  if (v27 == 2)
  {
    int v29 = *v26;
  }
  else
  {
    if (v27 == 1)
    {
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v31 = (char *)v26 + *(int *)(v30 + 20);
      uint64_t v32 = type metadata accessor for DataFrame();
      long long v39 = *(void (**)(void **, uint64_t))(*(void *)(v32 - 8) + 8);
      ((void (*)(void *__return_ptr, char *, uint64_t))v39)((void *)(v32 - 8), v31, v32);
      uint64_t v33 = (void **)((char *)v26 + *(int *)(v30 + 24));
      uint64_t v34 = v32;
      uint64_t v35 = v39;
    }
    else
    {
      if (v27) {
        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        char v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        char v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v28);
      uint64_t v35 = *(void (**)(void **, uint64_t))(*(void *)(v36 - 8) + 8);
      uint64_t v34 = v36;
      uint64_t v33 = v26;
    }
    v35(v33, v34);
  }
}

char *initializeWithCopy for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TrainingTablePrinter(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(v6 + 20);
    uint64_t v10 = *(void **)&a2[v9];
    *(void *)&a1[v9] = v10;
    *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
    id v11 = v10;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)uint64_t v13 = *(void *)v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_15;
    }
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)uint64_t v13 = *(void *)v14;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v18 = *(void *)v14;
        char v19 = v14[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v14, v19);
        *(void *)uint64_t v13 = v18;
        v13[8] = v19;
        uint64_t v20 = *((void *)v14 + 3);
        *((void *)v13 + 2) = *((void *)v14 + 2);
        *((void *)v13 + 3) = v20;
        uint64_t v21 = *((void *)v14 + 5);
        *((void *)v13 + 4) = *((void *)v14 + 4);
        *((void *)v13 + 5) = v21;
        long long v22 = *((_OWORD *)v14 + 4);
        *((_OWORD *)v13 + 3) = *((_OWORD *)v14 + 3);
        *((_OWORD *)v13 + 4) = v22;
        v13[80] = v14[80];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v23 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v13, v14, v23);
        long long v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v25 = v24[12];
        uint64_t v26 = &v13[v25];
        int v27 = &v14[v25];
        uint64_t v29 = *(void *)v27;
        uint64_t v28 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = v29;
        *((void *)v26 + 1) = v28;
        uint64_t v30 = v24[16];
        uint64_t v31 = &v13[v30];
        uint64_t v32 = &v14[v30];
        uint64_t v33 = *((void *)v32 + 1);
        *(void *)uint64_t v31 = *(void *)v32;
        *((void *)v31 + 1) = v33;
        uint64_t v34 = v24[20];
        uint64_t v35 = &v13[v34];
        uint64_t v36 = &v14[v34];
        long long v37 = *((_OWORD *)v36 + 1);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        *((_OWORD *)v35 + 1) = v37;
        v35[32] = v36[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v17 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v13, v14, v17);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_15:
  uint64_t v38 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&v13[v38[5]] = *(void *)&v14[v38[5]];
  *(void *)&v13[v38[6]] = *(void *)&v14[v38[6]];
  uint64_t v39 = v38[7];
  uint64_t v40 = &v13[v39];
  uint64_t v41 = &v14[v39];
  uint64_t v42 = *(void *)&v14[v39 + 24];
  if (v42)
  {
    *((void *)v40 + 3) = v42;
    (**(void (***)(void))(v42 - 8))();
  }
  else
  {
    long long v43 = *((_OWORD *)v41 + 1);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v43;
  }
  uint64_t v44 = v38[8];
  long long v45 = &v13[v44];
  uint64_t v46 = &v14[v44];
  *(void *)long long v45 = *(void *)v46;
  v45[8] = v46[8];
  *(void *)&v13[v38[9]] = *(void *)&v14[v38[9]];
  uint64_t v47 = *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  uint64_t v48 = &v13[v47];
  uint64_t v49 = &v14[v47];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v50 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v50 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(v50);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v48, v49, v51);
  swift_storeEnumTagMultiPayload();
  uint64_t v52 = a3[6];
  uint64_t v53 = a3[7];
  uint64_t v54 = *(void **)&a2[v52];
  *(void *)&a1[v52] = v54;
  uint64_t v55 = &a1[v53];
  uint64_t v56 = &a2[v53];
  id v57 = v54;
  int v58 = swift_getEnumCaseMultiPayload();
  if (v58 == 2)
  {
    *(void *)uint64_t v55 = *(void *)v56;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v58 != 1)
    {
      memcpy(v55, v56, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_34;
    }
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)uint64_t v55 = *(void *)v56;
        goto LABEL_31;
      case 3u:
        int v60 = a3;
        uint64_t v61 = a1;
        uint64_t v62 = *(void *)v56;
        char v63 = v56[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v56, v63);
        *(void *)uint64_t v55 = v62;
        a1 = v61;
        a3 = v60;
        v55[8] = v63;
        uint64_t v64 = *((void *)v56 + 3);
        *((void *)v55 + 2) = *((void *)v56 + 2);
        *((void *)v55 + 3) = v64;
        uint64_t v65 = *((void *)v56 + 5);
        *((void *)v55 + 4) = *((void *)v56 + 4);
        *((void *)v55 + 5) = v65;
        long long v66 = *((_OWORD *)v56 + 4);
        *((_OWORD *)v55 + 3) = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 4) = v66;
        v55[80] = v56[80];
        goto LABEL_30;
      case 4u:
        uint64_t v67 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v55, v56, v67);
        long long v68 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v69 = v68[12];
        uint64_t v70 = &v55[v69];
        uint64_t v71 = &v56[v69];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        *(void *)uint64_t v70 = v73;
        *((void *)v70 + 1) = v72;
        uint64_t v74 = v68[16];
        uint64_t v75 = &v55[v74];
        uint64_t v76 = &v56[v74];
        uint64_t v77 = *((void *)v76 + 1);
        *(void *)uint64_t v75 = *(void *)v76;
        *((void *)v75 + 1) = v77;
        uint64_t v78 = v68[20];
        uint64_t v79 = &v55[v78];
        uint64_t v80 = &v56[v78];
        long long v81 = *((_OWORD *)v80 + 1);
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
        *((_OWORD *)v79 + 1) = v81;
        v79[32] = v80[32];
LABEL_30:
        swift_bridgeObjectRetain();
LABEL_31:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v59 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v55, v56, v59);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_34:
  *(void *)&v55[v38[5]] = *(void *)&v56[v38[5]];
  *(void *)&v55[v38[6]] = *(void *)&v56[v38[6]];
  uint64_t v82 = v38[7];
  long long v83 = &v55[v82];
  uint64_t v84 = &v56[v82];
  uint64_t v85 = *(void *)&v56[v82 + 24];
  if (v85)
  {
    *((void *)v83 + 3) = v85;
    (**(void (***)(void))(v85 - 8))();
  }
  else
  {
    long long v86 = *((_OWORD *)v84 + 1);
    *(_OWORD *)long long v83 = *(_OWORD *)v84;
    *((_OWORD *)v83 + 1) = v86;
  }
  uint64_t v87 = v38[8];
  long long v88 = &v55[v87];
  uint64_t v89 = &v56[v87];
  *(void *)long long v88 = *(void *)v89;
  v88[8] = v89[8];
  *(void *)&v55[v38[9]] = *(void *)&v56[v38[9]];
  uint64_t v90 = a3[8];
  char v91 = (id *)&a1[v90];
  uint64_t v92 = (id *)&a2[v90];
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int v93 = swift_getEnumCaseMultiPayload();
  if (v93 == 2)
  {
    id v101 = *v92;
    id v102 = *v92;
    *char v91 = v101;
  }
  else if (v93 == 1)
  {
    *char v91 = *v92;
    uint64_t v94 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v95 = *(int *)(v94 + 20);
    uint64_t v96 = (char *)v91 + v95;
    uint64_t v121 = a1;
    uint64_t v97 = (char *)v92 + v95;
    uint64_t v98 = type metadata accessor for DataFrame();
    uint64_t v120 = a3;
    uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 16);
    uint64_t v100 = v97;
    a1 = v121;
    v99(v96, v100, v98);
    v99((char *)v91 + *(int *)(v94 + 24), (char *)v92 + *(int *)(v94 + 24), v98);
    a3 = v120;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      id v103 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      id v103 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(v103);
    (*(void (**)(id *, id *, uint64_t))(*(void *)(v104 - 8) + 16))(v91, v92, v104);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v105 = a3[9];
  uint64_t v106 = (void **)&a1[v105];
  uint64_t v107 = (void **)&a2[v105];
  int v108 = swift_getEnumCaseMultiPayload();
  if (v108 == 2)
  {
    uint64_t v115 = *v107;
    id v116 = v115;
    objc_class *v106 = v115;
  }
  else if (v108 == 1)
  {
    objc_class *v106 = *v107;
    uint64_t v109 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v110 = *(int *)(v109 + 20);
    uint64_t v111 = (char *)v106 + v110;
    uint64_t v112 = (char *)v107 + v110;
    uint64_t v113 = type metadata accessor for DataFrame();
    uint64_t v114 = *(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 16);
    v114(v111, v112, v113);
    v114((char *)v106 + *(int *)(v109 + 24), (char *)v107 + *(int *)(v109 + 24), v113);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v117 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v117 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(v117);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v118 - 8) + 16))(v106, v107, v118);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TrainingTablePrinter(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = *(int *)(v6 + 20);
      id v11 = *(void **)&a2[v10];
      *(void *)&a1[v10] = v11;
      *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
      id v12 = v11;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)a1, (void (*)(void))type metadata accessor for TrainingTablePrinter);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 24))(a1, a2, v20);
  uint64_t v21 = *(int *)(v6 + 20);
  long long v22 = *(void **)&a2[v21];
  uint64_t v23 = *(void **)&a1[v21];
  *(void *)&a1[v21] = v22;
  id v24 = v22;

  *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v14 = a3[5];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if (a1 == a2) {
    goto LABEL_20;
  }
  outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v14], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v17 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)uint64_t v15 = *(void *)v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
      goto LABEL_20;
    }
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)uint64_t v15 = *(void *)v16;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v25 = *(void *)v16;
        char v26 = v16[8];
        outlined copy of Result<_DataTable, Error>(*(id *)v16, v26);
        *(void *)uint64_t v15 = v25;
        unsigned char v15[8] = v26;
        *((void *)v15 + 2) = *((void *)v16 + 2);
        *((void *)v15 + 3) = *((void *)v16 + 3);
        *((void *)v15 + 4) = *((void *)v16 + 4);
        *((void *)v15 + 5) = *((void *)v16 + 5);
        long long v27 = *((_OWORD *)v16 + 3);
        long long v28 = *((_OWORD *)v16 + 4);
        v15[80] = v16[80];
        *((_OWORD *)v15 + 3) = v27;
        *((_OWORD *)v15 + 4) = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v29 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v15, v16, v29);
        uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v31 = v30[12];
        uint64_t v32 = &v15[v31];
        uint64_t v33 = &v16[v31];
        *(void *)uint64_t v32 = *(void *)v33;
        *((void *)v32 + 1) = *((void *)v33 + 1);
        uint64_t v34 = v30[16];
        uint64_t v35 = &v15[v34];
        uint64_t v36 = &v16[v34];
        *(void *)uint64_t v35 = *(void *)v36;
        *((void *)v35 + 1) = *((void *)v36 + 1);
        uint64_t v37 = v30[20];
        uint64_t v38 = &v15[v37];
        uint64_t v39 = &v16[v37];
        char v40 = v39[32];
        long long v41 = *((_OWORD *)v39 + 1);
        *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
        *((_OWORD *)v38 + 1) = v41;
        v38[32] = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v19 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v15, v16, v19);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  uint64_t v42 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&v15[v42[5]] = *(void *)&v16[v42[5]];
  *(void *)&v15[v42[6]] = *(void *)&v16[v42[6]];
  uint64_t v43 = v42[7];
  uint64_t v44 = (uint64_t)&v15[v43];
  long long v45 = (uint64_t *)&v16[v43];
  uint64_t v46 = *(void *)&v16[v43 + 24];
  if (*(void *)&v15[v43 + 24])
  {
    if (v46)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v44, v45);
      goto LABEL_27;
    }
    __swift_destroy_boxed_opaque_existential_0(v44);
  }
  else if (v46)
  {
    *(void *)(v44 + 24) = v46;
    (**(void (***)(uint64_t, char *))(v46 - 8))(v44, (char *)v45);
    goto LABEL_27;
  }
  long long v47 = *((_OWORD *)v45 + 1);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v47;
LABEL_27:
  uint64_t v48 = v42[8];
  uint64_t v49 = &v15[v48];
  uint64_t v50 = &v16[v48];
  uint64_t v51 = *(void *)v50;
  v49[8] = v50[8];
  *(void *)uint64_t v49 = v51;
  *(void *)&v15[v42[9]] = *(void *)&v16[v42[9]];
  uint64_t v52 = type metadata accessor for MLSoundClassifier.Model();
  if (a1 != a2)
  {
    uint64_t v53 = *(int *)(v52 + 20);
    uint64_t v54 = &v16[v53];
    uint64_t v55 = (uint64_t)&v15[v53];
    outlined destroy of DefaultIndices<DataFrame.Rows>(v55, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v56 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    }
    else {
      uint64_t v56 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    }
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(v56);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v54, v57);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v58 = a3[6];
  uint64_t v59 = *(void **)&a2[v58];
  int v60 = *(void **)&a1[v58];
  *(void *)&a1[v58] = v59;
  id v61 = v59;

  uint64_t v62 = a3[7];
  char v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v62], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v65 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    int v66 = swift_getEnumCaseMultiPayload();
    if (v66 == 2)
    {
      *(void *)char v63 = *(void *)v64;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v66 != 1)
      {
        memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
        goto LABEL_46;
      }
      type metadata accessor for MLSoundClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *(void *)char v63 = *(void *)v64;
          goto LABEL_43;
        case 3u:
          long long v68 = a3;
          uint64_t v69 = *(void *)v64;
          char v70 = v64[8];
          outlined copy of Result<_DataTable, Error>(*(id *)v64, v70);
          *(void *)char v63 = v69;
          a3 = v68;
          v63[8] = v70;
          *((void *)v63 + 2) = *((void *)v64 + 2);
          *((void *)v63 + 3) = *((void *)v64 + 3);
          *((void *)v63 + 4) = *((void *)v64 + 4);
          *((void *)v63 + 5) = *((void *)v64 + 5);
          long long v71 = *((_OWORD *)v64 + 3);
          long long v72 = *((_OWORD *)v64 + 4);
          v63[80] = v64[80];
          *((_OWORD *)v63 + 3) = v71;
          *((_OWORD *)v63 + 4) = v72;
          goto LABEL_42;
        case 4u:
          uint64_t v73 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 16))(v63, v64, v73);
          uint64_t v74 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v75 = v74[12];
          uint64_t v76 = &v63[v75];
          uint64_t v77 = &v64[v75];
          *(void *)uint64_t v76 = *(void *)v77;
          *((void *)v76 + 1) = *((void *)v77 + 1);
          uint64_t v78 = v74[16];
          uint64_t v79 = &v63[v78];
          uint64_t v80 = &v64[v78];
          *(void *)uint64_t v79 = *(void *)v80;
          *((void *)v79 + 1) = *((void *)v80 + 1);
          uint64_t v81 = v74[20];
          uint64_t v82 = &v63[v81];
          long long v83 = &v64[v81];
          char v84 = v83[32];
          long long v85 = *((_OWORD *)v83 + 1);
          *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
          *((_OWORD *)v82 + 1) = v85;
          v82[32] = v84;
LABEL_42:
          swift_bridgeObjectRetain();
LABEL_43:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v67 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v63, v64, v67);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_46:
  *(void *)&v63[v42[5]] = *(void *)&v64[v42[5]];
  *(void *)&v63[v42[6]] = *(void *)&v64[v42[6]];
  uint64_t v86 = v42[7];
  uint64_t v87 = (uint64_t)&v63[v86];
  long long v88 = (uint64_t *)&v64[v86];
  uint64_t v89 = *(void *)&v64[v86 + 24];
  if (*(void *)&v63[v86 + 24])
  {
    if (v89)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v87, v88);
      goto LABEL_53;
    }
    __swift_destroy_boxed_opaque_existential_0(v87);
  }
  else if (v89)
  {
    *(void *)(v87 + 24) = v89;
    (**(void (***)(uint64_t, char *))(v89 - 8))(v87, (char *)v88);
    goto LABEL_53;
  }
  long long v90 = *((_OWORD *)v88 + 1);
  *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
  *(_OWORD *)(v87 + 16) = v90;
LABEL_53:
  uint64_t v91 = v42[8];
  uint64_t v92 = &v63[v91];
  int v93 = &v64[v91];
  uint64_t v94 = *(void *)v93;
  v92[8] = v93[8];
  *(void *)uint64_t v92 = v94;
  *(void *)&v63[v42[9]] = *(void *)&v64[v42[9]];
  if (a1 != a2)
  {
    uint64_t v95 = a3[8];
    uint64_t v96 = (id *)&a1[v95];
    uint64_t v97 = (id *)&a2[v95];
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v95], (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int v98 = swift_getEnumCaseMultiPayload();
    if (v98 == 2)
    {
      id v103 = *v97;
      id v104 = *v97;
      *uint64_t v96 = v103;
    }
    else if (v98 == 1)
    {
      *uint64_t v96 = *v97;
      uint64_t v99 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v100 = *(int *)(v99 + 20);
      uint64_t v122 = (char *)v97 + v100;
      uint64_t v123 = (char *)v96 + v100;
      uint64_t v101 = type metadata accessor for DataFrame();
      id v102 = *(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 16);
      v102(v123, v122, v101);
      v102((char *)v96 + *(int *)(v99 + 24), (char *)v97 + *(int *)(v99 + 24), v101);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v105 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v105 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(v105);
      (*(void (**)(id *, id *, uint64_t))(*(void *)(v106 - 8) + 16))(v96, v97, v106);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v107 = a3[9];
    int v108 = (void **)&a1[v107];
    uint64_t v109 = (void **)&a2[v107];
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v107], (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int v110 = swift_getEnumCaseMultiPayload();
    if (v110 == 2)
    {
      uint64_t v117 = *v109;
      id v118 = v117;
      objc_class *v108 = v117;
    }
    else if (v110 == 1)
    {
      objc_class *v108 = *v109;
      uint64_t v111 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v112 = *(int *)(v111 + 20);
      uint64_t v113 = (char *)v108 + v112;
      uint64_t v114 = (char *)v109 + v112;
      uint64_t v115 = type metadata accessor for DataFrame();
      id v116 = *(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 16);
      v116(v113, v114, v115);
      v116((char *)v108 + *(int *)(v111 + 24), (char *)v109 + *(int *)(v111 + 24), v115);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v119 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v119 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(v119);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v120 - 8) + 16))(v108, v109, v120);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MLSoundClassifier.ModelParameters(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

char *initializeWithTake for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TrainingTablePrinter(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
    *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  id v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v13 = type metadata accessor for MLSoundClassifier.DataSource();
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v15 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v11, v15);
    uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&v10[v16[12]] = *(_OWORD *)&v11[v16[12]];
    *(_OWORD *)&v10[v16[16]] = *(_OWORD *)&v11[v16[16]];
    uint64_t v17 = v16[20];
    uint64_t v18 = &v10[v17];
    uint64_t v19 = &v11[v17];
    long long v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    unsigned char v18[32] = v19[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      goto LABEL_12;
    }
    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v10, v11, v21);
  }
  swift_storeEnumTagMultiPayload();
LABEL_12:
  swift_storeEnumTagMultiPayload();
LABEL_13:
  long long v22 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&v10[v22[5]] = *(void *)&v11[v22[5]];
  *(void *)&v10[v22[6]] = *(void *)&v11[v22[6]];
  uint64_t v23 = v22[7];
  id v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)id v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  uint64_t v27 = v22[8];
  long long v28 = &v10[v27];
  uint64_t v29 = &v11[v27];
  *(void *)long long v28 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)&v10[v22[9]] = *(void *)&v11[v22[9]];
  uint64_t v30 = *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  uint64_t v31 = &v10[v30];
  uint64_t v32 = &v11[v30];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v33 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  else {
    uint64_t v33 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  }
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(v33);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v31, v32, v34);
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(v36, v37, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_25;
  }
  uint64_t v38 = type metadata accessor for MLSoundClassifier.DataSource();
  unsigned int v39 = swift_getEnumCaseMultiPayload();
  if (v39 == 4)
  {
    uint64_t v40 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v36, v37, v40);
    long long v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&v36[v41[12]] = *(_OWORD *)&v37[v41[12]];
    *(_OWORD *)&v36[v41[16]] = *(_OWORD *)&v37[v41[16]];
    uint64_t v42 = v41[20];
    uint64_t v43 = &v36[v42];
    uint64_t v44 = &v37[v42];
    long long v45 = *((_OWORD *)v44 + 1);
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    *((_OWORD *)v43 + 1) = v45;
    v43[32] = v44[32];
  }
  else
  {
    if (v39 > 1)
    {
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
      goto LABEL_24;
    }
    uint64_t v46 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v36, v37, v46);
  }
  swift_storeEnumTagMultiPayload();
LABEL_24:
  swift_storeEnumTagMultiPayload();
LABEL_25:
  *(void *)&v36[v22[5]] = *(void *)&v37[v22[5]];
  *(void *)&v36[v22[6]] = *(void *)&v37[v22[6]];
  uint64_t v47 = v22[7];
  uint64_t v48 = &v36[v47];
  uint64_t v49 = &v37[v47];
  long long v50 = *((_OWORD *)v49 + 1);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *((_OWORD *)v48 + 1) = v50;
  uint64_t v51 = v22[8];
  uint64_t v52 = &v36[v51];
  uint64_t v53 = &v37[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v53[8];
  *(void *)&v36[v22[9]] = *(void *)&v37[v22[9]];
  uint64_t v54 = a3[8];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v57 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v58 = swift_getEnumCaseMultiPayload();
  if (v58 == 1)
  {
    *(void *)uint64_t v55 = *(void *)v56;
    uint64_t v61 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v62 = *(int *)(v61 + 20);
    char v63 = &v55[v62];
    uint64_t v64 = &v56[v62];
    uint64_t v81 = a1;
    uint64_t v65 = type metadata accessor for DataFrame();
    int v66 = *(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32);
    v66(v63, v64, v65);
    uint64_t v67 = v65;
    a1 = v81;
    v66(&v55[*(int *)(v61 + 24)], &v56[*(int *)(v61 + 24)], v67);
LABEL_32:
    swift_storeEnumTagMultiPayload();
    goto LABEL_34;
  }
  if (!v58)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v59 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v59 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(v59);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v55, v56, v60);
    swift_storeEnumTagMultiPayload();
    goto LABEL_32;
  }
  memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
LABEL_34:
  uint64_t v68 = a3[9];
  uint64_t v69 = &a1[v68];
  char v70 = &a2[v68];
  int v71 = swift_getEnumCaseMultiPayload();
  if (v71 == 1)
  {
    *(void *)uint64_t v69 = *(void *)v70;
    uint64_t v74 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v75 = *(int *)(v74 + 20);
    uint64_t v76 = &v69[v75];
    uint64_t v77 = &v70[v75];
    uint64_t v78 = type metadata accessor for DataFrame();
    uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32);
    v79(v76, v77, v78);
    v79(&v69[*(int *)(v74 + 24)], &v70[*(int *)(v74 + 24)], v78);
  }
  else
  {
    if (v71)
    {
      memcpy(v69, v70, *(void *)(*(void *)(v57 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      long long v72 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      long long v72 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(v72);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32))(v69, v70, v73);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TrainingTablePrinter(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
      *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)a1, (void (*)(void))type metadata accessor for TrainingTablePrinter);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40))(a1, a2, v17);
  uint64_t v18 = *(int *)(v6 + 20);
  uint64_t v19 = *(void **)&a1[v18];
  *(void *)&a1[v18] = *(void *)&a2[v18];

  *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if (a1 == a2) {
    goto LABEL_18;
  }
  outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v11], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v14 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_18;
  }
  uint64_t v15 = type metadata accessor for MLSoundClassifier.DataSource();
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v20 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v12, v13, v20);
    uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&v12[v21[12]] = *(_OWORD *)&v13[v21[12]];
    *(_OWORD *)&v12[v21[16]] = *(_OWORD *)&v13[v21[16]];
    uint64_t v22 = v21[20];
    uint64_t v23 = &v12[v22];
    id v24 = &v13[v22];
    long long v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v25;
    v23[32] = v24[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_17;
    }
    uint64_t v26 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v12, v13, v26);
  }
  swift_storeEnumTagMultiPayload();
LABEL_17:
  swift_storeEnumTagMultiPayload();
LABEL_18:
  uint64_t v27 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&v12[v27[5]] = *(void *)&v13[v27[5]];
  *(void *)&v12[v27[6]] = *(void *)&v13[v27[6]];
  uint64_t v28 = v27[7];
  uint64_t v29 = &v12[v28];
  uint64_t v30 = &v13[v28];
  if (*(void *)&v12[v28 + 24]) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
  }
  long long v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v31;
  uint64_t v32 = v27[8];
  uint64_t v33 = &v12[v32];
  uint64_t v34 = &v13[v32];
  v33[8] = v34[8];
  *(void *)uint64_t v33 = *(void *)v34;
  *(void *)&v12[v27[9]] = *(void *)&v13[v27[9]];
  uint64_t v35 = type metadata accessor for MLSoundClassifier.Model();
  if (a1 != a2)
  {
    uint64_t v36 = *(int *)(v35 + 20);
    uint64_t v37 = &v13[v36];
    uint64_t v38 = (uint64_t)&v12[v36];
    outlined destroy of DefaultIndices<DataFrame.Rows>(v38, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      unsigned int v39 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    }
    else {
      unsigned int v39 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    }
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v37, v40);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v41 = a3[6];
  uint64_t v42 = *(void **)&a1[v41];
  *(void *)&a1[v41] = *(void *)&a2[v41];

  uint64_t v43 = a3[7];
  uint64_t v44 = &a1[v43];
  long long v45 = &a2[v43];
  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v43], (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v46 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
      goto LABEL_35;
    }
    uint64_t v47 = type metadata accessor for MLSoundClassifier.DataSource();
    unsigned int v48 = swift_getEnumCaseMultiPayload();
    if (v48 == 4)
    {
      uint64_t v49 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v44, v45, v49);
      long long v50 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v44[v50[12]] = *(_OWORD *)&v45[v50[12]];
      *(_OWORD *)&v44[v50[16]] = *(_OWORD *)&v45[v50[16]];
      uint64_t v51 = v50[20];
      uint64_t v52 = &v44[v51];
      uint64_t v53 = &v45[v51];
      long long v54 = *((_OWORD *)v53 + 1);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v54;
      v52[32] = v53[32];
    }
    else
    {
      if (v48 > 1)
      {
        memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
        goto LABEL_34;
      }
      uint64_t v55 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v44, v45, v55);
    }
    swift_storeEnumTagMultiPayload();
LABEL_34:
    swift_storeEnumTagMultiPayload();
  }
LABEL_35:
  *(void *)&v44[v27[5]] = *(void *)&v45[v27[5]];
  *(void *)&v44[v27[6]] = *(void *)&v45[v27[6]];
  uint64_t v56 = v27[7];
  uint64_t v57 = &v44[v56];
  int v58 = &v45[v56];
  if (*(void *)&v44[v56 + 24]) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  }
  long long v59 = *((_OWORD *)v58 + 1);
  *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
  *((_OWORD *)v57 + 1) = v59;
  uint64_t v60 = v27[8];
  uint64_t v61 = &v44[v60];
  uint64_t v62 = &v45[v60];
  v61[8] = v62[8];
  *(void *)uint64_t v61 = *(void *)v62;
  *(void *)&v44[v27[9]] = *(void *)&v45[v27[9]];
  if (a1 == a2) {
    return a1;
  }
  uint64_t v63 = a3[8];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v63], (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v66 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v67 = swift_getEnumCaseMultiPayload();
  if (v67 == 1)
  {
    *(void *)uint64_t v64 = *(void *)v65;
    uint64_t v70 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v71 = *(int *)(v70 + 20);
    long long v88 = &v64[v71];
    long long v72 = &v65[v71];
    uint64_t v73 = type metadata accessor for DataFrame();
    uint64_t v89 = a3;
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32);
    v74(v88, v72, v73);
    v74(&v64[*(int *)(v70 + 24)], &v65[*(int *)(v70 + 24)], v73);
    a3 = v89;
  }
  else
  {
    if (v67)
    {
      memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
      goto LABEL_47;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(v68);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v64, v65, v69);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_47:
  uint64_t v75 = a3[9];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  outlined destroy of MLSoundClassifier.ModelParameters((uint64_t)&a1[v75], (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  int v78 = swift_getEnumCaseMultiPayload();
  if (v78 == 1)
  {
    *(void *)uint64_t v76 = *(void *)v77;
    uint64_t v81 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v82 = *(int *)(v81 + 20);
    long long v83 = &v76[v82];
    char v84 = &v77[v82];
    uint64_t v85 = type metadata accessor for DataFrame();
    uint64_t v86 = *(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32);
    v86(v83, v84, v85);
    v86(&v76[*(int *)(v81 + 24)], &v77[*(int *)(v81 + 24)], v85);
  }
  else
  {
    if (v78)
    {
      memcpy(v76, v77, *(void *)(*(void *)(v66 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v79 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v79 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(v79);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v76, v77, v80);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2272119F0);
}

uint64_t sub_2272119F0(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  type metadata accessor for MLSoundClassifier.Model();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[5];
LABEL_12:
    uint64_t v9 = a1 + v12;
    goto LABEL_13;
  }
  if (a2 != 0x7FFFFFFF)
  {
    type metadata accessor for MLSoundClassifier.ModelParameters();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v16 + 84) == a2)
    {
      uint64_t v8 = v15;
      uint64_t v12 = a3[7];
    }
    else
    {
      uint64_t v8 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v12 = a3[8];
    }
    goto LABEL_12;
  }
  unint64_t v13 = *(void *)(a1 + a3[6]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227211B00);
}

void sub_227211B00(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for MLSoundClassifier.Model();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(void *)(a1 + a4[6]) = (a2 - 1);
        return;
      }
      type metadata accessor for MLSoundClassifier.ModelParameters();
      OUTLINED_FUNCTION_6_1();
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        uint64_t v10 = v15;
        uint64_t v14 = a4[7];
      }
      else
      {
        uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
        uint64_t v14 = a4[8];
      }
    }
    uint64_t v11 = a1 + v14;
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for MLSoundClassifier()
{
  type metadata accessor for TrainingTablePrinter?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.Model();
    if (v1 <= 0x3F)
    {
      type metadata accessor for MLSoundClassifier.ModelParameters();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLClassifierMetrics.Contents(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void type metadata accessor for TrainingTablePrinter?()
{
  if (!lazy cache variable for type metadata for TrainingTablePrinter?)
  {
    type metadata accessor for TrainingTablePrinter(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrainingTablePrinter?);
    }
  }
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x22A676210);
  }
  return result;
}

uint64_t sub_227211DF0()
{
  return MEMORY[0x263F8D320];
}

uint64_t _s8CreateML17MLSoundClassifierV0D0VAE0A12MLComponents28UpdatableSupervisedEstimatorAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *closure #1 in closure #1 in Float.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, a2, v10, a4, a5);
}

uint64_t specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  uint64_t v12 = *a4;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, a2, v11, v12, a5, a6);
}

uint64_t specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = specialized closure #1 in MLSoundClassifier.evaluate<A>(on:);
  return specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)();
}

uint64_t sub_22721226C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for MLSoundClassifier();
  OUTLINED_FUNCTION_57_5();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = v0 + v5;
  uint64_t v9 = type metadata accessor for TrainingTablePrinter(0);
  if (!__swift_getEnumTagSinglePayload(v0 + v5, 1, v9))
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_6_19();
    OUTLINED_FUNCTION_25_0();
    v10();

    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v8 + v2[5];
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(OUTLINED_FUNCTION_110_1())
    {
      case 0u:
      case 1u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v13();
        break;
      case 2u:
        goto LABEL_7;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v11, *(unsigned char *)(v11 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v34();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_7;
      default:
        break;
    }
  }
  uint64_t v14 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v15 = v11 + *(int *)(v14 + 28);
  if (*(void *)(v15 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v15);
  }
  type metadata accessor for MLSoundClassifier.Model();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  int v16 = OUTLINED_FUNCTION_110_1();
  OUTLINED_FUNCTION_91_1(v16, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v17();

  uint64_t v18 = v8 + v2[7];
  int v19 = swift_getEnumCaseMultiPayload();
  if (v19 == 2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
  else if (v19 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(OUTLINED_FUNCTION_110_1())
    {
      case 0u:
      case 1u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v20();
        break;
      case 2u:
        goto LABEL_14;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v18, *(unsigned char *)(v18 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_14;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v35();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_14;
      default:
        break;
    }
  }
  uint64_t v21 = v18 + *(int *)(v14 + 28);
  if (*(void *)(v21 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v21);
  }
  uint64_t v22 = (id *)(v8 + v2[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int v23 = swift_getEnumCaseMultiPayload();
  switch(v23)
  {
    case 2:

      break;
    case 1:
      type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v37 = v2;
      uint64_t v25 = v7;
      uint64_t v26 = *(void (**)(void))(*(void *)(type metadata accessor for DataFrame() - 8) + 8);
      uint64_t v1 = v0;
      uint64_t v5 = (v4 + 16) & ~v4;
      OUTLINED_FUNCTION_68_3();
      v26();
      OUTLINED_FUNCTION_68_3();
      v26();
      uint64_t v7 = v25;
      uint64_t v2 = v37;
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        id v24 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        id v24 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      __swift_instantiateConcreteTypeFromMangledName(v24);
      OUTLINED_FUNCTION_6_19();
      (*(void (**)(id *))(v27 + 8))(v22);
      break;
  }
  uint64_t v28 = (id *)(v8 + v2[9]);
  int v29 = swift_getEnumCaseMultiPayload();
  switch(v29)
  {
    case 2:

      break;
    case 1:
      type metadata accessor for MLClassifierMetrics.Precomputed(0);
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_8();
      uint64_t v32 = *(void (**)(void))(v31 + 8);
      OUTLINED_FUNCTION_7_7();
      v32();
      OUTLINED_FUNCTION_7_7();
      v32();
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      __swift_instantiateConcreteTypeFromMangledName(v30);
      OUTLINED_FUNCTION_6_19();
      (*(void (**)(id *))(v33 + 8))(v28);
      break;
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v1, ((v7 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v4 | 7);
}

uint64_t partial apply for specialized closure #1 in MLSoundClassifier.evaluate<A>(on:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v0 = type metadata accessor for MLSoundClassifier();
  OUTLINED_FUNCTION_1(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_7_1(v1);
  *uint64_t v2 = v3;
  v2[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  uint64_t v4 = OUTLINED_FUNCTION_31_17();
  return v5(v4);
}

uint64_t sub_22721294C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_7_1(v2);
  *uint64_t v3 = v4;
  v3[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  uint64_t v5 = OUTLINED_FUNCTION_61_7();
  return closure #1 in static MLSoundClassifier.handleResult(_:session:fulfill:)(v5, v6, v7, v8, v9, v1);
}

uint64_t _s8CreateML27MLTrainingSessionParametersVWOcTm_6(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_36_2();
  v4(v3);
  OUTLINED_FUNCTION_8();
  uint64_t v5 = OUTLINED_FUNCTION_111();
  v6(v5);
  return a2;
}

uint64_t sub_227212A8C()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for MLSoundClassifier.Classifier();
  OUTLINED_FUNCTION_57_5();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0 + ((v3 + 16) & ~v3);
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int v8 = OUTLINED_FUNCTION_43();
  if (v8 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v8 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(OUTLINED_FUNCTION_43())
    {
      case 0u:
      case 1u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v9();
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v7, *(unsigned char *)(v7 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v18();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_106_0();
        goto LABEL_5;
      default:
        break;
    }
  }
  uint64_t v10 = v7 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters() + 28);
  if (*(void *)(v10 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v10);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int v11 = OUTLINED_FUNCTION_56_10();
  OUTLINED_FUNCTION_91_1(v11, &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v12();
  OUTLINED_FUNCTION_60_4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v13();

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_12_4();
  return MEMORY[0x270FA0238](v14, v15, v16);
}

uint64_t outlined init with take of MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_36_2();
  v5(v4);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a2, v2);
  return a2;
}

{
  uint64_t v4;

  uint64_t v4 = type metadata accessor for MLSoundClassifier.ModelParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  uint64_t v0 = type metadata accessor for MLSoundClassifier.Classifier();
  OUTLINED_FUNCTION_1(v0);
  OUTLINED_FUNCTION_86_2();
  uint64_t v1 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_39_0(v1);
  OUTLINED_FUNCTION_107_1();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_96_1(v2);
  *uint64_t v3 = v4;
  v3[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  uint64_t v5 = OUTLINED_FUNCTION_95_1();
  return v6(v5);
}

uint64_t sub_227212E84()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for MLSoundClassifier.Classifier();
  OUTLINED_FUNCTION_57_5();
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0 + v3;
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int v8 = OUTLINED_FUNCTION_43();
  if (v8 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (v8 == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(OUTLINED_FUNCTION_43())
    {
      case 0u:
      case 1u:
        type metadata accessor for URL();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v9();
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v7, *(unsigned char *)(v7 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_25_0();
        v18();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        OUTLINED_FUNCTION_106_0();
        goto LABEL_5;
      default:
        break;
    }
  }
  uint64_t v10 = v7 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters() + 28);
  if (*(void *)(v10 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v10);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  int v11 = OUTLINED_FUNCTION_56_10();
  OUTLINED_FUNCTION_91_1(v11, &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v12();
  OUTLINED_FUNCTION_60_4();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v13();

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_94_0();
  OUTLINED_FUNCTION_12_4();
  return MEMORY[0x270FA0238](v14, v15, v16);
}

uint64_t partial apply for specialized closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v0 = type metadata accessor for MLSoundClassifier.Classifier();
  OUTLINED_FUNCTION_1(v0);
  OUTLINED_FUNCTION_86_2();
  uint64_t v1 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_39_0(v1);
  OUTLINED_FUNCTION_107_1();
  uint64_t v2 = swift_task_alloc();
  unint64_t v3 = (void *)OUTLINED_FUNCTION_96_1(v2);
  *unint64_t v3 = v4;
  v3[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  uint64_t v5 = OUTLINED_FUNCTION_95_1();
  return v6(v5);
}

uint64_t partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in SoundClassifierTrainingSessionDelegate.train(from:));
}

uint64_t objectdestroy_80Tm()
{
  uint64_t v1 = (int *)(type metadata accessor for TrainingTablePrinter(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  type metadata accessor for Date();
  OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_25_0();
  v6();

  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #1 in closure #3 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in SoundClassifierTrainingSessionDelegate.train(from:));
}

uint64_t partial apply for closure #1 in closure #4 in MLSoundClassifier.init<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_39_0(v4);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a2(a1, v6, v7);
}

uint64_t partial apply for closure #8 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #8 in static MLSoundClassifier.convertFeatures(_:)(a1, a2);
}

uint64_t partial apply for closure #5 in static MLSoundClassifier.convertFeatures(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #5 in static MLSoundClassifier.convertFeatures(_:)(a1, a2);
}

unsigned char *partial apply for closure #1 in closure #1 in Float.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Float.init<A>(_:)(a1, a2);
}

void *_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_Sb_TG5TA_0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_12_30()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_29(uint64_t result)
{
  *(void *)(v1 + 176) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_31()
{
  return *(void *)(v0 + 24) + *(int *)(v0 + 304);
}

uint64_t OUTLINED_FUNCTION_24_28()
{
  ++v1[29];
  v1[30] = v0;
  return v1[25];
}

unint64_t OUTLINED_FUNCTION_28_20()
{
  uint64_t v4 = *(void *)(v3 + 160);
  *(void *)(v0 + 16) = v1;
  return v0
       + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + *(void *)(v4 + 72) * v2;
}

uint64_t OUTLINED_FUNCTION_31_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_20()
{
  return *(void *)(v0 + 168);
}

uint64_t OUTLINED_FUNCTION_33_17()
{
  return *(void *)(v0 + 168);
}

uint64_t OUTLINED_FUNCTION_34_14()
{
  return swift_dynamicCastMetatype();
}

uint64_t OUTLINED_FUNCTION_35_17()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_36_18()
{
  return Column.mapNonNil<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_37_15()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_44_15@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a2 = a3;
  *(void *)(a2 + 8) = (v3 - 32) | 0x8000000000000000;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  *uint64_t v4 = a1;
  return type metadata accessor for MLClassifierMetrics.Contents(0);
}

uint64_t OUTLINED_FUNCTION_47_16()
{
  return *(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 232) + 28);
}

uint64_t OUTLINED_FUNCTION_49_7()
{
  return *(void *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_50_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_10()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_54_8()
{
  return *(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 20);
}

uint64_t OUTLINED_FUNCTION_56_10()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_61_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_67_4()
{
  return v0;
}

uint64_t *OUTLINED_FUNCTION_70_4(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  return __swift_allocate_boxed_opaque_existential_0(v1);
}

uint64_t OUTLINED_FUNCTION_76_3()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_77_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_85_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_90_0()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_91_1@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  if (a1 == 1) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = a2;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v4);
}

uint64_t OUTLINED_FUNCTION_92_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_95_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_96_1(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_97_1(uint64_t result)
{
  *(void *)(v1 + 264) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_98_1(uint64_t result)
{
  *(void *)(v1 + 248) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_100_0()
{
  return *(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 232) + 20);
}

uint64_t OUTLINED_FUNCTION_101_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_106_0()
{
  return swift_bridgeObjectRelease();
}

double OUTLINED_FUNCTION_109_1(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_110_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_112_0()
{
  return type metadata accessor for MetricsKey();
}

uint64_t OUTLINED_FUNCTION_114_1()
{
  return swift_bridgeObjectRelease();
}

char *initializeBufferWithCopyOfBuffer for MLSoundClassifier.Classifier(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
    return a1;
  }
  uint64_t v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *a2;
    swift_bridgeObjectRetain();
LABEL_13:
    swift_storeEnumTagMultiPayload();
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        int v11 = *a2;
        char v12 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v12);
        *(void *)a1 = v11;
        a1[8] = v12;
        uint64_t v13 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v13;
        uint64_t v14 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v14;
        long long v15 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v15;
        a1[80] = *((unsigned char *)a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v16 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v18 = v17[12];
        int v19 = &a1[v18];
        uint64_t v20 = (uint64_t *)((char *)a2 + v18);
        uint64_t v22 = *v20;
        uint64_t v21 = v20[1];
        *(void *)int v19 = v22;
        *((void *)v19 + 1) = v21;
        uint64_t v23 = v17[16];
        id v24 = &a1[v23];
        uint64_t v25 = (char **)((char *)a2 + v23);
        uint64_t v26 = v25[1];
        *(void *)id v24 = *v25;
        *((void *)v24 + 1) = v26;
        uint64_t v27 = v17[20];
        uint64_t v28 = &a1[v27];
        uint64_t v29 = (uint64_t)a2 + v27;
        long long v30 = *(_OWORD *)(v29 + 16);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
        *((_OWORD *)v28 + 1) = v30;
        v28[32] = *(unsigned char *)(v29 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        break;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_14:
  uint64_t v31 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&a1[v31[5]] = *(char **)((char *)a2 + v31[5]);
  *(void *)&a1[v31[6]] = *(char **)((char *)a2 + v31[6]);
  uint64_t v32 = v31[7];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = (_OWORD *)((char *)a2 + v32);
  uint64_t v35 = *(uint64_t *)((char *)a2 + v32 + 24);
  if (v35)
  {
    *((void *)v33 + 3) = v35;
    (**(void (***)(void))(v35 - 8))();
  }
  else
  {
    long long v36 = v34[1];
    *(_OWORD *)uint64_t v33 = *v34;
    *((_OWORD *)v33 + 1) = v36;
  }
  uint64_t v37 = v31[8];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = (uint64_t)a2 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = *(unsigned char *)(v39 + 8);
  *(void *)&a1[v31[9]] = *(char **)((char *)a2 + v31[9]);
  uint64_t v40 = *(int *)(a3 + 20);
  uint64_t v41 = &a1[v40];
  uint64_t v42 = (uint64_t)a2 + v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  }
  else {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        uint64_t v12 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      default:
        break;
    }
  }
  uint64_t v6 = a1 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters() + 28);
  if (*(void *)(v6 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v8 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  else {
    uint64_t v8 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v7, v9);
}

void *initializeWithCopy for MLSoundClassifier.Classifier(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *(void *)a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_12;
    }
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v9 = *(void *)a2;
        char v10 = a2[8];
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v10);
        *a1 = v9;
        *((unsigned char *)a1 + 8) = v10;
        uint64_t v11 = *((void *)a2 + 3);
        a1[2] = *((void *)a2 + 2);
        a1[3] = v11;
        uint64_t v12 = *((void *)a2 + 5);
        a1[4] = *((void *)a2 + 4);
        a1[5] = v12;
        long long v13 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v13;
        *((unsigned char *)a1 + 80) = a2[80];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v14 = type metadata accessor for DataFrame();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        long long v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        uint64_t v16 = v15[12];
        uint64_t v17 = (void *)((char *)a1 + v16);
        uint64_t v18 = &a2[v16];
        uint64_t v20 = *(void *)v18;
        uint64_t v19 = *((void *)v18 + 1);
        void *v17 = v20;
        v17[1] = v19;
        uint64_t v21 = v15[16];
        uint64_t v22 = (void *)((char *)a1 + v21);
        uint64_t v23 = &a2[v21];
        uint64_t v24 = *((void *)v23 + 1);
        void *v22 = *(void *)v23;
        v22[1] = v24;
        uint64_t v25 = v15[20];
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = &a2[v25];
        long long v28 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v28;
        v26[32] = v27[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_12:
  uint64_t v29 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)((char *)a1 + v29[5]) = *(void *)&a2[v29[5]];
  *(void *)((char *)a1 + v29[6]) = *(void *)&a2[v29[6]];
  uint64_t v30 = v29[7];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)&a2[v30 + 24];
  if (v33)
  {
    *((void *)v31 + 3) = v33;
    (**(void (***)(void))(v33 - 8))();
  }
  else
  {
    long long v34 = *((_OWORD *)v32 + 1);
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v34;
  }
  uint64_t v35 = v29[8];
  long long v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  *(void *)long long v36 = *(void *)v37;
  v36[8] = v37[8];
  *(void *)((char *)a1 + v29[9]) = *(void *)&a2[v29[9]];
  uint64_t v38 = *(int *)(a3 + 20);
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = &a2[v38];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v41 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  else {
    uint64_t v41 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  }
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v41);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v39, v40, v42);
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MLSoundClassifier.Classifier(void *a1, char *a2, uint64_t a3)
{
  if (a1 != (void *)a2)
  {
    _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOhTm_0((uint64_t)a1, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *(void *)a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_13;
      }
      type metadata accessor for MLSoundClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *a1 = *(void *)a2;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v9 = *(void *)a2;
          char v10 = a2[8];
          outlined copy of Result<_DataTable, Error>(*(id *)a2, v10);
          *a1 = v9;
          *((unsigned char *)a1 + 8) = v10;
          a1[2] = *((void *)a2 + 2);
          a1[3] = *((void *)a2 + 3);
          a1[4] = *((void *)a2 + 4);
          a1[5] = *((void *)a2 + 5);
          long long v11 = *((_OWORD *)a2 + 3);
          long long v12 = *((_OWORD *)a2 + 4);
          *((unsigned char *)a1 + 80) = a2[80];
          *((_OWORD *)a1 + 3) = v11;
          *((_OWORD *)a1 + 4) = v12;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        case 4u:
          uint64_t v13 = type metadata accessor for DataFrame();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
          uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v15 = v14[12];
          uint64_t v16 = (void *)((char *)a1 + v15);
          uint64_t v17 = &a2[v15];
          *uint64_t v16 = *(void *)v17;
          v16[1] = *((void *)v17 + 1);
          uint64_t v18 = v14[16];
          uint64_t v19 = (void *)((char *)a1 + v18);
          uint64_t v20 = &a2[v18];
          *uint64_t v19 = *(void *)v20;
          v19[1] = *((void *)v20 + 1);
          uint64_t v21 = v14[20];
          uint64_t v22 = (char *)a1 + v21;
          uint64_t v23 = &a2[v21];
          char v24 = v23[32];
          long long v25 = *((_OWORD *)v23 + 1);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
          *((_OWORD *)v22 + 1) = v25;
          v22[32] = v24;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v8 = type metadata accessor for URL();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_13:
  uint64_t v26 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)((char *)a1 + v26[5]) = *(void *)&a2[v26[5]];
  *(void *)((char *)a1 + v26[6]) = *(void *)&a2[v26[6]];
  uint64_t v27 = v26[7];
  uint64_t v28 = (uint64_t)a1 + v27;
  uint64_t v29 = (uint64_t *)&a2[v27];
  uint64_t v30 = *(void *)&a2[v27 + 24];
  if (*(void *)((char *)a1 + v27 + 24))
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_20;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(void *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_20;
  }
  long long v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_20:
  uint64_t v32 = v26[8];
  uint64_t v33 = (char *)a1 + v32;
  long long v34 = &a2[v32];
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  *(void *)((char *)a1 + v26[9]) = *(void *)&a2[v26[9]];
  if (a1 != (void *)a2)
  {
    uint64_t v36 = *(int *)(a3 + 20);
    uint64_t v37 = &a2[v36];
    uint64_t v38 = (char *)a1 + v36;
    outlined destroy of URL?((uint64_t)a1 + v36, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v39 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    }
    else {
      uint64_t v39 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    }
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v37, v40);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLSoundClassifier.Classifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    goto LABEL_10;
  }
  uint64_t v7 = type metadata accessor for MLSoundClassifier.DataSource();
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v9 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    char v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
    *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
    uint64_t v11 = v10[20];
    long long v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    long long v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)long long v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
    v12[32] = v13[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      goto LABEL_9;
    }
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
  }
  swift_storeEnumTagMultiPayload();
LABEL_9:
  swift_storeEnumTagMultiPayload();
LABEL_10:
  uint64_t v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&a1[v16[5]] = *(void *)&a2[v16[5]];
  *(void *)&a1[v16[6]] = *(void *)&a2[v16[6]];
  uint64_t v17 = v16[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  uint64_t v21 = v16[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)&a1[v16[9]] = *(void *)&a2[v16[9]];
  uint64_t v24 = *(int *)(a3 + 20);
  long long v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  }
  else {
    uint64_t v27 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  }
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v25, v26, v28);
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier.Classifier(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOhTm_0((uint64_t)a1, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_11;
    }
    uint64_t v7 = type metadata accessor for MLSoundClassifier.DataSource();
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      char v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
      *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
      uint64_t v11 = v10[20];
      long long v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      long long v14 = *((_OWORD *)v13 + 1);
      *(_OWORD *)long long v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v14;
      v12[32] = v13[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_10;
      }
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
    }
    swift_storeEnumTagMultiPayload();
LABEL_10:
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  uint64_t v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(void *)&a1[v16[5]] = *(void *)&a2[v16[5]];
  *(void *)&a1[v16[6]] = *(void *)&a2[v16[6]];
  uint64_t v17 = v16[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (*(void *)&a1[v17 + 24]) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  }
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  uint64_t v21 = v16[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)&a1[v16[9]] = *(void *)&a2[v16[9]];
  if (a1 != a2)
  {
    uint64_t v24 = *(int *)(a3 + 20);
    long long v25 = &a2[v24];
    uint64_t v26 = &a1[v24];
    outlined destroy of URL?((uint64_t)&a1[v24], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    }
    else {
      uint64_t v27 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    }
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227214F14);
}

uint64_t sub_227214F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227214FA8);
}

uint64_t sub_227214FA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata accessor for MLSoundClassifier.Classifier()
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.Classifier;
  if (!type metadata singleton initialization cache for MLSoundClassifier.Classifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MLSoundClassifier.Classifier()
{
  type metadata accessor for MLSoundClassifier.ModelParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t associated type witness table accessor for SupervisedEstimator.Transformer : Transformer in MLSoundClassifier.Classifier()
{
  return lazy protocol witness table accessor for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model((unint64_t *)&lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Model);
}

uint64_t MLSoundClassifier.Classifier.init(labels:parameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v20[1] = a1;
  v20[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  v20[3] = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  v20[2] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  long long v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v20 - v15;
  v20[4] = a3;
  outlined init with copy of MLSoundClassifier.ModelParameters(a2, a3);
  uint64_t v17 = type metadata accessor for MLSoundClassifier.ModelParameters();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a2 + *(int *)(v17 + 28), (uint64_t)v21, &demangling cache variable for type metadata for Any?);
  if (v22) {
    swift_dynamicCast();
  }
  else {
    outlined destroy of URL?((uint64_t)v21, &demangling cache variable for type metadata for Any?);
  }
  lazy protocol witness table accessor for type Float and conformance Float();
  LogisticRegressionClassifier.Configuration.init()();
  LogisticRegressionClassifier.Configuration.maximumIterations.setter();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v16, v8);
  LogisticRegressionClassifier.init(labels:configuration:)();
  _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOhTm_0(a2, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v8);
  type metadata accessor for MLSoundClassifier.Classifier();
  OUTLINED_FUNCTION_35();
  v18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  return swift_storeEnumTagMultiPayload();
}

uint64_t MLSoundClassifier.Classifier.makeTransformer()@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_20(v4, v29);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v30 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  uint64_t v12 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v31 = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_40_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_0();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = type metadata accessor for MLSoundClassifier.Classifier();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1 + *(int *)(v23 + 20), v22, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_3();
    v24();
    uint64_t v25 = v31;
    outlined init with copy of MLSoundClassifier.ModelParameters(v1, v31);
    FullyConnectedNetworkClassifier.makeTransformer()();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v10, v5);
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v27();
    uint64_t v25 = v31;
    outlined init with copy of MLSoundClassifier.ModelParameters(v1, v31);
    LogisticRegressionClassifier.makeTransformer()();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v2, v15);
  }
  type metadata accessor for MLSoundClassifier.Model();
  OUTLINED_FUNCTION_35();
  v26();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of MLSoundClassifier.ModelParameters(v25, a1);
}

uint64_t MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_36(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v0[9] = v7;
  OUTLINED_FUNCTION_1(v7);
  v0[10] = v8;
  v0[11] = OUTLINED_FUNCTION_5();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v0[12] = v9;
  OUTLINED_FUNCTION_1(v9);
  v0[13] = v10;
  v0[14] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v0[15] = v11;
  OUTLINED_FUNCTION_1(v11);
  v0[16] = v12;
  v0[17] = OUTLINED_FUNCTION_5();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v0[18] = v13;
  OUTLINED_FUNCTION_1(v13);
  v0[19] = v14;
  v0[20] = OUTLINED_FUNCTION_5();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v0[21] = v15;
  OUTLINED_FUNCTION_17(v15);
  v0[22] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v16, v17, v18);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[8];
  uint64_t v3 = type metadata accessor for MLSoundClassifier.Classifier();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + *(int *)(v3 + 20), v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_3();
    v4();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[25] = v5;
    *uint64_t v5 = v6;
    v5[1] = MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_39();
    return MEMORY[0x270EEA8D8](v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v14();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[23] = v15;
    *uint64_t v15 = v16;
    v15[1] = MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_39();
    return MEMORY[0x270EEA880](v17, v18, v19, v20, v21, v22, v23);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 208) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_25();
  unint64_t v0 = OUTLINED_FUNCTION_3_57();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_25();
  unint64_t v0 = OUTLINED_FUNCTION_3_57();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v12 = OUTLINED_FUNCTION_3_57();
  v13(v12);
  OUTLINED_FUNCTION_37_16();
  uint64_t v14 = type metadata accessor for MLSoundClassifier.Model();
  uint64_t v15 = OUTLINED_FUNCTION_21_32(v14);
  v16(v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_38_6();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v12 = OUTLINED_FUNCTION_3_57();
  v13(v12);
  OUTLINED_FUNCTION_37_16();
  uint64_t v14 = type metadata accessor for MLSoundClassifier.Model();
  uint64_t v15 = OUTLINED_FUNCTION_82_2(v14);
  v16(v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_38_6();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

uint64_t MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  v1[10] = v24;
  v1[11] = v0;
  v1[8] = v2;
  v1[9] = v3;
  v1[6] = v4;
  v1[7] = v5;
  v1[4] = v6;
  v1[5] = v7;
  v1[2] = v8;
  v1[3] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v1[12] = v10;
  OUTLINED_FUNCTION_1(v10);
  v1[13] = v11;
  v1[14] = OUTLINED_FUNCTION_5();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v1[15] = v12;
  OUTLINED_FUNCTION_1(v12);
  v1[16] = v13;
  v1[17] = OUTLINED_FUNCTION_5();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v1[18] = v14;
  OUTLINED_FUNCTION_1(v14);
  v1[19] = v15;
  v1[20] = OUTLINED_FUNCTION_5();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v1[21] = v16;
  OUTLINED_FUNCTION_1(v16);
  v1[22] = v17;
  v1[23] = OUTLINED_FUNCTION_5();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v1[24] = v18;
  OUTLINED_FUNCTION_17(v18);
  v1[25] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v19, v20, v21);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[11];
  uint64_t v3 = type metadata accessor for MLSoundClassifier.Classifier();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + *(int *)(v3 + 20), v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_3();
    v4();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[28] = v5;
    *uint64_t v5 = v6;
    v5[1] = MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_19();
    return MEMORY[0x270EEA8D0](v7, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v15();
    swift_task_alloc();
    OUTLINED_FUNCTION_38();
    v0[26] = v16;
    *uint64_t v16 = v17;
    v16[1] = MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_19();
    return MEMORY[0x270EEA878](v18, v19, v20, v21, v22, v23, v24, v25);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_25();
  uint64_t v0 = OUTLINED_FUNCTION_3_57();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_25();
  uint64_t v0 = OUTLINED_FUNCTION_3_57();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v12 = OUTLINED_FUNCTION_3_57();
  v13(v12);
  OUTLINED_FUNCTION_37_16();
  uint64_t v14 = type metadata accessor for MLSoundClassifier.Model();
  uint64_t v15 = OUTLINED_FUNCTION_21_32(v14);
  v16(v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_38_6();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_36_5();
  OUTLINED_FUNCTION_91_0();
  uint64_t v12 = OUTLINED_FUNCTION_3_57();
  v13(v12);
  OUTLINED_FUNCTION_37_16();
  uint64_t v14 = type metadata accessor for MLSoundClassifier.Model();
  uint64_t v15 = OUTLINED_FUNCTION_82_2(v14);
  v16(v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_38_6();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

uint64_t MLSoundClassifier.Classifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v55 = v7;
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_20(v8, v46);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v52 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_13(v11, v46);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v47 = v13;
  uint64_t v48 = v12;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_7_15(v14, v46);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v49 = v16;
  uint64_t v50 = v15;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_3_0();
  uint64_t v19 = v18 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  uint64_t v25 = v24 - 8;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = v2 + *(int *)(OUTLINED_FUNCTION_12_31() + 20);
  uint64_t v27 = a1 + *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  uint64_t v28 = v4 + *(int *)(v25 + 56);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v27, v28, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v3, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = v51;
      uint64_t v30 = v52;
      uint64_t v31 = v54;
      OUTLINED_FUNCTION_3();
      v32();
      uint64_t v33 = v55;
      uint64_t v34 = v53;
      uint64_t v35 = v56;
      OUTLINED_FUNCTION_3();
      v36();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
      SupervisedEstimator<>.encode(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      return outlined destroy of URL?(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
    uint64_t v49 = v52;
    uint64_t v50 = v54;
  }
  else
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, (uint64_t)v23, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v37 = v49;
      uint64_t v38 = v50;
      OUTLINED_FUNCTION_3();
      v39();
      uint64_t v41 = v46;
      uint64_t v40 = v47;
      uint64_t v42 = v48;
      OUTLINED_FUNCTION_3();
      v43();
      LogisticRegressionClassifier.encode(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v19, v38);
      return outlined destroy of URL?(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
  }
  OUTLINED_FUNCTION_25_0();
  v45();
  uint64_t result = OUTLINED_FUNCTION_18();
  __break(1u);
  return result;
}

uint64_t protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLSoundClassifier.Classifier()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)();
}

uint64_t protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLSoundClassifier.Classifier()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)();
}

uint64_t protocol witness for SupervisedEstimator.encode(_:to:) in conformance MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return MLSoundClassifier.Classifier.encode(_:to:)(a1, a2);
}

uint64_t protocol witness for SupervisedEstimator.decode(from:) in conformance MLSoundClassifier.Classifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MLSoundClassifier.Classifier.decode(from:)(a1, MEMORY[0x263F04448], MEMORY[0x263F04488], a2);
}

uint64_t base witness table accessor for SupervisedEstimator in MLSoundClassifier.Classifier()
{
  return lazy protocol witness table accessor for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model(&lazy protocol witness table cache variable for type MLSoundClassifier.Classifier and conformance MLSoundClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Classifier);
}

uint64_t lazy protocol witness table accessor for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:)()
{
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_36(v1, v2, v3, v4, v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v0[9] = v7;
  OUTLINED_FUNCTION_1(v7);
  v0[10] = v8;
  v0[11] = OUTLINED_FUNCTION_24();
  v0[12] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v0[13] = v9;
  OUTLINED_FUNCTION_1(v9);
  v0[14] = v10;
  v0[15] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v0[16] = v11;
  OUTLINED_FUNCTION_1(v11);
  v0[17] = v12;
  v0[18] = OUTLINED_FUNCTION_24();
  v0[19] = swift_task_alloc();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v0[20] = v13;
  OUTLINED_FUNCTION_1(v13);
  v0[21] = v14;
  v0[22] = OUTLINED_FUNCTION_5();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v0[23] = v15;
  OUTLINED_FUNCTION_17(v15);
  v0[24] = OUTLINED_FUNCTION_24();
  v0[25] = swift_task_alloc();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  v0[26] = v16;
  OUTLINED_FUNCTION_17(v16);
  v0[27] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  uint64_t v25;

  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v3 + *(int *)(type metadata accessor for MLSoundClassifier.Classifier() + 20);
  uint64_t v6 = *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  *(_DWORD *)(v0 + 304) = v6;
  uint64_t v7 = v4 + v6;
  uint64_t v8 = v1 + *(int *)(v2 + 48);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v7, v8, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v10 = *(void *)(v0 + 216);
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, *(void *)(v0 + 192), &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    *(void *)(v0 + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = *(void *)(v0 + 80);
      OUTLINED_FUNCTION_3();
      v12();
      *(void *)(v0 + 272) = *(void *)(v11 + 32);
      *(void *)(v0 + 280) = (v11 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      uint64_t v13 = OUTLINED_FUNCTION_31();
      v14(v13);
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v15;
      *uint64_t v15 = v0;
      v15[1] = MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:);
      uint64_t v16 = OUTLINED_FUNCTION_28(*(void *)(v0 + 96));
      return MEMORY[0x270EEA8E0](v16);
    }
LABEL_7:
    OUTLINED_FUNCTION_9();
    v17();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, *(void *)(v0 + 200), &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  *(void *)(v0 + 224) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)(v0 + 136);
  OUTLINED_FUNCTION_3();
  v19();
  *(void *)(v0 + 232) = *(void *)(v18 + 32);
  *(void *)(v0 + 240) = (v18 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  uint64_t v20 = OUTLINED_FUNCTION_31();
  v21(v20);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v22;
  char *v22 = v0;
  v22[1] = MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:);
  uint64_t v23 = OUTLINED_FUNCTION_28(*(void *)(v0 + 152));
  return MEMORY[0x270EEA890](v23);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 256) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 16) + *(int *)(v0 + 304);
  OUTLINED_FUNCTION_9();
  v7();
  v1(v3, v2, v5);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v1(v6, v3, v5);
  swift_storeEnumTagMultiPayload();
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 296) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 16) + *(int *)(v0 + 304);
  OUTLINED_FUNCTION_9();
  v7();
  v1(v3, v2, v4);
  outlined destroy of URL?(v6, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v1(v6, v3, v4);
  swift_storeEnumTagMultiPayload();
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12();
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 216);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_9();
  v2();
  uint64_t v3 = OUTLINED_FUNCTION_27();
  v4(v3);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 216);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_9();
  v2();
  uint64_t v3 = OUTLINED_FUNCTION_27();
  v4(v3);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t MLSoundClassifier.Classifier.encodeWithOptimizer(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v58 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v56 = v8;
  uint64_t v57 = v7;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_20(v9, v47);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v53 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_13(v12, v47);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v48 = v14;
  uint64_t v49 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_7_15(v15, v47);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v50 = v17;
  uint64_t v51 = v16;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_3_0();
  uint64_t v20 = v19 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v47 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  uint64_t v26 = v25 - 8;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = v5 + *(int *)(OUTLINED_FUNCTION_12_31() + 20);
  uint64_t v28 = a1 + *(int *)(type metadata accessor for MLSoundClassifier.Model() + 20);
  uint64_t v29 = v4 + *(int *)(v26 + 56);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v27, v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, v29, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v3, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v30 = v52;
      uint64_t v31 = v53;
      uint64_t v32 = v55;
      OUTLINED_FUNCTION_3();
      v33();
      uint64_t v35 = v56;
      uint64_t v34 = v57;
      uint64_t v36 = v54;
      OUTLINED_FUNCTION_3();
      v37();
      FullyConnectedNetworkClassifier.encodeWithOptimizer(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v34);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      return outlined destroy of URL?(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
    uint64_t v50 = v53;
    uint64_t v51 = v55;
  }
  else
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, (uint64_t)v24, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v38 = v50;
      uint64_t v39 = v51;
      OUTLINED_FUNCTION_3();
      v40();
      uint64_t v41 = v47;
      uint64_t v42 = v48;
      uint64_t v43 = v49;
      OUTLINED_FUNCTION_3();
      v44();
      LogisticRegressionClassifier.encodeWithOptimizer(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v20, v39);
      return outlined destroy of URL?(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    }
  }
  OUTLINED_FUNCTION_25_0();
  v46();
  uint64_t result = OUTLINED_FUNCTION_18();
  __break(1u);
  return result;
}

uint64_t MLSoundClassifier.Classifier.decode(from:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  uint64_t v65 = a1;
  uint64_t v56 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v54 = v7;
  uint64_t v55 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v62 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v60 = v10;
  uint64_t v61 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_13(v11, v49);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v52 = v13;
  uint64_t v53 = v12;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v59 = v14;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_49();
  uint64_t v50 = v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v51 = (char *)&v49 - v18;
  uint64_t v19 = type metadata accessor for MLSoundClassifier.ModelParameters();
  uint64_t v20 = OUTLINED_FUNCTION_17(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_49();
  uint64_t v58 = v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v49 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_40_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v27);
  uint64_t v28 = OUTLINED_FUNCTION_12_31();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4 + *(int *)(v28 + 20), v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = v61;
    OUTLINED_FUNCTION_3();
    v30();
    uint64_t v31 = v58;
    outlined init with copy of MLSoundClassifier.ModelParameters(v4, v58);
    uint64_t v32 = v66;
    v64(v65, v29);
    if (v32)
    {
      _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOhTm_0(v31, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
      uint64_t v33 = OUTLINED_FUNCTION_9_19();
      return v34(v33);
    }
    uint64_t v40 = OUTLINED_FUNCTION_9_19();
    v41(v40);
    uint64_t v42 = v50;
    OUTLINED_FUNCTION_35();
    v43();
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = (char *)v31;
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v36();
    outlined init with copy of MLSoundClassifier.ModelParameters(v4, (uint64_t)v24);
    uint64_t v37 = v66;
    v63(v65, v25);
    if (v37)
    {
      _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOhTm_0((uint64_t)v24, (void (*)(void))type metadata accessor for MLSoundClassifier.ModelParameters);
      uint64_t v38 = OUTLINED_FUNCTION_28_21();
      return v39(v38);
    }
    uint64_t v44 = OUTLINED_FUNCTION_28_21();
    v45(v44);
    uint64_t v42 = (uint64_t)v51;
    OUTLINED_FUNCTION_35();
    v46();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v47 = v56;
  outlined init with take of MLSoundClassifier.ModelParameters((uint64_t)v24, v56);
  uint64_t v48 = type metadata accessor for MLSoundClassifier.Model();
  return outlined init with take of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(v42, v47 + *(int *)(v48 + 20));
}

uint64_t protocol witness for UpdatableSupervisedEstimator.update<A>(_:with:eventHandler:) in conformance MLSoundClassifier.Classifier()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLSoundClassifier.Classifier.update<A>(_:with:eventHandler:)();
}

uint64_t protocol witness for UpdatableSupervisedEstimator.encodeWithOptimizer(_:to:) in conformance MLSoundClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return MLSoundClassifier.Classifier.encodeWithOptimizer(_:to:)(a1, a2);
}

uint64_t protocol witness for UpdatableSupervisedEstimator.decodeWithOptimizer(from:) in conformance MLSoundClassifier.Classifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MLSoundClassifier.Classifier.decode(from:)(a1, MEMORY[0x263F04440], MEMORY[0x263F04480], a2);
}

uint64_t outlined init with copy of MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLSoundClassifier.ModelParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s8CreateML17MLSoundClassifierV15ModelParametersV14ValidationDataOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_57()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_31()
{
  return type metadata accessor for MLSoundClassifier.Classifier();
}

uint64_t OUTLINED_FUNCTION_21_32(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

uint64_t OUTLINED_FUNCTION_28_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_16()
{
  return outlined init with copy of MLSoundClassifier.ModelParameters(v0, v1);
}

uint64_t MLHandActionClassifier.VideoAugmentationOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t MLHandActionClassifier.VideoAugmentationOptions.rawValue.getter()
{
  return *(void *)v0;
}

void static MLHandActionClassifier.VideoAugmentationOptions.horizontallyFlip.getter(void *a1@<X8>)
{
}

void static MLHandActionClassifier.VideoAugmentationOptions.rotate.getter(void *a1@<X8>)
{
}

void static MLHandActionClassifier.VideoAugmentationOptions.translate.getter(void *a1@<X8>)
{
}

void static MLHandActionClassifier.VideoAugmentationOptions.scale.getter(void *a1@<X8>)
{
}

void static MLHandActionClassifier.VideoAugmentationOptions.interpolateFrames.getter(void *a1@<X8>)
{
}

void static MLHandActionClassifier.VideoAugmentationOptions.dropFrames.getter(void *a1@<X8>)
{
}

unint64_t lazy protocol witness table accessor for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.VideoAugmentationOptions and conformance MLHandActionClassifier.VideoAugmentationOptions);
  }
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance MLHandActionClassifier.VideoAugmentationOptions@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return MLHandActionClassifier.VideoAugmentationOptions.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLHandActionClassifier.VideoAugmentationOptions()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLHandActionClassifier.VideoAugmentationOptions()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized OptionSet<>.contains(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized OptionSet.union(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized OptionSet.intersection(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized OptionSet.symmetricDifference(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(uint64_t a1, void *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized SetAlgebra.subtracting(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance MLHandActionClassifier.VideoAugmentationOptions(void *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MLHandActionClassifier.VideoAugmentationOptions@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = MLHandActionClassifier.VideoAugmentationOptions.init(rawValue:)(*a1, (void *)a2);
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLHandActionClassifier.VideoAugmentationOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLHandActionClassifier.VideoAugmentationOptions.rawValue.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.VideoAugmentationOptions()
{
  return &type metadata for MLHandActionClassifier.VideoAugmentationOptions;
}

void MLHandActionClassifier.DataSource.videosWithAnnotations()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v133 = v3;
  uint64_t v132 = (void *)type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v131 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v6);
  uint64_t v127 = (uint64_t)&v123 - v7;
  uint64_t v130 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v129 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_20_32();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_38_18();
  uint64_t v134 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v135 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  uint64_t v125 = v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_14_30();
  MEMORY[0x270FA5388](v15);
  uint64_t v126 = (char *)&v123 - v16;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v17);
  uint64_t v128 = (char *)&v123 - v18;
  OUTLINED_FUNCTION_20_3();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  MEMORY[0x270FA5388](v20);
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_13_38(v22, v123);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_3();
      v38();
      static UTType.movie.getter();
      static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
      if (!v0)
      {
        OUTLINED_FUNCTION_25_0();
        v82();
        static _VideoUtilities.generateVideoTable(_:)();
        swift_bridgeObjectRelease();
        id v97 = (id)v136;
        char v98 = v137;
        v164 = (void (**)(void))v136;
        char v165 = v137;
        OUTLINED_FUNCTION_27_14();
        *(unsigned char *)(v99 - 256) = v98;
        id v100 = outlined copy of Result<_DataTable, Error>(v97, v98);
        OUTLINED_FUNCTION_2_40((uint64_t)v100, v101, v102, v103, v104, v105, v106, v107, v123);
        OUTLINED_FUNCTION_33_10();
        outlined consume of Result<_DataTable, Error>(v97, v98);
        uint64_t v111 = OUTLINED_FUNCTION_5_29();
        v112(v111);
        goto LABEL_30;
      }
      OUTLINED_FUNCTION_25_0();
      v39();
      uint64_t v40 = OUTLINED_FUNCTION_5_29();
      v41(v40);
      goto LABEL_31;
    case 2u:
      OUTLINED_FUNCTION_3();
      v42();
      static UTType.movie.getter();
      static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
      if (!v0)
      {
        OUTLINED_FUNCTION_25_0();
        v67();
        static _VideoUtilities.generateVideoTable(_:)();
        swift_bridgeObjectRelease();
        id v87 = (id)v136;
        char v88 = v137;
        v164 = (void (**)(void))v136;
        char v165 = v137;
        id v89 = outlined copy of Result<_DataTable, Error>((id)v136, v137);
        OUTLINED_FUNCTION_2_40((uint64_t)v89, v90, v91, v92, v93, v94, v95, v96, v123);
        OUTLINED_FUNCTION_33_10();
        outlined consume of Result<_DataTable, Error>(v87, v88);
        uint64_t v109 = OUTLINED_FUNCTION_3_58();
        v110(v109);
        goto LABEL_30;
      }
      OUTLINED_FUNCTION_25_0();
      v43();
      uint64_t v44 = OUTLINED_FUNCTION_3_58();
      v45(v44);
      goto LABEL_31;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)v2, *(unsigned char *)(v2 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      MLDataTable.init()(v133);
      goto LABEL_31;
    case 4u:
      int v46 = *(unsigned __int8 *)(v2 + 8);
      uint64_t v48 = *(void *)(v2 + 16);
      uint64_t v47 = *(void *)(v2 + 24);
      uint64_t v50 = *(void *)(v2 + 32);
      uint64_t v49 = *(void *)(v2 + 40);
      uint64_t v51 = *(void *)(v2 + 48);
      uint64_t v52 = *(void *)(v2 + 56);
      uint64_t v53 = *(void *)(v2 + 64);
      uint64_t v54 = *(void *)(v2 + 72);
      v164 = *(void (***)(void))v2;
      char v165 = v46;
      uint64_t v135 = v164;
      LODWORD(v134) = v46;
      outlined copy of Result<_DataTable, Error>(v164, v46);
      static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v164, v48, v47, v50, v49, v51, v52, v53, v54);
      OUTLINED_FUNCTION_33_10();
      if (v0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_42_8();
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42_8();
      goto LABEL_30;
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      MLDataTable.init()(v133);
      (*(void (**)(uint64_t, void *))(v131 + 8))(v2, v132);
      goto LABEL_31;
    case 6u:
      uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v56 = v2 + v55[12];
      uint64_t v57 = *(void *)(v56 + 8);
      uint64_t v135 = *(void (***)(void))v56;
      uint64_t v58 = (uint64_t *)(v2 + v55[16]);
      uint64_t v59 = v58[1];
      uint64_t v134 = *v58;
      uint64_t v60 = (uint64_t *)(v2 + v55[20]);
      uint64_t v61 = v60[1];
      uint64_t v130 = *v60;
      uint64_t v62 = (uint64_t *)(v2 + v55[24]);
      uint64_t v63 = v62[1];
      uint64_t v129 = *v62;
      OUTLINED_FUNCTION_3();
      v64();
      OUTLINED_FUNCTION_18_3();
      v65();
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v136);
      if (v0)
      {
        OUTLINED_FUNCTION_38_0();
        v66();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
      v164 = (void (**)(void))v136;
      char v165 = v137;
      static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v164, (uint64_t)v135, v57, v134, v59, v130, v61, v129, v63);
      OUTLINED_FUNCTION_33_10();
      OUTLINED_FUNCTION_25_0();
      v108();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    default:
      uint64_t v23 = v2
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?))
                   + 48);
      OUTLINED_FUNCTION_21_33();
      uint64_t v129 = v24;
      uint64_t v132 = v25;
      uint64_t v27 = (uint64_t *)(v2 + *(int *)(v26 + 80));
      uint64_t v28 = v27[1];
      uint64_t v123 = *v27;
      OUTLINED_FUNCTION_21_33();
      uint64_t v127 = v29;
      uint64_t v131 = v30;
      OUTLINED_FUNCTION_21_33();
      uint64_t v124 = v31;
      uint64_t v130 = v32;
      uint64_t v33 = v135;
      uint64_t v34 = v135[4];
      uint64_t v35 = v134;
      ((void (*)(char *, uint64_t, uint64_t))v34)(v128, v2, v134);
      ((void (*)(char *, uint64_t, uint64_t))v34)(v126, v23, v35);
      OUTLINED_FUNCTION_18_3();
      v36();
      char v160 = 1;
      LOBYTE(v136) = 1;
      *(_DWORD *)((char *)&v136 + 1) = *(_DWORD *)v163;
      HIDWORD(v136) = *(_DWORD *)&v163[3];
      unint64_t v137 = 44;
      unint64_t v138 = 0xE100000000000000;
      uint64_t v139 = 0;
      unint64_t v140 = 0xE000000000000000;
      uint64_t v141 = 92;
      unint64_t v142 = 0xE100000000000000;
      char v143 = 1;
      *(_DWORD *)uint64_t v144 = *(_DWORD *)v162;
      *(_DWORD *)&v144[3] = *(_DWORD *)&v162[3];
      uint64_t v145 = 34;
      unint64_t v146 = 0xE100000000000000;
      char v147 = 1;
      *(_DWORD *)uint64_t v148 = *(_DWORD *)v161;
      *(_DWORD *)&v148[3] = *(_DWORD *)&v161[3];
      long long v149 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v150 = 10;
      unint64_t v151 = 0xE100000000000000;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      char v154 = 1;
      *(_DWORD *)v155 = *(_DWORD *)v159;
      *(_DWORD *)&v155[3] = *(_DWORD *)&v159[3];
      uint64_t v156 = 0;
      MLDataTable.init(contentsOf:options:)(v1, &v136, (uint64_t)&v157);
      if (v0)
      {
        uint64_t v37 = v33[1];
        OUTLINED_FUNCTION_11_3();
        v37();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_11_3();
        v37();
      }
      else
      {
        v166 = (void (*)(void))v28;
        uint64_t v68 = v131;
        uint64_t v69 = v130;
        v164 = v157;
        char v165 = v158;
        uint64_t v70 = v129;
        uint64_t v71 = v132;
        MLDataTable.subscript.getter(v129, v132, (uint64_t)&v136);
        id v72 = (id)v136;
        unint64_t v73 = v137;
        if ((v137 & 1) != 0
          || (outlined copy of Result<_DataTable, Error>((id)v136, 0),
              _UntypedColumn.type.getter(&v157),
              outlined consume of Result<_DataTable, Error>(v72, 0),
              v157 != 2))
        {
          outlined consume of Result<_DataTable, Error>(v72, v73);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v136 = 0;
          unint64_t v137 = 0xE000000000000000;
          _StringGuts.grow(_:)(26);
          swift_bridgeObjectRelease();
          uint64_t v136 = 0x206E6D756C6F43;
          unint64_t v137 = 0xE700000000000000;
          v83._countAndFlagsBits = v70;
          v83._object = v71;
          String.append(_:)(v83);
          swift_bridgeObjectRelease();
          v84._object = (void *)0x80000002272D7C00;
          v84._countAndFlagsBits = 0xD000000000000011;
          String.append(_:)(v84);
          OUTLINED_FUNCTION_43_8();
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError();
          *(void *)uint64_t v85 = v73;
          *(void *)(v85 + 8) = &v136;
          *(_OWORD *)(v85 + 16) = 0u;
          *(_OWORD *)(v85 + 32) = 0u;
          *(unsigned char *)(v85 + 48) = 0;
          swift_willThrow();
          uint64_t v86 = v135[1];
          OUTLINED_FUNCTION_69_0();
          v86();
          OUTLINED_FUNCTION_69_0();
          v86();
LABEL_26:
          outlined consume of Result<_DataTable, Error>(v164, v165);
        }
        else
        {
          outlined copy of Result<_DataTable, Error>(v72, 0);
          unint64_t v74 = (unint64_t)v72;
          _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v136);
          OUTLINED_FUNCTION_43_8();
          if (v138 != 2)
          {
            outlined consume of MLDataValue((void *)v73, v72, v138);
            unint64_t v74 = 0xE000000000000000;
          }
          outlined consume of Result<_DataTable, Error>(v72, 0);
          OUTLINED_FUNCTION_27_14();
          *(void *)(v75 - 256) = v74;
          String.init<A>(_:)();
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          id v76 = objc_msgSend(self, sel_defaultManager);
          uint64_t v77 = URL.path.getter();
          int v78 = (void *)MEMORY[0x22A674AE0](v77);
          swift_bridgeObjectRelease();
          unsigned __int8 v79 = objc_msgSend(v76, sel_fileExistsAtPath_, v78);

          if (v79)
          {
            uint64_t v80 = v166;
            uint64_t v81 = v123;
          }
          else
          {
            outlined copy of Result<_DataTable, Error>(v72, 0);
            uint64_t v113 = specialized Array<A>.init(_:)(v72, 0);
            MEMORY[0x270FA5388](v113);
            uint64_t v114 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((uint64_t)partial apply for closure #1 in MLHandActionClassifier.DataSource.videosWithAnnotations(), (uint64_t)(&v123 - 4), v113);
            uint64_t v115 = swift_bridgeObjectRelease();
            uint64_t v136 = v114;
            MEMORY[0x270FA5388](v115);
            uint64_t v122 = &v136;
            ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
            char v118 = v117 & 1;
            uint64_t v70 = v129;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            MLDataTable.willMutate()();
            OUTLINED_FUNCTION_27_14();
            *(unsigned char *)(v119 - 256) = v118;
            MLDataTable.setColumnImpl(newColumn:named:)(&v136);
            swift_bridgeObjectRelease();
            outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v118);
            uint64_t v80 = v166;
            uint64_t v81 = v123;
            if ((v165 & 1) == 0)
            {
              uint64_t v120 = v164;
              outlined copy of Result<_DataTable, Error>(v164, 0);
              _DataTable.columnNamesDidChange()();
              outlined consume of Result<_DataTable, Error>(v120, 0);
            }
          }
          static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v164, v70, (uint64_t)v71, v81, (uint64_t)v80, v127, v68, v124, v69);
          OUTLINED_FUNCTION_33_10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v121 = OUTLINED_FUNCTION_7_43();
          ((void (*)(uint64_t))v80)(v121);
          OUTLINED_FUNCTION_69_0();
          v80();
          ((void (*)(char *, uint64_t))v80)(v128, v81);
LABEL_30:
          OUTLINED_FUNCTION_35_18();
        }
      }
LABEL_31:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

uint64_t type metadata accessor for MLHandActionClassifier.DataSource()
{
  uint64_t result = type metadata singleton initialization cache for MLHandActionClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLHandActionClassifier.DataSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized DataFrame.init<A>(expanding:keysColumnName:valuesColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v35 = a4;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v41 = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v38 = v12;
  OUTLINED_FUNCTION_45_12();
  Column.init<A>(name:contents:)();
  uint64_t v41 = v13;
  uint64_t v39 = v10;
  Column.init<A>(name:contents:)();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  swift_bridgeObjectRelease();
  uint64_t v41 = v14;
  specialized MutableCollection<>.sort(by:)(&v41);
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v41 + 16);
  if (v37)
  {
    uint64_t v33 = v41;
    uint64_t v34 = v6;
    uint64_t v15 = 0;
    uint64_t v36 = v41 + 32;
    do
    {
      uint64_t v16 = (uint64_t *)(v36 + 16 * v15);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      uint64_t v19 = *(void *)(a1 + 16);
      swift_bridgeObjectRetain();
      if (v19)
      {
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
        uint64_t v21 = MEMORY[0x263F8EE78];
        if (v22)
        {
          uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8 * v20);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = MEMORY[0x263F8EE78];
      }
      uint64_t v23 = *(void *)(v21 + 16);
      if (v23)
      {
        uint64_t v24 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v25 = (uint64_t)v24;
        v24[2] = v23;
        v24[4] = v18;
        v24[5] = v17;
        if (v23 != 1)
        {
          v24[6] = v18;
          v24[7] = v17;
          uint64_t v26 = v23 - 2;
          if (v26)
          {
            uint64_t v27 = v24 + 9;
            do
            {
              *(v27 - 1) = v18;
              uint64_t *v27 = v17;
              swift_bridgeObjectRetain();
              v27 += 2;
              --v26;
            }
            while (v26);
          }
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = MEMORY[0x263F8EE78];
      }
      ++v15;
      uint64_t v41 = v25;
      Column.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = v21;
      Column.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
    }
    while (v15 != v37);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v6 = v34;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  DataFrame.init()();
  uint64_t v28 = v38;
  DataFrame.append<A>(column:)();
  uint64_t v29 = v39;
  DataFrame.append<A>(column:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = v40;
  v30(v29, v40);
  return ((uint64_t (*)(char *, uint64_t))v30)(v28, v31);
}

uint64_t MLHandActionClassifier.DataSource.extractKeypoints(targetFrameRate:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v104 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Data>);
  OUTLINED_FUNCTION_0();
  uint64_t v97 = v6;
  uint64_t v98 = v5;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v99 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v101 = v9;
  uint64_t v102 = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v103 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  MEMORY[0x270FA5388](v11 - 8);
  OUTLINED_FUNCTION_49();
  uint64_t v100 = v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v86 - v14;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v105 = v16;
  uint64_t v106 = v17;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_14_30();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v86 - v20;
  uint64_t v22 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v107 = v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_13_38(v28, v86);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    uint64_t v87 = v3;
    uint64_t v86 = v1;
    uint64_t v90 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    OUTLINED_FUNCTION_21_33();
    uint64_t v92 = v39;
    uint64_t v93 = v38;
    OUTLINED_FUNCTION_21_33();
    uint64_t v91 = v40;
    uint64_t v94 = v41;
    uint64_t v95 = v22;
    uint64_t v43 = (uint64_t *)(v4 + *(int *)(v42 + 80));
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    int v46 = *(void (**)(void, void, void))(v107 + 32);
    uint64_t v47 = v22;
    uint64_t v48 = v44;
    uint64_t v89 = v107 + 32;
    char v88 = v46;
    v46(v26, v4, v47);
    MEMORY[0x22A672220](v48, v45);
    uint64_t v49 = AnyColumn.wrappedElementType.getter();
    uint64_t v50 = v105;
    uint64_t v51 = *(void (**)(void))(v106 + 8);
    OUTLINED_FUNCTION_5_4();
    v51();
    uint64_t v52 = v21;
    uint64_t v96 = v48;
    if (v49 == MEMORY[0x263F8D310])
    {
      uint64_t v99 = v26;
      uint64_t v100 = v45;
      DataFrame.subscript.getter();
      uint64_t v60 = (uint64_t)v90;
      uint64_t v61 = v108;
      Column<A>.parseAsJSONArrays()((uint64_t)v90);
      if (v61)
      {

        OUTLINED_FUNCTION_25_0();
        v62();
        __swift_storeEnumTagSinglePayload(v60, 1, 1, v50);
      }
      else
      {
        int v108 = 0;
        OUTLINED_FUNCTION_25_0();
        v68();
        __swift_storeEnumTagSinglePayload(v60, 0, 1, v50);
        if (__swift_getEnumTagSinglePayload(v60, 1, v50) != 1)
        {
          uint64_t v73 = v50;
          uint64_t v74 = v106;
          uint64_t v75 = v87;
          OUTLINED_FUNCTION_3();
          v76();
          (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v52, v75, v73);
          uint64_t v55 = v100;
          swift_bridgeObjectRetain();
          uint64_t v26 = v99;
          MEMORY[0x22A672230](v52, v48, v55);
          OUTLINED_FUNCTION_5_4();
          v51();
          goto LABEL_8;
        }
      }
      uint64_t v57 = v94;
      uint64_t v58 = v95;
      uint64_t v56 = v107;
      uint64_t v26 = v99;
      uint64_t v59 = v93;
      outlined destroy of AnyColumn?(v60);
      uint64_t v55 = v100;
      goto LABEL_23;
    }
    MEMORY[0x22A672220](v48, v45);
    uint64_t v53 = v50;
    uint64_t v54 = AnyColumn.wrappedElementType.getter();
    OUTLINED_FUNCTION_5_4();
    v51();
    uint64_t v55 = v45;
    if (v54 != MEMORY[0x263F06F78])
    {
LABEL_8:
      uint64_t v56 = v107;
      uint64_t v57 = v94;
      uint64_t v58 = v95;
      uint64_t v59 = v93;
LABEL_23:
      uint64_t v81 = v96;
      v82._countAndFlagsBits = OUTLINED_FUNCTION_45_12();
      DataFrame.flattenNestedArrays(in:shape:)(v82, v83);
      if (v84)
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v58);
      }
      else
      {
        static _VideoUtilities.renameFeatureColumns(dataFrame:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)v26, v92, v59, v81, v55, v91, v57);
        OUTLINED_FUNCTION_3();
        v85();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v63 = v53;
    uint64_t v103 = v52;
    OUTLINED_FUNCTION_45_12();
    DataFrame.subscript.getter();
    uint64_t v64 = v100;
    uint64_t v65 = v108;
    Column<A>.parseAsJSONArrays()(v100);
    if (v65)
    {

      OUTLINED_FUNCTION_25_0();
      v66();
      __swift_storeEnumTagSinglePayload(v64, 1, 1, v53);
    }
    else
    {
      OUTLINED_FUNCTION_25_0();
      v69();
      OUTLINED_FUNCTION_82_1();
      __swift_storeEnumTagSinglePayload(v70, v71, v72, v53);
      if (__swift_getEnumTagSinglePayload(v64, 1, v53) != 1)
      {
        uint64_t v77 = v106;
        uint64_t v78 = v86;
        OUTLINED_FUNCTION_3();
        v79();
        uint64_t v80 = v103;
        (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v103, v78, v63);
        swift_bridgeObjectRetain();
        MEMORY[0x22A672230](v80, v96, v55);
        OUTLINED_FUNCTION_5_4();
        v51();
        uint64_t v56 = v107;
        uint64_t v59 = v93;
        uint64_t v57 = v94;
        goto LABEL_22;
      }
    }
    uint64_t v56 = v107;
    uint64_t v59 = v93;
    uint64_t v57 = v94;
    outlined destroy of AnyColumn?(v64);
LABEL_22:
    uint64_t v58 = v95;
    goto LABEL_23;
  }
  if (EnumCaseMultiPayload == 3)
  {
    char v30 = *(unsigned char *)(v4 + 8);
    uint64_t v32 = *(void *)(v4 + 16);
    uint64_t v31 = *(void *)(v4 + 24);
    uint64_t v34 = *(void *)(v4 + 32);
    uint64_t v33 = *(void *)(v4 + 40);
    uint64_t v36 = *(void *)(v4 + 48);
    uint64_t v35 = *(void **)(v4 + 56);
    id v109 = *(id *)v4;
    char v110 = v30;
    uint64_t v37 = v108;
    static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v109, v36, v35);
    if (!v37)
    {
      static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v109, v32, v31, v36, (uint64_t)v35, v34, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return OUTLINED_FUNCTION_16_33();
    }
    outlined consume of Result<_DataTable, Error>(v109, v110);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for MLHandActionClassifier.FeatureExtractor();
  OUTLINED_FUNCTION_24_29(&v109);
  if (!v2) {
    OUTLINED_FUNCTION_16_33();
  }
  return outlined destroy of MLHandActionClassifier.DataSource(v4);
}

void MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)(uint64_t a1@<X8>)
{
  uint64_t v79 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v77 = v4;
  uint64_t v78 = v5;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v80 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  MEMORY[0x270FA5388](v7 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v76 = v8;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v81 = v10;
  uint64_t v82 = v9;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v66 - v14;
  uint64_t v16 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v83 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v66 - v20;
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_12_32(v23, v66[0]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
  {
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v25 = *(void **)v3;
      char v26 = *(unsigned char *)(v3 + 8);
      uint64_t v28 = *(void *)(v3 + 16);
      uint64_t v27 = *(void *)(v3 + 24);
      uint64_t v29 = *(void *)(v3 + 40);
      uint64_t v83 = *(void *)(v3 + 32);
      uint64_t v31 = *(void *)(v3 + 48);
      char v30 = *(void **)(v3 + 56);
      id v86 = v25;
      char v87 = v26;
      outlined copy of Result<_DataTable, Error>(v25, v26);
      uint64_t v32 = v84;
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v86, v31, v30);
      if (v32)
      {
        outlined consume of Result<_DataTable, Error>(v86, v87);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Result<_DataTable, Error>(v25, v26);
        return;
      }
      static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v86, v28, v27, v31, (uint64_t)v30, v83, v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v25, v26);
    }
    else
    {
      type metadata accessor for MLHandActionClassifier.FeatureExtractor();
      OUTLINED_FUNCTION_24_29(v85);
      if (v1)
      {
        outlined destroy of MLHandActionClassifier.DataSource(v3);
        return;
      }
      OUTLINED_FUNCTION_32_21();
      outlined destroy of MLHandActionClassifier.DataSource(v3);
    }
    goto LABEL_20;
  }
  int v67 = v13;
  uint64_t v71 = v2;
  uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
  uint64_t v34 = (uint64_t *)(v3 + v33[12]);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  uint64_t v37 = (uint64_t *)(v3 + v33[16]);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  uint64_t v68 = v39;
  uint64_t v72 = v35;
  uint64_t v73 = v38;
  uint64_t v40 = (uint64_t *)(v3 + v33[20]);
  uint64_t v42 = *v40;
  uint64_t v41 = (void *)v40[1];
  uint64_t v74 = v16;
  OUTLINED_FUNCTION_3();
  v43();
  uint64_t v75 = v41;
  MEMORY[0x22A672220](v42, v41);
  uint64_t v44 = AnyColumn.wrappedElementType.getter();
  uint64_t v45 = *(void (**)(void))(v81 + 8);
  OUTLINED_FUNCTION_38_0();
  v45();
  uint64_t v69 = v36;
  uint64_t v70 = v42;
  if (v44 == MEMORY[0x263F8D310])
  {
    v66[1] = (uint64_t)v45;
    v66[2] = (uint64_t)v21;
    DataFrame.subscript.getter();
    uint64_t v49 = v76;
    uint64_t v50 = v84;
    Column<A>.parseAsJSONArrays()(v76);
    int v46 = v50;
    if (v50)
    {

      OUTLINED_FUNCTION_25_0();
      v51();
      __swift_storeEnumTagSinglePayload(v49, 1, 1, v82);
      int v46 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_25_0();
      v52();
      OUTLINED_FUNCTION_82_1();
      uint64_t v53 = v82;
      __swift_storeEnumTagSinglePayload(v54, v55, v56, v82);
      if (__swift_getEnumTagSinglePayload(v49, 1, v53) != 1)
      {
        uint64_t v60 = v81;
        uint64_t v61 = v67;
        OUTLINED_FUNCTION_45_12();
        OUTLINED_FUNCTION_3();
        v62();
        (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v15, v61, v53);
        uint64_t v63 = v75;
        swift_bridgeObjectRetain();
        MEMORY[0x22A672230](v15, v70, v63);
        OUTLINED_FUNCTION_38_0();
        v64();
        goto LABEL_8;
      }
    }
    uint64_t v47 = v73;
    uint64_t v48 = v72;
    outlined destroy of AnyColumn?(v49);
    goto LABEL_16;
  }
  int v46 = v84;
LABEL_8:
  uint64_t v47 = v73;
  uint64_t v48 = v72;
LABEL_16:
  OUTLINED_FUNCTION_18_3();
  v57();
  MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)v85);
  if (v46)
  {
    OUTLINED_FUNCTION_11_3();
    v58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  OUTLINED_FUNCTION_32_21();
  uint64_t v59 = v70;
  static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v86, v70, v75);
  static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v86, v69, v48, v59, (uint64_t)v75, v68, v47);
  OUTLINED_FUNCTION_11_3();
  v65();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  OUTLINED_FUNCTION_35_18();
}

uint64_t MLHandActionClassifier.DataSource.labeledMedia()()
{
  return static _VideoUtilities.videoURLsPerClass(from:)(v0);
}

void MLHandActionClassifier.DataSource.gatherAnnotatedFileNames()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v111 = v3;
  uint64_t v112 = (char *)type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v109 = v4;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_49();
  uint64_t v105 = v6;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v7);
  uint64_t v104 = (uint64_t)&v101 - v8;
  type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v106 = v10;
  uint64_t v107 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v11);
  char v110 = (void *)type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v108 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_20_32();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v101 - v16;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_14_30();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_38_18();
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = v0;
  outlined init with copy of MLHandActionClassifier.DataSource(v0, (uint64_t)v21);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_3();
      v38();
      static UTType.movie.getter();
      static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
      if (!v1)
      {
        OUTLINED_FUNCTION_25_0();
        v79();
        specialized _NativeDictionary.mapValues<A>(_:)();
        uint64_t v81 = v80;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_6_40(v81, v111);
        OUTLINED_FUNCTION_11_3();
        v82();
        goto LABEL_16;
      }
      OUTLINED_FUNCTION_25_0();
      v39();
      OUTLINED_FUNCTION_11_3();
      v40();
      break;
    case 2u:
      OUTLINED_FUNCTION_3();
      v41();
      static UTType.movie.getter();
      static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
      if (!v1)
      {
        OUTLINED_FUNCTION_25_0();
        v83();
        specialized _NativeDictionary.mapValues<A>(_:)();
        uint64_t v85 = v84;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_6_40(v85, v111);
        uint64_t v86 = OUTLINED_FUNCTION_25_28();
        v87(v86);
LABEL_16:
        OUTLINED_FUNCTION_82_1();
        uint64_t v91 = (uint64_t)v112;
        goto LABEL_17;
      }
      OUTLINED_FUNCTION_25_0();
      v42();
      uint64_t v43 = OUTLINED_FUNCTION_25_28();
      v44(v43);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)v21, v21[8]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_storeEnumTagSinglePayload(v111, 1, 1, (uint64_t)v112);
      break;
    case 4u:
      id v45 = *(id *)v21;
      char v46 = v21[8];
      uint64_t v47 = *((void *)v21 + 2);
      uint64_t v48 = (void *)*((void *)v21 + 3);
      uint64_t v49 = (void *)*((void *)v21 + 4);
      uint64_t v50 = *((void *)v21 + 6);
      uint64_t v105 = (void *)*((void *)v21 + 5);
      uint64_t v106 = v49;
      uint64_t v51 = *((void *)v21 + 7);
      uint64_t v52 = *((void *)v21 + 8);
      uint64_t v53 = (void *)*((void *)v21 + 9);
      id v113 = v45;
      char v114 = v46;
      outlined copy of Result<_DataTable, Error>(v45, v46);
      uint64_t v54 = v104;
      DataFrame.init(_:)((uint64_t)&v113, v104);
      char v110 = v53;
      uint64_t v103 = v47;
      uint64_t v55 = v47;
      uint64_t v56 = v50;
      uint64_t v107 = v48;
      uint64_t v108 = v51;
      uint64_t v57 = v48;
      int v59 = (int)v105;
      int v58 = (int)v106;
      static _VideoUtilities.validateVideoInput(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(v54, v55, v57, (uint64_t)v106, v105, v56, v51, v52, (uint64_t)v53);
      OUTLINED_FUNCTION_33_10();
      if (v1
        || (static _VideoUtilities.renameVideoColumns(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(v54, v103, (int)v107, v58, v59, v56, v108, v52, v110), v53))
      {
        OUTLINED_FUNCTION_25_0();
        v60();
        OUTLINED_FUNCTION_26_20();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_26_20();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v93 = v54;
        uint64_t v94 = (uint64_t)v112;
        (*(void (**)(uint64_t, uint64_t, char *))(v109 + 32))(v111, v93, v112);
        OUTLINED_FUNCTION_82_1();
        __swift_storeEnumTagSinglePayload(v95, v96, v97, v94);
      }
      break;
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = (uint64_t)v112;
      __swift_storeEnumTagSinglePayload(v111, 1, 1, (uint64_t)v112);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v21, v61);
      break;
    case 6u:
      uint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v63 = (uint64_t *)&v21[v62[12]];
      uint64_t v64 = *v63;
      uint64_t v106 = (void *)v63[1];
      uint64_t v65 = (uint64_t *)&v21[v62[16]];
      uint64_t v66 = *v65;
      char v110 = (void *)v65[1];
      int v67 = (uint64_t *)&v21[v62[20]];
      uint64_t v68 = v67[1];
      uint64_t v104 = *v67;
      uint64_t v69 = (uint64_t *)&v21[v62[24]];
      uint64_t v70 = *v69;
      uint64_t v71 = (void *)v69[1];
      uint64_t v72 = v109;
      uint64_t v73 = v105;
      uint64_t v101 = *(void (**)(void *, char *, char *))(v109 + 32);
      v101(v105, v21, v112);
      uint64_t v107 = v71;
      uint64_t v100 = (uint64_t)v71;
      int v74 = (int)v106;
      uint64_t v102 = v66;
      uint64_t v103 = v64;
      uint64_t v75 = v64;
      int v76 = v104;
      uint64_t v108 = v68;
      uint64_t v77 = v68;
      uint64_t v78 = v70;
      static _VideoUtilities.validateVideoInput(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)v73, v75, v106, v66, v110, v104, v77, v70, v100);
      if (v1)
      {
        (*(void (**)(void *, char *))(v72 + 8))(v73, v112);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v92 = (void (*)(uint64_t, void *, char *))v101;
        static _VideoUtilities.renameVideoColumns(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((int)v73, v103, v74, v102, (int)v110, v76, v108, v78, v107);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v99 = v111;
        uint64_t v98 = (uint64_t)v112;
        v92(v111, v73, v112);
        uint64_t v88 = v99;
        uint64_t v89 = 0;
        uint64_t v90 = 1;
        uint64_t v91 = v98;
LABEL_17:
        __swift_storeEnumTagSinglePayload(v88, v89, v90, v91);
      }
      break;
    default:
      uint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v112 = &v21[v22[12]];
      uint64_t v23 = (uint64_t *)&v21[v22[16]];
      uint64_t v24 = (void *)v23[1];
      uint64_t v109 = *v23;
      uint64_t v25 = &v21[v22[20]];
      char v26 = *(void **)v25;
      uint64_t v27 = *((void *)v25 + 1);
      uint64_t v106 = v24;
      uint64_t v107 = v26;
      uint64_t v28 = &v21[v22[24]];
      uint64_t v29 = *(void **)v28;
      uint64_t v30 = *((void *)v28 + 1);
      uint64_t v31 = (uint64_t *)&v21[v22[28]];
      uint64_t v32 = (char *)v31[1];
      uint64_t v104 = *v31;
      uint64_t v105 = v29;
      uint64_t v33 = v108;
      uint64_t v34 = *(void (**)(char *, char *, void *))(v108 + 32);
      uint64_t v35 = v21;
      uint64_t v36 = v110;
      v34(v17, v35, v110);
      v34((char *)v2, v112, v36);
      uint64_t v112 = v32;
      MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)v17, v2, v109, (uint64_t)v106, (uint64_t)v107, v27, (uint64_t)v105, v30, v111, v104, v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(void))(v33 + 8);
      OUTLINED_FUNCTION_38_0();
      v37();
      OUTLINED_FUNCTION_38_0();
      v37();
      break;
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v132 = a2;
  uint64_t v110 = a1;
  uint64_t v99 = a9;
  uint64_t v17 = a11;
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  uint64_t v107 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v111 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CSVType();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v112 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for CSVReadingOptions();
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v103 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CSVType?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v100 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for JSONReadingOptions();
  MEMORY[0x270FA5388](v27 - 8);
  char v118 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v120 = *(void *)(v29 - 8);
  uint64_t v121 = v29;
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v102 = (char *)&v99 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  char v117 = (char *)&v99 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for JSONType?);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v115 = (char *)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for DataFrame();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v35 = MEMORY[0x270FA5388](v114);
  uint64_t v101 = (char *)&v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  id v116 = (char *)&v99 - v38;
  MEMORY[0x270FA5388](v37);
  uint64_t v130 = (char *)&v99 - v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v40 = swift_allocObject();
  long long v119 = xmmword_2272CB4D0;
  *(_OWORD *)(v40 + 16) = xmmword_2272CB4D0;
  uint64_t v128 = a3;
  uint64_t v129 = a5;
  *(void *)(v40 + 32) = a3;
  *(void *)(v40 + 40) = a4;
  *(void *)(v40 + 48) = a5;
  *(void *)(v40 + 56) = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a8)
  {
    swift_bridgeObjectRetain();
    unint64_t v41 = 3;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v40 = (uint64_t)v42;
    v42[2] = 3;
    v42[8] = a7;
    v42[9] = a8;
  }
  else
  {
    unint64_t v41 = 2;
  }
  uint64_t v131 = a10;
  uint64_t v123 = a6;
  if (a11)
  {
    uint64_t v43 = a4;
    uint64_t v44 = a7;
    uint64_t v45 = v20;
    uint64_t v46 = v21;
    uint64_t v47 = v40;
    unint64_t v48 = *(void *)(v40 + 24);
    swift_bridgeObjectRetain();
    if (v41 >= v48 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v47 = v98;
    }
    *(void *)(v47 + 16) = v41 + 1;
    uint64_t v126 = v47;
    unint64_t v49 = v47 + 16 * v41;
    *(void *)(v49 + 32) = v131;
    *(void *)(v49 + 40) = a11;
    uint64_t v21 = v46;
    uint64_t v20 = v45;
    a7 = v44;
    a4 = v43;
    uint64_t v17 = a11;
  }
  else
  {
    uint64_t v126 = v40;
  }
  BOOL v51 = URL.pathExtension.getter() == 1852797802 && v50 == 0xE400000000000000;
  uint64_t v127 = v17;
  uint64_t v124 = a8;
  uint64_t v125 = a7;
  uint64_t v106 = a4;
  if (v51)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v52)
  {
LABEL_21:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, JSONType)>);
    uint64_t v68 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType))
                - 8);
    uint64_t v69 = *(void *)v68;
    uint64_t v112 = *(char **)(*(void *)v68 + 72);
    unint64_t v70 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = v119;
    unint64_t v72 = v71 + v70;
    unint64_t v73 = v71 + v70 + v68[14];
    *(void *)unint64_t v72 = v128;
    *(void *)(v72 + 8) = a4;
    uint64_t v74 = *MEMORY[0x263F1BF58];
    uint64_t v75 = type metadata accessor for JSONType();
    int v76 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 104);
    v76(v73, v74, v75);
    uint64_t v77 = &v112[v72];
    uint64_t v78 = v68[14];
    uint64_t v79 = (void (*)(char *, uint64_t, uint64_t))v76;
    uint64_t v80 = &v112[v72 + v78];
    uint64_t v81 = v123;
    *(void *)uint64_t v77 = v129;
    *((void *)v77 + 1) = v81;
    v79(v80, v74, v75);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v133 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v82 = (unsigned int *)MEMORY[0x263F1BF50];
    uint64_t v83 = v124;
    uint64_t v84 = (uint64_t)v115;
    if (v124)
    {
      v79(v115, *MEMORY[0x263F1BF50], v75);
      __swift_storeEnumTagSinglePayload(v84, 0, 1, v75);
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter();
    }
    if (v127)
    {
      v79((char *)v84, *v82, v75);
      __swift_storeEnumTagSinglePayload(v84, 0, 1, v75);
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter();
    }
    (*(void (**)(char *, void, uint64_t))(v120 + 16))(v117, v132, v121);
    swift_bridgeObjectRetain();
    JSONReadingOptions.init()();
    uint64_t v85 = v116;
    uint64_t v86 = v122;
    DataFrame.init(contentsOfJSONFile:columns:types:options:)();
    if (v86) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v113 + 32);
    v132(v130, v85, v114);
    goto LABEL_29;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CSVType)>);
  uint64_t v53 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType))
              - 8);
  uint64_t v54 = *(void *)(*(void *)v53 + 72);
  unint64_t v55 = (*(unsigned __int8 *)(*(void *)v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v53 + 80);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v119;
  uint64_t v57 = (void *)(v56 + v55);
  unint64_t v58 = v56 + v55 + v53[14];
  *uint64_t v57 = v128;
  v57[1] = a4;
  uint64_t v59 = *MEMORY[0x263F1BF40];
  uint64_t v60 = *(void (**)(unint64_t, uint64_t, uint64_t))(v21 + 104);
  v60(v58, v59, v20);
  uint64_t v61 = (void *)((char *)v57 + v54);
  uint64_t v62 = (char *)v57 + v54 + v53[14];
  uint64_t v63 = v123;
  void *v61 = v129;
  v61[1] = v63;
  v60((unint64_t)v62, v59, v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v133 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v64 = *MEMORY[0x263F1BF38];
  uint64_t v65 = (uint64_t)v100;
  if (v124)
  {
    v60((unint64_t)v100, *MEMORY[0x263F1BF38], v20);
    __swift_storeEnumTagSinglePayload(v65, 0, 1, v20);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter();
  }
  if (v127)
  {
    v60(v65, v64, v20);
    __swift_storeEnumTagSinglePayload(v65, 0, 1, v20);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter();
  }
  (*(void (**)(char *, void, uint64_t))(v120 + 16))(v102, v132, v121);
  uint64_t v132 = (void (*)(char *, char *, uint64_t))v133;
  swift_bridgeObjectRetain();
  default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
  v60((unint64_t)v112, v64, v20);
  CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
  uint64_t v66 = v101;
  uint64_t v67 = v122;
  DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
  if (v67) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v113 + 32);
  v132(v130, v66, v114);
  LODWORD(v81) = v123;
  uint64_t v83 = v124;
LABEL_29:
  uint64_t v88 = v107;
  int v89 = v128;
  int v90 = v106;
  DataFrame.subscript.getter();
  uint64_t v133 = 0;
  unint64_t v134 = 0xE000000000000000;
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  uint64_t v91 = v111;
  uint64_t v92 = v109;
  OptionalColumnProtocol.filled(with:)();
  uint64_t v93 = (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v88, v92);
  MEMORY[0x270FA5388](v93);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSSgs5NeverOTg5();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  DataFrame.subscript.setter();
  uint64_t v94 = v130;
  static _VideoUtilities.renameVideoColumns(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((int)v130, v89, v90, v129, v81, v125, v83, v131, v127);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v91, v105);
  uint64_t v95 = v94;
  uint64_t v96 = v99;
  uint64_t v97 = v114;
  v132((char *)v99, v95, v114);
  return __swift_storeEnumTagSinglePayload(v96, 0, 1, v97);
}

uint64_t closure #1 in MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v24 - v16;
  v24[1] = *a1;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F06E38], v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, v25, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v11);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  URL.absoluteURL.getter();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v17, v11);
  uint64_t v19 = URL.path.getter();
  uint64_t v21 = v20;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v15, v11);
  uint64_t v23 = v26;
  *uint64_t v26 = v19;
  v23[1] = v21;
  return result;
}

uint64_t closure #1 in MLHandActionClassifier.DataSource.videosWithAnnotations()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)();
  uint64_t v6 = URL.path.getter();
  uint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

void MLHandActionClassifier.DataSource.stratifiedSplit(proportions:seed:labelColumn:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_12_32(v11, v26);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    uint64_t v27 = v9;
    uint64_t v28 = (void *)v5;
    uint64_t v17 = v1
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String))
                 + 48);
    uint64_t v15 = *(void **)v17;
    uint64_t v16 = *(void **)(v17 + 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for DataFrame();
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t))(v18 + 8))(v1);
  }
  else
  {
    if (EnumCaseMultiPayload != 3)
    {
      MLHandActionClassifier.DataSource.videosWithAnnotations()();
      if (!v0)
      {
        if (v7 < 0) {
          goto LABEL_14;
        }
        type metadata accessor for MersenneTwisterGenerator();
        swift_allocObject();
        MersenneTwisterGenerator.init(seed:)(v7);
        OUTLINED_FUNCTION_39_17(v19);
        specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(v9, v29, v30, v5, v3, v20);
        swift_release();
        outlined consume of Result<_DataTable, Error>(v29, v30);
      }
      outlined destroy of MLHandActionClassifier.DataSource(v1);
      goto LABEL_13;
    }
    uint64_t v27 = v9;
    uint64_t v28 = (void *)v5;
    uint64_t v13 = *(void **)v1;
    char v14 = *(unsigned char *)(v1 + 8);
    uint64_t v15 = *(void **)(v1 + 16);
    uint64_t v16 = *(void **)(v1 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v13, v14);
  }
  MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v29);
  if (v0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v29;
    uint64_t v22 = (void *)v30;
    type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject();
    MersenneTwisterGenerator.init(seed:)(v7);
    OUTLINED_FUNCTION_39_17(v23);
    specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(v27, v24, v21, v22, v15, v16, v28, v3, v25);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Result<_DataTable, Error>(v21, (char)v22);
    goto LABEL_13;
  }
LABEL_14:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.DataSource.videosWithAnnotations()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in MLHandActionClassifier.DataSource.videosWithAnnotations()(a1);
}

void specialized _NativeDictionary.mapValues<A>(_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v46 = v0;
  uint64_t v2 = v1;
  uint64_t v63 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_49();
  uint64_t v62 = v6;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v7);
  uint64_t v61 = (char *)&v45 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = (void *)v9;
  int64_t v11 = 0;
  uint64_t v52 = v2;
  uint64_t v12 = *(void *)(v2 + 64);
  uint64_t v48 = v4;
  uint64_t v49 = v2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v59 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v60 = v4 + 16;
  int64_t v50 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v51 = v9 + 64;
  uint64_t v47 = (void *)v9;
  if ((v14 & v12) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v16 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v11 << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v52 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v24 = *(void *)(*(void *)(v52 + 56) + 8 * i);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v54 = *v21;
      unint64_t v56 = i;
      unint64_t v57 = v15;
      int64_t v58 = v11;
      uint64_t v66 = MEMORY[0x263F8EE78];
      uint64_t v55 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v26 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      uint64_t v53 = v24;
      uint64_t v27 = v24 + v26;
      uint64_t v28 = *(void *)(v48 + 72);
      uint64_t v64 = *(void *)(v48 + 16);
      uint64_t v65 = v28;
      do
      {
        uint64_t v29 = v61;
        OUTLINED_FUNCTION_45_12();
        uint64_t v30 = v63;
        OUTLINED_FUNCTION_18_3();
        v31();
        uint64_t v32 = v62;
        URL.absoluteURL.getter();
        uint64_t v33 = URL.path.getter();
        uint64_t v35 = v34;
        uint64_t v36 = *v59;
        (*v59)(v32, v30);
        v36((uint64_t)v29, v30);
        uint64_t v37 = v66;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v37 = v66;
        }
        unint64_t v38 = *(void *)(v37 + 16);
        if (v38 >= *(void *)(v37 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v37 = v66;
        }
        *(void *)(v37 + 16) = v38 + 1;
        uint64_t v39 = v37 + 16 * v38;
        *(void *)(v39 + 32) = v33;
        *(void *)(v39 + 40) = v35;
        v27 += v65;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      uint64_t v10 = v47;
      unint64_t v15 = v57;
      int64_t v11 = v58;
      uint64_t v40 = v55;
      unint64_t i = v56;
      uint64_t v23 = v54;
    }
    else
    {
      uint64_t v40 = swift_bridgeObjectRetain();
      uint64_t v37 = MEMORY[0x263F8EE78];
    }
    *(void *)(v51 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v41 = (void *)(v10[6] + 16 * i);
    *unint64_t v41 = v23;
    v41[1] = v40;
    *(void *)(v10[7] + 8 * i) = v37;
    uint64_t v42 = v10[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v10[2] = v44;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_33;
    }
    if (v18 >= v50) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v49 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v50) {
        goto LABEL_31;
      }
      unint64_t v19 = *(void *)(v49 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v50) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v49 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v15 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v50)
  {
LABEL_31:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  unint64_t v19 = *(void *)(v49 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v50) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v49 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  void (**v56)(void);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  OUTLINED_FUNCTION_9_0();
  BOOL v43 = v0;
  uint64_t v2 = v1;
  uint64_t v60 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_49();
  uint64_t v59 = v6;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v7);
  int64_t v58 = (char *)&v42 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = (void *)v9;
  int64_t v11 = 0;
  uint64_t v49 = v2;
  uint64_t v12 = *(void *)(v2 + 64);
  uint64_t v45 = v4;
  uint64_t v46 = v2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  unint64_t v56 = (void (**)(void))(v4 + 8);
  unint64_t v57 = v4 + 16;
  uint64_t v47 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v48 = v9 + 64;
  uint64_t v44 = (void *)v9;
  if ((v14 & v12) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v16 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v11 << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v49 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v24 = *(void *)(*(void *)(v49 + 56) + 8 * i);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v51 = *v21;
      uint64_t v53 = i;
      uint64_t v54 = v15;
      uint64_t v55 = v11;
      uint64_t v63 = MEMORY[0x263F8EE78];
      uint64_t v52 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v26 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      int64_t v50 = v24;
      uint64_t v27 = v24 + v26;
      uint64_t v28 = *(void *)(v45 + 72);
      uint64_t v61 = *(void *)(v45 + 16);
      uint64_t v62 = v28;
      do
      {
        OUTLINED_FUNCTION_45_12();
        OUTLINED_FUNCTION_21_38();
        v29();
        URL.absoluteURL.getter();
        uint64_t v30 = URL.path.getter();
        uint64_t v32 = v31;
        uint64_t v33 = *v56;
        OUTLINED_FUNCTION_68_3();
        v33();
        OUTLINED_FUNCTION_68_3();
        v33();
        uint64_t v34 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v34 = v63;
        }
        uint64_t v35 = *(void *)(v34 + 16);
        if (v35 >= *(void *)(v34 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v34 = v63;
        }
        *(void *)(v34 + 16) = v35 + 1;
        uint64_t v36 = v34 + 16 * v35;
        *(void *)(v36 + 32) = v30;
        *(void *)(v36 + 40) = v32;
        v27 += v62;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      uint64_t v10 = v44;
      unint64_t v15 = v54;
      int64_t v11 = v55;
      uint64_t v37 = v52;
      unint64_t i = v53;
      uint64_t v23 = v51;
    }
    else
    {
      uint64_t v37 = swift_bridgeObjectRetain();
      uint64_t v34 = MEMORY[0x263F8EE78];
    }
    *(void *)(v48 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v38 = (void *)(v10[6] + 16 * i);
    *unint64_t v38 = v23;
    v38[1] = v37;
    *(void *)(v10[7] + 8 * i) = v34;
    uint64_t v39 = v10[2];
    uint64_t v40 = __OFADD__(v39, 1);
    unint64_t v41 = v39 + 1;
    if (v40)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v10[2] = v41;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_33;
    }
    if (v18 >= v47) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v46 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v47) {
        goto LABEL_31;
      }
      unint64_t v19 = *(void *)(v46 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v47) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v46 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v15 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v47)
  {
LABEL_31:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  unint64_t v19 = *(void *)(v46 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v47) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v46 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t outlined destroy of AnyColumn?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.DataSource(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *(void *)a1 = *a2;
    a1 = &v25[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v26 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
        break;
      case 3u:
        uint64_t v27 = *a2;
        char v28 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v28);
        *(void *)a1 = v27;
        a1[8] = v28;
        uint64_t v29 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v29;
        uint64_t v30 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v30;
        uint64_t v31 = a2[6];
        uint64_t v32 = a2[7];
        *((void *)a1 + 6) = v31;
        *((void *)a1 + 7) = v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v33 = *a2;
        char v34 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v34);
        *(void *)a1 = v33;
        a1[8] = v34;
        uint64_t v35 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v35;
        uint64_t v36 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v36;
        uint64_t v37 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v37;
        unint64_t v38 = a2[8];
        uint64_t v39 = a2[9];
        *((void *)a1 + 8) = v38;
        *((void *)a1 + 9) = v39;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v40 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
        unint64_t v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v42 = v41[12];
        BOOL v43 = &a1[v42];
        uint64_t v44 = (uint64_t *)((char *)a2 + v42);
        uint64_t v46 = *v44;
        uint64_t v45 = v44[1];
        *(void *)BOOL v43 = v46;
        *((void *)v43 + 1) = v45;
        uint64_t v47 = v41[16];
        uint64_t v48 = &a1[v47];
        uint64_t v49 = (char **)((char *)a2 + v47);
        uint64_t v50 = v49[1];
        *(void *)uint64_t v48 = *v49;
        *((void *)v48 + 1) = v50;
        uint64_t v51 = v41[20];
        uint64_t v52 = &a1[v51];
        uint64_t v53 = (char **)((char *)a2 + v51);
        uint64_t v54 = v53[1];
        *(void *)uint64_t v52 = *v53;
        *((void *)v52 + 1) = v54;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v55 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v55 - 8) + 16))(a1, a2, v55);
        unint64_t v56 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v57 = v56[12];
        int64_t v58 = &a1[v57];
        uint64_t v59 = (uint64_t *)((char *)a2 + v57);
        uint64_t v61 = *v59;
        uint64_t v60 = v59[1];
        *(void *)int64_t v58 = v61;
        *((void *)v58 + 1) = v60;
        uint64_t v62 = v56[16];
        uint64_t v63 = &a1[v62];
        uint64_t v64 = (char **)((char *)a2 + v62);
        uint64_t v65 = v64[1];
        *(void *)uint64_t v63 = *v64;
        *((void *)v63 + 1) = v65;
        uint64_t v66 = v56[20];
        uint64_t v67 = &a1[v66];
        uint64_t v68 = (char **)((char *)a2 + v66);
        uint64_t v69 = v68[1];
        *(void *)uint64_t v67 = *v68;
        *((void *)v67 + 1) = v69;
        uint64_t v70 = v56[24];
        uint64_t v71 = &a1[v70];
        unint64_t v72 = (char **)((char *)a2 + v70);
        uint64_t v73 = v72[1];
        *(void *)uint64_t v71 = *v72;
        *((void *)v71 + 1) = v73;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(char *, char **, uint64_t))(*(void *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v7(&a1[v8[12]], (char **)((char *)a2 + v8[12]), v6);
        uint64_t v9 = v8[16];
        uint64_t v10 = &a1[v9];
        int64_t v11 = (char **)((char *)a2 + v9);
        uint64_t v12 = v11[1];
        *(void *)uint64_t v10 = *v11;
        *((void *)v10 + 1) = v12;
        uint64_t v13 = v8[20];
        uint64_t v14 = &a1[v13];
        unint64_t v15 = (char **)((char *)a2 + v13);
        uint64_t v16 = v15[1];
        *(void *)uint64_t v14 = *v15;
        *((void *)v14 + 1) = v16;
        uint64_t v17 = v8[24];
        int64_t v18 = &a1[v17];
        unint64_t v19 = (char **)((char *)a2 + v17);
        uint64_t v20 = v19[1];
        *(void *)int64_t v18 = *v19;
        *((void *)v18 + 1) = v20;
        uint64_t v21 = v8[28];
        uint64_t v22 = &a1[v21];
        uint64_t v23 = (char **)((char *)a2 + v21);
        uint64_t v24 = v23[1];
        *(void *)uint64_t v22 = *v23;
        *((void *)v22 + 1) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.DataSource(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v5 = type metadata accessor for URL();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v6(a1 + *(int *)(v7 + 48), v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 1:
    case 2:
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 3:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 4:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 5:
      uint64_t v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 6:
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for MLHandActionClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v23 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
      break;
    case 3u:
      id v24 = *(id *)a2;
      char v25 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v25);
      *(void *)a1 = v24;
      *(unsigned char *)(a1 + 8) = v25;
      uint64_t v26 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v26;
      uint64_t v27 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v27;
      uint64_t v28 = *(void *)(a2 + 48);
      uint64_t v29 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v28;
      *(void *)(a1 + 56) = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      id v30 = *(id *)a2;
      char v31 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v31);
      *(void *)a1 = v30;
      *(unsigned char *)(a1 + 8) = v31;
      uint64_t v32 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v32;
      uint64_t v33 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v33;
      uint64_t v34 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v34;
      uint64_t v35 = *(void *)(a2 + 64);
      uint64_t v36 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v35;
      *(void *)(a1 + 72) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 5u:
      uint64_t v37 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
      unint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v39 = v38[12];
      uint64_t v40 = (void *)(a1 + v39);
      unint64_t v41 = (uint64_t *)(a2 + v39);
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      *uint64_t v40 = v43;
      v40[1] = v42;
      uint64_t v44 = v38[16];
      uint64_t v45 = (void *)(a1 + v44);
      uint64_t v46 = (void *)(a2 + v44);
      uint64_t v47 = v46[1];
      void *v45 = *v46;
      v45[1] = v47;
      uint64_t v48 = v38[20];
      uint64_t v49 = (void *)(a1 + v48);
      uint64_t v50 = (void *)(a2 + v48);
      uint64_t v51 = v50[1];
      *uint64_t v49 = *v50;
      v49[1] = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 6u:
      uint64_t v52 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
      uint64_t v53 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v54 = v53[12];
      uint64_t v55 = (void *)(a1 + v54);
      unint64_t v56 = (uint64_t *)(a2 + v54);
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      void *v55 = v58;
      v55[1] = v57;
      uint64_t v59 = v53[16];
      uint64_t v60 = (void *)(a1 + v59);
      uint64_t v61 = (void *)(a2 + v59);
      uint64_t v62 = v61[1];
      *uint64_t v60 = *v61;
      v60[1] = v62;
      uint64_t v63 = v53[20];
      uint64_t v64 = (void *)(a1 + v63);
      uint64_t v65 = (void *)(a2 + v63);
      uint64_t v66 = v65[1];
      void *v64 = *v65;
      v64[1] = v66;
      uint64_t v67 = v53[24];
      uint64_t v68 = (void *)(a1 + v67);
      uint64_t v69 = (void *)(a2 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = type metadata accessor for URL();
      uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v5(a1 + v6[12], a2 + v6[12], v4);
      uint64_t v7 = v6[16];
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (void *)(a2 + v7);
      uint64_t v10 = v9[1];
      void *v8 = *v9;
      v8[1] = v10;
      uint64_t v11 = v6[20];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (void *)(a2 + v11);
      uint64_t v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      uint64_t v15 = v6[24];
      uint64_t v16 = (void *)(a1 + v15);
      uint64_t v17 = (void *)(a2 + v15);
      uint64_t v18 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v18;
      uint64_t v19 = v6[28];
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (void *)(a2 + v19);
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MLHandActionClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource(a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v19 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        break;
      case 3u:
        id v20 = *(id *)a2;
        char v21 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v21);
        *(void *)a1 = v20;
        *(unsigned char *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v22 = *(id *)a2;
        char v23 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v23);
        *(void *)a1 = v22;
        *(unsigned char *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v24 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
        char v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v26 = v25[12];
        uint64_t v27 = (void *)(a1 + v26);
        uint64_t v28 = (void *)(a2 + v26);
        void *v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v25[16];
        id v30 = (void *)(a1 + v29);
        char v31 = (void *)(a2 + v29);
        void *v30 = *v31;
        v30[1] = v31[1];
        uint64_t v32 = v25[20];
        uint64_t v33 = (void *)(a1 + v32);
        uint64_t v34 = (void *)(a2 + v32);
        *uint64_t v33 = *v34;
        v33[1] = v34[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v35 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
        uint64_t v36 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v37 = v36[12];
        unint64_t v38 = (void *)(a1 + v37);
        uint64_t v39 = (void *)(a2 + v37);
        *unint64_t v38 = *v39;
        v38[1] = v39[1];
        uint64_t v40 = v36[16];
        unint64_t v41 = (void *)(a1 + v40);
        uint64_t v42 = (void *)(a2 + v40);
        *unint64_t v41 = *v42;
        v41[1] = v42[1];
        uint64_t v43 = v36[20];
        uint64_t v44 = (void *)(a1 + v43);
        uint64_t v45 = (void *)(a2 + v43);
        *uint64_t v44 = *v45;
        v44[1] = v45[1];
        uint64_t v46 = v36[24];
        uint64_t v47 = (void *)(a1 + v46);
        uint64_t v48 = (void *)(a2 + v46);
        *uint64_t v47 = *v48;
        v47[1] = v48[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = type metadata accessor for URL();
        uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
        v5(a1, a2, v4);
        uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v5(a1 + v6[12], a2 + v6[12], v4);
        uint64_t v7 = v6[16];
        uint64_t v8 = (void *)(a1 + v7);
        uint64_t v9 = (void *)(a2 + v7);
        void *v8 = *v9;
        v8[1] = v9[1];
        uint64_t v10 = v6[20];
        uint64_t v11 = (void *)(a1 + v10);
        uint64_t v12 = (void *)(a2 + v10);
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        uint64_t v13 = v6[24];
        uint64_t v14 = (void *)(a1 + v13);
        uint64_t v15 = (void *)(a2 + v13);
        void *v14 = *v15;
        v14[1] = v15[1];
        uint64_t v16 = v6[28];
        uint64_t v17 = (void *)(a1 + v16);
        uint64_t v18 = (void *)(a2 + v16);
        void *v17 = *v18;
        v17[1] = v18[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLHandActionClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v7(&a1[v8[12]], &a2[v8[12]], v6);
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
      *(_OWORD *)&a1[v8[24]] = *(_OWORD *)&a2[v8[24]];
      *(_OWORD *)&a1[v8[28]] = *(_OWORD *)&a2[v8[28]];
      goto LABEL_7;
    case 1u:
    case 2u:
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      goto LABEL_7;
    case 5u:
      uint64_t v10 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
      *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
      *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
      goto LABEL_7;
    case 6u:
      uint64_t v12 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
      *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
      *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
      *(_OWORD *)&a1[v13[24]] = *(_OWORD *)&a2[v13[24]];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for MLHandActionClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v7(&a1[v8[12]], &a2[v8[12]], v6);
        *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
        *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
        *(_OWORD *)&a1[v8[24]] = *(_OWORD *)&a2[v8[24]];
        *(_OWORD *)&a1[v8[28]] = *(_OWORD *)&a2[v8[28]];
        goto LABEL_8;
      case 1u:
      case 2u:
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        goto LABEL_8;
      case 5u:
        uint64_t v10 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
        *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
        *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
        goto LABEL_8;
      case 6u:
        uint64_t v12 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
        *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
        *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
        *(_OWORD *)&a1[v13[24]] = *(_OWORD *)&a2[v13[24]];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLHandActionClassifier.DataSource()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64;
    uint64_t v7 = (void *)v6;
    uint64_t v8 = &unk_2272D2240;
    uint64_t v9 = &unk_2272D2240;
    uint64_t v10 = &unk_2272D2258;
    uint64_t v11 = &unk_2272D2258;
    swift_getTupleTypeLayout();
    uint64_t v13 = &v12;
    uint64_t v14 = v6;
    uint64_t v15 = v6;
    uint64_t v16 = &unk_2272D2270;
    uint64_t v17 = &unk_2272D2288;
    uint64_t result = type metadata accessor for DataFrame();
    if (v2 <= 0x3F)
    {
      uint64_t v3 = *(void *)(result - 8) + 64;
      swift_getTupleTypeLayout();
      uint64_t v18 = &v5;
      uint64_t v6 = v3;
      uint64_t v7 = &unk_2272D2240;
      uint64_t v8 = &unk_2272D2240;
      uint64_t v9 = &unk_2272D2258;
      uint64_t v10 = &unk_2272D2258;
      swift_getTupleTypeLayout();
      uint64_t v19 = &v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in MLHandActionClassifier.DataSource.gatherAnnotatedFileNamesForDirectory(url:annotationFile:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t OUTLINED_FUNCTION_3_58()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized DataFrame.init<A>(expanding:keysColumnName:valuesColumnName:)(a1, 0x7461506F65646976, 0xE900000000000068, a2);
}

uint64_t OUTLINED_FUNCTION_7_43()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
  return *(void *)(v1 - 384);
}

uint64_t OUTLINED_FUNCTION_12_32@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLHandActionClassifier.DataSource(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_13_38@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLHandActionClassifier.DataSource(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_16_33()
{
  char v2 = *(unsigned char *)(v0 - 96);
  *(void *)(v0 - 120) = *(void *)(v0 - 104);
  *(unsigned char *)(v0 - 112) = v2;
  uint64_t v3 = *(void *)(v0 - 160);
  return DataFrame.init(_:)(v0 - 120, v3);
}

uint64_t OUTLINED_FUNCTION_24_29@<X0>(void *a1@<X8>)
{
  return static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)(v1, 0, a1, v3);
}

uint64_t OUTLINED_FUNCTION_25_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_20()
{
  outlined consume of Result<_DataTable, Error>(v0, v1);
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_32_21()
{
  char v1 = *(unsigned char *)(v0 - 112);
  *(void *)(v0 - 104) = *(void *)(v0 - 120);
  *(unsigned char *)(v0 - 96) = v1;
}

uint64_t OUTLINED_FUNCTION_34_15()
{
  return v0;
}

void OUTLINED_FUNCTION_35_18()
{
  char v2 = *(unsigned char *)(v1 - 96);
  *(void *)uint64_t v0 = *(void *)(v1 - 104);
  *(unsigned char *)(v0 + 8) = v2;
}

uint64_t OUTLINED_FUNCTION_38_18()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_39_17(uint64_t result)
{
  *(void *)(v1 - 96) = result;
  return result;
}

uint64_t MLPhase.rawValue.getter()
{
  uint64_t result = 0x696C616974696E69;
  switch(*v0)
  {
    case 1:
      uint64_t v2 = 0x636172747865;
      goto LABEL_5;
    case 2:
      uint64_t result = 0x676E696E69617274;
      break;
    case 3:
      uint64_t v2 = 0x61756C617665;
LABEL_5:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
      break;
    case 4:
      uint64_t result = 0x636E657265666E69;
      break;
    default:
      return result;
  }
  return result;
}

CreateML::MLPhase_optional __swiftcall MLPhase.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  char v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLPhase.init(rawValue:), v3);
  result.unint64_t value = swift_bridgeObjectRelease();
  char v7 = 5;
  if (v5 < 5) {
    char v7 = v5;
  }
  *char v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLPhase(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLPhase()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MLPhase()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLPhase(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

CreateML::MLPhase_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MLPhase(Swift::String *a1)
{
  return MLPhase.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLPhase@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLPhase.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLPhase()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLPhase()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t getEnumTagSinglePayload for MLPhase(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MLPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22721E904);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLPhase()
{
  return &type metadata for MLPhase;
}

uint64_t Column<A>.parseAsJSONArrays()@<X0>(uint64_t a1@<X8>)
{
  return Column<A>.parseAsJSONArrays()(&demangling cache variable for type metadata for Column<String>, a1);
}

{
  return Column<A>.parseAsJSONArrays()(&demangling cache variable for type metadata for Column<Data>, a1);
}

void AnyColumn.convertedToFloats()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_105_0(v1, v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_53(v3, v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_27_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_16_34();
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v8);
    OUTLINED_FUNCTION_17_28();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v9, partial apply for closure #1 in AnyColumn.convertedToFloats(), v10, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_8_36();
  }
  else if (swift_dynamicCastMetatype())
  {
    OUTLINED_FUNCTION_21_34();
    uint64_t v13 = AnyColumn.count.getter();
    MEMORY[0x270FA5388](v13);
    OUTLINED_FUNCTION_1_50();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v14, partial apply for closure #2 in AnyColumn.convertedToFloats(), v15, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_7_44();
  }
  else if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v16);
    OUTLINED_FUNCTION_1_50();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v17, (uint64_t (*)(void *, uint64_t *))partial apply for closure #3 in AnyColumn.convertedToFloats(), v18, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_10_32();
  }
  else if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    uint64_t v19 = AnyColumn.count.getter();
    MEMORY[0x270FA5388](v19);
    OUTLINED_FUNCTION_19_30();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v20, (uint64_t (*)(void *, uint64_t *))partial apply for closure #4 in AnyColumn.convertedToFloats(), v21, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_12_33();
  }
  else if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v22);
    OUTLINED_FUNCTION_18_25();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v23, partial apply for closure #5 in AnyColumn.convertedToFloats(), v24, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_11_39();
  }
  else
  {
    if (!swift_dynamicCastMetatype()) {
      goto LABEL_6;
    }
    OUTLINED_FUNCTION_21_34();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v25);
    OUTLINED_FUNCTION_1_50();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v26, partial apply for closure #6 in AnyColumn.convertedToFloats(), v27, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_9_38();
  }
  v12(v11);
LABEL_6:
  OUTLINED_FUNCTION_12_4();
}

void AnyColumn.convertedToDoubles()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_105_0(v1, v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_4_53(v3, v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_27_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_16_34();
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v8);
    OUTLINED_FUNCTION_17_28();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v9, partial apply for closure #1 in AnyColumn.convertedToDoubles(), v10, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_8_36();
  }
  else if (swift_dynamicCastMetatype())
  {
    OUTLINED_FUNCTION_21_34();
    uint64_t v13 = AnyColumn.count.getter();
    MEMORY[0x270FA5388](v13);
    OUTLINED_FUNCTION_1_50();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v14, partial apply for closure #2 in AnyColumn.convertedToDoubles(), v15, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_7_44();
  }
  else if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v16);
    OUTLINED_FUNCTION_1_50();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v17, (uint64_t (*)(void *, uint64_t *))partial apply for closure #3 in AnyColumn.convertedToDoubles(), v18, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_10_32();
  }
  else if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    uint64_t v19 = AnyColumn.count.getter();
    MEMORY[0x270FA5388](v19);
    OUTLINED_FUNCTION_19_30();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v20, (uint64_t (*)(void *, uint64_t *))partial apply for closure #4 in AnyColumn.convertedToDoubles(), v21, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_12_33();
  }
  else if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v22);
    OUTLINED_FUNCTION_18_25();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v23, partial apply for closure #5 in AnyColumn.convertedToDoubles(), v24, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_11_39();
  }
  else
  {
    if (!swift_dynamicCastMetatype()) {
      goto LABEL_6;
    }
    OUTLINED_FUNCTION_21_34();
    AnyColumn.count.getter();
    OUTLINED_FUNCTION_2_0();
    MEMORY[0x270FA5388](v25);
    OUTLINED_FUNCTION_1_50();
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v26, partial apply for closure #6 in AnyColumn.convertedToDoubles(), v27, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
    uint64_t v11 = OUTLINED_FUNCTION_9_38();
  }
  v12(v11);
LABEL_6:
  OUTLINED_FUNCTION_12_4();
}

void AnyColumn.convertedToStrings()(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_0();
  uint64_t v31 = v3;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  OUTLINED_FUNCTION_0();
  uint64_t v32 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_27_7();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype())
  {
    uint64_t v30 = v12;
    if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      Column.mapNonNil<A>(_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v10);
    }
    else if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      Column.mapNonNil<A>(_:)();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v1, v7);
    }
    else if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      Column.mapNonNil<A>(_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v2);
    }
    else
    {
      uint64_t v17 = AnyColumn.name.getter();
      uint64_t v19 = v18;
      type metadata accessor for AnyColumn();
      lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn();
      uint64_t v20 = dispatch thunk of Collection.count.getter();
      uint64_t v21 = MEMORY[0x263F8EE78];
      if (v20)
      {
        uint64_t v22 = v20;
        uint64_t v30 = v19;
        uint64_t v31 = v17;
        uint64_t v39 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        dispatch thunk of Collection.startIndex.getter();
        if (v22 < 0)
        {
          __break(1u);
          return;
        }
        uint64_t v32 = MEMORY[0x263F8EE58] + 8;
        do
        {
          uint64_t v23 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
          outlined init with copy of Any?(v24, (uint64_t)v36);
          v23(&v37, 0);
          outlined init with copy of Any?((uint64_t)v36, (uint64_t)&v37);
          if (v38)
          {
            outlined init with take of Any(&v37, v35);
            outlined init with copy of Any((uint64_t)v35, (uint64_t)v34);
            uint64_t v25 = String.init<A>(describing:)();
            uint64_t v27 = v26;
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
          }
          else
          {
            uint64_t v25 = 0;
            uint64_t v27 = 0;
          }
          outlined destroy of Any?((uint64_t)v36);
          uint64_t v21 = v39;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v21 = v39;
          }
          unint64_t v28 = *(void *)(v21 + 16);
          if (v28 >= *(void *)(v21 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v21 = v39;
          }
          *(void *)(v21 + 16) = v28 + 1;
          uint64_t v29 = v21 + 16 * v28;
          *(void *)(v29 + 32) = v25;
          *(void *)(v29 + 40) = v27;
          dispatch thunk of Collection.formIndex(after:)();
          --v22;
        }
        while (v22);
      }
      *(void *)&long long v37 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String?] and conformance [A], &demangling cache variable for type metadata for [String?]);
      Column.init<A>(name:contents:)();
    }
    OUTLINED_FUNCTION_12_4();
    return;
  }
  OUTLINED_FUNCTION_12_4();
  AnyColumn.assumingType<A>(_:)();
}

uint64_t Column<A>.parseAsJSONArrays()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v18[1] = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  OUTLINED_FUNCTION_0();
  uint64_t v19 = v5;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v18 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v18 - v13;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t result = Column.map<A>(_:)();
  if (!v2)
  {
    Column.name.getter();
    uint64_t v16 = v19;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v9, v14, v4);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[Any]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Any]>);
    Column.init<A>(name:contents:)();
    Column.eraseToAnyColumn()();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v16 + 8);
    v17(v12, v4);
    return ((uint64_t (*)(char *, uint64_t))v17)(v14, v4);
  }
  return result;
}

uint64_t implicit closure #1 in AnyColumn.convertedToStrings()()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned Int) -> (@owned String)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = implicit closure #1 in AnyColumn.convertedToStrings()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #1 in AnyColumn.convertedToStrings()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Float.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #2 in AnyColumn.convertedToStrings()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Double.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #1 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        double v9 = (double)v10;
        if (v11) {
          double v9 = NAN;
        }
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #2 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        double v9 = (double)v10;
        if (v11) {
          double v9 = NAN;
        }
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #3 in AnyColumn.convertedToDoubles()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  OUTLINED_FUNCTION_13_39(a1, a2, a3, a4);
  uint64_t result = Column.count.getter();
  *uint64_t v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *v5;
      do
      {
        uint64_t result = OUTLINED_FUNCTION_20_33();
        double v11 = (double)v12;
        if (v13) {
          double v11 = NAN;
        }
        *(double *)(v10 + 8 * v9) = v11;
        uint64_t v9 = v6;
      }
      while (v8 != v6);
    }
  }
  return result;
}

uint64_t closure #5 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        double v9 = v10;
        if (v11) {
          double v9 = NAN;
        }
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #6 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        double v9 = v10;
        if (v11) {
          double v9 = NAN;
        }
        *(double *)(v7 + 8 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #1 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        float v9 = (float)v10;
        if (v11) {
          float v9 = NAN;
        }
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #2 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        float v9 = (float)v10;
        if (v11) {
          float v9 = NAN;
        }
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #3 in AnyColumn.convertedToFloats()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  OUTLINED_FUNCTION_13_39(a1, a2, a3, a4);
  uint64_t result = Column.count.getter();
  *uint64_t v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *v5;
      do
      {
        uint64_t result = OUTLINED_FUNCTION_20_33();
        float v11 = (float)v12;
        if (v13) {
          float v11 = NAN;
        }
        *(float *)(v10 + 4 * v9) = v11;
        uint64_t v9 = v6;
      }
      while (v8 != v6);
    }
  }
  return result;
}

uint64_t closure #5 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        float v9 = v10;
        if (v11) {
          float v9 = NAN;
        }
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t closure #6 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t result = Column.count.getter();
  *a2 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t result = Column.subscript.getter();
        float v9 = v10;
        if (v11) {
          float v9 = NAN;
        }
        *(float *)(v7 + 4 * v6++) = v9;
      }
      while (v5 != v8);
    }
  }
  return result;
}

uint64_t partial apply for closure #6 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #6 in AnyColumn.convertedToFloats()(a1, a2);
}

uint64_t closure #1 in Column<A>.parseAsJSONArrays()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v18[4] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  static String.Encoding.utf8.getter();
  uint64_t v9 = String.data(using:allowLossyConversion:)();
  unint64_t v11 = v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v11 >> 60 == 15) {
    goto LABEL_5;
  }
  uint64_t v12 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v18[0] = 0;
  id v14 = objc_msgSend(v12, sel_JSONObjectWithData_options_error_, isa, 0, v18);

  if (!v14)
  {
    id v16 = v18[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return outlined consume of Data?(v9, v11);
  }
  id v15 = v18[0];
  _bridgeAnyObjectToAny(_:)();
  outlined consume of Data?(v9, v11);
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_5:
  }
    *a2 = 0;
  return result;
}

uint64_t closure #1 in Column<A>.parseAsJSONArrays()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  v10[4] = *(id *)MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(result + 8);
  if (v3 >> 60 == 15)
  {
LABEL_4:
    *a2 = 0;
    return result;
  }
  uint64_t v4 = *(void *)result;
  uint64_t v5 = self;
  outlined copy of Data._Representation(v4, v3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v10[0] = 0;
  id v7 = objc_msgSend(v5, sel_JSONObjectWithData_options_error_, isa, 0, v10);

  if (v7)
  {
    id v8 = v10[0];
    _bridgeAnyObjectToAny(_:)();
    outlined consume of Data?(v4, v3);
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    uint64_t result = swift_dynamicCast();
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  id v9 = v10[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return outlined consume of Data?(v4, v3);
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t (*a2)(void *, uint64_t *), uint64_t a3)
{
  return specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(a1, a2, a3, (uint64_t (*)(void))specialized static Array._allocateUninitialized(_:));
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t (*a2)(void *, uint64_t *), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4();
  uint64_t v9 = v8;
  v11[1] = a1;
  uint64_t v12 = 0;
  v11[0] = v8;
  uint64_t result = a2(v11, &v12);
  if (v4)
  {
    if (v12 > a1)
    {
      __break(1u);
    }
    else
    {
      if (!v11[0])
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      if (v9 == v11[0])
      {
        *(void *)(v7 + 16) = v12;
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  if (v12 > a1)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v11[0])
  {
    if (v9 == v11[0])
    {
      *(void *)(v7 + 16) = v12;
      return v7;
    }
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #5 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #5 in AnyColumn.convertedToFloats()(a1, a2);
}

uint64_t partial apply for closure #4 in AnyColumn.convertedToFloats()(uint64_t a1, uint64_t a2)
{
  return closure #3 in AnyColumn.convertedToFloats()(a1, a2, *(void *)(v2 + 16), &demangling cache variable for type metadata for Column<Int>);
}

uint64_t partial apply for closure #3 in AnyColumn.convertedToFloats()(uint64_t a1, uint64_t a2)
{
  return closure #3 in AnyColumn.convertedToFloats()(a1, a2, *(void *)(v2 + 16), &demangling cache variable for type metadata for Column<Int64>);
}

uint64_t partial apply for closure #2 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #2 in AnyColumn.convertedToFloats()(a1, a2);
}

uint64_t partial apply for closure #1 in AnyColumn.convertedToFloats()(uint64_t *a1, uint64_t *a2)
{
  return closure #1 in AnyColumn.convertedToFloats()(a1, a2);
}

uint64_t partial apply for closure #6 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #6 in AnyColumn.convertedToDoubles()(a1, a2);
}

uint64_t partial apply for closure #5 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #5 in AnyColumn.convertedToDoubles()(a1, a2);
}

uint64_t partial apply for closure #4 in AnyColumn.convertedToDoubles()(uint64_t a1, uint64_t a2)
{
  return closure #3 in AnyColumn.convertedToDoubles()(a1, a2, *(void *)(v2 + 16), &demangling cache variable for type metadata for Column<Int>);
}

uint64_t partial apply for closure #3 in AnyColumn.convertedToDoubles()(uint64_t a1, uint64_t a2)
{
  return closure #3 in AnyColumn.convertedToDoubles()(a1, a2, *(void *)(v2 + 16), &demangling cache variable for type metadata for Column<Int64>);
}

uint64_t partial apply for closure #2 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #2 in AnyColumn.convertedToDoubles()(a1, a2);
}

uint64_t partial apply for closure #1 in AnyColumn.convertedToDoubles()(uint64_t *a1, uint64_t *a2)
{
  return closure #1 in AnyColumn.convertedToDoubles()(a1, a2);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

void OUTLINED_FUNCTION_4_53(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 96) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_7_44()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_36()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_32()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_39()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_33()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return __swift_instantiateConcreteTypeFromMangledName(a4);
}

uint64_t OUTLINED_FUNCTION_16_34()
{
  return AnyColumn.wrappedElementType.getter();
}

uint64_t OUTLINED_FUNCTION_20_33()
{
  return Column.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_21_34()
{
  return AnyColumn.assumingType<A>(_:)();
}

void **assignWithCopy for MLLinearRegressor.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = *a2;
      char v8 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((unsigned char *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLLinearRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLLinearRegressor.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *assignWithTake for MLLinearRegressor.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLLinearRegressor.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t MLLinearRegressor.ModelParameters.ValidationData.asTable()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = (uint64_t *)(v16 - v15);
  outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData(v2, v16 - v15);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v19 = *v17;
      char v20 = *((unsigned char *)v17 + 8);
      goto LABEL_7;
    case 2:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v4);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v10, v13, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(1, (uint64_t)&v27);
      uint64_t v24 = OUTLINED_FUNCTION_4_1();
      uint64_t result = v25(v24);
      uint64_t v19 = v27;
      char v20 = v28;
LABEL_7:
      *(void *)a1 = v19;
      *(unsigned char *)(a1 + 8) = v20;
      break;
    case 3:
      uint64_t v21 = MEMORY[0x22A6764B0](0);
      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x227220F3CLL);
      }
      uint64_t v22 = v21;
      type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t result = (uint64_t)_DataTable.init(impl:)(v23);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t MLLinearRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a3;
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v66 = a1;
  uint64_t v61 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  uint64_t v57 = (char *)(v13 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v56 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v56 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  MEMORY[0x270FA5388](v21 - 8);
  OUTLINED_FUNCTION_33();
  uint64_t v24 = v22 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_3_0();
  uint64_t v31 = (uint64_t *)(v30 - v29);
  outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData(v4, v30 - v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v47 = *v31;
      char v48 = *((unsigned char *)v31 + 8);
      uint64_t v49 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      *(void *)&long long v63 = v47;
      BYTE8(v63) = v48;
      uint64_t v50 = v60;
      DataFrame.init(_:)((uint64_t)&v63, v60);
      uint64_t v43 = v50;
      uint64_t v44 = 0;
      uint64_t v46 = v49;
      goto LABEL_10;
    case 2u:
      uint64_t v38 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 32);
      uint64_t v39 = v31;
      uint64_t v40 = v61;
      v38((uint64_t)v10, v39, v61);
      if (DataFrameProtocol.isEmpty.getter())
      {
        (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v40);
        uint64_t v41 = OUTLINED_FUNCTION_1_3();
        v42(v41);
        uint64_t v43 = v60;
        uint64_t v44 = 1;
      }
      else
      {
        uint64_t v51 = OUTLINED_FUNCTION_1_3();
        v52(v51);
        uint64_t v53 = v60;
        v38(v60, v10, v40);
        uint64_t v43 = v53;
        uint64_t v44 = 0;
      }
      uint64_t v46 = v40;
      goto LABEL_10;
    case 3u:
      uint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      uint64_t v43 = v60;
      uint64_t v44 = 1;
      uint64_t v46 = v45;
LABEL_10:
      uint64_t result = __swift_storeEnumTagSinglePayload(v43, v44, 1, v46);
      break;
    default:
      char v32 = *((unsigned char *)v31 + 16);
      char v33 = *((unsigned char *)v31 + 17);
      long long v63 = *(_OWORD *)v31;
      char v64 = v32;
      char v65 = v33;
      DataFrame.randomSplit(strategy:)((uint64_t)v27, (uint64_t)v20, (uint64_t)&v63);
      uint64_t v35 = v58;
      uint64_t v34 = v59;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v36(v18, v20, v59);
      DataFrame.init(_:)();
      outlined init with copy of DataFrame.Slice?((uint64_t)v27, v24);
      if (__swift_getEnumTagSinglePayload(v24, 1, v34) == 1)
      {
        __swift_storeEnumTagSinglePayload(v60, 1, 1, v61);
        long long v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v18, v24, v34);
        v36(v57, v18, v34);
        uint64_t v55 = v60;
        DataFrame.init(_:)();
        long long v37 = *(void (**)(char *, uint64_t))(v35 + 8);
        v37(v18, v34);
        __swift_storeEnumTagSinglePayload(v55, 0, 1, v61);
      }
      v37(v20, v34);
      uint64_t result = outlined destroy of DataFrame.Slice?((uint64_t)v27);
      break;
  }
  return result;
}

float MLFewShotSoundClassifier.ModelParameters.learningRate.getter()
{
  return *(float *)(v0 + 8);
}

uint64_t MLFewShotSoundClassifier.ModelParameters.batchSize.getter()
{
  return *(void *)(v0 + 16);
}

float MLFewShotSoundClassifier.ModelParameters.lossParameters.getter@<S0>(uint64_t a1@<X8>)
{
  float result = *(float *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 24);
  *(float *)(a1 + 8) = result;
  return result;
}

float MLFewShotSoundClassifier.ModelParameters.LossParameters.gamma.getter()
{
  return *(float *)v0;
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.gamma.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.LossParameters.gamma.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

float MLFewShotSoundClassifier.ModelParameters.LossParameters.epsilon.getter()
{
  return *(float *)(v0 + 4);
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.epsilon.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.LossParameters.epsilon.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

float MLFewShotSoundClassifier.ModelParameters.LossParameters.alpha.getter()
{
  return *(float *)(v0 + 8);
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.alpha.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.LossParameters.alpha.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

float static MLFewShotSoundClassifier.__Defaults.gamma.getter()
{
  return 10000.0;
}

float static MLFewShotSoundClassifier.__Defaults.epsilon.getter()
{
  return 0.0000001;
}

float static MLFewShotSoundClassifier.__Defaults.alpha.getter()
{
  return 2.0;
}

void MLFewShotSoundClassifier.ModelParameters.LossParameters.init(gamma:epsilon:alpha:)(float *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)v0;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.maxIterations.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLFewShotSoundClassifier.ModelParameters.learningRate.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

float (*MLFewShotSoundClassifier.ModelParameters.learningRate.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return MLFewShotSoundClassifier.ModelParameters.learningRate.modify;
}

float MLFewShotSoundClassifier.ModelParameters.learningRate.modify(float *a1)
{
  float result = a1[2];
  *(float *)(*(void *)a1 + 8) = result;
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.batchSize.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

void *(*MLFewShotSoundClassifier.ModelParameters.batchSize.modify(void *a1))(void *result)
{
  *a1 = *(void *)(v1 + 16);
  a1[1] = v1;
  return MLFewShotSoundClassifier.ModelParameters.batchSize.modify;
}

void *MLFewShotSoundClassifier.ModelParameters.batchSize.modify(void *result)
{
  *(void *)(result[1] + 16) = *result;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.lossParamters.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = *(void *)(v1 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 32);
  return MLFewShotSoundClassifier.ModelParameters.lossParamters.modify;
}

float key path getter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters@<S0>(void (*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(&v4);
  float result = v5;
  *(void *)a2 = v4;
  *(float *)(a2 + 8) = result;
  return result;
}

uint64_t key path setter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *a1;
  int v8 = v5;
  return a5(&v7);
}

float MLFewShotSoundClassifier.ModelParameters.lossParameters.setter(uint64_t a1)
{
  float result = *(float *)(a1 + 8);
  *(void *)(v1 + 24) = *(void *)a1;
  *(float *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.lossParameters.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = *(void *)(v1 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 32);
  return MLFewShotSoundClassifier.ModelParameters.lossParamters.modify;
}

float MLFewShotSoundClassifier.ModelParameters.lossParamters.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  float result = a1[4];
  *(void *)(v1 + 24) = *((void *)a1 + 1);
  *(float *)(v1 + 32) = result;
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.hallucinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.ModelParameters() + 32);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_17_12();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.ModelParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLFewShotSoundClassifier.ModelParameters;
  if (!type metadata singleton initialization cache for MLFewShotSoundClassifier.ModelParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.hallucinator.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_1_51() + 32);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_17_12();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);

  return v5(v2, v0, v3);
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.hallucinator.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.pretrainedModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.ModelParameters() + 36);

  return outlined init with copy of URL?(v3, a1);
}

uint64_t MLFewShotSoundClassifier.ModelParameters.pretrainedModel.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_1_51() + 36);

  return outlined assign with take of URL?(v0, v2);
}

uint64_t (*MLFewShotSoundClassifier.ModelParameters.pretrainedModel.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t static MLFewShotSoundClassifier.__Defaults.batchSize.getter()
{
  return 128;
}

float static MLFewShotSoundClassifier.__Defaults.learningRate.getter()
{
  return 0.01;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.init(maxIterations:batchSize:learningRate:lossParameters:hallucinator:pretrainedModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, float a6@<S0>)
{
  int v12 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a5 + 8) = 1008981770;
  *(void *)(a5 + 16) = 128;
  *(void *)(a5 + 24) = 0x33D6BF95461C4000;
  *(_DWORD *)(a5 + 32) = 0x40000000;
  uint64_t v13 = a5 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.ModelParameters() + 36);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *a3;
  __swift_storeEnumTagSinglePayload(v13, 1, 1, v14);
  *(void *)a5 = a1;
  OUTLINED_FUNCTION_17_12();
  (*(void (**)(void))(v16 + 32))();
  uint64_t result = outlined assign with take of URL?(a4, v13);
  *(void *)(a5 + 16) = a2;
  *(float *)(a5 + 8) = a6;
  *(void *)(a5 + 24) = v15;
  *(_DWORD *)(a5 + 32) = v12;
  return result;
}

uint64_t MLFewShotSoundClassifier.ModelParameters.init(maxIterations:hallucinator:pretrainedModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 8) = 1008981770;
  *(void *)(a3 + 16) = 128;
  *(void *)(a3 + 24) = 0x33D6BF95461C4000;
  *(_DWORD *)(a3 + 32) = 0x40000000;
  uint64_t v6 = a3 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.ModelParameters() + 36);
  uint64_t v7 = type metadata accessor for URL();
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
  *(void *)a3 = a1;
  OUTLINED_FUNCTION_17_12();
  (*(void (**)(void))(v8 + 32))();
  uint64_t result = outlined assign with take of URL?(a2, v6);
  *(_DWORD *)(a3 + 8) = 1008981770;
  *(void *)(a3 + 16) = 128;
  *(void *)(a3 + 24) = 0x33D6BF95461C4000;
  *(_DWORD *)(a3 + 32) = 0x40000000;
  return result;
}

uint64_t static MLFewShotSoundClassifier.__Defaults.maxIterations.getter()
{
  return 25;
}

void sub_227221AE8(float *a1@<X8>)
{
  *a1 = MLFewShotSoundClassifier.ModelParameters.learningRate.getter();
}

void sub_227221B14(float *a1)
{
}

uint64_t sub_227221B3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLFewShotSoundClassifier.ModelParameters.batchSize.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227221B68(uint64_t *a1)
{
  return MLFewShotSoundClassifier.ModelParameters.batchSize.setter(*a1);
}

float sub_227221B90@<S0>(uint64_t a1@<X8>)
{
  return key path getter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters((void (*)(uint64_t *__return_ptr))MLFewShotSoundClassifier.ModelParameters.lossParamters.getter, a1);
}

uint64_t sub_227221BBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))MLFewShotSoundClassifier.ModelParameters.lossParamters.setter);
}

float sub_227221BE8@<S0>(uint64_t a1@<X8>)
{
  return key path getter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters((void (*)(uint64_t *__return_ptr))MLFewShotSoundClassifier.ModelParameters.lossParameters.getter, a1);
}

uint64_t sub_227221C14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLFewShotSoundClassifier.ModelParameters.lossParamters : MLFewShotSoundClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))MLFewShotSoundClassifier.ModelParameters.lossParameters.setter);
}

void *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    uint64_t v11 = type metadata accessor for URL();
    int v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v11))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v12((uint64_t)v14, (uint64_t)v15, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t destroy for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v8(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!result)
  {
    return v8(v6, v5);
  }
  return result;
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v10))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  LODWORD(v7) = __swift_getEnumTagSinglePayload(a1 + v12, 1, v9);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v9);
  if (!v7)
  {
    if (!EnumTagSinglePayload)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v13, v14, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v10))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  LODWORD(v7) = __swift_getEnumTagSinglePayload(a1 + v12, 1, v9);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v9);
  if (!v7)
  {
    if (!EnumTagSinglePayload)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v13, v14, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227222450);
}

uint64_t sub_227222450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(int *)(a3 + 32);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v9 = *(int *)(a3 + 36);
  }

  return __swift_getEnumTagSinglePayload(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2272224E4);
}

uint64_t sub_2272224E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(int *)(a4 + 32);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v11 = *(int *)(a4 + 36);
  }

  return __swift_storeEnumTagSinglePayload(a1 + v11, a2, a2, v10);
}

void type metadata completion function for MLFewShotSoundClassifier.ModelParameters()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters.LossParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ModelParameters.LossParameters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MLFewShotSoundClassifier.ModelParameters.LossParameters()
{
  return &type metadata for MLFewShotSoundClassifier.ModelParameters.LossParameters;
}

ValueMetadata *type metadata accessor for MLFewShotSoundClassifier.__Defaults()
{
  return &type metadata for MLFewShotSoundClassifier.__Defaults;
}

uint64_t OUTLINED_FUNCTION_1_51()
{
  return type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
}

uint64_t Array<A>.floatTensor(shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x270FA5388](v5 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x270FA5388](v16 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_0();
  uint64_t v22 = v21;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_3_0();
  uint64_t v26 = v25 - v24;
  outlined init with copy of TensorShape?(a1, v19);
  if (__swift_getEnumTagSinglePayload(v19, 1, v20) == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_2272CB370;
    *(void *)(v27 + 32) = *(void *)(a2 + 16);
    MEMORY[0x22A672540](v27);
    outlined destroy of TensorShape?(v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v26, v19, v20);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v15, *MEMORY[0x263F58330], v9);
  uint64_t v28 = type metadata accessor for ComputeDevice();
  uint64_t v29 = __swift_storeEnumTagSinglePayload(v8, 1, 1, v28);
  MEMORY[0x270FA5388](v29);
  *(&v31 - 2) = a2;
  return Tensor.init(unsafeUninitializedShape:scalarType:computeDevice:initializingWith:)();
}

uint64_t outlined init with copy of TensorShape?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void closure #1 in Array<A>.floatTensor(shape:)(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 16);
  if (v3 >> 60) {
    __break(1u);
  }
  else {
    closure #1 in closure #1 in Array<A>.floatTensor(shape:)((const double *)(a3 + 32), a3 + 32 + 8 * v3, a1, a2);
  }
}

void closure #1 in closure #1 in Array<A>.floatTensor(shape:)(const double *a1, uint64_t a2, float *a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = (a4 - (uint64_t)a3) / 4;
    if (a1) {
      goto LABEL_3;
    }
LABEL_10:
    if ((v4 & 0x8000000000000000) == 0) {
      __break(1u);
    }
    goto LABEL_12;
  }
  uint64_t v4 = 0;
  if (!a1) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= (a2 - (uint64_t)a1) / 8) {
    vDSP_Length v5 = (a2 - (uint64_t)a1) / 8;
  }
  else {
    vDSP_Length v5 = v4;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3)
  {
    vDSP_vdpsp(a1, 1, a3, 1, v5);
    return;
  }
LABEL_13:
  __break(1u);
}

void partial apply for closure #1 in Array<A>.floatTensor(shape:)(float *a1, uint64_t a2)
{
  closure #1 in Array<A>.floatTensor(shape:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t static BundleUtilities.getMLModelURL(at:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  id v13 = outlined bridged method (mbgbnn) of @objc NSBundle.url(forResource:withExtension:)(a1, (uint64_t)a2, 0x6C65646F6D6C6DLL, 0xE700000000000000, (void *)static BundleUtilities.bundle);
  if (v13)
  {
    uint64_t v14 = v13;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v15(v12, v9, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v6) != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(a3, v12, v6);
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v6);
  }
  outlined destroy of URL?((uint64_t)v12);
  unint64_t v21 = 0xD000000000000015;
  unint64_t v22 = 0x80000002272DA850;
  v17._countAndFlagsBits = a1;
  v17._object = a2;
  String.append(_:)(v17);
  unint64_t v18 = v21;
  unint64_t v19 = v22;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(void *)uint64_t v20 = v18;
  *(void *)(v20 + 8) = v19;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(unsigned char *)(v20 + 48) = 0;
  return swift_willThrow();
}

uint64_t type metadata accessor for BundleUtilities.BundleWitness()
{
  return self;
}

id one-time initialization function for bundle()
{
  type metadata accessor for BundleUtilities.BundleWitness();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static BundleUtilities.bundle = (uint64_t)result;
  return result;
}

id outlined bridged method (mbgbnn) of @objc NSBundle.url(forResource:withExtension:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = (void *)MEMORY[0x22A674AE0]();
  uint64_t v9 = (void *)MEMORY[0x22A674AE0](a3, a4);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a5, sel_URLForResource_withExtension_, v8, v9);

  return v10;
}

Swift::Void __swiftcall MLProgram.addClassifierSpecification(classLabels:probabilityTensorName:outputProbabilityName:outputLabelName:)(Swift::OpaquePointer classLabels, Swift::String probabilityTensorName, Swift::String outputProbabilityName, Swift::String outputLabelName)
{
  Swift::String v181 = outputLabelName;
  Swift::String v176 = outputProbabilityName;
  Swift::String v188 = probabilityTensorName;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLProgram.Block?);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v7);
  uint64_t v8 = type metadata accessor for MLProgram.Argument.Binding();
  OUTLINED_FUNCTION_0();
  uint64_t v171 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v11);
  uint64_t v182 = type metadata accessor for MLProgram.Operation();
  OUTLINED_FUNCTION_0();
  uint64_t v178 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v14);
  uint64_t v193 = type metadata accessor for MLProgram.Value.Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v191 = v15;
  MEMORY[0x270FA5388](v16);
  unint64_t v18 = (void *)((char *)v161 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v185 = type metadata accessor for MLProgram.ShapeDimension();
  OUTLINED_FUNCTION_0();
  uint64_t v184 = v19;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v21);
  uint64_t v201 = type metadata accessor for MLProgram.DataType();
  OUTLINED_FUNCTION_0();
  uint64_t v204 = v22;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_33_0();
  uint64_t v200 = v24;
  uint64_t v186 = type metadata accessor for MLProgram.ValueType();
  OUTLINED_FUNCTION_0();
  uint64_t v189 = v25;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_17_3((uint64_t)v161 - v30);
  type metadata accessor for MLProgram.Value();
  OUTLINED_FUNCTION_0();
  uint64_t v202 = v31;
  uint64_t v203 = v32;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_49();
  v194 = v33;
  MEMORY[0x270FA5388](v34);
  v199 = (char *)v161 - v35;
  uint64_t v180 = type metadata accessor for MLProgram.Block();
  OUTLINED_FUNCTION_0();
  uint64_t v179 = v36;
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_49();
  v198 = v38;
  MEMORY[0x270FA5388](v39);
  v187 = (char *)v161 - v40;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: MLProgram.Block)?);
  uint64_t v42 = MEMORY[0x270FA5388](v41 - 8);
  uint64_t v44 = (void *)((char *)v161 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v42);
  uint64_t v46 = (void *)((char *)v161 - v45);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLProgram.Function?);
  MEMORY[0x270FA5388](v47 - 8);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v48);
  uint64_t v50 = (char *)v161 - v49;
  uint64_t v51 = type metadata accessor for MLProgram.Function();
  OUTLINED_FUNCTION_0();
  uint64_t v53 = v52;
  MEMORY[0x270FA5388](v54);
  uint64_t v56 = (char *)v161 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = v4;
  MLProgram.mainFunction.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, v51) != 1)
  {
    uint64_t v165 = v53;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    uint64_t v166 = v51;
    v57(v56, v50, v51);
    uint64_t v58 = *(void *)(MLProgram.Function.blockSpecializations.getter() + 16);
    swift_bridgeObjectRelease();
    if (v58 == 1)
    {
      *(Swift::OpaquePointer *)&long long v190 = classLabels;
      uint64_t v172 = v8;
      uint64_t v59 = MLProgram.Function.blockSpecializations.getter();
      specialized Collection.first.getter(v59, v46);
      swift_bridgeObjectRelease();
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: MLProgram.Block));
      uint64_t v61 = v56;
      if (__swift_getEnumTagSinglePayload((uint64_t)v46, 1, v60) == 1)
      {
        outlined destroy of UTType?((uint64_t)v46, &demangling cache variable for type metadata for (key: String, value: MLProgram.Block)?);
      }
      else
      {
        uint64_t v63 = *v46;
        unint64_t v62 = v46[1];
        char v64 = (char *)v46 + *(int *)(v60 + 48);
        uint64_t v65 = v179;
        uint64_t v66 = v179 + 8;
        uint64_t v67 = *(void (**)(char *, uint64_t))(v179 + 8);
        uint64_t v68 = v180;
        v67(v64, v180);
        v167 = v61;
        uint64_t v69 = MLProgram.Function.blockSpecializations.getter();
        specialized Collection.first.getter(v69, v44);
        swift_bridgeObjectRelease();
        if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, v60) == 1)
        {
          outlined destroy of UTType?((uint64_t)v44, &demangling cache variable for type metadata for (key: String, value: MLProgram.Block)?);
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v70 = (char *)v44 + *(int *)(v60 + 48);
          uint64_t v71 = *(void (**)(uint64_t, char *, uint64_t))(v65 + 32);
          unint64_t v72 = v198;
          v71((uint64_t)v198, v70, v68);
          uint64_t v73 = v187;
          v71((uint64_t)v187, v72, v68);
          uint64_t v205 = v63;
          unint64_t v206 = v62;
          uint64_t v207 = 0x4C4D65726F43;
          unint64_t v208 = 0xE600000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          if (BidirectionalCollection<>.starts<A>(with:)())
          {
            v161[0] = v63;
            v161[1] = v62;
            v162 = v67;
            uint64_t v163 = v66;
            uint64_t v74 = v204;
            uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v204 + 104);
            uint64_t v77 = v200;
            uint64_t v76 = v201;
            unsigned int v195 = *MEMORY[0x263F53378];
            v197 = v75;
            v198 = (char *)(v204 + 104);
            ((void (*)(uint64_t))v75)(v200);
            uint64_t v78 = MEMORY[0x263F8EE78];
            static MLProgram.ValueType.tensor(dataType:shape:)();
            uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
            uint64_t v204 = v74 + 8;
            v196 = v79;
            v79(v77, v76);
            uint64_t v80 = v190;
            uint64_t v81 = *(void *)(v190 + 16);
            uint64_t *v183 = v81;
            (*(void (**)(void))(v184 + 104))();
            if (v81)
            {
              uint64_t v205 = v78;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81, 0);
              LODWORD(v192) = *MEMORY[0x263F53340];
              uint64_t v82 = (void (**)(uint64_t *, void, uint64_t))(v191 + 104);
              uint64_t v83 = (void (**)(uint64_t *, uint64_t))(v191 + 8);
              uint64_t v191 = v203 + 32;
              uint64_t v84 = (uint64_t *)(v80 + 40);
              long long v190 = xmmword_2272CB370;
              uint64_t v85 = v200;
              do
              {
                uint64_t v87 = *(v84 - 1);
                uint64_t v86 = *v84;
                uint64_t v88 = v201;
                v197(v85, v195, v201);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                uint64_t v89 = swift_allocObject();
                *(_OWORD *)(v89 + 16) = v190;
                *(void *)(v89 + 32) = v87;
                *(void *)(v89 + 40) = v86;
                uint64_t *v18 = v89;
                uint64_t v90 = v193;
                (*v82)(v18, v192, v193);
                swift_bridgeObjectRetain_n();
                static MLProgram.Value.immediateTensor(dataType:shape:contents:)();
                (*v83)(v18, v90);
                v196(v85, v88);
                swift_bridgeObjectRelease();
                uint64_t v91 = v205;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v91 + 16) + 1, 1);
                  uint64_t v91 = v205;
                }
                uint64_t v92 = v203;
                unint64_t v94 = *(void *)(v91 + 16);
                unint64_t v93 = *(void *)(v91 + 24);
                uint64_t v95 = v194;
                if (v94 >= v93 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1, v94 + 1, 1);
                  uint64_t v92 = v203;
                  uint64_t v91 = v205;
                }
                v84 += 2;
                *(void *)(v91 + 16) = v94 + 1;
                (*(void (**)(unint64_t, void))(v92 + 32))(v91+ ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(void *)(v92 + 72) * v94, v95);
                uint64_t v205 = v91;
                --v81;
                uint64_t v96 = v199;
              }
              while (v81);
            }
            else
            {
              uint64_t v91 = v78;
              uint64_t v96 = v199;
            }
            uint64_t v205 = v91;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgram.Value]);
            lazy protocol witness table accessor for type [MLProgram.Value] and conformance [A]();
            uint64_t v97 = v183;
            static MLProgram.Value.immediateList<A>(type:length:contents:)();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_25_0();
            v98();
            uint64_t v99 = *(void (**)(void, void))(v189 + 8);
            v189 += 8;
            v194 = v99;
            OUTLINED_FUNCTION_25_0();
            v100();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLProgram.Argument)>);
            uint64_t v101 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MLProgram.Argument))
                         - 8);
            uint64_t v193 = *(void *)(*(void *)v101 + 72);
            OUTLINED_FUNCTION_6_41();
            uint64_t v102 = swift_allocObject();
            long long v192 = xmmword_2272CB4D0;
            *(_OWORD *)(v102 + 16) = xmmword_2272CB4D0;
            uint64_t v103 = (char *)v97 + v102;
            uint64_t v104 = (uint64_t)v97 + v102 + v101[14];
            strcpy(v103, "probabilities");
            *((_WORD *)v103 + 7) = -4864;
            uint64_t v105 = v170;
            object = v188._object;
            uint64_t *v170 = v188._countAndFlagsBits;
            v105[1] = (uint64_t)object;
            uint64_t v107 = *(void (**)(uint64_t *, void, uint64_t))(v171 + 104);
            uint64_t v108 = v172;
            v107(v105, *MEMORY[0x263F53350], v172);
            swift_bridgeObjectRetain();
            MLProgram.Argument.init(binding:)();
            uint64_t v109 = &v103[v193];
            *(void *)uint64_t v109 = 0x73657373616C63;
            *((void *)v109 + 1) = 0xE700000000000000;
            (*(void (**)(uint64_t *, char *, uint64_t))(v203 + 16))(v105, v96, v202);
            v107(v105, *MEMORY[0x263F53358], v108);
            MLProgram.Argument.init(binding:)();
            type metadata accessor for MLProgram.Argument();
            uint64_t v193 = Dictionary.init(dictionaryLiteral:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLProgram.NamedValueType>);
            *(void *)&long long v190 = *(void *)(*(void *)(type metadata accessor for MLProgram.NamedValueType() - 8) + 72);
            OUTLINED_FUNCTION_6_41();
            uint64_t v110 = swift_allocObject();
            uint64_t v191 = v110;
            *(_OWORD *)(v110 + 16) = v192;
            uint64_t v111 = v110 + v104;
            uint64_t v112 = v200;
            uint64_t v113 = v201;
            uint64_t v114 = v195;
            uint64_t v115 = v197;
            v197(v200, v195, v201);
            swift_bridgeObjectRetain();
            uint64_t v50 = v174;
            static MLProgram.ValueType.tensor(dataType:shape:)();
            id v116 = v196;
            v196(v112, v113);
            MLProgram.NamedValueType.init(name:type:)();
            *(void *)&long long v192 = v111 + v190;
            v115(v112, v114, v113);
            char v117 = v176._object;
            swift_bridgeObjectRetain();
            uint64_t v118 = v173;
            static MLProgram.ValueType.tensor(dataType:shape:)();
            v116(v112, v113);
            v115(v112, *MEMORY[0x263F53388], v113);
            uint64_t v119 = v175;
            static MLProgram.ValueType.tensor(dataType:shape:)();
            uint64_t v120 = v112;
            uint64_t v121 = v117;
            v116(v120, v113);
            static MLProgram.ValueType.dictionary(keyType:valueType:)();
            uint64_t v122 = v186;
            uint64_t v123 = v194;
            v194(v119, v186);
            v123(v118, v122);
            uint64_t countAndFlagsBits = v176._countAndFlagsBits;
            MLProgram.NamedValueType.init(name:type:)();
            uint64_t v125 = v177;
            MLProgram.Operation.init(name:inputs:outputs:)();
            uint64_t v126 = v187;
            uint64_t v127 = (void (*)(uint64_t *, void))MLProgram.Block.operations.modify();
            uint64_t v129 = v128;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v130 = *(void *)(*v129 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v130);
            uint64_t v131 = *v129;
            *(void *)(v131 + 16) = v130 + 1;
            uint64_t v132 = v178;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v178 + 16))(v131+ ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80))+ *(void *)(v178 + 72) * v130, v125, v182);
            v127(&v205, 0);
            uint64_t v133 = v188._object;
            swift_bridgeObjectRetain();
            unint64_t v134 = (void (*)(uint64_t *, void))MLProgram.Block.outputs.modify();
            uint64_t v136 = v135;
            uint64_t v137 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v135, v188._countAndFlagsBits, (uint64_t)v133);
            uint64_t v138 = *(void *)(*v136 + 16);
            if (v138 >= v137)
            {
              specialized Array.replaceSubrange<A>(_:with:)(v137, v138);
              v134(&v205, 0);
              uint64_t v139 = v181._object;
              swift_bridgeObjectRetain();
              unint64_t v140 = (void (*)(uint64_t))MLProgram.Block.outputs.modify();
              uint64_t v142 = v141;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)v142 + 16));
              OUTLINED_FUNCTION_7_45();
              *(void *)(v143 + 32) = v181._countAndFlagsBits;
              *(void *)(v143 + 40) = v139;
              uint64_t v144 = OUTLINED_FUNCTION_5_49();
              v140(v144);
              swift_bridgeObjectRetain();
              uint64_t v145 = (void (*)(uint64_t))MLProgram.Block.outputs.modify();
              uint64_t v147 = v146;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)v147 + 16));
              OUTLINED_FUNCTION_7_45();
              *(void *)(v148 + 32) = countAndFlagsBits;
              *(void *)(v148 + 40) = v121;
              uint64_t v149 = OUTLINED_FUNCTION_5_49();
              v145(v149);
              uint64_t v150 = v168;
              uint64_t v151 = v180;
              (*(void (**)(uint64_t, char *, uint64_t))(v179 + 16))(v168, v126, v180);
              __swift_storeEnumTagSinglePayload(v150, 0, 1, v151);
              uint64_t v152 = v167;
              uint64_t v153 = (void (*)(uint64_t))MLProgram.Function.blockSpecializations.modify();
              specialized Dictionary.subscript.setter();
              uint64_t v154 = OUTLINED_FUNCTION_5_49();
              v153(v154);
              uint64_t v155 = v165;
              uint64_t v156 = v164;
              uint64_t v157 = v166;
              (*(void (**)(uint64_t, char *, uint64_t))(v165 + 16))(v164, v152, v166);
              __swift_storeEnumTagSinglePayload(v156, 0, 1, v157);
              MLProgram.mainFunction.setter();
              (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v125, v182);
              OUTLINED_FUNCTION_25_0();
              v158();
              v162(v126, v151);
              (*(void (**)(char *, uint64_t))(v155 + 8))(v152, v157);
              return;
            }
            __break(1u);
            goto LABEL_18;
          }
          v67(v73, v180);
        }
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v205 = 0;
    unint64_t v206 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v159._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    v159._object = (void *)0x80000002272DA8D0;
    String.append(_:)(v159);
    MLProgram.Function.blockSpecializations.getter();
    v160._uint64_t countAndFlagsBits = Dictionary.Keys.description.getter();
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_18:
  outlined destroy of UTType?((uint64_t)v50, &demangling cache variable for type metadata for MLProgram.Function?);
LABEL_24:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type [MLProgram.Value] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [MLProgram.Value] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MLProgram.Value] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MLProgram.Value]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [MLProgram.Value] and conformance [A]);
  }
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 16);
  if (!v5)
  {
    unint64_t v8 = 0;
    goto LABEL_28;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t result = *(void *)(v4 + v7 + 32);
    if (result == a2 && *(void *)(v4 + v7 + 40) == a3) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v8;
    v7 += 16;
    if (v5 == v8)
    {
      unint64_t v8 = *(void *)(v4 + 16);
      goto LABEL_28;
    }
  }
  unint64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1)) {
    goto LABEL_33;
  }
  unint64_t v12 = *(void *)(v4 + 16);
  if (v11 == v12)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return v8;
  }
  while (v11 < v12)
  {
    uint64_t v13 = v4 + v7;
    uint64_t result = *(void *)(v4 + v7 + 48);
    if (result != a2 || *(void *)(v4 + v7 + 56) != a3)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        if (v11 != v8)
        {
          if (v8 >= v12) {
            goto LABEL_31;
          }
          uint64_t v15 = (uint64_t *)(v4 + 32 + 16 * v8);
          uint64_t v16 = v15[1];
          uint64_t v23 = *v15;
          uint64_t v17 = *(void *)(v13 + 48);
          uint64_t v18 = *(void *)(v13 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew()();
            uint64_t v4 = v22;
          }
          uint64_t v19 = v4 + 16 * v8;
          *(void *)(v19 + 32) = v17;
          *(void *)(v19 + 40) = v18;
          uint64_t result = swift_bridgeObjectRelease();
          if (v11 >= *(void *)(v4 + 16)) {
            goto LABEL_32;
          }
          uint64_t v20 = v4 + v7;
          *(void *)(v20 + 48) = v23;
          *(void *)(v20 + 56) = v16;
          uint64_t result = swift_bridgeObjectRelease();
          *a1 = v4;
        }
        if (__OFADD__(v8++, 1)) {
          goto LABEL_30;
        }
      }
    }
    ++v11;
    unint64_t v12 = *(void *)(v4 + 16);
    v7 += 16;
    if (v11 == v12) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_5_49()
{
  return v0 - 136;
}

void OUTLINED_FUNCTION_7_45()
{
  *(void *)(*(void *)v0 + 16) = v1 + 1;
}

void **assignWithCopy for MLBoostedTreeRegressor.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = *a2;
      char v8 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((unsigned char *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLBoostedTreeRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLBoostedTreeRegressor.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *assignWithTake for MLBoostedTreeRegressor.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLBoostedTreeRegressor.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.ValidationData.table.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = (uint64_t *)(v16 - v15);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v2, v16 - v15);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v19 = *v17;
      char v20 = *((unsigned char *)v17 + 8);
      goto LABEL_7;
    case 2:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v4);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v10, v13, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(1, (uint64_t)&v27);
      uint64_t v24 = OUTLINED_FUNCTION_4_1();
      uint64_t result = v25(v24);
      uint64_t v19 = v27;
      char v20 = v28;
LABEL_7:
      *(void *)a1 = v19;
      *(unsigned char *)(a1 + 8) = v20;
      break;
    case 3:
      uint64_t v21 = MEMORY[0x22A6764B0](0);
      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x227224824);
      }
      uint64_t v22 = v21;
      type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t result = (uint64_t)_DataTable.init(impl:)(v23);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a3;
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v66 = a1;
  uint64_t v61 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  uint64_t v57 = (char *)(v13 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v56 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v56 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  MEMORY[0x270FA5388](v21 - 8);
  OUTLINED_FUNCTION_33();
  uint64_t v24 = v22 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_3_0();
  uint64_t v31 = (uint64_t *)(v30 - v29);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v4, v30 - v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v47 = *v31;
      char v48 = *((unsigned char *)v31 + 8);
      uint64_t v49 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      *(void *)&long long v63 = v47;
      BYTE8(v63) = v48;
      uint64_t v50 = v60;
      DataFrame.init(_:)((uint64_t)&v63, v60);
      uint64_t v43 = v50;
      uint64_t v44 = 0;
      uint64_t v46 = v49;
      goto LABEL_10;
    case 2u:
      uint64_t v38 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 32);
      uint64_t v39 = v31;
      uint64_t v40 = v61;
      v38((uint64_t)v10, v39, v61);
      if (DataFrameProtocol.isEmpty.getter())
      {
        (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v40);
        uint64_t v41 = OUTLINED_FUNCTION_1_3();
        v42(v41);
        uint64_t v43 = v60;
        uint64_t v44 = 1;
      }
      else
      {
        uint64_t v51 = OUTLINED_FUNCTION_1_3();
        v52(v51);
        uint64_t v53 = v60;
        v38(v60, v10, v40);
        uint64_t v43 = v53;
        uint64_t v44 = 0;
      }
      uint64_t v46 = v40;
      goto LABEL_10;
    case 3u:
      uint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      uint64_t v43 = v60;
      uint64_t v44 = 1;
      uint64_t v46 = v45;
LABEL_10:
      uint64_t result = __swift_storeEnumTagSinglePayload(v43, v44, 1, v46);
      break;
    default:
      char v32 = *((unsigned char *)v31 + 16);
      char v33 = *((unsigned char *)v31 + 17);
      long long v63 = *(_OWORD *)v31;
      char v64 = v32;
      char v65 = v33;
      DataFrame.randomSplit(strategy:)((uint64_t)v27, (uint64_t)v20, (uint64_t)&v63);
      uint64_t v35 = v58;
      uint64_t v34 = v59;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v36(v18, v20, v59);
      DataFrame.init(_:)();
      outlined init with copy of DataFrame.Slice?((uint64_t)v27, v24);
      if (__swift_getEnumTagSinglePayload(v24, 1, v34) == 1)
      {
        __swift_storeEnumTagSinglePayload(v60, 1, 1, v61);
        uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v18, v24, v34);
        v36(v57, v18, v34);
        uint64_t v55 = v60;
        DataFrame.init(_:)();
        uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
        v37(v18, v34);
        __swift_storeEnumTagSinglePayload(v55, 0, 1, v61);
      }
      v37(v20, v34);
      uint64_t result = outlined destroy of DataFrame.Slice?((uint64_t)v27);
      break;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLTextClassifier.ModelParameters.ValidationData(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = &v12[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = *a2;
        char v8 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v8);
        *(void *)a1 = v7;
        a1[8] = v8;
        uint64_t v9 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v9;
        uint64_t v10 = a2[4];
        uint64_t v11 = a2[5];
        *((void *)a1 + 4) = v10;
        *((void *)a1 + 5) = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 2u:
        uint64_t v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
        uint64_t v15 = *(int *)(v14 + 48);
        uint64_t v16 = &a1[v15];
        uint64_t v17 = (uint64_t *)((char *)a2 + v15);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        *(void *)uint64_t v16 = v19;
        *((void *)v16 + 1) = v18;
        uint64_t v20 = *(int *)(v14 + 64);
        uint64_t v21 = &a1[v20];
        uint64_t v22 = (char **)((char *)a2 + v20);
        uint64_t v23 = v22[1];
        *(void *)uint64_t v21 = *v22;
        *((void *)v21 + 1) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 3u:
        uint64_t v24 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
        goto LABEL_9;
      case 4u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 2:
      uint64_t v3 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 3:
      uint64_t v4 = type metadata accessor for URL();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      return v5(a1, v4);
    case 4:
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

char *initializeWithCopy for MLTextClassifier.ModelParameters.ValidationData(char *a1, uint64_t a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      id v6 = *(id *)a2;
      char v7 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v7);
      *(void *)a1 = v6;
      a1[8] = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      *((void *)a1 + 2) = *(void *)(a2 + 16);
      *((void *)a1 + 3) = v8;
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(void *)(a2 + 40);
      *((void *)a1 + 4) = v9;
      *((void *)a1 + 5) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2u:
      uint64_t v11 = type metadata accessor for DataFrame();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      uint64_t v13 = *(int *)(v12 + 48);
      uint64_t v14 = &a1[v13];
      uint64_t v15 = (uint64_t *)(a2 + v13);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      *(void *)uint64_t v14 = v17;
      *((void *)v14 + 1) = v16;
      uint64_t v18 = *(int *)(v12 + 64);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = (void *)(a2 + v18);
      uint64_t v21 = v20[1];
      *(void *)uint64_t v19 = *v20;
      *((void *)v19 + 1) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      uint64_t v22 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
      goto LABEL_7;
    case 4u:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for MLTextClassifier.ModelParameters.ValidationData(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1 != (char *)a2)
  {
    outlined destroy of MLTextClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        id v6 = *(id *)a2;
        char v7 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v7);
        *(void *)a1 = v6;
        a1[8] = v7;
        *((void *)a1 + 2) = *(void *)(a2 + 16);
        *((void *)a1 + 3) = *(void *)(a2 + 24);
        *((void *)a1 + 4) = *(void *)(a2 + 32);
        *((void *)a1 + 5) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
        uint64_t v8 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = (void *)(a2 + v10);
        *(void *)uint64_t v11 = *v12;
        *((void *)v11 + 1) = v12[1];
        uint64_t v13 = *(int *)(v9 + 64);
        uint64_t v14 = &a1[v13];
        uint64_t v15 = (void *)(a2 + v13);
        *(void *)uint64_t v14 = *v15;
        *((void *)v14 + 1) = v15[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        uint64_t v16 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        goto LABEL_8;
      case 4u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for MLTextClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLTextClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *initializeWithTake for MLTextClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    *(_OWORD *)&a1[*(int *)(v8 + 64)] = *(_OWORD *)&a2[*(int *)(v8 + 64)];
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLTextClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLTextClassifier.ModelParameters.ValidationData((uint64_t)a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      *(_OWORD *)&a1[*(int *)(v8 + 64)] = *(_OWORD *)&a2[*(int *)(v8 + 64)];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for MLTextClassifier.ModelParameters.ValidationData()
{
  uint64_t v4 = &unk_2272D2518;
  int v5 = &unk_2272D2530;
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    id v6 = &v3;
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t v7 = *(void *)(result - 8) + 64;
      uint64_t v8 = MEMORY[0x263F8CF50] + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t MLTextClassifier.ModelParameters.ValidationData.createValidationData(trainingData:textColumn:labelColumn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  v91._uint64_t countAndFlagsBits = a4;
  v91._object = a5;
  v90._uint64_t countAndFlagsBits = a2;
  v90._object = a3;
  uint64_t v88 = a1;
  uint64_t v93 = a6;
  uint64_t v7 = type metadata accessor for MLTextClassifier.DataSource();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v86 = (uint64_t)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v92 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33();
  uint64_t v87 = v11 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v86 - v14;
  uint64_t v16 = type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  uint64_t v89 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33();
  uint64_t v21 = v19 - v20;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v86 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v86 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  MEMORY[0x270FA5388](v28 - 8);
  OUTLINED_FUNCTION_33();
  uint64_t v31 = v29 - v30;
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v86 - v33;
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_27_7();
  outlined init with copy of MLTextClassifier.ModelParameters.ValidationData((uint64_t)v99, v6);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v41 = *(unsigned char *)(v6 + 8);
      uint64_t v43 = *(void *)(v6 + 16);
      uint64_t v42 = *(void **)(v6 + 24);
      uint64_t v45 = *(void *)(v6 + 32);
      uint64_t v44 = *(void **)(v6 + 40);
      *(void *)&long long v96 = *(void *)v6;
      uint64_t v40 = (void *)v96;
      BYTE8(v96) = v41;
      outlined copy of Result<_DataTable, Error>((id)v96, v41);
      DataFrame.init(_:)((uint64_t)&v96, (uint64_t)v15);
      uint64_t v46 = v95;
      static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)();
      if (v46)
      {
        uint64_t v47 = OUTLINED_FUNCTION_3_59();
        v48(v47);
        outlined consume of Result<_DataTable, Error>(v40, v41);
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      v75._uint64_t countAndFlagsBits = v43;
      v75._object = v42;
      DataFrame.renameColumn(_:to:)(v75, v90);
      swift_bridgeObjectRelease();
      v76._uint64_t countAndFlagsBits = v45;
      v76._object = v44;
      DataFrame.renameColumn(_:to:)(v76, v91);
      outlined consume of Result<_DataTable, Error>(v40, v41);
      swift_bridgeObjectRelease();
      uint64_t v77 = v93;
      uint64_t v78 = v94;
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v93, v15, v94);
      uint64_t v79 = v77;
      uint64_t v80 = 0;
      uint64_t v81 = 1;
      uint64_t v82 = v78;
      goto LABEL_20;
    case 2u:
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      uint64_t v50 = (uint64_t *)(v6 + *(int *)(v49 + 48));
      uint64_t v52 = *v50;
      uint64_t v51 = (void *)v50[1];
      uint64_t v53 = (uint64_t *)(v6 + *(int *)(v49 + 64));
      uint64_t v55 = *v53;
      uint64_t v54 = (void *)v53[1];
      uint64_t v56 = v92;
      uint64_t v57 = v87;
      uint64_t v58 = v94;
      uint64_t v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32);
      v99(v87, v6, v94);
      uint64_t v59 = v95;
      static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)();
      if (!v59)
      {
        v83._uint64_t countAndFlagsBits = v52;
        v83._object = v51;
        DataFrame.renameColumn(_:to:)(v83, v90);
        swift_bridgeObjectRelease();
        v84._uint64_t countAndFlagsBits = v55;
        v84._object = v54;
        DataFrame.renameColumn(_:to:)(v84, v91);
        swift_bridgeObjectRelease();
        uint64_t v85 = v93;
        v99(v93, v57, v58);
        uint64_t v79 = v85;
        uint64_t v80 = 0;
        uint64_t v81 = 1;
        uint64_t v82 = v58;
        goto LABEL_20;
      }
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
      swift_bridgeObjectRelease();
LABEL_13:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v60 = v86;
      outlined init with take of MLTextClassifier.DataSource(v6, v86);
      uint64_t v61 = v95;
      uint64_t v62 = static _TextUtilities.getTextLabeledDictionary(from:)(v60);
      if (v61)
      {
        uint64_t result = outlined destroy of MLTextClassifier.ModelParameters.ValidationData(v60, (void (*)(void))type metadata accessor for MLTextClassifier.DataSource);
      }
      else
      {
        specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(v62, v90._countAndFlagsBits, (uint64_t)v90._object, v91._countAndFlagsBits, (uint64_t)v91._object);
        outlined destroy of MLTextClassifier.ModelParameters.ValidationData(v60, (void (*)(void))type metadata accessor for MLTextClassifier.DataSource);
        swift_bridgeObjectRelease();
        uint64_t v79 = OUTLINED_FUNCTION_7_46();
LABEL_20:
        uint64_t result = __swift_storeEnumTagSinglePayload(v79, v80, v81, v82);
      }
      break;
    case 4u:
      uint64_t v64 = v95;
      specialized generateTextDataFrame<A>(_:textColumn:labelColumn:using:)(*(void *)v6, v90._countAndFlagsBits, (uint64_t)v90._object, v91._countAndFlagsBits, (uint64_t)v91._object);
      if (!v64)
      {
        uint64_t v65 = OUTLINED_FUNCTION_7_46();
        __swift_storeEnumTagSinglePayload(v65, v66, v67, v68);
      }
      goto LABEL_13;
    case 5u:
      goto LABEL_4;
    default:
      char v36 = *(unsigned char *)(v6 + 16);
      char v37 = *(unsigned char *)(v6 + 17);
      long long v96 = *(_OWORD *)v6;
      char v97 = v36;
      char v98 = v37;
      DataFrame.randomSplit(strategy:)((uint64_t)v34, (uint64_t)v27, (uint64_t)&v96);
      outlined init with copy of DataFrame.Slice?((uint64_t)v34, v31);
      if (__swift_getEnumTagSinglePayload(v31, 1, v16) == 1)
      {
        (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v16);
        outlined destroy of DataFrame.Slice?((uint64_t)v34);
        outlined destroy of DataFrame.Slice?(v31);
LABEL_4:
        uint64_t v38 = v93;
        uint64_t v39 = 1;
      }
      else
      {
        uint64_t v69 = OUTLINED_FUNCTION_3_59();
        v70(v69);
        uint64_t v71 = v89;
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v25, v31, v16);
        unint64_t v72 = *(void (**)(uint64_t, char *, uint64_t))(v71 + 16);
        v72(v21, v27, v16);
        DataFrame.init(_:)();
        v72(v21, v25, v16);
        uint64_t v73 = v93;
        DataFrame.init(_:)();
        uint64_t v74 = *(void (**)(char *, uint64_t))(v71 + 8);
        v74(v25, v16);
        v74(v27, v16);
        outlined destroy of DataFrame.Slice?((uint64_t)v34);
        uint64_t v38 = v73;
        uint64_t v39 = 0;
      }
      return __swift_storeEnumTagSinglePayload(v38, v39, 1, v94);
  }
  return result;
}

uint64_t MLTextClassifier.ModelParameters.ValidationData.table.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for MLTextClassifier.DataSource();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  uint64_t v14 = v12 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = &v38[-v16];
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_27_7();
  outlined init with copy of MLTextClassifier.ModelParameters.ValidationData(v3, v2);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v20 = *(void *)v2;
      char v21 = *(unsigned char *)(v2 + 8);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v20;
      *(unsigned char *)(a1 + 8) = v21;
      return result;
    case 2:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 32))(v17, v2, v8);
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v10 + 16))(v14, v17, v8);
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v39);
      uint64_t v35 = OUTLINED_FUNCTION_4_54();
      uint64_t result = v36(v35);
      goto LABEL_10;
    case 3:
      outlined init with take of MLTextClassifier.DataSource(v2, (uint64_t)v7);
      static _TextUtilities.getTextLabeledDictionary(from:)((uint64_t)v7);
      OUTLINED_FUNCTION_2_59();
      specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v22, v23, v24, v25, 0xE500000000000000, v26);
      outlined destroy of MLTextClassifier.ModelParameters.ValidationData((uint64_t)v7, (void (*)(void))type metadata accessor for MLTextClassifier.DataSource);
      goto LABEL_9;
    case 4:
      OUTLINED_FUNCTION_2_59();
      specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v27, v28, v29, v30, 0xE500000000000000, v31);
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
LABEL_10:
      char v37 = v40;
      *(void *)a1 = v39;
      *(unsigned char *)(a1 + 8) = v37;
      break;
    case 5:
      uint64_t v32 = MEMORY[0x22A6764B0](0);
      if (!v32)
      {
        __break(1u);
        JUMPOUT(0x22722621CLL);
      }
      uint64_t v33 = v32;
      type metadata accessor for CMLTable();
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = v33;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t result = (uint64_t)_DataTable.init(impl:)(v34);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLTextClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLTextClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLTextClassifier.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_59()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_54()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_46()
{
  return v0;
}

void Tensor.init(_:device:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for ScalarType();
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for TensorShape();
  MEMORY[0x270FA5388](v12 - 8);
  OUTLINED_FUNCTION_3_0();
  id v13 = objc_msgSend(a1, sel_dataType);
  uint64_t v14 = (uint64_t)v13;
  if (v13 == (id)65552 || v13 == (id)131104 || v13 == (id)65600 || v13 == (id)65568)
  {
    id v15 = objc_msgSend(a1, sel_shape);
    type metadata accessor for NSNumber();
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v16);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    MEMORY[0x22A672540](v18);
    MLMultiArrayDataType.dataType.getter(v14, v11);
    uint64_t v19 = outlined init with copy of ComputeDevice?(a2, v7);
    MEMORY[0x270FA5388](v19);
    Tensor.init(unsafeUninitializedShape:scalarType:computeDevice:initializingWith:)();
    outlined destroy of ComputeDevice?(a2);
  }
  else
  {
    OUTLINED_FUNCTION_0_33();
    __break(1u);
  }
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t MLMultiArrayDataType.dataType.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 65552:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F58328];
      break;
    case 65568:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F58330];
      break;
    case 65600:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F58338];
      break;
    case 131104:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F582F8];
      break;
    default:
      uint64_t result = OUTLINED_FUNCTION_0_33();
      __break(1u);
      return result;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ScalarType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t outlined init with copy of ComputeDevice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in Tensor.init(_:device:)(int a1, int a2, id a3, uint64_t a4)
{
  id v5 = a3;
  objc_msgSend(v5, sel_dataPointer);
  uint64_t result = (uint64_t)objc_msgSend(v5, sel_count);
  if ((unsigned __int128)(result * (__int128)a4) >> 64 == (result * a4) >> 63) {
    return UnsafeMutableRawBufferPointer.copyMemory(from:)();
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Tensor.init(_:device:)(int a1, int a2)
{
  return closure #1 in Tensor.init(_:device:)(a1, a2, *(id *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t outlined destroy of ComputeDevice?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_33()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void *MLDataTable.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (void *)MEMORY[0x22A6764B0](0);
  if (result)
  {
    uint64_t v3 = result;
    type metadata accessor for CMLTable();
    uint64_t v4 = OUTLINED_FUNCTION_70();
    *(void *)(v4 + 16) = v3;
    type metadata accessor for _DataTable();
    uint64_t result = (void *)OUTLINED_FUNCTION_55_7();
    result[3] = 0;
    result[4] = 0;
    result[2] = v4;
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for _DataTable()
{
  return self;
}

uint64_t MLDataTable.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (v5[8])
  {
    swift_willThrow();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_39_7();
    OUTLINED_FUNCTION_67_5();
    OUTLINED_FUNCTION_66_2(v12, v13, v14, v15, v16, v17, v18, v19, v43, v44, v46, 0, 0xE000000000000000);
    v20._uint64_t countAndFlagsBits = 39;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    uint64_t v21 = v48;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v22 = OUTLINED_FUNCTION_85();
    uint64_t *v23 = v47;
    v23[1] = v21;
    OUTLINED_FUNCTION_20_34(v22, (uint64_t)v23);
    uint64_t v47 = v24;
    LOBYTE(v48) = v25;
  }
  else
  {
    uint64_t v11 = *(void *)(*(void *)v5 + 16);
    swift_retain();
    uint64_t v27 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:), v11, a1, a2, (void (*)(void))type metadata accessor for CMLColumn, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    swift_release();
    type metadata accessor for _UntypedColumn();
    uint64_t v28 = OUTLINED_FUNCTION_70();
    *(void *)(v28 + 16) = v27;
    uint64_t v45 = v28;
    LOBYTE(v46) = 0;
    swift_retain();
    MLUntypedColumn.column<A>(type:)(a3, a3, a4);
    swift_release();
    char v29 = v48;
    if (v48 != 255)
    {
      uint64_t result = swift_release();
      *(void *)a5 = v47;
      *(unsigned char *)(a5 + 8) = v29 & 1;
      return result;
    }
    _StringGuts.grow(_:)(49);
    int v30 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_66_2(v30, v31, v32, v33, v34, v35, v36, v37, v43, v45, v46, 0, 0xE000000000000000);
    OUTLINED_FUNCTION_39_7();
    v39._uint64_t countAndFlagsBits = v38 + 2;
    v39._object = (void *)0x80000002272D4150;
    String.append(_:)(v39);
    uint64_t v40 = v48;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v41 = OUTLINED_FUNCTION_85();
    *(void *)uint64_t v42 = v47;
    *(void *)(v42 + 8) = v40;
    *(_OWORD *)(v42 + 16) = 0u;
    *(_OWORD *)(v42 + 32) = 0u;
    *(unsigned char *)(v42 + 48) = 1;
    swift_release();
    uint64_t v47 = v41;
    LOBYTE(v48) = 1;
  }
  return MLDataColumn.init(from:)((uint64_t)&v47, a5);
}

uint64_t MLDataTable.init(namedColumns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(a1, (uint64_t)&v6);
  if (!v2)
  {
    char v5 = v7;
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

void MLDataTable.subscript.getter(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  char v7 = *(void **)v3;
  if (*(unsigned char *)(v3 + 8))
  {
    swift_willThrow();
  }
  else
  {
    swift_retain();
    uint64_t v11 = OUTLINED_FUNCTION_70_5((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:), v8, v9, v10, (void (*)(void))type metadata accessor for CMLColumn, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    if (!v7)
    {
      Swift::String v20 = v11;
      swift_release();
      type metadata accessor for _UntypedColumn();
      uint64_t v18 = OUTLINED_FUNCTION_70();
      char v19 = 0;
      *(void *)(v18 + 16) = v20;
      goto LABEL_7;
    }

    swift_release();
  }
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_39_7();
  OUTLINED_FUNCTION_67_5();
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  v14._uint64_t countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 34;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v16 = OUTLINED_FUNCTION_85();
  void *v17 = v21;
  v17[1] = v22;
  OUTLINED_FUNCTION_20_34(v16, (uint64_t)v17);
LABEL_7:
  *(void *)a3 = v18;
  *(unsigned char *)(a3 + 8) = v19;
}

#error "227226DD4: call analysis failed (funcsize=20)"

uint64_t MLDataTable.size.getter()
{
  uint64_t v1 = *(void **)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    uint64_t v12 = *(void **)v0;
    outlined copy of Result<_DataTable, Error>(v1, 1);
    id v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v3 = _getErrorEmbeddedNSError<A>(_:)();
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      outlined consume of Result<_DataTable, Error>(v1, 1);
    }
    else
    {
      uint64_t v4 = (void *)OUTLINED_FUNCTION_85();
      *uint64_t v9 = v12;
    }
    outlined consume of Result<_DataTable, Error>(v1, 1);
    outlined consume of Result<_RegressorMetrics, Error>(v4, v10, 1);
    return 0;
  }
  swift_retain();
  Swift::Int v5 = CMLTable.rows()();
  if (!v6)
  {
    Swift::Int v7 = v5;
    CMLTable.columns()();
    if (!v8)
    {
      OUTLINED_FUNCTION_21_13();
      return v7;
    }
  }
  OUTLINED_FUNCTION_0_27();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t MLDataTable.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  char v5 = *(unsigned char *)(a1 + 8);
  id v6 = *(id *)v2;
  char v7 = *(unsigned char *)(v2 + 8);
  if ((v7 & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v2, 0);
    _DataTable.columnNames.getter(&v17);
    OUTLINED_FUNCTION_40_14();
    uint64_t v10 = v17;
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_49_8(*(void **)v2);
  if (v8)
  {
    uint64_t v9 = v8;
    type metadata accessor for CMLSequence();
    uint64_t v10 = OUTLINED_FUNCTION_6_3();
    *(void *)(v10 + 16) = v9;
    *(unsigned char *)(v10 + 24) = 1;
    OUTLINED_FUNCTION_56_11();
LABEL_5:
    uint64_t v11 = OUTLINED_FUNCTION_6_3();
    *(void *)(v11 + 16) = v6;
    *(unsigned char *)(v11 + 24) = v7;
    uint64_t v12 = OUTLINED_FUNCTION_6_3();
    *(void *)(v12 + 16) = v4;
    *(unsigned char *)(v12 + 24) = v5;
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = partial apply for closure #2 in MLDataTable.subscript.getter;
    v13[3] = v12;
    v13[4] = v10;
    v13[5] = partial apply for closure #1 in MLDataTable.subscript.getter;
    void v13[6] = v11;
    outlined copy of Result<_DataTable, Error>(v6, v7);
    outlined copy of Result<_DataTable, Error>(v4, v5);
    swift_retain_n();
    swift_retain();
    swift_retain();
    uint64_t v14 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v10, (void (*)(Swift::String *__return_ptr, Swift::String *))partial apply for specialized closure #1 in LazyMapSequence<>.map<A>(_:), (uint64_t)v13);
    specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v14, (uint64_t)&v17);
    swift_release();
    swift_release();
    uint64_t result = swift_release_n();
    char v16 = v18;
    *(void *)a2 = v17;
    *(unsigned char *)(a2 + 8) = v16;
    return result;
  }
  __break(1u);
  OUTLINED_FUNCTION_0_27();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(Swift::String *))
{
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  if (OUTLINED_FUNCTION_12_0(v4))
  {
    uint64_t v5 = 0;
    while (1)
    {
      CMLSequence.value(at:)(v5);
      if (v2) {
        break;
      }
      Swift::String v6 = CMLFeatureValue.stringValue()();
      uint64_t v2 = v7;
      if (v7) {
        goto LABEL_13;
      }
      swift_release();
      swift_retain();
      uint64_t v8 = CMLSequence.size.getter();
      uint64_t v9 = OUTLINED_FUNCTION_12_0(v8);
      swift_release();
      if (v5 >= v9)
      {
        __break(1u);
        break;
      }
      Swift::String v19 = v6;
      char v10 = a1(&v19);
      swift_bridgeObjectRelease();
      if (v10)
      {
        swift_release();
        char v13 = 1;
        return v13 & 1;
      }
      ++v5;
      swift_retain();
      uint64_t v11 = CMLSequence.size.getter();
      uint64_t v12 = OUTLINED_FUNCTION_12_0(v11);
      swift_release();
      if (v5 == v12) {
        goto LABEL_8;
      }
    }
    OUTLINED_FUNCTION_69_4();
    swift_unexpectedError();
    __break(1u);
LABEL_13:

    swift_release();
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96();
    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v15;
    v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 46;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    OUTLINED_FUNCTION_16_35();
    uint64_t result = OUTLINED_FUNCTION_118();
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_release();
    char v13 = 0;
    return v13 & 1;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1)
{
  return specialized RandomAccessCollection<>.index(after:)(a1, CMLSequence.size.getter);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = OUTLINED_FUNCTION_12_0(v2);
  uint64_t result = swift_release();
  if ((a1 & 0x8000000000000000) == 0 && v3 > a1) {
    return a1 + 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = MLDataTable.size.getter();
  if ((a1 & 0x8000000000000000) == 0 && result > a1) {
    return a1 + 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = CMLSequence.size.getter();
  if ((a1 & 0x8000000000000000) == 0 && result > a1) {
    return a1 + 1;
  }
  __break(1u);
  return result;
}

{
  return specialized RandomAccessCollection<>.index(after:)(a1, CMLDictionary.size.getter);
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if ((a1 & 0x8000000000000000) == 0 && result > a1) {
    return a1 + 1;
  }
  __break(1u);
  return result;
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_29_8();
  a17 = v18;
  a18 = v19;
  uint64_t v21 = v20;
  a10 = MEMORY[0x263F8EE80];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v21, 1, &a10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_28_8();
}

{
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, (uint64_t)&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, Int>, (uint64_t)specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, (uint64_t)&demangling cache variable for type metadata for _DictionaryStorage<String, Int>, (uint64_t)specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_29_8();
  a17 = v18;
  a18 = v24;
  if (__OFSUB__(v21, v20))
  {
    __break(1u);
    OUTLINED_FUNCTION_32_22();
    __break(1u);
  }
  else
  {
    char v25 = v23;
    uint64_t v26 = v21;
    uint64_t v27 = v20;
    if (v21 - v20 >= *(void *)(v19 + 16)) {
      uint64_t v28 = *(void *)(v19 + 16);
    }
    else {
      uint64_t v28 = v21 - v20;
    }
    if (v28)
    {
      __swift_instantiateConcreteTypeFromMangledName(v22);
      char v29 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      char v29 = MEMORY[0x263F8EE80];
    }
    a10 = v29;
    int v30 = swift_bridgeObjectRetain();
    v25(v30, v27, v26, 1, &a10);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28_8();
  }
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, MLDataValue>);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v4 = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, void (*a2)(Swift::String *__return_ptr, Swift::String *), uint64_t a3)
{
  if (specialized LazyMapSequence.underestimatedCount.getter())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLUntypedColumn>);
    uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE80];
  }
  uint64_t v8 = v6;
  swift_retain();
  swift_retain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, 1, &v8);
  swift_release();
  swift_release();
  return v8;
}

void *specialized String.withCString<A>(_:)(void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for CMLColumn, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
}

{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for CMLVariant, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
}

{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for CMLTable, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
}

{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for CMLFeatureValue, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
}

#error "2272279A0: call analysis failed (funcsize=69)"

void *specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  void v12[4];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)v12[3];
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v12[0] = v5;
      v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = v7(&v11, v12);
      if (!v4) {
        return (void *)v11;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      return (void *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v8, v9, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  void *result;
  void v11[2];
  uint64_t v12;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)BYTE1(v12);
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v11[0] = v5;
      v11[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = v7(&v12, v11);
      if (!v4) {
        return (void *)v12;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq58CreateML19CMLFeatureValueTypeO_Tg507_sSRys4f5VGxs5e29_pIgyrzo_ACxsAD_pIegyrzr_lTR8h4ML19jkL5O_TG5SRyAGGAMsAD_pIgyrzo_Tf1cn_n(v8, v9, (void *(*)(uint64_t *__return_ptr))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_Sb_TG5TA_0);
    }
  }
  return result;
}

void *specialized String.withCString<A>(_:)(void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(void))
{
  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    a5(0);
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v6) {
      return (void *)v15[2];
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((a4 & 0x2000000000000000) != 0)
    {
      v15[0] = a3;
      v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = a1(&v14, v15);
      if (!v6) {
        return (void *)v14;
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        uint64_t v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v11 = _StringObject.sharedUTF8.getter();
      }
      return (void *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v11, v12, a6);
    }
  }
  return result;
}

uint64_t MLDataTable.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = MEMORY[0x22A6764B0](0);
  if (!result) {
    goto LABEL_36;
  }
  uint64_t v5 = result;
  type metadata accessor for CMLTable();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  type metadata accessor for _DataTable();
  char v7 = (void *)OUTLINED_FUNCTION_55_7();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v6;
  uint64_t v26 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int v35 = (long long *)&v34;
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  unint64_t v13 = v12 | (v11 << 6);
LABEL_6:
  uint64_t v14 = *(void *)(a1 + 56);
  Swift::String v15 = (void *)(*(void *)(a1 + 48) + 16 * v13);
  uint64_t v16 = v15[1];
  *(void *)&long long v28 = *v15;
  *((void *)&v28 + 1) = v16;
  outlined init with copy of TrainingSessionDelegate(v14 + 40 * v13, (uint64_t)&v29);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v28, (uint64_t)&v32, &demangling cache variable for type metadata for (key: String, value: MLDataValueConvertible)?);
    uint64_t v19 = v33;
    if (!v33)
    {
      swift_release();
      uint64_t result = swift_release();
      *(void *)a2 = v7;
      *(unsigned char *)(a2 + 8) = 0;
      return result;
    }
    uint64_t v20 = v32;
    outlined init with take of BinaryFloatingPoint(v35, (uint64_t)&v28);
    uint64_t v21 = *((void *)&v29 + 1);
    uint64_t v22 = v30;
    __swift_project_boxed_opaque_existential_1(&v28, *((uint64_t *)&v29 + 1));
    uint64_t v23 = MLDataValueConvertible.featureColumn.getter(v21, v22);
    swift_retain();
    CMLTable.addColumn(name:_:)(v20, v19, v23);
    if (v2)
    {
      swift_release();
      swift_release_n();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
    if (v10) {
      goto LABEL_5;
    }
LABEL_7:
    int64_t v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v17 < v27)
    {
      unint64_t v18 = *(void *)(v26 + 8 * v17);
      if (v18) {
        goto LABEL_10;
      }
      v11 += 2;
      if (v17 + 1 >= v27)
      {
        int64_t v11 = v17;
        goto LABEL_15;
      }
      unint64_t v18 = *(void *)(v26 + 8 * v11);
      if (v18)
      {
        ++v17;
LABEL_10:
        unint64_t v10 = (v18 - 1) & v18;
        unint64_t v13 = __clz(__rbit64(v18)) + (v17 << 6);
        int64_t v11 = v17;
        goto LABEL_6;
      }
      if (v17 + 2 < v27) {
        break;
      }
    }
LABEL_15:
    unint64_t v10 = 0;
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
  }
  unint64_t v18 = *(void *)(v26 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_10;
  }
  int64_t v24 = v17 + 3;
  if (v17 + 3 >= v27)
  {
    int64_t v11 = v17 + 2;
    goto LABEL_15;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v24);
  if (v18)
  {
    v17 += 3;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v17 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v17 >= v27)
    {
      int64_t v11 = v27 - 1;
      goto LABEL_15;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v24;
    if (v18) {
      goto LABEL_10;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void MLDataTable.append(contentsOf:)()
{
  OUTLINED_FUNCTION_29_8();
  uint64_t v2 = v0;
  OUTLINED_FUNCTION_47_17();
  if (v4)
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    uint64_t v6 = *(void **)v3;
    if (*(unsigned char *)(v3 + 8))
    {
      LOBYTE(v5) = 1;
      outlined copy of Result<_DataTable, Error>(*(id *)v3, 1);
      OUTLINED_FUNCTION_26_8();
      uint64_t v1 = v6;
    }
    else
    {
      type metadata accessor for CMLTable();
      uint64_t v7 = v1[2];
      uint64_t v8 = v6[2];
      outlined copy of Result<_DataTable, Error>(v6, 0);
      OUTLINED_FUNCTION_42_6();
      swift_retain();
      swift_retain();
      uint64_t v5 = CMLTable.__allocating_init(concatenating:and:)(v7, v8);
      type metadata accessor for _DataTable();
      uint64_t v9 = (void *)OUTLINED_FUNCTION_55_7();
      v9[3] = 0;
      v9[4] = 0;
      _OWORD v9[2] = v5;
      outlined consume of Result<_DataTable, Error>(v6, 0);
      outlined consume of Result<_DataTable, Error>(v1, 0);
      OUTLINED_FUNCTION_10_33(v1);
      uint64_t v1 = v9;
    }
  }
  *(void *)uint64_t v2 = v1;
  *(unsigned char *)(v2 + 8) = v5;
  OUTLINED_FUNCTION_28_8();
}

Swift::Void __swiftcall MLDataTable.renameColumn(named:to:)(Swift::String named, Swift::String to)
{
  OUTLINED_FUNCTION_54_9();
  MLDataTable.willMutate()();
  uint64_t v3 = OUTLINED_FUNCTION_58_5();
  MLDataTable.renameImpl(named:to:)(v3, v4, v5, v6);
  if ((*(unsigned char *)(v2 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_8_37();
    OUTLINED_FUNCTION_26_9();
  }
}

void MLDataTable.columnTypes.getter()
{
  if ((*(unsigned char *)(v1 + 8) & 1) == 0)
  {
    uint64_t v4 = *(void **)v1;
    uint64_t v5 = *(void *)(*(void *)v1 + 16);
    outlined copy of Result<_DataTable, Error>(*(id *)v1, 0);
    swift_retain();
    Dictionary.init(dictionaryLiteral:)();
    outlined copy of Result<_DataTable, Error>(v4, 0);
    _DataTable.columnNames.getter(&v97);
    outlined consume of Result<_DataTable, Error>(v4, 0);
    swift_retain();
    uint64_t v6 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_12_0(v6);
    OUTLINED_FUNCTION_41_14();
    if (v0)
    {
      uint64_t v94 = (uint64_t)v4;
      uint64_t v95 = v5;
      uint64_t v7 = 0;
      while (2)
      {
        CMLSequence.value(at:)(v7);
        Swift::String v9 = CMLFeatureValue.stringValue()();
        if (!v8)
        {
          swift_release();
          swift_retain();
          uint64_t v10 = CMLSequence.size.getter();
          OUTLINED_FUNCTION_12_0(v10);
          OUTLINED_FUNCTION_41_14();
          if (v7 < v0)
          {
            switch(specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in CMLTable.columnType(name:), v5, v9._countAndFlagsBits, (uint64_t)v9._object))
            {
              case 1u:
                swift_isUniquelyReferenced_nonNull_native();
                OUTLINED_FUNCTION_1_52();
                OUTLINED_FUNCTION_5_50();
                if (v11) {
                  goto LABEL_89;
                }
                OUTLINED_FUNCTION_36_19();
                int v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataValue.ValueType>);
                if (!OUTLINED_FUNCTION_4_55(v52, v53, v54, v55, v56, v57, v58, v59, v92, v93, v94, v95, v96, (char)v97)) {
                  goto LABEL_43;
                }
                OUTLINED_FUNCTION_11_40();
                OUTLINED_FUNCTION_7_47();
                if (!v21) {
                  goto LABEL_100;
                }
                unint64_t v2 = v60;
LABEL_43:
                uint64_t v22 = v97;
                if (v0)
                {
                  *(unsigned char *)(v97[7] + v2) = 1;
                  goto LABEL_80;
                }
                v97[(v2 >> 6) + 8] |= 1 << v2;
                *(Swift::String *)(v22[6] + 16 * v2) = v9;
                *(unsigned char *)(v22[7] + v2) = 1;
                uint64_t v85 = v22[2];
                BOOL v11 = __OFADD__(v85, 1);
                uint64_t v80 = v85 + 1;
                if (v11) {
                  goto LABEL_95;
                }
                goto LABEL_79;
              case 2u:
                swift_isUniquelyReferenced_nonNull_native();
                OUTLINED_FUNCTION_1_52();
                OUTLINED_FUNCTION_5_50();
                if (v11) {
                  goto LABEL_87;
                }
                OUTLINED_FUNCTION_36_19();
                int v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataValue.ValueType>);
                if (!OUTLINED_FUNCTION_4_55(v34, v35, v36, v37, v38, v39, v40, v41, v92, v93, v94, v95, v96, (char)v97)) {
                  goto LABEL_29;
                }
                OUTLINED_FUNCTION_11_40();
                OUTLINED_FUNCTION_7_47();
                if (!v21) {
                  goto LABEL_100;
                }
                unint64_t v2 = v42;
LABEL_29:
                uint64_t v22 = v97;
                if (v0)
                {
                  uint64_t v32 = v97[7];
                  char v33 = 2;
                  goto LABEL_59;
                }
                OUTLINED_FUNCTION_0_34();
                OUTLINED_FUNCTION_24_30(v81);
                if (v11) {
                  goto LABEL_93;
                }
                goto LABEL_79;
              case 3u:
                swift_isUniquelyReferenced_nonNull_native();
                OUTLINED_FUNCTION_1_52();
                OUTLINED_FUNCTION_5_50();
                if (v11) {
                  goto LABEL_88;
                }
                OUTLINED_FUNCTION_36_19();
                int v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataValue.ValueType>);
                if (!OUTLINED_FUNCTION_4_55(v43, v44, v45, v46, v47, v48, v49, v50, v92, v93, v94, v95, v96, (char)v97)) {
                  goto LABEL_36;
                }
                OUTLINED_FUNCTION_11_40();
                OUTLINED_FUNCTION_7_47();
                if (!v21) {
                  goto LABEL_100;
                }
                unint64_t v2 = v51;
LABEL_36:
                uint64_t v22 = v97;
                if (v0)
                {
                  uint64_t v32 = v97[7];
                  char v33 = 3;
                  goto LABEL_59;
                }
                OUTLINED_FUNCTION_0_34();
                OUTLINED_FUNCTION_24_30(v84);
                if (v11) {
                  goto LABEL_94;
                }
                goto LABEL_79;
              case 4u:
                swift_isUniquelyReferenced_nonNull_native();
                OUTLINED_FUNCTION_1_52();
                OUTLINED_FUNCTION_5_50();
                if (v11) {
                  goto LABEL_86;
                }
                OUTLINED_FUNCTION_36_19();
                int v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataValue.ValueType>);
                if (!OUTLINED_FUNCTION_4_55(v23, v24, v25, v26, v27, v28, v29, v30, v92, v93, v94, v95, v96, (char)v97)) {
                  goto LABEL_22;
                }
                OUTLINED_FUNCTION_11_40();
                OUTLINED_FUNCTION_7_47();
                if (!v21) {
                  goto LABEL_100;
                }
                unint64_t v2 = v31;
LABEL_22:
                uint64_t v22 = v97;
                if (v0)
                {
                  uint64_t v32 = v97[7];
                  char v33 = 4;
                  goto LABEL_59;
                }
                OUTLINED_FUNCTION_0_34();
                OUTLINED_FUNCTION_24_30(v79);
                if (v11) {
                  goto LABEL_92;
                }
                goto LABEL_79;
              case 5u:
                swift_isUniquelyReferenced_nonNull_native();
                OUTLINED_FUNCTION_1_52();
                OUTLINED_FUNCTION_5_50();
                if (v11) {
                  goto LABEL_90;
                }
                OUTLINED_FUNCTION_36_19();
                int v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataValue.ValueType>);
                if (!OUTLINED_FUNCTION_4_55(v61, v62, v63, v64, v65, v66, v67, v68, v92, v93, v94, v95, v96, (char)v97)) {
                  goto LABEL_50;
                }
                OUTLINED_FUNCTION_11_40();
                OUTLINED_FUNCTION_7_47();
                if (!v21) {
                  goto LABEL_100;
                }
                unint64_t v2 = v69;
LABEL_50:
                uint64_t v22 = v97;
                if (v0)
                {
                  uint64_t v32 = v97[7];
                  char v33 = 6;
                  goto LABEL_59;
                }
                OUTLINED_FUNCTION_0_34();
                OUTLINED_FUNCTION_24_30(v86);
                if (v11) {
                  goto LABEL_98;
                }
                goto LABEL_79;
              case 6u:
                swift_isUniquelyReferenced_nonNull_native();
                OUTLINED_FUNCTION_1_52();
                OUTLINED_FUNCTION_5_50();
                if (v11) {
                  goto LABEL_91;
                }
                OUTLINED_FUNCTION_36_19();
                int v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataValue.ValueType>);
                if (!OUTLINED_FUNCTION_4_55(v70, v71, v72, v73, v74, v75, v76, v77, v92, v93, v94, v95, v96, (char)v97)) {
                  goto LABEL_57;
                }
                OUTLINED_FUNCTION_11_40();
                OUTLINED_FUNCTION_7_47();
                if (!v21) {
                  goto LABEL_100;
                }
                unint64_t v2 = v78;
LABEL_57:
                uint64_t v22 = v97;
                if (v0)
                {
                  uint64_t v32 = v97[7];
                  char v33 = 5;
LABEL_59:
                  *(unsigned char *)(v32 + v2) = v33;
                }
                else
                {
                  OUTLINED_FUNCTION_0_34();
                  OUTLINED_FUNCTION_24_30(v87);
                  if (v11) {
                    goto LABEL_96;
                  }
LABEL_79:
                  void v22[2] = v80;
                  swift_bridgeObjectRetain();
                }
LABEL_80:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v5 = v95;
                ++v7;
                swift_retain();
                uint64_t v88 = CMLSequence.size.getter();
                OUTLINED_FUNCTION_12_0(v88);
                OUTLINED_FUNCTION_41_14();
                if (v7 != v0) {
                  continue;
                }
                swift_release();
                swift_release();
                uint64_t v89 = (void *)v94;
                break;
              default:
                swift_isUniquelyReferenced_nonNull_native();
                OUTLINED_FUNCTION_1_52();
                OUTLINED_FUNCTION_5_50();
                if (v11) {
                  goto LABEL_85;
                }
                OUTLINED_FUNCTION_36_19();
                int v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataValue.ValueType>);
                if (!OUTLINED_FUNCTION_4_55(v12, v13, v14, v15, v16, v17, v18, v19, v92, v93, v94, v95, v96, (char)v97)) {
                  goto LABEL_15;
                }
                OUTLINED_FUNCTION_11_40();
                OUTLINED_FUNCTION_7_47();
                if (!v21) {
                  goto LABEL_100;
                }
                unint64_t v2 = v20;
LABEL_15:
                uint64_t v22 = v97;
                if (v0)
                {
                  *(unsigned char *)(v97[7] + v2) = 0;
                  goto LABEL_80;
                }
                OUTLINED_FUNCTION_0_34();
                *(unsigned char *)(v82 + v2) = 0;
                uint64_t v83 = v22[2];
                BOOL v11 = __OFADD__(v83, 1);
                uint64_t v80 = v83 + 1;
                if (v11) {
                  goto LABEL_97;
                }
                goto LABEL_79;
            }
            goto LABEL_83;
          }
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          OUTLINED_FUNCTION_108();
          __break(1u);
        }
        break;
      }

      swift_release();
      OUTLINED_FUNCTION_68_4();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_50_12();
      v90._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      v91._uint64_t countAndFlagsBits = 46;
      v91._object = (void *)0xE100000000000000;
      String.append(_:)(v91);
      OUTLINED_FUNCTION_16_35();
      OUTLINED_FUNCTION_118();
      __break(1u);
LABEL_100:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x2272288F4);
    }
    swift_release();
    swift_release();
    uint64_t v89 = v4;
LABEL_83:
    outlined consume of Result<_DataTable, Error>(v89, 0);
    OUTLINED_FUNCTION_55_9();
    return;
  }
  OUTLINED_FUNCTION_55_9();
  Dictionary.init(dictionaryLiteral:)();
}

void MLDataTable.subscript.getter()
{
  OUTLINED_FUNCTION_48_11();
  id v4 = *(id *)v1;
  char v5 = *(unsigned char *)(v1 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)v1, v5);
  uint64_t v6 = OUTLINED_FUNCTION_55_8();
  MLDataTable.subscript.getter(v6, v7, v8);
  outlined consume of Result<_DataTable, Error>(v4, v5);
  MLUntypedColumn.column<A>(type:)(v3, v2, v0);
  outlined consume of Result<_DataTable, Error>(v9, v10);
}

void MLDataTable.addColumn(_:named:)()
{
  OUTLINED_FUNCTION_29_8();
  OUTLINED_FUNCTION_21_35();
  MLDataTable.addImpl(newColumn:named:)();
  if ((*(unsigned char *)(v0 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_8_37();
    OUTLINED_FUNCTION_26_9();
  }
  OUTLINED_FUNCTION_28_8();
}

#error "227228A98: call analysis failed (funcsize=55)"

void MLDataTable.exclude<A>(_:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void MLDataTable.addColumn<A>(_:named:)()
{
  OUTLINED_FUNCTION_29_8();
  OUTLINED_FUNCTION_21_35();
  outlined copy of Result<_DataTable, Error>(v0, v1);
  MLDataTable.addImpl(newColumn:named:)();
  OUTLINED_FUNCTION_65_4();
  if ((v2 & 1) == 0)
  {
    OUTLINED_FUNCTION_8_37();
    OUTLINED_FUNCTION_26_9();
  }
  OUTLINED_FUNCTION_28_8();
}

uint64_t _DataTable.columnNames.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (!v3)
  {
    uint64_t v4 = specialized handling<A, B>(_:_:)(*(void *)(*(void *)(v1 + 16) + 16));
    if (v4)
    {
      type metadata accessor for CMLSequence();
      uint64_t v5 = OUTLINED_FUNCTION_6_3();
      *(void *)(v5 + 16) = v4;
      *(unsigned char *)(v5 + 24) = 1;
      *(void *)(v1 + 24) = v5;
      swift_release();
      uint64_t v3 = *(void *)(v1 + 24);
      if (v3) {
        goto LABEL_4;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);

    OUTLINED_FUNCTION_16_35();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_4:
  *a1 = v3;

  return swift_retain();
}

uint64_t _DataTable.columnIndexes.getter()
{
  if (*(void *)(v1 + 32)) {
    goto LABEL_20;
  }
  _DataTable.columnNames.getter(&v26);
  swift_retain();
  uint64_t v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_12_0(v3);
  OUTLINED_FUNCTION_41_14();
  if (v0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x263F8EE80];
    while (1)
    {
      CMLSequence.value(at:)(v4);
      Swift::String v6 = CMLFeatureValue.stringValue()();
      if (v2) {
        goto LABEL_28;
      }
      swift_release();
      swift_retain();
      uint64_t v7 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_12_0(v7);
      OUTLINED_FUNCTION_41_14();
      if (v4 >= v0)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      int v26 = v5;
      unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6._countAndFlagsBits, (uint64_t)v6._object);
      uint64_t v11 = v5[2];
      BOOL v12 = (v10 & 1) == 0;
      Swift::Int v13 = v11 + v12;
      if (__OFADD__(v11, v12)) {
        goto LABEL_24;
      }
      unint64_t v14 = v9;
      uint64_t v0 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v6._countAndFlagsBits, (uint64_t)v6._object);
        OUTLINED_FUNCTION_7_47();
        if (!v16) {
          goto LABEL_29;
        }
        unint64_t v14 = v15;
      }
      uint64_t v5 = v26;
      if (v0)
      {
        *(void *)(v26[7] + 8 * v14) = v4;
      }
      else
      {
        v26[(v14 >> 6) + 8] |= 1 << v14;
        *(Swift::String *)(v5[6] + 16 * v14) = v6;
        *(void *)(v5[7] + 8 * v14) = v4;
        uint64_t v17 = v5[2];
        BOOL v18 = __OFADD__(v17, 1);
        uint64_t v19 = v17 + 1;
        if (v18) {
          goto LABEL_25;
        }
        v5[2] = v19;
        swift_bridgeObjectRetain();
      }
      ++v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v20 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_12_0(v20);
      OUTLINED_FUNCTION_41_14();
      if (v4 == v0) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v5 = (void *)MEMORY[0x263F8EE80];
LABEL_19:
  swift_release();
  *(void *)(v25 + 32) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(v25 + 32))
  {
LABEL_20:
    OUTLINED_FUNCTION_55_9();
    return swift_bridgeObjectRetain();
  }
LABEL_26:
  __break(1u);
  OUTLINED_FUNCTION_108();
  __break(1u);
LABEL_28:
  swift_release();

  OUTLINED_FUNCTION_68_4();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_50_12();
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 46;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  OUTLINED_FUNCTION_16_35();
  OUTLINED_FUNCTION_118();
  __break(1u);
LABEL_29:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *_DataTable.init(impl:)(uint64_t a1)
{
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = a1;
  return v1;
}

Swift::Void __swiftcall _DataTable.columnNamesDidChange()()
{
  *(void *)(v0 + 24) = 0;
  swift_release();
  *(void *)(v0 + 32) = 0;

  swift_bridgeObjectRelease();
}

uint64_t _DataTable.deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _DataTable.__deallocating_deinit()
{
  _DataTable.deinit();

  return swift_deallocClassInstance();
}

id MLDataTable.error.getter()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    return 0;
  }
  id v1 = *(id *)v0;
  id v2 = *(id *)v0;
  return v1;
}

BOOL MLDataTable.isValid.getter()
{
  return (*(unsigned char *)(v0 + 8) & 1) == 0;
}

void MLDataTable.willMutate()()
{
  if (*(unsigned char *)(v0 + 8)) {
    return;
  }
  uint64_t v2 = v0;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_release();
  if (isUniquelyReferenced_nonNull_native) {
    return;
  }
  uint64_t v4 = *(void **)v2;
  char v5 = *(unsigned char *)(v2 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)v2, v5);
  uint64_t v6 = MEMORY[0x22A6764B0](0);
  if (!v6)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = v6;
  type metadata accessor for CMLTable();
  *(void *)(OUTLINED_FUNCTION_70() + 16) = v7;
  type metadata accessor for _DataTable();
  id v1 = (void *)OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_71_4(v1);
  swift_retain();
  outlined consume of Result<_DataTable, Error>(v4, v5);
  *(void *)uint64_t v2 = v1;
  *(unsigned char *)(v2 + 8) = 0;
  if ((v5 & 1) == 0)
  {
    OUTLINED_FUNCTION_42_6();
    _DataTable.columnNames.getter(&v51);
    OUTLINED_FUNCTION_26_8();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_49_8(v4);
  if (!v8)
  {
LABEL_31:
    __break(1u);
    OUTLINED_FUNCTION_108();
    __break(1u);
LABEL_32:

    swift_release();
    id v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96();
    id v51 = v43;
    unint64_t v52 = v42;
    v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_118();
    __break(1u);
    return;
  }
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_25_29();
  type metadata accessor for CMLSequence();
  uint64_t v10 = OUTLINED_FUNCTION_6_3();
  *(void *)(v10 + 16) = v9;
  *(unsigned char *)(v10 + 24) = 1;
LABEL_8:
  swift_retain();
  uint64_t v11 = CMLSequence.size.getter();
  uint64_t v12 = OUTLINED_FUNCTION_12_0(v11);
  swift_release();
  if (v12)
  {
    uint64_t v13 = 0;
    OUTLINED_FUNCTION_96();
    unint64_t v47 = v14;
    OUTLINED_FUNCTION_96();
    unint64_t v46 = v15;
    int v48 = v4;
    uint64_t v49 = v2;
    while (1)
    {
      CMLSequence.value(at:)(v13);
      Swift::String v16 = CMLFeatureValue.stringValue()();
      if (v1) {
        goto LABEL_32;
      }
      swift_release();
      swift_retain();
      uint64_t v17 = CMLSequence.size.getter();
      uint64_t v18 = OUTLINED_FUNCTION_12_0(v17);
      swift_release();
      if (v13 >= v18)
      {
        __break(1u);
        goto LABEL_30;
      }
      if ((v5 & 1) == 0) {
        break;
      }
      outlined copy of Result<_DataTable, Error>(v4, 1);
      swift_willThrow();
      id v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_39_7();
      id v51 = v20;
      unint64_t v52 = v47;
      String.append(_:)(v16);
      v21._uint64_t countAndFlagsBits = 34;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      id v22 = v51;
      unint64_t v23 = v52;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v50 = OUTLINED_FUNCTION_85();
      *(void *)uint64_t v24 = v22;
      *(void *)(v24 + 8) = v23;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_OWORD *)(v24 + 32) = 0u;
      char v25 = 1;
      *(unsigned char *)(v24 + 48) = 1;
      outlined consume of Result<_DataTable, Error>(v4, v5);
      id v26 = *(id *)v49;
      if (*(unsigned char *)(v49 + 8)) {
        goto LABEL_16;
      }
      id v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      OUTLINED_FUNCTION_42_6();
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_39_7();
      id v51 = (id)(v29 + 2);
      unint64_t v52 = v46;
      String.append(_:)(v16);
      v30._uint64_t countAndFlagsBits = 39;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      id v31 = v51;
      unint64_t v32 = v52;
      uint64_t v28 = OUTLINED_FUNCTION_85();
      *(void *)uint64_t v33 = v31;
      *(void *)(v33 + 8) = v32;
      *(_OWORD *)(v33 + 16) = 0u;
      *(_OWORD *)(v33 + 32) = 0u;
      *(unsigned char *)(v33 + 48) = 1;
      swift_willThrow();
      OUTLINED_FUNCTION_26_8();
      uint64_t v2 = v49;
      int v34 = (void *)v50;
LABEL_23:
      outlined consume of Result<_DataTable, Error>(*(id *)v2, *(unsigned char *)(v2 + 8));
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v34, v25);
      *(void *)uint64_t v2 = v28;
      *(unsigned char *)(v2 + 8) = 1;
LABEL_24:
      uint64_t v4 = v48;
      ++v13;
      swift_retain();
      uint64_t v38 = CMLSequence.size.getter();
      uint64_t v39 = OUTLINED_FUNCTION_12_0(v38);
      swift_release();
      if (v13 == v39) {
        goto LABEL_27;
      }
    }
    uint64_t v19 = v4[2];
    OUTLINED_FUNCTION_42_6();
    swift_retain();
    int v35 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:), v19, v16._countAndFlagsBits, (uint64_t)v16._object, (void (*)(void))type metadata accessor for CMLColumn, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    swift_release();
    OUTLINED_FUNCTION_26_8();
    type metadata accessor for _UntypedColumn();
    uint64_t v36 = OUTLINED_FUNCTION_70();
    *(void *)(v36 + 16) = v35;
    id v26 = *(id *)v2;
    uint64_t v50 = v36;
    if ((*(unsigned char *)(v2 + 8) & 1) == 0)
    {
      uint64_t v40 = (uint64_t)v35;
      int v41 = (void *)v36;
      OUTLINED_FUNCTION_42_6();
      outlined copy of Result<_DataTable, Error>(v41, 0);
      swift_retain();
      CMLTable.addColumn(name:_:)(v16._countAndFlagsBits, (uint64_t)v16._object, v40);
      OUTLINED_FUNCTION_21_13();
      swift_release();
      OUTLINED_FUNCTION_26_8();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_13();
      goto LABEL_24;
    }
    char v25 = 0;
LABEL_16:
    id v51 = v26;
    OUTLINED_FUNCTION_30_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v27 = _getErrorEmbeddedNSError<A>(_:)();
    if (v27)
    {
      uint64_t v28 = v27;
      OUTLINED_FUNCTION_25_29();
    }
    else
    {
      uint64_t v28 = OUTLINED_FUNCTION_85();
      void *v37 = v51;
    }
    uint64_t v2 = v49;
    int v34 = (void *)v50;
    OUTLINED_FUNCTION_25_29();
    goto LABEL_23;
  }
LABEL_27:
  swift_release();
  _DataTable.columnNamesDidChange()();
  swift_release();
  outlined consume of Result<_DataTable, Error>(v4, v5);
}

void MLDataTable.addImpl(newColumn:named:)()
{
  uint64_t v2 = v0;
  OUTLINED_FUNCTION_47_17();
  if (v6)
  {
    OUTLINED_FUNCTION_30_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = _getErrorEmbeddedNSError<A>(_:)();
    if (v7)
    {
      uint64_t v8 = v7;
      OUTLINED_FUNCTION_25_29();
    }
    else
    {
      uint64_t v8 = OUTLINED_FUNCTION_85();
      *uint64_t v20 = v1;
    }
    uint64_t v18 = v1;
    char v19 = 1;
  }
  else
  {
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    if ((v3[8] & 1) == 0)
    {
      Swift::String v16 = *(void **)v3;
      uint64_t v17 = *(void *)(*(void *)v3 + 16);
      outlined copy of Result<_DataTable, Error>(v1, 0);
      outlined copy of Result<_DataTable, Error>(v16, 0);
      swift_retain();
      CMLTable.addColumn(name:_:)(v10, (uint64_t)v9, v17);
      OUTLINED_FUNCTION_40_14();
      swift_release();
      OUTLINED_FUNCTION_26_8();
      return;
    }
    OUTLINED_FUNCTION_42_6();
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_67_5();
    uint64_t v21 = v11;
    uint64_t v22 = v12;
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v9;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = 39;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v8 = OUTLINED_FUNCTION_85();
    *unint64_t v15 = v21;
    v15[1] = v22;
    OUTLINED_FUNCTION_20_34(v8, (uint64_t)v15);
    swift_willThrow();
    uint64_t v18 = v1;
    char v19 = 0;
  }
  outlined consume of Result<_DataTable, Error>(v18, v19);
  outlined consume of Result<_DataTable, Error>(*(id *)v2, *(unsigned char *)(v2 + 8));
  *(void *)uint64_t v2 = v8;
  *(unsigned char *)(v2 + 8) = 1;
}

uint64_t specialized MLDataTable.init<A>(uniqueKeysWithValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = MEMORY[0x22A6764B0](0);
  if (!result) {
    goto LABEL_30;
  }
  uint64_t v5 = result;
  type metadata accessor for CMLTable();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  type metadata accessor for _DataTable();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_55_7();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v6;
  specialized _NativeDictionary.makeIterator()(v30, a1);
  uint64_t v8 = v30[0];
  int64_t v29 = v30[3];
  unint64_t v9 = v30[4];
  uint64_t v27 = v30[1];
  int64_t v28 = (unint64_t)(v30[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  if (!v9) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v11 = v10 | (v29 << 6);
  while (1)
  {
    uint64_t v15 = *(void *)(v8 + 56) + 16 * v11;
    Swift::String v16 = *(void **)v15;
    if (*(unsigned char *)(v15 + 8))
    {
      outlined copy of Result<_DataTable, Error>(v16, 1);
      swift_release();
      v30[6] = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v24 = swift_allocError();
      *char v25 = 0;
      v25[1] = 0xE000000000000000;
      OUTLINED_FUNCTION_8_4(v24, (uint64_t)v25);
      outlined consume of Result<_DataTable, Error>(v16, 1);
      swift_release();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    uint64_t v17 = v8;
    uint64_t v18 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v11);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = v7;
    uint64_t v22 = v16[2];
    outlined copy of Result<_DataTable, Error>(v16, 0);
    outlined copy of Result<_DataTable, Error>(v16, 0);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    CMLTable.addColumn(name:_:)(v19, v20, v22);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      outlined consume of Result<_DataTable, Error>(v16, 0);
      outlined consume of Result<_DataTable, Error>(v16, 0);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    swift_release();
    swift_release();
    outlined consume of Result<_DataTable, Error>(v16, 0);
    outlined consume of Result<_DataTable, Error>(v16, 0);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v21;
    uint64_t v8 = v17;
    if (v9) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v12 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if (v12 >= v28) {
      goto LABEL_28;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    if (!v13)
    {
      int64_t v14 = v29 + 2;
      if (v29 + 2 >= v28) {
        goto LABEL_28;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v14);
      if (v13) {
        goto LABEL_13;
      }
      int64_t v14 = v29 + 3;
      if (v29 + 3 >= v28) {
        goto LABEL_28;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v14);
      if (v13) {
        goto LABEL_13;
      }
      int64_t v14 = v29 + 4;
      if (v29 + 4 >= v28) {
        goto LABEL_28;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v14);
      if (v13)
      {
LABEL_13:
        int64_t v12 = v14;
        goto LABEL_14;
      }
      int64_t v12 = v29 + 5;
      if (v29 + 5 >= v28) {
        goto LABEL_28;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v12);
      if (!v13) {
        break;
      }
    }
LABEL_14:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v12 << 6);
    int64_t v29 = v12;
  }
  int64_t v23 = v29 + 6;
  while (v23 < v28)
  {
    unint64_t v13 = *(void *)(v27 + 8 * v23++);
    if (v13)
    {
      int64_t v12 = v23 - 1;
      goto LABEL_14;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void key path getter for MLDataTable.subscript(_:) : MLDataTable(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = *(id *)a1;
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)a2[1];
  char v8 = *(unsigned char *)(a1 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)a1, v8);
  MLDataTable.subscript.getter(v5, v6, (uint64_t)&v9);
  outlined consume of Result<_DataTable, Error>(v4, v8);
  char v7 = v10;
  *(void *)a3 = v9;
  *(unsigned char *)(a3 + 8) = v7;
}

uint64_t key path setter for MLDataTable.subscript(_:) : MLDataTable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  char v5 = *(unsigned char *)(a1 + 8);
  id v7 = *(id *)a1;
  char v8 = v5;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v7, v5);
  return MLDataTable.subscript.setter(&v7, v3, v4);
}

#error "227229CD0: call analysis failed (funcsize=20)"

void MLDataTable.setColumnImpl(newColumn:named:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *v1;
  if ((_BYTE)v2[1])
  {
    OUTLINED_FUNCTION_49_8(v5);
    if (!v6)
    {
      __break(1u);
      return;
    }
    uint64_t v7 = v6;
    type metadata accessor for CMLSequence();
    uint64_t v8 = OUTLINED_FUNCTION_6_3();
    *(void *)(v8 + 16) = v7;
    *(unsigned char *)(v8 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(v5, 1);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v5, 0);
    _DataTable.columnNames.getter(&v22);
    OUTLINED_FUNCTION_26_9();
  }
  MEMORY[0x270FA5388](v9);
  char v10 = specialized Sequence.contains(where:)((uint64_t (*)(Swift::String *))partial apply for specialized closure #1 in Sequence<>.contains(_:));
  swift_release();
  if (v10)
  {
    uint64_t v11 = OUTLINED_FUNCTION_55_8();
    MLDataTable.removeImpl(_:)(v11, v12);
  }
  id v13 = *v2;
  if ((_BYTE)v2[1])
  {
    id v21 = *v2;
    outlined copy of Result<_DataTable, Error>(v13, 1);
    id v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v15 = _getErrorEmbeddedNSError<A>(_:)();
    if (v15)
    {
      uint64_t v16 = v15;
      outlined consume of Result<_DataTable, Error>(v13, 1);
    }
    else
    {
      uint64_t v16 = OUTLINED_FUNCTION_85();
      *uint64_t v20 = v21;
    }
    outlined consume of Result<_DataTable, Error>(v13, 1);
    outlined consume of Result<_DataTable, Error>(*v2, *((unsigned char *)v2 + 8));
    *uint64_t v2 = (void *)v16;
    *((unsigned char *)v2 + 8) = 1;
  }
  else
  {
    if (v4)
    {
      swift_retain();
    }
    else
    {
      uint64_t v17 = *(void *)(v3 + 16);
      outlined copy of Result<_DataTable, Error>(*v2, 0);
      OUTLINED_FUNCTION_42_6();
      swift_retain();
      uint64_t v18 = OUTLINED_FUNCTION_55_8();
      CMLTable.addColumn(name:_:)(v18, v19, v17);
      OUTLINED_FUNCTION_26_8();
      swift_release();
    }
    outlined consume of Result<_DataTable, Error>(v13, 0);
  }
}

void MLDataTable.subscript.modify()
{
  OUTLINED_FUNCTION_29_8();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = malloc(0x28uLL);
  *uint64_t v6 = v7;
  v7[3] = v2;
  v7[4] = v0;
  v7[2] = v4;
  OUTLINED_FUNCTION_44_16();
  MLDataTable.subscript.getter(v4, v2, v8);
  OUTLINED_FUNCTION_28_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_37_17();
  OUTLINED_FUNCTION_48_11();
  uint64_t v6 = malloc(0x38uLL);
  *char v5 = v6;
  v6[5] = v0;
  v6[6] = v1;
  v6[3] = v3;
  v6[4] = v2;
  v6[2] = v4;
  OUTLINED_FUNCTION_44_16();
  uint64_t v7 = OUTLINED_FUNCTION_58_5();
  MLDataTable.subscript.getter(v7, v8, v9, v10, v11);
  OUTLINED_FUNCTION_35_19();
}

#error "22722A054: call analysis failed (funcsize=60)"

void key path getter for MLDataTable.subscript<A>(_:) : <A>MLDataTableA(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  id v7 = *(id *)a1;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  char v11 = *(unsigned char *)(a1 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)a1, v11);
  MLDataTable.subscript.getter(v8, v9, v5, v6, (uint64_t)&v12);
  outlined consume of Result<_DataTable, Error>(v7, v11);
  char v10 = v13;
  *(void *)a4 = v12;
  *(unsigned char *)(a4 + 8) = v10;
}

uint64_t key path setter for MLDataTable.subscript<A>(_:) : <A>MLDataTableA(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  char v5 = *(unsigned char *)(a1 + 8);
  id v7 = *(id *)a1;
  char v8 = v5;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v7, v5);
  return MLDataTable.subscript.setter(&v7, v3, v4);
}

void MLDataTable.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_29_8();
  a17 = v18;
  a18 = v19;
  id v21 = *v20;
  uint64_t v22 = **v20;
  char v23 = *((unsigned char *)*v20 + 8);
  char v25 = (*v20)[2];
  uint64_t v24 = (*v20)[3];
  a9 = v22;
  a10 = v23;
  if (v26)
  {
    swift_bridgeObjectRetain();
    outlined copy of Result<_DataTable, Error>(v22, v23);
    MLDataTable.subscript.setter(&a9, v25, v24);
    outlined consume of Result<_DataTable, Error>(*v21, *((unsigned char *)v21 + 8));
  }
  else
  {
    swift_bridgeObjectRetain();
    MLDataTable.subscript.setter(&a9, v25, v24);
  }
  OUTLINED_FUNCTION_28_8();
  free(v27);
}

void MLDataTable.removeImpl(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)v2;
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v15 = *(void **)v2;
    outlined copy of Result<_DataTable, Error>(v3, 1);
    uint64_t v4 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v5 = _getErrorEmbeddedNSError<A>(_:)();
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      outlined consume of Result<_DataTable, Error>(v3, 1);
    }
    else
    {
      uint64_t v6 = (void *)swift_allocError();
      void *v14 = v15;
    }
    char v11 = 1;
    uint64_t v12 = v3;
    char v13 = 1;
  }
  else
  {
    uint64_t v9 = v3[2];
    outlined copy of Result<_DataTable, Error>(v3, 0);
    swift_retain();
    uint64_t v10 = a1;
    uint64_t v6 = 0;
    specialized String.withCString<A>(_:)(v10, a2, v9);
    char v11 = 0;
    uint64_t v12 = v3;
    char v13 = 0;
  }
  outlined consume of Result<_DataTable, Error>(v12, v13);
  outlined consume of Result<(), Error>(v6, v11);
}

uint64_t MLDataTable.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v40 = a1;
  uint64_t v38 = a3;
  OUTLINED_FUNCTION_0_15();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_0_15();
  uint64_t v37 = v11;
  MEMORY[0x270FA5388](v12);
  id v14 = (char *)&v36 - v13;
  uint64_t v15 = *(void **)v3;
  char v16 = *(unsigned char *)(v3 + 8);
  uint64_t result = MEMORY[0x22A6764B0](0);
  if (result)
  {
    type metadata accessor for CMLTable();
    uint64_t v18 = OUTLINED_FUNCTION_70();
    OUTLINED_FUNCTION_45_15(v18);
    uint64_t v19 = (void *)OUTLINED_FUNCTION_55_7();
    int v43 = OUTLINED_FUNCTION_71_4(v19);
    char v44 = 0;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v40, a2);
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    OUTLINED_FUNCTION_63_5();
    uint64_t v20 = (void *)v42;
    if (v42)
    {
      uint64_t v21 = (uint64_t)v41;
      OUTLINED_FUNCTION_96();
      uint64_t v39 = v14;
      unint64_t v40 = v22;
      do
      {
        if (v16)
        {
          outlined copy of Result<_DataTable, Error>(v15, 1);
          swift_willThrow();
          int v41 = 0;
          unint64_t v42 = 0xE000000000000000;
          _StringGuts.grow(_:)(34);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_39_7();
          int v41 = (void *)v24;
          unint64_t v42 = v40;
          v25._uint64_t countAndFlagsBits = v21;
          v25._object = v20;
          String.append(_:)(v25);
          v26._uint64_t countAndFlagsBits = 34;
          v26._object = (void *)0xE100000000000000;
          String.append(_:)(v26);
          uint64_t v27 = (uint64_t)v41;
          unint64_t v28 = v42;
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          int64_t v29 = (void *)OUTLINED_FUNCTION_85();
          uint64_t *v30 = v27;
          v30[1] = v28;
          OUTLINED_FUNCTION_20_34((uint64_t)v29, (uint64_t)v30);
          outlined consume of Result<_DataTable, Error>(v15, v16);
          outlined consume of Result<_DataTable, Error>(v29, 1);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v23 = v15[2];
          outlined copy of Result<_DataTable, Error>(v15, 0);
          swift_retain();
          id v31 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.column(name:), v23, v21, (uint64_t)v20, (void (*)(void))type metadata accessor for CMLColumn, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
          uint64_t v32 = AssociatedTypeWitness;
          swift_release();
          OUTLINED_FUNCTION_40_14();
          type metadata accessor for _UntypedColumn();
          uint64_t v33 = (void *)OUTLINED_FUNCTION_70();
          v33[2] = v31;
          outlined copy of Result<_DataTable, Error>(v33, 0);
          MLDataTable.willMutate()();
          int v41 = v33;
          LOBYTE(v42) = 0;
          MLDataTable.setColumnImpl(newColumn:named:)((uint64_t *)&v41);
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v33, 0);
          if ((v44 & 1) == 0)
          {
            OUTLINED_FUNCTION_8_37();
            OUTLINED_FUNCTION_26_9();
          }
          outlined consume of Result<_DataTable, Error>(v33, 0);
          uint64_t AssociatedTypeWitness = v32;
          id v14 = v39;
        }
        OUTLINED_FUNCTION_63_5();
        uint64_t v21 = (uint64_t)v41;
        uint64_t v20 = (void *)v42;
      }
      while (v42);
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v14, AssociatedTypeWitness);
    char v34 = v44;
    int v35 = v38;
    *uint64_t v38 = v43;
    *((unsigned char *)v35 + 8) = v34;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLDataTable.subscript.getter()
{
  OUTLINED_FUNCTION_54_9();
  uint64_t v2 = v1;
  uint64_t v12 = *v0;
  LOBYTE(v13) = *((unsigned char *)v0 + 8);
  uint64_t result = MLDataTable.size.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v4 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    OUTLINED_FUNCTION_64_5(v4, v5, v6, v7, v8, v9, v10, v11, 0);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    return (uint64_t)MLDataTable.subscript.getter(v2, v12, v13);
  }
  return result;
}

#error "22722A8FC: call analysis failed (funcsize=55)"

Swift::Void __swiftcall MLDataTable.removeColumn(named:)(Swift::String named)
{
  object = named._object;
  uint64_t countAndFlagsBits = named._countAndFlagsBits;
  MLDataTable.willMutate()();
  MLDataTable.removeImpl(_:)(countAndFlagsBits, (uint64_t)object);
  if ((*(unsigned char *)(v1 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_8_37();
    OUTLINED_FUNCTION_26_9();
  }
}

#error "22722AA04: call analysis failed (funcsize=78)"

void MLDataTable.intersect<A>(_:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void MLDataTable.exclude<A>(_:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v10 = *((unsigned char *)v6 + 8);
  uint64_t v25 = *v6;
  char v26 = v10;
  uint64_t v21 = a1;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  OUTLINED_FUNCTION_64_5(WitnessTable, v12, v13, v14, v15, v16, v17, v18, v21);
  MLUntypedColumn.init<A>(_:)();
  uint64_t v19 = (void *)v23;
  char v20 = v24;
  uint64_t v21 = v23;
  char v22 = v24;
  MLDataTable.filtered(isExcluding:values:in:)(a6, (uint64_t)&v21, a2, a3);
  outlined consume of Result<_DataTable, Error>(v19, v20);
}

void MLDataTable.filtered(isExcluding:values:in:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)v4;
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v13 = *(void **)v4;
    outlined copy of Result<_DataTable, Error>(v5, 1);
    id v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_56_11();
    }
    else
    {
      OUTLINED_FUNCTION_85();
      *uint64_t v12 = v13;
    }
    OUTLINED_FUNCTION_56_11();
  }
  else
  {
    char v10 = *(void **)a2;
    char v11 = *(unsigned char *)(a2 + 8);
    swift_retain();
    closure #1 in MLDataTable.filtered(isExcluding:values:in:)(v10, v11, a3, a4, a1 & 1, &v13);
    OUTLINED_FUNCTION_40_14();
  }
  OUTLINED_FUNCTION_19_13();
}

void closure #1 in MLDataTable.filtered(isExcluding:values:in:)(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, void *a6@<X8>)
{
  if (a2)
  {
    _StringGuts.grow(_:)(85);
    v14._object = (void *)0x80000002272D80F0;
    v14._uint64_t countAndFlagsBits = 0xD000000000000052;
    String.append(_:)(v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    v15._uint64_t countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 39;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v17 = swift_allocError();
    void *v18 = 0;
    v18[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_8_4(v17, (uint64_t)v18);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(a1, 0);
    uint64_t v12 = swift_retain();
    uint64_t v13 = CMLTable.filtered(_:columnName:isExcluding:)(v12, a3, a4, a5 & 1);
    if (v6)
    {
      swift_release();
      outlined consume of Result<_DataTable, Error>(a1, 0);
    }
    else
    {
      uint64_t v19 = v13;
      outlined consume of Result<_DataTable, Error>(a1, 0);
      swift_release();
      type metadata accessor for _DataTable();
      char v20 = (void *)OUTLINED_FUNCTION_55_7();
      v20[3] = 0;
      v20[4] = 0;
      v20[2] = v19;
      *a6 = v20;
    }
  }
}

void MLDataTable.join(with:on:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_37_17();
  a19 = v21;
  a20 = v22;
  char v24 = *(void **)v23;
  char v25 = *(unsigned char *)(v23 + 8);
  uint64_t v27 = *(void **)v20;
  char v28 = *(unsigned char *)(v20 + 8);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  switch(*v26)
  {
    case 1:
      uint64_t v33 = 1702131055;
      goto LABEL_6;
    case 2:
      a9 = 1952867692;
      unint64_t v34 = 0xE400000000000000;
      goto LABEL_8;
    case 3:
      unint64_t v35 = 0x7468676972;
      goto LABEL_7;
    default:
      uint64_t v33 = 1701736041;
LABEL_6:
      unint64_t v35 = v33 & 0xFFFF0000FFFFFFFFLL | 0x7200000000;
LABEL_7:
      a9 = v35;
      unint64_t v34 = 0xE500000000000000;
LABEL_8:
      a10 = v34;
      swift_bridgeObjectRetain();
      outlined copy of Result<_DataTable, Error>(v27, v28);
      outlined copy of Result<_DataTable, Error>(v24, v25);
      id v36 = specialized binaryDo<A, B, C>(_:_:_:)(v27, v28, v24, v25, v30, (uint64_t *)&a9);
      char v38 = v37;
      outlined consume of Result<_DataTable, Error>(v24, v25);
      outlined consume of Result<_DataTable, Error>(v27, v28);
      swift_bridgeObjectRelease();
      *(void *)uint64_t v32 = v36;
      *(unsigned char *)(v32 + 8) = v38 & 1;
      OUTLINED_FUNCTION_35_19();
      return;
  }
}

void *closure #1 in MLDataTable.join(with:on:type:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v10 = *a1;
  uint64_t v56 = *a2;
  uint64_t v11 = MEMORY[0x22A676370](0);
  if (!v11)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    OUTLINED_FUNCTION_69_4();
    goto LABEL_36;
  }
  uint64_t v12 = v11;
  int v55 = a4;
  type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v12;
  uint64_t v58 = inited;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v54 = v10;
  if (!v14)
  {
    int v53 = a5;
    _DataTable.columnNames.getter(&v59);
    _DataTable.columnNames.getter(&v59);
    swift_retain_n();
    uint64_t v19 = CMLSequence.size.getter();
    uint64_t v20 = OUTLINED_FUNCTION_12_0(v19);
    swift_release();
    if (!v20) {
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    while (1)
    {
      CMLSequence.value(at:)(v21);
      if (v6) {
        goto LABEL_34;
      }
      Swift::String v22 = CMLFeatureValue.stringValue()();
      uint64_t v6 = v23;
      if (v23) {
        break;
      }
      swift_release();
      swift_retain();
      uint64_t v24 = CMLSequence.size.getter();
      uint64_t v25 = OUTLINED_FUNCTION_12_0(v24);
      swift_release();
      if (v21 >= v25) {
        goto LABEL_32;
      }
      uint64_t v57 = v21;
      swift_retain_n();
      uint64_t v26 = CMLSequence.size.getter();
      uint64_t v27 = OUTLINED_FUNCTION_12_0(v26);
      swift_release();
      if (!v27)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        uint64_t v36 = v57;
        goto LABEL_26;
      }
      uint64_t v21 = 0;
      while (1)
      {
        CMLSequence.value(at:)(v21);
        Swift::String v28 = CMLFeatureValue.stringValue()();
        uint64_t v6 = v29;
        if (v29) {
          goto LABEL_35;
        }
        swift_release();
        swift_retain();
        uint64_t v30 = CMLSequence.size.getter();
        uint64_t v31 = OUTLINED_FUNCTION_12_0(v30);
        swift_release();
        if (v21 >= v31)
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v28._countAndFlagsBits == v22._countAndFlagsBits && v28._object == v22._object)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v33) {
          break;
        }
        ++v21;
        swift_retain();
        uint64_t v34 = CMLSequence.size.getter();
        uint64_t v35 = OUTLINED_FUNCTION_12_0(v34);
        swift_release();
        if (v21 == v35) {
          goto LABEL_22;
        }
      }
      swift_release();
LABEL_25:
      type metadata accessor for CMLFeatureValue();
      swift_bridgeObjectRetain();
      uint64_t v36 = v57;
      uint64_t v37 = CMLFeatureValue.__allocating_init(_:)();
      swift_bridgeObjectRelease();
      CMLSequence.append(_:)(v37);
      uint64_t v6 = 0;
LABEL_26:
      uint64_t v21 = v36 + 1;
      swift_release();
      swift_retain();
      uint64_t v38 = CMLSequence.size.getter();
      uint64_t v39 = OUTLINED_FUNCTION_12_0(v38);
      swift_release();
      if (v21 == v39)
      {
LABEL_27:
        swift_release_n();
        uint64_t v18 = swift_release();
        a5 = v53;
        goto LABEL_28;
      }
    }
LABEL_35:

    swift_release();
    uint64_t v59 = 0;
    unint64_t v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_96();
    uint64_t v59 = v49;
    unint64_t v60 = v48;
    uint64_t v61 = v21;
    v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._uint64_t countAndFlagsBits = 46;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    OUTLINED_FUNCTION_16_35();
    OUTLINED_FUNCTION_118();
    __break(1u);
    while (1)
    {
LABEL_36:
      swift_unexpectedError();
      __break(1u);
    }
  }
  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain();
  uint64_t v15 = a3 + 40;
  do
  {
    swift_bridgeObjectRetain_n();
    uint64_t v16 = CMLFeatureValue.__allocating_init(_:)();
    if (v5) {
      goto LABEL_36;
    }
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    CMLSequence.append(_:)(v17);
    v15 += 16;
    swift_release();
    --v14;
  }
  while (v14);
  uint64_t v18 = swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v40 = *(void *)(v54 + 16);
  uint64_t v41 = *(void *)(v56 + 16);
  uint64_t v43 = *v55;
  uint64_t v42 = v55[1];
  MEMORY[0x270FA5388](v18);
  v52[2] = v40;
  v52[3] = v41;
  v52[4] = v58;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  char v44 = specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in CMLTable.init(joiningMultiple:and:columnNames:method:), (uint64_t)v52, v43, v42);
  if (v6)
  {
    swift_release();
    swift_release();
    swift_release();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v46 = v44;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for CMLTable();
    *(void *)(swift_allocObject() + 16) = v46;
    type metadata accessor for _DataTable();
    unint64_t v47 = (void *)OUTLINED_FUNCTION_55_7();
    uint64_t result = OUTLINED_FUNCTION_71_4(v47);
    *a5 = result;
  }
  return result;
}

BOOL static MLDataTable.JoinType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MLDataTable.JoinType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MLDataTable.JoinType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void closure #1 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)a1[1];
  uint64_t v7 = (uint64_t)(a4 + 2);
  *a4 = *a1;
  a4[1] = (uint64_t)v6;
  char v8 = a3 & 1;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(a2, v8);
  MLDataTable.subscript.getter(v5, v6, v7);
  outlined consume of Result<_DataTable, Error>(a2, v8);
}

void closure #2 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = (void *)a1[2];
  char v6 = *((unsigned char *)a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v5, v6);
  outlined consume of Result<_DataTable, Error>(v5, v6);
  *a2 = v4;
  a2[1] = v3;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v5, v6);
  swift_bridgeObjectRelease();
  MLUntypedColumn.subscript.getter();
  outlined consume of Result<_DataTable, Error>(v5, v6);
}

uint64_t MLDataTable.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)v2 + 8);
  uint64_t v9 = *v2;
  char v10 = v5;
  uint64_t v7 = v3;
  char v8 = v4;
  return MLDataTable.subscript.getter((uint64_t)&v7, a2);
}

void MLDataTable.map<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v10 = *(void **)v5;
  char v11 = *(unsigned char *)(v5 + 8);
  if (v11)
  {
    OUTLINED_FUNCTION_49_8(v10);
    if (!v12)
    {
      __break(1u);
      return;
    }
    uint64_t v13 = v12;
    type metadata accessor for CMLSequence();
    uint64_t v14 = OUTLINED_FUNCTION_6_3();
    *(void *)(v14 + 16) = v13;
    *(unsigned char *)(v14 + 24) = 1;
    outlined consume of Result<_DataTable, Error>(v10, 1);
    uint64_t v15 = MEMORY[0x263F8EE80];
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v10, 0);
    _DataTable.columnNames.getter(&v22);
    outlined consume of Result<_DataTable, Error>(v10, 0);
    uint64_t v14 = v22;
    outlined copy of Result<_DataTable, Error>(v10, 0);
    uint64_t v15 = _DataTable.columnIndexes.getter();
    outlined consume of Result<_DataTable, Error>(v10, 0);
  }
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = v14;
  v16[5] = v15;
  v16[6] = a1;
  v16[7] = a2;
  if (v11)
  {
    uint64_t v22 = (uint64_t)v10;
    outlined copy of Result<_DataTable, Error>(v10, 1);
    outlined copy of Result<_DataTable, Error>(v10, 1);
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v17 = _getErrorEmbeddedNSError<A>(_:)();
    if (v17)
    {
      uint64_t v18 = v17;
      outlined consume of Result<_DataTable, Error>(v10, 1);
    }
    else
    {
      uint64_t v18 = OUTLINED_FUNCTION_85();
      *uint64_t v19 = v22;
    }
    swift_release();
    char v20 = 1;
    outlined consume of Result<_DataTable, Error>(v10, 1);
    swift_release();
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v10, 0);
    swift_retain();
    swift_retain();
    closure #2 in MLDataTable.map<A>(_:)((uint64_t)partial apply for closure #1 in MLDataTable.map<A>(_:), (uint64_t)v16, a3, a4, &v22);
    swift_release();
    outlined consume of Result<_DataTable, Error>(v10, 0);
    swift_release();
    char v20 = 0;
    uint64_t v18 = v22;
  }
  uint64_t v22 = v18;
  char v23 = v20;
  MLDataColumn.init(from:)((uint64_t)&v22, a5);
}

uint64_t closure #1 in MLDataTable.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a7;
  char v23 = a4;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a2;
  v24[1] = a3;
  void v24[2] = a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v23(v24);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    type metadata accessor for CMLFeatureValue();
    uint64_t v19 = CMLFeatureValue.__allocating_init()();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, a6);
    uint64_t v19 = MLDataValueConvertible.featureValue.getter(a6, v22);
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a6);
  }
  return v19;
}

uint64_t closure #2 in MLDataTable.map<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 8))(&v11, a3, a4);
  uint64_t result = CMLTable.apply(transform:type:)(a1, a2, 0x5060403020100uLL >> (8 * v11));
  if (!v5)
  {
    uint64_t v10 = result;
    type metadata accessor for _UntypedColumn();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v10;
    *a5 = result;
  }
  return result;
}

uint64_t MLDataTable.map<A>(_:)()
{
  OUTLINED_FUNCTION_37_17();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_54_9();
  uint64_t v6 = v5;
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v0;
  v7[3] = v4;
  v7[4] = v2;
  v7[5] = v1;
  swift_retain();
  MLDataTable.map<A>(_:)((uint64_t)partial apply for closure #1 in MLDataTable.map<A>(_:), (uint64_t)v7, v0, v4, v6);
  OUTLINED_FUNCTION_35_19();
  return swift_release();
}

uint64_t closure #1 in MLDataTable.map<A>(_:)@<X0>(long long *a1@<X0>, void (*a2)(long long *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *((void *)a1 + 2);
  long long v8 = *a1;
  uint64_t v9 = v6;
  a2(&v8);

  return __swift_storeEnumTagSinglePayload(a4, 0, 1, a3);
}

#error "22722BEDC: call analysis failed (funcsize=54)"

void MLDataTable.fillMissing(columnNamed:with:)(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_47_17();
  if (v6)
  {
    *(void *)&long long v19 = v1;
    OUTLINED_FUNCTION_30_24();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = _getErrorEmbeddedNSError<A>(_:)();
    if (v7)
    {
      long long v8 = (void *)v7;
      OUTLINED_FUNCTION_25_29();
    }
    else
    {
      long long v8 = (void *)OUTLINED_FUNCTION_85();
      void *v17 = v19;
    }
    unsigned __int8 v16 = 1;
    OUTLINED_FUNCTION_25_29();
  }
  else
  {
    uint64_t v9 = v4;
    uint64_t v10 = v3;
    char v11 = *((unsigned char *)v5 + 16);
    uint64_t v12 = v1[2];
    long long v19 = *v5;
    char v20 = v11;
    uint64_t v13 = swift_retain();
    uint64_t v15 = MLDataValue.featureValue.getter(v13, v14);
    void v18[2] = v12;
    v18[3] = MEMORY[0x270FA5388](v15);
    unsigned __int8 v16 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.fillMissing(columnNamed:with:), (uint64_t)v18, v10, v9, (void (*)(void))type metadata accessor for CMLTable, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    swift_release();
    type metadata accessor for _DataTable();
    long long v8 = (void *)OUTLINED_FUNCTION_55_7();
    OUTLINED_FUNCTION_71_4(v8);
    OUTLINED_FUNCTION_10_33(v1);
  }
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 8) = v16;
}

#error "22722C144: call analysis failed (funcsize=50)"

uint64_t MLDataTable.prefix(_:)(uint64_t a1)
{
  return MLDataTable.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

uint64_t MLDataTable.suffix(_:)(uint64_t a1)
{
  return MLDataTable.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

#error "22722C2AC: call analysis failed (funcsize=74)"

void MLDataTable.sort(columnNamed:byIncreasingOrder:)()
{
  OUTLINED_FUNCTION_17_13();
  if (v3)
  {
    uint64_t v13 = v0;
    OUTLINED_FUNCTION_9_39();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_4_26();
    }
    else
    {
      OUTLINED_FUNCTION_85();
      void *v8 = v13;
    }
    OUTLINED_FUNCTION_4_26();
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v1;
    MEMORY[0x270FA5388](v1);
    void v11[2] = v6;
    char v12 = v7 & 1;
    swift_retain();
    uint64_t v9 = specialized String.withCString<A>(_:)((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in CMLTable.sorted(by:increasingOrder:), (uint64_t)v11, v5, v4, (void (*)(void))type metadata accessor for CMLTable, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    type metadata accessor for _DataTable();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_55_7();
    v10[3] = 0;
    v10[4] = 0;
    v10[2] = v9;
    OUTLINED_FUNCTION_10_33(v0);
  }
  OUTLINED_FUNCTION_19_13();
}

void MLDataTable.expand(columnNamed:to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void MLDataTable.condense(columnNamed:to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void MLDataTable.expand(columnNamed:to:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void **)v3;
  if (*(unsigned char *)(v3 + 8))
  {
    char v20 = *(void **)v3;
    outlined copy of Result<_DataTable, Error>(v5, 1);
    id v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = _getErrorEmbeddedNSError<A>(_:)();
    if (v7)
    {
      uint64_t v8 = v7;
      OUTLINED_FUNCTION_56_11();
    }
    else
    {
      uint64_t v8 = OUTLINED_FUNCTION_85();
      void *v17 = v20;
    }
    LOBYTE(v9) = 1;
    OUTLINED_FUNCTION_56_11();
  }
  else
  {
    uint64_t v8 = a2;
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = v19;
    v19[2] = v10;
    void v19[3] = v11;
    void v19[4] = v12;
    swift_retain();
    unsigned __int8 v16 = OUTLINED_FUNCTION_70_5((void *(*)(uint64_t *__return_ptr, void *))v8, v13, v14, v15, (void (*)(void))type metadata accessor for CMLTable, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    if (v8)
    {
      OUTLINED_FUNCTION_40_14();
      LOBYTE(v9) = 1;
    }
    else
    {
      uint64_t v18 = v16;
      type metadata accessor for _DataTable();
      uint64_t v8 = OUTLINED_FUNCTION_55_7();
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 16) = v18;
      OUTLINED_FUNCTION_10_33(v5);
    }
  }
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 8) = (_BYTE)v9;
}

void MLDataTable.playgroundDescription.getter(void *a1@<X8>)
{
  OUTLINED_FUNCTION_47_17();
  if (v3)
  {
    v32[0] = v1;
    outlined copy of Result<_DataTable, Error>(v1, 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    a1[3] = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_25_29();
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    return;
  }
  v32[1] = 0;
  v32[2] = 0xE000000000000000;
  OUTLINED_FUNCTION_42_6();
  _StringGuts.grow(_:)(36);
  swift_retain();
  Swift::Int v4 = CMLTable.rows()();
  swift_release();
  if (v5) {
    goto LABEL_19;
  }
  v32[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x20582073776F7220;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  _DataTable.columnNames.getter(v32);
  swift_retain();
  uint64_t v8 = CMLSequence.size.getter();
  uint64_t v9 = OUTLINED_FUNCTION_12_0(v8);
  swift_release();
  swift_retain();
  uint64_t v10 = CMLSequence.size.getter();
  uint64_t v11 = OUTLINED_FUNCTION_12_0(v10);
  swift_release();
  if (v11 < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_retain();
  uint64_t v12 = CMLSequence.size.getter();
  uint64_t v13 = OUTLINED_FUNCTION_12_0(v12);
  swift_release_n();
  if (v9 < 0 || v13 < v9) {
    goto LABEL_16;
  }
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x80000002272DA970;
  v15._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v15);
  _DataTable.columnNames.getter(v32);
  swift_retain();
  uint64_t v16 = CMLSequence.size.getter();
  uint64_t v17 = OUTLINED_FUNCTION_12_0(v16);
  swift_retain();
  uint64_t v18 = CMLSequence.size.getter();
  uint64_t v19 = OUTLINED_FUNCTION_12_0(v18);
  swift_release();
  if (v19 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    OUTLINED_FUNCTION_0_27();
    swift_unexpectedError();
    __break(1u);
    return;
  }
  swift_retain();
  uint64_t v20 = CMLSequence.size.getter();
  uint64_t v21 = OUTLINED_FUNCTION_12_0(v20);
  swift_release_n();
  if (v17 < 0 || v21 < v17) {
    goto LABEL_18;
  }
  swift_retain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v17);
  uint64_t v22 = MEMORY[0x22A674D80]();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined copy of Result<_DataTable, Error>(v1, 0);
  swift_retain();
  Swift::String v27 = CMLTable.description()();
  if (v26)
  {

    swift_release();
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;
    swift_release();
  }
  OUTLINED_FUNCTION_26_8();
  id v30 = objc_allocWithZone(MEMORY[0x263F089B8]);
  id v31 = @nonobjc NSAttributedString.init(string:attributes:)(countAndFlagsBits, (uint64_t)object, 0);
  a1[3] = type metadata accessor for NSMutableAttributedString();
  OUTLINED_FUNCTION_26_8();
  *a1 = v31;
}

uint64_t MLDataTable.description.getter()
{
  if (*(unsigned char *)(v0 + 8))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    return 0;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v0, 0);
    swift_retain();
    uint64_t countAndFlagsBits = CMLTable.description()()._countAndFlagsBits;
    if (v3)
    {

      swift_release();
      OUTLINED_FUNCTION_21_13();
      return 0;
    }
    else
    {
      uint64_t v1 = countAndFlagsBits;
      swift_release();
      OUTLINED_FUNCTION_21_13();
    }
  }
  return v1;
}

void partial apply for closure #1 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in MLDataTable.subscript.getter(a1, *(void **)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t objectdestroyTm_5()
{
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #2 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, void *a2@<X8>)
{
}

void specialized closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5, void (*a6)(void *__return_ptr, void *))
{
  v11[0] = a1;
  v11[1] = a2;
  a6(v9, v11);
  a3(v9);
  Swift::String v7 = (void *)v9[2];
  char v8 = v10;
  swift_bridgeObjectRelease();
  outlined consume of Result<_DataTable, Error>(v7, v8);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t *a1, char a2, void *a3)
{
  void (*v41)(void **__return_ptr, void *);
  char v42;
  uint64_t (*v43)(void *);
  void (*v44)(void *__return_ptr, id *);
  void v45[2];
  id v46[2];
  void v47[2];
  unsigned __int8 v48;
  void *v49;
  void *v50;
  unsigned __int8 v51;
  void *v52;
  void *v53;
  char v54;
  uint64_t v55;

  uint64_t v4 = v3;
  uint64_t v6 = *a1;
  uint64_t v43 = (uint64_t (*)(void *))a1[3];
  char v44 = (void (*)(void *__return_ptr, id *))a1[1];
  uint64_t v41 = (void (*)(void **__return_ptr, void *))a1[5];
  uint64_t v7 = a1[6];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (!CMLDictionary.size.getter())
  {
LABEL_21:
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    return;
  }
  uint64_t v42 = a2;
  uint64_t v8 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v9 = CMLDictionary.keyAndValue(at:)(v8);
      int v55 = v4;
      if (v4) {
        goto LABEL_24;
      }
      uint64_t v11 = (void *)v9;
      uint64_t v12 = v10;
      swift_retain();
      uint64_t v8 = specialized RandomAccessCollection<>.index(after:)(v8, CMLDictionary.size.getter);
      swift_release();
      v46[0] = v11;
      v46[1] = v12;
      v44(v45, v46);
      swift_release();
      swift_release();
      uint64_t v13 = v6;
      OUTLINED_FUNCTION_59_7();
      if (v43(v47)) {
        break;
      }
      OUTLINED_FUNCTION_42_18();
      uint64_t v14 = CMLDictionary.size.getter();
      uint64_t v4 = v55;
      if (v8 == v14) {
        goto LABEL_21;
      }
    }
    OUTLINED_FUNCTION_59_7();
    v41(&v49, v47);
    OUTLINED_FUNCTION_42_18();
    char v15 = v51;
    if (v51 == 255) {
      goto LABEL_21;
    }
    uint64_t v17 = v49;
    uint64_t v16 = v50;
    v47[0] = v49;
    v47[1] = v50;
    unint64_t v48 = v51;
    uint64_t v37 = v52;
    uint64_t v38 = v53;
    char v39 = v54;
    unint64_t v19 = OUTLINED_FUNCTION_72_3();
    uint64_t v20 = *(void *)(v7 + 16);
    BOOL v21 = (v18 & 1) == 0;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_unexpectedError();
      __break(1u);
LABEL_25:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_26;
    }
    char v22 = v18;
    if (*(void *)(v7 + 24) < v20 + v21) {
      break;
    }
    if (v42)
    {
      if (v18) {
        goto LABEL_19;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLDataValue, MLDataValue>);
      _NativeDictionary.copy()();
      if (v22) {
        goto LABEL_19;
      }
    }
LABEL_15:
    Swift::String v25 = (void *)*a3;
    *(void *)(*a3 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    uint64_t v26 = v25[6] + 24 * v19;
    *(void *)uint64_t v26 = v17;
    *(void *)(v26 + 8) = v16;
    *(unsigned char *)(v26 + 16) = v15;
    uint64_t v27 = v25[7] + 24 * v19;
    *(void *)uint64_t v27 = v37;
    *(void *)(v27 + 8) = v38;
    *(unsigned char *)(v27 + 16) = v39;
    uint64_t v28 = v25[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_23;
    }
    v25[2] = v30;
    uint64_t v6 = v13;
    uint64_t v31 = CMLDictionary.size.getter();
    uint64_t v42 = 1;
    uint64_t v4 = v55;
    if (v8 == v31) {
      goto LABEL_21;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  unint64_t v23 = OUTLINED_FUNCTION_72_3();
  if ((v22 & 1) != (v24 & 1)) {
    goto LABEL_25;
  }
  unint64_t v19 = v23;
  if ((v22 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v32 = v16;
  char v33 = (void *)swift_allocError();
  swift_willThrow();
  v46[0] = v33;
  id v34 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of MLDataValue(v37, v38, v39);
    outlined consume of MLDataValue(v17, v32, v15);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    return;
  }
LABEL_26:
  v45[0] = 0;
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v35._object = (void *)0x80000002272D7190;
  v35._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)();
  v36._uint64_t countAndFlagsBits = 39;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  unint64_t v8 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
    return;
  }
  unint64_t v9 = 0;
  char v10 = (char *)(a1 + 48);
  uint64_t v32 = a3;
  uint64_t v33 = a3 - a2;
  uint64_t v31 = a2;
  while (1)
  {
    if (v9 >= v8)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_29;
    }
    if (v33 == v9) {
      goto LABEL_21;
    }
    if (a3 < a2) {
      goto LABEL_24;
    }
    if ((uint64_t)(a2 + v9) >= a3) {
      goto LABEL_25;
    }
    uint64_t v11 = (void *)*((void *)v10 - 2);
    uint64_t v12 = (void *)*((void *)v10 - 1);
    int v13 = *v10;
    outlined copy of MLDataValue(v11, v12, *v10);
    if (v13 == 255) {
      goto LABEL_21;
    }
    uint64_t v35 = a2 + v9;
    uint64_t v14 = (void *)*a5;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11, (unint64_t)v12, v13);
    uint64_t v17 = v14[2];
    BOOL v18 = (v15 & 1) == 0;
    if (__OFADD__(v17, v18)) {
      goto LABEL_26;
    }
    char v19 = v15;
    if (v14[3] < v17 + v18) {
      break;
    }
    if (a4)
    {
      if (v15) {
        goto LABEL_19;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLDataValue, Int>);
      _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_19;
      }
    }
LABEL_15:
    char v22 = (void *)*a5;
    *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v23 = v22[6] + 24 * v16;
    *(void *)uint64_t v23 = v11;
    *(void *)(v23 + 8) = v12;
    *(unsigned char *)(v23 + 16) = v13;
    *(void *)(v22[7] + 8 * v16) = v35;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_27;
    }
    ++v9;
    void v22[2] = v26;
    unint64_t v8 = *(void *)(a1 + 16);
    v10 += 24;
    a4 = 1;
    a2 = v31;
    a3 = v32;
    if (v9 == v8) {
      goto LABEL_21;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11, (unint64_t)v12, v13);
  if ((v19 & 1) != (v21 & 1)) {
    goto LABEL_28;
  }
  unint64_t v16 = v20;
  if ((v19 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v27 = (void *)swift_allocError();
  swift_willThrow();
  id v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of MLDataValue(v11, v12, v13);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_29:
  _StringGuts.grow(_:)(30);
  v29._object = (void *)0x80000002272D7190;
  v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)();
  v30._uint64_t countAndFlagsBits = 39;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, void (*a2)(Swift::String *__return_ptr, Swift::String *), uint64_t a3, char a4, void *a5)
{
  void (*v51)(Swift::String *__return_ptr, Swift::String *);
  uint64_t v52;
  void *v53;
  char v54;
  Swift::String v56;
  Swift::String v57;
  void *v58;
  char v59;
  id v60;

  uint64_t v6 = v5;
  Swift::String v51 = a2;
  swift_retain_n();
  unint64_t v52 = a3;
  swift_retain();
  uint64_t v9 = CMLSequence.size.getter();
  uint64_t v10 = specialized RandomAccessCollection<>.distance(from:to:)(0, v9);
  swift_release();
  if (!v10)
  {
LABEL_20:
    swift_release_n();
    swift_release_n();
    return;
  }
  uint64_t v11 = 0;
  while (1)
  {
    CMLSequence.value(at:)(v11);
    if (v6) {
      goto LABEL_24;
    }
    Swift::String v12 = CMLFeatureValue.stringValue()();
    uint64_t v6 = v13;
    if (v13) {
      goto LABEL_25;
    }
    swift_release();
    swift_retain();
    uint64_t v14 = CMLSequence.size.getter();
    uint64_t v15 = specialized RandomAccessCollection<>.distance(from:to:)(0, v14);
    swift_release();
    if (v11 >= v15)
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_unexpectedError();
      __break(1u);
LABEL_25:

      swift_release();
      v56._uint64_t countAndFlagsBits = 0;
      v56._uint64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v56._uint64_t countAndFlagsBits = 0xD000000000000022;
      v56._uint64_t object = (void *)0x80000002272D40C0;
      v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._uint64_t countAndFlagsBits = 46;
      v45._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      goto LABEL_26;
    }
    uint64_t v56 = v12;
    v51(&v57, &v56);
    swift_bridgeObjectRelease();
    uint64_t object = (uint64_t)v57._object;
    if (!v57._object) {
      goto LABEL_20;
    }
    char v17 = a4;
    uint64_t countAndFlagsBits = v57._countAndFlagsBits;
    int v53 = v58;
    uint64_t v56 = v57;
    uint64_t v54 = v59;
    char v19 = (void *)*a5;
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v57._countAndFlagsBits, (uint64_t)v57._object);
    uint64_t v28 = v19[2];
    BOOL v29 = (v20 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      goto LABEL_22;
    }
    char v31 = v20;
    if (v19[3] >= v30)
    {
      if (v17)
      {
        if (v20) {
          break;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLUntypedColumn>);
        _NativeDictionary.copy()();
        if (v31) {
          break;
        }
      }
      goto LABEL_14;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, v17 & 1, v21, v22, v23, v24, v25, v26, v48, v49, v50, v51, v52, SBYTE4(v52));
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, object);
    if ((v31 & 1) != (v33 & 1)) {
      goto LABEL_27;
    }
    unint64_t v27 = v32;
    if (v31) {
      break;
    }
LABEL_14:
    id v34 = (void *)*a5;
    *(void *)(*a5 + 8 * (v27 >> 6) + 64) |= 1 << v27;
    uint64_t v35 = (uint64_t *)(v34[6] + 16 * v27);
    *uint64_t v35 = countAndFlagsBits;
    v35[1] = object;
    uint64_t v36 = v34[7] + 16 * v27;
    *(void *)uint64_t v36 = v53;
    *(unsigned char *)(v36 + 8) = v54;
    uint64_t v37 = v34[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_23;
    }
    ++v11;
    v34[2] = v39;
    swift_retain();
    uint64_t v40 = CMLSequence.size.getter();
    uint64_t v41 = specialized RandomAccessCollection<>.distance(from:to:)(0, v40);
    swift_release();
    a4 = 1;
    if (v11 == v41) {
      goto LABEL_20;
    }
  }
  uint64_t v42 = (void *)swift_allocError();
  swift_willThrow();
  unint64_t v60 = v42;
  id v43 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    while (1)
    {
      _StringGuts.grow(_:)(30);
      v46._uint64_t object = (void *)0x80000002272D7190;
      v46._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v46);
      _print_unlocked<A, B>(_:_:)();
      v47._uint64_t countAndFlagsBits = 39;
      v47._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v47);
LABEL_26:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_27:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
  swift_release();
  swift_release();
  outlined consume of Result<_DataTable, Error>(v53, v54);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v47 = a1[2];
  if (v47 && a2 != a3)
  {
    if (a3 >= a2)
    {
      uint64_t v43 = v6;
      uint64_t v12 = a1[4];
      uint64_t v11 = a1[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v45 = a2 - a3;
      if (a2 >= a3)
      {
LABEL_27:
        __break(1u);
      }
      else
      {
        int v13 = a1 + 7;
        unint64_t v14 = 1;
        uint64_t v44 = a3;
        Swift::String v46 = a1;
        while (1)
        {
          uint64_t v15 = (void *)*a5;
          unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
          uint64_t v24 = v15[2];
          BOOL v25 = (v16 & 1) == 0;
          uint64_t v26 = v24 + v25;
          if (__OFADD__(v24, v25)) {
            break;
          }
          char v27 = v16;
          if (v15[3] >= v26)
          {
            if (a4)
            {
              if (v16) {
                goto LABEL_24;
              }
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
              _NativeDictionary.copy()();
              if (v27) {
                goto LABEL_24;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, a4 & 1, v17, v18, v19, v20, v21, v22, v41, v42, v43, v44, v45, SBYTE4(v45));
            unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
            if ((v27 & 1) != (v29 & 1)) {
              goto LABEL_32;
            }
            unint64_t v23 = v28;
            if (v27)
            {
LABEL_24:
              uint64_t v37 = (void *)swift_allocError();
              swift_willThrow();
              id v38 = v37;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
              if (swift_dynamicCast()) {
                goto LABEL_33;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();

              return;
            }
          }
          uint64_t v30 = a2 + v14;
          char v31 = (void *)*a5;
          *(void *)(*a5 + 8 * (v23 >> 6) + 64) |= 1 << v23;
          unint64_t v32 = (uint64_t *)(v31[6] + 16 * v23);
          *unint64_t v32 = v12;
          v32[1] = v11;
          *(void *)(v31[7] + 8 * v23) = a2 + v14 - 1;
          uint64_t v33 = v31[2];
          BOOL v34 = __OFADD__(v33, 1);
          uint64_t v35 = v33 + 1;
          if (v34) {
            goto LABEL_29;
          }
          v31[2] = v35;
          if (v47 == v14) {
            goto LABEL_26;
          }
          if (v14 >= v46[2]) {
            goto LABEL_30;
          }
          if (!(v45 + v14))
          {
LABEL_26:
            swift_bridgeObjectRelease_n();
            return;
          }
          ++v14;
          uint64_t v12 = *(v13 - 1);
          uint64_t v11 = *v13;
          swift_bridgeObjectRetain();
          v13 += 2;
          a4 = 1;
          if (v30 < a2 || v30 >= v44) {
            goto LABEL_27;
          }
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    __break(1u);
LABEL_32:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_33:
    _StringGuts.grow(_:)(30);
    v39._uint64_t object = (void *)0x80000002272D7190;
    v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v39);
    _print_unlocked<A, B>(_:_:)();
    v40._uint64_t countAndFlagsBits = 39;
    v40._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized closure #1 in Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void *_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq58CreateML19CMLFeatureValueTypeO_Tg507_sSRys4f5VGxs5e29_pIgyrzo_ACxsAD_pIegyrzr_lTR8h4ML19jkL5O_TG5SRyAGGAMsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    uint64_t result = a3(&var2);
    if (!v3) {
      return (void *)var2;
    }
  }
  else
  {
    uint64_t result = ((void *(*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      return (void *)BYTE1(var2);
    }
  }
  return result;
}

uint64_t specialized LazyMapSequence.underestimatedCount.getter()
{
  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  swift_release();
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  uint64_t result = swift_release();
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v5 = CMLSequence.size.getter();
    uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v5);
    uint64_t result = swift_release();
    if ((v1 & 0x8000000000000000) == 0 && v6 >= v1) {
      return v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Sequence<>.contains(_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized closure #1 in Sequence<>.contains(_:)(*a1, a1[1], *a2, a2[1]) & 1;
}

void specialized closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t *a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  specialized closure #1 in LazyMapSequence<>.map<A>(_:)(*a1, a1[1], a2, a3, *(void *)a4, *(void (**)(void *__return_ptr, void *))(a4 + 8));
}

uint64_t sub_22722DD50()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for specialized closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t *a1)
{
  specialized closure #1 in LazyMapSequence<>.map<A>(_:)(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t partial apply for closure #1 in CMLTable.columnType(name:)(uint64_t a1)
{
  return closure #1 in CMLTable.columnType(name:)(a1, v1);
}

uint64_t sub_22722DDC0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in MLDataTable.map<A>(_:)(uint64_t a1)
{
  return closure #1 in MLDataTable.map<A>(_:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void (**)(void *))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_22722DE18()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in MLDataTable.map<A>(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in MLDataTable.map<A>(_:)(a1, *(void (**)(long long *))(v2 + 32), *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in CMLTable.fillMissing(columnNamed:with:)(uint64_t a1)
{
  return closure #1 in CMLTable.fillMissing(columnNamed:with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLTable.sorted(by:increasingOrder:)(uint64_t a1)
{
  return closure #1 in CMLTable.sorted(by:increasingOrder:)(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

void *partial apply for closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in CMLTable.stack(columnName:to:)(a1, v2[2], v2[3], v2[4], a2);
}

void *partial apply for closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in CMLTable.unstack(columnName:newColumnName:)(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t type metadata accessor for NSMutableAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableAttributedString;
  if (!lazy cache variable for type metadata for NSMutableAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLDataTable.JoinType and conformance MLDataTable.JoinType()
{
  unint64_t result = lazy protocol witness table cache variable for type MLDataTable.JoinType and conformance MLDataTable.JoinType;
  if (!lazy protocol witness table cache variable for type MLDataTable.JoinType and conformance MLDataTable.JoinType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.JoinType and conformance MLDataTable.JoinType);
  }
  return result;
}

uint64_t sub_22722DF70()
{
  return 0;
}

uint64_t sub_22722DF88()
{
  return 16;
}

__n128 sub_22722DF94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void destroy for MLDataTable(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for MLDataTable()
{
  return &type metadata for MLDataTable;
}

unsigned char *storeEnumTagSinglePayload for MLDataTable.JoinType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22722E0A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.JoinType()
{
  return &type metadata for MLDataTable.JoinType;
}

void outlined consume of (MLDataValue, MLDataValue)?(void *a1, void *a2, char a3, void *a4, void *a5, char a6)
{
  if (a3 != -1)
  {
    outlined consume of MLDataValue(a1, a2, a3);
    outlined consume of MLDataValue(a4, a5, a6);
  }
}

uint64_t outlined init with take of (key: String, value: MLDataValueConvertible)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in CMLTable.init(joiningMultiple:and:columnNames:method:)(uint64_t a1)
{
  return closure #1 in CMLTable.init(joiningMultiple:and:columnNames:method:)(a1, v1[2], v1[3], v1[4]);
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t partial apply for closure #1 in CMLTable.removeColumn(name:)(uint64_t a1)
{
  return closure #1 in CMLTable.removeColumn(name:)(a1, v1);
}

void OUTLINED_FUNCTION_0_34()
{
  *(void *)(v2 + 8 * (v0 >> 6) + 64) |= 1 << v0;
  unsigned int v4 = (void *)(*(void *)(v2 + 48) + 16 * v0);
  *unsigned int v4 = v3;
  v4[1] = v1;
}

unint64_t OUTLINED_FUNCTION_1_52()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

void OUTLINED_FUNCTION_3_60(void *a1)
{
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = v1;
  outlined consume of Result<_DataTable, Error>(v2, 0);
}

BOOL OUTLINED_FUNCTION_4_55(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v14, v15);
}

void OUTLINED_FUNCTION_8_37()
{
  outlined copy of Result<_DataTable, Error>(v0, 0);
  _DataTable.columnNamesDidChange()();
}

id OUTLINED_FUNCTION_9_39()
{
  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

void OUTLINED_FUNCTION_10_33(void *a1)
{
}

unint64_t OUTLINED_FUNCTION_11_40()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

void OUTLINED_FUNCTION_19_31()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

double OUTLINED_FUNCTION_20_34(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 1;
  return result;
}

void OUTLINED_FUNCTION_21_35()
{
  MLDataTable.willMutate()();
}

void OUTLINED_FUNCTION_24_30(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + v2) = v1;
}

void OUTLINED_FUNCTION_25_29()
{
  outlined consume of Result<_DataTable, Error>(v0, 1);
}

id OUTLINED_FUNCTION_30_24()
{
  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_22()
{
  return swift_unexpectedError();
}

void OUTLINED_FUNCTION_40_14()
{
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_41_14()
{
  return swift_release();
}

void OUTLINED_FUNCTION_42_18()
{
  outlined consume of (MLDataValue, MLDataValue)?(v3, v4, v5, v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_45_15(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return type metadata accessor for _DataTable();
}

void OUTLINED_FUNCTION_49_8(void *a1)
{
  outlined copy of Result<_DataTable, Error>(a1, 1);
  JUMPOUT(0x22A676370);
}

void OUTLINED_FUNCTION_52_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  a9 = v10;
  a10 = v11;
  MLDataTable.setColumnImpl(newColumn:named:)(&a9);
}

void OUTLINED_FUNCTION_53_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  a9 = v11;
  a10 = v10;
  MLDataTable.setColumnImpl(newColumn:named:)(&a9);
}

void OUTLINED_FUNCTION_56_11()
{
  outlined consume of Result<_DataTable, Error>(v0, 1);
}

uint64_t OUTLINED_FUNCTION_57_9()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_58_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60_5()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_63_5()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t *OUTLINED_FUNCTION_64_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void OUTLINED_FUNCTION_65_4()
{
  outlined consume of Result<_DataTable, Error>(v0, v1);
}

void OUTLINED_FUNCTION_66_2(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = v14;
  uint64_t v17 = v13;
  String.append(_:)(*(Swift::String *)&v16);
}

void OUTLINED_FUNCTION_68_4()
{
  _StringGuts.grow(_:)(37);
}

uint64_t OUTLINED_FUNCTION_69_4()
{
  return v0;
}

void *OUTLINED_FUNCTION_70_5(void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(void))
{
  return specialized String.withCString<A>(_:)(a1, v6, v8, v7, a5, a6);
}

void *OUTLINED_FUNCTION_71_4(void *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = v1;
  return result;
}

unint64_t OUTLINED_FUNCTION_72_3()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0, v2);
}

id OUTLINED_FUNCTION_75_1()
{
  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

uint64_t String.featureValue.getter()
{
  return CMLFeatureValue.__allocating_init(_:)();
}

#error "22722E7EC: call analysis failed (funcsize=27)"

#error "22722E858: call analysis failed (funcsize=26)"

uint64_t MLDataValueConvertible.featureValue.getter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = OUTLINED_FUNCTION_2_60(v5, v16);
  v7(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureValueConvertible);
  if (swift_dynamicCast())
  {
    outlined init with take of BinaryFloatingPoint(&v16, (uint64_t)&v19);
    __swift_project_boxed_opaque_existential_1(&v19, v21);
    uint64_t v8 = OUTLINED_FUNCTION_6_42();
    uint64_t v10 = v9(v8);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v19);
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    outlined destroy of (key: String, value: Any?)((uint64_t)&v16, &demangling cache variable for type metadata for FeatureValueConvertible?);
    uint64_t v11 = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v19, a1, a2);
    long long v12 = v19;
    char v13 = v20;
    long long v16 = v19;
    LOBYTE(v17) = v20;
    uint64_t v10 = MLDataValue.featureValue.getter(v11, v14);
    outlined consume of MLDataValue((void *)v12, *((id *)&v12 + 1), v13);
  }
  return v10;
}

uint64_t Int.dataValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

void Double.dataValue.getter(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t String.dataValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t static MLDataValueConvertible.makeInstance(featureValue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = dynamic_cast_existential_1_conditional(v3);
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    uint64_t v25 = a1;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    uint64_t v12 = type metadata accessor for Optional();
    uint64_t v24 = (uint64_t)&v24;
    OUTLINED_FUNCTION_0();
    uint64_t v14 = v13;
    MEMORY[0x270FA5388](v15);
    long long v17 = (char *)&v24 - v16;
    uint64_t v18 = swift_retain();
    v11(v18, v9, v10);
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
    }
    else
    {
      *((void *)&v27 + 1) = v9;
      uint64_t v28 = v10;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v26);
      (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(boxed_opaque_existential_0, v17, v9);
    }
    uint64_t v22 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureValueConvertible?);
    int v23 = swift_dynamicCast();
    return __swift_storeEnumTagSinglePayload(a3, v23 ^ 1u, 1, v22);
  }
  else
  {
    uint64_t v19 = swift_retain();
    MLDataValue.init(_:)(v19, (uint64_t)&v26);
    long long v29 = v26;
    char v30 = v27;
    return (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a2 + 16))(&v29, a1, a2);
  }
}

uint64_t Double.init(from:)()
{
  specialized handling<A, B>(_:_:)();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t String.init(from:)()
{
  uint64_t countAndFlagsBits = CMLFeatureValue.stringValue()()._countAndFlagsBits;
  swift_release();
  if (v1)
  {

    return 0;
  }
  return countAndFlagsBits;
}

#error "22722ED24: call analysis failed (funcsize=26)"

uint64_t MLDataValueConvertible.featureColumn.getter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = OUTLINED_FUNCTION_2_60(v5, v13);
  v7(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMLColumnConvertible);
  if (swift_dynamicCast())
  {
    outlined init with take of BinaryFloatingPoint(v14, (uint64_t)v16);
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    uint64_t v8 = OUTLINED_FUNCTION_6_42();
    uint64_t v10 = v9(v8);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  }
  else
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of (key: String, value: Any?)((uint64_t)v14, &demangling cache variable for type metadata for CMLColumnConvertible?);
    type metadata accessor for CMLColumn();
    uint64_t v11 = MLDataValueConvertible.featureValue.getter(a1, a2);
    return CMLColumn.__allocating_init(repeating:count:)(v11, 1);
  }
  return v10;
}

void *Int.init(from:)(uint64_t a1)
{
  double result = (void *)OUTLINED_FUNCTION_4_56(a1);
  if (v1) {
    return (void *)OUTLINED_FUNCTION_5_51(result, v3);
  }
  return result;
}

void *protocol witness for MLDataValueConvertible.init(from:) in conformance Int@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = Int.init(from:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for MLDataValueConvertible.dataValue.getter in conformance Int@<X0>(uint64_t a1@<X8>)
{
  return Int.dataValue.getter(*v1, a1);
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance Int@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = Int.init(from:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Int()
{
  return Int.featureValue.getter(*v0);
}

void static Bool.dataValueType.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Bool.init(from:)(uint64_t a1)
{
  char v2 = *(void **)a1;
  if (!*(unsigned char *)(a1 + 16)) {
    return v2 != 0;
  }
  outlined consume of MLDataValue(v2, *(id *)(a1 + 8), *(unsigned char *)(a1 + 16));
  return 2;
}

uint64_t Bool.dataValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result & 1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

BOOL Bool.init(from:)(uint64_t a1)
{
  uint64_t v1 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  swift_release();
  return v1 != 0;
}

uint64_t protocol witness for MLDataValueConvertible.init(from:) in conformance Bool@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = Bool.init(from:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for MLDataValueConvertible.init() in conformance Bool(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for MLDataValueConvertible.dataValue.getter in conformance Bool@<X0>(uint64_t a1@<X8>)
{
  return Bool.dataValue.getter(*v1, a1);
}

BOOL protocol witness for FeatureValueConvertible.init(from:) in conformance Bool@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = Bool.init(from:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Bool()
{
  return Bool.featureValue.getter(*v0);
}

void *Int64.init(from:)(uint64_t a1)
{
  BOOL result = (void *)OUTLINED_FUNCTION_4_56(a1);
  if (v1) {
    return (void *)OUTLINED_FUNCTION_5_51(result, v3);
  }
  return result;
}

uint64_t Int.init(from:)(uint64_t a1)
{
  uint64_t v1 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  swift_release();
  return v1;
}

#error "22722F124: call analysis failed (funcsize=26)"

void *protocol witness for MLDataValueConvertible.init(from:) in conformance Int64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = Int64.init(from:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Int64()
{
  return Int64.featureValue.getter(*v0);
}

void static Double.dataValueType.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void *Double.init(from:)(uint64_t a1)
{
  BOOL result = (void *)OUTLINED_FUNCTION_4_56(a1);
  if (v1 != 1) {
    return (void *)OUTLINED_FUNCTION_5_51(result, v3);
  }
  return result;
}

void *protocol witness for MLDataValueConvertible.init(from:) in conformance Double@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = Double.init(from:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void protocol witness for MLDataValueConvertible.dataValue.getter in conformance Double(uint64_t a1@<X8>)
{
  Double.dataValue.getter(a1, *v1);
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance Double@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = Double.init(from:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Double()
{
  return Double.featureValue.getter(*v0);
}

void static String.dataValueType.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void *String.init(from:)(uint64_t a1)
{
  uint64_t result = *(void **)a1;
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 != 2)
  {
    outlined consume of MLDataValue(result, *(id *)(a1 + 8), v3);
    return 0;
  }
  return result;
}

void *protocol witness for MLDataValueConvertible.init(from:) in conformance String@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = String.init(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void protocol witness for MLDataValueConvertible.init() in conformance String(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t protocol witness for MLDataValueConvertible.dataValue.getter in conformance String@<X0>(uint64_t a1@<X8>)
{
  return String.dataValue.getter(*v1, v1[1], a1);
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = String.init(from:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance String()
{
  return String.featureValue.getter();
}

uint64_t dispatch thunk of static MLDataValueConvertible.dataValueType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MLDataValueConvertible.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of MLDataValueConvertible.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MLDataValueConvertible.dataValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

char *OUTLINED_FUNCTION_2_60@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_3_61()
{
  return CMLFeatureValue.init(rawValue:ownsValue:)(v0, 1);
}

uint64_t OUTLINED_FUNCTION_4_56(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_5_51@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  outlined consume of MLDataValue(a1, *(id *)(a2 + 8), v2);
  return 0;
}

uint64_t OUTLINED_FUNCTION_6_42()
{
  return v0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d69ML30MLLogisticRegressionClassifierV5ModelV6export16internalMetadata20hi19ADVSDyS2SGz_tKFAH18jk5VAA16fG54Vcfu1_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAnLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v17 = type metadata accessor for FeatureDescription();
  uint64_t v3 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    v16[1] = v1;
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v18;
    v16[2] = v3 + 32;
    uint64_t v8 = (char *)(a1 + 56);
    do
    {
      uint64_t v9 = *((void *)v8 - 3);
      uint64_t v10 = *((void *)v8 - 2);
      uint64_t v11 = *((void *)v8 - 1);
      char v12 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      ColumnDescriptor.featureDescription.getter(v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      uint64_t v18 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v18;
      }
      v8 += 32;
      *(void *)(v7 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v14, v5, v17);
      --v6;
    }
    while (v6);
  }
  return v7;
}

void MLLogisticRegressionClassifier.Model.export(internalMetadata:)(uint64_t a1@<X8>)
{
  uint64_t v107 = a1;
  uint64_t v103 = type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_0();
  uint64_t v102 = v2;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_33_0();
  uint64_t v104 = v4;
  uint64_t v100 = type metadata accessor for LinearClassifierConfiguration.ClassLabels();
  OUTLINED_FUNCTION_0();
  uint64_t v99 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v7);
  uint64_t v113 = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v116 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_49();
  uint64_t v106 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_17_3((uint64_t)v94 - v12);
  type metadata accessor for LinearClassifierConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v111 = v14;
  uint64_t v112 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v115 = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?);
  MEMORY[0x270FA5388](v16 - 8);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v17);
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v108 = v19;
  uint64_t v109 = v18;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_49();
  uint64_t v105 = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v114 = (char *)v94 - v22;
  uint64_t v23 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v118 = v24;
  MEMORY[0x270FA5388](v25);
  long long v27 = (char *)v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v117 = v29;
  MEMORY[0x270FA5388](v30);
  unint64_t v32 = (char *)v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v119 = v34;
  uint64_t v120 = v33;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_49();
  uint64_t v110 = v35;
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  uint64_t v38 = MEMORY[0x270FA5388](v37);
  Swift::String v40 = (char *)v94 - v39;
  MEMORY[0x270FA5388](v38);
  uint64_t v42 = (char *)v94 - v41;
  uint64_t v43 = *(void *)(v1 + 16);
  if (!v43) {
    goto LABEL_13;
  }
  uint64_t v44 = v121;
  Swift::Int v45 = specialized FeatureVectorizer.Transformer.exportEncoders()(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32));
  if (!v44)
  {
    v94[1] = v43;
    Swift::Int v121 = v45;
    uint64_t v95 = v42;
    uint64_t v96 = (uint64_t *)v1;
    Swift::String v46 = self;
    id v47 = objc_msgSend(v46, sel_defaultManager);
    NSFileManager.createTemporaryModelDirectory()();
    if (v48)
    {
      swift_bridgeObjectRelease();
    }
    else
    {

      id v49 = objc_msgSend(v46, sel_defaultManager);
      NSFileManager.temporaryModelDirectory.getter();

      UUID.init()();
      uint64_t v50 = UUID.uuidString.getter();
      uint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v32, v28);
      uint64_t v122 = v50;
      uint64_t v123 = v52;
      uint64_t v53 = v118;
      (*(void (**)(char *, void, uint64_t))(v118 + 104))(v27, *MEMORY[0x263F06E50], v23);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v23);
      swift_bridgeObjectRelease();
      uint64_t v55 = v119;
      uint64_t v54 = v120;
      uint64_t v56 = *(void (**)(void))(v119 + 8);
      OUTLINED_FUNCTION_11_28();
      v56();
      uint64_t v57 = v95;
      URL.appendingPathExtension(_:)();
      OUTLINED_FUNCTION_11_28();
      v56();
      uint64_t v58 = type metadata accessor for MLLogisticRegressionClassifier.Model();
      BaseLogisticRegressionClassifierModel.export(to:)();
      uint64_t v1 = 0;
      Swift::String v40 = v110;
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v110, v57, v54);
      uint64_t v28 = (uint64_t)v114;
      Model.init(contentsOf:)();
      uint64_t v119 = 0;
      uint64_t v59 = v97;
      specialized BidirectionalCollection.last.getter(v121);
      uint64_t v60 = v109;
      if (__swift_getEnumTagSinglePayload(v59, 1, v109) == 1)
      {
        __break(1u);
        goto LABEL_13;
      }
      Model.outputs.getter();
      uint64_t v61 = v108 + 8;
      uint64_t v117 = *(void *)(v108 + 8);
      ((void (*)(uint64_t, uint64_t))v117)(v59, v60);
      Model.inputs.setter();
      int v62 = v96;
      uint64_t v64 = *v96;
      uint64_t v63 = v96[1];
      swift_bridgeObjectRetain();
      Model.predictedFeatureName.setter();
      uint64_t v97 = v64;
      uint64_t v122 = v64;
      uint64_t v123 = v63;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_1_39();
      Model.predictedProbabilitiesName.setter();
      Dictionary.init(dictionaryLiteral:)();
      Model.metadata.setter();
      Swift::String v40 = v98;
      Model.kind.getter();
      uint64_t v1 = v116;
      uint64_t v28 = v113;
      int v65 = (*(uint64_t (**)(char *, uint64_t))(v116 + 88))(v40, v113);
      int v66 = *MEMORY[0x263F533D8];
      LODWORD(v110) = v65;
      if (v65 != v66)
      {
        while (1)
        {
          uint64_t v93 = *(void (**)(char *, uint64_t))(v1 + 8);
          v1 += 8;
          v93(v40, v28);
LABEL_13:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      uint64_t v118 = v61;
      (*(void (**)(char *, uint64_t))(v1 + 96))(v40, v28);
      (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v115, v40, v112);
      int v67 = (char *)v62 + *(int *)(v58 + 28);
      char v68 = v67[8];
      void *v101 = *(void *)v67;
      if (v68)
      {
        uint64_t v69 = OUTLINED_FUNCTION_9_29();
        v70(v69);
        swift_bridgeObjectRetain();
        LinearClassifierConfiguration.classLabels.setter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        uint64_t v71 = type metadata accessor for FeatureDescription();
        OUTLINED_FUNCTION_1(v71);
        *(_OWORD *)(OUTLINED_FUNCTION_7_34() + 16) = xmmword_2272CB4D0;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_29();
        FeatureType.StringParameters.init(optional:)();
        uint64_t v72 = OUTLINED_FUNCTION_5_37();
        v73(v72);
        OUTLINED_FUNCTION_4_43();
        uint64_t v122 = v28;
        uint64_t v123 = v63;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_1_39();
        OUTLINED_FUNCTION_11_29();
        static FeatureType.dictionaryWithStringKeys(optional:)();
      }
      else
      {
        uint64_t v74 = OUTLINED_FUNCTION_9_29();
        v75(v74);
        swift_bridgeObjectRetain();
        LinearClassifierConfiguration.classLabels.setter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        uint64_t v76 = type metadata accessor for FeatureDescription();
        OUTLINED_FUNCTION_1(v76);
        *(_OWORD *)(OUTLINED_FUNCTION_7_34() + 16) = xmmword_2272CB4D0;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_29();
        FeatureType.IntParameters.init(optional:)();
        uint64_t v77 = OUTLINED_FUNCTION_5_37();
        v78(v77);
        OUTLINED_FUNCTION_4_43();
        uint64_t v122 = v28;
        uint64_t v123 = v63;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_1_39();
        OUTLINED_FUNCTION_11_29();
        static FeatureType.dictionaryWithIntKeys(optional:)();
      }
      FeatureDescription.init(name:type:description:)();
      uint64_t v79 = v114;
      Model.outputs.setter();
      uint64_t v80 = v106;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v106, v115, v112);
      uint64_t v81 = *(void (**)(uint64_t, void, uint64_t))(v116 + 104);
      v116 += 104;
      uint64_t v104 = v81;
      v81(v80, v110, v113);
      uint64_t v82 = v79;
      Model.kind.setter();
      uint64_t v83 = v105;
      Model.init()();
      Model.specificationVersion.setter();
      uint64_t v84 = swift_bridgeObjectRetain();
      uint64_t v85 = v119;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d69ML30MLLogisticRegressionClassifierV5ModelV6export16internalMetadata20hi19ADVSDyS2SGz_tKFAH18jk5VAA16fG54Vcfu1_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAnLTf3nnnpk_nTf1cn_n(v84);
      uint64_t v119 = v85;
      swift_bridgeObjectRelease();
      Model.inputs.setter();
      Model.outputs.getter();
      Model.outputs.setter();
      uint64_t v86 = *v96;
      uint64_t v87 = v96[1];
      swift_bridgeObjectRetain();
      Model.predictedFeatureName.setter();
      uint64_t v122 = v86;
      uint64_t v123 = v87;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_1_39();
      Model.predictedProbabilitiesName.setter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
      uint64_t v88 = v108;
      unint64_t v89 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
      uint64_t v90 = swift_allocObject();
      *(_OWORD *)(v90 + 16) = xmmword_2272CB370;
      uint64_t v91 = v109;
      (*(void (**)(unint64_t, char *, uint64_t))(v88 + 16))(v90 + v89, v82, v109);
      uint64_t v122 = v121;
      specialized Array.append<A>(contentsOf:)(v90);
      PipelineClassifierConfiguration.init(models:names:)();
      v104(v80, *MEMORY[0x263F53408], v113);
      Model.kind.setter();
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v115, v112);
      ((void (*)(char *, uint64_t))v117)(v82, v91);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v107, v83, v91);
      uint64_t v92 = v95;
      $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
      ((void (*)(char *, uint64_t))v56)(v92, v120);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MLLinearRegressor.Regressor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    uint64_t v8 = a2 + 3;
    uint64_t v9 = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(void *)(a1 + 48) = v9;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 24, (uint64_t)(a2 + 3), v9);
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 24) = *v8;
      *(_OWORD *)(a1 + 40) = v11;
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(void *)(a1 + 88) = a2[11];
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for BaseLinearRegressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for BaseLinearRegressor();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = (_OWORD *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 24, v7, v8);
  }
  else
  {
    long long v9 = v7[1];
    *(_OWORD *)(a1 + 24) = *v7;
    *(_OWORD *)(a1 + 40) = v9;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v7;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x49uLL);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  char v9 = *(unsigned char *)(a2 + 96);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a2 + v10;
  uint64_t v12 = a1 + v10;
  *(unsigned char *)(a1 + 96) = v9;
  uint64_t v13 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v12, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2272307EC);
}

uint64_t sub_2272307EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for BaseLinearRegressor();
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227230888);
}

uint64_t sub_227230888(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for BaseLinearRegressor();
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MLLinearRegressor.Regressor()
{
  uint64_t result = type metadata singleton initialization cache for MLLinearRegressor.Regressor;
  if (!type metadata singleton initialization cache for MLLinearRegressor.Regressor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MLLinearRegressor.Regressor()
{
  uint64_t result = type metadata accessor for BaseLinearRegressor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in MLLinearRegressor.Regressor()
{
  return lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(&lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Model);
}

uint64_t MLLinearRegressor.Regressor.init(annotationColumnName:featureColumnNames:parameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  type metadata accessor for BaseLinearRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v25 = v11;
  uint64_t v26 = v10;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v16;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v25 - v20;
  *(void *)a5 = a1;
  *((void *)a5 + 1) = a2;
  *((void *)a5 + 2) = a3;
  outlined init with copy of MLLinearRegressor.ModelParameters(a4, (uint64_t)(a5 + 24));
  outlined init with copy of MLLinearRegressor.ModelParameters(a4, (uint64_t)v27);
  lazy protocol witness table accessor for type Double and conformance Double();
  LinearRegressor.Configuration.init()();
  LinearRegressor.Configuration.maximumIterations.setter();
  LinearRegressor.Configuration.l1Penalty.setter();
  LinearRegressor.Configuration.l2Penalty.setter();
  LinearRegressor.Configuration.stepSize.setter();
  LinearRegressor.Configuration.convergenceThreshold.setter();
  outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)v27);
  OUTLINED_FUNCTION_18_3();
  v22();
  BaseLinearRegressor.init(configuration:)();
  outlined destroy of MLLinearRegressor.ModelParameters(a4);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v15);
  uint64_t v23 = type metadata accessor for MLLinearRegressor.Regressor();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 32))(&a5[*(int *)(v23 + 28)], v14, v26);
}

uint64_t MLLinearRegressor.Regressor.makeTransformer()@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  type metadata accessor for MLLinearRegressor.Regressor();
  type metadata accessor for MLLinearRegressor.Model();
  swift_bridgeObjectRetain();
  uint64_t result = BaseLinearRegressor.makeTransformer()();
  *a1 = v4;
  a1[1] = v3;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

void MLLinearRegressor.Regressor.update(_:with:eventHandler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  type metadata accessor for BaseLinearRegressor();
  OUTLINED_FUNCTION_0();
  v36[4] = v9;
  v36[5] = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v40 = v10;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v41 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  v36[6] = v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v36 - v15;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v42 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  OUTLINED_FUNCTION_0();
  v36[2] = v20;
  v36[3] = v19;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_0();
  uint64_t v24 = a1[2];
  uint64_t v44 = v4;
  if (!v24)
  {
    v36[1] = v23 - v22;
    uint64_t v34 = v4[2];
    MEMORY[0x270FA5388](v21);
    v36[-2] = a2;
    swift_bridgeObjectRetain();
    uint64_t ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), (uint64_t)&v36[-4], v34);
    swift_bridgeObjectRelease();
    if (v5) {
      return;
    }
    outlined consume of FeatureVectorizer<Float>.Transformer?(a1[2]);
    a1[2] = ML16ColumnDescriptorVsAE_pTg5;
    a1[3] = 0xD000000000000013;
    a1[4] = 0x80000002272D4D10;
  }
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  if (!v5)
  {
    uint64_t v25 = v44;
    MEMORY[0x22A672220](*v44, v44[1]);
    AnyColumn.convertedToDoubles()();
    uint64_t v27 = v26;
    OUTLINED_FUNCTION_25_0();
    v28();
    if (v27)
    {
      outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)(v25 + 3), (uint64_t)v43);
      lazy protocol witness table accessor for type Double and conformance Double();
      LinearRegressor.Configuration.init()();
      uint64_t v29 = v37;
      LinearRegressor.Configuration.maximumIterations.setter();
      LinearRegressor.Configuration.l1Penalty.setter();
      LinearRegressor.Configuration.l2Penalty.setter();
      LinearRegressor.Configuration.stepSize.setter();
      LinearRegressor.Configuration.convergenceThreshold.setter();
      outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)v43);
      uint64_t v30 = v41;
      OUTLINED_FUNCTION_18_3();
      v31();
      BaseLinearRegressor.init(configuration:)();
      type metadata accessor for MLLinearRegressor.Model();
      BaseLinearRegressor.update(_:features:annotations:eventHandler:)();
      swift_release();
      OUTLINED_FUNCTION_25_0();
      v32();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v29);
      OUTLINED_FUNCTION_25_0();
      v33();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t MLLinearRegressor.Regressor.annotationColumnID.getter()
{
  swift_bridgeObjectRetain();

  return ColumnID.init(_:_:)();
}

uint64_t MLLinearRegressor.Regressor.annotationColumnID.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  uint64_t v1 = ColumnID.name.getter();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_25_0();
  v4();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
  v0[1] = v3;
  return result;
}

uint64_t MLLinearRegressor.Regressor.fitted(to:validateOn:eventHandler:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v121 = a4;
  uint64_t v120 = a3;
  uint64_t v124 = a2;
  uint64_t v118 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x270FA5388](v7 - 8);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v8);
  uint64_t v127 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v122 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v11);
  uint64_t v117 = type metadata accessor for BaseLinearRegressorModel();
  OUTLINED_FUNCTION_0();
  uint64_t v116 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_17_3((uint64_t)&v105 - v16);
  uint64_t v126 = type metadata accessor for BaseLinearRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v123 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33_0();
  uint64_t v128 = v19;
  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v129 = v20;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v105 - v23;
  uint64_t v25 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v131 = v26;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_3_0();
  uint64_t v30 = v29 - v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  OUTLINED_FUNCTION_0();
  uint64_t v130 = v32;
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v105 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)&v105 - v37;
  uint64_t v39 = v5;
  uint64_t v40 = v5[2];
  uint64_t v132 = a1;
  uint64_t v135 = a1;
  swift_bridgeObjectRetain();
  uint64_t v41 = v138;
  uint64_t ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v134, v40);
  if (v41) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v113 = v30;
  uint64_t v138 = v25;
  uint64_t v111 = v36;
  uint64_t v112 = v24;
  uint64_t v43 = v39;
  uint64_t v114 = v31;
  uint64_t v44 = ML16ColumnDescriptorVsAE_pTg5;
  swift_bridgeObjectRelease();
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  uint64_t v109 = v38;
  unint64_t v108 = (unint64_t)"raining samples.";
  uint64_t v110 = v44;
  uint64_t v46 = v113;
  MEMORY[0x22A672220](*v39, v39[1]);
  AnyColumn.convertedToDoubles()();
  uint64_t v48 = v47;
  uint64_t v49 = v131 + 8;
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
  uint64_t v51 = v138;
  v50(v46, v138);
  if (!v48)
  {
    OUTLINED_FUNCTION_16_36();
    uint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v59._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_8_38();
    v59._uint64_t object = (void *)0x80000002272DAA90;
    String.append(_:)(v59);
    MEMORY[0x22A672220](*v39, v39[1]);
    AnyColumn.wrappedElementType.getter();
    v50(v46, v51);
    v60._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    v61._uint64_t countAndFlagsBits = 46;
    v61._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v61);
    uint64_t v62 = v136;
    unint64_t v63 = v137;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v64 = swift_allocError();
    void *v65 = v62;
    v65[1] = v63;
    OUTLINED_FUNCTION_2_3(v64, (uint64_t)v65);
    OUTLINED_FUNCTION_25_0();
    return v66();
  }
  uint64_t v107 = v48;
  uint64_t v106 = v50;
  uint64_t v131 = v49;
  outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)(v39 + 3), (uint64_t)&v136);
  lazy protocol witness table accessor for type Double and conformance Double();
  LinearRegressor.Configuration.init()();
  LinearRegressor.Configuration.maximumIterations.setter();
  LinearRegressor.Configuration.l1Penalty.setter();
  LinearRegressor.Configuration.l2Penalty.setter();
  LinearRegressor.Configuration.stepSize.setter();
  LinearRegressor.Configuration.convergenceThreshold.setter();
  outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)&v136);
  OUTLINED_FUNCTION_18_3();
  v52();
  uint64_t v53 = v128;
  BaseLinearRegressor.init(configuration:)();
  uint64_t v54 = v125;
  outlined init with copy of DataFrame?((uint64_t)v124, v125);
  uint64_t v55 = v127;
  if (__swift_getEnumTagSinglePayload(v54, 1, v127) == 1)
  {
    outlined destroy of DataFrame?(v54);
    uint64_t v56 = v109;
    uint64_t v57 = v107;
    uint64_t v58 = v53;
    BaseLinearRegressor.fitted(features:annotations:eventHandler:)();
    uint64_t v125 = 0;
    swift_release();
    uint64_t v67 = OUTLINED_FUNCTION_12_34();
    v68(v67);
    uint64_t v69 = OUTLINED_FUNCTION_10_34();
    v70(v69);
    OUTLINED_FUNCTION_25_0();
    v71();
    OUTLINED_FUNCTION_5_52();
    OUTLINED_FUNCTION_9_40();
    v53();
    uint64_t v72 = v118;
  }
  else
  {
    uint64_t v124 = v43;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 32))(v119, v54, v55);
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    uint64_t v125 = 0;
    int v73 = v124;
    uint64_t v74 = v113;
    MEMORY[0x22A672220](*v124, v124[1]);
    uint64_t v75 = v74;
    AnyColumn.convertedToDoubles()();
    uint64_t v77 = v76;
    unint64_t v78 = v106;
    v106(v75, v138);
    uint64_t v72 = v118;
    if (!v77)
    {
      swift_release();
      OUTLINED_FUNCTION_16_36();
      uint64_t v136 = 0;
      unint64_t v137 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v85._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_8_38();
      v85._uint64_t object = (void *)0x80000002272DAA90;
      String.append(_:)(v85);
      MEMORY[0x22A672220](*v73, v73[1]);
      AnyColumn.wrappedElementType.getter();
      v78(v75, v138);
      v86._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      v87._uint64_t countAndFlagsBits = 46;
      v87._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v87);
      uint64_t v88 = v136;
      unint64_t v89 = v137;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v90 = swift_allocError();
      *uint64_t v91 = v88;
      v91[1] = v89;
      OUTLINED_FUNCTION_2_3(v90, (uint64_t)v91);
      uint64_t v92 = *(void (**)(void))(v130 + 8);
      OUTLINED_FUNCTION_69_0();
      v92();
      OUTLINED_FUNCTION_25_0();
      v93();
      OUTLINED_FUNCTION_11_41();
      v94();
      uint64_t v95 = OUTLINED_FUNCTION_1_53();
      v96(v95);
      OUTLINED_FUNCTION_69_0();
      return ((uint64_t (*)(void))v92)();
    }
    uint64_t v57 = v115;
    uint64_t v56 = v107;
    uint64_t v79 = v125;
    BaseLinearRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)();
    uint64_t v125 = v79;
    if (v79)
    {
      OUTLINED_FUNCTION_16_36();
      swift_release();
      swift_release();
      uint64_t v80 = *(void (**)(void))(v130 + 8);
      OUTLINED_FUNCTION_69_0();
      v80();
      OUTLINED_FUNCTION_25_0();
      v81();
      OUTLINED_FUNCTION_11_41();
      v82();
      uint64_t v83 = OUTLINED_FUNCTION_1_53();
      v84(v83);
      OUTLINED_FUNCTION_69_0();
      return ((uint64_t (*)(void))v80)();
    }
    swift_release();
    swift_release();
    uint64_t v58 = (void (*)(void))(v130 + 8);
    uint64_t v97 = *(void (**)(void))(v130 + 8);
    OUTLINED_FUNCTION_69_0();
    v97();
    OUTLINED_FUNCTION_25_0();
    v98();
    OUTLINED_FUNCTION_11_41();
    v99();
    uint64_t v100 = OUTLINED_FUNCTION_1_53();
    v101(v100);
    OUTLINED_FUNCTION_69_0();
    v97();
    OUTLINED_FUNCTION_5_52();
    OUTLINED_FUNCTION_9_40();
    v58();
    uint64_t v43 = v124;
  }
  uint64_t v103 = *v43;
  uint64_t v102 = v43[1];
  uint64_t v104 = type metadata accessor for MLLinearRegressor.Model();
  ((void (*)(char *, char *, char *))v58)((char *)v72 + *(int *)(v104 + 24), v56, v57);
  void *v72 = v103;
  v72[1] = v102;
  v72[2] = v110;
  v72[3] = 0xD000000000000013;
  v72[4] = v108 | 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t MLLinearRegressor.Regressor.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer?);
  lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer? and conformance <A> A?();
  uint64_t result = dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  if (!v2)
  {
    type metadata accessor for MLLinearRegressor.Model();
    __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
    type metadata accessor for BaseLinearRegressorModel();
    lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(&lazy protocol witness table cache variable for type BaseLinearRegressorModel and conformance BaseLinearRegressorModel, MEMORY[0x263F043F8]);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  }
  return result;
}

uint64_t MLLinearRegressor.Regressor.decode(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for BaseLinearRegressorModel();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v18 = v8;
  uint64_t v9 = *v2;
  uint64_t v10 = v2[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
  __swift_mutable_project_boxed_opaque_existential_1(a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer(&lazy protocol witness table cache variable for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer);
  swift_bridgeObjectRetain();
  dispatch thunk of EstimatorDecoder.decode<A>(_:)();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  __swift_mutable_project_boxed_opaque_existential_1(a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(&lazy protocol witness table cache variable for type BaseLinearRegressorModel and conformance BaseLinearRegressorModel, MEMORY[0x263F043F8]);
  dispatch thunk of EstimatorDecoder.decode<A>(_:)();
  *(void *)a2 = v9;
  *((void *)a2 + 1) = v10;
  *((void *)a2 + 2) = v15;
  *((void *)a2 + 3) = v16;
  *((void *)a2 + 4) = v17;
  uint64_t v11 = type metadata accessor for MLLinearRegressor.Model();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32))(&a2[*(int *)(v11 + 24)], v18, v5);
}

void (*protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLinearRegressor.Regressor(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  MLLinearRegressor.Regressor.annotationColumnID.getter();
  return protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLinearRegressor.Regressor;
}

void protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLinearRegressor.Regressor(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    OUTLINED_FUNCTION_18_3();
    v7();
    MLLinearRegressor.Regressor.annotationColumnID.setter();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    MLLinearRegressor.Regressor.annotationColumnID.setter();
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance MLLinearRegressor.Regressor(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  MLLinearRegressor.Regressor.fitted(to:validateOn:eventHandler:)(a2, a3, a4, a5, a1);
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(v6);
}

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2)
{
  return MLLinearRegressor.Regressor.encode(_:to:)(a1, a2);
}

uint64_t protocol witness for SupervisedTabularEstimator.decode(from:) in conformance MLLinearRegressor.Regressor@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return MLLinearRegressor.Regressor.decode(from:)(a1, a2);
}

uint64_t base witness table accessor for SupervisedTabularEstimator in MLLinearRegressor.Regressor()
{
  return lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model((unint64_t *)&lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Regressor);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance MLLinearRegressor.Regressor(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MLLinearRegressor.Regressor.update(_:with:eventHandler:)(a1, a2, a3, a4);
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(v5);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance MLLinearRegressor.Regressor(a1, a2);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance MLLinearRegressor.Regressor@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return protocol witness for SupervisedTabularEstimator.decode(from:) in conformance MLLinearRegressor.Regressor(a1, a2);
}

uint64_t lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of DataFrame?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_53()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_52()
{
  return *(void *)(v0 - 352);
}

unint64_t OUTLINED_FUNCTION_8_38()
{
  uint64_t v1 = *(void *)(v0 - 160);
  *(void *)(v0 - 168) = *(void *)(v0 - 168);
  *(void *)(v0 - 160) = v1;
  return 0xD000000000000031;
}

uint64_t OUTLINED_FUNCTION_10_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_36()
{
  return swift_bridgeObjectRelease();
}

uint64_t instantiation function for generic protocol witness table for Adam<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSaySdG_G_SSs5NeverOTg5101_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFS2SXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized _NativeDictionary.startIndex.getter(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(v2 + 32))
      {
        int v6 = v4;
        uint64_t v7 = v2 + 64;
        uint64_t v15 = v2 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v16 = v1;
          uint64_t v17 = *v8;
          uint64_t v10 = v2;
          unint64_t v12 = *(void *)(v18 + 16);
          unint64_t v11 = *(void *)(v18 + 24);
          swift_bridgeObjectRetain();
          if (v12 >= v11 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          *(void *)(v18 + 16) = v12 + 1;
          uint64_t v13 = v18 + 16 * v12;
          *(void *)(v13 + 32) = v17;
          *(void *)(v13 + 40) = v9;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(v10 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = v15;
          if ((*(void *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          uint64_t v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36)) {
            goto LABEL_21;
          }
          uint64_t v14 = _HashTable.occupiedBucket(after:)();
          uint64_t v1 = v16 - 1;
          if (v16 == 1) {
            return;
          }
          unint64_t v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(v2 + 36);
            if (v14 < 1 << *(unsigned char *)(v2 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySSSaySdG_G_AHs5NeverOTg5107_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFSaySdGAMXEfU0_Tf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v3 = specialized Dictionary.Values.startIndex.getter(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(v2 + 32))
      {
        int v6 = v4;
        uint64_t v7 = v2 + 64;
        uint64_t v13 = v2 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36)) {
            goto LABEL_18;
          }
          uint64_t v14 = v1;
          uint64_t v8 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
          uint64_t v9 = v2;
          unint64_t v11 = *(void *)(v15 + 16);
          unint64_t v10 = *(void *)(v15 + 24);
          swift_bridgeObjectRetain();
          if (v11 >= v10 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          }
          *(void *)(v15 + 16) = v11 + 1;
          *(void *)(v15 + 8 * v11 + 32) = v8;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(v9 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = v13;
          if ((*(void *)(v13 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          uint64_t v2 = v9;
          if (v6 != *(_DWORD *)(v9 + 36)) {
            goto LABEL_21;
          }
          uint64_t v12 = _HashTable.occupiedBucket(after:)();
          uint64_t v1 = v14 - 1;
          if (v14 == 1) {
            return;
          }
          unint64_t v5 = v12;
          if ((v12 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(v2 + 36);
            if (v12 < 1 << *(unsigned char *)(v2 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void specialized _ModelCheckpoint<>.save(to:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_41_1();
  uint64_t v6 = MLHandActionClassifier.GraphCNN.getCheckpointStatesDictionary()();
  if (!v0)
  {
    uint64_t v7 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
    *(void *)(inited + 32) = 1937335659;
    *(void *)(inited + 40) = 0xE400000000000000;
    uint64_t v9 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSaySdG_G_SSs5NeverOTg5101_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFS2SXEfU_Tf1cn_n(v9);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    uint64_t v12 = lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
    *(void *)(inited + 48) = v11;
    *(void *)(inited + 80) = v12;
    *(void *)(inited + 88) = 0x7365756C6176;
    *(void *)(inited + 96) = 0xE600000000000000;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySSSaySdG_G_AHs5NeverOTg5107_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFSaySdGAMXEfU0_Tf1cn_n(v7);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *(void *)(inited + 128) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Double]]);
    *(void *)(inited + 136) = lazy protocol witness table accessor for type [[Double]] and conformance <A> [A]();
    *(void *)(inited + 104) = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
    MLDataTable.init(dictionary:)(v15, (uint64_t)&v18);
    uint64_t v16 = v18;
    char v17 = v19;
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)(v1);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
    outlined consume of Result<_DataTable, Error>(v16, v17);
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t (*HandActionClassifierTrainingSessionDelegate.sourceTable.modify())()
{
  return MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify;
}

uint64_t HandActionClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.PersistentParameters();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  OUTLINED_FUNCTION_48_6(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable);
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount) = 0;
  OUTLINED_FUNCTION_61_8(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures);
  OUTLINED_FUNCTION_61_8(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures);
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary) = MEMORY[0x263F8EE80];
  outlined init with take of MLHandActionClassifier.PersistentParameters(a1, v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

void HandActionClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_30_15();
  uint64_t v134 = v1;
  uint64_t v135 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v140 = v8;
  uint64_t v115 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v116 = v11;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v118 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v14);
  uint64_t v124 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v123 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  uint64_t v117 = v17;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v19);
  uint64_t v129 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v126 = v20;
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_49();
  uint64_t v122 = v22;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v24);
  uint64_t v25 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  uint64_t v138 = OUTLINED_FUNCTION_42_19();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_41_0();
  unint64_t v137 = (char *)type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_49();
  uint64_t v127 = v29;
  OUTLINED_FUNCTION_20_3();
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v113 - v32;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_36_15();
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v35 = OUTLINED_FUNCTION_17(v34);
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_33_0();
  uint64_t v133 = v36;
  uint64_t v139 = &v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters];
  __swift_storeEnumTagSinglePayload((uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters], 1, 1, (uint64_t)v25);
  OUTLINED_FUNCTION_48_6(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable);
  *(void *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount] = 0;
  uint64_t v130 = (uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures];
  OUTLINED_FUNCTION_66_3((uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures]);
  uint64_t v125 = (uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures];
  OUTLINED_FUNCTION_66_3((uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures]);
  *(void *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model] = 0;
  uint64_t v121 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels;
  *(void *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels] = 0;
  uint64_t v136 = v0;
  *(void *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary] = MEMORY[0x263F8EE80];
  uint64_t v132 = type metadata accessor for MLHandActionClassifier.DataSource;
  outlined init with copy of MLHandActionClassifier.DataSource(v9, v4, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  uint64_t v131 = v7;
  outlined init with copy of MLHandActionClassifier.DataSource(v7, v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v38 = v25[6];
  uint64_t v37 = v25[7];
  uint64_t v40 = v25[8];
  uint64_t v39 = v25[9];
  *(void *)(v3 + v39) = 0x403E000000000000;
  outlined init with take of MLHandActionClassifier.PersistentParameters(v4, v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  outlined init with copy of MLHandActionClassifier.DataSource(v2, v3 + v25[5], (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t v41 = (int *)v138;
  *(void *)(v3 + v38) = *(void *)(v2 + *(int *)(v138 + 20));
  *(void *)(v3 + v40) = *(void *)(v2 + v41[7]);
  *(void *)(v3 + v37) = *(void *)(v2 + v41[6]);
  uint64_t v42 = v140;
  *(void *)(v3 + v25[10]) = *(void *)(v2 + v41[8]);
  uint64_t v43 = *(void *)(v2 + v41[10]);
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  *(void *)(v3 + v39) = v43;
  uint64_t v44 = v133;
  outlined init with take of MLHandActionClassifier.PersistentParameters(v3, v133, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  uint64_t v120 = v25;
  uint64_t v45 = (uint64_t)v25;
  uint64_t v46 = v137;
  __swift_storeEnumTagSinglePayload(v44, 0, 1, v45);
  OUTLINED_FUNCTION_81_2();
  uint64_t v47 = OUTLINED_FUNCTION_27_11();
  outlined assign with take of MLHandActionClassifier.PersistentParameters?(v47, v48);
  swift_endAccess();
  outlined init with copy of MLHandActionClassifier.DataSource(v42, (uint64_t)v33, (void (*)(void))v132);
  OUTLINED_FUNCTION_71_5();
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    uint64_t v60 = v134;
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0((uint64_t)v33, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v61 = v127;
    outlined init with copy of MLHandActionClassifier.DataSource(v42, v127, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    OUTLINED_FUNCTION_51_11();
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      unint64_t v63 = (uint64_t *)(v61 + v62[12]);
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      uint64_t v114 = v65;
      uint64_t v133 = v64;
      int v66 = (uint64_t *)(v61 + v62[16]);
      uint64_t v68 = *v66;
      uint64_t v67 = (uint64_t (*)())v66[1];
      uint64_t v113 = v68;
      uint64_t v132 = v67;
      uint64_t v69 = v61 + v62[20];
      uint64_t v46 = *(char **)v69;
      int v70 = *(void **)(v69 + 8);
      uint64_t v3 = v126;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 32))(v128, v61, v129);
      MEMORY[0x22A672220](v46, v70);
      uint64_t v71 = AnyColumn.wrappedElementType.getter();
      OUTLINED_FUNCTION_25_0();
      v72();
      if (v71 == MEMORY[0x263F8D310])
      {
        DataFrame.subscript.getter();
        uint64_t v76 = v117;
        Column<A>.parseAsJSONArrays()(v117);
        if (v60)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v135, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
          _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v131, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
          _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v140, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
          OUTLINED_FUNCTION_25_0();
          v77();
          OUTLINED_FUNCTION_25_0();
          v78();
          goto LABEL_23;
        }
        OUTLINED_FUNCTION_25_0();
        v103();
        swift_bridgeObjectRetain();
        MEMORY[0x22A672230](v76, v46, v70);
        uint64_t v73 = v129;
        uint64_t v3 = v126;
      }
      else
      {
        uint64_t v73 = v129;
      }
      uint64_t v42 = v140;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v122, v128, v73);
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v143);
      if (v60)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v135, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v131, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
        _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v42, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
        uint64_t v74 = OUTLINED_FUNCTION_27_11();
        v106(v74);
LABEL_23:
        uint64_t v46 = v136;
        goto LABEL_31;
      }
      uint64_t v79 = v143;
      char v80 = v144;
      uint64_t v81 = v130;
      OUTLINED_FUNCTION_13_17();
      uint64_t v82 = *(void **)v81;
      char v83 = *(unsigned char *)(v81 + 8);
      *(void *)uint64_t v81 = v79;
      *(unsigned char *)(v81 + 8) = v80;
      outlined consume of Result<_DataTable, Error>(v82, v83);
      OUTLINED_FUNCTION_81_2();
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v81, (uint64_t)v46, v70);
      swift_endAccess();
      OUTLINED_FUNCTION_81_2();
      uint64_t v105 = v81;
      uint64_t v2 = (uint64_t)v132;
      static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(v105, v114, v133, (uint64_t)v46, (uint64_t)v70, v113, (uint64_t)v132);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      OUTLINED_FUNCTION_29_25();
      uint64_t v111 = v141;
      uint64_t v49 = v142;
      swift_endAccess();
      specialized MLDataColumn.dropDuplicates()(v111, v49, (uint64_t)&v143);
      outlined consume of Result<_DataTable, Error>(v111, v49);
      uint64_t v85 = specialized Array<A>.init(_:)(v143, v144);
      OUTLINED_FUNCTION_58_6();
      OUTLINED_FUNCTION_137();
      v112();
    }
    else
    {
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v61, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
      uint64_t v75 = static _VideoUtilities.videoURLsPerClass(from:)(v42);
      if (v60)
      {
        int v59 = 0;
        uint64_t v3 = v135;
        uint64_t v46 = v136;
        goto LABEL_29;
      }
      uint64_t v49 = v75;
      uint64_t v85 = specialized _copyCollectionToContiguousArray<A>(_:)(v75);
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_34_16();
    goto LABEL_17;
  }
  uint64_t v46 = *(char **)v33;
  uint64_t v49 = v33[8];
  uint64_t v50 = *((void *)v33 + 3);
  uint64_t v51 = *((void *)v33 + 4);
  uint64_t v3 = *((void *)v33 + 5);
  uint64_t v132 = (uint64_t (*)())*((void *)v33 + 2);
  uint64_t v133 = v51;
  uint64_t v52 = *((void *)v33 + 6);
  uint64_t v53 = (void *)*((void *)v33 + 7);
  uint64_t v54 = v130;
  OUTLINED_FUNCTION_13_17();
  uint64_t v55 = *(void **)v54;
  char v56 = *(unsigned char *)(v54 + 8);
  *(void *)uint64_t v54 = v46;
  *(unsigned char *)(v54 + 8) = v49;
  outlined copy of Result<_DataTable, Error>(v46, v49);
  outlined consume of Result<_DataTable, Error>(v55, v56);
  OUTLINED_FUNCTION_81_2();
  uint64_t v57 = v134;
  static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v54, v52, v53);
  if (v57)
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v46, v49);
    int v59 = 0;
    uint64_t v3 = v135;
    uint64_t v46 = v136;
    uint64_t v42 = v140;
    goto LABEL_29;
  }
  swift_endAccess();
  uint64_t v58 = v130;
  OUTLINED_FUNCTION_81_2();
  static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(v58, (uint64_t)v132, v50, v52, (uint64_t)v53, v133, v3);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  OUTLINED_FUNCTION_29_25();
  uint64_t v84 = v141;
  uint64_t v2 = v142;
  swift_endAccess();
  specialized MLDataColumn.dropDuplicates()(v84, v2, (uint64_t)&v143);
  outlined consume of Result<_DataTable, Error>(v84, v2);
  uint64_t v85 = specialized Array<A>.init(_:)(v143, v144);
  outlined consume of Result<_DataTable, Error>(v46, v49);
  OUTLINED_FUNCTION_34_16();
  uint64_t v42 = v140;
LABEL_17:
  *(void *)&v46[v49] = v85;
  swift_bridgeObjectRelease();
  uint64_t v86 = (uint64_t)v139;
  if (__swift_getEnumTagSinglePayload((uint64_t)v139, 1, v2)) {
    goto LABEL_26;
  }
  uint64_t v87 = v86 + *(int *)(v2 + 20);
  uint64_t v88 = v116;
  outlined init with copy of MLHandActionClassifier.DataSource(v87, v116, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      unint64_t v89 = *(void **)v88;
      char v90 = *(unsigned char *)(v88 + 8);
      uint64_t v91 = *(void *)(v88 + 24);
      unint64_t v137 = *(char **)(v88 + 16);
      uint64_t v92 = *(void *)(v88 + 40);
      uint64_t v139 = *(char **)(v88 + 32);
      uint64_t v94 = *(void *)(v88 + 48);
      uint64_t v93 = *(void **)(v88 + 56);
      OUTLINED_FUNCTION_13_17();
      OUTLINED_FUNCTION_39_18();
      uint64_t v96 = *v95;
      OUTLINED_FUNCTION_39_18();
      char v98 = *(unsigned char *)(v97 + 8);
      OUTLINED_FUNCTION_39_18();
      *uint64_t v99 = v89;
      OUTLINED_FUNCTION_39_18();
      *(unsigned char *)(v100 + 8) = v90;
      outlined copy of Result<_DataTable, Error>(v89, v90);
      uint64_t v101 = v96;
      uint64_t v102 = v125;
      outlined consume of Result<_DataTable, Error>(v101, v98);
      OUTLINED_FUNCTION_81_2();
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v102, v94, v93);
      swift_endAccess();
      OUTLINED_FUNCTION_81_2();
      static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(v102, (uint64_t)v137, v91, v94, (uint64_t)v93, (uint64_t)v139, v92);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v89, v90);
      uint64_t v3 = v135;
      uint64_t v46 = v136;
      uint64_t v42 = v140;
      uint64_t v49 = v121;
      goto LABEL_26;
    }
    uint64_t v104 = (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource;
  }
  else
  {
    uint64_t v104 = (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData;
  }
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v88, v104);
LABEL_26:
  outlined init with copy of MLHandActionClassifier.DataSource(v3, (uint64_t)&v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters], (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  if (!*(void *)&v46[v49])
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_19_0(v110, 0xD00000000000003DLL);
    int v59 = 1;
LABEL_29:
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v3, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v131, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v42, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    if (v59) {
      goto LABEL_30;
    }
LABEL_31:
    outlined destroy of URL?((uint64_t)&v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters], &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    outlined consume of MLDataTable?(*(void **)&v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable], v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable + 8]);
    outlined consume of Result<_DataTable, Error>(*(id *)&v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures], v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures + 8]);
    outlined consume of Result<_DataTable, Error>(*(id *)&v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures], v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures + 8]);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for HandActionClassifierTrainingSessionDelegate();
    swift_deallocPartialClassInstance();
    goto LABEL_32;
  }
  uint64_t v107 = v131;
  type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_12();
  MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
  uint64_t v109 = v108;
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v3, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v107, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v42, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
  *(void *)&v46[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model] = v109;
LABEL_30:
  swift_release();
LABEL_32:
  OUTLINED_FUNCTION_33_14();
}

void HandActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)()
{
  uint64_t v2 = v0;
  type metadata accessor for MLHandActionClassifier.PersistentParameters();
  MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v21, &v23);
  if (!v1)
  {
    uint64_t v3 = v21;
    unsigned __int8 v4 = v22;
    uint64_t v5 = v23;
    int v6 = v24;
    if (v22 == 255)
    {
      if (v24 != 255)
      {
        uint64_t v14 = v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
        OUTLINED_FUNCTION_13_17();
        uint64_t v27 = *(void **)v14;
        *(void *)uint64_t v14 = v5;
        unsigned __int8 v15 = *(unsigned char *)(v14 + 8);
        int v16 = v6 & 1;
        *(unsigned char *)(v14 + 8) = v6;
        outlined copy of Result<_DataTable, Error>(v5, v6 & 1);
        outlined consume of MLDataTable?(v27, v15);
        *(void *)(v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
LABEL_12:
        uint64_t v25 = v5;
        char v26 = v16 != 0;
        uint64_t v20 = MLDataTable.size.getter();
        OUTLINED_FUNCTION_50_6();
        outlined consume of MLDataTable?(v5, v6);
LABEL_15:
        *(void *)(v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount) = v20;
        return;
      }
      *(void *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
    }
    else
    {
      LODWORD(v27) = v22 & 1;
      uint64_t v7 = v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
      if (v24 == 255)
      {
        OUTLINED_FUNCTION_13_17();
        uint64_t v17 = *(void **)v7;
        *(void *)uint64_t v7 = v3;
        unsigned __int8 v18 = *(unsigned char *)(v7 + 8);
        *(unsigned char *)(v7 + 8) = v4;
        outlined copy of MLDataTable?(v3, v4);
        int v13 = (int)v27;
        outlined copy of Result<_DataTable, Error>(v3, (char)v27);
        outlined consume of MLDataTable?(v17, v18);
      }
      else
      {
        OUTLINED_FUNCTION_13_17();
        uint64_t v8 = *(void **)v7;
        *(void *)uint64_t v7 = v3;
        unsigned __int8 v9 = *(unsigned char *)(v7 + 8);
        char v10 = (char)v27;
        *(unsigned char *)(v7 + 8) = (_BYTE)v27;
        outlined copy of Result<_DataTable, Error>(v3, v10);
        outlined copy of MLDataTable?(v3, v4);
        outlined copy of MLDataTable?(v5, v6);
        outlined consume of MLDataTable?(v8, v9);
        uint64_t v11 = HandActionClassifierTrainingSessionDelegate.sourceTable.modify();
        if (*(unsigned __int8 *)(v12 + 8) != 255)
        {
          uint64_t v25 = v5;
          char v26 = v6 & 1;
          MLDataTable.append(contentsOf:)();
        }
        ((void (*)(void **, void))v11)(&v21, 0);
        OUTLINED_FUNCTION_50_6();
        outlined consume of MLDataTable?(v5, v6);
        int v13 = (int)v27;
        outlined copy of Result<_DataTable, Error>(v3, (char)v27);
      }
      uint64_t v25 = v3;
      char v26 = v13 != 0;
      uint64_t v19 = MLDataTable.size.getter();
      OUTLINED_FUNCTION_50_6();
      *(void *)(v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = v19;
      if (v6 != 255)
      {
        int v16 = v6 & 1;
        goto LABEL_12;
      }
    }
    OUTLINED_FUNCTION_50_6();
    uint64_t v20 = 0;
    goto LABEL_15;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = OUTLINED_FUNCTION_41_15();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_0();
  uint64_t v7 = v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v7, v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v1, 1, v5);
  if (v8)
  {
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    __break(1u);
  }
  else
  {
    outlined init with take of MLHandActionClassifier.PersistentParameters(v1, v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    HandActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)();
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v114 = v2;
  uint64_t v118 = v4;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_49();
  uint64_t v106 = v7;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_45_3();
  uint64_t v108 = v9;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_45_3();
  uint64_t v110 = v11;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_106();
  uint64_t v113 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_49();
  uint64_t v112 = v16;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v104 - v18;
  uint64_t v20 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_0();
  uint64_t v111 = v21;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_49();
  uint64_t v119 = v23;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_45_3();
  uint64_t v109 = v25;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_45_3();
  uint64_t v115 = v27;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_106();
  uint64_t v117 = v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v31 = OUTLINED_FUNCTION_17(v30);
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_22_0();
  uint64_t v32 = type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v104 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = v1;
  uint64_t v36 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v36, v3, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v107 = v32;
  OUTLINED_FUNCTION_57_4(v3, 1, v32);
  if (v37)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    __break(1u);
    JUMPOUT(0x22723532CLL);
  }
  outlined init with take of MLHandActionClassifier.PersistentParameters(v3, (uint64_t)v35, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  uint64_t v38 = v118;
  specialized BidirectionalCollection.last.getter(v118, (uint64_t)v19);
  OUTLINED_FUNCTION_57_4((uint64_t)v19, 1, v20);
  uint64_t v39 = (uint64_t)v35;
  if (!v37)
  {
    uint64_t v42 = v117;
    outlined init with take of MLHandActionClassifier.PersistentParameters((uint64_t)v19, v117, (void (*)(void))type metadata accessor for MLCheckpoint);
    uint64_t v43 = *(int *)(v20 + 20);
    uint64_t v105 = v43;
    uint64_t v44 = v115;
    switch(*(unsigned char *)(v42 + v43))
    {
      case 1:
        swift_bridgeObjectRelease();
        outlined init with copy of MLHandActionClassifier.DataSource(v42, v44, (void (*)(void))type metadata accessor for MLCheckpoint);
        goto LABEL_11;
      case 2:
        OUTLINED_FUNCTION_155();
        break;
      case 3:
        OUTLINED_FUNCTION_154();
        break;
      case 4:
        OUTLINED_FUNCTION_35_8();
        break;
      default:
        break;
    }
    char v45 = OUTLINED_FUNCTION_87_0();
    swift_bridgeObjectRelease();
    outlined init with copy of MLHandActionClassifier.DataSource(v42, v44, (void (*)(void))type metadata accessor for MLCheckpoint);
    if (v45)
    {
LABEL_11:
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v44, (void (*)(void))type metadata accessor for MLCheckpoint);
    }
    else
    {
      switch(*(unsigned char *)(v44 + *(int *)(v20 + 20)))
      {
        case 1:
          break;
        case 2:
          swift_bridgeObjectRelease();
          goto LABEL_11;
        case 3:
          OUTLINED_FUNCTION_154();
          break;
        case 4:
          OUTLINED_FUNCTION_35_8();
          break;
        default:
          OUTLINED_FUNCTION_56_9();
          break;
      }
      char v49 = OUTLINED_FUNCTION_37_5();
      swift_bridgeObjectRelease();
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v44, (void (*)(void))type metadata accessor for MLCheckpoint);
      if ((v49 & 1) == 0)
      {
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_85();
        uint64_t v51 = 0xD00000000000003FLL;
        goto LABEL_23;
      }
    }
    uint64_t v46 = v38;
    uint64_t v47 = v116;
    uint64_t v48 = v114;
    HandActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)();
    if (v48)
    {
LABEL_55:
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v42, (void (*)(void))type metadata accessor for MLCheckpoint);
      goto LABEL_56;
    }
    switch(*(unsigned char *)(v42 + v105))
    {
      case 1:
        swift_bridgeObjectRelease();
        goto LABEL_28;
      case 2:
        OUTLINED_FUNCTION_155();
        break;
      case 3:
        OUTLINED_FUNCTION_154();
        break;
      case 4:
        OUTLINED_FUNCTION_55_0();
        break;
      default:
        break;
    }
    char v52 = OUTLINED_FUNCTION_87_0();
    uint64_t ML22MLHandActionClassifierV10DataSourceOWOhTm_0 = swift_bridgeObjectRelease();
    if (v52)
    {
LABEL_28:
      uint64_t v54 = v113;
      OUTLINED_FUNCTION_123();
      URL.appendingPathComponent(_:)();
      char v157 = 1;
      LOBYTE(v139) = 1;
      uint64_t v140 = 44;
      unint64_t v141 = 0xE100000000000000;
      uint64_t v142 = 0;
      unint64_t v143 = 0xE000000000000000;
      uint64_t v144 = 92;
      unint64_t v145 = 0xE100000000000000;
      char v146 = 1;
      uint64_t v147 = 34;
      unint64_t v148 = 0xE100000000000000;
      char v149 = 1;
      uint64_t v150 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v151 = 10;
      uint64_t v153 = 0;
      uint64_t v154 = 0;
      unint64_t v152 = 0xE100000000000000;
      char v155 = 1;
      uint64_t v156 = 0;
      MLDataTable.init(contentsOf:options:)(v54, &v139, (uint64_t)&v160);
      uint64_t v115 = v39;
      uint64_t v55 = v160;
      char v56 = v161;
      uint64_t v57 = v116;
      uint64_t v58 = v116 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
      OUTLINED_FUNCTION_13_17();
      int v59 = *(void **)v58;
      char v60 = *(unsigned char *)(v58 + 8);
      *(void *)uint64_t v58 = v55;
      uint64_t v42 = v117;
      *(unsigned char *)(v58 + 8) = v56;
      outlined consume of Result<_DataTable, Error>(v59, v60);
      uint64_t v61 = v110;
      OUTLINED_FUNCTION_172();
      URL.appendingPathComponent(_:)();
      char v138 = 1;
      LOBYTE(v120) = 1;
      uint64_t v121 = 44;
      unint64_t v122 = 0xE100000000000000;
      uint64_t v123 = 0;
      unint64_t v124 = 0xE000000000000000;
      uint64_t v125 = 92;
      unint64_t v126 = 0xE100000000000000;
      char v127 = 1;
      uint64_t v128 = 34;
      unint64_t v129 = 0xE100000000000000;
      char v130 = 1;
      uint64_t v131 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v132 = 10;
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      unint64_t v133 = 0xE100000000000000;
      char v136 = 1;
      uint64_t v137 = 0;
      MLDataTable.init(contentsOf:options:)(v61, &v120, (uint64_t)&v158);
      id v78 = v158;
      char v79 = v159;
      uint64_t v80 = v57 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
      OUTLINED_FUNCTION_13_17();
      uint64_t v81 = *(void **)v80;
      char v82 = *(unsigned char *)(v80 + 8);
      *(void *)uint64_t v80 = v78;
      *(unsigned char *)(v80 + 8) = v79;
      outlined consume of Result<_DataTable, Error>(v81, v82);
      uint64_t v39 = v115;
      uint64_t v47 = v57;
      goto LABEL_46;
    }
    uint64_t v139 = v46;
    uint64_t v62 = *(void *)(v46 + 16);
    if (v62)
    {
      uint64_t v115 = v39;
      uint64_t v63 = *(void *)(v111 + 72);
      uint64_t v64 = v62 - 1;
      uint64_t v65 = v46
          + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))
          + v63 * (v62 - 1);
      uint64_t v66 = -v63;
      while (2)
      {
        uint64_t v67 = v119;
        outlined init with copy of MLHandActionClassifier.DataSource(v65, v119, (void (*)(void))type metadata accessor for MLCheckpoint);
        switch(*(unsigned char *)(v67 + *(int *)(v20 + 20)))
        {
          case 1:
            swift_bridgeObjectRelease();
            uint64_t ML22MLHandActionClassifierV10DataSourceOWOhTm_0 = _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v119, (void (*)(void))type metadata accessor for MLCheckpoint);
            uint64_t v39 = v115;
            goto LABEL_39;
          case 2:
            OUTLINED_FUNCTION_155();
            goto LABEL_35;
          case 3:
            OUTLINED_FUNCTION_154();
            goto LABEL_35;
          case 4:
            OUTLINED_FUNCTION_55_0();
            goto LABEL_35;
          default:
LABEL_35:
            char v68 = OUTLINED_FUNCTION_87_0();
            swift_bridgeObjectRelease();
            uint64_t ML22MLHandActionClassifierV10DataSourceOWOhTm_0 = _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v119, (void (*)(void))type metadata accessor for MLCheckpoint);
            if (v68) {
              goto LABEL_38;
            }
            --v64;
            v65 += v66;
            if (v64 != -1) {
              continue;
            }
            uint64_t v64 = 0;
LABEL_38:
            uint64_t v39 = v115;
LABEL_39:
            uint64_t v47 = v116;
            break;
        }
        break;
      }
    }
    else
    {
      uint64_t v64 = 0;
    }
    MEMORY[0x270FA5388](ML22MLHandActionClassifierV10DataSourceOWOhTm_0);
    *(&v104 - 2) = (uint64_t)&v139;
    uint64_t v70 = v64;
    uint64_t v71 = v112;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5((void *(*)(void *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), v70, v69 & 1, v112);
    OUTLINED_FUNCTION_57_4((uint64_t)v71, 1, v20);
    if (!v37)
    {
      uint64_t v76 = v109;
      outlined init with take of MLHandActionClassifier.PersistentParameters((uint64_t)v71, v109, (void (*)(void))type metadata accessor for MLCheckpoint);
      uint64_t v77 = v108;
      OUTLINED_FUNCTION_123();
      URL.appendingPathComponent(_:)();
      char v157 = 1;
      LOBYTE(v139) = 1;
      uint64_t v140 = 44;
      unint64_t v141 = 0xE100000000000000;
      uint64_t v142 = 0;
      unint64_t v143 = 0xE000000000000000;
      uint64_t v144 = 92;
      unint64_t v145 = 0xE100000000000000;
      char v146 = 1;
      uint64_t v147 = 34;
      unint64_t v148 = 0xE100000000000000;
      char v149 = 1;
      uint64_t v150 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v151 = 10;
      uint64_t v153 = 0;
      uint64_t v154 = 0;
      unint64_t v152 = 0xE100000000000000;
      char v155 = 1;
      uint64_t v156 = 0;
      MLDataTable.init(contentsOf:options:)(v77, &v139, (uint64_t)&v160);
      uint64_t v115 = v39;
      char v83 = v160;
      char v84 = v161;
      uint64_t v85 = v116 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
      OUTLINED_FUNCTION_13_17();
      uint64_t v86 = *(void **)v85;
      char v87 = *(unsigned char *)(v85 + 8);
      *(void *)uint64_t v85 = v83;
      *(unsigned char *)(v85 + 8) = v84;
      outlined consume of Result<_DataTable, Error>(v86, v87);
      uint64_t v88 = v106;
      OUTLINED_FUNCTION_172();
      URL.appendingPathComponent(_:)();
      char v138 = 1;
      LOBYTE(v120) = 1;
      uint64_t v121 = 44;
      unint64_t v122 = 0xE100000000000000;
      uint64_t v123 = 0;
      unint64_t v124 = 0xE000000000000000;
      uint64_t v125 = 92;
      unint64_t v126 = 0xE100000000000000;
      char v127 = 1;
      uint64_t v128 = 34;
      unint64_t v129 = 0xE100000000000000;
      char v130 = 1;
      uint64_t v131 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v132 = 10;
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      unint64_t v133 = 0xE100000000000000;
      char v136 = 1;
      uint64_t v137 = 0;
      MLDataTable.init(contentsOf:options:)(v88, &v120, (uint64_t)&v158);
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v76, (void (*)(void))type metadata accessor for MLCheckpoint);
      id v89 = v158;
      uint64_t v47 = v116;
      LOBYTE(v88) = v159;
      uint64_t v90 = v116 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
      OUTLINED_FUNCTION_13_17();
      uint64_t v91 = *(void **)v90;
      char v92 = *(unsigned char *)(v90 + 8);
      *(void *)uint64_t v90 = v89;
      *(unsigned char *)(v90 + 8) = (_BYTE)v88;
      outlined consume of Result<_DataTable, Error>(v91, v92);
      uint64_t v39 = v115;
      uint64_t v42 = v117;
      goto LABEL_46;
    }
    outlined destroy of URL?((uint64_t)v71, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v72 = (uint64_t *)(v47 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures);
    OUTLINED_FUNCTION_53();
    char v73 = *((unsigned char *)v72 + 8);
    uint64_t v120 = *v72;
    LOBYTE(v121) = v73;
    uint64_t v74 = MLDataTable.size.getter();
    uint64_t v42 = v117;
    if (v74)
    {
LABEL_46:
      switch(*(unsigned char *)(v42 + v105))
      {
        case 1:
          goto LABEL_51;
        case 2:
          swift_bridgeObjectRelease();
          goto LABEL_52;
        case 3:
          OUTLINED_FUNCTION_154();
          goto LABEL_51;
        case 4:
          OUTLINED_FUNCTION_55_0();
          goto LABEL_51;
        default:
          OUTLINED_FUNCTION_56_9();
LABEL_51:
          char v93 = OUTLINED_FUNCTION_37_5();
          swift_bridgeObjectRelease();
          if ((v93 & 1) == 0) {
            goto LABEL_55;
          }
LABEL_52:
          uint64_t v94 = v47 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
          OUTLINED_FUNCTION_53();
          uint64_t v95 = *(void **)v94;
          LOBYTE(v94) = *(unsigned char *)(v94 + 8);
          outlined copy of Result<_DataTable, Error>(v95, v94);
          OUTLINED_FUNCTION_25_15();
          specialized MLDataTable.subscript.getter(v94, v96);
          outlined consume of Result<_DataTable, Error>(v95, v94);
          id v97 = v158;
          LOBYTE(v95) = v159;
          specialized MLDataColumn.dropDuplicates()(v158, v159, (uint64_t)&v160);
          outlined consume of Result<_DataTable, Error>(v97, (char)v95);
          uint64_t v98 = specialized Array<A>.init(_:)(v160, v161);
          uint64_t v99 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels;
          *(void *)(v47 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels) = v98;
          swift_bridgeObjectRelease();
          if (*(void *)(v47 + v99))
          {
            type metadata accessor for MLHandActionClassifier.GraphCNN(0);
            swift_allocObject();
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_56_12();
            MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
            uint64_t v100 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model;
            *(void *)(v47 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model) = v101;
            swift_release();
            if (*(void *)(v47 + v100))
            {
              swift_retain();
              MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(v42);
              MLHandActionClassifier.GraphCNN.initDevice()();
              swift_release();
              goto LABEL_55;
            }
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            OUTLINED_FUNCTION_85();
            OUTLINED_FUNCTION_35_20();
            uint64_t v51 = v103 + 20;
          }
          else
          {
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            OUTLINED_FUNCTION_85();
            OUTLINED_FUNCTION_35_20();
            uint64_t v51 = v102 + 17;
          }
          break;
      }
      goto LABEL_23;
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_35_20();
    uint64_t v51 = v75 + 11;
LABEL_23:
    OUTLINED_FUNCTION_19_0(v50, v51);
    goto LABEL_55;
  }
  outlined destroy of URL?((uint64_t)v19, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_35_20();
  OUTLINED_FUNCTION_19_0(v40, v41);
LABEL_56:
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v39, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  OUTLINED_FUNCTION_8_1();
}

Swift::Int_optional __swiftcall HandActionClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  uint64_t v2 = *(unsigned __int8 *)phase;
  Swift::Bool v3 = 1;
  Swift::Int v4 = 0;
  switch(v2)
  {
    case 1:
      uint64_t v5 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
      swift_beginAccess();
      if (*(unsigned __int8 *)(v5 + 8) == 255) {
        Swift::Int v4 = 0;
      }
      else {
        Swift::Int v4 = MLDataTable.size.getter();
      }
      Swift::Bool v3 = 0;
      break;
    case 2:
      uint64_t v6 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters;
      uint64_t v7 = type metadata accessor for MLTrainingSessionParameters();
      Swift::Bool v3 = 0;
      Swift::Int v4 = *(void *)(v6 + *(int *)(v7 + 28));
      break;
    default:
      break;
  }
  result.unint64_t value = v4;
  result.is_nil = v3;
  return result;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.extractFeatures(from:)(Swift::Int from)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = OUTLINED_FUNCTION_20_35();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_24_4();
  uint64_t v11 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v11, v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v1, 1, v9);
  if (v12) {
    goto LABEL_33;
  }
  outlined init with take of MLHandActionClassifier.PersistentParameters(v1, v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  uint64_t v13 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
  OUTLINED_FUNCTION_53();
  int v14 = *(unsigned __int8 *)(v13 + 8);
  if (v14 != 255)
  {
    id v38 = *(id *)v13;
    char v39 = v14 & 1;
    outlined copy of Result<_DataTable, Error>(v38, v14 & 1);
    MLDataTable.size.getter();
    if (v15 > 0)
    {
      uint64_t v16 = *(void *)(v4
                      + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount);
      uint64_t v17 = *(void *)(v4
                      + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount);
      uint64_t v1 = v16 + v17;
      if (__OFADD__(v16, v17))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v1 > v6)
      {
        uint64_t v35 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount;
        uint64_t v36 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount;
        uint64_t v18 = v4 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters;
        uint64_t v19 = *(void *)(v18 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 20));
        BOOL v20 = __OFADD__(v6, v19);
        uint64_t v21 = v6 + v19;
        char v22 = v20;
        uint64_t v23 = v6;
        if (v16 <= v6)
        {
          if (v22)
          {
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v1 = v16;
          if (v22)
          {
            __break(1u);
            goto LABEL_12;
          }
        }
        uint64_t v34 = v16;
        if (v1 >= v21) {
          uint64_t v26 = v21;
        }
        else {
          uint64_t v26 = v1;
        }
        if (v26 >= v23)
        {
          id v40 = v38;
          char v41 = v14 & 1;
          uint64_t v27 = v23;
          uint64_t v33 = v26;
          MLDataTable.subscript.getter(&v38, v23, v26);
          id v28 = v38;
          char v29 = v39;
          type metadata accessor for MLHandActionClassifier.FeatureExtractor();
          char v37 = v28;
          id v40 = v28;
          char v41 = v29;
          static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)((uint64_t)&v40, v27, &v38, *(double *)(v3 + *(int *)(v9 + 36)));
          if (v2)
          {
            _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
            OUTLINED_FUNCTION_72_4();
            outlined consume of Result<_DataTable, Error>(v28, v29);
            goto LABEL_14;
          }
          id v30 = v38;
          uint64_t v42 = v27;
          id v40 = v38;
          char v41 = v39;
          if (v34 <= v27) {
            uint64_t v31 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
          }
          else {
            uint64_t v31 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
          }
          uint64_t v1 = v4 + v31;
          char v32 = v39;
          OUTLINED_FUNCTION_81_2();
          MLDataTable.append(contentsOf:)();
          swift_endAccess();
          outlined consume of Result<_DataTable, Error>(v37, v29);
          OUTLINED_FUNCTION_72_4();
          _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
          outlined consume of Result<_DataTable, Error>(v30, v32);
          if (!__OFSUB__(v33, v42))
          {
            if (!__OFADD__(*(void *)(v4 + v36), *(void *)(v4 + v35))) {
              goto LABEL_14;
            }
            goto LABEL_32;
          }
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          Swift::Int v24 = outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
          __break(1u);
          goto LABEL_34;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    OUTLINED_FUNCTION_72_4();
    goto LABEL_14;
  }
LABEL_12:
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
LABEL_14:
  OUTLINED_FUNCTION_8_1();
LABEL_34:
  result._0 = v24;
  result.finished = v25;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.transitionTo(phase:)(CreateML::MLPhase phase)
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  uint64_t v7 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_24_4();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v10 = OUTLINED_FUNCTION_17(v9);
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = (int *)OUTLINED_FUNCTION_20_35();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_41_1();
  if (*v6 != 2) {
    goto LABEL_11;
  }
  uint64_t v13 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v13, v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v1, 1, (uint64_t)v11);
  if (!v14)
  {
    uint64_t v15 = OUTLINED_FUNCTION_51_11();
    outlined init with take of MLHandActionClassifier.PersistentParameters(v15, v16, v17);
    uint64_t v18 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
    OUTLINED_FUNCTION_53();
    uint64_t v19 = *(void **)v18;
    LOBYTE(v18) = *(unsigned char *)(v18 + 8);
    outlined copy of Result<_DataTable, Error>(v19, v18);
    OUTLINED_FUNCTION_25_15();
    specialized MLDataTable.subscript.getter(v18, v20);
    outlined consume of Result<_DataTable, Error>(v19, v18);
    specialized MLDataColumn.dropDuplicates()(v32, v33, (uint64_t)&v34);
    outlined consume of Result<_DataTable, Error>(v32, v33);
    uint64_t v21 = specialized Array<A>.init(_:)(v34, v35);
    uint64_t v22 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels;
    *(void *)(v4 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels) = v21;
    swift_bridgeObjectRelease();
    if (*(void *)(v4 + v22))
    {
      uint64_t v23 = *(void *)(v2 + v11[8]);
      type metadata accessor for MLHandActionClassifier.GraphCNN(0);
      swift_allocObject();
      swift_bridgeObjectRetain_n();
      OUTLINED_FUNCTION_56_12();
      MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
      uint64_t v24 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model;
      *(void *)(v4 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model) = v25;
      swift_release();
      if (*(void *)(v4 + v24))
      {
        outlined init with copy of MLHandActionClassifier.DataSource(v2 + v11[5], v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
        uint64_t v26 = *(void *)(v2 + v11[7]);
        uint64_t v27 = *(void *)(v2 + v11[10]);
        uint64_t v28 = *(void *)(v2 + v11[9]);
        *(void *)(v3 + v7[5]) = *(void *)(v2 + v11[6]);
        *(void *)(v3 + v7[6]) = v26;
        *(void *)(v3 + v7[7]) = v23;
        *(void *)(v3 + v7[8]) = v27;
        *(void *)(v3 + v7[10]) = v28;
        swift_retain();
        _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
        MLHandActionClassifier.GraphCNN.loadPretrainedCoreMLModel()();
        if (!v29) {
          MLHandActionClassifier.GraphCNN.initDevice()();
        }
        _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      uint64_t v31 = 0xD00000000000003CLL;
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      uint64_t v31 = 0xD00000000000002ELL;
    }
    OUTLINED_FUNCTION_19_0(v30, v31);
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
LABEL_11:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  __break(1u);
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.train(from:)(Swift::Int from)
{
  OUTLINED_FUNCTION_30_15();
  uint64_t v87 = v2;
  uint64_t v5 = v1;
  uint64_t v7 = v6;
  uint64_t v82 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v81 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v80 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v88 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  OUTLINED_FUNCTION_0();
  uint64_t v86 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  uint64_t v90 = v17;
  uint64_t v18 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v23 = OUTLINED_FUNCTION_17(v22);
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = (int *)OUTLINED_FUNCTION_42_19();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_106();
  uint64_t v89 = v27;
  uint64_t v28 = v5 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters;
  Swift::Int v29 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v32 = *(void *)(v28 + *(int *)(v29 + 20));
  if (__OFADD__(v7, v32))
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v33 = *(void *)(v28 + *(int *)(v29 + 28));
  if (__OFSUB__(v33, v7))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v83 = *(void *)(v28 + *(int *)(v29 + 28));
  uint64_t v84 = v7 + v32;
  uint64_t v85 = v14;
  if (v32 >= v33 - v7) {
    uint64_t v34 = v33 - v7;
  }
  else {
    uint64_t v34 = v32;
  }
  uint64_t v35 = v5 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v35, v4, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  if (!__swift_getEnumTagSinglePayload(v4, 1, (uint64_t)v18))
  {
    outlined init with copy of MLHandActionClassifier.DataSource(v4, (uint64_t)v21, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    outlined destroy of URL?(v4, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    outlined init with copy of MLHandActionClassifier.DataSource((uint64_t)&v21[v18[5]], v3, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v37 = *(void *)&v21[v18[7]];
    uint64_t v38 = *(void *)&v21[v18[8]];
    uint64_t v39 = *(void *)&v21[v18[10]];
    uint64_t v40 = *(void *)&v21[v18[9]];
    *(void *)(v3 + v24[5]) = *(void *)&v21[v18[6]];
    *(void *)(v3 + v24[6]) = v37;
    *(void *)(v3 + v24[7]) = v38;
    *(void *)(v3 + v24[8]) = v39;
    *(void *)(v3 + v24[10]) = v40;
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0((uint64_t)v21, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    uint64_t v41 = v89;
    outlined init with take of MLHandActionClassifier.PersistentParameters(v3, v89, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
    uint64_t v42 = *(void *)(v5 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model);
    if (!v42
      || (uint64_t v43 = *(void **)(v5 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels)) == 0)
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_19_0(v52, 0xD00000000000003CLL);
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v41, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
      goto LABEL_13;
    }
    uint64_t v78 = v34;
    uint64_t v44 = v5 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
    OUTLINED_FUNCTION_53();
    char v46 = *(unsigned char *)(v44 + 8);
    *(void *)&long long v91 = *(void *)v44;
    char v45 = (void *)v91;
    BYTE8(v91) = v46;
    uint64_t v47 = v5 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
    OUTLINED_FUNCTION_53();
    uint64_t v48 = *(void **)v47;
    char v49 = *(unsigned char *)(v47 + 8);
    uint64_t v50 = v89;
    char v93 = v48;
    char v94 = v49;
    swift_retain();
    swift_bridgeObjectRetain();
    char v79 = v45;
    outlined copy of Result<_DataTable, Error>(v45, v46);
    outlined copy of Result<_DataTable, Error>(v48, v49);
    uint64_t v51 = v87;
    static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(v90, v88, v43, (uint64_t)&v91, (uint64_t)&v93, v50);
    if (v51)
    {
      swift_bridgeObjectRelease();
      swift_release();
      OUTLINED_FUNCTION_62_5();
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v50, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    uint64_t v77 = v43;
    uint64_t v87 = v42;
    OUTLINED_FUNCTION_62_5();
    uint64_t v53 = v78;
    if (v78 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v54 = &unk_268176000;
    uint64_t v55 = v88;
    if (v78)
    {
      uint64_t v56 = 0;
      uint64_t v57 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary;
      while (v53 != v56)
      {
        Swift::Int v31 = v7 + v56;
        if (__OFADD__(v7, v56)) {
          goto LABEL_42;
        }
        ++v56;
        *(void *)(v5 + v57) = MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(v90, v55, v31);
        Swift::Int v29 = swift_bridgeObjectRelease();
        if (v53 == v56) {
          goto LABEL_20;
        }
      }
      goto LABEL_41;
    }
LABEL_20:
    OUTLINED_FUNCTION_60_6();
    uint64_t v58 = OUTLINED_FUNCTION_155();
    specialized Dictionary.subscript.getter(v58, 0xED000073736F6C5FLL, (uint64_t)&unk_268176000, v59);
    swift_bridgeObjectRelease();
    if (v92)
    {
      if (OUTLINED_FUNCTION_22_26())
      {
        double v60 = *(double *)&v93;
        uint64_t v54 = (void *)MEMORY[0x263F8EE80];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v91 = v54;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, isUniquelyReferenced_nonNull_native, v60);
        uint64_t v62 = (void *)v91;
        swift_bridgeObjectRelease();
LABEL_25:
        OUTLINED_FUNCTION_60_6();
        specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEF73736F6C5F6E6FLL, (uint64_t)v54, &v91);
        swift_bridgeObjectRelease();
        if (v92)
        {
          if (OUTLINED_FUNCTION_22_26())
          {
            swift_isUniquelyReferenced_nonNull_native();
            double v63 = OUTLINED_FUNCTION_31_18();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(4, v64, v63);
            uint64_t v62 = (void *)v91;
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          outlined destroy of URL?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
        }
        OUTLINED_FUNCTION_60_6();
        specialized Dictionary.subscript.getter(0xD000000000000012, 0x80000002272D4230, (uint64_t)v54, &v91);
        swift_bridgeObjectRelease();
        if (v92)
        {
          type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
          if (OUTLINED_FUNCTION_22_26())
          {
            uint64_t v54 = v93;
            uint64_t v65 = v80;
            _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
            static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v65, v77[2]);
            OUTLINED_FUNCTION_39_18();
            (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v82);
            swift_isUniquelyReferenced_nonNull_native();
            double v67 = OUTLINED_FUNCTION_31_18();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, v68, v67);
            uint64_t v62 = (void *)v91;
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          outlined destroy of URL?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
        }
        OUTLINED_FUNCTION_60_6();
        specialized Dictionary.subscript.getter(0xD000000000000014, 0x80000002272D4280, (uint64_t)v54, &v91);
        swift_bridgeObjectRelease();
        if (v92)
        {
          type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
          char v69 = OUTLINED_FUNCTION_22_26();
          uint64_t v70 = v88;
          if (v69)
          {
            uint64_t v71 = v80;
            _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
            uint64_t v72 = v77[2];
            swift_bridgeObjectRelease();
            static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v71, v72);
            OUTLINED_FUNCTION_25_0();
            v73();
            swift_isUniquelyReferenced_nonNull_native();
            double v74 = OUTLINED_FUNCTION_31_18();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v75, v74);
            uint64_t v62 = (void *)v91;
            swift_release();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          outlined destroy of URL?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
          uint64_t v70 = v88;
        }
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v62);
        swift_bridgeObjectRelease();
        swift_release();
        outlined destroy of URL?(v70, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
        OUTLINED_FUNCTION_25_0();
        v76();
        _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v89, (void (*)(void))type metadata accessor for MLHandActionClassifier.ModelParameters);
        goto LABEL_13;
      }
    }
    else
    {
      outlined destroy of URL?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v62 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_25;
  }
  outlined destroy of URL?(v4, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_19_0(v36, 0xD000000000000026);
LABEL_13:
  OUTLINED_FUNCTION_33_14();
LABEL_44:
  result.finished = v31;
  result.metrics._rawValue = v30;
  result._0 = v29;
  return result;
}

void HandActionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v34 - v12;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_36_15();
  int v16 = *v5;
  if (v16 == 2)
  {
    if (*(void *)(v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model))
    {
      swift_retain();
      specialized _ModelCheckpoint<>.save(to:)();
      swift_release();
    }
  }
  else if (v16 == 1)
  {
    uint64_t v36 = v14;
    uint64_t v37 = v15;
    uint64_t v17 = v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
    OUTLINED_FUNCTION_13_17();
    char v18 = *(unsigned char *)(v17 + 8);
    id v60 = *(id *)v17;
    LOBYTE(v61) = v18;
    outlined copy of Result<_DataTable, Error>(v60, v18);
    OUTLINED_FUNCTION_123();
    uint64_t v38 = v7;
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)(v2);
    if (v1)
    {
      OUTLINED_FUNCTION_25_0();
      v19();
      outlined consume of Result<_DataTable, Error>(v60, v61);
    }
    else
    {
      uint64_t v35 = v17;
      OUTLINED_FUNCTION_21_4();
      v20();
      outlined consume of Result<_DataTable, Error>(v60, v61);
      uint64_t v21 = v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
      OUTLINED_FUNCTION_13_17();
      char v22 = *(unsigned char *)(v21 + 8);
      id v88 = *(id *)v21;
      char v89 = v22;
      outlined copy of Result<_DataTable, Error>(v88, v22);
      OUTLINED_FUNCTION_33_8();
      URL.appendingPathComponent(_:)();
      MLDataTable.write(to:)((uint64_t)v13);
      uint64_t v34 = v21;
      OUTLINED_FUNCTION_21_4();
      v23();
      outlined consume of Result<_DataTable, Error>(v88, v89);
      uint64_t v24 = v37;
      OUTLINED_FUNCTION_123();
      URL.appendingPathComponent(_:)();
      char v84 = 1;
      LOBYTE(v60) = 1;
      *(_DWORD *)((char *)&v60 + 1) = *(_DWORD *)v87;
      HIDWORD(v60) = *(_DWORD *)&v87[3];
      uint64_t v61 = 44;
      unint64_t v62 = 0xE100000000000000;
      uint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      uint64_t v65 = 92;
      unint64_t v66 = 0xE100000000000000;
      char v67 = 1;
      *(_DWORD *)char v68 = *(_DWORD *)v86;
      *(_DWORD *)&v68[3] = *(_DWORD *)&v86[3];
      uint64_t v69 = 34;
      unint64_t v70 = 0xE100000000000000;
      char v71 = 1;
      *(_DWORD *)uint64_t v72 = *(_DWORD *)v85;
      *(_DWORD *)&v72[3] = *(_DWORD *)&v85[3];
      char v73 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v74 = 10;
      unint64_t v75 = 0xE100000000000000;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      char v78 = 1;
      *(_DWORD *)char v79 = *(_DWORD *)v83;
      *(_DWORD *)&v79[3] = *(_DWORD *)&v83[3];
      uint64_t v80 = 0;
      MLDataTable.init(contentsOf:options:)(v24, &v60, (uint64_t)&v81);
      char v25 = v82;
      uint64_t v26 = v35;
      uint64_t v27 = *(void **)v35;
      char v28 = *(unsigned char *)(v35 + 8);
      *(void *)uint64_t v35 = v81;
      *(unsigned char *)(v26 + 8) = v25;
      outlined consume of Result<_DataTable, Error>(v27, v28);
      Swift::Int v29 = v36;
      OUTLINED_FUNCTION_33_8();
      URL.appendingPathComponent(_:)();
      char v59 = 1;
      char v39 = 1;
      uint64_t v40 = 44;
      unint64_t v41 = 0xE100000000000000;
      uint64_t v42 = 0;
      unint64_t v43 = 0xE000000000000000;
      uint64_t v44 = 92;
      unint64_t v45 = 0xE100000000000000;
      char v46 = 1;
      uint64_t v47 = 34;
      unint64_t v48 = 0xE100000000000000;
      char v49 = 1;
      uint64_t v50 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v51 = 10;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      unint64_t v52 = 0xE100000000000000;
      char v55 = 1;
      uint64_t v56 = 0;
      MLDataTable.init(contentsOf:options:)(v29, &v39, (uint64_t)&v57);
      char v30 = v58;
      uint64_t v31 = v34;
      uint64_t v32 = *(void **)v34;
      char v33 = *(unsigned char *)(v34 + 8);
      *(void *)uint64_t v34 = v57;
      *(unsigned char *)(v31 + 8) = v30;
      outlined consume of Result<_DataTable, Error>(v32, v33);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t HandActionClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_41_15();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_53();
  uint64_t v8 = OUTLINED_FUNCTION_51_11();
  outlined init with copy of URL?(v8, v9, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_57_4(v1, 1, v6);
  if (v10)
  {
    outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_85();
    *(void *)uint64_t v11 = 0xD000000000000030;
    *(void *)(v11 + 8) = 0x80000002272D69A0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(unsigned char *)(v11 + 48) = 2;
    return swift_willThrow();
  }
  else
  {
    outlined init with take of MLHandActionClassifier.PersistentParameters(v1, v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    MLHandActionClassifier.PersistentParameters.save(toSessionDirectory:)(a1);
    return _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  }
}

void HandActionClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v23 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  char v10 = (char *)&v23 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - v11;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v13);
  uint64_t v24 = OUTLINED_FUNCTION_20_35();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_33_7();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v23 - v16;
  uint64_t v18 = OUTLINED_FUNCTION_51_11();
  v19(v18);
  MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)(v0, (uint64_t)v17);
  if (!v1)
  {
    uint64_t v20 = (uint64_t)v7;
    uint64_t v21 = v23 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_53();
    outlined init with copy of URL?(v21, (uint64_t)v12, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_57_4((uint64_t)v12, 1, v24);
    if (v22)
    {
      outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
      outlined init with take of MLHandActionClassifier.PersistentParameters((uint64_t)v17, (uint64_t)v10, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v24);
      outlined init with take of DataFrame?((uint64_t)v10, v20, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
      OUTLINED_FUNCTION_81_2();
      outlined assign with take of MLHandActionClassifier.PersistentParameters?(v20, v21);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLHandActionClassifier.PersistentParameters((uint64_t)v12, v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      HandActionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)();
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0((uint64_t)v17, (void (*)(void))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    }
  }
  OUTLINED_FUNCTION_8_1();
}

void HandActionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)()
{
  OUTLINED_FUNCTION_30_15();
  uint64_t v169 = (char *)v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v159 = v8;
  uint64_t v165 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_49();
  uint64_t v161 = v10;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_45_3();
  uint64_t v164 = v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_45_3();
  uint64_t v162 = v14;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_36_15();
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v166 = v16;
  v167 = v17;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  uint64_t v160 = v18;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_45_3();
  uint64_t v163 = v20;
  OUTLINED_FUNCTION_20_3();
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v153 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v153 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v28 = OUTLINED_FUNCTION_17(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_5_8();
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v153 - v31;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_45_3();
  uint64_t v168 = v33;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v153 - v35;
  type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_32_23();
  if (!v38)
  {
    v172[0] = v37;
    unint64_t v44 = lazy protocol witness table accessor for type Int and conformance Int();
    OUTLINED_FUNCTION_26_21();
    OUTLINED_FUNCTION_13_40();
    OUTLINED_FUNCTION_70_6();
    OUTLINED_FUNCTION_85();
    *(_OWORD *)uint64_t v45 = xmmword_2272CDF80;
LABEL_14:
    *(void *)(v45 + 16) = v4;
    *(void *)(v45 + 24) = v32;
    *(void *)(v45 + 32) = v44;
    *(void *)(v45 + 40) = v172;
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_32_23();
  if (!v38)
  {
    v172[0] = v39;
    unint64_t v44 = lazy protocol witness table accessor for type Int and conformance Int();
    OUTLINED_FUNCTION_26_21();
    OUTLINED_FUNCTION_13_40();
    OUTLINED_FUNCTION_70_6();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_33_18();
    uint64_t v47 = v46 + 1;
    unint64_t v48 = "Maximum Iterations";
LABEL_13:
    *(void *)uint64_t v45 = v47;
    *(void *)(v45 + 8) = (unint64_t)(v48 - 32) | 0x8000000000000000;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_32_23();
  if (!v38)
  {
    v172[0] = v41;
    unint64_t v44 = lazy protocol witness table accessor for type Int and conformance Int();
    OUTLINED_FUNCTION_26_21();
    OUTLINED_FUNCTION_13_40();
    OUTLINED_FUNCTION_70_6();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_33_18();
    uint64_t v47 = v49 + 5;
    unint64_t v48 = "Prediction Window Size";
    goto LABEL_13;
  }
  if (*(double *)(v6 + *(int *)(v40 + 36)) == *(double *)(v4 + *(int *)(v40 + 36)))
  {
    OUTLINED_FUNCTION_32_23();
    if (!v38)
    {
      v172[0] = v42;
      unint64_t v44 = lazy protocol witness table accessor for type Int and conformance Int();
      OUTLINED_FUNCTION_26_21();
      OUTLINED_FUNCTION_13_40();
      OUTLINED_FUNCTION_70_6();
      OUTLINED_FUNCTION_85();
      OUTLINED_FUNCTION_33_18();
      uint64_t v47 = v57 + 3;
      unint64_t v48 = "Augmentation options";
      goto LABEL_13;
    }
    uint64_t v43 = (uint64_t)v169;
    MLHandActionClassifier.DataSource.gatherAnnotatedFileNames()();
    if (v43) {
      goto LABEL_16;
    }
    uint64_t v169 = v36;
    MLHandActionClassifier.DataSource.gatherAnnotatedFileNames()();
    uint64_t v157 = 0;
    outlined init with copy of URL?((uint64_t)v169, (uint64_t)v32, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v58 = v166;
    OUTLINED_FUNCTION_57_4((uint64_t)v32, 1, v166);
    if (v38)
    {
      outlined destroy of URL?((uint64_t)v32, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      uint64_t v156 = (void (*)(char *, char *, uint64_t))v167[4];
      v156(v26, v32, v58);
      if (DataFrame.shape.getter() < 1)
      {
        uint64_t v61 = OUTLINED_FUNCTION_38_19();
        v62(v61);
      }
      else
      {
        outlined init with copy of URL?(v168, v1, &demangling cache variable for type metadata for DataFrame?);
        OUTLINED_FUNCTION_57_4(v1, 1, v58);
        if (v38)
        {
          uint64_t v59 = OUTLINED_FUNCTION_38_19();
          v60(v59);
          outlined destroy of URL?(v1, &demangling cache variable for type metadata for DataFrame?);
        }
        else
        {
          v156(v24, (char *)v1, v58);
          if (DataFrame.shape.getter() >= 1)
          {
            uint64_t v63 = v157;
            HandActionClassifierTrainingSessionDelegate.pathsByLabel(for:)();
            if (!v63)
            {
              HandActionClassifierTrainingSessionDelegate.pathsByLabel(for:)();
              uint64_t v144 = OUTLINED_FUNCTION_51_11();
              specialized static Dictionary<>.== infix(_:_:)(v144, v145);
              char v147 = v146;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v149 = v167;
              uint64_t v148 = v168;
              if ((v147 & 1) == 0)
              {
                lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                uint64_t v150 = OUTLINED_FUNCTION_85();
                OUTLINED_FUNCTION_3_62(v150, v151);
              }
              unint64_t v152 = (void (*)(void))v149[1];
              OUTLINED_FUNCTION_137();
              v152();
              OUTLINED_FUNCTION_137();
              v152();
              uint64_t v134 = v148;
              goto LABEL_48;
            }
            unint64_t v64 = (void (*)(void))v167[1];
            OUTLINED_FUNCTION_21_4();
            v64();
            OUTLINED_FUNCTION_21_4();
            v64();
LABEL_47:
            uint64_t v134 = v168;
LABEL_48:
            outlined destroy of URL?(v134, &demangling cache variable for type metadata for DataFrame?);
            outlined destroy of URL?((uint64_t)v169, &demangling cache variable for type metadata for DataFrame?);
            goto LABEL_16;
          }
          uint64_t v65 = (void (*)(char *, uint64_t))v167[1];
          v65(v24, v58);
          v65(v26, v58);
        }
      }
    }
    outlined init with copy of MLHandActionClassifier.DataSource(v6, v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      unint64_t v66 = *(void **)v2;
      char v67 = *(unsigned char *)(v2 + 8);
      char v68 = *(void **)(v2 + 24);
      uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
      unint64_t v70 = *(void **)(v2 + 40);
      uint64_t v155 = *(void *)(v2 + 16);
      uint64_t v156 = v69;
      swift_bridgeObjectRelease();
      uint64_t v2 = v162;
      outlined init with copy of MLHandActionClassifier.DataSource(v4, v162, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        char v71 = *(void **)v2;
        uint64_t v72 = (void *)v2;
        char v73 = *(unsigned char *)(v2 + 8);
        uint64_t v74 = (void *)v72[3];
        uint64_t v75 = v72[4];
        uint64_t v166 = v72[2];
        v167 = v74;
        uint64_t v76 = (void *)v72[5];
        swift_bridgeObjectRelease();
        v170 = v66;
        char v171 = v67;
        outlined copy of Result<_DataTable, Error>(v66, v67);
        MLDataTable.subscript.getter((uint64_t)v156, v70, (uint64_t)v172);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_7_21(v66, v67, v77, v78, v79, v80, v81, v82, v153, v154, v155, (char)v156, v157, v158, v159, v160, v161, v162, v163,
          v164,
          v165,
          v166,
          (uint64_t)v167,
          v168);
        OUTLINED_FUNCTION_69_5();
        MLDataTable.subscript.getter(v75, v76, v83);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_7_21(v71, v73, v84, v85, v86, v87, v88, v89, v153, v154, v155, (char)v156, v157, v158, v159, v160, v161, v162, v163,
          v164,
          v165,
          v166,
          (uint64_t)v167,
          v168);
        LOBYTE(v76) = specialized static Array<A>.== infix(_:_:)((uint64_t)v66, v90);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v76)
        {
          v170 = v66;
          char v171 = v67;
          outlined copy of Result<_DataTable, Error>(v66, v67);
          MLDataTable.subscript.getter(v155, v68, (uint64_t)v172);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_7_21(v66, v67, v91, v92, v93, v94, v95, v96, v153, v154, v155, (char)v156, v157, v158, v159, v160, v161, v162, v163,
            v164,
            v165,
            v166,
            (uint64_t)v167,
            v168);
          OUTLINED_FUNCTION_69_5();
          MLDataTable.subscript.getter(v166, v167, v97);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_7_21(v71, v73, v98, v99, v100, v101, v102, v103, v153, v154, v155, (char)v156, v157, v158, v159, v160, v161, v162, v163,
            v164,
            v165,
            v166,
            (uint64_t)v167,
            v168);
          char v105 = specialized static Array<A>.== infix(_:_:)((uint64_t)v66, v104);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v105)
          {
            outlined consume of Result<_DataTable, Error>(v71, v73);
            outlined consume of Result<_DataTable, Error>(v66, v67);
            outlined destroy of URL?(v168, &demangling cache variable for type metadata for DataFrame?);
            outlined destroy of URL?((uint64_t)v169, &demangling cache variable for type metadata for DataFrame?);
            goto LABEL_16;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v138 = OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_3_62(v138, v139);
        outlined consume of Result<_DataTable, Error>(v71, v73);
        outlined consume of Result<_DataTable, Error>(v66, v67);
        goto LABEL_47;
      }
      outlined consume of Result<_DataTable, Error>(v66, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v58 = v166;
    }
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v2, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v106 = v164;
    outlined init with copy of MLHandActionClassifier.DataSource(v6, v164, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v108 = (uint64_t *)(v106 + *(int *)(v107 + 48));
      uint64_t v109 = *v108;
      uint64_t v110 = v108[1];
      uint64_t v111 = (void (**)(char *, char *, uint64_t))(v106 + *(int *)(v107 + 64));
      uint64_t v113 = *v111;
      uint64_t v112 = (uint64_t)v111[1];
      uint64_t v155 = v109;
      uint64_t v156 = v113;
      uint64_t v162 = v112;
      swift_bridgeObjectRelease();
      uint64_t v114 = v167;
      uint64_t v115 = (void (*)(uint64_t, uint64_t, uint64_t))v167[4];
      v115(v163, v106, v58);
      uint64_t v116 = v4;
      uint64_t v117 = v161;
      outlined init with copy of MLHandActionClassifier.DataSource(v116, v161, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v118 = (uint64_t *)(v117 + *(int *)(v107 + 48));
        uint64_t v120 = *v118;
        uint64_t v119 = v118[1];
        uint64_t v153 = v120;
        uint64_t v154 = v119;
        uint64_t v121 = (uint64_t *)(v117 + *(int *)(v107 + 64));
        uint64_t v122 = *v121;
        uint64_t v123 = v121[1];
        uint64_t v164 = v110;
        uint64_t v165 = v122;
        swift_bridgeObjectRelease();
        uint64_t v124 = v160;
        v115(v160, v117, v58);
        uint64_t v125 = v159;
        MEMORY[0x22A672220](v156, v162);
        swift_bridgeObjectRelease();
        MEMORY[0x22A672220](v165, v123);
        swift_bridgeObjectRelease();
        specialized Sequence.allSatisfy(_:)();
        char v127 = v126;
        outlined destroy of URL?(v125, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
        if (v127)
        {
          MEMORY[0x22A672220](v155, v164);
          swift_bridgeObjectRelease();
          MEMORY[0x22A672220](v153, v154);
          swift_bridgeObjectRelease();
          specialized Sequence.allSatisfy(_:)();
          char v129 = v128;
          outlined destroy of URL?(v125, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
          uint64_t v130 = v168;
          if ((v129 & 1) == 0)
          {
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            uint64_t v131 = OUTLINED_FUNCTION_85();
            OUTLINED_FUNCTION_3_62(v131, v132);
          }
          unint64_t v133 = (void (*)(void))v167[1];
          OUTLINED_FUNCTION_21_4();
          v133();
          OUTLINED_FUNCTION_21_4();
          v133();
          uint64_t v134 = v130;
          goto LABEL_48;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v140 = OUTLINED_FUNCTION_85();
        OUTLINED_FUNCTION_3_62(v140, v141);
        uint64_t v142 = (void (*)(uint64_t, uint64_t))v167[1];
        v142(v124, v58);
        uint64_t v143 = OUTLINED_FUNCTION_71_5();
        ((void (*)(uint64_t))v142)(v143);
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v114[1])(v163, v58);
      outlined destroy of URL?(v168, &demangling cache variable for type metadata for DataFrame?);
      outlined destroy of URL?((uint64_t)v169, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v137 = v117;
    }
    else
    {
      outlined destroy of URL?(v168, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v135 = OUTLINED_FUNCTION_27_11();
      outlined destroy of URL?(v135, v136);
      uint64_t v137 = v106;
    }
    _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v137, (void (*)(void))type metadata accessor for MLHandActionClassifier.DataSource);
    goto LABEL_16;
  }
  uint64_t v50 = Double.description.getter();
  uint64_t v52 = v51;
  uint64_t v53 = Double.description.getter();
  uint64_t v55 = v54;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_33_18();
  *(void *)uint64_t v45 = v56;
  *(void *)(v45 + 8) = 0x80000002272D8530;
  *(void *)(v45 + 16) = v50;
  *(void *)(v45 + 24) = v52;
  *(void *)(v45 + 32) = v53;
  *(void *)(v45 + 40) = v55;
LABEL_15:
  *(unsigned char *)(v45 + 48) = 3;
  swift_willThrow();
LABEL_16:
  OUTLINED_FUNCTION_33_14();
}

void HandActionClassifierTrainingSessionDelegate.pathsByLabel(for:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v85 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_22_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_0();
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v80 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v67 = v12;
  uint64_t v68 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_7();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v65 - v14;
  ColumnID.init(_:_:)();
  OUTLINED_FUNCTION_25_15();
  ColumnID.init(_:_:)();
  if ((specialized DataFrame.containsColumn<A>(_:)() & 1) == 0
    || (specialized DataFrame.containsColumn<A>(_:)() & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    Dictionary.init(dictionaryLiteral:)();
    uint64_t v63 = *(void (**)(void))(v67 + 8);
    OUTLINED_FUNCTION_21_4();
    v63();
    OUTLINED_FUNCTION_21_4();
    v63();
LABEL_31:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  v65[2] = v0;
  v65[1] = v15;
  DataFrame.subscript.getter();
  uint64_t v16 = v1 + *(int *)(v7 + 52);
  DataFrame.subscript.getter();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32);
  v17(v3, v1, v4);
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  uint64_t v18 = v80;
  dispatch thunk of Sequence.makeIterator()();
  v17(v3, v16, v4);
  uint64_t v19 = v18;
  uint64_t v20 = v83;
  uint64_t v21 = v19 + *(int *)(v83 + 52);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v78 = *(int *)(v20 + 56);
  *(unsigned char *)(v19 + v78) = 0;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  uint64_t v22 = (void *)(v19 + *(int *)(v77 + 36));
  uint64_t v23 = lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  uint64_t v69 = 0;
  uint64_t v75 = v85 + 8;
  uint64_t v76 = (uint64_t *)(v85 + 16);
  unint64_t v70 = (void *)MEMORY[0x263F8EE80];
  uint64_t v66 = v3;
  uint64_t v73 = v21;
  uint64_t v74 = v2;
  uint64_t v71 = v23;
  uint64_t v72 = v22;
  while (1)
  {
    uint64_t v24 = (void *)*v22;
    dispatch thunk of Collection.endIndex.getter();
    if (v24 == v84) {
      goto LABEL_29;
    }
    uint64_t v25 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
    uint64_t v27 = v26[1];
    uint64_t v79 = *v26;
    uint64_t v86 = v27;
    swift_bridgeObjectRetain();
    uint64_t v28 = OUTLINED_FUNCTION_31_16();
    v25(v28);
    uint64_t v83 = *v76;
    ((void (*)(uint64_t, uint64_t, uint64_t))v83)(v3, v19, v4);
    dispatch thunk of Collection.formIndex(after:)();
    OUTLINED_FUNCTION_71_5();
    uint64_t v82 = v29;
    OUTLINED_FUNCTION_137();
    v30();
    uint64_t v31 = *(void **)(v21 + *(int *)(v77 + 36));
    dispatch thunk of Collection.endIndex.getter();
    if (v31 == v84)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v80;
LABEL_29:
      *(unsigned char *)(v19 + v78) = 1;
LABEL_30:
      outlined destroy of URL?(v19, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
      unint64_t v64 = *(void (**)(void))(v67 + 8);
      OUTLINED_FUNCTION_21_4();
      v64();
      OUTLINED_FUNCTION_21_4();
      v64();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v69);
      goto LABEL_31;
    }
    uint64_t v32 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
    uint64_t v34 = v33[1];
    uint64_t v81 = *v33;
    swift_bridgeObjectRetain();
    uint64_t v35 = OUTLINED_FUNCTION_31_16();
    v32(v35);
    ((void (*)(uint64_t, uint64_t, uint64_t))v83)(v3, v21, v4);
    dispatch thunk of Collection.formIndex(after:)();
    OUTLINED_FUNCTION_71_5();
    OUTLINED_FUNCTION_137();
    v36();
    if (!v86 || !v34)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v80;
      goto LABEL_25;
    }
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v69);
    uint64_t v37 = v70;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = v37;
    unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v34);
    uint64_t v41 = v37[2];
    BOOL v42 = (v40 & 1) == 0;
    Swift::Int v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      break;
    }
    unint64_t v44 = v39;
    char v45 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
    Swift::Bool v46 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v43);
    uint64_t v47 = v84;
    if (v46)
    {
      unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v34);
      if ((v45 & 1) != (v49 & 1)) {
        goto LABEL_34;
      }
      unint64_t v44 = v48;
    }
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
    {
      v47[(v44 >> 6) + 8] |= 1 << v44;
      uint64_t v50 = (void *)(v47[6] + 16 * v44);
      *uint64_t v50 = v81;
      v50[1] = v34;
      *(void *)(v47[7] + 8 * v44) = MEMORY[0x263F8EE78];
      uint64_t v51 = v47[2];
      uint64_t v52 = v51 + 1;
      BOOL v53 = __OFADD__(v51, 1);
      swift_bridgeObjectRetain();
      if (v53) {
        goto LABEL_33;
      }
      v47[2] = v52;
    }
    swift_bridgeObjectRetain();
    uint64_t v54 = v47[7];
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void *)(v54 + 8 * v44);
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v54 + 8 * v44) = v55;
    if ((v56 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v55 = v61;
      *(void *)(v54 + 8 * v44) = v61;
    }
    unint64_t v58 = *(void *)(v55 + 16);
    unint64_t v57 = *(void *)(v55 + 24);
    unint64_t v70 = v47;
    if (v58 >= v57 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v55 = v62;
      *(void *)(v54 + 8 * v44) = v62;
    }
    uint64_t v59 = v79;
    uint64_t v19 = v80;
    *(void *)(v55 + 16) = v58 + 1;
    uint64_t v60 = v55 + 16 * v58;
    *(void *)(v60 + 32) = v59;
    *(void *)(v60 + 40) = v86;
    swift_bridgeObjectRelease();
    uint64_t v69 = specialized thunk for @callee_guaranteed () -> (@owned [URL]);
    uint64_t v3 = v66;
LABEL_25:
    uint64_t v22 = v72;
    uint64_t v21 = v73;
    if (*(unsigned char *)(v19 + v78) == 1) {
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized DataFrame.containsColumn<A>(_:)()
{
  uint64_t v0 = type metadata accessor for AnyColumn();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<String>);
  v4._uint64_t countAndFlagsBits = ColumnID.name.getter();
  Swift::Int_optional v10 = DataFrame.indexOfColumn(_:)(v4);
  unint64_t value = v10.value;
  Swift::Bool is_nil = v10.is_nil;
  swift_bridgeObjectRelease();
  if (is_nil) {
    return 0;
  }
  uint64_t result = DataFrame.columns.getter();
  if ((value & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (value < *(void *)(result + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, result+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * value, v0);
    swift_bridgeObjectRelease();
    uint64_t v8 = AnyColumn.wrappedElementType.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return v8 == MEMORY[0x263F8D310];
  }
  __break(1u);
  return result;
}

uint64_t HandActionClassifierTrainingSessionDelegate.deinit()
{
  _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  outlined consume of MLDataTable?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable + 8));
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures + 8));
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures), *(unsigned char *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures + 8));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HandActionClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  HandActionClassifierTrainingSessionDelegate.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandActionClassifierTrainingSessionDelegate()
{
  return type metadata accessor for HandActionClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for HandActionClassifierTrainingSessionDelegate()
{
  uint64_t result = type metadata singleton initialization cache for HandActionClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for HandActionClassifierTrainingSessionDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for HandActionClassifierTrainingSessionDelegate()
{
  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLHandActionClassifier.PersistentParameters?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for MLHandActionClassifier.PersistentParameters?()
{
  if (!lazy cache variable for type metadata for MLHandActionClassifier.PersistentParameters?)
  {
    type metadata accessor for MLHandActionClassifier.PersistentParameters();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance HandActionClassifierTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance HandActionClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance HandActionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)HandActionClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

void protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance HandActionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance HandActionClassifierTrainingSessionDelegate(Swift::Int a1)
{
  Swift::tuple_Int_finished_Bool v9 = HandActionClassifierTrainingSessionDelegate.extractFeatures(from:)(a1);
  if (v3)
  {
    Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    uint64_t v5 = v1;
    BOOL finished = 0;
  }
  else
  {
    Swift::Int v2 = v9._0;
    v9._0 = *(void *)(v1 + 8);
    BOOL finished = v9.finished;
    uint64_t v5 = v1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(v4, v5, v2, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance HandActionClassifierTrainingSessionDelegate(Swift::Int a1)
{
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v10 = HandActionClassifierTrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    v10._0 = v1[1];
    v10.metrics._rawValue = v1;
    BOOL finished = 0;
  }
  else
  {
    Swift::Int v6 = v10._0;
    rawValue = v10.metrics._rawValue;
    v10._0 = v1[1];
    BOOL finished = v10.finished;
    v10.metrics._rawValue = v1;
    *(void *)&v10.BOOL finished = v6;
    uint64_t v3 = (uint64_t)rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10._0, (uint64_t)v10.metrics._rawValue, *(uint64_t *)&v10.finished, v3, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance HandActionClassifierTrainingSessionDelegate()
{
  HandActionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance HandActionClassifierTrainingSessionDelegate(uint64_t a1)
{
  return HandActionClassifierTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance HandActionClassifierTrainingSessionDelegate()
{
}

uint64_t lazy protocol witness table accessor for type Column<String> and conformance Column<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Column<String>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of MLHandActionClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [[Double]] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [[Double]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[Double]] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[Double]]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A], &demangling cache variable for type metadata for [Double]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[Double]] and conformance <A> [A]);
  }
  return result;
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 192;
  for (uint64_t i = 12; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t outlined init with take of MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_52_3();
  v5(v4);
  return a2;
}

uint64_t outlined init with copy of MLHandActionClassifier.DataSource(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t _s8CreateML22MLHandActionClassifierV10DataSourceOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_62(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 4;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_13_40()
{
  *(void *)(v1 - 104) = v0;
  return BinaryInteger.description.getter();
}

uint64_t OUTLINED_FUNCTION_20_35()
{
  return type metadata accessor for MLHandActionClassifier.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_22_26()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_26_21()
{
  return BinaryInteger.description.getter();
}

void OUTLINED_FUNCTION_29_25()
{
  char v3 = *(unsigned char *)(v0 + 8);
  specialized MLDataTable.subscript.getter(v3, v1 - 136);
}

double OUTLINED_FUNCTION_31_18()
{
  *(void *)(v1 - 208) = v0;
  return v2;
}

uint64_t OUTLINED_FUNCTION_38_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_15()
{
  return type metadata accessor for MLHandActionClassifier.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_42_19()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters(0);
}

uint64_t OUTLINED_FUNCTION_51_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_58_6()
{
  return *(void *)(v0 - 264);
}

uint64_t OUTLINED_FUNCTION_60_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_61_8@<X0>(uint64_t a1@<X8>)
{
  return static MLHandActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)(v1, v1, v1, v1, a1);
}

void OUTLINED_FUNCTION_62_5()
{
  outlined consume of Result<_DataTable, Error>(v1, v2);
  uint64_t v4 = *(void **)(v3 - 304);
  outlined consume of Result<_DataTable, Error>(v4, v0);
}

uint64_t OUTLINED_FUNCTION_66_3@<X0>(uint64_t a1@<X8>)
{
  return static MLHandActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)(v1, v1, v1, v1, a1);
}

id OUTLINED_FUNCTION_69_5()
{
  *(void *)(v2 - 120) = v0;
  *(unsigned char *)(v2 - 112) = v1;
  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

unint64_t OUTLINED_FUNCTION_70_6()
{
  return lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
}

uint64_t OUTLINED_FUNCTION_71_5()
{
  return v0;
}

void OUTLINED_FUNCTION_72_4()
{
  outlined consume of MLDataTable?(v1, v0);
}

void **assignWithCopy for MLLogisticRegressionClassifier.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = *a2;
      char v8 = *((unsigned char *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((unsigned char *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata singleton initialization cache for MLLogisticRegressionClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *assignWithTake for MLLogisticRegressionClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLLogisticRegressionClassifier.ModelParameters.ValidationData()
{
  uint64_t result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.ValidationData.asTable()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v10 = v8 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = (uint64_t *)(v16 - v15);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v2, v16 - v15);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v19 = *v17;
      char v20 = *((unsigned char *)v17 + 8);
      goto LABEL_7;
    case 2:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v4);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v10, v13, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(1, (uint64_t)&v27);
      uint64_t v24 = OUTLINED_FUNCTION_4_1();
      uint64_t result = v25(v24);
      uint64_t v19 = v27;
      char v20 = v28;
LABEL_7:
      *(void *)a1 = v19;
      *(unsigned char *)(a1 + 8) = v20;
      break;
    case 3:
      uint64_t v21 = MEMORY[0x22A6764B0](0);
      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x2272393B4);
      }
      uint64_t v22 = v21;
      type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      type metadata accessor for _DataTable();
      swift_allocObject();
      uint64_t result = (uint64_t)_DataTable.init(impl:)(v23);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = -1;
      break;
  }
  return result;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a3;
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v66 = a1;
  uint64_t v61 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_3_0();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  unint64_t v57 = (char *)(v13 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v56 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v56 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  MEMORY[0x270FA5388](v21 - 8);
  OUTLINED_FUNCTION_33();
  uint64_t v24 = v22 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_3_0();
  uint64_t v31 = (uint64_t *)(v30 - v29);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v4, v30 - v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v47 = *v31;
      char v48 = *((unsigned char *)v31 + 8);
      uint64_t v49 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      *(void *)&long long v63 = v47;
      BYTE8(v63) = v48;
      uint64_t v50 = v60;
      DataFrame.init(_:)((uint64_t)&v63, v60);
      uint64_t v43 = v50;
      uint64_t v44 = 0;
      uint64_t v46 = v49;
      goto LABEL_10;
    case 2u:
      char v38 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v6 + 32);
      unint64_t v39 = v31;
      uint64_t v40 = v61;
      v38((uint64_t)v10, v39, v61);
      if (DataFrameProtocol.isEmpty.getter())
      {
        (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v40);
        uint64_t v41 = OUTLINED_FUNCTION_1_3();
        v42(v41);
        uint64_t v43 = v60;
        uint64_t v44 = 1;
      }
      else
      {
        uint64_t v51 = OUTLINED_FUNCTION_1_3();
        v52(v51);
        uint64_t v53 = v60;
        v38(v60, v10, v40);
        uint64_t v43 = v53;
        uint64_t v44 = 0;
      }
      uint64_t v46 = v40;
      goto LABEL_10;
    case 3u:
      uint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v66, v62, v61);
      uint64_t v43 = v60;
      uint64_t v44 = 1;
      uint64_t v46 = v45;
LABEL_10:
      uint64_t result = __swift_storeEnumTagSinglePayload(v43, v44, 1, v46);
      break;
    default:
      char v32 = *((unsigned char *)v31 + 16);
      char v33 = *((unsigned char *)v31 + 17);
      long long v63 = *(_OWORD *)v31;
      char v64 = v32;
      char v65 = v33;
      DataFrame.randomSplit(strategy:)((uint64_t)v27, (uint64_t)v20, (uint64_t)&v63);
      uint64_t v35 = v58;
      uint64_t v34 = v59;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      v36(v18, v20, v59);
      DataFrame.init(_:)();
      outlined init with copy of DataFrame.Slice?((uint64_t)v27, v24);
      if (__swift_getEnumTagSinglePayload(v24, 1, v34) == 1)
      {
        __swift_storeEnumTagSinglePayload(v60, 1, 1, v61);
        uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v18, v24, v34);
        v36(v57, v18, v34);
        uint64_t v55 = v60;
        DataFrame.init(_:)();
        uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
        v37(v18, v34);
        __swift_storeEnumTagSinglePayload(v55, 0, 1, v61);
      }
      v37(v20, v34);
      uint64_t result = outlined destroy of DataFrame.Slice?((uint64_t)v27);
      break;
  }
  return result;
}

id MLBoostedTreeClassifier.model.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLBoostedTreeClassifier() + 20));

  return v1;
}

uint64_t type metadata accessor for MLBoostedTreeClassifier()
{
  uint64_t result = type metadata singleton initialization cache for MLBoostedTreeClassifier;
  if (!type metadata singleton initialization cache for MLBoostedTreeClassifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void key path setter for MLBoostedTreeClassifier.model : MLBoostedTreeClassifier(id *a1)
{
  id v1 = *a1;
  MLBoostedTreeClassifier.model.setter();
}

void MLBoostedTreeClassifier.model.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_53_13() + 20);

  *(void *)(v1 + v2) = v0;
}

void (*MLBoostedTreeClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLBoostedTreeClassifier() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  id v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLBoostedTreeClassifier.targetColumn.getter()
{
  return OUTLINED_FUNCTION_0_5();
}

uint64_t MLBoostedTreeClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for MLBoostedTreeClassifier() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MLBoostedTreeClassifier.targetColumn.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.featureColumns.getter()
{
  type metadata accessor for MLBoostedTreeClassifier();

  return swift_bridgeObjectRetain();
}

uint64_t MLBoostedTreeClassifier.featureColumns.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_53_13() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*MLBoostedTreeClassifier.featureColumns.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MLBoostedTreeClassifier() + 32);

  return outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLBoostedTreeClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t MLBoostedTreeClassifier.trainingMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLBoostedTreeClassifier();
  return _s8CreateML19MLClassifierMetricsVWOcTm_2(v1 + *(int *)(v3 + 36), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t MLBoostedTreeClassifier.validationMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MLBoostedTreeClassifier();
  return _s8CreateML19MLClassifierMetricsVWOcTm_2(v1 + *(int *)(v3 + 40), a1, (void (*)(void))type metadata accessor for MLClassifierMetrics);
}

uint64_t static MLBoostedTreeClassifier._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLBoostedTreeClassifier._defaultSessionParameters);
  return _s8CreateML19MLClassifierMetricsVWOcTm_2(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

#error "227239DB8: call analysis failed (funcsize=81)"

uint64_t MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  void *v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = (const void *)v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  *(void *)(v4 + *(int *)(v2 + 20)) = v0[11];
  _s8CreateML22AnyTreeClassifierModelVWObTm_2(v3, v4, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
  memcpy((void *)(v4 + *(int *)(v2 + 32)), v1, 0x70uLL);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16) + *(int *)(v0 + 96);
  outlined destroy of MLBoostedTreeClassifier.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v2, (void (*)(void))type metadata accessor for MLClassifierMetrics);
  uint64_t v3 = OUTLINED_FUNCTION_0_5();
  outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v3, v4);
  OUTLINED_FUNCTION_30();
  return v5();
}

void MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v213 = v0;
  uint64_t v4 = v3;
  v212 = v5;
  v224 = v6;
  v210 = v7;
  uint64_t v219 = v8;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for AnyClassificationMetrics();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  uint64_t v15 = OUTLINED_FUNCTION_17_3(v14);
  uint64_t v16 = type metadata accessor for MLClassifierMetrics(v15);
  uint64_t v17 = OUTLINED_FUNCTION_17(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v19);
  uint64_t v20 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v21 = OUTLINED_FUNCTION_1(v20);
  uint64_t v195 = v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v197 = (uint64_t)&v177 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = v24;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  v199 = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  uint64_t v27 = OUTLINED_FUNCTION_17(v26);
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_33_0();
  uint64_t v205 = v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v30 = OUTLINED_FUNCTION_17(v29);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v31);
  uint64_t v201 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v35);
  uint64_t v36 = type metadata accessor for AnyTreeClassifier();
  uint64_t v37 = OUTLINED_FUNCTION_17(v36);
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v38);
  uint64_t v220 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v215 = v39;
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v44);
  type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_40_0();
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v52);
  uint64_t v54 = (char *)&v177 - v53;
  uint64_t v218 = type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v216 = v55;
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v57);
  OUTLINED_FUNCTION_36_15();
  uint64_t v58 = type metadata accessor for MLBoostedTreeClassifier();
  uint64_t v214 = (uint64_t)v10 + *(int *)(v58 + 36);
  MLClassifierMetrics.init()(v58, v59, v60, v61, v62, v63, v64, v65, v177, v178, (uint64_t)v179, v180, v181, v182, v183, v184, v185, v186, v187,
    v188);
  v194 = (int *)v58;
  uint64_t v66 = *(int *)(v58 + 40);
  v198 = v10;
  uint64_t v67 = (void *)((char *)v10 + v66);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v68, 0xD0000000000000C0);
  *uint64_t v67 = v69;
  uint64_t v70 = type metadata accessor for MLClassifierMetrics.Contents(0);
  v211 = v67;
  uint64_t v191 = v70;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v4, (uint64_t)v223);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLBoostedTreeClassifier.ModelParameters((uint64_t)v223);
  uint64_t v217 = v4;
  outlined init with copy of URL?(v4, (uint64_t)&v221, &demangling cache variable for type metadata for Any?);
  if (v222)
  {
    uint64_t v71 = (uint64_t)&v54[*(int *)(v46 + 48)];
    outlined init with take of Any(&v221, v223);
    swift_dynamicCast();
    uint64_t v72 = v213;
    MLBoostedTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v54, v71, v219);
    if (v72)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_17_29();
      OUTLINED_FUNCTION_25_0();
      v73();
      outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v2, (void (*)(void))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
LABEL_17:
      uint64_t v118 = OUTLINED_FUNCTION_6_43();
      v119(v118);
      uint64_t v112 = (uint64_t)v211;
      goto LABEL_18;
    }
    uint64_t v213 = v71;
    uint64_t v182 = v46;
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v2, (void (*)(void))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
    static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v54, (uint64_t)v210, v224, (uint64_t)v212);
    uint64_t v181 = v74;
    swift_bridgeObjectRelease();
    uint64_t v75 = v182;
    uint64_t v76 = v208;
    uint64_t v77 = (uint64_t)v208 + *(int *)(v182 + 48);
    uint64_t v78 = v215;
    uint64_t v79 = *(void (**)(uint64_t, char *, uint64_t))(v215 + 16);
    v212 = v54;
    uint64_t v80 = v220;
    uint64_t v180 = v215 + 16;
    uint64_t v179 = v79;
    v79((uint64_t)v208, v54, v220);
    outlined init with copy of URL?(v213, v77, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v77, 1, v80) == 1)
    {
      uint64_t v178 = 0;
      outlined destroy of URL?(v77, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v81 = *(void (**)(void))(v78 + 8);
      uint64_t v82 = (v78 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unint64_t v208 = v81;
      ((void (*)(void (*)(void), uint64_t))v81)(v76, v80);
      goto LABEL_6;
    }
    uint64_t v98 = OUTLINED_FUNCTION_0_5();
    v99(v98);
    uint64_t v100 = v78 + 8;
    uint64_t v101 = *(void (**)(void))(v78 + 8);
    OUTLINED_FUNCTION_20_23();
    v101();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB370;
    uint64_t v103 = v210;
    *(void *)(inited + 32) = v210;
    *(void *)(inited + 40) = v224;
    swift_bridgeObjectRetain();
    v104._uint64_t countAndFlagsBits = 0x73616C4365657254;
    v104._uint64_t object = (void *)0xEE00726569666973;
    DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v104);
    if (v105)
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_17_29();
      OUTLINED_FUNCTION_20_23();
      v101();
    }
    else
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      uint64_t v113 = swift_allocObject();
      *(_OWORD *)(v113 + 16) = xmmword_2272CB4D0;
      uint64_t v114 = MEMORY[0x263F8D6C8];
      *(void *)(v113 + 32) = MEMORY[0x263F8D310];
      *(void *)(v113 + 40) = v114;
      v115._uint64_t countAndFlagsBits = (uint64_t)v103;
      v115._uint64_t object = v224;
      v116._uint64_t countAndFlagsBits = 0x73616C4365657254;
      v116._uint64_t object = (void *)0xEE00726569666973;
      DataFrame.validateColumnTypes(_:_:context:)(v115, (Swift::OpaquePointer)v113, v116);
      if (!v117)
      {
        uint64_t v178 = 0;
        uint64_t v82 = v100 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        OUTLINED_FUNCTION_20_23();
        v101();
        swift_bridgeObjectRelease();
        uint64_t v75 = v182;
        unint64_t v208 = v101;
LABEL_6:
        uint64_t v83 = v75;
        uint64_t v84 = v203 + *(int *)(v75 + 48);
        uint64_t v85 = v212;
        uint64_t v86 = v179;
        v179(v203, v212, v80);
        uint64_t v87 = v213;
        uint64_t v207 = v84;
        outlined init with copy of URL?(v213, v84, &demangling cache variable for type metadata for DataFrame?);
        MEMORY[0x22A672220](v210, v224);
        OUTLINED_FUNCTION_49_9();
        v88();
        uint64_t v89 = v204;
        uint64_t v90 = v204 + *(int *)(v83 + 48);
        v86(v204, v85, v220);
        uint64_t v91 = v220;
        outlined init with copy of URL?(v87, v90, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v92 = v205;
        outlined init with take of DataFrame?(v90, v205);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v92, 1, v91);
        uint64_t v94 = v216;
        uint64_t v95 = v218;
        if (EnumTagSinglePayload == 1)
        {
          uint64_t v96 = v208;
          ((void (*)(uint64_t, uint64_t))v208)(v89, v91);
          outlined destroy of URL?(v92, &demangling cache variable for type metadata for DataFrame?);
          uint64_t v97 = v202;
          __swift_storeEnumTagSinglePayload(v202, 1, 1, v201);
        }
        else
        {
          uint64_t v97 = v202;
          MEMORY[0x22A672220](v210, v224);
          uint64_t v106 = v92;
          uint64_t v107 = v208;
          ((void (*)(uint64_t, uint64_t))v208)(v106, v91);
          __swift_storeEnumTagSinglePayload(v97, 0, 1, v201);
          uint64_t v96 = v107;
          ((void (*)(uint64_t, uint64_t))v107)(v89, v91);
        }
        uint64_t v108 = v206;
        uint64_t v109 = v200;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v200, v1, v95);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v110 = v178;
        AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v209, v97, v210, (uint64_t)v224, v109, v108);
        if (v110)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_17_29();
          ((void (*)(uint64_t, uint64_t))v96)(v219, v220);
          outlined destroy of URL?((uint64_t)v212, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v1, v95);
          outlined destroy of URL?(v207, &demangling cache variable for type metadata for DataFrame?);
          uint64_t v112 = (uint64_t)v211;
        }
        else
        {
          uint64_t v209 = v82;
          outlined destroy of URL?(v207, &demangling cache variable for type metadata for DataFrame?);
          uint64_t v111 = v199;
          AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(v212, v213, 0, 0, v199);
          unint64_t v208 = v96;
          if ((AnalyticsReporter.init()() & 1) == 0)
          {
            uint64_t v120 = v193 + *(int *)(v182 + 48);
            OUTLINED_FUNCTION_27_23();
            v121();
            outlined init with copy of URL?(v213, v120, &demangling cache variable for type metadata for DataFrame?);
            Swift::Int v122 = DataFrame.shape.getter();
            uint64_t v123 = OUTLINED_FUNCTION_49_6();
            ((void (*)(uint64_t))v208)(v123);
            v124._uint64_t countAndFlagsBits = 0xD000000000000015;
            v124._uint64_t object = (void *)0x80000002272D4D30;
            AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_boostedTreeClassifier, v124, v122);
            uint64_t v111 = v199;
            outlined destroy of URL?(v120, &demangling cache variable for type metadata for DataFrame?);
            v125._uint64_t object = (void *)0x80000002272D84F0;
            v125._uint64_t countAndFlagsBits = 0xD000000000000010;
            AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_boostedTreeClassifier, v125, *(void *)(v206[3] + 16));
          }
          char v126 = v194;
          char v127 = v198;
          char v128 = (void *)((char *)v198 + v194[6]);
          char v129 = v210;
          v210 = v128;
          *char v128 = v129;
          v128[1] = v224;
          uint64_t v225 = (uint64_t)v127 + v126[8];
          outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v217, v225);
          uint64_t v207 = v126[7];
          *(void *)((char *)v127 + v207) = v181;
          uint64_t v130 = v197;
          _s8CreateML19MLClassifierMetricsVWOcTm_2((uint64_t)v111, v197, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          unint64_t v131 = (*(unsigned __int8 *)(v195 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80);
          uint64_t v132 = swift_allocObject();
          _s8CreateML22AnyTreeClassifierModelVWObTm_2(v130, v132 + v131, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          specialized blockAwait<A>(_:)();
          uint64_t v134 = v133;
          swift_release();
          uint64_t v135 = v126[5];
          *(void *)((char *)v127 + v135) = v134;
          _s8CreateML19MLClassifierMetricsVWOcTm_2((uint64_t)v111, (uint64_t)v127, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          uint64_t v136 = v192;
          OUTLINED_FUNCTION_14();
          AnyTreeClassifierModel.applied(to:eventHandler:)(v137);
          uint64_t v178 = 0;
          uint64_t v205 = v135;
          uint64_t v141 = *v127;
          uint64_t v142 = v127[1];
          MEMORY[0x22A672220](*v127, v142);
          uint64_t v143 = v212;
          MEMORY[0x22A672220](v141, v142);
          uint64_t v144 = v190;
          AnyClassificationMetrics.init(_:_:)();
          uint64_t v145 = v136;
          uint64_t v146 = v220;
          char v147 = v208;
          ((void (*)(uint64_t, uint64_t))v208)(v145, v220);
          uint64_t v148 = v144;
          uint64_t v149 = v189;
          _s8CreateML22AnyTreeClassifierModelVWObTm_2(v148, v189, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
          swift_storeEnumTagMultiPayload();
          outlined assign with take of MLClassifierMetrics(v149, v214);
          uint64_t v150 = v187 + *(int *)(v182 + 48);
          OUTLINED_FUNCTION_27_23();
          v151();
          outlined init with copy of URL?(v213, v150, &demangling cache variable for type metadata for DataFrame?);
          if (__swift_getEnumTagSinglePayload(v150, 1, v146) == 1)
          {
            OUTLINED_FUNCTION_17_29();
            ((void (*)(uint64_t, uint64_t))v147)(v219, v146);
            uint64_t v152 = outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v199, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
            OUTLINED_FUNCTION_52_11(v152, (void (*)(void))type metadata accessor for AnyTreeClassifier);
            outlined destroy of URL?((uint64_t)v143, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            uint64_t v153 = OUTLINED_FUNCTION_6_43();
            v154(v153);
            outlined destroy of URL?(v150, &demangling cache variable for type metadata for DataFrame?);
            uint64_t v155 = OUTLINED_FUNCTION_45_12();
            ((void (*)(uint64_t))v147)(v155);
            goto LABEL_19;
          }
          uint64_t v156 = OUTLINED_FUNCTION_0_5();
          v157(v156);
          uint64_t v158 = OUTLINED_FUNCTION_45_12();
          ((void (*)(uint64_t))v147)(v158);
          OUTLINED_FUNCTION_14();
          uint64_t v159 = v178;
          AnyTreeClassifierModel.applied(to:eventHandler:)(v160);
          uint64_t v161 = v219;
          uint64_t v178 = v159;
          if (!v159)
          {
            uint64_t v167 = OUTLINED_FUNCTION_49_6();
            MEMORY[0x22A672220](v167);
            uint64_t v168 = OUTLINED_FUNCTION_49_6();
            uint64_t v169 = v186;
            MEMORY[0x22A672220](v168);
            uint64_t v170 = v184;
            AnyClassificationMetrics.init(_:_:)();
            uint64_t v171 = v220;
            ((void (*)(uint64_t, uint64_t))v147)(v185, v220);
            OUTLINED_FUNCTION_17_29();
            ((void (*)(uint64_t, uint64_t))v147)(v161, v171);
            ((void (*)(uint64_t, uint64_t))v147)(v169, v171);
            uint64_t v172 = outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v199, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
            OUTLINED_FUNCTION_52_11(v172, (void (*)(void))type metadata accessor for AnyTreeClassifier);
            outlined destroy of URL?((uint64_t)v212, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
            uint64_t v173 = OUTLINED_FUNCTION_6_43();
            v174(v173);
            uint64_t v175 = v170;
            uint64_t v176 = v183;
            _s8CreateML22AnyTreeClassifierModelVWObTm_2(v175, v183, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
            swift_storeEnumTagMultiPayload();
            outlined assign with take of MLClassifierMetrics(v176, (uint64_t)v211);
            goto LABEL_19;
          }
          OUTLINED_FUNCTION_17_29();
          uint64_t v162 = OUTLINED_FUNCTION_45_12();
          ((void (*)(uint64_t))v147)(v162);
          uint64_t v163 = OUTLINED_FUNCTION_49_6();
          ((void (*)(uint64_t))v147)(v163);
          uint64_t v164 = (uint64_t)v198;
          uint64_t v165 = v212;
          uint64_t v166 = v205;
          uint64_t v138 = outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v199, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
          OUTLINED_FUNCTION_52_11(v138, (void (*)(void))type metadata accessor for AnyTreeClassifier);
          outlined destroy of URL?((uint64_t)v165, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          uint64_t v139 = OUTLINED_FUNCTION_6_43();
          v140(v139);
          outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v164, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of MLBoostedTreeClassifier.ModelParameters(v225);
          uint64_t v112 = (uint64_t)v211;
        }
LABEL_18:
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v214, (void (*)(void))type metadata accessor for MLClassifierMetrics);
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v112, (void (*)(void))type metadata accessor for MLClassifierMetrics);
LABEL_19:
        OUTLINED_FUNCTION_8_1();
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_17_29();
      OUTLINED_FUNCTION_20_23();
      v101();
    }
    OUTLINED_FUNCTION_20_23();
    v101();
    outlined destroy of URL?((uint64_t)v212, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t outlined destroy of MLBoostedTreeClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  *uint64_t v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v1);
}

uint64_t MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for DataFrame();
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_40_0();
  char v10 = *((unsigned char *)a1 + 8);
  uint64_t v12 = *a1;
  char v13 = v10;
  DataFrame.init(_:)((uint64_t)&v12, v5);
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters(a5, (uint64_t)&v12);
  MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)();
  return outlined destroy of MLBoostedTreeClassifier.ModelParameters(a5);
}

void MLBoostedTreeClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v78 = (void *)v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v70 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  uint64_t v69 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_106();
  uint64_t v71 = v10;
  uint64_t v11 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_41_0();
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  uint64_t v74 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v68 - v16;
  uint64_t v18 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v19 = OUTLINED_FUNCTION_1(v18);
  uint64_t v76 = v20;
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v23 = MEMORY[0x270FA5388](v19);
  uint64_t v73 = (uint64_t)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_106();
  uint64_t v75 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_36_15();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_106();
  uint64_t v77 = v27;
  uint64_t v28 = type metadata accessor for MLBoostedTreeClassifier();
  MLClassifierMetrics.init()(v28, v29, v30, v31, v32, v33, v34, v35, (uint64_t)v68, v69, v70, (uint64_t)v71, v72, v73, v74, v75, v76, v77, (uint64_t)v78,
    v6 + *(int *)(v28 + 36));
  uint64_t v68 = (int *)v28;
  uint64_t v36 = *(int *)(v28 + 40);
  uint64_t v72 = v6;
  uint64_t v37 = (void *)(v6 + v36);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_32_2(v38, 0xD0000000000000C0);
  void *v37 = v39;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v81 = v4;
  switch(*(unsigned char *)(v4 + *(int *)(type metadata accessor for MLCheckpoint() + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v40)
      {
LABEL_4:
        specialized _setUpCast<A, B>(_:)(MEMORY[0x263F8EE88]);
        uint64_t v42 = v41;
        BoostedTreeConfiguration.init()();
        AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v42, 0, 0xE000000000000000, MEMORY[0x263F8EE78], v1, (uint64_t)v17);
        lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
        uint64_t v43 = v78;
        UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v17, (void (*)(void))type metadata accessor for AnyTreeClassifier);
        if (v43)
        {
          unint64_t v44 = specialized _setUpCast<A, B>(_:)(MEMORY[0x263F8EE88]);
          BoostedTreeConfiguration.init()();
          uint64_t v45 = v74;
          AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v44, 0, 0xE000000000000000, v1, v74);
          uint64_t v46 = v73;
          UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
          outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v45, (void (*)(void))type metadata accessor for AnyTreeClassifier);

          uint64_t v2 = v46;
        }
        uint64_t v48 = v2;
        uint64_t v49 = v77;
        _s8CreateML22AnyTreeClassifierModelVWObTm_2(v48, v77, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v50 = v75;
        _s8CreateML19MLClassifierMetricsVWOcTm_2(v49, v75, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        unint64_t v51 = (*(unsigned __int8 *)(v76 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
        uint64_t v52 = swift_allocObject();
        _s8CreateML22AnyTreeClassifierModelVWObTm_2(v50, v52 + v51, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        specialized blockAwait<A>(_:)();
        uint64_t v54 = v53;
        swift_release();
        uint64_t v55 = v68;
        uint64_t v56 = v72;
        *(void *)(v72 + v68[5]) = v54;
        _s8CreateML19MLClassifierMetricsVWOcTm_2(v49, v56, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        uint64_t v58 = v70;
        uint64_t v57 = v71;
        *uint64_t v71 = 0;
        v57[1] = 0;
        *((_WORD *)v57 + 8) = 256;
        swift_storeEnumTagMultiPayload();
        uint64_t v59 = v56 + v55[8];
        *(_OWORD *)uint64_t v59 = 0u;
        *(_OWORD *)(v59 + 16) = 0u;
        *(_OWORD *)(v59 + 32) = xmmword_2272CB8C0;
        *(_OWORD *)(v59 + 48) = xmmword_2272CB8D0;
        *(void *)(v59 + 64) = 42;
        *(void *)(v59 + 72) = 0x3FD3333333333333;
        *(void *)(v59 + 80) = 0;
        *(unsigned char *)(v59 + 88) = 1;
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(v59 + 96) = _Q0;
        uint64_t v65 = v69;
        _s8CreateML19MLClassifierMetricsVWOcTm_2((uint64_t)v57, v69, (void (*)(void))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
        v80[3] = v58;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v80);
        _s8CreateML22AnyTreeClassifierModelVWObTm_2(v65, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
        outlined assign with take of Any?((uint64_t)v80, v59);
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v57, (void (*)(void))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
        uint64_t v67 = (void *)(v56 + v55[6]);
        *uint64_t v67 = 0;
        v67[1] = 0xE000000000000000;
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v81, (void (*)(void))type metadata accessor for MLCheckpoint);
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v49, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
        *(void *)(v56 + v55[7]) = MEMORY[0x263F8EE78];
      }
      else
      {
        swift_allocError();
        *(void *)uint64_t v47 = 0xD000000000000042;
        *(void *)(v47 + 8) = 0x80000002272DAB10;
        *(_OWORD *)(v47 + 16) = 0u;
        *(_OWORD *)(v47 + 32) = 0u;
        *(unsigned char *)(v47 + 48) = 0;
        swift_willThrow();
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v81, (void (*)(void))type metadata accessor for MLCheckpoint);
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v79, (void (*)(void))type metadata accessor for MLClassifierMetrics);
        outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v37, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      }
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

void static MLBoostedTreeClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_41_1();
  char v4 = *(unsigned char *)(v2 + 8);
  id v7 = *(id *)v2;
  char v8 = v4;
  outlined copy of Result<_DataTable, Error>(v7, v4);
  DataFrame.init(_:)((uint64_t)&v7, v1);
  static MLBoostedTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  uint64_t v5 = OUTLINED_FUNCTION_38_1();
  v6(v5);
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;

  static MLBoostedTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLBoostedTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  char v6 = *(unsigned char *)(v1 + 8);
  id v7 = *(id *)v1;
  char v8 = v6;
  outlined copy of Result<_DataTable, Error>(v7, v6);
  DataFrame.init(_:)((uint64_t)&v7, v0);
  static MLBoostedTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  uint64_t v54;
  _UNKNOWN **v55;
  long long v56;
  uint64_t v57;
  uint64_t v58;

  OUTLINED_FUNCTION_9_0();
  unint64_t v51 = v3;
  uint64_t v52 = v4;
  char v6 = v5;
  uint64_t v50 = v7;
  uint64_t v49 = v8;
  char v10 = v9;
  uint64_t v11 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v14);
  uint64_t v15 = type metadata accessor for BoostedTreeConfiguration();
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_41_1();
  type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_15();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v58 = v20;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v40 - v23;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_36_15();
  uint64_t v47 = v6;
  outlined init with copy of URL?(v6, (uint64_t)&v56, &demangling cache variable for type metadata for Any?);
  if (v57)
  {
    uint64_t v25 = v2 + *(int *)(v18 + 48);
    outlined init with take of Any(&v56, &v53);
    swift_dynamicCast();
    MLBoostedTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v2, v25, v10);
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
    if (!v1)
    {
      uint64_t v26 = (uint64_t)&v24[*(int *)(v18 + 48)];
      uint64_t v42 = v24;
      type metadata accessor for DataFrame();
      OUTLINED_FUNCTION_0();
      unint64_t v44 = v27;
      uint64_t v43 = 0;
      uint64_t v29 = *(void (**)(void))(v28 + 16);
      OUTLINED_FUNCTION_51_0();
      v29();
      uint64_t v45 = v26;
      outlined init with copy of URL?(v25, v26, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v41 = v58 + *(int *)(v18 + 48);
      uint64_t v30 = v41;
      OUTLINED_FUNCTION_51_0();
      v29();
      outlined init with copy of URL?(v25, v30, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v47, (uint64_t)&v53);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLBoostedTreeClassifier.ModelParameters((uint64_t)&v53);
      uint64_t v31 = v52;
      _s8CreateML19MLClassifierMetricsVWOcTm_2(v52, v48, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      uint64_t v32 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
      OUTLINED_FUNCTION_31_0();
      uint64_t v33 = v43;
      TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      if (v33)
      {
        outlined destroy of URL?(v2, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_25_0();
        v35();
        outlined destroy of URL?(v45, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        uint64_t v36 = v34;
        OUTLINED_FUNCTION_25_0();
        v37();
        outlined destroy of URL?(v45, &demangling cache variable for type metadata for DataFrame?);
        uint64_t v54 = v32;
        uint64_t v55 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
        *(void *)&uint64_t v53 = v36;
        uint64_t v38 = v31;
        uint64_t v39 = v46;
        _s8CreateML19MLClassifierMetricsVWOcTm_2(v38, v46, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>);
        OUTLINED_FUNCTION_31_0();
        swift_retain();
        specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v53, v39, 5);
        outlined destroy of URL?(v2, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        swift_release();
      }
    }
    OUTLINED_FUNCTION_8_1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static MLBoostedTreeClassifier.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLBoostedTreeClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13[-1] - v8;
  _s8CreateML19MLClassifierMetricsVWOcTm_2(a1, (uint64_t)&v13[-1] - v8, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v10 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v11 = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v9);
  if (!v1)
  {
    v13[3] = v10;
    v13[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v13[0] = v11;
    _s8CreateML19MLClassifierMetricsVWOcTm_2(a1, (uint64_t)v7, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v13, (uint64_t)v7, 5);
  }
}

uint64_t closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  if (a2)
  {
    *uint64_t v12 = a1;
    swift_storeEnumTagMultiPayload();
    id v22 = a1;
    a4(v12);
    return outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v18 = v23;
    uint64_t v19 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a4;
    void v20[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:), (uint64_t)v20);
    return swift_release();
  }
}

uint64_t closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:);
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLBoostedTreeClassifier.init(delegate:)()
{
  OUTLINED_FUNCTION_11();
  v0[42] = v1;
  v0[43] = v2;
  uint64_t v3 = type metadata accessor for AnyClassificationMetrics();
  v0[44] = v3;
  OUTLINED_FUNCTION_17(v3);
  v0[45] = swift_task_alloc();
  v0[46] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?);
  OUTLINED_FUNCTION_17(v4);
  v0[47] = swift_task_alloc();
  v0[48] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_17(v5);
  v0[49] = OUTLINED_FUNCTION_5();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  OUTLINED_FUNCTION_17(v6);
  v0[50] = OUTLINED_FUNCTION_5();
  uint64_t v7 = type metadata accessor for MLBoostedTreeClassifier();
  v0[51] = v7;
  OUTLINED_FUNCTION_17(v7);
  v0[52] = OUTLINED_FUNCTION_5();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_17(v8);
  v0[53] = OUTLINED_FUNCTION_5();
  uint64_t v9 = type metadata accessor for BoostedTreeConfiguration();
  v0[54] = v9;
  OUTLINED_FUNCTION_1(v9);
  v0[55] = v10;
  v0[56] = OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_17(v11);
  v0[57] = OUTLINED_FUNCTION_5();
  uint64_t v12 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v0[58] = v12;
  OUTLINED_FUNCTION_17(v12);
  v0[59] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v13, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = v0[57];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[43] + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = (int *)v0[58];
  uint64_t v5 = v0[59];
  uint64_t v7 = v0[56];
  uint64_t v8 = v0[54];
  uint64_t v9 = v0[55];
  uint64_t v10 = v0[53];
  uint64_t v11 = v0[50];
  uint64_t v12 = v0[43];
  _s8CreateML22AnyTreeClassifierModelVWObTm_2(v0[57], v5, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v5 + v6[8], v8);
  outlined init with copy of URL?(v5 + v6[5], v10, &demangling cache variable for type metadata for DataFrame?);
  MLBoostedTreeClassifier.ModelParameters.init(configuration:validation:)(v7, v10, (uint64_t)(v0 + 2));
  uint64_t v13 = (uint64_t *)(v5 + v6[6]);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = *(void *)(v5 + v6[7]);
  uint64_t v17 = v12 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v17, v11, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  uint64_t v18 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t result = __swift_getEnumTagSinglePayload(v11, 1, v18);
  if (result == 1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[60] = v19;
  *uint64_t v19 = v0;
  v19[1] = MLBoostedTreeClassifier.init(delegate:);
  uint64_t v20 = v0[52];
  uint64_t v21 = v0[50];
  return MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(v20, v21, v15, v14, v16, (uint64_t)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 488) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;

  uint64_t v1 = v0[48];
  uint64_t v3 = v0[43];
  uint64_t v2 = v0[44];
  _s8CreateML22AnyTreeClassifierModelVWObTm_2(v0[52], v0[42], (void (*)(void))type metadata accessor for MLBoostedTreeClassifier);
  uint64_t v4 = v3 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_53();
  outlined init with copy of URL?(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v0[59];
    uint64_t v7 = v0[51];
    uint64_t v9 = v0[48];
    uint64_t v8 = v0[49];
    uint64_t v10 = v0[47];
    uint64_t v12 = v0[43];
    uint64_t v11 = v0[44];
    uint64_t v13 = v0[42];
    outlined destroy of MLBoostedTreeClassifier.ModelParameters((uint64_t)(v0 + 2));
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v6, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
    _s8CreateML22AnyTreeClassifierModelVWObTm_2(v9, v8, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
    outlined assign with take of MLClassifierMetrics(v8, v13 + *(int *)(v7 + 36));
    uint64_t v14 = v12 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_53();
    outlined init with copy of URL?(v14, v10, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    swift_release();
    if (__swift_getEnumTagSinglePayload(v10, 1, v11) == 1)
    {
      outlined destroy of URL?(v0[47], &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    else
    {
      uint64_t v15 = v0[51];
      uint64_t v16 = v0[46];
      uint64_t v17 = v0[45];
      uint64_t v18 = v0[42];
      _s8CreateML22AnyTreeClassifierModelVWObTm_2(v0[47], v16, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      _s8CreateML22AnyTreeClassifierModelVWObTm_2(v16, v17, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      uint64_t v19 = v18 + *(int *)(v15 + 40);
      outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v19, (void (*)(void))type metadata accessor for MLClassifierMetrics);
      _s8CreateML22AnyTreeClassifierModelVWObTm_2(v17, v19, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
      OUTLINED_FUNCTION_0_5();
      swift_storeEnumTagMultiPayload();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 472);
  swift_release();
  outlined destroy of MLBoostedTreeClassifier.ModelParameters(v0 + 16);
  outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

void MLBoostedTreeClassifier.predictions(from:)()
{
  uint64_t v2 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_31_1();
  type metadata accessor for MLBoostedTreeClassifier();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (!v8)
  {
    OUTLINED_FUNCTION_14();
    AnyTreeClassifierModel.applied(to:eventHandler:)(v9);
    MEMORY[0x22A672220](*v0, v0[1]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
}

uint64_t MLBoostedTreeClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_31_1();
  uint64_t v8 = type metadata accessor for AnyColumn();
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_27_7();
  char v10 = *(unsigned char *)(a1 + 8);
  id v14 = *(id *)a1;
  char v15 = v10;
  outlined copy of Result<_DataTable, Error>(v14, v10);
  DataFrame.init(_:)((uint64_t)&v14, v3);
  MLBoostedTreeClassifier.predictions(from:)();
  uint64_t v11 = OUTLINED_FUNCTION_47_0();
  if (v2) {
    return v12(v11);
  }
  v12(v11);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v4, 1, a2);
}

uint64_t MLBoostedTreeClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = type metadata accessor for AnyClassificationMetrics();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_31_1();
  uint64_t v8 = type metadata accessor for MLBoostedTreeClassifier();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v9, v10);
  if (v11) {
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  uint64_t v13 = (void *)(v2 + *(int *)(v8 + 24));
  uint64_t v14 = v13[1];
  *(void *)(inited + 32) = *v13;
  *(void *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v15._uint64_t object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v15);
  if (v11)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_5:
    *a2 = v11;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  AnyTreeClassifierModel.computeMetrics(on:)(a1, v3);
  _s8CreateML22AnyTreeClassifierModelVWObTm_2(v3, (uint64_t)a2, (void (*)(void))type metadata accessor for AnyClassificationMetrics);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  id v10;
  char v11;

  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_41_0();
  uint64_t v6 = *(unsigned char *)(a1 + 8);
  Swift::String v10 = *(id *)a1;
  uint64_t v11 = v6;
  outlined copy of Result<_DataTable, Error>(v10, v6);
  DataFrame.init(_:)((uint64_t)&v10, v2);
  MLBoostedTreeClassifier.evaluation(on:)(v2, a2);
  uint64_t v7 = OUTLINED_FUNCTION_45_12();
  return v8(v7);
}

void MLBoostedTreeClassifier.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v3;
  uint64_t v37 = v5;
  uint64_t v6 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v36 = v8;
  uint64_t v31 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_15();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_10();
  uint64_t v32 = v4[1];
  unint64_t v12 = v4[3];
  unint64_t v33 = v4[2];
  uint64_t v34 = *v4;
  uint64_t v13 = v4[4];
  uint64_t v14 = v4[5];
  uint64_t v15 = v4[6];
  unint64_t v16 = v4[7];
  uint64_t v17 = v4[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v37, 0xD000000000000015, (void *)0x80000002272DAB60, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v0);
  if (!v2)
  {
    unint64_t v29 = v16;
    uint64_t v30 = v13;
    _s8CreateML19MLClassifierMetricsVWOcTm_2(v1, v36, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
    if (v32)
    {
      uint64_t v18 = v34;
      uint64_t v19 = v34;
      uint64_t v20 = v32;
      unint64_t v21 = v33;
      uint64_t v22 = v30;
      uint64_t v23 = v14;
      uint64_t v24 = v15;
      unint64_t v25 = v29;
    }
    else
    {
      uint64_t v26 = NSFullUserName();
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v27;

      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v17 = 0;
      unint64_t v21 = 0xD000000000000033;
      unint64_t v12 = 0x80000002272D4DC0;
      unint64_t v25 = 0xE100000000000000;
      uint64_t v24 = 49;
      uint64_t v18 = v34;
    }
    v38[0] = v19;
    v38[1] = v20;
    v38[2] = v21;
    v38[3] = v12;
    v38[4] = v22;
    v38[5] = v23;
    v38[6] = v24;
    v38[7] = v25;
    v38[8] = v17;
    outlined copy of MLModelMetadata?(v18, v32);
    specialized CoreMLExportable.export(metadata:)(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v36, (void (*)(void))type metadata accessor for AnyTreeClassifierModel);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v1, v31);
    OUTLINED_FUNCTION_25_0();
    v28();
  }
  OUTLINED_FUNCTION_8_1();
}

void MLBoostedTreeClassifier.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_10();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F06E50], v1);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLBoostedTreeClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  OUTLINED_FUNCTION_8_1();
}

unint64_t MLBoostedTreeClassifier.debugDescription.getter()
{
  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_27_7();
  uint64_t v3 = type metadata accessor for MLBoostedTreeClassifier();
  uint64_t v4 = MLBoostedTreeClassifier.ModelParameters.description.getter();
  uint64_t v6 = v5;
  unint64_t v7 = MLClassifierMetrics.description.getter();
  uint64_t v9 = v8;
  _s8CreateML19MLClassifierMetricsVWOcTm_2(v0 + *(int *)(v3 + 40), v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  unint64_t v10 = MLClassifierMetrics.description.getter();
  uint64_t v12 = v11;
  v13._uint64_t countAndFlagsBits = v4;
  v13._uint64_t object = v6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v7;
  v14._uint64_t object = v9;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v15._uint64_t object = (void *)0x80000002272D3FE0;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._uint64_t countAndFlagsBits = v10;
    v16._uint64_t object = v12;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000020;
    v17._uint64_t object = (void *)0x80000002272D4000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

NSAttributedString MLBoostedTreeClassifier.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  unint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLBoostedTreeClassifier.debugDescription.getter();
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.Class isa = (Class)v2;
  a1->super.Class isa = result.super.isa;
  return result;
}

uint64_t partial apply for closure #1 in MLBoostedTreeClassifier.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  *uint64_t v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(v1);
}

uint64_t _s8CreateML19MLClassifierMetricsVWOcTm_2(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

id sub_22723E268@<X0>(void *a1@<X8>)
{
  id result = MLBoostedTreeClassifier.model.getter();
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLBoostedTreeClassifier(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v9 = a2 + 2;
    uint64_t v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    uint64_t v13 = type metadata accessor for AnyTreeClassifierModel();
    uint64_t v14 = *(int *)(v13 + 24);
    Swift::String v15 = (char *)a1 + v14;
    Swift::String v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for BaseTreeClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = *(int *)(v13 + 28);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void *)v20;
    LOBYTE(v20) = v20[8];
    *(void *)uint64_t v19 = v21;
    uint64_t v22 = a3[5];
    uint64_t v23 = a3[6];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    v19[8] = (char)v20;
    *(void *)((char *)a1 + v22) = v24;
    unint64_t v25 = (void *)((char *)a1 + v23);
    uint64_t v26 = *(void *)((char *)a2 + v23);
    uint64_t v27 = *(void *)((char *)a2 + v23 + 8);
    uint64_t v28 = a3[7];
    uint64_t v29 = a3[8];
    uint64_t v30 = *(void *)((char *)a2 + v28);
    *unint64_t v25 = v26;
    v25[1] = v27;
    *(void *)((char *)a1 + v28) = v30;
    uint64_t v31 = (char *)a1 + v29;
    uint64_t v32 = (char *)a2 + v29;
    uint64_t v33 = *(void *)((char *)a2 + v29 + 24);
    swift_bridgeObjectRetain();
    id v34 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *((void *)v31 + 3) = v33;
      (**(void (***)(char *, char *, uint64_t))(v33 - 8))(v31, v32, v33);
    }
    else
    {
      long long v35 = *((_OWORD *)v32 + 1);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v35;
    }
    long long v36 = *((_OWORD *)v32 + 3);
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
    *((_OWORD *)v31 + 3) = v36;
    *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
    *((void *)v31 + 10) = *((void *)v32 + 10);
    v31[88] = v32[88];
    long long v37 = *((_OWORD *)v32 + 6);
    uint64_t v38 = a3[9];
    uint64_t v39 = (void **)((char *)a1 + v38);
    char v40 = (void **)((char *)a2 + v38);
    *((_OWORD *)v31 + 6) = v37;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v46 = *v40;
      id v47 = v46;
      *uint64_t v39 = v46;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v39 = *v40;
      uint64_t v42 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v43 = *(int *)(v42 + 20);
      uint64_t v65 = (char *)v40 + v43;
      uint64_t v66 = (char *)v39 + v43;
      uint64_t v44 = type metadata accessor for DataFrame();
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16);
      v45(v66, v65, v44);
      v45((char *)v39 + *(int *)(v42 + 24), (char *)v40 + *(int *)(v42 + 24), v44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v48 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v48 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(v48);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v49 - 8) + 16))(v39, v40, v49);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v50 = a3[10];
    unint64_t v51 = (void **)((char *)a1 + v50);
    uint64_t v52 = (void **)((char *)a2 + v50);
    int v53 = swift_getEnumCaseMultiPayload();
    if (v53 == 2)
    {
      uint64_t v60 = *v52;
      id v61 = v60;
      *unint64_t v51 = v60;
    }
    else if (v53 == 1)
    {
      *unint64_t v51 = *v52;
      uint64_t v54 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v55 = *(int *)(v54 + 20);
      uint64_t v56 = (char *)v51 + v55;
      uint64_t v57 = (char *)v52 + v55;
      uint64_t v58 = type metadata accessor for DataFrame();
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16);
      v59(v56, v57, v58);
      v59((char *)v51 + *(int *)(v54 + 24), (char *)v52 + *(int *)(v54 + 24), v58);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v62 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v62 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(v62);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v63 - 8) + 16))(v51, v52, v63);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithCopy for MLBoostedTreeClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[5];
  uint64_t v21 = a3[6];
  uint64_t v22 = *(void **)((char *)a2 + v20);
  unsigned char v17[8] = (char)v18;
  *(void *)((char *)a1 + v20) = v22;
  uint64_t v23 = (void *)((char *)a1 + v21);
  uint64_t v24 = *(void *)((char *)a2 + v21);
  uint64_t v25 = *(void *)((char *)a2 + v21 + 8);
  uint64_t v26 = a3[7];
  uint64_t v27 = a3[8];
  uint64_t v28 = *(void *)((char *)a2 + v26);
  void *v23 = v24;
  v23[1] = v25;
  *(void *)((char *)a1 + v26) = v28;
  uint64_t v29 = (char *)a1 + v27;
  uint64_t v30 = (char *)a2 + v27;
  uint64_t v31 = *(void *)((char *)a2 + v27 + 24);
  swift_bridgeObjectRetain();
  id v32 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    *((void *)v29 + 3) = v31;
    (**(void (***)(char *, char *, uint64_t))(v31 - 8))(v29, v30, v31);
  }
  else
  {
    long long v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v33;
  }
  long long v34 = *((_OWORD *)v30 + 3);
  *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
  *((_OWORD *)v29 + 3) = v34;
  *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
  *((void *)v29 + 10) = *((void *)v30 + 10);
  v29[88] = v30[88];
  long long v35 = *((_OWORD *)v30 + 6);
  uint64_t v36 = a3[9];
  long long v37 = (void **)((char *)a1 + v36);
  uint64_t v38 = (void **)((char *)a2 + v36);
  *((_OWORD *)v29 + 6) = v35;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v44 = *v38;
    id v45 = v44;
    void *v37 = v44;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    void *v37 = *v38;
    uint64_t v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v41 = *(int *)(v40 + 20);
    uint64_t v63 = (char *)v38 + v41;
    uint64_t v64 = (char *)v37 + v41;
    uint64_t v42 = type metadata accessor for DataFrame();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
    v43(v64, v63, v42);
    v43((char *)v37 + *(int *)(v40 + 24), (char *)v38 + *(int *)(v40 + 24), v42);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v47 - 8) + 16))(v37, v38, v47);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v48 = a3[10];
  uint64_t v49 = (void **)((char *)a1 + v48);
  uint64_t v50 = (void **)((char *)a2 + v48);
  int v51 = swift_getEnumCaseMultiPayload();
  if (v51 == 2)
  {
    uint64_t v58 = *v50;
    id v59 = v58;
    *uint64_t v49 = v58;
  }
  else if (v51 == 1)
  {
    *uint64_t v49 = *v50;
    uint64_t v52 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v53 = *(int *)(v52 + 20);
    uint64_t v54 = (char *)v49 + v53;
    uint64_t v55 = (char *)v50 + v53;
    uint64_t v56 = type metadata accessor for DataFrame();
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
    v57(v54, v55, v56);
    v57((char *)v49 + *(int *)(v52 + 24), (char *)v50 + *(int *)(v52 + 24), v56);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v60 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v60 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(v60);
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v61 - 8) + 16))(v49, v50, v61);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MLBoostedTreeClassifier(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      uint64_t v9 = a2[4];
      *uint64_t v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v8;
    a1[4] = a2[4];
    *uint64_t v6 = v10;
  }
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = v18[8];
  *(void *)uint64_t v17 = v19;
  unsigned char v17[8] = (char)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[5];
  uint64_t v21 = *(void **)((char *)a2 + v20);
  uint64_t v22 = *(void **)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = v21;
  id v23 = v21;

  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[8];
  uint64_t v28 = (uint64_t)a1 + v27;
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = *(void *)((char *)a2 + v27 + 24);
  if (*(void *)((char *)a1 + v27 + 24))
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(void *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_15;
  }
  long long v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_15:
  *(void *)(v28 + 32) = v29[4];
  *(void *)(v28 + 40) = v29[5];
  *(void *)(v28 + 48) = v29[6];
  *(void *)(v28 + 56) = v29[7];
  *(void *)(v28 + 64) = v29[8];
  *(void *)(v28 + 72) = v29[9];
  uint64_t v32 = v29[10];
  *(unsigned char *)(v28 + 88) = *((unsigned char *)v29 + 88);
  *(void *)(v28 + 80) = v32;
  *(void *)(v28 + 96) = v29[12];
  *(void *)(v28 + 104) = v29[13];
  if (a1 != a2)
  {
    uint64_t v33 = a3[9];
    long long v34 = (void **)((char *)a1 + v33);
    long long v35 = (void **)((char *)a2 + v33);
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v33, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v41 = *v35;
      id v42 = v41;
      void *v34 = v41;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      void *v34 = *v35;
      uint64_t v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v38 = *(int *)(v37 + 20);
      uint64_t v60 = (char *)v35 + v38;
      uint64_t v61 = (char *)v34 + v38;
      uint64_t v39 = type metadata accessor for DataFrame();
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
      v40(v61, v60, v39);
      v40((char *)v34 + *(int *)(v37 + 24), (char *)v35 + *(int *)(v37 + 24), v39);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(v43);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v44 - 8) + 16))(v34, v35, v44);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v45 = a3[10];
    uint64_t v46 = (void **)((char *)a1 + v45);
    uint64_t v47 = (void **)((char *)a2 + v45);
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v45, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
    int v48 = swift_getEnumCaseMultiPayload();
    if (v48 == 2)
    {
      uint64_t v55 = *v47;
      id v56 = v55;
      *uint64_t v46 = v55;
    }
    else if (v48 == 1)
    {
      *uint64_t v46 = *v47;
      uint64_t v49 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v50 = *(int *)(v49 + 20);
      int v51 = (char *)v46 + v50;
      uint64_t v52 = (char *)v47 + v50;
      uint64_t v53 = type metadata accessor for DataFrame();
      uint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
      v54(v51, v52, v53);
      v54((char *)v46 + *(int *)(v49 + 24), (char *)v47 + *(int *)(v49 + 24), v53);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1) {
        uint64_t v57 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v57 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(v57);
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v58 - 8) + 16))(v46, v47, v58);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLBoostedTreeClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  memcpy((void *)(a1 + v16), (const void *)(a2 + v16), 0x70uLL);
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v25 = *(int *)(v24 + 20);
    uint64_t v41 = &v19[v25];
    id v42 = &v18[v25];
    uint64_t v26 = type metadata accessor for DataFrame();
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
    v27(v42, v41, v26);
    v27(&v18[*(int *)(v24 + 24)], &v19[*(int *)(v24 + 24)], v26);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v18, v19, v23);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
LABEL_10:
  uint64_t v28 = a3[10];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  int v31 = swift_getEnumCaseMultiPayload();
  if (v31 == 1)
  {
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v34 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v35 = *(int *)(v34 + 20);
    uint64_t v36 = &v29[v35];
    uint64_t v37 = &v30[v35];
    uint64_t v38 = type metadata accessor for DataFrame();
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32);
    v39(v36, v37, v38);
    v39(&v29[*(int *)(v34 + 24)], &v30[*(int *)(v34 + 24)], v38);
  }
  else
  {
    if (v31)
    {
      memcpy(v29, v30, *(void *)(*(void *)(v20 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v32 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v29, v30, v33);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for MLBoostedTreeClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  uint64_t v9 = type metadata accessor for AnyTreeClassifierModel();
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v16) = v16[8];
  *(void *)uint64_t v15 = v17;
  unsigned char v15[8] = (char)v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[5];
  uint64_t v19 = *(void **)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);

  uint64_t v20 = a3[6];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  if (*(void *)((char *)a1 + v25 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v26);
  }
  long long v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  long long v29 = *((_OWORD *)v27 + 3);
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  *(_OWORD *)(v26 + 48) = v29;
  *(void *)(v26 + 64) = *((void *)v27 + 8);
  *(void *)(v26 + 72) = *((void *)v27 + 9);
  *(void *)(v26 + 80) = *((void *)v27 + 10);
  *(unsigned char *)(v26 + 88) = v27[88];
  *(_OWORD *)(v26 + 96) = *((_OWORD *)v27 + 6);
  if (a1 == a2) {
    return a1;
  }
  uint64_t v30 = a3[9];
  int v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v30, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v33 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)int v31 = *(void *)v32;
    uint64_t v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v38 = *(int *)(v37 + 20);
    uint64_t v54 = &v32[v38];
    uint64_t v55 = &v31[v38];
    uint64_t v39 = type metadata accessor for DataFrame();
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32);
    v40(v55, v54, v39);
    v40(&v31[*(int *)(v37 + 24)], &v32[*(int *)(v37 + 24)], v39);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v31, v32, v36);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  uint64_t v41 = a3[10];
  id v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1 + v41, (void (*)(void))type metadata accessor for MLClassifierMetrics.Contents);
  int v44 = swift_getEnumCaseMultiPayload();
  if (v44 == 1)
  {
    *(void *)id v42 = *(void *)v43;
    uint64_t v47 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v48 = *(int *)(v47 + 20);
    uint64_t v49 = &v42[v48];
    uint64_t v50 = &v43[v48];
    uint64_t v51 = type metadata accessor for DataFrame();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32);
    v52(v49, v50, v51);
    v52(&v42[*(int *)(v47 + 24)], &v43[*(int *)(v47 + 24)], v51);
  }
  else
  {
    if (v44)
    {
      memcpy(v42, v43, *(void *)(*(void *)(v33 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    else {
      uint64_t v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    }
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(v45);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v42, v43, v46);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22723FA90);
}

uint64_t sub_22723FA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_8:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    goto LABEL_8;
  }
  unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22723FB54);
}

void sub_22723FB54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return;
    }
    uint64_t v10 = type metadata accessor for MLClassifierMetrics(0);
    uint64_t v11 = a1 + *(int *)(a4 + 36);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for MLBoostedTreeClassifier()
{
  uint64_t result = type metadata accessor for AnyTreeClassifierModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_22723FCF8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_7_1(v8);
  *uint64_t v9 = v10;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)(a1, v3, v4, v5, v6, v7);
}

uint64_t outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t _s8CreateML22AnyTreeClassifierModelVWObTm_2(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_43()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_29()
{
  uint64_t v2 = *(void *)(v0 - 312);
  return outlined destroy of MLBoostedTreeClassifier.ModelParameters(v2);
}

uint64_t OUTLINED_FUNCTION_29_26()
{
  return *(void *)(v0 - 296);
}

uint64_t OUTLINED_FUNCTION_34_17()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_11(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 400);
  return outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v4, a2);
}

uint64_t OUTLINED_FUNCTION_53_13()
{
  return type metadata accessor for MLBoostedTreeClassifier();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v32 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v43 = (char *)&v31 - v13;
  uint64_t v44 = MEMORY[0x263F8EE78];
  uint64_t v35 = *(void *)(a1 + 16);
  if (v35)
  {
    unint64_t v14 = 0;
    uint64_t v39 = (void (**)(char *, char *, uint64_t))(v38 + 32);
    uint64_t v40 = v42 + 56;
    uint64_t v41 = v38 + 16;
    uint64_t v15 = (void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v33 = v5;
    uint64_t v34 = a1;
    while (v14 < *(void *)(a1 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      uint64_t v17 = *(void *)(v38 + 72);
      uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v18(v5, a1 + v16 + v17 * v14, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1) {
        goto LABEL_19;
      }
      uint64_t v36 = *v39;
      unint64_t v37 = v16;
      v36(v43, v5, v6);
      if (*(void *)(v42 + 16)
        && (uint64_t v19 = v42,
            _s10Foundation3URLVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL),
            uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v21 = -1 << *(unsigned char *)(v19 + 32),
            unint64_t v22 = v20 & ~v21,
            ((*(void *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) != 0))
      {
        uint64_t v23 = ~v21;
        while (1)
        {
          v18(v11, *(void *)(v42 + 48) + v22 * v17, v6);
          _s10Foundation3URLVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v15)(v11, v6);
          if (v24) {
            break;
          }
          unint64_t v22 = (v22 + 1) & v23;
          if (((*(void *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
            goto LABEL_10;
          }
        }
        uint64_t v25 = (uint64_t (*)(unint64_t, char *, uint64_t))v36;
        v36(v32, v43, v6);
        uint64_t v26 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1);
          uint64_t v26 = v44;
        }
        unint64_t v27 = v37;
        unint64_t v29 = *(void *)(v26 + 16);
        unint64_t v28 = *(void *)(v26 + 24);
        unint64_t v30 = v29 + 1;
        if (v29 >= v28 >> 1)
        {
          unint64_t v37 = v29 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          unint64_t v30 = v37;
          uint64_t v26 = v44;
        }
        *(void *)(v26 + 16) = v30;
        uint64_t result = v25(v26 + v27 + v29 * v17, v32, v6);
        uint64_t v44 = v26;
      }
      else
      {
LABEL_10:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v15)(v43, v6);
      }
      ++v14;
      a1 = v34;
      uint64_t v5 = v33;
      if (v14 == v35) {
        goto LABEL_18;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v6);
LABEL_19:
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)v5);
    swift_bridgeObjectRelease();
    return v44;
  }
  return result;
}

uint64_t static _ImageUtilities.validateImageURLs(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_49();
  uint64_t v46 = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v41 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = *(void *)(a1 + 16);
  v41[1] = a1;
  if (v14)
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v15 = v4 + 16;
    unint64_t v16 = v17;
    unint64_t v42 = (*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64);
    uint64_t v18 = a1 + v42;
    uint64_t v19 = *(void *)(v15 + 56);
    uint64_t v52 = (void (**)(void))(v15 + 16);
    uint64_t v47 = (void (**)(char *, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    uint64_t v51 = MEMORY[0x263F8EE78];
    unint64_t v44 = 0x80000002272DABB0;
    long long v50 = xmmword_2272CB370;
    uint64_t v45 = v13;
    uint64_t v48 = v19;
    uint64_t v43 = v9;
    while (1)
    {
      v16(v13, v18, v2);
      __swift_storeEnumTagSinglePayload(v13, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v13, 1, v2) == 1) {
        break;
      }
      uint64_t v20 = *v52;
      OUTLINED_FUNCTION_3();
      v20();
      URL._bridgeToObjectiveC()(v21);
      CFURLRef v23 = v22;
      char v24 = CGImageSourceCreateWithURL(v22, 0);

      if (v24 && (CFDictionaryRef v25 = CGImageSourceCopyPropertiesAtIndex(v24, 0, 0), v24, v25))
      {

        v16(v46, (uint64_t)v9, v2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v51 = v38;
        }
        unint64_t v26 = *(void *)(v51 + 16);
        if (v26 >= *(void *)(v51 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v51 = v39;
        }
        *(void *)(v51 + 16) = v26 + 1;
        uint64_t v27 = v48;
        OUTLINED_FUNCTION_3();
        v20();
      }
      else
      {
        unint64_t v53 = 0;
        unint64_t v54 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        unint64_t v53 = 0xD00000000000001BLL;
        unint64_t v54 = v44;
        v28._uint64_t countAndFlagsBits = URL.path.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 46;
        v29._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        uint64_t v30 = v15;
        unint64_t v32 = v53;
        unint64_t v31 = v54;
        int v49 = static os_log_type_t.info.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = v50;
        uint64_t v34 = MEMORY[0x263F8D310];
        *(void *)(v33 + 56) = MEMORY[0x263F8D310];
        *(void *)(v33 + 32) = v32;
        *(void *)(v33 + 40) = v31;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_27_24();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        type metadata accessor for OS_os_log();
        uint64_t v35 = (void *)static OS_os_log.default.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v36 = v16;
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = v50;
        *(void *)(v37 + 56) = v34;
        *(void *)(v37 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v37 + 32) = v32;
        *(void *)(v37 + 40) = v31;
        uint64_t v15 = v30;
        uint64_t v9 = v43;
        uint64_t v13 = v45;
        swift_bridgeObjectRetain();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        unint64_t v16 = v36;
        swift_bridgeObjectRelease();
        uint64_t v27 = v48;
      }
      (*v47)(v9, v2);
      v18 += v27;
      if (!--v14) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = MEMORY[0x263F8EE78];
LABEL_15:
    __swift_storeEnumTagSinglePayload(v13, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v51;
}

uint64_t static _ImageUtilities.getImageURLsAndLabels(from:)(uint64_t a1)
{
  *(void *)&long long v111 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v107 - v8;
  int64_t v110 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33();
  uint64_t v15 = (char *)(v13 - v14);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v107 - v17;
  uint64_t v19 = type metadata accessor for MLImageClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_22_0();
  _s8CreateML17MLImageClassifierV10DataSourceOWOcTm_0(a1, v2, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      return *(void *)v2;
    }
    OUTLINED_FUNCTION_3();
    v22();
    static UTType.image.getter();
    uint64_t v23 = v115;
    static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
    uint64_t v115 = v23;
    if (v23)
    {
      (*(void (**)(char *, void))(v5 + 8))(v1, v111);
      (*(void (**)(char *, int64_t))(v11 + 8))(v15, v110);
      return v19;
    }
    uint64_t v28 = v24;
    uint64_t v9 = v1;
    uint64_t v18 = v15;
  }
  else
  {
    OUTLINED_FUNCTION_3();
    v25();
    static UTType.image.getter();
    uint64_t v26 = v115;
    static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
    uint64_t v115 = v26;
    if (v26)
    {
      (*(void (**)(char *, void))(v5 + 8))(v9, v111);
      (*(void (**)(char *, int64_t))(v11 + 8))(v18, v110);
      return v19;
    }
    uint64_t v28 = v27;
  }
  (*(void (**)(char *, void))(v5 + 8))(v9, v111);
  (*(void (**)(char *, int64_t))(v11 + 8))(v18, v110);
  specialized _NativeDictionary.makeIterator()(v114, v28);
  uint64_t v29 = v114[0];
  int64_t v30 = v114[3];
  unint64_t v31 = v114[4];
  int64_t v108 = v114[1];
  int64_t v109 = (unint64_t)(v114[2] + 64) >> 6;
  *(void *)&long long v111 = v28;
  swift_bridgeObjectRetain_n();
  uint64_t v32 = MEMORY[0x263F8EE78];
  if (!v31) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v33 = __clz(__rbit64(v31));
  v31 &= v31 - 1;
  unint64_t v34 = v33 | (v30 << 6);
  while (1)
  {
    uint64_t v41 = *(void *)(*(void *)(v29 + 56) + 8 * v34);
    uint64_t v42 = *(void *)(v41 + 16);
    uint64_t v43 = *(void *)(v32 + 16);
    if (__OFADD__(v43, v42))
    {
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    swift_bridgeObjectRetain();
    if (!swift_isUniquelyReferenced_nonNull_native() || v43 + v42 > *(void *)(v32 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v32 = v44;
    }
    if (*(void *)(v41 + 16))
    {
      uint64_t v45 = *(void *)(v32 + 16);
      if ((*(void *)(v32 + 24) >> 1) - v45 < v42) {
        goto LABEL_107;
      }
      unint64_t v46 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v47 = *(void *)(v11 + 72);
      unint64_t v48 = v32 + v46 + v47 * v45;
      if (v41 + v46 < v48 + v47 * v42 && v48 < v41 + v46 + v47 * v42) {
        goto LABEL_114;
      }
      swift_arrayInitWithCopy();
      if (v42)
      {
        uint64_t v50 = *(void *)(v32 + 16);
        BOOL v38 = __OFADD__(v50, v42);
        uint64_t v51 = v50 + v42;
        if (v38) {
          goto LABEL_108;
        }
        *(void *)(v32 + 16) = v51;
      }
    }
    else if (v42)
    {
      goto LABEL_106;
    }
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v35 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      goto LABEL_109;
    }
    if (v35 >= v109) {
      break;
    }
    unint64_t v36 = *(void *)(v108 + 8 * v35);
    if (!v36)
    {
      OUTLINED_FUNCTION_34_18();
      if (v37 == v38) {
        break;
      }
      OUTLINED_FUNCTION_33_19();
      if (v36) {
        goto LABEL_27;
      }
      OUTLINED_FUNCTION_34_18();
      if (v37 == v38) {
        break;
      }
      OUTLINED_FUNCTION_33_19();
      if (v36) {
        goto LABEL_27;
      }
      OUTLINED_FUNCTION_34_18();
      if (v37 == v38) {
        break;
      }
      OUTLINED_FUNCTION_33_19();
      if (v36) {
        goto LABEL_27;
      }
      OUTLINED_FUNCTION_34_18();
      if (v37 == v38) {
        break;
      }
      OUTLINED_FUNCTION_33_19();
      if (v36)
      {
LABEL_27:
        int64_t v35 = v39;
      }
      else
      {
        int64_t v35 = v40 + 5;
        if (v35 >= v109) {
          break;
        }
        unint64_t v36 = *(void *)(v108 + 8 * v35);
        if (!v36)
        {
          int64_t v52 = v30 + 7;
          do
          {
            if (v52 >= v109) {
              goto LABEL_52;
            }
            unint64_t v36 = *(void *)(v108 + 8 * v52++);
          }
          while (!v36);
          int64_t v35 = v52 - 1;
        }
      }
    }
    unint64_t v31 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v35 << 6);
    int64_t v30 = v35;
  }
LABEL_52:
  uint64_t v53 = v111;
  swift_bridgeObjectRelease();
  swift_release();
  static _ImageUtilities.validateImageURLs(from:)(v32);
  swift_bridgeObjectRelease();
  specialized Set.init<A>(_:)();
  uint64_t v55 = v54;
  int64_t v56 = 0;
  uint64_t v57 = v53 + 64;
  OUTLINED_FUNCTION_8_35();
  uint64_t v60 = v59 & v58;
  int64_t v110 = (unint64_t)(v61 + 63) >> 6;
  uint64_t v19 = MEMORY[0x263F8EE80];
  if ((v59 & v58) == 0) {
    goto LABEL_54;
  }
LABEL_53:
  for (v60 &= v60 - 1; ; uint64_t v60 = (v62 - 1) & v62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v64 = swift_bridgeObjectRetain();
    uint64_t v65 = v115;
    specialized _ArrayProtocol.filter(_:)(v64, v55);
    uint64_t v115 = v65;
    swift_isUniquelyReferenced_nonNull_native();
    unint64_t v112 = v19;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    uint64_t v19 = v112;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v60) {
      goto LABEL_53;
    }
LABEL_54:
    BOOL v38 = __OFADD__(v56++, 1);
    if (v38) {
      goto LABEL_111;
    }
    if (v56 >= v110) {
      break;
    }
    uint64_t v62 = *(void *)(v57 + 8 * v56);
    if (!v62)
    {
      int64_t v63 = v56 + 1;
      if (v56 + 1 >= v110) {
        break;
      }
      uint64_t v62 = *(void *)(v57 + 8 * v63);
      if (!v62)
      {
        int64_t v63 = v56 + 2;
        if (v56 + 2 >= v110) {
          break;
        }
        uint64_t v62 = *(void *)(v57 + 8 * v63);
        if (!v62)
        {
          int64_t v63 = v56 + 3;
          if (v56 + 3 >= v110) {
            break;
          }
          uint64_t v62 = *(void *)(v57 + 8 * v63);
          if (!v62)
          {
            while (1)
            {
              int64_t v56 = v63 + 1;
              if (__OFADD__(v63, 1)) {
                goto LABEL_112;
              }
              if (v56 >= v110) {
                goto LABEL_71;
              }
              uint64_t v62 = *(void *)(v57 + 8 * v56);
              ++v63;
              if (v62) {
                goto LABEL_64;
              }
            }
          }
        }
      }
      int64_t v56 = v63;
    }
LABEL_64:
    ;
  }
LABEL_71:
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v66 = swift_bridgeObjectRetain();
  uint64_t v67 = v115;
  uint64_t v68 = specialized _NativeDictionary.filter(_:)(v66);
  uint64_t v115 = v67;
  swift_bridgeObjectRelease();
  uint64_t v107 = v68 + 8;
  OUTLINED_FUNCTION_8_35();
  unint64_t v71 = v70 & v69;
  int64_t v108 = (unint64_t)(v72 + 63) >> 6;
  int64_t v110 = (int64_t)v68;
  swift_retain();
  int64_t v73 = 0;
  int64_t v109 = 0x80000002272D74F0;
  long long v111 = xmmword_2272CB370;
  uint64_t v74 = MEMORY[0x263F8D310];
  if (!v71) {
    goto LABEL_73;
  }
LABEL_72:
  unint64_t v75 = __clz(__rbit64(v71));
  v71 &= v71 - 1;
  for (unint64_t i = v75 | (v73 << 6); ; unint64_t i = __clz(__rbit64(v78)) + (v73 << 6))
  {
    uint64_t v85 = (uint64_t *)(*(void *)(v110 + 48) + 16 * i);
    uint64_t v86 = *v85;
    uint64_t v87 = (void *)v85[1];
    unint64_t v112 = 0;
    unint64_t v113 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v112 = 0xD000000000000019;
    unint64_t v113 = v109;
    v88._uint64_t countAndFlagsBits = v86;
    v88._uint64_t object = v87;
    String.append(_:)(v88);
    swift_bridgeObjectRelease();
    v89._uint64_t countAndFlagsBits = 11815;
    v89._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v89);
    unint64_t v90 = v112;
    unint64_t v91 = v113;
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = v111;
    *(void *)(v92 + 56) = v74;
    *(void *)(v92 + 32) = v90;
    *(void *)(v92 + 40) = v91;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_27_24();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    type metadata accessor for OS_os_log();
    uint64_t v93 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = v111;
    *(void *)(v94 + 56) = v74;
    *(void *)(v94 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v94 + 32) = v90;
    *(void *)(v94 + 40) = v91;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v71) {
      goto LABEL_72;
    }
LABEL_73:
    int64_t v77 = v73 + 1;
    if (__OFADD__(v73, 1)) {
      goto LABEL_110;
    }
    if (v77 >= v108)
    {
LABEL_98:
      uint64_t v95 = v110;
      swift_release();
      if (*(void *)(v95 + 16))
      {
        swift_bridgeObjectRelease();
        unint64_t v112 = 0;
        unint64_t v113 = 0xE000000000000000;
        _StringGuts.grow(_:)(69);
        OUTLINED_FUNCTION_20_1();
        v96._uint64_t countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v96);
        uint64_t v97 = specialized Collection.first.getter(v95);
        if (v98)
        {
          uint64_t v19 = v98;
        }
        else
        {
          uint64_t v97 = 0;
          uint64_t v19 = 0xE000000000000000;
        }
        uint64_t v99 = v19;
        String.append(_:)(*(Swift::String *)&v97);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_20_1();
        String.append(_:)(v100);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
        v101._uint64_t countAndFlagsBits = Dictionary.Keys.description.getter();
        String.append(_:)(v101);
        swift_bridgeObjectRelease();
        v102._uint64_t countAndFlagsBits = 46;
        v102._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v102);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v103 = swift_allocError();
        OUTLINED_FUNCTION_30_25(v103, v104);
        uint64_t v115 = v105;
        swift_willThrow();
        swift_release();
      }
      else
      {
        swift_release();
      }
      return v19;
    }
    unint64_t v78 = v107[v77];
    ++v73;
    if (!v78)
    {
      int64_t v73 = v77 + 1;
      OUTLINED_FUNCTION_24_31();
      if (v37 == v38) {
        goto LABEL_98;
      }
      OUTLINED_FUNCTION_20_36();
      if (!v78)
      {
        int64_t v73 = v79 + 2;
        OUTLINED_FUNCTION_24_31();
        if (v37 == v38) {
          goto LABEL_98;
        }
        OUTLINED_FUNCTION_20_36();
        if (!v78)
        {
          int64_t v73 = v80 + 3;
          OUTLINED_FUNCTION_24_31();
          if (v37 == v38) {
            goto LABEL_98;
          }
          OUTLINED_FUNCTION_20_36();
          if (!v78)
          {
            int64_t v73 = v81 + 4;
            OUTLINED_FUNCTION_24_31();
            if (v37 == v38) {
              goto LABEL_98;
            }
            OUTLINED_FUNCTION_20_36();
            if (!v78) {
              break;
            }
          }
        }
      }
    }
LABEL_95:
    unint64_t v71 = (v78 - 1) & v78;
  }
  int64_t v83 = v82 + 5;
  if (v83 >= v108) {
    goto LABEL_98;
  }
  unint64_t v78 = v107[v83];
  if (v78)
  {
    int64_t v73 = v83;
    goto LABEL_95;
  }
  while (1)
  {
    int64_t v73 = v83 + 1;
    if (__OFADD__(v83, 1)) {
      break;
    }
    OUTLINED_FUNCTION_24_31();
    if (v37 == v38) {
      goto LABEL_98;
    }
    OUTLINED_FUNCTION_20_36();
    int64_t v83 = v84 + 1;
    if (v78) {
      goto LABEL_95;
    }
  }
LABEL_113:
  __break(1u);
LABEL_114:
  OUTLINED_FUNCTION_29_27();
  uint64_t result = OUTLINED_FUNCTION_28_22();
  __break(1u);
  return result;
}

uint64_t static _ImageUtilities.generateImageTable(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v50 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  specialized MutableCollection<>.sort(by:)(&v50);
  if (v2)
  {
LABEL_59:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(v50 + 16);
  if (v49)
  {
    uint64_t v46 = a2;
    uint64_t v7 = 0;
    uint64_t v48 = v50 + 32;
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t v47 = a1;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v48 + 16 * v7);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      uint64_t v13 = *(void *)(a1 + 16);
      swift_bridgeObjectRetain();
      if (v13)
      {
        swift_bridgeObjectRetain();
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
        uint64_t v15 = MEMORY[0x263F8EE78];
        if (v16)
        {
          uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v15 = MEMORY[0x263F8EE78];
      }
      uint64_t ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SSs5NeverOTg5148_s8CreateML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n(v15);
      uint64_t v18 = v6;
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                      + 16);
      if (v19)
      {
        uint64_t v20 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v21 = v20;
        v20[2] = v19;
        v20[4] = v12;
        v20[5] = v11;
        if (v19 != 1)
        {
          void v20[6] = v12;
          v20[7] = v11;
          uint64_t v22 = v19 - 2;
          if (v19 != 2)
          {
            uint64_t v23 = v20 + 9;
            do
            {
              *(v23 - 1) = v12;
              uint64_t *v23 = v11;
              swift_bridgeObjectRetain();
              v23 += 2;
              --v22;
            }
            while (v22);
          }
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v24 = v21[2];
      uint64_t v25 = *(void *)(v8 + 16);
      if (__OFADD__(v25, v24)) {
        break;
      }
      if (!swift_isUniquelyReferenced_nonNull_native() || v25 + v24 > *(void *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v26;
      }
      if (v21[2])
      {
        uint64_t v27 = *(void *)(v8 + 16);
        if ((*(void *)(v8 + 24) >> 1) - v27 < v24) {
          goto LABEL_54;
        }
        unint64_t v28 = v8 + 16 * v27 + 32;
        if ((unint64_t)(v21 + 4) < v28 + 16 * v24 && v28 < (unint64_t)&v21[2 * v24 + 4]) {
          goto LABEL_58;
        }
        swift_arrayInitWithCopy();
        if (v24)
        {
          uint64_t v30 = *(void *)(v8 + 16);
          BOOL v31 = __OFADD__(v30, v24);
          uint64_t v32 = v30 + v24;
          if (v31) {
            goto LABEL_56;
          }
          *(void *)(v8 + 16) = v32;
        }
      }
      else if (v24)
      {
        goto LABEL_51;
      }
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                      + 16);
      uint64_t v34 = *(void *)(v9 + 16);
      if (__OFADD__(v34, v33)) {
        goto LABEL_52;
      }
      if (!swift_isUniquelyReferenced_nonNull_native() || v34 + v33 > *(void *)(v9 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v35;
      }
      if (*(void *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                     + 16))
      {
        uint64_t v36 = *(void *)(v9 + 16);
        if ((*(void *)(v9 + 24) >> 1) - v36 < v33) {
          goto LABEL_55;
        }
        unint64_t v37 = v9 + 16 * v36 + 32;
        if (ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
           + 32 < v37 + 16 * v33
          && v37 < ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                 + 32
                 + 16 * v33)
        {
          goto LABEL_58;
        }
        swift_arrayInitWithCopy();
        if (v33)
        {
          uint64_t v39 = *(void *)(v9 + 16);
          BOOL v31 = __OFADD__(v39, v33);
          uint64_t v40 = v39 + v33;
          if (v31) {
            goto LABEL_57;
          }
          *(void *)(v9 + 16) = v40;
        }
      }
      else if (v33)
      {
        goto LABEL_53;
      }
      ++v7;
      swift_bridgeObjectRelease();
      uint64_t v6 = v18;
      a1 = v47;
      if (v7 == v49)
      {
        swift_release();
        a2 = v46;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    OUTLINED_FUNCTION_29_27();
    OUTLINED_FUNCTION_28_22();
    __break(1u);
    goto LABEL_59;
  }
  swift_release();
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_49:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4D0;
  *(void *)(inited + 32) = 0x6C6562616CLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)(inited + 72) = v42;
  unint64_t v43 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
  *(void *)(inited + 48) = v8;
  *(void *)(inited + 80) = v43;
  *(void *)(inited + 88) = 0x7461506567616D69;
  *(void *)(inited + 128) = v42;
  *(void *)(inited + 136) = v43;
  *(void *)(inited + 96) = 0xE900000000000068;
  *(void *)(inited + 104) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  uint64_t v44 = Dictionary.init(dictionaryLiteral:)();
  return MLDataTable.init(dictionary:)(v44, a2);
}

void static _ImageUtilities.getImageURLsAndAnnotations(from:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v126 = a2;
  char v127 = (void *)type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v123 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v120 = (char *)&v119 - v9;
  uint64_t v125 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v124 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v12);
  uint64_t v128 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v129 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v119 - v17;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_16_2();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  MEMORY[0x270FA5388](v21);
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_3_0();
  uint64_t v25 = v24 - v23;
  _s8CreateML17MLImageClassifierV10DataSourceOWOcTm_0(a1, v24 - v23, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_3();
      v41();
      static UTType.image.getter();
      uint64_t v42 = v160;
      static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
      if (!v42)
      {
        uint64_t v94 = v43;
        OUTLINED_FUNCTION_7_48();
        v95();
        static _ImageUtilities.generateImageTable(_:)(v94, (uint64_t)&v130);
        swift_bridgeObjectRelease();
        uint64_t v103 = (void *)v130;
        char v104 = v131;
        id v158 = (id)v130;
        char v159 = v131;
        outlined copy of Result<_DataTable, Error>((id)v130, v131);
        OUTLINED_FUNCTION_1_54();
        outlined consume of Result<_DataTable, Error>(v103, v104);
        uint64_t v108 = OUTLINED_FUNCTION_5_29();
        v109(v108);
        goto LABEL_14;
      }
      OUTLINED_FUNCTION_7_48();
      v44();
      uint64_t v45 = OUTLINED_FUNCTION_5_29();
      v46(v45);
      return;
    case 2u:
      OUTLINED_FUNCTION_3();
      v47();
      static UTType.image.getter();
      uint64_t v48 = v160;
      static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
      if (!v48)
      {
        uint64_t v96 = v49;
        OUTLINED_FUNCTION_7_48();
        v97();
        static _ImageUtilities.generateImageTable(_:)(v96, (uint64_t)&v130);
        swift_bridgeObjectRelease();
        uint64_t v105 = (void *)v130;
        LOBYTE(v96) = v131;
        id v158 = (id)v130;
        char v159 = v131;
        outlined copy of Result<_DataTable, Error>((id)v130, v131);
        OUTLINED_FUNCTION_1_54();
        outlined consume of Result<_DataTable, Error>(v105, v96);
        uint64_t v110 = OUTLINED_FUNCTION_3_58();
        v111(v110);
        goto LABEL_14;
      }
      OUTLINED_FUNCTION_7_48();
      v50();
      uint64_t v51 = OUTLINED_FUNCTION_3_58();
      v52(v51);
      return;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)v25, *(unsigned char *)(v25 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 4u:
      char v54 = *(unsigned char *)(v25 + 8);
      uint64_t v56 = *(void *)(v25 + 16);
      uint64_t v55 = *(void *)(v25 + 24);
      uint64_t v58 = *(void *)(v25 + 32);
      uint64_t v57 = *(void *)(v25 + 40);
      id v158 = *(id *)v25;
      id v53 = v158;
      char v159 = v54;
      outlined copy of Result<_DataTable, Error>(v158, v54);
      uint64_t v59 = v160;
      static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)((uint64_t)&v158, v56, v55, v58, v57);
      if (v59)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Result<_DataTable, Error>(v53, v54);
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v53, v54);
      goto LABEL_14;
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void *))(v123 + 8))(v25, v127);
LABEL_12:
      uint64_t v60 = MEMORY[0x22A6764B0](0);
      if (!v60)
      {
        __break(1u);
        JUMPOUT(0x22724256CLL);
      }
      uint64_t v61 = v60;
      type metadata accessor for CMLTable();
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = v61;
      type metadata accessor for _DataTable();
      swift_allocObject();
      id v158 = _DataTable.init(impl:)(v62);
      char v159 = 0;
      static os_log_type_t.info.getter();
      OUTLINED_FUNCTION_20_1();
      log(_:type:)(v63, v64);
      goto LABEL_14;
    case 6u:
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v68 = (uint64_t *)(v25 + *(int *)(v67 + 48));
      uint64_t v70 = *v68;
      uint64_t v69 = v68[1];
      unint64_t v71 = (uint64_t *)(v25 + *(int *)(v67 + 64));
      uint64_t v73 = *v71;
      uint64_t v72 = v71[1];
      uint64_t v74 = v123;
      unint64_t v75 = v120;
      uint64_t v76 = v127;
      OUTLINED_FUNCTION_3();
      v77();
      (*(void (**)(uint64_t, char *, void *))(v74 + 16))(v7, v75, v76);
      uint64_t v78 = v160;
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v130);
      if (v78)
      {
        uint64_t v79 = OUTLINED_FUNCTION_3_63();
        v80(v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      id v158 = (id)v130;
      char v159 = v131;
      static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)((uint64_t)&v158, v70, v69, v73, v72);
      uint64_t v106 = OUTLINED_FUNCTION_3_63();
      v107(v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    default:
      uint64_t v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      uint64_t v27 = v25 + v26[12];
      unint64_t v28 = (uint64_t *)(v25 + v26[16]);
      uint64_t v30 = *v28;
      uint64_t v29 = (void *)v28[1];
      uint64_t v125 = v30;
      char v127 = v29;
      BOOL v31 = (uint64_t *)(v25 + v26[20]);
      uint64_t v32 = v31[1];
      uint64_t v124 = *v31;
      uint64_t v33 = v129;
      uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 32);
      uint64_t v35 = v122;
      uint64_t v36 = v25;
      uint64_t v37 = v128;
      v34(v122, v36, v128);
      uint64_t v38 = v121;
      v34(v121, v27, v37);
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v18, v38, v37);
      char v154 = 1;
      LOBYTE(v130) = 1;
      *(_DWORD *)((char *)&v130 + 1) = *(_DWORD *)v157;
      HIDWORD(v130) = *(_DWORD *)&v157[3];
      unint64_t v131 = 44;
      unint64_t v132 = 0xE100000000000000;
      uint64_t v133 = 0;
      unint64_t v134 = 0xE000000000000000;
      uint64_t v135 = 92;
      unint64_t v136 = 0xE100000000000000;
      char v137 = 1;
      *(_DWORD *)uint64_t v138 = *(_DWORD *)v156;
      *(_DWORD *)&v138[3] = *(_DWORD *)&v156[3];
      uint64_t v139 = 34;
      unint64_t v140 = 0xE100000000000000;
      char v141 = 1;
      *(_DWORD *)uint64_t v142 = *(_DWORD *)v155;
      *(_DWORD *)&v142[3] = *(_DWORD *)&v155[3];
      uint64_t v143 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v144 = 10;
      unint64_t v145 = 0xE100000000000000;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      char v148 = 1;
      *(_DWORD *)uint64_t v149 = *(_DWORD *)v153;
      *(_DWORD *)&v149[3] = *(_DWORD *)&v153[3];
      uint64_t v150 = 0;
      uint64_t v39 = v160;
      MLDataTable.init(contentsOf:options:)(v18, &v130, (uint64_t)&v151);
      if (v39)
      {
        uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
        v40(v38, v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v40(v35, v37);
      }
      else
      {
        uint64_t v81 = v32;
        id v158 = v151;
        char v159 = v152;
        uint64_t v82 = v125;
        int64_t v83 = v127;
        MLDataTable.subscript.getter(v125, v127, (uint64_t)&v130);
        uint64_t v84 = (void *)v130;
        char v85 = v131;
        if ((v131 & 1) != 0
          || (outlined copy of Result<_DataTable, Error>((id)v130, 0),
              _UntypedColumn.type.getter(&v151),
              outlined consume of Result<_DataTable, Error>(v84, 0),
              v151 != 2))
        {
          outlined consume of Result<_DataTable, Error>(v84, v85);
          swift_bridgeObjectRelease();
          uint64_t v130 = 0;
          unint64_t v131 = 0xE000000000000000;
          _StringGuts.grow(_:)(26);
          swift_bridgeObjectRelease();
          uint64_t v130 = 0x206E6D756C6F43;
          unint64_t v131 = 0xE700000000000000;
          v98._uint64_t countAndFlagsBits = v82;
          v98._uint64_t object = v83;
          String.append(_:)(v98);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_20_1();
          v99._uint64_t countAndFlagsBits = 0xD000000000000011;
          String.append(_:)(v99);
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          uint64_t v100 = swift_allocError();
          OUTLINED_FUNCTION_30_25(v100, v101);
          swift_willThrow();
          Swift::String v102 = *(void (**)(void))(v129 + 8);
          OUTLINED_FUNCTION_4_57();
          v102();
          OUTLINED_FUNCTION_4_57();
          v102();
LABEL_28:
          outlined consume of Result<_DataTable, Error>(v158, v159);
        }
        else
        {
          outlined copy of Result<_DataTable, Error>(v84, 0);
          _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v130);
          uint64_t v86 = v130;
          unint64_t v87 = v131;
          uint64_t v88 = v82;
          if (v132 != 2)
          {
            outlined consume of MLDataValue((void *)v130, (id)v131, v132);
            uint64_t v86 = 0;
            unint64_t v87 = 0xE000000000000000;
          }
          outlined consume of Result<_DataTable, Error>(v84, 0);
          uint64_t v130 = v86;
          unint64_t v131 = v87;
          String.init<A>(_:)();
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          id v89 = objc_msgSend(self, sel_defaultManager);
          uint64_t v90 = URL.path.getter();
          unint64_t v91 = (void *)MEMORY[0x22A674AE0](v90);
          swift_bridgeObjectRelease();
          unsigned __int8 v92 = objc_msgSend(v89, sel_fileExistsAtPath_, v91);

          if (v92)
          {
            uint64_t v93 = (uint64_t)v127;
          }
          else
          {
            outlined copy of Result<_DataTable, Error>(v84, 0);
            uint64_t v112 = specialized Array<A>.init(_:)(v84, 0);
            MEMORY[0x270FA5388](v112);
            *(&v119 - 2) = v122;
            uint64_t v113 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((uint64_t)partial apply for closure #1 in static _ImageUtilities.getImageURLsAndAnnotations(from:), (uint64_t)(&v119 - 4), v112);
            uint64_t v114 = swift_bridgeObjectRelease();
            uint64_t v130 = v113;
            MEMORY[0x270FA5388](v114);
            *(&v119 - 2) = (uint64_t)&v130;
            ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
            char v117 = v116 & 1;
            swift_bridgeObjectRelease();
            uint64_t v93 = (uint64_t)v127;
            swift_bridgeObjectRetain();
            MLDataTable.willMutate()();
            uint64_t v130 = (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5;
            LOBYTE(v131) = v117;
            MLDataTable.setColumnImpl(newColumn:named:)(&v130);
            swift_bridgeObjectRelease();
            outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v117);
            if ((v159 & 1) == 0)
            {
              outlined copy of Result<_DataTable, Error>(v158, 0);
              _DataTable.columnNamesDidChange()();
              OUTLINED_FUNCTION_26_9();
            }
          }
          static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)((uint64_t)&v158, v88, v93, v124, v81);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v84, 0);
          uint64_t v118 = *(void (**)(void))(v129 + 8);
          OUTLINED_FUNCTION_4_57();
          v118();
          OUTLINED_FUNCTION_4_57();
          v118();
          OUTLINED_FUNCTION_4_57();
          v118();
LABEL_14:
          char v65 = v159;
          uint64_t v66 = v126;
          *char v126 = v158;
          *((unsigned char *)v66 + 8) = v65;
        }
      }
      return;
  }
}

uint64_t static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)a1;
  char v11 = *(unsigned char *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  uint64_t v19 = v10;
  char v20 = v11;
  swift_bridgeObjectRetain();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v19, 0x7461506567616D69, (void *)0xE900000000000068, inited);
  if (!v5)
  {
    uint64_t v19 = v10;
    char v20 = v11;
    uint64_t v13 = swift_initStackObject();
    uint64_t v14 = a4;
    uint64_t v15 = v13;
    *(_OWORD *)(v13 + 16) = xmmword_2272CB370;
    uint64_t v18 = v14;
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = a5;
    swift_bridgeObjectRetain();
    static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v19, 0x6C6562616CLL, (void *)0xE500000000000000, v15);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v19 = v10;
    char v20 = v11;
    uint64_t v17 = swift_initStackObject();
    *(_OWORD *)(v17 + 16) = xmmword_2272CB370;
    *(void *)(v17 + 32) = a2;
    *(void *)(v17 + 40) = a3;
    unsigned __int8 v22 = 2;
    unsigned __int8 v21 = 2;
    swift_bridgeObjectRetain();
    static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(&v19, v17, &v22, v18, a5, &v21);
  }
  swift_setDeallocating();
  return specialized _ContiguousArrayStorage.__deallocating_deinit();
}

uint64_t closure #1 in static _ImageUtilities.getImageURLsAndAnnotations(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)();
  uint64_t v6 = URL.path.getter();
  uint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

void static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = *(void **)a1;
  char v11 = v13;
  char v14 = v12;
  OUTLINED_FUNCTION_31_19();
  static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)((uint64_t)&v13, a2, a3, a4, a5);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  if (!v5)
  {
    MLDataTable.willMutate()();
    MLDataTable.renameImpl(named:to:)(a2, a3, 0x7461506567616D69, 0xE900000000000068);
    if ((*(unsigned char *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_1_32();
      OUTLINED_FUNCTION_26_9();
    }
    MLDataTable.willMutate()();
    OUTLINED_FUNCTION_21_36(a4);
    if ((*(unsigned char *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_1_32();
      OUTLINED_FUNCTION_26_9();
    }
  }
}

void static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(uint64_t a1)
{
  uint64_t v121 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33();
  uint64_t v8 = v6 - v7;
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)&v95 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>);
  MEMORY[0x270FA5388](v12 - 8);
  OUTLINED_FUNCTION_33_0();
  int64_t v109 = (char *)v13;
  uint64_t v108 = type metadata accessor for DataFrame.Slice();
  OUTLINED_FUNCTION_0();
  char v104 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_22_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v105 = v17;
  int64_t v106 = v16;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  uint64_t v103 = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  MEMORY[0x270FA5388](v19 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v102 = v20;
  uint64_t v21 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v101 = v22;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_3_0();
  uint64_t v26 = (char *)(v25 - v24);
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_3_0();
  uint64_t v30 = v29 - v28;
  _s8CreateML17MLImageClassifierV10DataSourceOWOcTm_0(a1, v29 - v28, (void (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v100 = v21;
    outlined consume of Result<_DataTable, Error>(*(id *)v30, *(unsigned char *)(v30 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v110;
    MLHandPoseClassifier.DataSource.extractKeypoints()();
    if (!v31)
    {
      uint64_t v110 = 0;
      uint64_t v33 = v103;
      OUTLINED_FUNCTION_25_15();
      uint64_t v107 = v26;
      DataFrame.subscript.getter();
      long long v111 = 0;
      unint64_t v112 = 0xE000000000000000;
      lazy protocol witness table accessor for type Column<String> and conformance Column<A>();
      int64_t v34 = v106;
      OptionalColumnProtocol.filled(with:)();
      (*(void (**)(uint64_t, int64_t))(v105 + 8))(v33, v34);
      specialized Set.init<A>(_:)();
      int64_t v35 = 0;
      uint64_t v105 = v36 + 56;
      uint64_t v121 = v36;
      OUTLINED_FUNCTION_8_35();
      unint64_t v40 = v39 & v38;
      int64_t v106 = (unint64_t)(v41 + 63) >> 6;
      uint64_t v42 = (uint64_t (**)(uint64_t, uint64_t))(v104 + 8);
      uint64_t v43 = (char *)MEMORY[0x263F8EE80];
      if ((v39 & v38) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      unint64_t v44 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      for (unint64_t i = v44 | (v35 << 6); ; unint64_t i = __clz(__rbit64(v47)) + (v35 << 6))
      {
        uint64_t v49 = (uint64_t *)(*(void *)(v121 + 48) + 16 * i);
        uint64_t v51 = *v49;
        uint64_t v50 = v49[1];
        MEMORY[0x270FA5388](v37);
        *(&v95 - 2) = v51;
        *(&v95 - 1) = v50;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_25_15();
        uint64_t v52 = v110;
        DataFrame.filter<A>(on:_:_:)();
        uint64_t v110 = v52;
        DataFrame.Slice.subscript.getter();
        specialized Set.init<A>(_:)();
        uint64_t v54 = *(void *)(v53 + 16);
        swift_bridgeObjectRelease();
        swift_isUniquelyReferenced_nonNull_native();
        long long v111 = v43;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, v51, v50);
        uint64_t v43 = v111;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v37 = (*v42)(v1, v108);
        if (v40) {
          goto LABEL_7;
        }
LABEL_8:
        if (__OFADD__(v35++, 1)) {
          goto LABEL_44;
        }
        if (v35 >= v106)
        {
LABEL_31:
          uint64_t v67 = (void (**)(void, void))v101;
          uint64_t v68 = v107;
          swift_release();
          ((void (**)(void *, uint64_t))v67)[1](v68, v100);
          return;
        }
        unint64_t v47 = *(void *)(v105 + 8 * v35);
        if (!v47)
        {
          int64_t v48 = v35 + 1;
          if (v35 + 1 >= v106) {
            goto LABEL_31;
          }
          unint64_t v47 = *(void *)(v105 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v35 + 2;
            if (v35 + 2 >= v106) {
              goto LABEL_31;
            }
            unint64_t v47 = *(void *)(v105 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v35 + 3;
              if (v35 + 3 >= v106) {
                goto LABEL_31;
              }
              unint64_t v47 = *(void *)(v105 + 8 * v48);
              if (!v47)
              {
                while (1)
                {
                  int64_t v35 = v48 + 1;
                  if (__OFADD__(v48, 1)) {
                    goto LABEL_45;
                  }
                  if (v35 >= v106) {
                    goto LABEL_31;
                  }
                  unint64_t v47 = *(void *)(v105 + 8 * v35);
                  ++v48;
                  if (v47) {
                    goto LABEL_18;
                  }
                }
              }
            }
          }
          int64_t v35 = v48;
        }
LABEL_18:
        unint64_t v40 = (v47 - 1) & v47;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v32 = v110;
    static _ImageUtilities.getImageURLsAndAnnotations(from:)(a1, &v111);
    uint64_t v110 = v32;
    if (v32)
    {
      swift_bridgeObjectRelease_n();
      outlined destroy of MLHandPoseClassifier.DataSource(v30);
    }
    else
    {
      uint64_t v95 = v30;
      uint64_t v55 = v111;
      int v56 = v112;
      outlined copy of Result<_DataTable, Error>(v111, v112);
      OUTLINED_FUNCTION_25_15();
      specialized MLDataTable.subscript.getter(v56, v57);
      outlined consume of Result<_DataTable, Error>(v55, v56);
      OUTLINED_FUNCTION_31_9();
      outlined consume of Result<_DataTable, Error>(v26, a1);
      uint64_t v58 = specialized Array<A>.init(_:)(v111, v112);
      outlined copy of Result<_DataTable, Error>(v55, v56);
      OUTLINED_FUNCTION_17_30();
      specialized MLDataTable.subscript.getter(v56, v59);
      uint64_t v101 = v55;
      LODWORD(v100) = v56;
      outlined consume of Result<_DataTable, Error>(v55, v56);
      uint64_t v60 = specialized Array<A>.init(_:)(v111, v112);
      uint64_t v61 = *(void *)(v60 + 16);
      uint64_t v99 = v58;
      if (v61)
      {
        long long v111 = (char *)MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
        uint64_t v62 = v111;
        int64_t v109 = (char *)v60;
        uint64_t v63 = v60 + 40;
        do
        {
          swift_bridgeObjectRetain();
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          long long v111 = v62;
          unint64_t v65 = *((void *)v62 + 2);
          unint64_t v64 = *((void *)v62 + 3);
          uint64_t v66 = v62;
          if (v65 >= v64 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
            uint64_t v66 = v111;
          }
          v63 += 16;
          *((void *)v66 + 2) = v65 + 1;
          (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v66[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v65], v11, v121);
          --v61;
          uint64_t v62 = v66;
        }
        while (v61);
        swift_bridgeObjectRelease();
        uint64_t v58 = v99;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v62 = (char *)MEMORY[0x263F8EE78];
      }
      uint64_t v98 = *(void *)(v58 + 16);
      if (v98)
      {
        unint64_t v69 = 0;
        uint64_t v96 = v58 + 32;
        uint64_t v70 = (char *)MEMORY[0x263F8EE80];
        uint64_t v108 = MEMORY[0x263F8EE80];
        uint64_t v97 = v62;
        while (v69 < *(void *)(v58 + 16))
        {
          int64_t v106 = v69;
          uint64_t v107 = v70;
          unint64_t v71 = (uint64_t *)(v96 + 16 * v69);
          uint64_t v72 = v71[1];
          int64_t v109 = (char *)*v71;
          uint64_t v73 = v109;
          id v74 = v101;
          long long v111 = v101;
          char v75 = v100;
          LOBYTE(v112) = v100;
          OUTLINED_FUNCTION_31_19();
          swift_bridgeObjectRetain();
          uint64_t v76 = OUTLINED_FUNCTION_25_15();
          MLDataTable.subscript.getter(v76, v77, v78);
          outlined consume of Result<_DataTable, Error>(v74, v75);
          uint64_t v79 = v117;
          char v80 = v118;
          id v115 = v117;
          char v116 = v118;
          uint64_t v113 = MEMORY[0x263F8D310];
          uint64_t v114 = &protocol witness table for String;
          long long v111 = v73;
          unint64_t v112 = v72;
          swift_bridgeObjectRetain();
          static MLUntypedColumn.== infix(_:_:)();
          outlined consume of Result<_DataTable, Error>(v79, v80);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v111);
          uint64_t v81 = v119;
          LOBYTE(v73) = v120;
          id v117 = v74;
          char v118 = v75;
          id v115 = v119;
          char v116 = v120;
          OUTLINED_FUNCTION_31_19();
          MLDataTable.subscript.getter((uint64_t)&v115, (uint64_t)&v111);
          outlined consume of Result<_DataTable, Error>(v81, (char)v73);
          outlined consume of Result<_DataTable, Error>(v74, v75);
          uint64_t v82 = v111;
          int v83 = v112;
          swift_bridgeObjectRetain();
          uint64_t v84 = (void *)MLDataTable.size.getter();
          char v85 = (char *)v108;
          swift_isUniquelyReferenced_nonNull_native();
          long long v111 = v85;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v84, (uint64_t)v109, v72);
          uint64_t v86 = (uint64_t)v111;
          uint64_t v105 = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_31_19();
          OUTLINED_FUNCTION_17_30();
          specialized MLDataTable.subscript.getter(v83, v87);
          char v104 = v82;
          LODWORD(v103) = v83;
          outlined consume of Result<_DataTable, Error>(v82, v83);
          OUTLINED_FUNCTION_31_9();
          outlined consume of Result<_DataTable, Error>(v84, (char)&v111);
          uint64_t v88 = specialized Array<A>.init(_:)(v111, v112);
          uint64_t v89 = *(void *)(v88 + 16);
          uint64_t v108 = v86;
          if (v89)
          {
            long long v111 = (char *)MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89, 0);
            uint64_t v90 = v111;
            uint64_t v102 = v88;
            uint64_t v91 = v88 + 40;
            do
            {
              swift_bridgeObjectRetain();
              URL.init(fileURLWithPath:)();
              swift_bridgeObjectRelease();
              long long v111 = v90;
              unint64_t v93 = *((void *)v90 + 2);
              unint64_t v92 = *((void *)v90 + 3);
              if (v93 >= v92 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1);
                uint64_t v90 = v111;
              }
              v91 += 16;
              *((void *)v90 + 2) = v93 + 1;
              (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v90[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v93], v8, v121);
              --v89;
            }
            while (v89);
          }
          swift_bridgeObjectRelease();
          uint64_t v94 = v107;
          unint64_t v69 = v106 + 1;
          swift_isUniquelyReferenced_nonNull_native();
          long long v111 = v94;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
          uint64_t v70 = v111;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v104, v103);
          uint64_t v58 = v99;
          if (v69 == v98) {
            goto LABEL_42;
          }
        }
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
      }
      else
      {
LABEL_42:
        swift_bridgeObjectRelease();
        outlined consume of Result<_DataTable, Error>(v101, v100);
        outlined destroy of MLHandPoseClassifier.DataSource(v95);
      }
    }
  }
}

uint64_t closure #1 in static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  if (*a1 == a2 && v5 == a3) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

void static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void **)a1;
  char v14 = *(unsigned char *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 48) = a4;
  *(void *)(inited + 56) = a5;
  *(void *)(inited + 64) = a6;
  *(void *)(inited + 72) = a7;
  outlined copy of Result<_DataTable, Error>(v13, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_14_17();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)(v16, v17, v18, inited);
  if (v28)
  {
    outlined consume of Result<_DataTable, Error>(v13, v14);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(v13, v14);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    MLDataTable.willMutate()();
    OUTLINED_FUNCTION_19_17();
    MLDataTable.renameImpl(named:to:)(v19, v20, v21, v22);
    if ((*(unsigned char *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_1_32();
      OUTLINED_FUNCTION_26_9();
    }
    MLDataTable.willMutate()();
    OUTLINED_FUNCTION_15_17();
    MLDataTable.renameImpl(named:to:)(v23, v24, v25, v26);
    if ((*(unsigned char *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_1_32();
      OUTLINED_FUNCTION_26_9();
    }
    MLDataTable.willMutate()();
    OUTLINED_FUNCTION_21_36(a6);
    if ((*(unsigned char *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_1_32();
      OUTLINED_FUNCTION_26_9();
    }
  }
}

uint64_t _s10Foundation3URLVACSHAAWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8CreateML17MLImageClassifierV10DataSourceOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLHandPoseClassifier.DataSource(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLHandPoseClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Column<String> and conformance Column<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Column<String> and conformance Column<A>;
  if (!lazy protocol witness table cache variable for type Column<String> and conformance Column<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Column<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(void *a1)
{
  return closure #1 in static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t partial apply for closure #1 in static _ImageUtilities.getImageURLsAndAnnotations(from:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static _ImageUtilities.getImageURLsAndAnnotations(from:)(a1);
}

uint64_t OUTLINED_FUNCTION_1_54()
{
  return static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)(v0 - 288, 0x7461506567616D69, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_3_63()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_30()
{
  return 0x7461506567616D69;
}

uint64_t OUTLINED_FUNCTION_21_36(uint64_t a1)
{
  return MLDataTable.renameImpl(named:to:)(a1, v1, 0x6C6562616CLL, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_27_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_22()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

double OUTLINED_FUNCTION_30_25(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

id OUTLINED_FUNCTION_31_19()
{
  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

void *initializeBufferWithCopyOfBuffer for MLImageClassifier.PersistentParameters(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
    return v7;
  }
  uint64_t v7 = a1;
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v9 = *v10;
    swift_bridgeObjectRetain();
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *uint64_t v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_12:
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)v7 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v15, v16, v18);
    uint64_t v19 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    uint64_t v20 = &v15[v19];
    uint64_t v21 = &v16[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  uint64_t v23 = a3[8];
  *((unsigned char *)v7 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)v7 + v23) = *(void *)((char *)a2 + v23);
  *(void *)((char *)v7 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return v7;
}

uint64_t destroy for MLImageClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2) {
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1) {
    goto LABEL_7;
  }
  type metadata accessor for MLImageClassifier.DataSource();
  unsigned int v6 = swift_getEnumCaseMultiPayload();
  if (v6 == 2)
  {
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else if (v6 <= 1)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
  }
LABEL_7:
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for MLImageClassifier.PersistentParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v7 = *v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
      goto LABEL_10;
    }
    type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *uint64_t v7 = *v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
    uint64_t v17 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    uint64_t v18 = &v13[v17];
    uint64_t v19 = &v14[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  uint64_t v21 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *assignWithCopy for MLImageClassifier.PersistentParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0((uint64_t)a1 + v6, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *uint64_t v7 = *v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
        goto LABEL_11;
      }
      type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        *uint64_t v7 = *v8;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
LABEL_11:
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0((uint64_t)a1 + v12, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    uint64_t v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
      uint64_t v17 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      uint64_t v18 = &v13[v17];
      uint64_t v19 = &v14[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = *((void *)v19 + 1);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *initializeWithTake for MLImageClassifier.PersistentParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    uint64_t v17 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    *(_OWORD *)&v13[*(int *)(v17 + 20)] = *(_OWORD *)&v14[*(int *)(v17 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  uint64_t v18 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *assignWithTake for MLImageClassifier.PersistentParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0((uint64_t)a1 + v6, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    uint64_t v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0((uint64_t)a1 + v12, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    uint64_t v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      uint64_t v17 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
      *(_OWORD *)&v13[*(int *)(v17 + 20)] = *(_OWORD *)&v14[*(int *)(v17 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v18 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2272448B0);
}

uint64_t sub_2272448B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
      uint64_t v11 = *(int *)(a3 + 24);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227244970);
}

void *sub_227244970(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    OUTLINED_FUNCTION_6_1();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
      uint64_t v11 = *(int *)(a4 + 24);
    }
    return (void *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for MLImageClassifier.PersistentParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLImageClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLImageClassifier.PersistentParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MLImageClassifier.PersistentParameters()
{
  uint64_t result = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MLImageClassifier.FeatureExtractorType(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t MLImageClassifier.PersistentParameters.init(trainingData:modelParameters:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_41_1();
  uint64_t v9 = (int *)type metadata accessor for MLImageClassifier.PersistentParameters();
  uint64_t v10 = v9[7];
  *((unsigned char *)a3 + v10) = 1;
  *a3 = a1;
  uint64_t result = outlined init with copy of Any?((uint64_t)(a2 + 2), (uint64_t)&v13);
  if (v14)
  {
    outlined init with take of Any(&v13, &v15);
    type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    swift_dynamicCast();
    MLImageClassifier.ModelParameters.algorithm.getter(v3);
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v3, (uint64_t)a3 + v9[6], (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    *((unsigned char *)a3 + v10) = 0;
    uint64_t v12 = a2[1];
    *(void *)((char *)a3 + v9[8]) = *a2;
    uint64_t result = outlined destroy of MLImageClassifier.ModelParameters((uint64_t)a2);
    *(void *)((char *)a3 + v9[9]) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLImageClassifier.PersistentParameters.init(sessionDirectory:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ValidationData?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v88 = v7;
  uint64_t v93 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v87 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.FeatureExtractorType?);
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33_0();
  uint64_t v91 = v12;
  uint64_t v90 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v89 = v14;
  uint64_t v15 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_52_1();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v76 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = type metadata accessor for MLImageClassifier.PersistentParameters();
  uint64_t v24 = *(int *)(v23 + 28);
  unint64_t v92 = a2;
  *((unsigned char *)a2 + v24) = 1;
  OUTLINED_FUNCTION_20_1();
  URL.appendingPathComponent(_:)();
  uint64_t v25 = v94;
  uint64_t v26 = Data.init(contentsOf:options:)();
  if (v25)
  {
    uint64_t v28 = *(void (**)(void))(v17 + 8);
    OUTLINED_FUNCTION_21_4();
    v28();
    OUTLINED_FUNCTION_21_4();
    return ((uint64_t (*)(void))v28)();
  }
  uint64_t v78 = v24;
  uint64_t v77 = v2;
  uint64_t v81 = v23;
  char v80 = v22;
  uint64_t v82 = 0;
  uint64_t v94 = a1;
  uint64_t v79 = v17;
  uint64_t v30 = *(void (**)(void))(v17 + 8);
  uint64_t v31 = v26;
  unint64_t v32 = v27;
  OUTLINED_FUNCTION_21_4();
  v30();
  uint64_t v33 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v96 = 0;
  id v35 = objc_msgSend(v33, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v96);

  id v36 = (id)v96;
  if (!v35)
  {
    uint64_t v50 = v36;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v31, v32);
    OUTLINED_FUNCTION_21_4();
    return ((uint64_t (*)(void))v30)();
  }
  uint64_t v83 = v31;
  unint64_t v84 = v32;
  uint64_t v85 = v15;
  uint64_t v86 = v30;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v98, (uint64_t)&v96);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  char v38 = OUTLINED_FUNCTION_24_32();
  uint64_t v39 = v94;
  if ((v38 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_9_41(v51, (uint64_t)"Cannot restore session. Can't read training parameters.");
    OUTLINED_FUNCTION_5_53();
    OUTLINED_FUNCTION_21_4();
    v52();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
  }
  uint64_t v40 = v95;
  uint64_t v41 = OUTLINED_FUNCTION_34_19();
  specialized Dictionary.subscript.getter(v41, v42, v40, v43);
  if (!v97) {
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  if ((OUTLINED_FUNCTION_11_42() & 1) == 0)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v44 = v95;
  OUTLINED_FUNCTION_39_19(0xD000000000000014, (uint64_t)"augmentation_options");
  if (!v97)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v96, &demangling cache variable for type metadata for Any?);
LABEL_21:
    uint64_t v53 = v86;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v54 = 0xD000000000000034;
    *(void *)(v54 + 8) = 0x80000002272D4EB0;
    *(_OWORD *)(v54 + 16) = 0u;
    *(_OWORD *)(v54 + 32) = 0u;
    *(unsigned char *)(v54 + 48) = 0;
    swift_willThrow();
    OUTLINED_FUNCTION_5_53();
    ((void (*)(uint64_t, uint64_t))v53)(v39, v85);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
  }
  if ((OUTLINED_FUNCTION_11_42() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v45 = v95;
  specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v40, &v96);
  if (!v97) {
    goto LABEL_23;
  }
  if ((OUTLINED_FUNCTION_11_42() & 1) == 0)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v46 = v95;
  OUTLINED_FUNCTION_39_19(0xD000000000000011, (uint64_t)"feature_extractor");
  if (!v97)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v48 = &demangling cache variable for type metadata for Any?;
    uint64_t v49 = &v96;
    goto LABEL_24;
  }
  if ((OUTLINED_FUNCTION_24_32() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v47 = v91;
  MLImageClassifier.FeatureExtractorType.init(dictionary:)(v95, v91);
  if (__swift_getEnumTagSinglePayload(v47, 1, v90) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v48 = &demangling cache variable for type metadata for MLImageClassifier.FeatureExtractorType?;
    uint64_t v49 = (long long *)v47;
LABEL_24:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v49, v48);
LABEL_26:
    uint64_t v39 = v94;
    goto LABEL_21;
  }
  uint64_t v90 = v37;
  uint64_t v55 = v47;
  uint64_t v56 = v44;
  uint64_t v57 = v89;
  outlined init with take of MLImageClassifier.CustomFeatureExtractor(v55, v89, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  uint64_t v58 = v82;
  specialized _NativeDictionary.mapValues<A>(_:)(v56);
  uint64_t v60 = v59;
  uint64_t v82 = v58;
  swift_bridgeObjectRelease();
  uint64_t v61 = v40;
  uint64_t v62 = v92;
  *unint64_t v92 = v60;
  uint64_t v63 = v81;
  *(void *)((char *)v62 + *(int *)(v81 + 32)) = v46;
  uint64_t v91 = (uint64_t)v62 + *(int *)(v63 + 24);
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v57, v91, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(void *)((char *)v62 + *(int *)(v63 + 36)) = v45;
  specialized Dictionary.subscript.getter(0x6966697373616C63, 0xEF657079745F7265, v61, &v96);
  unint64_t v64 = v86;
  if (v97)
  {
    OUTLINED_FUNCTION_23_21();
    OUTLINED_FUNCTION_35_21();
    if (v65) {
      MLImageClassifier.ModelParameters.ClassifierType.init(dictionary:)(v95, (char *)&v96);
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v96, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_35_21();
  }
  uint64_t v66 = v79;
  *((unsigned char *)v92 + v78) = 0;
  OUTLINED_FUNCTION_17_15();
  URL.appendingPathComponent(_:)();
  uint64_t v67 = OUTLINED_FUNCTION_17_15();
  specialized Dictionary.subscript.getter(v67, v68 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000, v61, v69);
  swift_bridgeObjectRelease();
  if (!v97)
  {
    OUTLINED_FUNCTION_5_53();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v96, &demangling cache variable for type metadata for Any?);
LABEL_37:
    uint64_t v74 = v89;
    OUTLINED_FUNCTION_21_4();
    v64();
    OUTLINED_FUNCTION_21_4();
    v64();
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0(v74, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
    return swift_storeEnumTagMultiPayload();
  }
  if ((OUTLINED_FUNCTION_23_21() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_53();
    goto LABEL_37;
  }
  uint64_t v70 = v95;
  uint64_t v71 = v77;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v77, v61, v85);
  uint64_t v72 = v88;
  MLImageClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v70, v71, v88);
  if (__swift_getEnumTagSinglePayload(v72, 1, v45) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v72, &demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ValidationData?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_9_41(v73, (uint64_t)"Cannot restore session. Failed to load validation data.");
    OUTLINED_FUNCTION_5_53();
    OUTLINED_FUNCTION_21_4();
    v64();
    OUTLINED_FUNCTION_21_4();
    v64();
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0(v89, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
    swift_bridgeObjectRelease();
    return _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0(v91, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  }
  else
  {
    OUTLINED_FUNCTION_5_53();
    OUTLINED_FUNCTION_21_4();
    v64();
    OUTLINED_FUNCTION_21_4();
    v64();
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0(v89, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
    uint64_t v75 = v87;
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v72, v87, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    return outlined init with take of MLImageClassifier.CustomFeatureExtractor(v75, (uint64_t)v92 + *(int *)(v81 + 20), (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  }
}

uint64_t MLImageClassifier.FeatureExtractorType.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_32();
  uint64_t v9 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v48 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_4_21();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_52_1();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v45 - v21;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_27;
  }
  unint64_t v23 = OUTLINED_FUNCTION_15_29();
  if ((v24 & 1) == 0) {
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_32_24(v23);
  if ((OUTLINED_FUNCTION_2_61() & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v46 = v22;
  uint64_t v47 = a2;
  OUTLINED_FUNCTION_36_20();
  uint64_t v27 = v49;
  uint64_t v26 = v50;
  BOOL v29 = v49 == v28 && v50 == v25;
  if (v29 || (OUTLINED_FUNCTION_27_25() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    specialized Dictionary.subscript.getter(0x6E6F697369766572, 0xE800000000000000, a1, &v51);
    swift_bridgeObjectRelease();
    a2 = v47;
    if (v52)
    {
      int v30 = OUTLINED_FUNCTION_2_61();
      uint64_t v31 = v49;
      if (!v30) {
        uint64_t v31 = 0;
      }
      char v32 = v30 ^ 1;
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
      uint64_t v31 = 0;
      char v32 = 1;
    }
    *(void *)uint64_t v20 = v31;
    v20[8] = v32;
    swift_storeEnumTagMultiPayload();
    goto LABEL_15;
  }
  if (v27 == 0x6D6F74737563 && v26 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v36 = OUTLINED_FUNCTION_27_25();
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_31:
      uint64_t v34 = 1;
      a2 = v47;
      return __swift_storeEnumTagSinglePayload(a2, v34, 1, v15);
    }
  }
  specialized Dictionary.subscript.getter(0x61705F6C65646F6DLL, 0xEA00000000006874, a1, &v51);
  if (!v52)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    goto LABEL_31;
  }
  char v37 = OUTLINED_FUNCTION_2_61();
  a2 = v47;
  if ((v37 & 1) == 0)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v4, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for URL?);
LABEL_28:
    uint64_t v34 = 1;
    return __swift_storeEnumTagSinglePayload(a2, v34, 1, v15);
  }
  uint64_t v39 = v48;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
  v40(v14, v4, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v2, v14, v9);
  specialized Dictionary.subscript.getter(0x74757074756FLL, 0xE600000000000000, a1, &v51);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v9);
  if (v52)
  {
    int v41 = OUTLINED_FUNCTION_2_61();
    if (v41) {
      uint64_t v42 = v49;
    }
    else {
      uint64_t v42 = 0;
    }
    if (v41) {
      uint64_t v43 = v50;
    }
    else {
      uint64_t v43 = 0;
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  uint64_t v44 = &v3[*(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20)];
  v40(v3, v2, v9);
  *(void *)uint64_t v44 = v42;
  *((void *)v44 + 1) = v43;
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = v3;
  a2 = v47;
LABEL_15:
  uint64_t v33 = (uint64_t)v46;
  outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v20, (uint64_t)v46, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined init with take of MLImageClassifier.CustomFeatureExtractor(v33, a2, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  uint64_t v34 = 0;
  return __swift_storeEnumTagSinglePayload(a2, v34, 1, v15);
}

uint64_t MLImageClassifier.ModelParameters.ClassifierType.init(dictionary:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (!*(void *)(a1 + 16) || (unint64_t v4 = OUTLINED_FUNCTION_15_29(), (v5 & 1) == 0))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_9:
    uint64_t result = outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_10:
    char v7 = 1;
    goto LABEL_11;
  }
  if (v9 != 0xD000000000000011 || v10 != 0x80000002272DAC80)
  {
    OUTLINED_FUNCTION_20_1();
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
    if (v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 0;
LABEL_11:
  *a2 = v7;
  return result;
}

uint64_t MLImageClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_32();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.DataSource?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_27_7();
  uint64_t v14 = type metadata accessor for MLImageClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_3_0();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_24_4();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  unint64_t v21 = OUTLINED_FUNCTION_15_29();
  if ((v22 & 1) == 0) {
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_32_24(v21);
  if ((OUTLINED_FUNCTION_2_61() & 1) == 0) {
    goto LABEL_25;
  }
  BOOL v23 = v36 == 1701736302 && v37 == 0xE400000000000000;
  if (v23 || (OUTLINED_FUNCTION_27_25() & 1) != 0)
  {
    OUTLINED_FUNCTION_21_4();
    v24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  BOOL v26 = v36 == 0x756F735F61746164 && v37 == 0xEB00000000656372;
  if (!v26 && (OUTLINED_FUNCTION_27_25() & 1) == 0)
  {
    if (v36 == 0x74696C7073 && v37 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v29 = OUTLINED_FUNCTION_27_25();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
LABEL_25:
        OUTLINED_FUNCTION_21_4();
        v30();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_34_2();
    swift_bridgeObjectRelease();
    if (!v41) {
      goto LABEL_33;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_2_61() & 1) == 0) {
      goto LABEL_34;
    }
    MLSplitStrategy.init(dictionary:)(v36, (uint64_t)&v38);
    OUTLINED_FUNCTION_21_4();
    v32();
    if ((v40 & 1) == 0)
    {
      __int16 v33 = v39;
      *(_OWORD *)uint64_t v3 = v38;
      *(unsigned char *)(v3 + 16) = v33;
      *(unsigned char *)(v3 + 17) = HIBYTE(v33) & 1;
      goto LABEL_10;
    }
LABEL_26:
    uint64_t v25 = 1;
    return __swift_storeEnumTagSinglePayload(a3, v25, 1, v19);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_34_2();
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_33:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v38, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_2_61() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_21_4();
    v34();
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v5, a2, v8);
  MLImageClassifier.DataSource.init(dictionary:tableFile:)(v36, v5, v4);
  OUTLINED_FUNCTION_21_4();
  v27();
  if (__swift_getEnumTagSinglePayload(v4, 1, v14) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for MLImageClassifier.DataSource?);
    uint64_t v25 = 1;
    return __swift_storeEnumTagSinglePayload(a3, v25, 1, v19);
  }
  outlined init with take of MLImageClassifier.CustomFeatureExtractor(v4, v18, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
  outlined init with take of MLImageClassifier.CustomFeatureExtractor(v18, v3, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLImageClassifier.CustomFeatureExtractor(v3, a3, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  uint64_t v25 = 0;
  return __swift_storeEnumTagSinglePayload(a3, v25, 1, v19);
}

uint64_t MLImageClassifier.PersistentParameters.save(toSessionDirectory:)()
{
  unint64_t v1 = v0;
  v24[38] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CC1D0;
  OUTLINED_FUNCTION_33_20();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = 0xE500000000000000;
  specialized _NativeDictionary.mapValues<A>(_:)(*v0);
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  uint64_t v9 = (int *)type metadata accessor for MLImageClassifier.PersistentParameters();
  uint64_t v10 = MLImageClassifier.ModelParameters.ValidationData.dictionary.getter();
  uint64_t v11 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 96) = v10;
  *(void *)(inited + 120) = v11;
  *(void *)(inited + 128) = 0xD000000000000011;
  *(void *)(inited + 136) = 0x80000002272D85B0;
  *(void *)(inited + 144) = MLImageClassifier.FeatureExtractorType.dictionary.getter();
  *(void *)(inited + 168) = v11;
  strcpy((char *)(inited + 176), "max_iterations");
  *(unsigned char *)(inited + 191) = -18;
  uint64_t v12 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 192) = *(uint64_t *)((char *)v1 + v9[8]);
  *(void *)(inited + 216) = v12;
  *(void *)(inited + 224) = 0xD000000000000014;
  *(void *)(inited + 232) = 0x80000002272D5390;
  uint64_t v13 = *(uint64_t *)((char *)v1 + v9[9]);
  *(void *)(inited + 264) = v12;
  *(void *)(inited + 240) = v13;
  Dictionary.init(dictionaryLiteral:)();
  if ((*((unsigned char *)v1 + v9[7]) & 1) == 0)
  {
    void v24[3] = v11;
    v24[0] = (id)MLImageClassifier.ModelParameters.ClassifierType.dictionary.getter();
    specialized Dictionary.subscript.setter((uint64_t)v24, 0x6966697373616C63, 0xEF657079745F7265);
  }
  uint64_t v14 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24[0] = 0;
  id v16 = objc_msgSend(v14, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, v24);

  id v17 = v24[0];
  if (v16)
  {
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    OUTLINED_FUNCTION_20_1();
    URL.appendingPathComponent(_:)();
    Data.write(to:options:)();
    OUTLINED_FUNCTION_21_4();
    v21();
    return outlined consume of Data._Representation(v18, v20);
  }
  else
  {
    BOOL v23 = v17;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t MLImageClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = OUTLINED_FUNCTION_19_32();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_24_4();
  outlined init with copy of MLImageClassifier.FeatureExtractorType((uint64_t)v0, (uint64_t)v1, (void (*)(void))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v1, v7, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      uint64_t v28 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      uint64_t v29 = MEMORY[0x263F8D310];
      int v30 = (void *)OUTLINED_FUNCTION_7_49((uint64_t)v28);
      v30[9] = v29;
      v30[10] = v31;
      v30[11] = v32;
      uint64_t v33 = MLImageClassifier.DataSource.dictionary.getter();
      inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      inited[6].n128_u64[0] = v33;
      uint64_t v21 = Dictionary.init(dictionaryLiteral:)();
      char v22 = type metadata accessor for MLImageClassifier.DataSource;
      uint64_t v23 = v7;
      goto LABEL_7;
    case 2u:
      *uint64_t v0 = *v1;
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v14 = (__n128 *)swift_initStackObject();
      uint64_t v15 = OUTLINED_FUNCTION_5_5(v14, (__n128)xmmword_2272CB4D0);
      uint64_t v16 = MEMORY[0x263F8D310];
      id v17 = (void *)OUTLINED_FUNCTION_7_49((uint64_t)v15);
      v17[9] = v16;
      v17[10] = v18;
      v17[11] = v19;
      uint64_t v20 = MLSoundClassifier.DataSource.dictionary.getter();
      v14[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v14[6].n128_u64[0] = v20;
      uint64_t v21 = Dictionary.init(dictionaryLiteral:)();
      char v22 = type metadata accessor for MLSoundClassifier.DataSource;
      uint64_t v23 = (uint64_t)v0;
LABEL_7:
      _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0(v23, (void (*)(void))v22);
      return v21;
    case 3u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      char v24 = (__n128 *)swift_initStackObject();
      uint64_t v25 = OUTLINED_FUNCTION_5_5(v24, (__n128)xmmword_2272CB370);
      v25[4].n128_u64[1] = MEMORY[0x263F8D310];
      v25[3].n128_u64[0] = 1701736302;
      v25[3].n128_u64[1] = v26;
      return Dictionary.init(dictionaryLiteral:)();
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v9 = (__n128 *)swift_initStackObject();
      uint64_t v10 = OUTLINED_FUNCTION_5_5(v9, (__n128)xmmword_2272CB4D0);
      unint64_t v11 = MEMORY[0x263F8D310];
      v10[3].n128_u64[0] = 0x74696C7073;
      v10[3].n128_u64[1] = 0xE500000000000000;
      v10[4].n128_u64[1] = v11;
      v10[5].n128_u64[0] = 1635017060;
      v10[5].n128_u64[1] = v12;
      uint64_t v13 = MLSplitStrategy.dictionary.getter();
      v9[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v9[6].n128_u64[0] = v13;
      return Dictionary.init(dictionaryLiteral:)();
  }
}

uint64_t MLImageClassifier.FeatureExtractorType.dictionary.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x263F8EE80];
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v1, (uint64_t)v9, (void (*)(void))type metadata accessor for MLImageClassifier.FeatureExtractorType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v9, v6, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
    uint64_t v10 = MEMORY[0x263F8D310];
    uint64_t v22 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_16_37(0x6D6F74737563);
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v22 = v11;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v21);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_0, v6, v11);
    specialized Dictionary.subscript.setter((uint64_t)v21, 0x61705F6C65646F6DLL, 0xEA00000000006874);
    uint64_t v13 = (uint64_t *)(v6 + *(int *)(v2 + 20));
    uint64_t v14 = v13[1];
    if (v14)
    {
      uint64_t v15 = *v13;
      uint64_t v22 = v10;
      v21[0] = v15;
      v21[1] = v14;
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter((uint64_t)v21, 0x74757074756FLL, 0xE600000000000000);
    }
    _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0(v6, (void (*)(void))type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    uint64_t v16 = *(void *)v9;
    char v17 = v9[8];
    uint64_t v22 = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_36_20();
    OUTLINED_FUNCTION_16_37(v18);
    if ((v17 & 1) == 0)
    {
      uint64_t v22 = MEMORY[0x263F8D6C8];
      v21[0] = v16;
      specialized Dictionary.subscript.setter((uint64_t)v21, 0x6E6F697369766572, 0xE800000000000000);
    }
  }
  return v23;
}

uint64_t MLImageClassifier.ModelParameters.ClassifierType.dictionary.getter()
{
  uint64_t v2 = MEMORY[0x263F8EE80];
  v1[3] = MEMORY[0x263F8D310];
  v1[0] = 0xD000000000000011;
  v1[1] = 0x80000002272DAC80;
  specialized Dictionary.subscript.setter((uint64_t)v1, 1684957547, 0xE400000000000000);
  return v2;
}

uint64_t MLImageClassifier.DataSource.dictionary.getter()
{
  uint64_t v2 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_19_32();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_41_1();
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v0, (uint64_t)v1, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v21 = *v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (__n128 *)swift_initStackObject();
      uint64_t v23 = OUTLINED_FUNCTION_5_5(inited, (__n128)xmmword_2272CB4D0);
      uint64_t v24 = MEMORY[0x263F8D310];
      strcpy((char *)&v23[3], "files_by_label");
      v23[3].n128_u8[15] = -18;
      OUTLINED_FUNCTION_33_20();
      v25[9] = v24;
      v25[10] = v26;
      v25[11] = 0xE500000000000000;
      specialized _NativeDictionary.mapValues<A>(_:)(v21);
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
      inited[6].n128_u64[0] = v28;
      return Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v8 = OUTLINED_FUNCTION_20_21();
    v9(v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v10 = (__n128 *)swift_initStackObject();
    uint64_t v11 = (uint64_t)OUTLINED_FUNCTION_5_5(v10, (__n128)xmmword_2272CB4D0);
    unint64_t v13 = MEMORY[0x263F8D310];
    unint64_t v14 = 0x5F64656C6562616CLL;
    unint64_t v15 = 0xED000073656C6966;
  }
  else
  {
    uint64_t v16 = OUTLINED_FUNCTION_20_21();
    v17(v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v11 = swift_initStackObject();
    uint64_t v10 = (__n128 *)v11;
    *(_OWORD *)(v11 + 16) = xmmword_2272CB4D0;
    unint64_t v12 = 0xE400000000000000;
    unint64_t v13 = MEMORY[0x263F8D310];
    *(void *)(v11 + 32) = 1684957547;
    *(void *)(v11 + 40) = 0xE400000000000000;
    unint64_t v14 = 0xD000000000000013;
    unint64_t v15 = 0x80000002272D5430;
  }
  *(void *)(v11 + 48) = v14;
  *(void *)(v11 + 56) = v15;
  *(void *)(v11 + 72) = v13;
  *(void *)(v11 + 80) = 1752457584;
  *(void *)(v11 + 88) = v12;
  uint64_t v18 = URL.path.getter();
  v10[7].n128_u64[1] = v13;
  v10[6].n128_u64[0] = v18;
  v10[6].n128_u64[1] = v19;
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  return v20;
}

uint64_t MLImageClassifier.DataSource.init(dictionary:tableFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for MLImageClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_4_21();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v35 - v10;
  if (!*(void *)(a1 + 16)
    || (unint64_t v12 = OUTLINED_FUNCTION_15_29(), (v13 & 1) == 0)
    || (OUTLINED_FUNCTION_32_24(v12), (OUTLINED_FUNCTION_2_61() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v15 = v36;
  uint64_t v14 = v37;
  if (v36 != 0xD000000000000013 || v37 != 0x80000002272D5430)
  {
    OUTLINED_FUNCTION_20_1();
    if ((OUTLINED_FUNCTION_21_37() & 1) == 0)
    {
      OUTLINED_FUNCTION_33_20();
      unint64_t v22 = v21 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      BOOL v23 = v15 == 0x5F64656C6562616CLL && v14 == v22;
      if (v23 || (OUTLINED_FUNCTION_21_37() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_25_30();
        swift_bridgeObjectRelease();
        if (v39)
        {
          if (OUTLINED_FUNCTION_2_61()) {
            goto LABEL_9;
          }
          goto LABEL_12;
        }
      }
      else
      {
        if (v15 == 0x79625F73656C6966 && v14 == 0xEE006C6562616C5FLL)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v25 = OUTLINED_FUNCTION_21_37();
          swift_bridgeObjectRelease();
          if ((v25 & 1) == 0)
          {
            type metadata accessor for URL();
            OUTLINED_FUNCTION_8();
            uint64_t v26 = OUTLINED_FUNCTION_13_41();
            v27(v26);
            swift_bridgeObjectRelease();
            goto LABEL_13;
          }
        }
        uint64_t v28 = OUTLINED_FUNCTION_34_19();
        specialized Dictionary.subscript.getter(v28, v29, a1, v30);
        swift_bridgeObjectRelease();
        if (v39)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
          if (OUTLINED_FUNCTION_2_61())
          {
            specialized _NativeDictionary.mapValues<A>(_:)(v36);
            uint64_t v32 = v31;
            swift_bridgeObjectRelease();
            type metadata accessor for URL();
            OUTLINED_FUNCTION_8();
            uint64_t v33 = OUTLINED_FUNCTION_13_41();
            v34(v33);
            *uint64_t v3 = v32;
            goto LABEL_10;
          }
          goto LABEL_12;
        }
      }
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_30();
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_33:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v38, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  if ((OUTLINED_FUNCTION_2_61() & 1) == 0)
  {
LABEL_12:
    type metadata accessor for URL();
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t))(v19 + 8))(a2);
LABEL_13:
    uint64_t v18 = 1;
    return __swift_storeEnumTagSinglePayload(a3, v18, 1, v7);
  }
LABEL_9:
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_8();
  uint64_t v16 = OUTLINED_FUNCTION_13_41();
  v17(v16);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v3, (uint64_t)v11, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
  outlined init with take of MLImageClassifier.CustomFeatureExtractor((uint64_t)v11, a3, (void (*)(void))type metadata accessor for MLImageClassifier.DataSource);
  uint64_t v18 = 0;
  return __swift_storeEnumTagSinglePayload(a3, v18, 1, v7);
}

void specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v39 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_27_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  int64_t v7 = 0;
  uint64_t v36 = a1;
  OUTLINED_FUNCTION_12_35();
  unint64_t v10 = v9 & v8;
  uint64_t v34 = a1 + 64;
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v12;
  if ((v9 & v8) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v7 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(v36 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = *(void *)(*(void *)(v36 + 56) + 8 * i);
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      uint64_t v37 = *v18;
      unint64_t v38 = i;
      uint64_t v40 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      uint64_t v22 = v20;
      uint64_t v23 = v40;
      uint64_t v24 = v22 + 40;
      do
      {
        swift_bridgeObjectRetain();
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        unint64_t v26 = *(void *)(v40 + 16);
        unint64_t v25 = *(void *)(v40 + 24);
        if (v26 >= v25 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        }
        v24 += 16;
        *(void *)(v40 + 16) = v26 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v40+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v26, v1, v39);
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      uint64_t v6 = v33;
      unint64_t i = v38;
      uint64_t v19 = v37;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = MEMORY[0x263F8EE78];
    }
    OUTLINED_FUNCTION_37_18((i >> 3) & 0x1FFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)(v27 + 16 * i);
    void *v28 = v19;
    v28[1] = v29;
    *(void *)(*(void *)(v6 + 56) + 8 * i) = v23;
    uint64_t v30 = *(void *)(v6 + 16);
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(void *)(v6 + 16) = v32;
    if (v10) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_29;
    }
    if (v15 >= v35) {
      return;
    }
    unint64_t v16 = *(void *)(v34 + 8 * v15);
    ++v7;
    if (!v16)
    {
      int64_t v7 = v15 + 1;
      if (v15 + 1 >= v35) {
        return;
      }
      unint64_t v16 = *(void *)(v34 + 8 * v7);
      if (!v16)
      {
        int64_t v7 = v15 + 2;
        if (v15 + 2 >= v35) {
          return;
        }
        unint64_t v16 = *(void *)(v34 + 8 * v7);
        if (!v16) {
          break;
        }
      }
    }
LABEL_16:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v35) {
    return;
  }
  unint64_t v16 = *(void *)(v34 + 8 * v17);
  if (v16)
  {
    int64_t v7 = v17;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v35) {
      return;
    }
    unint64_t v16 = *(void *)(v34 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_16;
    }
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = 0;
  int64_t v35 = a1;
  uint64_t v32 = v2;
  uint64_t v33 = a1 + 64;
  OUTLINED_FUNCTION_12_35();
  uint64_t v6 = v5 & v4;
  uint64_t v34 = (unint64_t)(v7 + 63) >> 6;
  if ((v5 & v4) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v3 << 6))
  {
    unint64_t v13 = (uint64_t *)(*(void *)(v35 + 48) + 16 * i);
    uint64_t v14 = *v13;
    int64_t v15 = *(void *)(*(void *)(v35 + 56) + 8 * i);
    unint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v36 = *v13;
      uint64_t v37 = v6;
      unint64_t v38 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      int64_t v17 = v38;
      uint64_t v18 = *(void *)(type metadata accessor for URL() - 8);
      uint64_t v19 = v15 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v20 = *(void *)(v18 + 72);
      do
      {
        uint64_t v21 = URL.path.getter();
        uint64_t v23 = v22;
        uint64_t v24 = *(void *)(v38 + 16);
        if (v24 >= *(void *)(v38 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        *(void *)(v38 + 16) = v24 + 1;
        unint64_t v25 = v38 + 16 * v24;
        *(void *)(v25 + 32) = v21;
        *(void *)(v25 + 40) = v23;
        v19 += v20;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      uint64_t v2 = v32;
      uint64_t v6 = v37;
      uint64_t v14 = v36;
    }
    else
    {
      swift_bridgeObjectRetain();
      int64_t v17 = MEMORY[0x263F8EE78];
    }
    OUTLINED_FUNCTION_37_18((i >> 3) & 0x1FFFFFFFFFFFFFF8);
    uint64_t v27 = (void *)(v26 + 16 * i);
    char *v27 = v14;
    v27[1] = v28;
    *(void *)(*(void *)(v2 + 56) + 8 * i) = v17;
    uint64_t v29 = *(void *)(v2 + 16);
    uint64_t v30 = __OFADD__(v29, 1);
    BOOL v31 = v29 + 1;
    if (v30)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(void *)(v2 + 16) = v31;
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    unint64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_29;
    }
    if (v10 >= v34) {
      return;
    }
    uint64_t v11 = *(void *)(v33 + 8 * v10);
    ++v3;
    if (!v11)
    {
      uint64_t v3 = v10 + 1;
      if (v10 + 1 >= v34) {
        return;
      }
      uint64_t v11 = *(void *)(v33 + 8 * v3);
      if (!v11)
      {
        uint64_t v3 = v10 + 2;
        if (v10 + 2 >= v34) {
          return;
        }
        uint64_t v11 = *(void *)(v33 + 8 * v3);
        if (!v11) {
          break;
        }
      }
    }
LABEL_16:
    uint64_t v6 = (v11 - 1) & v11;
  }
  uint64_t v12 = v10 + 3;
  if (v12 >= v34) {
    return;
  }
  uint64_t v11 = *(void *)(v33 + 8 * v12);
  if (v11)
  {
    uint64_t v3 = v12;
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v3 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v3 >= v34) {
      return;
    }
    uint64_t v11 = *(void *)(v33 + 8 * v3);
    ++v12;
    if (v11) {
      goto LABEL_16;
    }
  }
LABEL_30:
  __break(1u);
}

uint64_t _s8CreateML17MLImageClassifierV15ModelParametersV14ValidationDataOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with copy of MLImageClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined init with take of MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_61()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_5_53()
{
  uint64_t v2 = *(void *)(v0 - 264);
  unint64_t v3 = *(void *)(v0 - 256);
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t OUTLINED_FUNCTION_7_49(uint64_t result)
{
  *(void *)(result + 48) = 0x756F735F61746164;
  *(void *)(result + 56) = 0xEB00000000656372;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_41@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = 0xD000000000000037;
  *(void *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_11_42()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_13_41()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_15_29()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
}

uint64_t OUTLINED_FUNCTION_16_37@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 80) = v1;
  return specialized Dictionary.subscript.setter(v2 - 88, 1684957547, 0xE400000000000000);
}

uint64_t OUTLINED_FUNCTION_19_32()
{
  return type metadata accessor for MLImageClassifier.DataSource();
}

uint64_t OUTLINED_FUNCTION_21_37()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_23_21()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_24_32()
{
  return swift_dynamicCast();
}

double OUTLINED_FUNCTION_25_30()
{
  return specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, v0, (_OWORD *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_27_25()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_32_24(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 56) + 32 * a1;
  return outlined init with copy of Any(v4, v2 - 112);
}

uint64_t OUTLINED_FUNCTION_34_19()
{
  return 0x73656C6966;
}

void OUTLINED_FUNCTION_37_18(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) |= v1;
}

double OUTLINED_FUNCTION_39_19@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2, (_OWORD *)(v3 - 160));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySSG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFSiSSSgXEfU_SDySSSiGTf1cn_n(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  uint64_t v2 = dispatch thunk of Collection.count.getter();
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v4 = v2;
  uint64_t v20 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  uint64_t v3 = v20;
  dispatch thunk of Collection.startIndex.getter();
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    while (1)
    {
      uint64_t v5 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      swift_bridgeObjectRetain();
      v5(v19, 0);
      uint64_t v9 = v8 ? v8 : 0xE000000000000000;
      uint64_t v10 = *a2;
      if (!*(void *)(*a2 + 16)) {
        break;
      }
      if (v8) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = 0;
      }
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v9);
      if ((v13 & 1) == 0) {
        goto LABEL_17;
      }
      uint64_t v14 = *(void *)(*(void *)(v10 + 56) + 8 * v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = v3;
      unint64_t v16 = *(void *)(v3 + 16);
      unint64_t v15 = *(void *)(v3 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v3 = v20;
      }
      *(void *)(v3 + 16) = v16 + 1;
      *(void *)(v3 + 8 * v16 + 32) = v14;
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v4) {
        return v3;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySiG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFS2iSgXEfU0_SDyS2iGTf1cn_n(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
  uint64_t v2 = dispatch thunk of Collection.count.getter();
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v4 = v2;
  uint64_t v18 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  uint64_t v3 = v18;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v4 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v8 = *(void *)v7;
      int v9 = *(unsigned __int8 *)(v7 + 8);
      uint64_t result = v6(v17, 0);
      uint64_t v10 = *a2;
      if (!*(void *)(*a2 + 16)) {
        break;
      }
      if (v9) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v8;
      }
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v12 & 1) == 0) {
        goto LABEL_13;
      }
      uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * result);
      uint64_t v18 = v3;
      unint64_t v15 = *(void *)(v3 + 16);
      unint64_t v14 = *(void *)(v3 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v3 = v18;
      }
      *(void *)(v3 + 16) = v15 + 1;
      *(void *)(v3 + 8 * v15 + 32) = v13;
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v4) {
        return v3;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static Labels.collected(from:_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v66 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v58 = v3;
  uint64_t v59 = v2;
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_33_0();
  uint64_t v57 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  MEMORY[0x270FA5388](v5 - 8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v56 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v54 - v11;
  uint64_t v13 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v60 = v14;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v55 = (char *)&v54 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v61 = (char *)v21;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_3_0();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  MEMORY[0x270FA5388](v26 - 8);
  OUTLINED_FUNCTION_3_0();
  AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    uint64_t v64 = 0;
    unint64_t v65 = 0xE000000000000000;
    uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    OptionalColumnProtocol.filled(with:)();
    uint64_t v28 = (void (*)(uint64_t, uint64_t))*((void *)v61 + 1);
    v28(v25, v20);
    specialized Set.init<A>(_:)();
    Swift::Int v30 = v29;
    outlined init with copy of AnyColumn?((uint64_t)v66, (uint64_t)v12);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1)
    {
      outlined destroy of AnyColumn?((uint64_t)v12);
    }
    else
    {
      uint64_t v66 = v28;
      uint64_t v38 = v60;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
      uint64_t v61 = (char *)v27;
      uint64_t v40 = v55;
      v39(v55, v12, v13);
      AnyColumn.assumingType<A>(_:)();
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      OptionalColumnProtocol.filled(with:)();
      v66(v25, v20);
      specialized Set.init<A>(_:)();
      specialized Set.union<A>(_:)(v41, v30);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v13);
    }
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v64 = v43;
    uint64_t v44 = v63;
    specialized MutableCollection<>.sort(by:)(&v64);
    if (!v44)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return v64;
    }
  }
  else
  {
    uint64_t v61 = v10;
    uint64_t v55 = v18;
    uint64_t v31 = v57;
    uint64_t v32 = v58;
    uint64_t v33 = v59;
    uint64_t v34 = v66;
    if (!swift_dynamicCastMetatype())
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v45 = 0xD000000000000025;
      *(void *)(v45 + 8) = 0x80000002272D7CE0;
      *(_OWORD *)(v45 + 16) = 0u;
      *(_OWORD *)(v45 + 32) = 0u;
      *(unsigned char *)(v45 + 48) = 1;
      return swift_willThrow();
    }
    AnyColumn.assumingType<A>(_:)();
    uint64_t v64 = 0;
    uint64_t v54 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
    OptionalColumnProtocol.filled(with:)();
    uint64_t v58 = (void *)v32[1];
    ((void (*)(uint64_t, uint64_t))v58)(v31, v33);
    specialized Set.init<A>(_:)();
    uint64_t v36 = v35;
    uint64_t v37 = (uint64_t)v61;
    outlined init with copy of AnyColumn?((uint64_t)v34, (uint64_t)v61);
    if (__swift_getEnumTagSinglePayload(v37, 1, v13) == 1)
    {
      outlined destroy of AnyColumn?(v37);
    }
    else
    {
      uint64_t v47 = v60;
      uint64_t v48 = v37;
      uint64_t v49 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v55, v48, v13);
      AnyColumn.assumingType<A>(_:)();
      uint64_t v64 = 0;
      OptionalColumnProtocol.filled(with:)();
      ((void (*)(uint64_t, uint64_t))v58)(v31, v33);
      specialized Set.init<A>(_:)();
      specialized Set.union<A>(_:)(v50, v36);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v13);
    }
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    uint64_t v64 = v52;
    uint64_t v53 = v63;
    specialized MutableCollection<>.sort(by:)(&v64);
    if (!v53) {
      goto LABEL_13;
    }
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AnyColumn?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Labels.encodeAnnotations(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_3_0();
  uint64_t v18 = v17 - v16;
  uint64_t v64 = a2;
  if (a3)
  {
    uint64_t v65 = MEMORY[0x263F8EE80];
    uint64_t v38 = *(void *)(a2 + 16);
    if (v38)
    {
      uint64_t v60 = v17 - v16;
      uint64_t v61 = v14;
      uint64_t v63 = v12;
      swift_bridgeObjectRetain();
      uint64_t v39 = 0;
      uint64_t v40 = (uint64_t *)(a2 + 40);
      uint64_t v41 = MEMORY[0x263F8EE80];
      while (1)
      {
        uint64_t v43 = *(v40 - 1);
        uint64_t v42 = *v40;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v42);
        uint64_t v47 = *(void *)(v41 + 16);
        BOOL v48 = (v46 & 1) == 0;
        Swift::Int v49 = v47 + v48;
        if (__OFADD__(v47, v48)) {
          goto LABEL_30;
        }
        unint64_t v50 = v45;
        char v51 = v46;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49))
        {
          unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v42);
          if ((v51 & 1) != (v53 & 1)) {
            goto LABEL_33;
          }
          unint64_t v50 = v52;
        }
        if (v51)
        {
          *(void *)(*(void *)(v41 + 56) + 8 * v50) = v39;
        }
        else
        {
          OUTLINED_FUNCTION_3_64(v41 + 8 * (v50 >> 6));
          uint64_t v55 = (uint64_t *)(v54 + 16 * v50);
          uint64_t *v55 = v43;
          v55[1] = v42;
          *(void *)(*(void *)(v41 + 56) + 8 * v50) = v39;
          uint64_t v56 = *(void *)(v41 + 16);
          BOOL v35 = __OFADD__(v56, 1);
          uint64_t v57 = v56 + 1;
          if (v35) {
            goto LABEL_32;
          }
          *(void *)(v41 + 16) = v57;
          swift_bridgeObjectRetain();
        }
        ++v39;
        v40 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 == v39)
        {
          uint64_t v65 = v41;
          swift_bridgeObjectRelease();
          uint64_t v12 = v63;
          uint64_t v18 = v60;
          uint64_t v14 = v61;
          break;
        }
      }
    }
    AnyColumn.convertedToStrings()(v18);
    uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySSG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFSiSSSgXEfU_SDySSSiGTf1cn_n(v18, &v65);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v12);
LABEL_28:
    swift_bridgeObjectRelease();
    return v37;
  }
  uint64_t v65 = MEMORY[0x263F8EE80];
  uint64_t v19 = *(void *)(a2 + 16);
  if (!v19)
  {
LABEL_14:
    AnyColumn.assumingType<A>(_:)();
    uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySiG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFS2iSgXEfU0_SDyS2iGTf1cn_n(v11, &v65);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
    goto LABEL_28;
  }
  uint64_t v59 = v11;
  uint64_t v62 = v5;
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  while (1)
  {
    uint64_t v22 = *(void *)(a2 + 8 * v20 + 32);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    uint64_t v26 = *(void *)(v21 + 16);
    BOOL v27 = (v25 & 1) == 0;
    Swift::Int v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      break;
    }
    unint64_t v29 = v24;
    char v30 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, Int>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v23, v28))
    {
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_33;
      }
      unint64_t v29 = v31;
    }
    if (v30)
    {
      *(void *)(*(void *)(v21 + 56) + 8 * v29) = v20;
    }
    else
    {
      OUTLINED_FUNCTION_3_64(v21 + 8 * (v29 >> 6));
      *(void *)(v33 + 8 * v29) = v22;
      *(void *)(*(void *)(v21 + 56) + 8 * v29) = v20;
      uint64_t v34 = *(void *)(v21 + 16);
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_31;
      }
      *(void *)(v21 + 16) = v36;
    }
    ++v20;
    swift_bridgeObjectRelease();
    a2 = v64;
    if (v19 == v20)
    {
      uint64_t v65 = v21;
      swift_bridgeObjectRelease();
      uint64_t v5 = v62;
      uint64_t v11 = v59;
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized Set.union<A>(_:)(uint64_t a1, Swift::Int a2)
{
  int64_t v3 = 0;
  void v18[2] = a2;
  uint64_t v4 = a1 + 56;
  OUTLINED_FUNCTION_8_35();
  unint64_t v7 = v6 & v5;
  int64_t v9 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    uint64_t v15 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * i);
    Swift::Int v16 = *v15;
    Swift::Int v17 = v15[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(v18, v16, v17);
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v3);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

void specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  int64_t v3 = 0;
  v15[1] = a2;
  uint64_t v4 = a1 + 56;
  OUTLINED_FUNCTION_8_35();
  unint64_t v7 = v6 & v5;
  int64_t v9 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    specialized Set._Variant.insert(_:)(v15, *(void *)(*(void *)(a1 + 48) + 8 * i));
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v3);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

void static Labels.== infix(_:_:)(void *a1, char a2, void *a3, char a4)
{
  if (a2)
  {
    if (a4) {
      specialized static Array<A>.== infix(_:_:)(a1, a3);
    }
  }
  else if ((a4 & 1) == 0)
  {
    specialized static Array<A>.== infix(_:_:)(a1, a3);
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Labels(uint64_t a1, uint64_t a2)
{
  static Labels.== infix(_:_:)(*(void **)a1, *(unsigned char *)(a1 + 8), *(void **)a2, *(unsigned char *)(a2 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for Labels(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Labels()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for Labels(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Labels(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Labels()
{
  return &type metadata for Labels;
}

void OUTLINED_FUNCTION_3_64(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.init(from:)(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_6_44(v7, v46);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_3_65(v10, v47);
  OUTLINED_FUNCTION_0();
  uint64_t v51 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_56_4(v13, v48);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v50 = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_60();
  uint64_t v19 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v49 = OUTLINED_FUNCTION_10_35();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_61();
  uint64_t v24 = type metadata accessor for Conv1D();
  OUTLINED_FUNCTION_0();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_8_39();
  uint64_t v28 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v2, a1 + *(int *)(v28 + 20), v24);
  MEMORY[0x22A672900](v29);
  Tensor.scalars<A>(as:)();
  char v30 = *(void (**)(void))(v21 + 8);
  OUTLINED_FUNCTION_137();
  v30();
  OUTLINED_FUNCTION_17_31();
  uint64_t v31 = NeuralNetwork.Layer.ConvolutionParameters.weights.setter();
  MEMORY[0x22A6728D0](v31);
  if (__swift_getEnumTagSinglePayload(v3, 1, v19) == 1)
  {
    uint64_t v32 = outlined destroy of Tensor?(v3);
  }
  else
  {
    Tensor.scalars<A>(as:)();
    OUTLINED_FUNCTION_137();
    v30();
    OUTLINED_FUNCTION_17_31();
    __swift_storeEnumTagSinglePayload(v50, 0, 1, v49);
    uint64_t v32 = NeuralNetwork.Layer.ConvolutionParameters.bias.setter();
  }
  MEMORY[0x22A672900](v32);
  OUTLINED_FUNCTION_19_33();
  OUTLINED_FUNCTION_137();
  v30();
  TensorShape.subscript.getter();
  uint64_t v33 = *(void (**)(void))(v51 + 8);
  OUTLINED_FUNCTION_4_58();
  v33();
  uint64_t v34 = NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.setter();
  MEMORY[0x22A672900](v34);
  OUTLINED_FUNCTION_19_33();
  ((void (*)(uint64_t, uint64_t))v30)(v1, v19);
  TensorShape.subscript.getter();
  OUTLINED_FUNCTION_4_58();
  v33();
  uint64_t v35 = NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.setter();
  MEMORY[0x22A6728A0](v35);
  uint64_t v36 = NeuralNetwork.Layer.ConvolutionParameters.groupCount.setter();
  MEMORY[0x22A6728B0](v36);
  NeuralNetwork.Extent.init(height:width:)();
  uint64_t v37 = NeuralNetwork.Layer.ConvolutionParameters.kernelSize.setter();
  uint64_t v38 = MEMORY[0x22A6728E0](v37);
  OUTLINED_FUNCTION_11_43(v38);
  uint64_t v39 = NeuralNetwork.Layer.ConvolutionParameters.strides.setter();
  uint64_t v40 = MEMORY[0x22A672910](v39);
  OUTLINED_FUNCTION_11_43(v40);
  NeuralNetwork.Layer.ConvolutionParameters.dilationFactor.setter();
  NeuralNetwork.ValidPaddingParameters.init()();
  type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind();
  OUTLINED_FUNCTION_8();
  uint64_t v41 = OUTLINED_FUNCTION_16_38();
  v42(v41);
  OUTLINED_FUNCTION_15_30();
  outlined destroy of MLFewShotSoundClassifier.CausalConv1D(a1, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  uint64_t v43 = OUTLINED_FUNCTION_14_31();
  return v44(v43);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_6_44(v7, v39);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_3_65(v10, v40);
  OUTLINED_FUNCTION_0();
  uint64_t v44 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_56_4(v13, v41);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  uint64_t v15 = OUTLINED_FUNCTION_17(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_33_0();
  uint64_t v43 = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_61();
  uint64_t v19 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v42 = OUTLINED_FUNCTION_10_35();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_60();
  uint64_t v24 = type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_0();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_8_39();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v3, a1, v24);
  Conv2D.weight.getter();
  Tensor.scalars<A>(as:)();
  uint64_t v28 = *(void (**)(void))(v21 + 8);
  OUTLINED_FUNCTION_137();
  v28();
  OUTLINED_FUNCTION_17_31();
  NeuralNetwork.Layer.ConvolutionParameters.weights.setter();
  Conv2D.bias.getter();
  if (__swift_getEnumTagSinglePayload(v2, 1, v19) == 1)
  {
    outlined destroy of Tensor?(v2);
  }
  else
  {
    Tensor.scalars<A>(as:)();
    OUTLINED_FUNCTION_137();
    v28();
    OUTLINED_FUNCTION_17_31();
    __swift_storeEnumTagSinglePayload(v43, 0, 1, v42);
    NeuralNetwork.Layer.ConvolutionParameters.bias.setter();
  }
  Conv2D.weight.getter();
  OUTLINED_FUNCTION_19_33();
  OUTLINED_FUNCTION_137();
  v28();
  TensorShape.subscript.getter();
  uint64_t v29 = *(void (**)(void))(v44 + 8);
  OUTLINED_FUNCTION_4_58();
  v29();
  NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.setter();
  Conv2D.weight.getter();
  OUTLINED_FUNCTION_19_33();
  ((void (*)(uint64_t, uint64_t))v28)(v1, v19);
  TensorShape.subscript.getter();
  OUTLINED_FUNCTION_4_58();
  v29();
  NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.setter();
  Conv2D.groupCount.getter();
  NeuralNetwork.Layer.ConvolutionParameters.groupCount.setter();
  Conv2D.kernelSize.getter();
  Conv2D.kernelSize.getter();
  NeuralNetwork.Extent.init(height:width:)();
  NeuralNetwork.Layer.ConvolutionParameters.kernelSize.setter();
  Conv2D.stride.getter();
  char v30 = Conv2D.stride.getter();
  OUTLINED_FUNCTION_13_42(v30, v31);
  NeuralNetwork.Layer.ConvolutionParameters.strides.setter();
  Conv2D.dilation.getter();
  uint64_t v32 = Conv2D.dilation.getter();
  OUTLINED_FUNCTION_13_42(v32, v33);
  NeuralNetwork.Layer.ConvolutionParameters.dilationFactor.setter();
  NeuralNetwork.ValidPaddingParameters.init()();
  type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind();
  OUTLINED_FUNCTION_8();
  uint64_t v34 = OUTLINED_FUNCTION_16_38();
  v35(v34);
  OUTLINED_FUNCTION_15_30();
  outlined destroy of MLFewShotSoundClassifier.CausalConv1D(a1, (void (*)(void))type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
  uint64_t v36 = OUTLINED_FUNCTION_14_31();
  return v37(v36);
}

uint64_t outlined destroy of MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_65@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for TensorShape();
}

void OUTLINED_FUNCTION_6_44(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_8_39()
{
  return MEMORY[0x270F48BA8]();
}

uint64_t OUTLINED_FUNCTION_10_35()
{
  return type metadata accessor for NeuralNetwork.WeightParameters();
}

uint64_t OUTLINED_FUNCTION_11_43(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_13_42(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 96) = a2;
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_14_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_30()
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
  return MEMORY[0x270F48B90](v1);
}

uint64_t OUTLINED_FUNCTION_16_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_31()
{
  return NeuralNetwork.WeightParameters.init(_:updatable:)();
}

uint64_t OUTLINED_FUNCTION_19_33()
{
  return Tensor.shape.getter();
}

uint64_t MLImageClassifier.DataSource.labeledImages()()
{
  return static _ImageUtilities.getImageURLsAndLabels(from:)(v0);
}

#error "2272499C0: call analysis failed (funcsize=65)"

uint64_t MLImageClassifier.DataSource.stratifiedSplit<A>(proportions:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = static _ImageUtilities.getImageURLsAndLabels(from:)(v4);
  if (!v5)
  {
    a4 = stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(a1, a2, v10, a3, a4);
    swift_bridgeObjectRelease();
  }
  return a4;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.DataSource(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for MLImageClassifier.DataSource(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MLImageClassifier.DataSource(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.DataSource((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLImageClassifier.DataSource()
{
  uint64_t result = type metadata singleton initialization cache for MLImageClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLImageClassifier.DataSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for MLImageClassifier.DataSource(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for MLImageClassifier.DataSource(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.DataSource((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLImageClassifier.DataSource()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLHandPoseClassifier.DataSource.keypointsWithAnnotations()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v89 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v87 = v4;
  uint64_t v88 = v5;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v90 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33_0();
  uint64_t v86 = v9;
  OUTLINED_FUNCTION_65();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v91 = v11;
  uint64_t v92 = v10;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v75 - v15;
  uint64_t v17 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v93 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v75 - v21;
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_5_54(v24, (uint64_t)v75);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    uint64_t v77 = v14;
    uint64_t v81 = v1;
    uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    uint64_t v34 = (uint64_t *)(v2 + v33[12]);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    uint64_t v37 = (uint64_t *)(v2 + v33[16]);
    uint64_t v39 = *v37;
    uint64_t v38 = v37[1];
    uint64_t v78 = v39;
    uint64_t v82 = v35;
    uint64_t v83 = v38;
    uint64_t v40 = (uint64_t *)(v2 + v33[20]);
    uint64_t v42 = *v40;
    uint64_t v41 = (void *)v40[1];
    uint64_t v84 = v17;
    OUTLINED_FUNCTION_3();
    v43();
    uint64_t v85 = v41;
    MEMORY[0x22A672220](v42, v41);
    uint64_t v44 = AnyColumn.wrappedElementType.getter();
    unint64_t v45 = *(void (**)(char *, uint64_t))(v91 + 8);
    v45(v16, v92);
    uint64_t v79 = v36;
    uint64_t v80 = v42;
    if (v44 != MEMORY[0x263F8D310])
    {
      uint64_t v46 = v0;
LABEL_8:
      uint64_t v48 = v83;
      uint64_t v47 = v84;
      uint64_t v49 = v93;
      uint64_t v50 = v81;
      uint64_t v51 = v82;
LABEL_16:
      (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v50, v22, v47);
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v94);
      if (!v46)
      {
        uint64_t v65 = OUTLINED_FUNCTION_34_20((uint64_t)v94);
        uint64_t v66 = v80;
        static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v65, v80, v85);
        static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v96, v79, v51, v66, (uint64_t)v85, v78, v48);
        uint64_t v73 = OUTLINED_FUNCTION_15_31();
        v74(v73);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      uint64_t v63 = OUTLINED_FUNCTION_15_31();
      v64(v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    uint64_t v75 = (void (*)(uint64_t))v45;
    uint64_t v76 = v22;
    DataFrame.subscript.getter();
    uint64_t v52 = v86;
    Column<A>.parseAsJSONArrays()(v86);
    uint64_t v46 = v0;
    if (v0)
    {

      OUTLINED_FUNCTION_25_0();
      v53();
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v54, v55, v56, v92);
      uint64_t v46 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_25_0();
      v57();
      uint64_t v58 = OUTLINED_FUNCTION_32_25();
      uint64_t v59 = v92;
      __swift_storeEnumTagSinglePayload(v58, v60, v61, v92);
      if (__swift_getEnumTagSinglePayload(v52, 1, v59) != 1)
      {
        uint64_t v67 = v91;
        uint64_t v68 = v77;
        OUTLINED_FUNCTION_45_12();
        OUTLINED_FUNCTION_3();
        v69();
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v16, v68, v59);
        uint64_t v70 = v85;
        swift_bridgeObjectRetain();
        uint64_t v71 = v76;
        MEMORY[0x22A672230](v16, v80, v70);
        uint64_t v72 = OUTLINED_FUNCTION_2_29();
        uint64_t v22 = v71;
        v75(v72);
        goto LABEL_8;
      }
    }
    uint64_t v62 = v52;
    uint64_t v48 = v83;
    uint64_t v47 = v84;
    uint64_t v49 = v93;
    uint64_t v50 = v81;
    uint64_t v51 = v82;
    uint64_t v22 = v76;
    outlined destroy of AnyColumn?(v62);
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v26 = *(void **)v2;
    char v27 = *(unsigned char *)(v2 + 8);
    uint64_t v29 = *(void *)(v2 + 16);
    uint64_t v28 = *(void *)(v2 + 24);
    uint64_t v30 = *(void *)(v2 + 40);
    uint64_t v93 = *(void *)(v2 + 32);
    uint64_t v32 = *(void *)(v2 + 48);
    uint64_t v31 = *(void **)(v2 + 56);
    id v96 = v26;
    char v97 = v27;
    outlined copy of Result<_DataTable, Error>(v26, v27);
    static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v96, v32, v31);
    if (!v0)
    {
      static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v96, v29, v28, v32, (uint64_t)v31, v93, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v26, v27);
LABEL_20:
      OUTLINED_FUNCTION_35_18();
      goto LABEL_21;
    }
    outlined consume of Result<_DataTable, Error>(v96, v97);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v26, v27);
  }
  else
  {
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    OUTLINED_FUNCTION_43_13(&v94);
    if (!v0)
    {
      id v96 = v94;
      char v97 = v95;
      outlined destroy of MLHandPoseClassifier.DataSource(v2);
      goto LABEL_20;
    }
    outlined destroy of MLHandPoseClassifier.DataSource(v2);
  }
LABEL_21:
  OUTLINED_FUNCTION_8_1();
}

uint64_t type metadata accessor for MLHandPoseClassifier.DataSource()
{
  uint64_t result = type metadata singleton initialization cache for MLHandPoseClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier.DataSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of MLHandPoseClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLHandPoseClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLHandPoseClassifier.DataSource.labeledMedia()()
{
  static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(v0);
  uint64_t v3 = v2;
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3;
}

void MLHandPoseClassifier.DataSource.imagesWithAnnotations()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v107 = v4;
  int64_t v106 = (void *)type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v105 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_5_8();
  MEMORY[0x270FA5388](v7);
  v100[1] = (uint64_t)v100 - v8;
  uint64_t v104 = type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  uint64_t v103 = v9;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v100 - v12;
  uint64_t v108 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v109 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_49();
  v100[0] = v16;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_14_30();
  MEMORY[0x270FA5388](v18);
  uint64_t v101 = (char *)v100 - v19;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_45_3();
  uint64_t v102 = v21;
  OUTLINED_FUNCTION_20_3();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_46_13();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_5_54(v25, v100[0]);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_47_18();
      OUTLINED_FUNCTION_3();
      v38();
      static UTType.image.getter();
      static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
      if (v1)
      {
        OUTLINED_FUNCTION_25_0();
        v40();
        OUTLINED_FUNCTION_2_29();
        goto LABEL_8;
      }
      uint64_t v76 = v39;
      OUTLINED_FUNCTION_25_0();
      v77();
      static _ImageUtilities.generateImageTable(_:)((uint64_t)v76, (uint64_t)&v110);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_62();
      outlined consume of Result<_DataTable, Error>(v76, v0);
      OUTLINED_FUNCTION_2_29();
      goto LABEL_28;
    case 2u:
      OUTLINED_FUNCTION_47_18();
      OUTLINED_FUNCTION_3();
      v41();
      static UTType.image.getter();
      static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
      if (v1)
      {
        OUTLINED_FUNCTION_25_0();
        v43();
        OUTLINED_FUNCTION_23_22();
LABEL_8:
        OUTLINED_FUNCTION_21_4();
        v44();
        goto LABEL_33;
      }
      uint64_t v62 = v42;
      OUTLINED_FUNCTION_25_0();
      v63();
      static _ImageUtilities.generateImageTable(_:)(v62, (uint64_t)&v110);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_62();
      outlined consume of Result<_DataTable, Error>(v13, v62);
      OUTLINED_FUNCTION_23_22();
LABEL_28:
      OUTLINED_FUNCTION_21_4();
      v87();
      goto LABEL_32;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)v3, *(unsigned char *)(v3 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      MLDataTable.init()(v107);
      goto LABEL_33;
    case 4u:
      char v46 = *(unsigned char *)(v3 + 8);
      uint64_t v48 = *(void *)(v3 + 16);
      uint64_t v47 = *(void *)(v3 + 24);
      uint64_t v50 = *(void *)(v3 + 32);
      uint64_t v49 = *(void *)(v3 + 40);
      id v138 = *(id *)v3;
      id v45 = v138;
      char v139 = v46;
      outlined copy of Result<_DataTable, Error>(v138, v46);
      static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)((uint64_t)&v138, v48, v47, v50, v49);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Result<_DataTable, Error>(v45, v46);
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v45, v46);
      goto LABEL_32;
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      OUTLINED_FUNCTION_30_26();
      OUTLINED_FUNCTION_30_26();
      OUTLINED_FUNCTION_30_26();
      MLDataTable.init()(v107);
      (*(void (**)(uint64_t, void *))(v105 + 8))(v3, v106);
      goto LABEL_33;
    case 6u:
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v52 = (uint64_t *)(v3 + *(int *)(v51 + 48));
      uint64_t v54 = *v52;
      uint64_t v53 = v52[1];
      uint64_t v55 = (uint64_t *)(v3 + *(int *)(v51 + 64));
      uint64_t v57 = *v55;
      uint64_t v56 = v55[1];
      OUTLINED_FUNCTION_3();
      v58();
      OUTLINED_FUNCTION_21_38();
      v59();
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v110);
      if (v1)
      {
        uint64_t v60 = OUTLINED_FUNCTION_16_39();
        v61(v60);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      uint64_t v78 = OUTLINED_FUNCTION_34_20(v110);
      static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)(v78, v54, v53, v57, v56);
      uint64_t v85 = OUTLINED_FUNCTION_16_39();
      v86(v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_32;
    default:
      uint64_t v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      uint64_t v27 = v3 + v26[12];
      uint64_t v28 = (uint64_t *)(v3 + v26[16]);
      uint64_t v30 = *v28;
      uint64_t v29 = (void *)v28[1];
      uint64_t v105 = v30;
      int64_t v106 = v29;
      uint64_t v31 = (uint64_t *)(v3 + v26[20]);
      uint64_t v32 = v31[1];
      uint64_t v104 = *v31;
      uint64_t v33 = v109;
      uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 32);
      uint64_t v35 = v108;
      v34(v102, v3, v108);
      uint64_t v36 = v101;
      v34((uint64_t)v101, v27, v35);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v2, v36, v35);
      char v134 = 1;
      LOBYTE(v110) = 1;
      *(_DWORD *)((char *)&v110 + 1) = *(_DWORD *)v137;
      HIDWORD(v110) = *(_DWORD *)&v137[3];
      unint64_t v111 = 44;
      unint64_t v112 = 0xE100000000000000;
      uint64_t v113 = 0;
      unint64_t v114 = 0xE000000000000000;
      uint64_t v115 = 92;
      unint64_t v116 = 0xE100000000000000;
      char v117 = 1;
      *(_DWORD *)char v118 = *(_DWORD *)v136;
      *(_DWORD *)&v118[3] = *(_DWORD *)&v136[3];
      uint64_t v119 = 34;
      unint64_t v120 = 0xE100000000000000;
      char v121 = 1;
      *(_DWORD *)uint64_t v122 = *(_DWORD *)v135;
      *(_DWORD *)&v122[3] = *(_DWORD *)&v135[3];
      uint64_t v123 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v124 = 10;
      unint64_t v125 = 0xE100000000000000;
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      char v128 = 1;
      *(_DWORD *)uint64_t v129 = *(_DWORD *)v133;
      *(_DWORD *)&v129[3] = *(_DWORD *)&v133[3];
      uint64_t v130 = 0;
      MLDataTable.init(contentsOf:options:)(v2, &v110, (uint64_t)&v131);
      if (v1)
      {
        uint64_t v37 = *(void (**)(void))(v33 + 8);
        OUTLINED_FUNCTION_5_4();
        v37();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_5_4();
        v37();
      }
      else
      {
        uint64_t v64 = v104;
        uint64_t v65 = v32;
        id v138 = v131;
        char v139 = v132;
        uint64_t v66 = v105;
        uint64_t v67 = v106;
        MLDataTable.subscript.getter(v105, v106, (uint64_t)&v110);
        uint64_t v68 = (void *)v110;
        char v69 = v111;
        if ((v111 & 1) != 0
          || (outlined copy of Result<_DataTable, Error>((id)v110, 0),
              _UntypedColumn.type.getter(&v131),
              outlined consume of Result<_DataTable, Error>(v68, 0),
              v131 != 2))
        {
          outlined consume of Result<_DataTable, Error>(v68, v69);
          swift_bridgeObjectRelease();
          uint64_t v110 = 0;
          unint64_t v111 = 0xE000000000000000;
          _StringGuts.grow(_:)(26);
          swift_bridgeObjectRelease();
          uint64_t v110 = 0x206E6D756C6F43;
          unint64_t v111 = 0xE700000000000000;
          v79._uint64_t countAndFlagsBits = v66;
          v79._uint64_t object = v67;
          String.append(_:)(v79);
          swift_bridgeObjectRelease();
          v80._uint64_t object = (void *)0x80000002272D7C00;
          v80._uint64_t countAndFlagsBits = 0xD000000000000011;
          String.append(_:)(v80);
          uint64_t v81 = v110;
          unint64_t v82 = v111;
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError();
          *(void *)uint64_t v83 = v81;
          *(void *)(v83 + 8) = v82;
          *(_OWORD *)(v83 + 16) = 0u;
          *(_OWORD *)(v83 + 32) = 0u;
          *(unsigned char *)(v83 + 48) = 0;
          swift_willThrow();
          uint64_t v84 = *(void (**)(void))(v109 + 8);
          OUTLINED_FUNCTION_68_3();
          v84();
          OUTLINED_FUNCTION_68_3();
          v84();
LABEL_27:
          outlined consume of Result<_DataTable, Error>(v138, v139);
        }
        else
        {
          outlined copy of Result<_DataTable, Error>(v68, 0);
          _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v110);
          uint64_t v70 = v110;
          unint64_t v71 = v111;
          if (v112 != 2)
          {
            outlined consume of MLDataValue((void *)v110, (id)v111, v112);
            uint64_t v70 = 0;
            unint64_t v71 = 0xE000000000000000;
          }
          outlined consume of Result<_DataTable, Error>(v68, 0);
          uint64_t v110 = v70;
          unint64_t v111 = v71;
          String.init<A>(_:)();
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          id v72 = objc_msgSend(self, sel_defaultManager);
          uint64_t v73 = URL.path.getter();
          uint64_t v74 = (void *)MEMORY[0x22A674AE0](v73);
          swift_bridgeObjectRelease();
          unsigned __int8 v75 = objc_msgSend(v72, sel_fileExistsAtPath_, v74);

          if ((v75 & 1) == 0)
          {
            outlined copy of Result<_DataTable, Error>(v68, 0);
            uint64_t v88 = specialized Array<A>.init(_:)(v68, 0);
            MEMORY[0x270FA5388](v88);
            OUTLINED_FUNCTION_36_21();
            *(void *)(v89 - 16) = v102;
            uint64_t v91 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((uint64_t)partial apply for closure #1 in MLHandPoseClassifier.DataSource.imagesWithAnnotations(), v90, v88);
            uint64_t v92 = swift_bridgeObjectRelease();
            uint64_t v110 = v91;
            MEMORY[0x270FA5388](v92);
            OUTLINED_FUNCTION_36_21();
            *(void *)(v93 - 16) = &v110;
            ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
            char v96 = v95 & 1;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            MLDataTable.willMutate()();
            uint64_t v110 = (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5;
            LOBYTE(v111) = v96;
            MLDataTable.setColumnImpl(newColumn:named:)(&v110);
            swift_bridgeObjectRelease();
            outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v96);
            if ((v139 & 1) == 0)
            {
              id v97 = v138;
              outlined copy of Result<_DataTable, Error>(v138, 0);
              _DataTable.columnNamesDidChange()();
              outlined consume of Result<_DataTable, Error>(v97, 0);
            }
          }
          static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)((uint64_t)&v138, v66, (uint64_t)v67, v64, v65);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Result<_DataTable, Error>(v68, 0);
          uint64_t v98 = *(void (**)(void))(v109 + 8);
          uint64_t v99 = v108;
          OUTLINED_FUNCTION_68_3();
          v98();
          OUTLINED_FUNCTION_45_12();
          OUTLINED_FUNCTION_68_3();
          v98();
          ((void (*)(uint64_t, uint64_t))v98)(v102, v99);
LABEL_32:
          OUTLINED_FUNCTION_35_18();
        }
      }
LABEL_33:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

void MLHandPoseClassifier.DataSource.extractKeypoints()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v110 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Data>);
  OUTLINED_FUNCTION_0();
  uint64_t v103 = v7;
  uint64_t v104 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v105 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v107 = v10;
  uint64_t v108 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v109 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  uint64_t v106 = v14;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v92 - v16;
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_0();
  uint64_t v111 = v18;
  uint64_t v112 = v19;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_14_30();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_58_0();
  uint64_t v22 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v113 = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_3_0();
  uint64_t v27 = v26 - v25;
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_3_0();
  uint64_t v31 = (uint64_t *)(v30 - v29);
  outlined init with copy of MLHandPoseClassifier.DataSource(v1, v30 - v29);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    uint64_t v93 = v4;
    v92[1] = v0;
    char v96 = v17;
    uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    uint64_t v41 = (uint64_t *)((char *)v31 + v40[12]);
    uint64_t v43 = *v41;
    uint64_t v42 = v41[1];
    uint64_t v98 = v43;
    uint64_t v99 = v42;
    uint64_t v44 = (uint64_t *)((char *)v31 + v40[16]);
    uint64_t v46 = *v44;
    id v45 = (void *)v44[1];
    uint64_t v97 = v46;
    uint64_t v100 = v45;
    uint64_t v101 = v22;
    uint64_t v47 = (uint64_t *)((char *)v31 + v40[20]);
    uint64_t v48 = *v47;
    uint64_t v49 = v47[1];
    uint64_t v50 = *(void (**)(void, void, void))(v113 + 32);
    uint64_t v51 = v22;
    uint64_t v52 = v48;
    uint64_t v95 = v113 + 32;
    uint64_t v94 = v50;
    v50(v27, v31, v51);
    MEMORY[0x22A672220](v52, v49);
    uint64_t v53 = AnyColumn.wrappedElementType.getter();
    uint64_t v54 = v111;
    uint64_t v55 = *(void (**)(void))(v112 + 8);
    OUTLINED_FUNCTION_5_4();
    v55();
    uint64_t v56 = v3;
    uint64_t v102 = v52;
    if (v53 == MEMORY[0x263F8D310])
    {
      uint64_t v105 = v27;
      uint64_t v106 = v49;
      DataFrame.subscript.getter();
      uint64_t v64 = (uint64_t)v96;
      Column<A>.parseAsJSONArrays()((uint64_t)v96);
      if (v2)
      {

        OUTLINED_FUNCTION_25_0();
        v65();
        OUTLINED_FUNCTION_79_1();
        __swift_storeEnumTagSinglePayload(v66, v67, v68, v54);
      }
      else
      {
        OUTLINED_FUNCTION_25_0();
        v74();
        uint64_t v75 = OUTLINED_FUNCTION_32_25();
        __swift_storeEnumTagSinglePayload(v75, v76, v77, v54);
        if (__swift_getEnumTagSinglePayload(v64, 1, v54) != 1)
        {
          uint64_t v79 = v54;
          uint64_t v80 = v112;
          uint64_t v81 = v93;
          OUTLINED_FUNCTION_3();
          v82();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v56, v81, v79);
          uint64_t v59 = v106;
          swift_bridgeObjectRetain();
          uint64_t v27 = v105;
          MEMORY[0x22A672230](v56, v52, v59);
          OUTLINED_FUNCTION_5_4();
          v55();
          goto LABEL_8;
        }
      }
      uint64_t v60 = v100;
      uint64_t v61 = v101;
      uint64_t v62 = v113;
      uint64_t v27 = v105;
      uint64_t v63 = v99;
      outlined destroy of AnyColumn?(v64);
      uint64_t v59 = v106;
      goto LABEL_23;
    }
    MEMORY[0x22A672220](v52, v49);
    uint64_t v57 = v54;
    uint64_t v58 = AnyColumn.wrappedElementType.getter();
    OUTLINED_FUNCTION_5_4();
    v55();
    uint64_t v59 = v49;
    if (v58 != MEMORY[0x263F06F78])
    {
LABEL_8:
      uint64_t v60 = v100;
      uint64_t v61 = v101;
      uint64_t v62 = v113;
      uint64_t v63 = v99;
LABEL_23:
      uint64_t v87 = v102;
      v88._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_45_12();
      DataFrame.flattenNestedArrays(in:shape:)(v88, v89);
      if (v90)
      {
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v27, v61);
      }
      else
      {
        static _VideoUtilities.renameFeatureColumns(dataFrame:sessionIdColumn:featureColumn:labelColumn:)(v27, v98, v63, v87, v59, v97, v60);
        OUTLINED_FUNCTION_3();
        v91();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    uint64_t v109 = v56;
    OUTLINED_FUNCTION_45_12();
    DataFrame.subscript.getter();
    uint64_t v69 = v106;
    Column<A>.parseAsJSONArrays()(v106);
    if (v2)
    {

      OUTLINED_FUNCTION_25_0();
      v70();
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v71, v72, v73, v57);
    }
    else
    {
      OUTLINED_FUNCTION_25_0();
      v78();
      __swift_storeEnumTagSinglePayload(v69, 0, 1, v57);
      if (__swift_getEnumTagSinglePayload(v69, 1, v57) != 1)
      {
        OUTLINED_FUNCTION_3();
        v83();
        uint64_t v84 = v109;
        uint64_t v85 = OUTLINED_FUNCTION_2_29();
        v86(v85);
        swift_bridgeObjectRetain();
        MEMORY[0x22A672230](v84, v102, v49);
        OUTLINED_FUNCTION_5_4();
        v55();
        uint64_t v62 = v113;
        uint64_t v63 = v99;
        uint64_t v60 = v100;
        goto LABEL_22;
      }
    }
    uint64_t v62 = v113;
    uint64_t v63 = v99;
    uint64_t v60 = v100;
    outlined destroy of AnyColumn?(v69);
LABEL_22:
    uint64_t v61 = v101;
    goto LABEL_23;
  }
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v34 = v31[2];
    uint64_t v33 = v31[3];
    uint64_t v36 = v31[4];
    uint64_t v35 = v31[5];
    uint64_t v38 = v31[6];
    uint64_t v37 = (void *)v31[7];
    uint64_t v39 = OUTLINED_FUNCTION_34_20(*v31);
    static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v39, v38, v37);
    if (!v2)
    {
      static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v114, v34, v33, v38, (uint64_t)v37, v36, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_25_31();
      goto LABEL_28;
    }
    outlined consume of Result<_DataTable, Error>(v114, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
  OUTLINED_FUNCTION_43_13(&v114);
  if (!v2) {
    OUTLINED_FUNCTION_25_31();
  }
  outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)v31);
LABEL_28:
  OUTLINED_FUNCTION_8_1();
}

void MLHandPoseClassifier.DataSource.gatherAnnotatedFileNames()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v204 = v0;
  uint64_t v205 = v1;
  uint64_t v199 = v2;
  uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v187 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v186 = v5;
  uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_0();
  uint64_t v190 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v189 = v8;
  OUTLINED_FUNCTION_65();
  uint64_t v182 = type metadata accessor for CSVType();
  OUTLINED_FUNCTION_0();
  uint64_t v181 = v9;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_33_0();
  uint64_t v184 = v11;
  OUTLINED_FUNCTION_65();
  uint64_t v12 = type metadata accessor for CSVReadingOptions();
  uint64_t v13 = OUTLINED_FUNCTION_17(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v183 = v14;
  OUTLINED_FUNCTION_65();
  uint64_t v15 = type metadata accessor for JSONReadingOptions();
  uint64_t v16 = OUTLINED_FUNCTION_17(v15);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_33_0();
  *(void *)&long long v194 = v17;
  OUTLINED_FUNCTION_65();
  uint64_t v203 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v200 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  uint64_t v195 = v20;
  OUTLINED_FUNCTION_20_3();
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v178 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v180 = (char *)&v178 - v25;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_45_3();
  uint64_t v193 = v27;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v28);
  uint64_t v185 = (char *)&v178 - v29;
  type metadata accessor for UTType();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_63();
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_58_0();
  *(void *)&long long v201 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v202 = v32;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_49();
  *(void *)&long long v192 = v34;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_45_3();
  uint64_t v196 = v36;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_45_3();
  *(void *)&long long v197 = v38;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_45_3();
  uint64_t v198 = v40;
  OUTLINED_FUNCTION_20_3();
  uint64_t v42 = MEMORY[0x270FA5388](v41);
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_46_13();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_3_0();
  uint64_t v46 = v45 - v44;
  outlined init with copy of MLHandPoseClassifier.DataSource((uint64_t)v204, v45 - v44);
  OUTLINED_FUNCTION_2_29();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_3();
      v76();
      static UTType.image.getter();
      uint64_t v77 = v205;
      static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
      if (!v77)
      {
        OUTLINED_FUNCTION_22_27();
        v144();
        specialized _NativeDictionary.mapValues<A>(_:)();
        uint64_t v146 = v145;
        swift_bridgeObjectRelease();
        uint64_t v147 = v199;
        OUTLINED_FUNCTION_12_36(v146, v199);
        OUTLINED_FUNCTION_21_4();
        v148();
        uint64_t v136 = v147;
        goto LABEL_27;
      }
      OUTLINED_FUNCTION_22_27();
      v78();
      OUTLINED_FUNCTION_21_4();
      v79();
      goto LABEL_36;
    case 2u:
      OUTLINED_FUNCTION_3();
      v80();
      static UTType.image.getter();
      uint64_t v81 = v205;
      static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
      if (!v81)
      {
        OUTLINED_FUNCTION_22_27();
        v130();
        specialized _NativeDictionary.mapValues<A>(_:)();
        uint64_t v132 = v131;
        swift_bridgeObjectRelease();
        uint64_t v133 = v199;
        OUTLINED_FUNCTION_12_36(v132, v199);
        uint64_t v134 = OUTLINED_FUNCTION_40_15();
        v135(v134);
        uint64_t v136 = v133;
LABEL_27:
        uint64_t v149 = v203;
        goto LABEL_35;
      }
      OUTLINED_FUNCTION_22_27();
      v82();
      uint64_t v83 = OUTLINED_FUNCTION_40_15();
      v84(v83);
      goto LABEL_36;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)v46, *(unsigned char *)(v46 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v85, v86, v87, v203);
      goto LABEL_36;
    case 4u:
      id v88 = *(id *)v46;
      char v89 = *(unsigned char *)(v46 + 8);
      uint64_t v91 = *(void *)(v46 + 16);
      uint64_t v90 = *(void *)(v46 + 24);
      uint64_t v202 = *(void **)(v46 + 32);
      uint64_t v204 = *(void **)(v46 + 40);
      id v206 = v88;
      LOBYTE(v207) = v89;
      outlined copy of Result<_DataTable, Error>(v88, v89);
      DataFrame.init(_:)((uint64_t)&v206, (uint64_t)v24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      uint64_t v92 = OUTLINED_FUNCTION_55_7();
      long long v201 = xmmword_2272CB370;
      *(_OWORD *)(v92 + 16) = xmmword_2272CB370;
      uint64_t v93 = MEMORY[0x263F8D310];
      *(void *)(v92 + 32) = MEMORY[0x263F8D310];
      OUTLINED_FUNCTION_18_26();
      DataFrame.validateColumnTypes(_:_:context:)(v94, v95, v96);
      if (v97) {
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      uint64_t v137 = OUTLINED_FUNCTION_55_7();
      *(_OWORD *)(v137 + 16) = v201;
      *(void *)(v137 + 32) = v93;
      v138._uint64_t countAndFlagsBits = 0x6C6562614CLL;
      uint64_t v139 = (uint64_t)v202;
      v140._uint64_t countAndFlagsBits = (uint64_t)v202;
      uint64_t v141 = (uint64_t)v204;
      v140._uint64_t object = v204;
      v138._uint64_t object = (void *)0xE500000000000000;
      DataFrame.validateColumnTypes(_:_:context:)(v140, (Swift::OpaquePointer)v137, v138);
      if (v142)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_25_0();
        v143();
        outlined consume of Result<_DataTable, Error>(v88, v89);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_36(v91, v90);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_19_34(v139, v141);
        outlined consume of Result<_DataTable, Error>(v88, v89);
        swift_bridgeObjectRelease();
        char v159 = v24;
        uint64_t v160 = v203;
        (*(void (**)(uint64_t, char *, uint64_t))(v200 + 32))(v199, v159, v203);
        uint64_t v161 = OUTLINED_FUNCTION_32_25();
        __swift_storeEnumTagSinglePayload(v161, v162, v163, v160);
      }
      goto LABEL_36;
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_79_1();
      uint64_t v98 = v203;
      __swift_storeEnumTagSinglePayload(v99, v100, v101, v203);
      (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v46, v98);
      goto LABEL_36;
    case 6u:
      uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v103 = (uint64_t *)(v46 + *(int *)(v102 + 48));
      uint64_t v104 = *v103;
      uint64_t v204 = (void *)v103[1];
      uint64_t v105 = (uint64_t *)(v46 + *(int *)(v102 + 64));
      uint64_t v107 = *v105;
      uint64_t v106 = (void *)v105[1];
      *(void *)&long long v201 = v107;
      uint64_t v202 = v106;
      uint64_t v108 = v200 + 32;
      uint64_t v109 = *(void (**)(void))(v200 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v109)(v195, v46, v203);
      uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      uint64_t v110 = OUTLINED_FUNCTION_55_7();
      long long v197 = xmmword_2272CB370;
      *(_OWORD *)(v110 + 16) = xmmword_2272CB370;
      *(void *)(v110 + 32) = MEMORY[0x263F8D310];
      uint64_t v111 = v104;
      uint64_t v112 = (uint64_t)v204;
      OUTLINED_FUNCTION_18_26();
      DataFrame.validateColumnTypes(_:_:context:)(v113, v114, v115);
      if (v116)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_21_4();
        v117();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v205 = v108;
        uint64_t v150 = v111;
        uint64_t v151 = v109;
        swift_bridgeObjectRelease();
        uint64_t v152 = OUTLINED_FUNCTION_55_7();
        *(_OWORD *)(v152 + 16) = v197;
        *(void *)(v152 + 32) = MEMORY[0x263F8D310];
        v153._uint64_t countAndFlagsBits = 0x6C6562614CLL;
        uint64_t v154 = v201;
        v155._uint64_t countAndFlagsBits = v201;
        uint64_t v156 = (uint64_t)v202;
        v155._uint64_t object = v202;
        v153._uint64_t object = (void *)0xE500000000000000;
        DataFrame.validateColumnTypes(_:_:context:)(v155, (Swift::OpaquePointer)v152, v153);
        if (!v157)
        {
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_10_36(v150, v112);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_19_34(v154, v156);
          swift_bridgeObjectRelease();
          uint64_t v164 = v199;
          uint64_t v165 = v203;
          OUTLINED_FUNCTION_3();
          v151();
          uint64_t v136 = v164;
          uint64_t v149 = v165;
          goto LABEL_35;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_25_0();
        v158();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      goto LABEL_36;
    default:
      uint64_t v47 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      uint64_t v48 = v46 + v47[12];
      uint64_t v49 = (uint64_t *)(v46 + v47[16]);
      uint64_t v50 = v49[1];
      uint64_t v179 = *v49;
      uint64_t v51 = (uint64_t *)(v46 + v47[20]);
      uint64_t v53 = *v51;
      uint64_t v52 = (void *)v51[1];
      uint64_t v54 = (void (*)(uint64_t, uint64_t, uint64_t))v202[4];
      uint64_t v55 = v201;
      v54(v198, v46, v201);
      v54(v197, v48, v55);
      BOOL v57 = URL.pathExtension.getter() == 1852797802 && v56 == 0xE400000000000000;
      uint64_t v204 = v52;
      uint64_t v178 = v50;
      uint64_t v195 = v53;
      if (v57)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v58 & 1) == 0)
        {
          uint64_t v59 = v53;
          OUTLINED_FUNCTION_21_38();
          v60();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v61 = swift_allocObject();
          long long v194 = xmmword_2272CB4D0;
          uint64_t v196 = v61;
          *(_OWORD *)(v61 + 16) = xmmword_2272CB4D0;
          uint64_t v62 = v179;
          *(void *)(v61 + 32) = v179;
          *(void *)(v61 + 40) = v50;
          *(void *)(v61 + 48) = v59;
          *(void *)(v61 + 56) = v52;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CSVType)>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
          OUTLINED_FUNCTION_11_44();
          uint64_t v64 = *(void *)(v63 + 72);
          unint64_t v66 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
          uint64_t v67 = swift_allocObject();
          *(_OWORD *)(v67 + 16) = v194;
          uint64_t v68 = (uint64_t *)(v67 + v66);
          *uint64_t v68 = v62;
          v68[1] = v50;
          uint64_t v69 = *(void (**)(void))(v181 + 104);
          OUTLINED_FUNCTION_33_21();
          v69();
          uint64_t v70 = (uint64_t *)((char *)v68 + v64);
          uint64_t v71 = v204;
          void *v70 = v195;
          v70[1] = v71;
          OUTLINED_FUNCTION_33_21();
          v69();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          Dictionary.init(dictionaryLiteral:)();
          default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
          uint64_t v73 = v72;
          specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
          specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
          OUTLINED_FUNCTION_33_21();
          v69();
          CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
          uint64_t v74 = (uint64_t)v180;
          uint64_t v75 = v205;
          DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
          if (v75) {
            goto LABEL_22;
          }
          goto LABEL_34;
        }
      }
      OUTLINED_FUNCTION_21_38();
      v118();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v74 = swift_allocObject();
      long long v192 = xmmword_2272CB4D0;
      *(_OWORD *)(v74 + 16) = xmmword_2272CB4D0;
      uint64_t v119 = v179;
      *(void *)(v74 + 32) = v179;
      *(void *)(v74 + 40) = v50;
      *(void *)(v74 + 48) = v53;
      *(void *)(v74 + 56) = v52;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, JSONType)>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType));
      OUTLINED_FUNCTION_11_44();
      uint64_t v184 = *(void *)(v120 + 72);
      unint64_t v122 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
      uint64_t v123 = swift_allocObject();
      *(_OWORD *)(v123 + 16) = v192;
      uint64_t v124 = (uint64_t *)(v123 + v122);
      *uint64_t v124 = v119;
      v124[1] = v50;
      type metadata accessor for JSONType();
      OUTLINED_FUNCTION_8();
      uint64_t v126 = *(void (**)(void))(v125 + 104);
      OUTLINED_FUNCTION_44_17();
      v126();
      uint64_t v127 = (uint64_t *)((char *)v124 + v184);
      char v128 = v204;
      *uint64_t v127 = v195;
      v127[1] = v128;
      OUTLINED_FUNCTION_44_17();
      v126();
      uint64_t v73 = v204;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      Dictionary.init(dictionaryLiteral:)();
      JSONReadingOptions.init()();
      uint64_t v129 = v205;
      DataFrame.init(contentsOfJSONFile:columns:types:options:)();
      if (v129)
      {
LABEL_22:
        OUTLINED_FUNCTION_29_28();
        OUTLINED_FUNCTION_68_3();
        ((void (*)(void))v74)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_68_3();
        ((void (*)(void))v74)();
        goto LABEL_36;
      }
LABEL_34:
      OUTLINED_FUNCTION_14_32();
      uint64_t v166 = v203;
      uint64_t v200 = v167;
      OUTLINED_FUNCTION_3();
      v168();
      uint64_t v169 = v179;
      uint64_t v170 = v178;
      DataFrame.subscript.getter();
      id v206 = 0;
      unint64_t v207 = 0xE000000000000000;
      lazy protocol witness table accessor for type Column<String> and conformance Column<A>();
      OptionalColumnProtocol.filled(with:)();
      OUTLINED_FUNCTION_25_0();
      uint64_t v172 = v171();
      MEMORY[0x270FA5388](v172);
      OUTLINED_FUNCTION_36_21();
      *(void *)(v173 - 16) = v198;
      uint64_t v174 = v205;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSSgs5NeverOTg5();
      uint64_t v205 = v174;
      swift_bridgeObjectRetain();
      DataFrame.subscript.setter();
      OUTLINED_FUNCTION_10_36(v169, v170);
      swift_bridgeObjectRelease();
      uint64_t v175 = (void (*)(void))v204;
      OUTLINED_FUNCTION_19_34(v195, (uint64_t)v204);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_25_0();
      v176();
      OUTLINED_FUNCTION_29_28();
      OUTLINED_FUNCTION_68_3();
      v175();
      OUTLINED_FUNCTION_68_3();
      v175();
      uint64_t v177 = v199;
      ((void (*)(uint64_t, void *, uint64_t))v200)(v199, v73, v166);
      uint64_t v136 = v177;
      uint64_t v149 = v166;
LABEL_35:
      __swift_storeEnumTagSinglePayload(v136, 0, 1, v149);
LABEL_36:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

uint64_t closure #3 in MLHandPoseClassifier.DataSource.gatherAnnotatedFileNames()@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v24 - v16;
  v24[1] = *a1;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F06E38], v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, v25, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v11);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  URL.absoluteURL.getter();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v17, v11);
  uint64_t v19 = URL.path.getter();
  uint64_t v21 = v20;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v15, v11);
  uint64_t v23 = v26;
  *uint64_t v26 = v19;
  v23[1] = v21;
  return result;
}

uint64_t closure #1 in MLHandPoseClassifier.DataSource.imagesWithAnnotations()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)();
  uint64_t v6 = URL.path.getter();
  uint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

void MLHandPoseClassifier.DataSource.stratifiedSplit(proportions:seed:labelColumn:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_5_54(v11, v24);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    uint64_t v25 = v9;
    uint64_t v26 = (void *)v5;
    uint64_t v17 = v1
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String))
                 + 48);
    uint64_t v15 = *(void **)v17;
    uint64_t v16 = *(void **)(v17 + 8);
    OUTLINED_FUNCTION_30_26();
    OUTLINED_FUNCTION_30_26();
    type metadata accessor for DataFrame();
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t))(v18 + 8))(v1);
  }
  else
  {
    if (EnumCaseMultiPayload != 3)
    {
      MLHandPoseClassifier.DataSource.imagesWithAnnotations()();
      if (!v0)
      {
        if (v7 < 0) {
          goto LABEL_14;
        }
        type metadata accessor for MersenneTwisterGenerator();
        swift_allocObject();
        MersenneTwisterGenerator.init(seed:)(v7);
        OUTLINED_FUNCTION_39_17(v19);
        specialized stratifiedSplitGenerator<A>(proportions:generator:dataTable:on:)(v9, v27, v28, v5, v3, v20);
        swift_release();
        outlined consume of Result<_DataTable, Error>(v27, v28);
      }
      outlined destroy of MLHandPoseClassifier.DataSource(v1);
      goto LABEL_13;
    }
    uint64_t v25 = v9;
    uint64_t v26 = (void *)v5;
    uint64_t v13 = *(void **)v1;
    char v14 = *(unsigned char *)(v1 + 8);
    uint64_t v15 = *(void **)(v1 + 16);
    uint64_t v16 = *(void **)(v1 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v13, v14);
  }
  MLHandPoseClassifier.DataSource.keypointsWithAnnotations()();
  if (v0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    type metadata accessor for MersenneTwisterGenerator();
    swift_allocObject();
    MersenneTwisterGenerator.init(seed:)(v7);
    OUTLINED_FUNCTION_39_17(v21);
    specialized stratifiedSplitBySequenceGenerator<A>(proportions:generator:dataTable:by:on:)(v25, v22, v27, (void *)v28, v15, v16, v26, v3, v23);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Result<_DataTable, Error>(v27, v28);
    goto LABEL_13;
  }
LABEL_14:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.DataSource.imagesWithAnnotations()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in MLHandPoseClassifier.DataSource.imagesWithAnnotations()(a1);
}

void default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)()
{
}

void specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>),
        uint64_t v2 = static _SetStorage.allocate(capacity:)(),
        (uint64_t v3 = *(void *)(a1 + 16)) == 0))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v4 = 0;
  while (v4 < *(void *)(a1 + 16))
  {
    uint64_t v5 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v8 = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = v8 & ~v9;
    OUTLINED_FUNCTION_41_16();
    if ((v13 & v12) != 0)
    {
      uint64_t v14 = *(void *)(v2 + 48);
      uint64_t v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v7 && v15[1] == v6;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        uint64_t v10 = (v10 + 1) & v17;
        OUTLINED_FUNCTION_41_16();
        if ((v12 & v13) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * v10);
        BOOL v19 = *v18 == v7 && v18[1] == v6;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_11;
        }
      }
    }
    *(void *)(v2 + 56 + 8 * v11) = v13 | v12;
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * v10);
    *uint64_t v20 = v7;
    v20[1] = v6;
    uint64_t v21 = *(void *)(v2 + 16);
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_25;
    }
    *(void *)(v2 + 16) = v23;
LABEL_22:
    if (++v4 == v3) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t partial apply for closure #3 in MLHandPoseClassifier.DataSource.gatherAnnotatedFileNames()@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in MLHandPoseClassifier.DataSource.gatherAnnotatedFileNames()(a1, *(void *)(v2 + 16), a2);
}

char *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier.DataSource(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    a1 = &v17[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v18 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        break;
      case 3u:
        BOOL v19 = *a2;
        char v20 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v20);
        *(void *)a1 = v19;
        a1[8] = v20;
        uint64_t v21 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v21;
        BOOL v22 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v22;
        uint64_t v23 = a2[6];
        uint64_t v24 = a2[7];
        *((void *)a1 + 6) = v23;
        *((void *)a1 + 7) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v25 = *a2;
        char v26 = *((unsigned char *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v26);
        *(void *)a1 = v25;
        a1[8] = v26;
        uint64_t v27 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v27;
        unsigned __int8 v28 = a2[4];
        uint64_t v29 = a2[5];
        *((void *)a1 + 4) = v28;
        *((void *)a1 + 5) = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v30 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v32 = v31[12];
        uint64_t v33 = &a1[v32];
        uint64_t v34 = (uint64_t *)((char *)a2 + v32);
        uint64_t v36 = *v34;
        uint64_t v35 = v34[1];
        *(void *)uint64_t v33 = v36;
        *((void *)v33 + 1) = v35;
        uint64_t v37 = v31[16];
        uint64_t v38 = &a1[v37];
        uint64_t v39 = (char **)((char *)a2 + v37);
        uint64_t v40 = v39[1];
        *(void *)uint64_t v38 = *v39;
        *((void *)v38 + 1) = v40;
        uint64_t v41 = v31[20];
        uint64_t v42 = &a1[v41];
        uint64_t v43 = (char **)((char *)a2 + v41);
        uint64_t v44 = v43[1];
        *(void *)uint64_t v42 = *v43;
        *((void *)v42 + 1) = v44;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v45 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v45 - 8) + 16))(a1, a2, v45);
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v47 = *(int *)(v46 + 48);
        uint64_t v48 = &a1[v47];
        uint64_t v49 = (uint64_t *)((char *)a2 + v47);
        uint64_t v51 = *v49;
        uint64_t v50 = v49[1];
        *(void *)uint64_t v48 = v51;
        *((void *)v48 + 1) = v50;
        uint64_t v52 = *(int *)(v46 + 64);
        uint64_t v53 = &a1[v52];
        uint64_t v54 = (char **)((char *)a2 + v52);
        uint64_t v55 = v54[1];
        *(void *)uint64_t v53 = *v54;
        *((void *)v53 + 1) = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(char *, char **, uint64_t))(*(void *)(v6 - 8) + 16);
        v7(a1, a2, v6);
        Swift::Int v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v7(&a1[v8[12]], (char **)((char *)a2 + v8[12]), v6);
        uint64_t v9 = v8[16];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = (char **)((char *)a2 + v9);
        uint64_t v12 = v11[1];
        *(void *)uint64_t v10 = *v11;
        *((void *)v10 + 1) = v12;
        uint64_t v13 = v8[20];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = (char **)((char *)a2 + v13);
        uint64_t v16 = v15[1];
        *(void *)uint64_t v14 = *v15;
        *((void *)v14 + 1) = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLHandPoseClassifier.DataSource(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v5 = type metadata accessor for URL();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v6(a1 + *(int *)(v7 + 48), v5);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 1:
    case 2:
      uint64_t v3 = type metadata accessor for URL();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 3:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 4:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(unsigned char *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 5:
      uint64_t v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 6:
      uint64_t v9 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      swift_bridgeObjectRelease();
LABEL_10:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for MLHandPoseClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      break;
    case 3u:
      id v16 = *(id *)a2;
      char v17 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v17);
      *(void *)a1 = v16;
      *(unsigned char *)(a1 + 8) = v17;
      uint64_t v18 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v18;
      uint64_t v19 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v19;
      uint64_t v20 = *(void *)(a2 + 48);
      uint64_t v21 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 4u:
      id v22 = *(id *)a2;
      char v23 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v23);
      *(void *)a1 = v22;
      *(unsigned char *)(a1 + 8) = v23;
      uint64_t v24 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v24;
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v25;
      *(void *)(a1 + 40) = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 5u:
      uint64_t v27 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
      unsigned __int8 v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v29 = v28[12];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (uint64_t *)(a2 + v29);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      void *v30 = v33;
      v30[1] = v32;
      uint64_t v34 = v28[16];
      uint64_t v35 = (void *)(a1 + v34);
      uint64_t v36 = (void *)(a2 + v34);
      uint64_t v37 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v28[20];
      uint64_t v39 = (void *)(a1 + v38);
      uint64_t v40 = (void *)(a2 + v38);
      uint64_t v41 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 6u:
      uint64_t v42 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      uint64_t v44 = *(int *)(v43 + 48);
      uint64_t v45 = (void *)(a1 + v44);
      uint64_t v46 = (uint64_t *)(a2 + v44);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      void *v45 = v48;
      v45[1] = v47;
      uint64_t v49 = *(int *)(v43 + 64);
      uint64_t v50 = (void *)(a1 + v49);
      uint64_t v51 = (void *)(a2 + v49);
      uint64_t v52 = v51[1];
      *uint64_t v50 = *v51;
      v50[1] = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = type metadata accessor for URL();
      uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v5(a1 + v6[12], a2 + v6[12], v4);
      uint64_t v7 = v6[16];
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (void *)(a2 + v7);
      uint64_t v10 = v9[1];
      void *v8 = *v9;
      v8[1] = v10;
      uint64_t v11 = v6[20];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (void *)(a2 + v11);
      uint64_t v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MLHandPoseClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.DataSource(a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        break;
      case 3u:
        id v14 = *(id *)a2;
        char v15 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v15);
        *(void *)a1 = v14;
        *(unsigned char *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        id v16 = *(id *)a2;
        char v17 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v17);
        *(void *)a1 = v16;
        *(unsigned char *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v18 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v20 = v19[12];
        uint64_t v21 = (void *)(a1 + v20);
        id v22 = (void *)(a2 + v20);
        *uint64_t v21 = *v22;
        v21[1] = v22[1];
        uint64_t v23 = v19[16];
        uint64_t v24 = (void *)(a1 + v23);
        uint64_t v25 = (void *)(a2 + v23);
        void *v24 = *v25;
        v24[1] = v25[1];
        uint64_t v26 = v19[20];
        uint64_t v27 = (void *)(a1 + v26);
        unsigned __int8 v28 = (void *)(a2 + v26);
        void *v27 = *v28;
        v27[1] = v28[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v29 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        uint64_t v31 = *(int *)(v30 + 48);
        uint64_t v32 = (void *)(a1 + v31);
        uint64_t v33 = (void *)(a2 + v31);
        *uint64_t v32 = *v33;
        v32[1] = v33[1];
        uint64_t v34 = *(int *)(v30 + 64);
        uint64_t v35 = (void *)(a1 + v34);
        uint64_t v36 = (void *)(a2 + v34);
        *uint64_t v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = type metadata accessor for URL();
        uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
        v5(a1, a2, v4);
        uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v5(a1 + v6[12], a2 + v6[12], v4);
        uint64_t v7 = v6[16];
        uint64_t v8 = (void *)(a1 + v7);
        uint64_t v9 = (void *)(a2 + v7);
        void *v8 = *v9;
        v8[1] = v9[1];
        uint64_t v10 = v6[20];
        uint64_t v11 = (void *)(a1 + v10);
        uint64_t v12 = (void *)(a2 + v10);
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLHandPoseClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v7(&a1[v8[12]], &a2[v8[12]], v6);
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
      goto LABEL_7;
    case 1u:
    case 2u:
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      goto LABEL_7;
    case 5u:
      uint64_t v10 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
      *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
      *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
      goto LABEL_7;
    case 6u:
      uint64_t v12 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      *(_OWORD *)&a1[*(int *)(v13 + 48)] = *(_OWORD *)&a2[*(int *)(v13 + 48)];
      *(_OWORD *)&a1[*(int *)(v13 + 64)] = *(_OWORD *)&a2[*(int *)(v13 + 64)];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for MLHandPoseClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL();
        uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v7(&a1[v8[12]], &a2[v8[12]], v6);
        *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
        *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
        goto LABEL_8;
      case 1u:
      case 2u:
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        goto LABEL_8;
      case 5u:
        uint64_t v10 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
        *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
        *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
        goto LABEL_8;
      case 6u:
        uint64_t v12 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&a1[*(int *)(v13 + 48)] = *(_OWORD *)&a2[*(int *)(v13 + 48)];
        *(_OWORD *)&a1[*(int *)(v13 + 64)] = *(_OWORD *)&a2[*(int *)(v13 + 64)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLHandPoseClassifier.DataSource()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64;
    uint64_t v6 = (void *)v5;
    uint64_t v7 = &unk_2272D2C78;
    uint64_t v8 = &unk_2272D2C78;
    swift_getTupleTypeLayout();
    uint64_t v10 = &v9;
    uint64_t v11 = v5;
    uint64_t v12 = v5;
    uint64_t v13 = &unk_2272D2C90;
    id v14 = &unk_2272D2CA8;
    uint64_t result = type metadata accessor for DataFrame();
    if (v2 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      uint64_t v6 = &unk_2272D2C78;
      uint64_t v7 = &unk_2272D2C78;
      uint64_t v8 = &unk_2272D2C78;
      swift_getTupleTypeLayout();
      char v15 = &v4;
      swift_getTupleTypeLayout3();
      id v16 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_62()
{
  unint64_t v1 = *(void **)(v0 - 288);
  char v2 = *(unsigned char *)(v0 - 280);
  *(void *)(v0 - 104) = v1;
  *(unsigned char *)(v0 - 96) = v2;
  *(void *)(v0 - 288) = v1;
  *(unsigned char *)(v0 - 280) = v2;
  outlined copy of Result<_DataTable, Error>(v1, v2);
  return static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)(v0 - 288, 0x7461506567616D69, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_5_54@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of MLHandPoseClassifier.DataSource(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

void OUTLINED_FUNCTION_10_36(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0x7461506567616D69;
  unint64_t v4 = 0xE900000000000068;
  DataFrame.renameColumn(_:to:)(*(Swift::String *)&a1, *(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_12_36@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized DataFrame.init<A>(expanding:keysColumnName:valuesColumnName:)(a1, 0x7461506567616D69, 0xE900000000000068, a2);
}

uint64_t OUTLINED_FUNCTION_14_32()
{
  *(void *)(v1 - 112) = v0;
  *(void *)(v1 - 216) = (*(void *)(v1 - 168) + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  return *(void *)(v1 - 328);
}

uint64_t OUTLINED_FUNCTION_15_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_39()
{
  return v0;
}

void OUTLINED_FUNCTION_19_34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0x6C6562616CLL;
  unint64_t v4 = 0xE500000000000000;
  DataFrame.renameColumn(_:to:)(*(Swift::String *)&a1, *(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_23_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_31()
{
  char v2 = *(unsigned char *)(v0 - 96);
  *(void *)(v0 - 120) = *(void *)(v0 - 104);
  *(unsigned char *)(v0 - 112) = v2;
  uint64_t v3 = *(void *)(v0 - 152);
  return DataFrame.init(_:)(v0 - 120, v3);
}

uint64_t OUTLINED_FUNCTION_29_28()
{
  return *(void *)(v0 - 208);
}

uint64_t OUTLINED_FUNCTION_30_26()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_32_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_20@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 104) = a1;
  *(unsigned char *)(v2 - 96) = v1;
  return v2 - 104;
}

uint64_t OUTLINED_FUNCTION_40_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_13@<X0>(void *a1@<X8>)
{
  return static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)(v1, 0, a1);
}

uint64_t OUTLINED_FUNCTION_46_13()
{
  return type metadata accessor for MLHandPoseClassifier.DataSource();
}

uint64_t static MLLinearRegressor.ModelParameters.firstIncompatibility(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32))
  {
    if (*(double *)(a1 + 40) == *(double *)(a2 + 40))
    {
      if (*(double *)(a1 + 48) == *(double *)(a2 + 48))
      {
        if (*(double *)(a1 + 56) == *(double *)(a2 + 56))
        {
          if (*(double *)(a1 + 64) == *(double *)(a2 + 64))
          {
            int v6 = *(unsigned __int8 *)(a1 + 72);
            uint64_t v7 = 1702195828;
            int v8 = *(unsigned __int8 *)(a2 + 72);
            if (*(unsigned char *)(a1 + 72)) {
              uint64_t v9 = 1702195828;
            }
            else {
              uint64_t v9 = 0x65736C6166;
            }
            if (*(unsigned char *)(a1 + 72)) {
              unint64_t v10 = 0xE400000000000000;
            }
            else {
              unint64_t v10 = 0xE500000000000000;
            }
            if (*(unsigned char *)(a2 + 72))
            {
              unint64_t v11 = 0xE400000000000000;
            }
            else
            {
              uint64_t v7 = 0x65736C6166;
              unint64_t v11 = 0xE500000000000000;
            }
            if (v6 == v8) {
              unint64_t v12 = 0;
            }
            else {
              unint64_t v12 = 0x2065727574616546;
            }
            if (v6 == v8) {
              unint64_t v13 = 0;
            }
            else {
              unint64_t v13 = 0xEF676E696C616373;
            }
            if (v6 == v8) {
              uint64_t v3 = 0;
            }
            else {
              uint64_t v3 = v9;
            }
            if (v6 == v8) {
              unint64_t v4 = 0;
            }
            else {
              unint64_t v4 = v10;
            }
            if (v6 == v8) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = v7;
            }
            if (v6 == v8) {
              unint64_t v15 = 0;
            }
            else {
              unint64_t v15 = v11;
            }
          }
          else
          {
            Double.description.getter();
            uint64_t result = OUTLINED_FUNCTION_0_22();
            unint64_t v13 = 0x80000002272D9130;
            unint64_t v12 = 0xD000000000000015;
          }
        }
        else
        {
          Double.description.getter();
          uint64_t result = OUTLINED_FUNCTION_0_22();
          unint64_t v13 = 0xE900000000000065;
          unint64_t v12 = 0x7A69732070657453;
        }
      }
      else
      {
        unint64_t v13 = 0xEA00000000007974;
        Double.description.getter();
        uint64_t result = OUTLINED_FUNCTION_0_22();
        unint64_t v12 = 0x6C616E657020324CLL;
      }
    }
    else
    {
      unint64_t v13 = 0xEA00000000007974;
      unint64_t v12 = 0x6C616E657020314CLL;
      Double.description.getter();
      uint64_t result = OUTLINED_FUNCTION_0_22();
    }
  }
  else
  {
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v4 = v16;
    uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = 0xEF736E6F69746172;
    unint64_t v12 = 0x657469202E78614DLL;
  }
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v3;
  a3[3] = v4;
  a3[4] = result;
  a3[5] = v15;
  return result;
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate()
{
  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_9_42();
  uint64_t v0 = OUTLINED_FUNCTION_35_9();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_3_66(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate;
  uint64_t v3 = OUTLINED_FUNCTION_4_59();
  return v4(v3);
}

uint64_t specialized TrainingSessionDelegate.extractFeatures(from:)()
{
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8), v0, 0, 1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance MLStyleTransfer.TrainingSessionDelegate()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_3_66(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return specialized TrainingSessionDelegate.extractFeatures(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_9_42();
  uint64_t v0 = OUTLINED_FUNCTION_35_9();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_3_66(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate;
  uint64_t v3 = OUTLINED_FUNCTION_4_59();
  return v4(v3);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance LinearRegressorTrainingSessionDelegate()
{
  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_9_42();
  uint64_t v0 = OUTLINED_FUNCTION_35_9();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_3_66(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate;
  uint64_t v3 = OUTLINED_FUNCTION_4_59();
  return v4(v3);
}

uint64_t protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance TreeRegressorTrainingSessionDelegate(unsigned __int8 *a1)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(*a1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeRegressorTrainingSessionDelegate()
{
  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_9_42();
  uint64_t v0 = OUTLINED_FUNCTION_35_9();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_3_66(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate;
  uint64_t v3 = OUTLINED_FUNCTION_4_59();
  return v4(v3);
}

uint64_t protocol witness for TrainingSessionDelegate.shouldTransition(from:to:) in conformance TreeRegressorTrainingSessionDelegate()
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType() & 1;
}

uint64_t protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(unsigned __int8 *a1)
{
  return protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance TreeRegressorTrainingSessionDelegate(a1);
}

uint64_t OUTLINED_FUNCTION_3_66(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_59()
{
  return v0;
}

uint64_t specialized CoreMLExportable.exportAsCoreMLModel()()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = OUTLINED_FUNCTION_71_6();
  v0[12] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[13] = v2;
  v0[14] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  NSString *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v0 = OUTLINED_FUNCTION_54_10();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_51_12();
  uint64_t v1 = OUTLINED_FUNCTION_8_40();
  uint64_t v2 = OUTLINED_FUNCTION_4_60(v1, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_56_13();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_59_4();
    OUTLINED_FUNCTION_25_32();
    return v4(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    unint64_t v12 = swift_task_alloc();
    unint64_t v13 = (void *)OUTLINED_FUNCTION_45_16(v12);
    void *v13 = v14;
    v13[1] = specialized CoreMLExportable.exportAsCoreMLModel();
    OUTLINED_FUNCTION_23_23();
    OUTLINED_FUNCTION_25_32();
    return static MLModel.compile(_:)(v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  void *v8 = v7;
  *(void *)(v5 + 128) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 136) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = OUTLINED_FUNCTION_71_6();
  v0[12] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[13] = v2;
  v0[14] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  NSString *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v0 = OUTLINED_FUNCTION_54_10();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_51_12();
  uint64_t v1 = OUTLINED_FUNCTION_8_40();
  uint64_t v2 = OUTLINED_FUNCTION_4_60(v1, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_56_13();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_59_4();
    OUTLINED_FUNCTION_25_32();
    return v4(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    unint64_t v12 = swift_task_alloc();
    unint64_t v13 = (void *)OUTLINED_FUNCTION_45_16(v12);
    void *v13 = v14;
    v13[1] = specialized CoreMLExportable.exportAsCoreMLModel();
    OUTLINED_FUNCTION_23_23();
    OUTLINED_FUNCTION_25_32();
    return static MLModel.compile(_:)(v15);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = OUTLINED_FUNCTION_71_6();
  v0[12] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[13] = v2;
  v0[14] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  NSString *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v0 = OUTLINED_FUNCTION_54_10();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_51_12();
  uint64_t v1 = OUTLINED_FUNCTION_8_40();
  uint64_t v2 = OUTLINED_FUNCTION_4_60(v1, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_56_13();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_59_4();
    OUTLINED_FUNCTION_25_32();
    return v4(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    unint64_t v12 = swift_task_alloc();
    unint64_t v13 = (void *)OUTLINED_FUNCTION_45_16(v12);
    void *v13 = v14;
    v13[1] = specialized CoreMLExportable.exportAsCoreMLModel();
    OUTLINED_FUNCTION_23_23();
    OUTLINED_FUNCTION_25_32();
    return static MLModel.compile(_:)(v15);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = OUTLINED_FUNCTION_71_6();
  v0[12] = v1;
  OUTLINED_FUNCTION_1(v1);
  v0[13] = v2;
  v0[14] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  v1[11] = v0;
  uint64_t v2 = type metadata accessor for Model();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CoreMLExportable.exportAsCoreMLModel(), 0, 0);
}

{
  NSString *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v0 = OUTLINED_FUNCTION_54_10();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_51_12();
  uint64_t v1 = OUTLINED_FUNCTION_8_40();
  uint64_t v2 = OUTLINED_FUNCTION_4_60(v1, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_56_13();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_59_4();
    OUTLINED_FUNCTION_25_32();
    return v4(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    unint64_t v12 = swift_task_alloc();
    unint64_t v13 = (void *)OUTLINED_FUNCTION_45_16(v12);
    void *v13 = v14;
    v13[1] = specialized CoreMLExportable.exportAsCoreMLModel();
    OUTLINED_FUNCTION_23_23();
    OUTLINED_FUNCTION_25_32();
    return static MLModel.compile(_:)(v15);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  void *v8 = v7;
  *(void *)(v5 + 128) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 136) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[17];
  return v1(v2);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_11();
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v1();
}

#error "22724FFBC: call analysis failed (funcsize=72)"

uint64_t specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for AnyColumn();
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DataFrame();
  v5[16] = v7;
  v5[17] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v5[18] = v8;
  MLLinearRegressor.Model.applied(to:eventHandler:)(v8);
  v5[19] = 0;
  return MEMORY[0x270FA2498](specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:), 0, 0);
}

uint64_t specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:)()
{
  uint64_t v1 = v0[14];
  MEMORY[0x22A672220](v0[10], v0[11]);
  AnyColumn.convertedToDoubles()();
  uint64_t v3 = v2;
  uint64_t v4 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_24_5();
  v4();
  if (v3)
  {
    MEMORY[0x22A672220](v0[10], v0[11]);
    AnyColumn.convertedToDoubles()();
    uint64_t v6 = v5;
    OUTLINED_FUNCTION_24_5();
    v4();
    if (v6)
    {
      uint64_t v7 = v0[17];
      uint64_t v8 = v0[8];
      uint64_t v29 = v0[12];
      swift_bridgeObjectRelease();
      v0[3] = v3;
      v0[4] = v6;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<Double>);
      lazy protocol witness table accessor for type Double and conformance Double();
      lazy protocol witness table accessor for type ContiguousArray<Double> and conformance ContiguousArray<A>();
      OUTLINED_FUNCTION_48_12();
      maximumAbsoluteError<A, B, C>(_:_:)();
      uint64_t v9 = v0[2];
      v0[6] = v3;
      v0[7] = v6;
      OUTLINED_FUNCTION_48_12();
      rootMeanSquaredError<A, B, C>(_:_:)();
      outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v29, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
      uint64_t v10 = *(void (**)(void))(v7 + 8);
      OUTLINED_FUNCTION_38_0();
      v10();
      OUTLINED_FUNCTION_38_0();
      v10();
      swift_release();
      swift_release();
      uint64_t v11 = v0[5];
      *(void *)uint64_t v8 = v9;
      *(void *)(v8 + 8) = v11;
      *(unsigned char *)(v8 + 16) = 0;
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_12();
      goto LABEL_7;
    }
    uint64_t v21 = v0[17];
    uint64_t v22 = v0[11];
    uint64_t v31 = v0[12];
    uint64_t v23 = v0[10];
    swift_release();
    OUTLINED_FUNCTION_61_9();
    OUTLINED_FUNCTION_49_10((uint64_t)"Regression target values must be numeric but got ");
    MEMORY[0x22A672220](v23, v22);
    swift_bridgeObjectRelease();
    AnyColumn.wrappedElementType.getter();
    OUTLINED_FUNCTION_24_5();
    v4();
    v24._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 46;
    v25._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v26 = swift_allocError();
    OUTLINED_FUNCTION_33_22(v26, v27);
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v31, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
    uint64_t v20 = *(void (**)(void))(v21 + 8);
  }
  else
  {
    uint64_t v13 = v0[17];
    uint64_t v30 = v0[12];
    uint64_t v14 = v0[10];
    uint64_t v15 = v0[11];
    OUTLINED_FUNCTION_61_9();
    OUTLINED_FUNCTION_49_10((uint64_t)"Regression target values must be numeric but got ");
    MEMORY[0x22A672220](v14, v15);
    swift_bridgeObjectRelease();
    AnyColumn.wrappedElementType.getter();
    OUTLINED_FUNCTION_24_5();
    v4();
    v16._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 46;
    v17._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v18 = swift_allocError();
    OUTLINED_FUNCTION_33_22(v18, v19);
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v30, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
    uint64_t v20 = *(void (**)(void))(v13 + 8);
  }
  OUTLINED_FUNCTION_137();
  v20();
  ((void (*)(void, void))v20)(v0[18], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
LABEL_7:
  return v12();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_60_0();
  outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(*(void *)(v0 + 96), (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
  OUTLINED_FUNCTION_11_3();
  v1();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

void MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v150 = v1;
  uint64_t v3 = v2;
  uint64_t v147 = (char *)v4;
  char v148 = v5;
  uint64_t v146 = (void *)v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for MLLinearRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v128 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v129 = v14;
  uint64_t v130 = (uint64_t)v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v157 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_45_2(v17);
  uint64_t v127 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_106();
  uint64_t v131 = v20;
  uint64_t v21 = type metadata accessor for MLLinearRegressor.Model();
  uint64_t v22 = OUTLINED_FUNCTION_1(v21);
  uint64_t v132 = v23;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_45_2(v24);
  uint64_t v133 = v25;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_106();
  uint64_t v144 = v27;
  uint64_t v143 = type metadata accessor for BaseLinearRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v142 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v30);
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v139 = v31;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)v123 - v34;
  uint64_t v137 = type metadata accessor for MLLinearRegressor.Regressor();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_32_26(v37, v123[0]);
  type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_15();
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)v123 - v42;
  uint64_t v44 = v10 + *(int *)(v11 + 36);
  *(void *)uint64_t v44 = 0;
  *(void *)(v44 + 8) = 0;
  uint64_t v149 = v44;
  *(unsigned char *)(v44 + 16) = 0;
  uint64_t v135 = v11;
  uint64_t v45 = *(int *)(v11 + 40);
  uint64_t v136 = v10;
  uint64_t v46 = v10 + v45;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v47 = swift_allocError();
  *(void *)uint64_t v48 = 0xD0000000000000C0;
  *(void *)(v48 + 8) = 0x80000002272D4C40;
  *(_OWORD *)(v48 + 16) = 0u;
  *(_OWORD *)(v48 + 32) = 0u;
  *(unsigned char *)(v48 + 48) = 0;
  *(void *)uint64_t v46 = v47;
  *(void *)(v46 + 8) = 0;
  *(unsigned char *)(v46 + 16) = 1;
  uint64_t v152 = v3;
  outlined init with copy of URL?(v3, (uint64_t)&v153, &demangling cache variable for type metadata for Any?);
  if (v154)
  {
    uint64_t v49 = &v43[*(int *)(v39 + 48)];
    outlined init with take of Any(&v153, &v155);
    swift_dynamicCast();
    uint64_t v50 = OUTLINED_FUNCTION_45_12();
    uint64_t v51 = v150;
    MLLinearRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v50, v52, v8);
    if (v51)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLLinearRegressor.ModelParameters(v152);
      OUTLINED_FUNCTION_16_9();
      v53();
      outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
      uint64_t v65 = v149;
    }
    else
    {
      uint64_t v150 = v49;
      uint64_t v124 = v39;
      outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
      uint64_t v54 = (uint64_t)v146;
      uint64_t v55 = v148;
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v43, (uint64_t)v146, v148, (uint64_t)v147);
      v123[1] = v8;
      uint64_t v57 = v56;
      swift_bridgeObjectRelease();
      uint64_t v147 = v43;
      outlined init with copy of MLLinearRegressor.ModelParameters(v152, (uint64_t)&v155);
      char v58 = v145;
      uint64_t *v145 = v54;
      v58[1] = (uint64_t)v55;
      v58[2] = v57;
      outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v155, (uint64_t)(v58 + 3));
      outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v155, (uint64_t)&v153);
      lazy protocol witness table accessor for type Double and conformance Double();
      swift_bridgeObjectRetain();
      v123[0] = v57;
      swift_bridgeObjectRetain();
      LinearRegressor.Configuration.init()();
      uint64_t v59 = v140;
      LinearRegressor.Configuration.maximumIterations.setter();
      LinearRegressor.Configuration.l1Penalty.setter();
      LinearRegressor.Configuration.l2Penalty.setter();
      LinearRegressor.Configuration.stepSize.setter();
      LinearRegressor.Configuration.convergenceThreshold.setter();
      outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)&v153);
      uint64_t v60 = v139;
      OUTLINED_FUNCTION_18_3();
      v61();
      uint64_t v62 = v55;
      uint64_t v63 = v141;
      uint64_t v64 = (uint64_t)v147;
      BaseLinearRegressor.init(configuration:)();
      outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)&v155);
      (*((void (**)(char *, uint64_t))v60 + 1))(v35, v59);
      (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))((char *)v145 + *(int *)(v137 + 28), v63, v143);
      MLLinearRegressor.Regressor.fitted(to:validateOn:eventHandler:)(v64, v150, 0, 0, v144);
      unint64_t v66 = v62;
      uint64_t v67 = v123[0];
      unsigned __int8 v68 = AnalyticsReporter.init()();
      uint64_t v65 = v149;
      if ((v68 & 1) == 0)
      {
        Swift::Int v69 = DataFrame.shape.getter();
        v70._uint64_t object = (void *)0x80000002272D4D30;
        v70._uint64_t countAndFlagsBits = 0xD000000000000015;
        AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_linearRegressor, v70, v69);
      }
      uint64_t v71 = (int *)v135;
      uint64_t v72 = v136;
      uint64_t v73 = (void *)(v136 + *(int *)(v135 + 24));
      *uint64_t v73 = v146;
      v73[1] = v66;
      uint64_t v146 = v73;
      char v148 = (void *)(v72 + v71[8]);
      outlined init with copy of MLLinearRegressor.ModelParameters(v152, (uint64_t)v148);
      uint64_t v143 = v71[7];
      *(void *)(v72 + v143) = v67;
      uint64_t v74 = v134;
      outlined init with copy of MLLinearRegressor.Model((uint64_t)v144, v134, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
      unint64_t v75 = (*(unsigned __int8 *)(v132 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
      uint64_t v76 = swift_allocObject();
      outlined init with take of MLLinearRegressor.Model(v74, v76 + v75, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
      specialized blockAwait<A>(_:)();
      uint64_t v78 = v77;
      swift_release();
      uint64_t v141 = v71[5];
      uint64_t v79 = v136;
      *(void *)(v136 + v141) = v78;
      outlined init with copy of MLLinearRegressor.Model((uint64_t)v144, v79, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
      uint64_t v80 = *(void (**)(void))(v157 + 16);
      uint64_t v81 = v151;
      uint64_t v140 = v157 + 16;
      uint64_t v139 = v80;
      OUTLINED_FUNCTION_18_3();
      v82();
      uint64_t v83 = v79;
      uint64_t v84 = v130;
      outlined init with copy of MLLinearRegressor.Model(v83, v130, (void (*)(void))type metadata accessor for MLLinearRegressor);
      uint64_t v85 = *(unsigned __int8 *)(v157 + 80);
      uint64_t v86 = (v85 + 16) & ~v85;
      uint64_t v87 = *(unsigned __int8 *)(v128 + 80);
      uint64_t v88 = (v127 + v87 + v86) & ~v87;
      uint64_t v137 = v88 + v129;
      uint64_t v135 = v85 | v87 | 7;
      uint64_t v89 = swift_allocObject();
      uint64_t v138 = v86;
      uint64_t v90 = v89 + v86;
      uint64_t v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 32);
      v91(v90, v131, v81);
      outlined init with take of MLLinearRegressor.Model(v84, v89 + v88, (void (*)(void))type metadata accessor for MLLinearRegressor);
      specialized blockAwait<A>(_:)();
      uint64_t v142 = 0;
      uint64_t v133 = v91;
      uint64_t v134 = v157 + 32;
      swift_release();
      long long v94 = v155;
      char v95 = v156;
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v65, *(void *)(v65 + 8), *(unsigned char *)(v65 + 16));
      *(_OWORD *)uint64_t v65 = v94;
      *(unsigned char *)(v65 + 16) = v95;
      uint64_t v96 = v151;
      uint64_t v97 = v126 + *(int *)(v124 + 48);
      uint64_t v98 = (uint64_t)v147;
      uint64_t v99 = v139;
      OUTLINED_FUNCTION_18_3();
      v99();
      outlined init with copy of URL?((uint64_t)v150, v97, &demangling cache variable for type metadata for DataFrame?);
      if (__swift_getEnumTagSinglePayload(v97, 1, v96) == 1)
      {
        outlined destroy of MLLinearRegressor.ModelParameters(v152);
        uint64_t v100 = *(uint64_t (**)(void))(v157 + 8);
        OUTLINED_FUNCTION_38_0();
        uint64_t v101 = v100();
        uint64_t v102 = OUTLINED_FUNCTION_57_10(v101, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
        OUTLINED_FUNCTION_46_14(v102, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
        outlined destroy of URL?(v98, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        outlined destroy of URL?(v97, &demangling cache variable for type metadata for DataFrame?);
        OUTLINED_FUNCTION_38_0();
        v100();
        goto LABEL_6;
      }
      uint64_t v103 = v96;
      uint64_t v104 = v96;
      uint64_t v105 = (void (*)(char *, uint64_t, uint64_t))v133;
      v133(v125, v97, v103);
      OUTLINED_FUNCTION_27_11();
      uint64_t v150 = (char *)(v157 + 8);
      OUTLINED_FUNCTION_38_0();
      v106();
      uint64_t v107 = v88;
      uint64_t v108 = v131;
      OUTLINED_FUNCTION_18_3();
      v109();
      uint64_t v110 = v130;
      outlined init with copy of MLLinearRegressor.Model(v136, v130, (void (*)(void))type metadata accessor for MLLinearRegressor);
      uint64_t v111 = (void (*)(void))swift_allocObject();
      v105((char *)v111 + v138, v108, v104);
      outlined init with take of MLLinearRegressor.Model(v110, (uint64_t)v111 + v107, (void (*)(void))type metadata accessor for MLLinearRegressor);
      uint64_t v112 = v142;
      specialized blockAwait<A>(_:)();
      if (!v112)
      {
        swift_release();
        outlined destroy of MLLinearRegressor.ModelParameters(v152);
        OUTLINED_FUNCTION_41_17();
        v111();
        uint64_t v117 = OUTLINED_FUNCTION_55_10();
        uint64_t v118 = ((uint64_t (*)(uint64_t))v111)(v117);
        uint64_t v119 = OUTLINED_FUNCTION_57_10(v118, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
        uint64_t v120 = OUTLINED_FUNCTION_46_14(v119, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
        OUTLINED_FUNCTION_30_19(v120, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        long long v121 = v155;
        char v122 = v156;
        outlined consume of Result<_RegressorMetrics, Error>(*(id *)v46, *(void *)(v46 + 8), *(unsigned char *)(v46 + 16));
        *(_OWORD *)uint64_t v46 = v121;
        *(unsigned char *)(v46 + 16) = v122;
        goto LABEL_6;
      }
      swift_release();
      outlined destroy of MLLinearRegressor.ModelParameters(v152);
      OUTLINED_FUNCTION_41_17();
      v111();
      uint64_t v113 = OUTLINED_FUNCTION_55_10();
      uint64_t v114 = ((uint64_t (*)(uint64_t))v111)(v113);
      uint64_t v115 = OUTLINED_FUNCTION_57_10(v114, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
      uint64_t v116 = OUTLINED_FUNCTION_46_14(v115, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
      OUTLINED_FUNCTION_30_19(v116, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      uint64_t v92 = v136;
      outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v136, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);

      uint64_t v93 = (uint64_t)v148;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLLinearRegressor.ModelParameters(v93);
    }
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v65, *(void *)(v65 + 8), *(unsigned char *)(v65 + 16));
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v46, *(void *)(v46 + 8), *(unsigned char *)(v46 + 16));
LABEL_6:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  __break(1u);
}

uint64_t type metadata accessor for MLLinearRegressor()
{
  uint64_t result = type metadata singleton initialization cache for MLLinearRegressor;
  if (!type metadata singleton initialization cache for MLLinearRegressor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id MLLinearRegressor.trainingMetrics.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_66_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_45_0(*(int *)(v0 + 36));

  return outlined copy of Result<_RegressorMetrics, Error>(v1, v2, v3);
}

id MLLinearRegressor.validationMetrics.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_66_4();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_45_0(*(int *)(v0 + 40));

  return outlined copy of Result<_RegressorMetrics, Error>(v1, v2, v3);
}

uint64_t MLLinearRegressor.targetColumn.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MLLinearRegressor() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLLinearRegressor.featureColumns.getter()
{
  type metadata accessor for MLLinearRegressor();

  return swift_bridgeObjectRetain();
}

id MLLinearRegressor.model.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLLinearRegressor() + 20));

  return v1;
}

void key path setter for MLLinearRegressor.model : MLLinearRegressor(id *a1)
{
  id v1 = *a1;
  MLLinearRegressor.model.setter();
}

void MLLinearRegressor.model.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_69_6() + 20);

  *(void *)(v1 + v2) = v0;
}

uint64_t MLLinearRegressor.model.modify(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLLinearRegressor() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  id v5 = v4;
  return OUTLINED_FUNCTION_27_11();
}

uint64_t MLLinearRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for MLLinearRegressor() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MLLinearRegressor.targetColumn.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLinearRegressor.featureColumns.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_69_6() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*MLLinearRegressor.featureColumns.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLinearRegressor.modelParameters.getter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_66_4() + 32);

  return outlined init with copy of MLLinearRegressor.ModelParameters(v2, v0);
}

uint64_t static MLLinearRegressor._defaultSessionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLLinearRegressor._defaultSessionParameters);
  return outlined init with copy of MLLinearRegressor.Model(v3, a1, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_34();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = (int *)type metadata accessor for MLLinearRegressor();
  *(void *)(v0 + 64) = v6;
  uint64_t v7 = v6[9];
  *(_DWORD *)(v0 + 96) = v7;
  uint64_t v8 = v5 + v7;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 0;
  *(_DWORD *)(v0 + 100) = v6[10];
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v9 = swift_allocError();
  OUTLINED_FUNCTION_27_26(v9, v10, 0xD0000000000000C0);
  outlined init with copy of MLLinearRegressor.Model(v3, v5, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
  uint64_t v11 = v6[7];
  *(_DWORD *)(v0 + 104) = v11;
  *(void *)(v5 + v11) = v2;
  uint64_t v12 = v6[6];
  *(_DWORD *)(v0 + 108) = v12;
  uint64_t v13 = (void *)(v5 + v12);
  void *v13 = v4;
  v13[1] = v1;
  uint64_t v16 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                              + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v14;
  void *v14 = v0;
  v14[1] = MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:);
  return v16();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  void *v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_60_0();
  uint64_t v1 = v0[11];
  uint64_t v2 = (const void *)v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[2];
  outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v0[3], (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
  *(void *)(v4 + *(int *)(v3 + 20)) = v1;
  memcpy((void *)(v4 + *(int *)(v3 + 32)), v2, 0x49uLL);
  OUTLINED_FUNCTION_12();
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_34();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = v1 + *(int *)(v0 + 96);
  uint64_t v4 = v1 + *(int *)(v0 + 100);
  outlined destroy of MLLinearRegressor.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v2, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
  outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v4();
}

uint64_t closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_2();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_6();
  void *v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v11, v12, v13);
  }
}

uint64_t partial apply for closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MLLinearRegressor.Model();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  *uint64_t v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v1);
}

uint64_t closure #1 in MLLinearRegressor.computeMetrics(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MLLinearRegressor.Model();
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DataFrame();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in MLLinearRegressor.computeMetrics(on:), 0, 0);
}

uint64_t closure #1 in MLLinearRegressor.computeMetrics(on:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[4];
  OUTLINED_FUNCTION_18_3();
  v3();
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(type metadata accessor for MLLinearRegressor() + 24));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  outlined init with copy of MLLinearRegressor.Model(v2, v1, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:)
                                                                            + async function pointer to specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:));
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in MLLinearRegressor.computeMetrics(on:);
  uint64_t v8 = v0[8];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[2];
  return v12(v10, v8, v5, v6, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_14();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_11();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in MLLinearRegressor.computeMetrics(on:)()
{
  OUTLINED_FUNCTION_60_0();
  uint64_t v0 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_1(v0);
  uint64_t v1 = type metadata accessor for MLLinearRegressor();
  OUTLINED_FUNCTION_39_0(v1);
  OUTLINED_FUNCTION_24_33();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_7_1(v2);
  *uint64_t v3 = v4;
  v3[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  uint64_t v5 = OUTLINED_FUNCTION_25_16();
  return closure #1 in MLLinearRegressor.computeMetrics(on:)(v5, v6, v7);
}

uint64_t MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for DataFrame();
  uint64_t v8 = OUTLINED_FUNCTION_17(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v11 = v10 - v9;
  LOBYTE(v10) = *((unsigned char *)a1 + 8);
  uint64_t v13 = *a1;
  char v14 = v10;
  DataFrame.init(_:)((uint64_t)&v13, v11);
  outlined init with copy of MLLinearRegressor.ModelParameters(a5, (uint64_t)&v13);
  MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)();
  return outlined destroy of MLLinearRegressor.ModelParameters(a5);
}

void MLLinearRegressor.init(checkpoint:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v71 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for MLLinearRegressor.Model();
  uint64_t v7 = OUTLINED_FUNCTION_1(v6);
  uint64_t v63 = v8;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_45_2(v9);
  uint64_t v64 = v10;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_106();
  uint64_t v72 = v12;
  uint64_t v70 = type metadata accessor for BaseLinearRegressor();
  OUTLINED_FUNCTION_0();
  uint64_t v69 = v13;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_32_26(v15, v59);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  OUTLINED_FUNCTION_0();
  uint64_t v67 = v16;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v18);
  uint64_t v74 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v59 - v21;
  uint64_t v66 = type metadata accessor for MLLinearRegressor.Regressor();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = OUTLINED_FUNCTION_40_16();
  uint64_t v25 = v5 + *(int *)(v24 + 36);
  *(void *)uint64_t v25 = 0;
  *(void *)(v25 + 8) = 0;
  *(unsigned char *)(v25 + 16) = 0;
  uint64_t v61 = (int *)v24;
  uint64_t v26 = *(int *)(v24 + 40);
  uint64_t v62 = v5;
  uint64_t v27 = v5 + v26;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v28 = swift_allocError();
  OUTLINED_FUNCTION_27_26(v28, v29, 0xD0000000000000C0);
  uint64_t v82 = v3;
  switch(*(unsigned char *)(v3 + *(int *)(type metadata accessor for MLCheckpoint() + 20)))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v30)
      {
LABEL_4:
        OUTLINED_FUNCTION_52_12();
        uint64_t v32 = *(void *)(v31 - 256);
        swift_storeEnumTagMultiPayload();
        long long v76 = 0u;
        long long v77 = 0u;
        uint64_t v78 = 10;
        long long v60 = xmmword_2272CC8C0;
        long long v79 = xmmword_2272CC8C0;
        long long v59 = xmmword_2272CC8D0;
        long long v80 = xmmword_2272CC8D0;
        char v81 = 1;
        uint64_t v33 = v73;
        outlined init with copy of MLLinearRegressor.Model((uint64_t)v22, v73, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
        v75[3] = v32;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v75);
        outlined init with take of MLLinearRegressor.Model(v33, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
        outlined assign with take of Any?((uint64_t)v75, (uint64_t)&v76);
        outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v22, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
        *(void *)uint64_t v1 = 0;
        *((void *)v1 + 1) = 0xE000000000000000;
        *((void *)v1 + 2) = MEMORY[0x263F8EE78];
        outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v76, (uint64_t)(v1 + 24));
        outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v76, (uint64_t)v75);
        lazy protocol witness table accessor for type Double and conformance Double();
        LinearRegressor.Configuration.init()();
        LinearRegressor.Configuration.maximumIterations.setter();
        LinearRegressor.Configuration.l1Penalty.setter();
        LinearRegressor.Configuration.l2Penalty.setter();
        LinearRegressor.Configuration.stepSize.setter();
        LinearRegressor.Configuration.convergenceThreshold.setter();
        outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)v75);
        OUTLINED_FUNCTION_18_3();
        v35();
        uint64_t v36 = v68;
        BaseLinearRegressor.init(configuration:)();
        outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)&v76);
        OUTLINED_FUNCTION_11_3();
        v37();
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(&v1[*(int *)(v66 + 28)], v36, v70);
        lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor();
        uint64_t v38 = v72;
        uint64_t v39 = v71;
        UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
        if (!v39)
        {
          uint64_t v41 = v65;
          outlined init with copy of MLLinearRegressor.Model(v38, v65, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
          unint64_t v42 = (*(unsigned __int8 *)(v63 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
          uint64_t v43 = swift_allocObject();
          outlined init with take of MLLinearRegressor.Model(v41, v43 + v42, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
          specialized blockAwait<A>(_:)();
          uint64_t v45 = v44;
          swift_release();
          uint64_t v48 = v61;
          uint64_t v49 = v62;
          *(void *)(v62 + v61[5]) = v45;
          uint64_t v50 = OUTLINED_FUNCTION_45_12();
          outlined init with copy of MLLinearRegressor.Model(v50, v51, v52);
          OUTLINED_FUNCTION_52_12();
          uint64_t v54 = *(void *)(v53 - 256);
          swift_storeEnumTagMultiPayload();
          uint64_t v55 = v49 + v48[8];
          *(_OWORD *)uint64_t v55 = 0u;
          *(_OWORD *)(v55 + 16) = 0u;
          *(void *)(v55 + 32) = 10;
          *(_OWORD *)(v55 + 40) = v60;
          *(_OWORD *)(v55 + 56) = v59;
          *(unsigned char *)(v55 + 72) = 1;
          uint64_t v56 = v73;
          outlined init with copy of MLLinearRegressor.Model((uint64_t)v22, v73, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
          *((void *)&v77 + 1) = v54;
          uint64_t v57 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v76);
          outlined init with take of MLLinearRegressor.Model(v56, (uint64_t)v57, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
          outlined assign with take of Any?((uint64_t)&v76, v55);
          outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v22, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
          char v58 = (void *)(v49 + v48[6]);
          void *v58 = 0;
          v58[1] = 0xE000000000000000;
          outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v82, (void (*)(void))type metadata accessor for MLCheckpoint);
          outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v38, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
          outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v1, (void (*)(void))type metadata accessor for MLLinearRegressor.Regressor);
          *(void *)(v49 + v48[7]) = MEMORY[0x263F8EE78];
          goto LABEL_9;
        }
        outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v82, (void (*)(void))type metadata accessor for MLCheckpoint);
        uint64_t v46 = type metadata accessor for MLLinearRegressor.Regressor;
        uint64_t v47 = (uint64_t)v1;
      }
      else
      {
        swift_allocError();
        *(void *)uint64_t v40 = 0xD00000000000003BLL;
        *(void *)(v40 + 8) = 0x80000002272DACA0;
        *(_OWORD *)(v40 + 16) = 0u;
        *(_OWORD *)(v40 + 32) = 0u;
        *(unsigned char *)(v40 + 48) = 0;
        swift_willThrow();
        uint64_t v46 = type metadata accessor for MLCheckpoint;
        uint64_t v47 = v82;
      }
      outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v47, (void (*)(void))v46);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v25, *(void *)(v25 + 8), *(unsigned char *)(v25 + 16));
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v27, *(void *)(v27 + 8), *(unsigned char *)(v27 + 16));
LABEL_9:
      OUTLINED_FUNCTION_8_1();
      return;
  }
}

uint64_t closure #1 in MLLinearRegressor.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLSoundClassifier.init(checkpoint:);
  return v4();
}

void static MLLinearRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = v4 - v3;
  char v6 = *(unsigned char *)(v1 + 8);
  id v8 = *(id *)v1;
  char v9 = v6;
  outlined copy of Result<_DataTable, Error>(v8, v6);
  DataFrame.init(_:)((uint64_t)&v8, v5);
  static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_11_3();
  v7();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLinearRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;

  static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLinearRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLJob.init(_:)();
  }
}

void static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_15();
  char v3 = *(unsigned char *)(v1 + 8);
  id v5 = *(id *)v1;
  char v6 = v3;
  outlined copy of Result<_DataTable, Error>(v5, v3);
  DataFrame.init(_:)((uint64_t)&v5, v0);
  static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_27_11();
  OUTLINED_FUNCTION_137();
  v4();
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  void v41[4];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  long long v49;
  uint64_t v50;
  _UNKNOWN **v51;
  long long v52;
  uint64_t v53;
  uint64_t v54;

  OUTLINED_FUNCTION_9_0();
  uint64_t v54 = v2;
  uint64_t v4 = v3;
  uint64_t v47 = v5;
  uint64_t v48 = v6;
  uint64_t v46 = v7;
  char v9 = v8;
  uint64_t v10 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v11 = OUTLINED_FUNCTION_17(v10);
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_49();
  uint64_t v43 = v12;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_106();
  uint64_t v45 = v14;
  type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_15();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_8();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)v41 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)v41 - v24;
  uint64_t v44 = v4;
  outlined init with copy of URL?(v4, (uint64_t)&v52, &demangling cache variable for type metadata for Any?);
  if (v53)
  {
    uint64_t v26 = (uint64_t)&v25[*(int *)(v16 + 48)];
    outlined init with take of Any(&v52, &v49);
    swift_dynamicCast();
    MLLinearRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v25, v26, v9);
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v0, (void (*)(void))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
    if (!v1)
    {
      uint64_t v27 = (uint64_t)&v23[*(int *)(v16 + 48)];
      uint64_t v28 = type metadata accessor for DataFrame();
      v41[0] = v23;
      uint64_t v29 = v20;
      char v30 = v28;
      OUTLINED_FUNCTION_0();
      v41[1] = v31;
      uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 16);
      v33(v34, v25, v30);
      unint64_t v42 = v27;
      outlined init with copy of URL?(v26, v27, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v35 = (uint64_t)&v29[*(int *)(v16 + 48)];
      void v41[2] = v29;
      v41[3] = v30;
      v33((uint64_t)v29, v25, v30);
      outlined init with copy of URL?(v26, v35, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLLinearRegressor.ModelParameters(v44, (uint64_t)&v49);
      outlined init with copy of MLLinearRegressor.Model(v54, v45, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      uint64_t v36 = type metadata accessor for LinearRegressorTrainingSessionDelegate();
      OUTLINED_FUNCTION_31_0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LinearRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:parameters:sessionParameters:)();
      uint64_t v38 = v37;
      OUTLINED_FUNCTION_16_9();
      v39();
      outlined destroy of URL?(v42, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v50 = v36;
      uint64_t v51 = &protocol witness table for LinearRegressorTrainingSessionDelegate;
      *(void *)&uint64_t v49 = v38;
      uint64_t v40 = v43;
      outlined init with copy of MLLinearRegressor.Model(v54, v43, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>);
      OUTLINED_FUNCTION_31_0();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v49, v40, 6);
      outlined destroy of URL?((uint64_t)v25, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_8_1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static MLLinearRegressor.resume(_:)()
{
  return specialized MLJob.init(_:)();
}

void static MLLinearRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLTrainingSessionParameters();
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v13[-1] - v8;
  outlined init with copy of MLLinearRegressor.Model(a1, (uint64_t)&v13[-1] - v8, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
  uint64_t v10 = type metadata accessor for LinearRegressorTrainingSessionDelegate();
  OUTLINED_FUNCTION_31_0();
  uint64_t v11 = LinearRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v9);
  if (!v1)
  {
    v13[3] = v10;
    v13[4] = &protocol witness table for LinearRegressorTrainingSessionDelegate;
    v13[0] = v11;
    outlined init with copy of MLLinearRegressor.Model(a1, (uint64_t)v7, (void (*)(void))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>);
    OUTLINED_FUNCTION_31_0();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v13, (uint64_t)v7, 6);
  }
}

uint64_t closure #1 in closure #1 in static MLLinearRegressor.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v14 = OUTLINED_FUNCTION_17(v13);
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  if (a2)
  {
    *uint64_t v12 = a1;
    swift_storeEnumTagMultiPayload();
    id v22 = a1;
    a4(v12);
    return outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for LinearRegressorTrainingSessionDelegate();
    swift_dynamicCast();
    uint64_t v18 = v23;
    uint64_t v19 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a4;
    void v20[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:), (uint64_t)v20);
    return swift_release();
  }
}

uint64_t closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  v6[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized Result<>.init(catching:)
                             + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:);
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_6();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_11();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  return v2();
}

uint64_t MLLinearRegressor.init(delegate:)()
{
  OUTLINED_FUNCTION_11();
  v0[28] = v1;
  v0[29] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  OUTLINED_FUNCTION_17(v3);
  v0[30] = OUTLINED_FUNCTION_5();
  uint64_t v4 = type metadata accessor for MLLinearRegressor();
  v0[31] = v4;
  OUTLINED_FUNCTION_17(v4);
  v0[32] = OUTLINED_FUNCTION_5();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  OUTLINED_FUNCTION_17(v5);
  v0[33] = OUTLINED_FUNCTION_5();
  uint64_t v6 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  v0[34] = v6;
  OUTLINED_FUNCTION_17(v6);
  v0[35] = OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_34();
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[29] + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  swift_beginAccess();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  uint64_t result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = (int *)v0[34];
  uint64_t v6 = v0[35];
  uint64_t v8 = v0[29];
  uint64_t v7 = v0[30];
  outlined init with take of MLLinearRegressor.Model(v0[33], v6, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
  outlined init with copy of MLLinearRegressor.ModelParameters(v6 + v5[8], (uint64_t)(v0 + 2));
  uint64_t v9 = v5[7];
  uint64_t v10 = (uint64_t *)(v6 + v5[6]);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = *(void *)(v6 + v9);
  uint64_t v14 = v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
  swift_beginAccess();
  outlined init with copy of URL?(v14, v7, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
  uint64_t v15 = type metadata accessor for MLLinearRegressor.Model();
  uint64_t result = __swift_getEnumTagSinglePayload(v7, 1, v15);
  if (result == 1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[36] = v16;
  *uint64_t v16 = v0;
  v16[1] = MLLinearRegressor.init(delegate:);
  uint64_t v17 = v0[32];
  uint64_t v18 = v0[30];
  return MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:)(v17, v18, v12, v11, v13, (uint64_t)(v0 + 12));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_6();
  *uint64_t v5 = v4;
  *(void *)(v6 + 296) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_14();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v20;

  OUTLINED_FUNCTION_34();
  uint64_t v1 = v0[29];
  uint64_t result = outlined init with take of MLLinearRegressor.Model(v0[32], v0[28], (void (*)(void))type metadata accessor for MLLinearRegressor);
  uint64_t v3 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics;
  uint64_t v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v4 == 255)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[35];
    uint64_t v6 = v0[31];
    uint64_t v8 = v0[28];
    uint64_t v7 = v0[29];
    uint64_t v9 = v4 & 1;
    uint64_t v11 = *(id *)v3;
    uint64_t v10 = *(void *)(v3 + 8);
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v3, v10, v4 & 1);
    outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)(v0 + 2));
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v5, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
    uint64_t v12 = v8 + *(int *)(v6 + 36);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    *(void *)uint64_t v12 = v11;
    *(void *)(v12 + 8) = v10;
    *(unsigned char *)(v12 + 16) = v9;
    uint64_t v14 = *(void *)(v7 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
    uint64_t v13 = *(void *)(v7 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
    uint64_t v15 = *(unsigned __int8 *)(v7
                             + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics
                             + 16);
    uint64_t v16 = (void *)OUTLINED_FUNCTION_27_11();
    outlined copy of MLRegressorMetrics?(v16, v17, v15);
    swift_release();
    if (v15 != 255)
    {
      uint64_t v18 = v0[28] + *(int *)(v0[31] + 40);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v18, *(void *)(v18 + 8), *(unsigned char *)(v18 + 16));
      *(void *)uint64_t v18 = v14;
      *(void *)(v18 + 8) = v13;
      *(unsigned char *)(v18 + 16) = v15 & 1;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12();
    return v19();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_72_5();
  OUTLINED_FUNCTION_25();
  uint64_t v1 = *(void *)(v0 + 280);
  swift_release();
  outlined destroy of MLLinearRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v1, (void (*)(void))type metadata accessor for MLLinearRegressor.PersistentParameters);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_25_32();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

void MLLinearRegressor.predictions(from:)()
{
  uint64_t v2 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_40_16();
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v7, v8);
  if (!v9)
  {
    OUTLINED_FUNCTION_14();
    MLLinearRegressor.Model.applied(to:eventHandler:)(v10);
    MEMORY[0x22A672220](*(void *)(v0 + *(int *)(v6 + 24)), *(void *)(v0 + *(int *)(v6 + 24) + 8));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
}

uint64_t MLLinearRegressor.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v5);
  Swift::OpaquePointer v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnyColumn();
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_3_0();
  uint64_t v12 = v11 - v10;
  char v13 = *(unsigned char *)(a1 + 8);
  id v16 = *(id *)a1;
  char v17 = v13;
  outlined copy of Result<_DataTable, Error>(v16, v13);
  DataFrame.init(_:)((uint64_t)&v16, (uint64_t)v7);
  MLLinearRegressor.predictions(from:)();
  OUTLINED_FUNCTION_38_0();
  if (v2) {
    return v14();
  }
  v14();
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v12, 1, a2);
}

void MLLinearRegressor.evaluation(on:)()
{
  uint64_t v2 = OUTLINED_FUNCTION_66_4();
  OUTLINED_FUNCTION_0();
  uint64_t v32 = v3;
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v6);
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v33 = v8;
  uint64_t v34 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_39_1();
  DataFrame.validateContainsColumns(_:context:)(v12, v13);
  if (v14) {
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  uint64_t v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16._rawValue = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_2272CB370;
  char v17 = (void *)(v1 + *(int *)(v2 + 24));
  uint64_t v18 = v17[1];
  *((void *)v16._rawValue + 4) = *v17;
  *((void *)v16._rawValue + 5) = v18;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v19._uint64_t object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)(v16, v19);
  swift_setDeallocating();
  uint64_t v20 = (uint64_t)v31;
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v14)
  {
LABEL_4:
    *(void *)uint64_t v0 = v14;
    *(void *)(v0 + 8) = 0;
    *(unsigned char *)(v0 + 16) = 1;
  }
  else
  {
    uint64_t v21 = v33;
    uint64_t v22 = v34;
    OUTLINED_FUNCTION_18_3();
    v23();
    outlined init with copy of MLLinearRegressor.Model(v1, v20, (void (*)(void))type metadata accessor for MLLinearRegressor);
    unint64_t v24 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v25 = *(unsigned __int8 *)(v32 + 80);
    unint64_t v26 = v10 + v25 + v24;
    uint64_t v27 = v20;
    unint64_t v28 = v26 & ~v25;
    uint64_t v29 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v29 + v24, v11, v22);
    outlined init with take of MLLinearRegressor.Model(v27, v29 + v28, (void (*)(void))type metadata accessor for MLLinearRegressor);
    specialized blockAwait<A>(_:)();
    swift_release();
  }
}

uint64_t MLLinearRegressor.evaluation(on:)(uint64_t a1)
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = v4 - v3;
  char v6 = *(unsigned char *)(a1 + 8);
  id v9 = *(id *)a1;
  char v10 = v6;
  outlined copy of Result<_DataTable, Error>(v9, v6);
  DataFrame.init(_:)((uint64_t)&v9, v5);
  MLLinearRegressor.evaluation(on:)();
  OUTLINED_FUNCTION_45_12();
  OUTLINED_FUNCTION_137();
  return v7();
}

void MLLinearRegressor.write(to:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = v3;
  uint64_t v36 = v5;
  uint64_t v6 = type metadata accessor for MLLinearRegressor.Model();
  uint64_t v7 = OUTLINED_FUNCTION_17(v6);
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  uint64_t v33 = v8;
  type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_15();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_10();
  uint64_t v32 = v4[1];
  unint64_t v11 = v4[3];
  unint64_t v34 = v4[2];
  uint64_t v35 = *v4;
  uint64_t v12 = v4[4];
  uint64_t v13 = v4[5];
  uint64_t v14 = v4[6];
  unint64_t v15 = v4[7];
  uint64_t v16 = v4[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v36, 0x65527261656E694CLL, (void *)0xEF726F7373657267, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v0);
  if (!v2)
  {
    unint64_t v30 = v15;
    uint64_t v31 = v13;
    outlined init with copy of MLLinearRegressor.Model(v1, v33, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
    if (v32)
    {
      uint64_t v17 = v35;
      uint64_t v18 = v35;
      uint64_t v19 = v32;
      unint64_t v20 = v34;
      unint64_t v21 = v11;
      uint64_t v22 = v12;
      uint64_t v23 = v31;
      uint64_t v24 = v14;
      unint64_t v25 = v30;
    }
    else
    {
      unint64_t v26 = NSFullUserName();
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v27;

      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v16 = 0;
      unint64_t v21 = 0x80000002272D4DC0;
      unint64_t v25 = 0xE100000000000000;
      unint64_t v20 = 0xD000000000000033;
      uint64_t v24 = 49;
      uint64_t v17 = v35;
    }
    v37[0] = v18;
    v37[1] = v19;
    v37[2] = v20;
    v37[3] = v21;
    v37[4] = v22;
    v37[5] = v23;
    v37[6] = v24;
    v37[7] = v25;
    v37[8] = v16;
    outlined copy of MLModelMetadata?(v17, v32);
    specialized CoreMLExportable.export(metadata:)(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v33, (void (*)(void))type metadata accessor for MLLinearRegressor.Model);
    Model.write(to:)();
    OUTLINED_FUNCTION_25_0();
    v28();
    OUTLINED_FUNCTION_25_0();
    v29();
  }
  OUTLINED_FUNCTION_8_1();
}

void MLLinearRegressor.write(toFile:metadata:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_10();
  uint64_t v10 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_3_0();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F06E50], v1);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLLinearRegressor.write(to:metadata:)();
  OUTLINED_FUNCTION_11_3();
  v12();
  OUTLINED_FUNCTION_8_1();
}

unint64_t MLLinearRegressor.description.getter()
{
  uint64_t v1 = type metadata accessor for MLLinearRegressor();
  unint64_t v2 = MLLinearRegressor.ModelParameters.description.getter();
  uint64_t v4 = v3;
  unint64_t v5 = MLRegressorMetrics.description.getter();
  uint64_t v7 = v6;
  char v8 = *(unsigned char *)(v0 + *(int *)(v1 + 40) + 16);
  MLRegressorMetrics.description.getter();
  v9._uint64_t countAndFlagsBits = v2;
  v9._uint64_t object = v4;
  String.append(_:)(v9);
  OUTLINED_FUNCTION_70_7();
  v10._uint64_t countAndFlagsBits = v5;
  v10._uint64_t object = v7;
  String.append(_:)(v10);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    OUTLINED_FUNCTION_70_7();
    v11._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_45_12();
    String.append(_:)(v11);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

NSAttributedString MLLinearRegressor.playgroundDescription.getter@<X0>(NSAttributedString *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v3._uint64_t countAndFlagsBits = MLLinearRegressor.description.getter();
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.Class isa = (Class)v2;
  a1->super.Class isa = result.super.isa;
  return result;
}

uint64_t outlined init with copy of MLLinearRegressor.Model(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  uint64_t v4 = OUTLINED_FUNCTION_111();
  v5(v4);
  return a2;
}

uint64_t objectdestroyTm_6()
{
  type metadata accessor for MLLinearRegressor.Model();
  OUTLINED_FUNCTION_17_32();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v5 = *(void *)(v4 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for BaseLinearRegressorModel();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v6();

  return MEMORY[0x270FA0238](v0, v3 + v5, v2 | 7);
}

uint64_t partial apply for closure #1 in MLLinearRegressor.init(checkpoint:)()
{
  OUTLINED_FUNCTION_11();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MLLinearRegressor.Model();
  OUTLINED_FUNCTION_39_0(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_7_1(v3);
  *uint64_t v4 = v5;
  v4[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in MLLinearRegressor.init(checkpoint:)(v1);
}

uint64_t objectdestroy_3Tm()
{
  type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 + 64);
  type metadata accessor for MLLinearRegressor();
  OUTLINED_FUNCTION_17_32();
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (((v3 + 16) & ~v3) + v5 + v7) & ~v7;
  uint64_t v10 = *(void *)(v9 + 64);
  OUTLINED_FUNCTION_137();
  v11();
  uint64_t v12 = v1 + v8;
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + v8 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for MLLinearRegressor.Model();
  type metadata accessor for BaseLinearRegressorModel();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v13();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v12 + v0[8];
  if (*(void *)(v14 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v14);
  }
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(v12 + v0[9]), *(void *)(v12 + v0[9] + 8), *(unsigned char *)(v12 + v0[9] + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(v12 + v0[10]), *(void *)(v12 + v0[10] + 8), *(unsigned char *)(v12 + v0[10] + 16));

  return MEMORY[0x270FA0238](v1, v8 + v10, v3 | v7 | 7);
}

id sub_2272555D0@<X0>(void *a1@<X8>)
{
  id result = MLLinearRegressor.model.getter();
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLLinearRegressor(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v9 = a2 + 2;
    uint64_t v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    uint64_t v13 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
    uint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for BaseLinearRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[5];
    uint64_t v18 = a3[6];
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v19;
    unint64_t v20 = (void *)((char *)a1 + v18);
    unint64_t v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = a3[7];
    uint64_t v25 = a3[8];
    uint64_t v26 = *(void *)((char *)a2 + v24);
    *unint64_t v20 = v22;
    v20[1] = v23;
    *(void *)((char *)a1 + v24) = v26;
    uint64_t v27 = (char *)a1 + v25;
    unint64_t v28 = (char *)a2 + v25;
    uint64_t v29 = *(void *)((char *)a2 + v25 + 24);
    id v30 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((void *)v27 + 3) = v29;
      (**(void (***)(char *, char *, uint64_t))(v29 - 8))(v27, v28, v29);
    }
    else
    {
      long long v31 = *((_OWORD *)v28 + 1);
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v31;
    }
    long long v32 = *((_OWORD *)v28 + 3);
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    *((_OWORD *)v27 + 3) = v32;
    *((void *)v27 + 8) = *((void *)v28 + 8);
    v27[72] = v28[72];
    uint64_t v33 = a3[9];
    unint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    id v36 = *(id *)v35;
    uint64_t v37 = *((void *)v35 + 1);
    char v38 = v35[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v35, v37, v38);
    *(void *)unint64_t v34 = v36;
    *((void *)v34 + 1) = v37;
    v34[16] = v38;
    uint64_t v39 = a3[10];
    uint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    id v42 = *(id *)v41;
    uint64_t v43 = *((void *)v41 + 1);
    LOBYTE(v36) = v41[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v41, v43, (char)v36);
    *(void *)uint64_t v40 = v42;
    *((void *)v40 + 1) = v43;
    v40[16] = (char)v36;
  }
  return a1;
}

void destroy for MLLinearRegressor(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  uint64_t v5 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[8];
  if (*(void *)(v6 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v6);
  }
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8), *(unsigned char *)(a1 + a2[9] + 16));
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  char v10 = *(unsigned char *)(v7 + 16);

  outlined consume of Result<_RegressorMetrics, Error>(v8, v9, v10);
}

void *initializeWithCopy for MLLinearRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  uint64_t v11 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = a3[6];
  uint64_t v17 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = a3[7];
  uint64_t v23 = a3[8];
  uint64_t v24 = *(void *)((char *)a2 + v22);
  void *v18 = v20;
  v18[1] = v21;
  *(void *)((char *)a1 + v22) = v24;
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (char *)a2 + v23;
  uint64_t v27 = *(void *)((char *)a2 + v23 + 24);
  id v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    *((void *)v25 + 3) = v27;
    (**(void (***)(char *, char *, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    long long v29 = *((_OWORD *)v26 + 1);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v29;
  }
  long long v30 = *((_OWORD *)v26 + 3);
  *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
  *((_OWORD *)v25 + 3) = v30;
  *((void *)v25 + 8) = *((void *)v26 + 8);
  v25[72] = v26[72];
  uint64_t v31 = a3[9];
  long long v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  id v34 = *(id *)v33;
  uint64_t v35 = *((void *)v33 + 1);
  char v36 = v33[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v33, v35, v36);
  *(void *)long long v32 = v34;
  *((void *)v32 + 1) = v35;
  v32[16] = v36;
  uint64_t v37 = a3[10];
  char v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  id v40 = *(id *)v39;
  uint64_t v41 = *((void *)v39 + 1);
  LOBYTE(v34) = v39[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v39, v41, (char)v34);
  *(void *)char v38 = v40;
  *((void *)v38 + 1) = v41;
  unsigned char v38[16] = (char)v34;
  return a1;
}

void *assignWithCopy for MLLinearRegressor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 2;
  uint64_t v8 = a2 + 2;
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
      uint64_t v9 = a2[4];
      *uint64_t v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v8;
    a1[4] = a2[4];
    *uint64_t v6 = v10;
  }
  uint64_t v11 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[5];
  uint64_t v16 = *(void **)((char *)a2 + v15);
  uint64_t v17 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  id v18 = v16;

  uint64_t v19 = a3[6];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)((char *)a2 + v22 + 24);
  if (!*(void *)((char *)a1 + v22 + 24))
  {
    if (v25)
    {
      *(void *)(v23 + 24) = v25;
      (**(void (***)(uint64_t, char *))(v25 - 8))(v23, v24);
      goto LABEL_15;
    }
LABEL_14:
    long long v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v26;
    goto LABEL_15;
  }
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_0(v23);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v23, (uint64_t *)v24);
LABEL_15:
  *(void *)(v23 + 32) = *((void *)v24 + 4);
  *(void *)(v23 + 40) = *((void *)v24 + 5);
  *(void *)(v23 + 48) = *((void *)v24 + 6);
  *(void *)(v23 + 56) = *((void *)v24 + 7);
  *(void *)(v23 + 64) = *((void *)v24 + 8);
  *(unsigned char *)(v23 + 72) = v24[72];
  uint64_t v27 = a3[9];
  id v28 = (char *)a1 + v27;
  long long v29 = (char *)a2 + v27;
  id v30 = *(id *)v29;
  uint64_t v31 = *((void *)v29 + 1);
  char v32 = v29[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v29, v31, v32);
  uint64_t v33 = *(void **)v28;
  uint64_t v34 = *((void *)v28 + 1);
  char v35 = v28[16];
  *(void *)id v28 = v30;
  *((void *)v28 + 1) = v31;
  v28[16] = v32;
  outlined consume of Result<_RegressorMetrics, Error>(v33, v34, v35);
  uint64_t v36 = a3[10];
  uint64_t v37 = (char *)a1 + v36;
  char v38 = (char *)a2 + v36;
  id v39 = *(id *)v38;
  uint64_t v40 = *((void *)v38 + 1);
  LOBYTE(v30) = v38[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v38, v40, (char)v30);
  uint64_t v41 = *(void **)v37;
  uint64_t v42 = *((void *)v37 + 1);
  char v43 = v37[16];
  *(void *)uint64_t v37 = v39;
  *((void *)v37 + 1) = v40;
  v37[16] = (char)v30;
  outlined consume of Result<_RegressorMetrics, Error>(v41, v42, v43);
  return a1;
}

uint64_t initializeWithTake for MLLinearRegressor(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  memcpy((void *)(a1 + v12), (const void *)(a2 + v12), 0x49uLL);
  uint64_t v13 = a3[9];
  uint64_t v14 = a3[10];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  return a1;
}

void *assignWithTake for MLLinearRegressor(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  uint64_t v9 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[5];
  uint64_t v14 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);

  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  if (*(void *)((char *)a1 + v20 + 24)) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1 + v20);
  }
  long long v22 = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = v22;
  *((void *)v21 + 4) = *(void *)((char *)a2 + v20 + 32);
  *(_OWORD *)(v21 + 40) = *(_OWORD *)((char *)a2 + v20 + 40);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)((char *)a2 + v20 + 56);
  v21[72] = *((unsigned char *)a2 + v20 + 72);
  uint64_t v23 = a3[9];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  char v26 = v25[16];
  uint64_t v27 = *(void **)v24;
  uint64_t v28 = *((void *)v24 + 1);
  char v29 = v24[16];
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  v24[16] = v26;
  outlined consume of Result<_RegressorMetrics, Error>(v27, v28, v29);
  uint64_t v30 = a3[10];
  uint64_t v31 = (char *)a1 + v30;
  char v32 = (char *)a2 + v30;
  char v33 = v32[16];
  uint64_t v34 = *(void **)v31;
  uint64_t v35 = *((void *)v31 + 1);
  char v36 = v31[16];
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  v31[16] = v33;
  outlined consume of Result<_RegressorMetrics, Error>(v34, v35, v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2272560BC);
}

uint64_t sub_2272560BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MLLinearRegressor.Model();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22725615C);
}

void sub_22725615C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MLLinearRegressor.Model();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for MLLinearRegressor()
{
  uint64_t result = type metadata accessor for MLLinearRegressor.Model();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2272562AC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)()
{
  OUTLINED_FUNCTION_25();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_7_1(v8);
  *uint64_t v9 = v10;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)(v2, v3, v4, v5, v6, v7);
}

uint64_t outlined init with take of MLLinearRegressor.Model(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ContiguousArray<Double> and conformance ContiguousArray<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>;
  if (!lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ContiguousArray<Double>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>);
  }
  return result;
}

void *OUTLINED_FUNCTION_4_60@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[3] = (a2 - 32) | 0x8000000000000000;
  result[4] = 0;
  result[5] = 0;
  result[6] = 49;
  result[7] = 0xE100000000000000;
  result[8] = 0;
  return result;
}

void *OUTLINED_FUNCTION_8_40()
{
  v0[2] = v1;
  v0[3] = v2;
  unint64_t result = v0 + 2;
  v0[4] = 0xD000000000000033;
  return result;
}

uint64_t OUTLINED_FUNCTION_23_23()
{
  return *(void *)(v0 + 112);
}

double OUTLINED_FUNCTION_27_26@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a2 = a3;
  *(void *)(a2 + 8) = (v3 - 32) | 0x8000000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = 1;
  return result;
}

void OUTLINED_FUNCTION_32_26(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 312) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_33_22(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_40_16()
{
  return type metadata accessor for MLLinearRegressor();
}

uint64_t OUTLINED_FUNCTION_45_16(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_46_14(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 312);
  return outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v4, a2);
}

void OUTLINED_FUNCTION_49_10(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000031;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

void OUTLINED_FUNCTION_51_12()
{
}

uint64_t OUTLINED_FUNCTION_52_12()
{
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(_WORD *)(v0 + 16) = 256;
  return v0;
}

NSString *OUTLINED_FUNCTION_54_10()
{
  return NSFullUserName();
}

uint64_t OUTLINED_FUNCTION_55_10()
{
  return *(void *)(v0 - 472);
}

uint64_t OUTLINED_FUNCTION_56_13()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_57_10(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 320);
  return outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v4, a2);
}

void OUTLINED_FUNCTION_61_9()
{
  _StringGuts.grow(_:)(52);
}

uint64_t OUTLINED_FUNCTION_66_4()
{
  return type metadata accessor for MLLinearRegressor();
}

uint64_t OUTLINED_FUNCTION_69_6()
{
  return type metadata accessor for MLLinearRegressor();
}

uint64_t OUTLINED_FUNCTION_71_6()
{
  *(void *)(v1 + 88) = v0;
  return type metadata accessor for Model();
}

uint64_t getEnumTagSinglePayload for ModelType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE5)
  {
    if (a2 + 27 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 27) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 28;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1C;
  int v5 = v6 - 28;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 27 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 27) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE4)
  {
    unsigned int v6 = ((a2 - 229) >> 8) + 1;
    *double result = a2 + 27;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2272568ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 27;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelType()
{
  return &type metadata for ModelType;
}

unint64_t lazy protocol witness table accessor for type ModelType and conformance ModelType()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelType and conformance ModelType;
  if (!lazy protocol witness table cache variable for type ModelType and conformance ModelType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelType and conformance ModelType);
  }
  return result;
}

void ModelType.description.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      OUTLINED_FUNCTION_20_1();
      break;
    case 26:
      OUTLINED_FUNCTION_3_67(0x6147u);
      break;
    default:
      return;
  }
}

void ModelType.nameKey.getter(char a1)
{
  switch(a1)
  {
    case 2:
    case 10:
    case 11:
    case 14:
    case 27:
      return;
    case 26:
      OUTLINED_FUNCTION_3_67(0x6167u);
      break;
    default:
      OUTLINED_FUNCTION_20_1();
      break;
  }
}

CreateML::ModelType_optional __swiftcall ModelType.init(nameKey:)(Swift::String nameKey)
{
  uint64_t object = nameKey._object;
  uint64_t countAndFlagsBits = nameKey._countAndFlagsBits;
  if (nameKey._countAndFlagsBits == 0xD000000000000018
    && (OUTLINED_FUNCTION_1_55((uint64_t)"decision_tree_regression"), v4)
    || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)2;
  }
  else if (countAndFlagsBits == 0xD000000000000018 {
         && (OUTLINED_FUNCTION_1_55((uint64_t)"decision_tree_classifier"), v4)
  }
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)3;
  }
  else if (countAndFlagsBits == 0xD000000000000018 {
         && (OUTLINED_FUNCTION_1_55((uint64_t)"boosted_trees_regression"), v4)
  }
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)4;
  }
  else if (countAndFlagsBits == 0xD000000000000018 {
         && (OUTLINED_FUNCTION_1_55((uint64_t)"boosted_trees_classifier"), v4)
  }
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)5;
  }
  else if (countAndFlagsBits == 0xD000000000000018 {
         && (OUTLINED_FUNCTION_1_55((uint64_t)"random_forest_regression"), v4)
  }
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (countAndFlagsBits == 0xD000000000000018 {
         && (OUTLINED_FUNCTION_1_55((uint64_t)"random_forest_classifier"), v4)
  }
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)1;
  }
  else if (countAndFlagsBits == 0xD00000000000001CLL && (OUTLINED_FUNCTION_2_63(), v4) {
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)6;
  }
  else if (countAndFlagsBits == 0xD00000000000001FLL && (OUTLINED_FUNCTION_2_63(), v4) {
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)7;
  }
  else if (countAndFlagsBits == 0xD00000000000001ELL && (OUTLINED_FUNCTION_2_63(), v4) {
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)8;
  }
  else if (countAndFlagsBits == 0xD000000000000021 && (OUTLINED_FUNCTION_2_63(), v4) {
         || (OUTLINED_FUNCTION_4_7() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)9;
  }
  else
  {
    BOOL v4 = countAndFlagsBits == 0x6966697373616C63 && object == (void *)0xEE006D76735F7265;
    if (v4 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return (CreateML::ModelType_optional)10;
    }
    else
    {
      BOOL v5 = countAndFlagsBits == 0x6D69735F6D657469 && object == (void *)0xEF79746972616C69;
      if (v5 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (CreateML::ModelType_optional)11;
      }
      else if (countAndFlagsBits == 0xD000000000000010 && (OUTLINED_FUNCTION_1_55((uint64_t)"image_classifier"), v4) {
             || (OUTLINED_FUNCTION_4_7() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return (CreateML::ModelType_optional)12;
      }
      else if (countAndFlagsBits == 0xD000000000000012 && (OUTLINED_FUNCTION_1_55((uint64_t)"drawing_classifier"), v4) {
             || (OUTLINED_FUNCTION_4_7() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return (CreateML::ModelType_optional)13;
      }
      else
      {
        BOOL v6 = countAndFlagsBits == 0x72745F656C797473 && object == (void *)0xEE00726566736E61;
        if (v6 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)14;
        }
        else if (countAndFlagsBits == 0xD000000000000012 {
               && (OUTLINED_FUNCTION_1_55((uint64_t)"nlp_sequence_model"), v4)
        }
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)16;
        }
        else if (countAndFlagsBits == 0xD000000000000014 {
               && (OUTLINED_FUNCTION_1_55((uint64_t)"nlp_classifier_model"), v4)
        }
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)15;
        }
        else if (countAndFlagsBits == 0xD000000000000011 && (OUTLINED_FUNCTION_2_63(), v4) {
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)17;
        }
        else if (countAndFlagsBits == 0xD000000000000013 && (OUTLINED_FUNCTION_2_63(), v4) {
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)18;
        }
        else if (countAndFlagsBits == 0xD000000000000010 && (OUTLINED_FUNCTION_1_55((uint64_t)"sound_classifier"), v4) {
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)19;
        }
        else if (countAndFlagsBits == 0xD000000000000019 && (OUTLINED_FUNCTION_2_63(), v4) {
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)20;
        }
        else if (countAndFlagsBits == 0xD000000000000017 {
               && (OUTLINED_FUNCTION_1_55((uint64_t)"human_action_recognizer"), v4)
        }
               || (OUTLINED_FUNCTION_4_7() & 1) != 0
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)22;
        }
        else if (countAndFlagsBits == 0xD000000000000014 {
               && (OUTLINED_FUNCTION_1_55((uint64_t)"hand_pose_classifier"), v4)
        }
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)23;
        }
        else if (countAndFlagsBits == 0xD000000000000017 {
               && (OUTLINED_FUNCTION_1_55((uint64_t)"hand_gesture_classifier"), v4)
        }
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)24;
        }
        else if (countAndFlagsBits == 0xD000000000000016 && (OUTLINED_FUNCTION_2_63(), v4) {
               || (OUTLINED_FUNCTION_4_7() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)25;
        }
        else
        {
          BOOL v7 = countAndFlagsBits == 0x65657474657A6167 && object == (void *)0xE900000000000072;
          if (v7 || (OUTLINED_FUNCTION_4_7() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return (CreateML::ModelType_optional)26;
          }
          else if (countAndFlagsBits == 0x626D655F64726F77 && object == (void *)0xEE00676E69646465)
          {
            swift_bridgeObjectRelease();
            return (CreateML::ModelType_optional)27;
          }
          else
          {
            char v9 = OUTLINED_FUNCTION_4_7();
            swift_bridgeObjectRelease();
            if (v9) {
              return (CreateML::ModelType_optional)27;
            }
            else {
              return (CreateML::ModelType_optional)28;
            }
          }
        }
      }
    }
  }
}

unint64_t ModelType.playgroundDescription.getter@<X0>(char a1@<W0>, void *a2@<X8>)
{
  ModelType.description.getter(a1);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  id v7 = objc_allocWithZone(MEMORY[0x263F086A0]);
  id v8 = @nonobjc NSAttributedString.init(string:attributes:)(v4, v6, 0);
  unint64_t result = type metadata accessor for NSAttributedString();
  a2[3] = result;
  *a2 = v8;
  return result;
}

void protocol witness for CustomStringConvertible.description.getter in conformance ModelType()
{
  ModelType.description.getter(*v0);
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ModelType@<X0>(void *a1@<X8>)
{
  return ModelType.playgroundDescription.getter(*v1, a1);
}

unint64_t OUTLINED_FUNCTION_1_55@<X0>(uint64_t a1@<X8>)
{
  return (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_3_67(unsigned __int16 a1)
{
  return a1 | 0x65657474657A0000;
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(uint64_t a1, char a2)
{
  uint64_t v2 = a1;
  switch(a2)
  {
    case 4:
      return *(void *)(a1 + 16);
    case 5:
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v16 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
        uint64_t v5 = v16;
        uint64_t v6 = (unsigned __int8 *)(v2 + 56);
        do
        {
          uint64_t v7 = *((void *)v6 - 1);
          uint64_t v8 = *v6;
          swift_bridgeObjectRetain();
          outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v7, v8);
          uint64_t v9 = ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v7, v8);
          swift_bridgeObjectRelease();
          outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v7, v8);
          unint64_t v11 = *(void *)(v16 + 16);
          unint64_t v10 = *(void *)(v16 + 24);
          unint64_t v12 = v11 + 1;
          if (v11 >= v10 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          }
          v6 += 32;
          *(void *)(v16 + 16) = v12;
          *(void *)(v16 + 8 * v11 + 32) = v9;
          --v4;
        }
        while (v4);
      }
      else
      {
        uint64_t v5 = MEMORY[0x263F8EE78];
        unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
        if (!v12)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      uint64_t v13 = 0;
      uint64_t v2 = 0;
      do
      {
        uint64_t v14 = *(void *)(v5 + 8 * v13 + 32);
        BOOL v15 = __OFADD__(v2, v14);
        v2 += v14;
        if (v15)
        {
          __break(1u);
          JUMPOUT(0x227257920);
        }
        ++v13;
      }
      while (v12 != v13);
      swift_bridgeObjectRelease();
      return v2;
    case 6:
      return 1;
    default:
      return v2;
  }
}

uint64_t ColumnDescriptor.featureDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_24_4();
  uint64_t v12 = type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_41_1();
  switch(a4)
  {
    case 1:
      uint64_t v16 = (unsigned int *)MEMORY[0x263F53198];
      goto LABEL_6;
    case 2:
      uint64_t v16 = (unsigned int *)MEMORY[0x263F531A0];
      goto LABEL_6;
    case 3:
      uint64_t v16 = (unsigned int *)MEMORY[0x263F53190];
      goto LABEL_6;
    case 4:
      swift_bridgeObjectRetain();
      FeatureType.StringParameters.init(optional:)();
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v4, *MEMORY[0x263F531D0], v12);
      return FeatureDescription.init(name:type:description:)();
    case 5:
      swift_bridgeObjectRetain();
      static FeatureType.dictionaryWithStringKeys(optional:)();
      return FeatureDescription.init(name:type:description:)();
    case 6:
      swift_bridgeObjectRetain();
      uint64_t v18 = (void (**)(uint64_t, void, uint64_t))(v14 + 104);
      if (a3)
      {
        FeatureType.DoubleParameters.init(optional:)();
        uint64_t v19 = (unsigned int *)MEMORY[0x263F531C8];
      }
      else
      {
        FeatureType.IntParameters.init(optional:)();
        uint64_t v19 = (unsigned int *)MEMORY[0x263F531B8];
      }
      (*v18)(v4, *v19, v12);
      return FeatureDescription.init(name:type:description:)();
    default:
      uint64_t v16 = (unsigned int *)MEMORY[0x263F53188];
LABEL_6:
      (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v5, *v16, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_2272CB370;
      *(void *)(v17 + 32) = a3;
      swift_bridgeObjectRetain();
      static FeatureType.shapedArray(dataType:shape:optional:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v8);
      return FeatureDescription.init(name:type:description:)();
  }
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    char v4 = OUTLINED_FUNCTION_31_20();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4, v5, v6);
    uint64_t v7 = a1 + 32;
    uint64_t v2 = v15;
    do
    {
      v7 += 8;
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(key: MLDataValue, value: MLDataValue)]?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(MLDataValue, MLDataValue)]?);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v8 = OUTLINED_FUNCTION_53_14();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v9, v10);
        uint64_t v2 = v15;
      }
      unint64_t v12 = *(void *)(v2 + 16);
      unint64_t v11 = *(void *)(v2 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v2 = v15;
      }
      *(void *)(v2 + 16) = v12 + 1;
      *(void *)(v2 + 8 * v12 + 32) = v14;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  int64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    char v4 = (char *)OUTLINED_FUNCTION_31_20();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4, v5, v6);
    uint64_t v2 = v17;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    char v8 = MEMORY[0x263F8D538];
    uint64_t v9 = MEMORY[0x263F8D578];
    do
    {
      char v10 = *v7;
      uint64_t v17 = v2;
      unint64_t v12 = *(void *)(v2 + 16);
      unint64_t v11 = *(void *)(v2 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v2 = v17;
      }
      uint64_t v15 = v8;
      uint64_t v16 = v9;
      *(void *)&uint64_t v14 = v10;
      *(void *)(v2 + 16) = v12 + 1;
      outlined init with take of BinaryFloatingPoint(&v14, v2 + 40 * v12 + 32);
      ++v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    unint64_t v12 = MEMORY[0x263F8EE78];
    OUTLINED_FUNCTION_31_20();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v12;
    char v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (text: String, label: String));
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_53_14();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v12;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v12;
      }
      v4 += 32;
      *(void *)(v2 + 16) = v5 + 1;
      char v6 = (void *)(v2 + 32 * v5);
      v6[4] = v8;
      v6[5] = v9;
      v6[6] = v10;
      v6[7] = v11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    char v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v8;
    char v4 = a1 + 32;
    do
    {
      outlined init with copy of Any?(v4, (uint64_t)v7);
      char v8 = v2;
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    char v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    char v4 = a1 + 32;
    uint64_t v2 = v8;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    char v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    char v4 = a1 + 32;
    uint64_t v2 = v8;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    char v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    char v4 = a1 + 32;
    uint64_t v2 = v8;
    do
    {
      v4 += 4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    char v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    char v4 = a1 + 32;
    uint64_t v2 = v8;
    do
    {
      ++v4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    char v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    char v4 = a1 + 32;
    uint64_t v2 = v8;
    do
    {
      v4 += 8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[32];
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    char v8 = MEMORY[0x263F8EE78];
    OUTLINED_FUNCTION_31_20();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v8;
    char v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_53_14();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      v4 += 16;
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void ColumnDescriptor.init(_:)()
{
  OUTLINED_FUNCTION_9_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v20);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>??);
  uint64_t v22 = OUTLINED_FUNCTION_17(v21);
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v25);
  uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v29);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>??);
  uint64_t v31 = OUTLINED_FUNCTION_17(v30);
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v34);
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v38);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>??);
  uint64_t v40 = OUTLINED_FUNCTION_17(v39);
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_33_0();
  uint64_t v177 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v43);
  uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v45);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_33_0();
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>??);
  uint64_t v48 = OUTLINED_FUNCTION_17(v47);
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_33_0();
  uint64_t v180 = v49;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_33_0();
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_33_0();
  uint64_t v179 = v52;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[UInt8]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_24_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int32]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_3_0();
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v58 = OUTLINED_FUNCTION_17(v57);
  MEMORY[0x270FA5388](v58);
  OUTLINED_FUNCTION_3_0();
  AnyColumn.name.getter();
  AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype())
  {
    goto LABEL_4;
  }
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    unint64_t v182 = 0xE000000000000000;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    OptionalColumnProtocol.filled(with:)();
    OUTLINED_FUNCTION_25_0();
    v61();
    specialized Set.init<A>(_:)();
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    uint64_t v63 = v62;
    swift_bridgeObjectRelease();
    uint64_t v181 = v63;
    specialized MutableCollection<>.sort(by:)(&v181);
    if (!v0)
    {
      type metadata accessor for AnyColumn();
      OUTLINED_FUNCTION_6_19();
      OUTLINED_FUNCTION_25_0();
      v64();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    goto LABEL_120;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (OUTLINED_FUNCTION_41_4())
  {
    OUTLINED_FUNCTION_55_11();
    uint64_t v65 = specialized Collection.first.getter();
    OUTLINED_FUNCTION_25_0();
    v66();
    if (!v65) {
      goto LABEL_20;
    }
    if (v65 != 1)
    {
LABEL_19:
      OUTLINED_FUNCTION_27_27();
      goto LABEL_20;
    }
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]);
  if (OUTLINED_FUNCTION_41_4())
  {
    OUTLINED_FUNCTION_55_11();
    uint64_t v67 = specialized Collection.first.getter();
    OUTLINED_FUNCTION_25_0();
    v68();
    if (v67)
    {
      if (v67 != 1) {
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_111;
    }
LABEL_20:
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    OUTLINED_FUNCTION_25_0();
    v69();
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  if (OUTLINED_FUNCTION_41_4())
  {
    AnyColumn.assumingType<A>(_:)();
    uint64_t v70 = specialized Collection.first.getter();
    OUTLINED_FUNCTION_25_0();
    v71();
    if (!v70)
    {
LABEL_4:
      type metadata accessor for AnyColumn();
      OUTLINED_FUNCTION_6_19();
      uint64_t v59 = OUTLINED_FUNCTION_3_68();
      v60(v59);
LABEL_5:
      OUTLINED_FUNCTION_8_1();
      return;
    }
    if (v70 != 1)
    {
      outlined consume of [Double]??(v70);
      goto LABEL_4;
    }
    __break(1u);
LABEL_114:
    OUTLINED_FUNCTION_17_33();
    OUTLINED_FUNCTION_6_19();
    uint64_t v167 = OUTLINED_FUNCTION_3_68();
    v168(v167);
    uint64_t v124 = OUTLINED_FUNCTION_46_15();
    goto LABEL_115;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  if (OUTLINED_FUNCTION_58_3())
  {
    OUTLINED_FUNCTION_18_27();
    OUTLINED_FUNCTION_51_13();
    specialized Collection.first.getter(v72);
    OUTLINED_FUNCTION_25_0();
    v73();
    uint64_t v74 = OUTLINED_FUNCTION_56_14();
    if (__swift_getEnumTagSinglePayload(v74, v75, v178) != 1)
    {
      outlined init with take of (offset: Int, element: Layer)?(v180, v179, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      OUTLINED_FUNCTION_20_37();
      if (v76)
      {
        outlined destroy of DefaultIndices<DataFrame.Rows>(v179, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        MLShapedArray.shape.getter();
        OUTLINED_FUNCTION_17_12();
        uint64_t v79 = OUTLINED_FUNCTION_30_27();
        v80(v79);
      }
      OUTLINED_FUNCTION_57_11();
      if (!v81) {
        goto LABEL_82;
      }
      goto LABEL_38;
    }
    __break(1u);
    goto LABEL_117;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float16]);
  if (OUTLINED_FUNCTION_41_4())
  {
    AnyColumn.assumingType<A>(_:)();
    uint64_t v77 = specialized Collection.first.getter();
    OUTLINED_FUNCTION_25_0();
    v78();
    if (v77)
    {
      if (v77 == 1)
      {
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      OUTLINED_FUNCTION_27_27();
    }
LABEL_61:
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    uint64_t v100 = OUTLINED_FUNCTION_52_13();
    v101(v100);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  if (OUTLINED_FUNCTION_58_3())
  {
    OUTLINED_FUNCTION_18_27();
    OUTLINED_FUNCTION_51_13();
    specialized Collection.first.getter(v86);
    OUTLINED_FUNCTION_44_18();
    OUTLINED_FUNCTION_25_0();
    v87();
    uint64_t v88 = OUTLINED_FUNCTION_56_14();
    if (__swift_getEnumTagSinglePayload(v88, v89, v175) == 1)
    {
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    outlined init with take of (offset: Int, element: Layer)?(v177, v176, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
    OUTLINED_FUNCTION_20_37();
    if (v76)
    {
      outlined destroy of DefaultIndices<DataFrame.Rows>(v176, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
    }
    else
    {
      MLShapedArray.shape.getter();
      OUTLINED_FUNCTION_17_12();
      uint64_t v92 = OUTLINED_FUNCTION_30_27();
      v93(v92);
    }
    OUTLINED_FUNCTION_57_11();
    if (!v81) {
      goto LABEL_82;
    }
LABEL_38:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_54_11();
    OUTLINED_FUNCTION_3_42(v82, v83);
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    uint64_t v84 = OUTLINED_FUNCTION_3_68();
    v85(v84);
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (OUTLINED_FUNCTION_41_4())
  {
    OUTLINED_FUNCTION_8_41();
    uint64_t v90 = specialized Collection.first.getter();
    OUTLINED_FUNCTION_43_14();
    OUTLINED_FUNCTION_25_0();
    v91();
    if (v90)
    {
      if (v90 == 1)
      {
LABEL_119:
        __break(1u);
LABEL_120:
        swift_release();
        __break(1u);
        goto LABEL_121;
      }
      OUTLINED_FUNCTION_27_27();
    }
    goto LABEL_61;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (OUTLINED_FUNCTION_58_3())
  {
    OUTLINED_FUNCTION_18_27();
    OUTLINED_FUNCTION_51_13();
    specialized Collection.first.getter(v94);
    OUTLINED_FUNCTION_44_18();
    OUTLINED_FUNCTION_25_0();
    v95();
    uint64_t v96 = OUTLINED_FUNCTION_56_14();
    if (__swift_getEnumTagSinglePayload(v96, v97, v172) == 1)
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    outlined init with take of (offset: Int, element: Layer)?(v174, v173, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    OUTLINED_FUNCTION_20_37();
    if (v76)
    {
      outlined destroy of DefaultIndices<DataFrame.Rows>(v173, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    }
    else
    {
      MLShapedArray.shape.getter();
      OUTLINED_FUNCTION_17_12();
      uint64_t v102 = OUTLINED_FUNCTION_30_27();
      v103(v102);
    }
    OUTLINED_FUNCTION_57_11();
    if (v81) {
      goto LABEL_38;
    }
    goto LABEL_82;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (OUTLINED_FUNCTION_41_4())
  {
    OUTLINED_FUNCTION_8_41();
    uint64_t v98 = specialized Collection.first.getter();
    OUTLINED_FUNCTION_43_14();
    OUTLINED_FUNCTION_25_0();
    v99();
    if (v98)
    {
      if (v98 == 1)
      {
LABEL_122:
        __break(1u);
        goto LABEL_123;
      }
      OUTLINED_FUNCTION_27_27();
    }
    goto LABEL_61;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  if (OUTLINED_FUNCTION_58_3())
  {
    OUTLINED_FUNCTION_18_27();
    OUTLINED_FUNCTION_51_13();
    specialized Collection.first.getter(v104);
    OUTLINED_FUNCTION_44_18();
    OUTLINED_FUNCTION_25_0();
    v105();
    uint64_t v106 = OUTLINED_FUNCTION_56_14();
    if (__swift_getEnumTagSinglePayload(v106, v107, v169) == 1)
    {
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    outlined init with take of (offset: Int, element: Layer)?(v171, v170, &demangling cache variable for type metadata for MLShapedArray<Double>?);
    OUTLINED_FUNCTION_20_37();
    if (v76)
    {
      outlined destroy of DefaultIndices<DataFrame.Rows>(v170, &demangling cache variable for type metadata for MLShapedArray<Double>?);
    }
    else
    {
      MLShapedArray.shape.getter();
      OUTLINED_FUNCTION_17_12();
      uint64_t v118 = OUTLINED_FUNCTION_30_27();
      v119(v118);
    }
    OUTLINED_FUNCTION_57_11();
    if (v81) {
      goto LABEL_38;
    }
LABEL_82:
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    uint64_t v134 = OUTLINED_FUNCTION_3_68();
    v135(v134);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  if (!OUTLINED_FUNCTION_41_4())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
    if (OUTLINED_FUNCTION_41_4())
    {
      OUTLINED_FUNCTION_8_41();
      OUTLINED_FUNCTION_35_22();
      OUTLINED_FUNCTION_16_40();
      OUTLINED_FUNCTION_15_32();
      v120();
      uint64_t v121 = OUTLINED_FUNCTION_36_22();
      specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v121);
      OUTLINED_FUNCTION_33_23();
      if (v0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for AnyColumn();
      }
      else
      {
        OUTLINED_FUNCTION_17_33();
      }
      OUTLINED_FUNCTION_6_19();
      uint64_t v122 = OUTLINED_FUNCTION_3_68();
      v123(v122);
      uint64_t v124 = OUTLINED_FUNCTION_48_13();
      goto LABEL_115;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UInt8]);
    if (OUTLINED_FUNCTION_41_4())
    {
      OUTLINED_FUNCTION_8_41();
      OUTLINED_FUNCTION_35_22();
      OUTLINED_FUNCTION_16_40();
      OUTLINED_FUNCTION_15_32();
      v139();
      uint64_t v140 = OUTLINED_FUNCTION_36_22();
      specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v140);
      OUTLINED_FUNCTION_33_23();
      if (v0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for AnyColumn();
      }
      else
      {
        OUTLINED_FUNCTION_17_33();
      }
      OUTLINED_FUNCTION_6_19();
      uint64_t v141 = OUTLINED_FUNCTION_3_68();
      v142(v141);
      uint64_t v124 = OUTLINED_FUNCTION_45_17();
      goto LABEL_115;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int32]);
    if (OUTLINED_FUNCTION_41_4())
    {
      OUTLINED_FUNCTION_8_41();
      OUTLINED_FUNCTION_35_22();
      OUTLINED_FUNCTION_16_40();
      OUTLINED_FUNCTION_15_32();
      v145();
      uint64_t v146 = OUTLINED_FUNCTION_36_22();
      specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v146);
      OUTLINED_FUNCTION_33_23();
      if (v0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for AnyColumn();
      }
      else
      {
        OUTLINED_FUNCTION_17_33();
      }
      OUTLINED_FUNCTION_6_19();
      uint64_t v147 = OUTLINED_FUNCTION_3_68();
      v148(v147);
      uint64_t v124 = OUTLINED_FUNCTION_50_13();
      goto LABEL_115;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
    if (OUTLINED_FUNCTION_41_4())
    {
      OUTLINED_FUNCTION_8_41();
      OUTLINED_FUNCTION_35_22();
      OUTLINED_FUNCTION_16_40();
      OUTLINED_FUNCTION_15_32();
      v149();
      uint64_t v150 = OUTLINED_FUNCTION_36_22();
      specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v150);
      OUTLINED_FUNCTION_33_23();
      if (v0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for AnyColumn();
      }
      else
      {
        OUTLINED_FUNCTION_17_33();
      }
      OUTLINED_FUNCTION_6_19();
      uint64_t v151 = OUTLINED_FUNCTION_3_68();
      v152(v151);
      uint64_t v124 = OUTLINED_FUNCTION_49_11();
      goto LABEL_115;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
    if (OUTLINED_FUNCTION_41_4())
    {
      OUTLINED_FUNCTION_8_41();
      OUTLINED_FUNCTION_35_22();
      OUTLINED_FUNCTION_16_40();
      OUTLINED_FUNCTION_15_32();
      v153();
      uint64_t v154 = OUTLINED_FUNCTION_36_22();
      specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v154);
      OUTLINED_FUNCTION_33_23();
      if (!v0)
      {
LABEL_111:
        OUTLINED_FUNCTION_17_33();
        OUTLINED_FUNCTION_6_19();
        uint64_t v161 = OUTLINED_FUNCTION_3_68();
        v162(v161);
        uint64_t v124 = OUTLINED_FUNCTION_47_19();
        goto LABEL_115;
      }
      swift_bridgeObjectRelease();
      type metadata accessor for AnyColumn();
      OUTLINED_FUNCTION_6_19();
      uint64_t v155 = OUTLINED_FUNCTION_3_68();
      v156(v155);
      uint64_t v124 = OUTLINED_FUNCTION_47_19();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any?]);
      if (!OUTLINED_FUNCTION_41_4())
      {
        swift_bridgeObjectRelease();
        uint64_t v181 = 0;
        unint64_t v182 = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease();
        v163._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_24_34();
        String.append(_:)(v163);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_54_11();
        v165._uint64_t countAndFlagsBits = v164 - 16;
        v165._uint64_t object = (void *)0x80000002272DB090;
        String.append(_:)(v165);
        AnyColumn.wrappedElementType.getter();
        v166._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v166);
        swift_bridgeObjectRelease();
        uint64_t v129 = 46;
        unint64_t v130 = 0xE100000000000000;
        goto LABEL_81;
      }
      OUTLINED_FUNCTION_8_41();
      OUTLINED_FUNCTION_35_22();
      OUTLINED_FUNCTION_16_40();
      OUTLINED_FUNCTION_15_32();
      v157();
      uint64_t v158 = OUTLINED_FUNCTION_36_22();
      specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v158);
      OUTLINED_FUNCTION_33_23();
      if (!v0) {
        goto LABEL_114;
      }
      swift_bridgeObjectRelease();
      type metadata accessor for AnyColumn();
      OUTLINED_FUNCTION_6_19();
      uint64_t v159 = OUTLINED_FUNCTION_3_68();
      v160(v159);
      uint64_t v124 = OUTLINED_FUNCTION_46_15();
    }
LABEL_115:
    v125(v124, *(void *)(v126 - 256));
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_8_41();
  uint64_t v108 = (void *)specialized Collection.first.getter();
  OUTLINED_FUNCTION_43_14();
  OUTLINED_FUNCTION_25_0();
  v109();
  if (!v108)
  {
    swift_bridgeObjectRelease();
    uint64_t v181 = 0;
    unint64_t v182 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v127._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_24_34();
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_54_11();
    uint64_t v129 = v128 - 26;
    unint64_t v130 = 0x80000002272DB0C0;
LABEL_81:
    String.append(_:)(*(Swift::String *)&v129);
    unint64_t v131 = v182;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v132 = v181;
    *(void *)(v132 + 8) = v131;
    *(_OWORD *)(v132 + 16) = 0u;
    *(_OWORD *)(v132 + 32) = 0u;
    *(unsigned char *)(v132 + 48) = 1;
    swift_willThrow();
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    OUTLINED_FUNCTION_25_0();
    v133();
    goto LABEL_5;
  }
  if (v108 == (void *)1)
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  id v110 = objc_msgSend(v108, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v111 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v111);
  uint64_t v113 = v112;
  swift_bridgeObjectRelease();
  if (*(void *)(v113 + 16) > 1uLL)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    OUTLINED_FUNCTION_54_11();
    OUTLINED_FUNCTION_3_42(v114, v115);
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    uint64_t v116 = OUTLINED_FUNCTION_3_68();
    v117(v116);
    swift_bridgeObjectRelease();
LABEL_85:
    outlined consume of MLMultiArray??(v108);
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  ColumnDescriptor.ColumnTypeDescriptor.init(_:)(v108);
  if (v0)
  {
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    uint64_t v137 = OUTLINED_FUNCTION_52_13();
    v138(v137);
    goto LABEL_85;
  }
  if (v136 != -1)
  {
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_6_19();
    uint64_t v143 = OUTLINED_FUNCTION_3_68();
    v144(v143);
    outlined consume of MLMultiArray??(v108);
    goto LABEL_5;
  }
LABEL_125:
  __break(1u);
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.featureType.getter(uint64_t a1, char a2)
{
  uint64_t result = 4;
  switch(a2)
  {
    case 1:
      uint64_t result = 5;
      break;
    case 2:
      uint64_t result = 6;
      break;
    case 3:
      uint64_t result = 7;
      break;
    case 4:
      uint64_t result = 8;
      break;
    case 5:
      uint64_t result = 9;
      break;
    case 6:
      uint64_t result = a1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.init(_:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(v5 + 16) > 1uLL)
  {
    uint64_t v6 = 0;
LABEL_12:
    swift_bridgeObjectRelease();

    return v6;
  }
  id v7 = objc_msgSend(a1, sel_dataType);
  if (v7 == (id)65552)
  {
    if (*(void *)(v5 + 16)) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (v7 == (id)65568)
  {
    if (*(void *)(v5 + 16)) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v6 = 1;
    goto LABEL_12;
  }
  if (v7 == (id)131104)
  {
    if (!*(void *)(v5 + 16)) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v6 = *(void *)(v5 + 32);
    goto LABEL_12;
  }
  if (v7 == (id)65600)
  {
    if (!*(void *)(v5 + 16)) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  _StringGuts.grow(_:)(28);
  v9._uint64_t object = (void *)0x80000002272DB140;
  v9._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v9);
  objc_msgSend(a1, sel_dataType);
  type metadata accessor for MLMultiArrayDataType(0);
  _print_unlocked<A, B>(_:_:)();
  v10._uint64_t countAndFlagsBits = 46;
  v10._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(uint64_t a1)
{
  uint64_t v104 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Int]>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int]>>>);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  Swift::String v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v101 - v10;
  uint64_t v118 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String : Int]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Int]>);
  uint64_t v102 = v12;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  uint64_t v109 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v110 = v2 + 16;
  v109(v9, v4, v1);
  uint64_t v13 = v1;
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Int]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Int]>>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  unint64_t v111 = v4;
  uint64_t v112 = v2 + 8;
  uint64_t v108 = v15;
  v15(v4, v13);
  *(void *)&v9[*(int *)(v6 + 44)] = v118;
  outlined init with take of (offset: Int, element: Layer)?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int]>>>);
  uint64_t v16 = &v11[*(int *)(v6 + 44)];
  uint64_t v17 = *(void **)v16;
  uint64_t v113 = v11;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v118)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = (void *)MEMORY[0x263F8EE80];
    uint64_t v21 = (uint64_t)v113;
    goto LABEL_37;
  }
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v22 = v13;
  uint64_t v23 = v16;
  uint64_t v20 = (void *)MEMORY[0x263F8EE80];
  uint64_t v106 = v14;
  uint64_t v107 = v13;
  uint64_t v105 = v23;
  while (2)
  {
    uint64_t v24 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    uint64_t v26 = *v25;
    swift_bridgeObjectRetain();
    v24(&v118, 0);
    uint64_t v27 = v111;
    v109(v111, v113, v22);
    dispatch thunk of Collection.formIndex(after:)();
    v108(v27, v22);
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)(v26 + 64);
    uint64_t v114 = (void *)(v26 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v26 + 32);
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v32 = v31 & v29;
    int64_t v115 = (unint64_t)(v30 + 63) >> 6;
    uint64_t v116 = v26;
    if (v32)
    {
LABEL_8:
      uint64_t v117 = (v32 - 1) & v32;
      uint64_t v120 = v28;
      unint64_t v33 = __clz(__rbit64(v32)) | ((void)v28 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      int64_t v34 = (int64_t)v28 + 1;
      uint64_t v21 = (uint64_t)v113;
      if (__OFADD__(v28, 1)) {
        goto LABEL_57;
      }
      if (v34 >= v115) {
        break;
      }
      unint64_t v35 = v114[v34];
      int64_t v36 = (int64_t)v28 + 1;
      if (v35) {
        goto LABEL_22;
      }
      int64_t v36 = (int64_t)v28 + 2;
      if ((uint64_t)v28 + 2 >= v115) {
        break;
      }
      unint64_t v35 = v114[v36];
      if (v35) {
        goto LABEL_22;
      }
      int64_t v36 = (int64_t)v28 + 3;
      if ((uint64_t)v28 + 3 >= v115) {
        break;
      }
      unint64_t v35 = v114[v36];
      if (v35) {
        goto LABEL_22;
      }
      uint64_t v37 = (uint64_t)v28 + 4;
      if ((uint64_t)v28 + 4 >= v115) {
        break;
      }
      unint64_t v35 = v114[v37];
      if (!v35)
      {
        while (1)
        {
          int64_t v36 = v37 + 1;
          if (__OFADD__(v37, 1)) {
            goto LABEL_58;
          }
          if (v36 >= v115) {
            goto LABEL_36;
          }
          unint64_t v35 = v114[v36];
          ++v37;
          if (v35) {
            goto LABEL_22;
          }
        }
      }
      int64_t v36 = (int64_t)v28 + 4;
LABEL_22:
      uint64_t v117 = (v35 - 1) & v35;
      uint64_t v120 = (void *)v36;
      unint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
LABEL_23:
      uint64_t v38 = (uint64_t *)(*(void *)(v116 + 48) + 16 * v33);
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      uint64_t v41 = *(void *)(*(void *)(v116 + 56) + 8 * v33);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(void *)(v42 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v118 = v20;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
      uint64_t v46 = v20[2];
      BOOL v47 = (v45 & 1) == 0;
      Swift::Int v48 = v46 + v47;
      if (__OFADD__(v46, v47))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      unint64_t v49 = v44;
      char v50 = v45;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Int]>);
      Swift::Bool v51 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v48);
      uint64_t v20 = v118;
      if (v51)
      {
        unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
        if ((v50 & 1) != (v53 & 1)) {
          goto LABEL_62;
        }
        unint64_t v49 = v52;
      }
      swift_bridgeObjectRelease();
      uint64_t v54 = swift_bridgeObjectRetain();
      if ((v50 & 1) == 0)
      {
        uint64_t v55 = (*(uint64_t (**)(uint64_t))(v42 + 16))(v54);
        v20[(v49 >> 6) + 8] |= 1 << v49;
        uint64_t v56 = (uint64_t *)(v20[6] + 16 * v49);
        uint64_t *v56 = v39;
        v56[1] = v40;
        *(void *)(v20[7] + 8 * v49) = v55;
        uint64_t v57 = v20[2];
        BOOL v58 = __OFADD__(v57, 1);
        uint64_t v59 = v57 + 1;
        if (v58) {
          goto LABEL_56;
        }
        v20[2] = v59;
        swift_bridgeObjectRetain();
      }
      uint64_t v60 = v20[7];
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void *)(v60 + 8 * v49);
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v60 + 8 * v49) = v61;
      if ((v62 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v61 + 16) + 1, 1, v61);
        uint64_t v61 = v65;
        *(void *)(v60 + 8 * v49) = v65;
      }
      unint64_t v64 = *(void *)(v61 + 16);
      unint64_t v63 = *(void *)(v61 + 24);
      if (v64 >= v63 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1, v61);
        uint64_t v61 = v66;
        *(void *)(v60 + 8 * v49) = v66;
      }
      *(void *)(v61 + 16) = v64 + 1;
      *(void *)(v61 + 8 * v64 + 32) = v41;
      swift_bridgeObjectRelease();
      uint64_t v19 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      uint64_t v18 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      uint64_t v28 = v120;
      unint64_t v32 = v117;
      if (v117) {
        goto LABEL_8;
      }
    }
LABEL_36:
    swift_release();
    uint64_t v120 = *(void **)v105;
    uint64_t v22 = v107;
    dispatch thunk of Collection.endIndex.getter();
    if (v120 != v118) {
      continue;
    }
    break;
  }
LABEL_37:
  outlined destroy of DefaultIndices<DataFrame.Rows>(v21, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int]>>>);
  swift_bridgeObjectRetain_n();
  uint64_t v67 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v118 = v67;
  uint64_t v68 = v103;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v118);
  if (v68)
  {
LABEL_63:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v69 = v118;
  if (!v118[2])
  {
    uint64_t v120 = (void *)MEMORY[0x263F8EE78];
LABEL_53:
    (*(void (**)(uint64_t))(*(void *)(v102 - 8) + 8))(v104);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    return (uint64_t)v120;
  }
  if (!v20[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v116 = v118[2];
  uint64_t v70 = v118[4];
  uint64_t v71 = (void *)v118[5];
  swift_bridgeObjectRetain_n();
  uint64_t v117 = v70;
  unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, (uint64_t)v71);
  if ((v73 & 1) == 0) {
    goto LABEL_61;
  }
  uint64_t v113 = 0;
  uint64_t v114 = v69;
  uint64_t v74 = (void **)(v69 + 7);
  uint64_t v120 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v75 = *(void *)(v20[7] + 8 * v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v76 = specialized _arrayForceCast<A, B>(_:)(v75);
    swift_bridgeObjectRelease();
    uint64_t v77 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v76);
    if (v78 == -1) {
      break;
    }
    uint64_t v79 = v77;
    char v80 = v78;
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    int64_t v115 = (int64_t)v71;
    if ((v81 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v120 = v88;
    }
    unint64_t v82 = v120[2];
    if (v82 >= v120[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v120 = v89;
    }
    uint64_t v83 = v120;
    v120[2] = v82 + 1;
    uint64_t v84 = &v83[4 * v82];
    int64_t v85 = v115;
    v84[4] = v117;
    v84[5] = v85;
    v84[6] = v79;
    *((unsigned char *)v84 + 56) = v80;
    if (v116 == 1) {
      goto LABEL_53;
    }
    if (!v20[2]) {
      goto LABEL_59;
    }
    --v116;
    uint64_t v86 = (uint64_t)*(v74 - 1);
    uint64_t v71 = *v74;
    swift_bridgeObjectRetain_n();
    uint64_t v117 = v86;
    unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v86, (uint64_t)v71);
    v74 += 2;
    if ((v87 & 1) == 0) {
      goto LABEL_61;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v118 = 0;
  unint64_t v119 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v90._uint64_t object = (void *)0x80000002272DB160;
  v90._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v90);
  v91._uint64_t countAndFlagsBits = v117;
  v91._uint64_t object = v71;
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._uint64_t countAndFlagsBits = 0x6C6F63206E692027;
  v92._uint64_t object = (void *)0xED000027206E6D75;
  String.append(_:)(v92);
  uint64_t v93 = v102;
  uint64_t v94 = v104;
  v95._uint64_t countAndFlagsBits = Column.name.getter();
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  v96._uint64_t countAndFlagsBits = 0xD000000000000028;
  v96._uint64_t object = (void *)0x80000002272DB180;
  String.append(_:)(v96);
  uint64_t v97 = v118;
  unint64_t v98 = v119;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(void *)uint64_t v99 = v97;
  *(void *)(v99 + 8) = v98;
  *(_OWORD *)(v99 + 16) = 0u;
  *(_OWORD *)(v99 + 32) = 0u;
  *(unsigned char *)(v99 + 48) = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v94, v93);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  return (uint64_t)v120;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  void *v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(void **, void);
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  char v45;
  uint64_t v46;
  BOOL v47;
  Swift::Int v48;
  unint64_t v49;
  char v50;
  Swift::Bool v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  unint64_t v71;
  char v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  unint64_t v81;
  void *v82;
  void *v83;
  int64_t v84;
  uint64_t v85;
  char v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  Swift::String v94;
  Swift::String v95;
  void *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t result;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void *v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  void *v119;

  uint64_t v103 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : UInt8]>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : UInt8]>>>);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  Swift::String v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v100 - v10;
  uint64_t v117 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String : UInt8]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : UInt8]>);
  uint64_t v101 = v12;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v109 = v2 + 16;
  v108(v9, v4, v1);
  uint64_t v13 = v1;
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : UInt8]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : UInt8]>>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v110 = v4;
  unint64_t v111 = v2 + 8;
  uint64_t v107 = v15;
  v15(v4, v13);
  *(void *)&v9[*(int *)(v6 + 44)] = v117;
  outlined init with take of (offset: Int, element: Layer)?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : UInt8]>>>);
  uint64_t v16 = &v11[*(int *)(v6 + 44)];
  uint64_t v17 = *(void **)v16;
  uint64_t v112 = v11;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v117)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = (void *)MEMORY[0x263F8EE80];
    uint64_t v21 = (uint64_t)v112;
    goto LABEL_37;
  }
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v22 = v13;
  uint64_t v23 = v16;
  uint64_t v20 = (void *)MEMORY[0x263F8EE80];
  uint64_t v105 = v14;
  uint64_t v106 = v13;
  uint64_t v104 = v23;
  while (2)
  {
    uint64_t v24 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    uint64_t v26 = *v25;
    swift_bridgeObjectRetain();
    v24(&v117, 0);
    uint64_t v27 = v110;
    v108(v110, v112, v22);
    dispatch thunk of Collection.formIndex(after:)();
    v107(v27, v22);
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)(v26 + 64);
    uint64_t v113 = (void *)(v26 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v26 + 32);
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v32 = v31 & v29;
    uint64_t v114 = (unint64_t)(v30 + 63) >> 6;
    int64_t v115 = v26;
    if (v32)
    {
LABEL_8:
      uint64_t v116 = (v32 - 1) & v32;
      unint64_t v119 = v28;
      unint64_t v33 = __clz(__rbit64(v32)) | ((void)v28 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      int64_t v34 = (int64_t)v28 + 1;
      uint64_t v21 = (uint64_t)v112;
      if (__OFADD__(v28, 1)) {
        goto LABEL_57;
      }
      if (v34 >= v114) {
        break;
      }
      unint64_t v35 = v113[v34];
      int64_t v36 = (int64_t)v28 + 1;
      if (v35) {
        goto LABEL_22;
      }
      int64_t v36 = (int64_t)v28 + 2;
      if ((uint64_t)v28 + 2 >= v114) {
        break;
      }
      unint64_t v35 = v113[v36];
      if (v35) {
        goto LABEL_22;
      }
      int64_t v36 = (int64_t)v28 + 3;
      if ((uint64_t)v28 + 3 >= v114) {
        break;
      }
      unint64_t v35 = v113[v36];
      if (v35) {
        goto LABEL_22;
      }
      uint64_t v37 = (uint64_t)v28 + 4;
      if ((uint64_t)v28 + 4 >= v114) {
        break;
      }
      unint64_t v35 = v113[v37];
      if (!v35)
      {
        while (1)
        {
          int64_t v36 = v37 + 1;
          if (__OFADD__(v37, 1)) {
            goto LABEL_58;
          }
          if (v36 >= v114) {
            goto LABEL_36;
          }
          unint64_t v35 = v113[v36];
          ++v37;
          if (v35) {
            goto LABEL_22;
          }
        }
      }
      int64_t v36 = (int64_t)v28 + 4;
LABEL_22:
      uint64_t v116 = (v35 - 1) & v35;
      unint64_t v119 = (void *)v36;
      unint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
LABEL_23:
      uint64_t v38 = (uint64_t *)(*(void *)(v115 + 48) + 16 * v33);
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      uint64_t v41 = *(unsigned char *)(*(void *)(v115 + 56) + v33);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(void *)(v42 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v117 = v20;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
      uint64_t v46 = v20[2];
      BOOL v47 = (v45 & 1) == 0;
      Swift::Int v48 = v46 + v47;
      if (__OFADD__(v46, v47))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      unint64_t v49 = v44;
      char v50 = v45;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [UInt8]>);
      Swift::Bool v51 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v48);
      uint64_t v20 = v117;
      if (v51)
      {
        unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
        if ((v50 & 1) != (v53 & 1)) {
          goto LABEL_62;
        }
        unint64_t v49 = v52;
      }
      swift_bridgeObjectRelease();
      uint64_t v54 = swift_bridgeObjectRetain();
      if ((v50 & 1) == 0)
      {
        uint64_t v55 = (*(uint64_t (**)(uint64_t))(v42 + 16))(v54);
        v20[(v49 >> 6) + 8] |= 1 << v49;
        uint64_t v56 = (uint64_t *)(v20[6] + 16 * v49);
        uint64_t *v56 = v39;
        v56[1] = v40;
        *(void *)(v20[7] + 8 * v49) = v55;
        uint64_t v57 = v20[2];
        BOOL v58 = __OFADD__(v57, 1);
        uint64_t v59 = v57 + 1;
        if (v58) {
          goto LABEL_56;
        }
        v20[2] = v59;
        swift_bridgeObjectRetain();
      }
      uint64_t v60 = v20[7];
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void *)(v60 + 8 * v49);
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v60 + 8 * v49) = v61;
      if ((v62 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v61 = v64;
        *(void *)(v60 + 8 * v49) = v64;
      }
      unint64_t v63 = *(void *)(v61 + 16);
      if (v63 >= *(void *)(v61 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v61 = v65;
        *(void *)(v60 + 8 * v49) = v65;
      }
      *(void *)(v61 + 16) = v63 + 1;
      *(unsigned char *)(v61 + v63 + 32) = v41;
      swift_bridgeObjectRelease();
      uint64_t v19 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      uint64_t v18 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      uint64_t v28 = v119;
      unint64_t v32 = v116;
      if (v116) {
        goto LABEL_8;
      }
    }
LABEL_36:
    swift_release();
    unint64_t v119 = *(void **)v104;
    uint64_t v22 = v106;
    dispatch thunk of Collection.endIndex.getter();
    if (v119 != v117) {
      continue;
    }
    break;
  }
LABEL_37:
  outlined destroy of DefaultIndices<DataFrame.Rows>(v21, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : UInt8]>>>);
  swift_bridgeObjectRetain_n();
  uint64_t v66 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v117 = v66;
  uint64_t v67 = v102;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v117);
  if (v67)
  {
LABEL_63:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = v117;
  if (!v117[2])
  {
    unint64_t v119 = (void *)MEMORY[0x263F8EE78];
LABEL_53:
    (*(void (**)(uint64_t))(*(void *)(v101 - 8) + 8))(v103);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    return (uint64_t)v119;
  }
  if (!v20[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  int64_t v115 = v117[2];
  uint64_t v69 = v117[4];
  uint64_t v70 = (void *)v117[5];
  swift_bridgeObjectRetain_n();
  uint64_t v116 = v69;
  uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v69, (uint64_t)v70);
  if ((v72 & 1) == 0) {
    goto LABEL_61;
  }
  uint64_t v112 = 0;
  uint64_t v113 = v68;
  char v73 = (void **)(v68 + 7);
  unint64_t v119 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v74 = *(void *)(v20[7] + 8 * v71);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v75 = specialized _arrayForceCast<A, B>(_:)(v74);
    swift_bridgeObjectRelease();
    uint64_t v76 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v75);
    if (v77 == -1) {
      break;
    }
    char v78 = v76;
    uint64_t v79 = v77;
    char v80 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = (int64_t)v70;
    if ((v80 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v119 = v87;
    }
    char v81 = v119[2];
    if (v81 >= v119[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v119 = v88;
    }
    unint64_t v82 = v119;
    v119[2] = v81 + 1;
    uint64_t v83 = &v82[4 * v81];
    uint64_t v84 = v114;
    v83[4] = v116;
    v83[5] = v84;
    v83[6] = v78;
    *((unsigned char *)v83 + 56) = v79;
    if (v115 == 1) {
      goto LABEL_53;
    }
    if (!v20[2]) {
      goto LABEL_59;
    }
    --v115;
    int64_t v85 = (uint64_t)*(v73 - 1);
    uint64_t v70 = *v73;
    swift_bridgeObjectRetain_n();
    uint64_t v116 = v85;
    uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v85, (uint64_t)v70);
    v73 += 2;
    if ((v86 & 1) == 0) {
      goto LABEL_61;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v117 = 0;
  uint64_t v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v89._uint64_t object = (void *)0x80000002272DB160;
  v89._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v89);
  v90._uint64_t countAndFlagsBits = v116;
  v90._uint64_t object = v70;
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._uint64_t countAndFlagsBits = 0x6C6F63206E692027;
  v91._uint64_t object = (void *)0xED000027206E6D75;
  String.append(_:)(v91);
  Swift::String v92 = v101;
  uint64_t v93 = v103;
  v94._uint64_t countAndFlagsBits = Column.name.getter();
  String.append(_:)(v94);
  swift_bridgeObjectRelease();
  v95._uint64_t countAndFlagsBits = 0xD000000000000028;
  v95._uint64_t object = (void *)0x80000002272DB180;
  String.append(_:)(v95);
  Swift::String v96 = v117;
  uint64_t v97 = v118;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(void *)unint64_t v98 = v96;
  *(void *)(v98 + 8) = v97;
  *(_OWORD *)(v98 + 16) = 0u;
  *(_OWORD *)(v98 + 32) = 0u;
  *(unsigned char *)(v98 + 48) = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v93, v92);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  return (uint64_t)v119;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  void *v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(void **, void);
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  char v45;
  uint64_t v46;
  BOOL v47;
  Swift::Int v48;
  unint64_t v49;
  char v50;
  Swift::Bool v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  unint64_t v71;
  char v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  unint64_t v81;
  void *v82;
  void *v83;
  int64_t v84;
  uint64_t v85;
  char v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  Swift::String v94;
  Swift::String v95;
  void *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t result;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void *v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  void *v119;

  uint64_t v103 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Int32]>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int32]>>>);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  Swift::String v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v100 - v10;
  uint64_t v117 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String : Int32]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Int32]>);
  uint64_t v101 = v12;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v109 = v2 + 16;
  v108(v9, v4, v1);
  uint64_t v13 = v1;
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Int32]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Int32]>>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v110 = v4;
  unint64_t v111 = v2 + 8;
  uint64_t v107 = v15;
  v15(v4, v13);
  *(void *)&v9[*(int *)(v6 + 44)] = v117;
  outlined init with take of (offset: Int, element: Layer)?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int32]>>>);
  uint64_t v16 = &v11[*(int *)(v6 + 44)];
  uint64_t v17 = *(void **)v16;
  uint64_t v112 = v11;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v117)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = (void *)MEMORY[0x263F8EE80];
    uint64_t v21 = (uint64_t)v112;
    goto LABEL_37;
  }
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v22 = v13;
  uint64_t v23 = v16;
  uint64_t v20 = (void *)MEMORY[0x263F8EE80];
  uint64_t v105 = v14;
  uint64_t v106 = v13;
  uint64_t v104 = v23;
  while (2)
  {
    uint64_t v24 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    uint64_t v26 = *v25;
    swift_bridgeObjectRetain();
    v24(&v117, 0);
    uint64_t v27 = v110;
    v108(v110, v112, v22);
    dispatch thunk of Collection.formIndex(after:)();
    v107(v27, v22);
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)(v26 + 64);
    uint64_t v113 = (void *)(v26 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v26 + 32);
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v32 = v31 & v29;
    uint64_t v114 = (unint64_t)(v30 + 63) >> 6;
    int64_t v115 = v26;
    if (v32)
    {
LABEL_8:
      uint64_t v116 = (v32 - 1) & v32;
      unint64_t v119 = v28;
      unint64_t v33 = __clz(__rbit64(v32)) | ((void)v28 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      int64_t v34 = (int64_t)v28 + 1;
      uint64_t v21 = (uint64_t)v112;
      if (__OFADD__(v28, 1)) {
        goto LABEL_57;
      }
      if (v34 >= v114) {
        break;
      }
      unint64_t v35 = v113[v34];
      int64_t v36 = (int64_t)v28 + 1;
      if (v35) {
        goto LABEL_22;
      }
      int64_t v36 = (int64_t)v28 + 2;
      if ((uint64_t)v28 + 2 >= v114) {
        break;
      }
      unint64_t v35 = v113[v36];
      if (v35) {
        goto LABEL_22;
      }
      int64_t v36 = (int64_t)v28 + 3;
      if ((uint64_t)v28 + 3 >= v114) {
        break;
      }
      unint64_t v35 = v113[v36];
      if (v35) {
        goto LABEL_22;
      }
      uint64_t v37 = (uint64_t)v28 + 4;
      if ((uint64_t)v28 + 4 >= v114) {
        break;
      }
      unint64_t v35 = v113[v37];
      if (!v35)
      {
        while (1)
        {
          int64_t v36 = v37 + 1;
          if (__OFADD__(v37, 1)) {
            goto LABEL_58;
          }
          if (v36 >= v114) {
            goto LABEL_36;
          }
          unint64_t v35 = v113[v36];
          ++v37;
          if (v35) {
            goto LABEL_22;
          }
        }
      }
      int64_t v36 = (int64_t)v28 + 4;
LABEL_22:
      uint64_t v116 = (v35 - 1) & v35;
      unint64_t v119 = (void *)v36;
      unint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
LABEL_23:
      uint64_t v38 = (uint64_t *)(*(void *)(v115 + 48) + 16 * v33);
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      uint64_t v41 = *(_DWORD *)(*(void *)(v115 + 56) + 4 * v33);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(void *)(v42 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v117 = v20;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
      uint64_t v46 = v20[2];
      BOOL v47 = (v45 & 1) == 0;
      Swift::Int v48 = v46 + v47;
      if (__OFADD__(v46, v47))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      unint64_t v49 = v44;
      char v50 = v45;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Int32]>);
      Swift::Bool v51 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v48);
      uint64_t v20 = v117;
      if (v51)
      {
        unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
        if ((v50 & 1) != (v53 & 1)) {
          goto LABEL_62;
        }
        unint64_t v49 = v52;
      }
      swift_bridgeObjectRelease();
      uint64_t v54 = swift_bridgeObjectRetain();
      if ((v50 & 1) == 0)
      {
        uint64_t v55 = (*(uint64_t (**)(uint64_t))(v42 + 16))(v54);
        v20[(v49 >> 6) + 8] |= 1 << v49;
        uint64_t v56 = (uint64_t *)(v20[6] + 16 * v49);
        uint64_t *v56 = v39;
        v56[1] = v40;
        *(void *)(v20[7] + 8 * v49) = v55;
        uint64_t v57 = v20[2];
        BOOL v58 = __OFADD__(v57, 1);
        uint64_t v59 = v57 + 1;
        if (v58) {
          goto LABEL_56;
        }
        v20[2] = v59;
        swift_bridgeObjectRetain();
      }
      uint64_t v60 = v20[7];
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void *)(v60 + 8 * v49);
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v60 + 8 * v49) = v61;
      if ((v62 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v61 = v64;
        *(void *)(v60 + 8 * v49) = v64;
      }
      unint64_t v63 = *(void *)(v61 + 16);
      if (v63 >= *(void *)(v61 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v61 = v65;
        *(void *)(v60 + 8 * v49) = v65;
      }
      *(void *)(v61 + 16) = v63 + 1;
      *(_DWORD *)(v61 + 4 * v63 + 32) = v41;
      swift_bridgeObjectRelease();
      uint64_t v19 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      uint64_t v18 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      uint64_t v28 = v119;
      unint64_t v32 = v116;
      if (v116) {
        goto LABEL_8;
      }
    }
LABEL_36:
    swift_release();
    unint64_t v119 = *(void **)v104;
    uint64_t v22 = v106;
    dispatch thunk of Collection.endIndex.getter();
    if (v119 != v117) {
      continue;
    }
    break;
  }
LABEL_37:
  outlined destroy of DefaultIndices<DataFrame.Rows>(v21, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int32]>>>);
  swift_bridgeObjectRetain_n();
  uint64_t v66 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v117 = v66;
  uint64_t v67 = v102;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v117);
  if (v67)
  {
LABEL_63:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = v117;
  if (!v117[2])
  {
    unint64_t v119 = (void *)MEMORY[0x263F8EE78];
LABEL_53:
    (*(void (**)(uint64_t))(*(void *)(v101 - 8) + 8))(v103);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    return (uint64_t)v119;
  }
  if (!v20[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  int64_t v115 = v117[2];
  uint64_t v69 = v117[4];
  uint64_t v70 = (void *)v117[5];
  swift_bridgeObjectRetain_n();
  uint64_t v116 = v69;
  uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v69, (uint64_t)v70);
  if ((v72 & 1) == 0) {
    goto LABEL_61;
  }
  uint64_t v112 = 0;
  uint64_t v113 = v68;
  char v73 = (void **)(v68 + 7);
  unint64_t v119 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v74 = *(void *)(v20[7] + 8 * v71);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v75 = specialized _arrayForceCast<A, B>(_:)(v74);
    swift_bridgeObjectRelease();
    uint64_t v76 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v75);
    if (v77 == -1) {
      break;
    }
    char v78 = v76;
    uint64_t v79 = v77;
    char v80 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = (int64_t)v70;
    if ((v80 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v119 = v87;
    }
    char v81 = v119[2];
    if (v81 >= v119[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v119 = v88;
    }
    unint64_t v82 = v119;
    v119[2] = v81 + 1;
    uint64_t v83 = &v82[4 * v81];
    uint64_t v84 = v114;
    v83[4] = v116;
    v83[5] = v84;
    v83[6] = v78;
    *((unsigned char *)v83 + 56) = v79;
    if (v115 == 1) {
      goto LABEL_53;
    }
    if (!v20[2]) {
      goto LABEL_59;
    }
    --v115;
    int64_t v85 = (uint64_t)*(v73 - 1);
    uint64_t v70 = *v73;
    swift_bridgeObjectRetain_n();
    uint64_t v116 = v85;
    uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v85, (uint64_t)v70);
    v73 += 2;
    if ((v86 & 1) == 0) {
      goto LABEL_61;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v117 = 0;
  uint64_t v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v89._uint64_t object = (void *)0x80000002272DB160;
  v89._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v89);
  v90._uint64_t countAndFlagsBits = v116;
  v90._uint64_t object = v70;
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._uint64_t countAndFlagsBits = 0x6C6F63206E692027;
  v91._uint64_t object = (void *)0xED000027206E6D75;
  String.append(_:)(v91);
  Swift::String v92 = v101;
  uint64_t v93 = v103;
  v94._uint64_t countAndFlagsBits = Column.name.getter();
  String.append(_:)(v94);
  swift_bridgeObjectRelease();
  v95._uint64_t countAndFlagsBits = 0xD000000000000028;
  v95._uint64_t object = (void *)0x80000002272DB180;
  String.append(_:)(v95);
  Swift::String v96 = v117;
  uint64_t v97 = v118;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(void *)unint64_t v98 = v96;
  *(void *)(v98 + 8) = v97;
  *(_OWORD *)(v98 + 16) = 0u;
  *(_OWORD *)(v98 + 32) = 0u;
  *(unsigned char *)(v98 + 48) = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v93, v92);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  return (uint64_t)v119;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  void *v17;
  uint64_t (*v18)();
  uint64_t (*v19)@<X0>(uint64_t *@<X8>);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(void **, void);
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  Swift::Int v49;
  unint64_t v50;
  char v51;
  Swift::Bool v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  char v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  char v88;
  void *v89;
  void *v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  Swift::String v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t result;
  void v102[2];
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void *v113;
  int64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  unint64_t v118;

  uint64_t v103 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Double]>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Double]>>>);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  Swift::String v9 = (char *)v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v102 - v10;
  uint64_t v117 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String : Double]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Double]>);
  v102[0] = v12;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v109 = v2 + 16;
  v108(v9, v4, v1);
  uint64_t v13 = v1;
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Double]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Double]>>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v110 = v4;
  unint64_t v111 = v2 + 8;
  uint64_t v107 = v15;
  v15(v4, v13);
  *(void *)&v9[*(int *)(v6 + 44)] = v117;
  outlined init with take of (offset: Int, element: Layer)?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Double]>>>);
  uint64_t v16 = &v11[*(int *)(v6 + 44)];
  uint64_t v17 = *(void **)v16;
  uint64_t v112 = v11;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v117)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = (void *)MEMORY[0x263F8EE80];
    uint64_t v21 = (uint64_t)v112;
    goto LABEL_37;
  }
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v22 = v13;
  uint64_t v23 = v16;
  uint64_t v20 = (void *)MEMORY[0x263F8EE80];
  uint64_t v105 = v14;
  uint64_t v106 = v13;
  uint64_t v104 = v23;
  while (2)
  {
    uint64_t v24 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    uint64_t v26 = *v25;
    swift_bridgeObjectRetain();
    v24(&v117, 0);
    uint64_t v27 = v110;
    v108(v110, v112, v22);
    dispatch thunk of Collection.formIndex(after:)();
    v107(v27, v22);
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)(v26 + 64);
    uint64_t v113 = (void *)(v26 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v26 + 32);
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v32 = v31 & v29;
    uint64_t v114 = (unint64_t)(v30 + 63) >> 6;
    int64_t v115 = v26;
    if ((v31 & v29) != 0)
    {
LABEL_8:
      unint64_t v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      uint64_t v116 = v28;
      int64_t v34 = v33 | ((void)v28 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      unint64_t v35 = (int64_t)v28 + 1;
      uint64_t v21 = (uint64_t)v112;
      if (__OFADD__(v28, 1)) {
        goto LABEL_57;
      }
      if (v35 >= v114) {
        break;
      }
      int64_t v36 = v113[v35];
      uint64_t v37 = (int64_t)v28 + 1;
      if (v36) {
        goto LABEL_22;
      }
      uint64_t v37 = (int64_t)v28 + 2;
      if ((uint64_t)v28 + 2 >= v114) {
        break;
      }
      int64_t v36 = v113[v37];
      if (v36) {
        goto LABEL_22;
      }
      uint64_t v37 = (int64_t)v28 + 3;
      if ((uint64_t)v28 + 3 >= v114) {
        break;
      }
      int64_t v36 = v113[v37];
      if (v36) {
        goto LABEL_22;
      }
      uint64_t v38 = (uint64_t)v28 + 4;
      if ((uint64_t)v28 + 4 >= v114) {
        break;
      }
      int64_t v36 = v113[v38];
      if (!v36)
      {
        while (1)
        {
          uint64_t v37 = v38 + 1;
          if (__OFADD__(v38, 1)) {
            goto LABEL_58;
          }
          if (v37 >= v114) {
            goto LABEL_36;
          }
          int64_t v36 = v113[v37];
          ++v38;
          if (v36) {
            goto LABEL_22;
          }
        }
      }
      uint64_t v37 = (int64_t)v28 + 4;
LABEL_22:
      unint64_t v32 = (v36 - 1) & v36;
      uint64_t v116 = (void *)v37;
      int64_t v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_23:
      uint64_t v39 = (uint64_t *)(*(void *)(v115 + 48) + 16 * v34);
      uint64_t v40 = *v39;
      uint64_t v41 = v39[1];
      uint64_t v42 = *(void *)(*(void *)(v115 + 56) + 8 * v34);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(void *)(v43 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v117 = v20;
      char v45 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      BOOL v47 = v20[2];
      Swift::Int v48 = (v46 & 1) == 0;
      unint64_t v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      char v50 = v45;
      Swift::Bool v51 = v46;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
      unint64_t v52 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49);
      uint64_t v20 = v117;
      if (v52)
      {
        char v53 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
        if ((v51 & 1) != (v54 & 1)) {
          goto LABEL_62;
        }
        char v50 = v53;
      }
      swift_bridgeObjectRelease();
      uint64_t v55 = swift_bridgeObjectRetain();
      if ((v51 & 1) == 0)
      {
        uint64_t v56 = (*(uint64_t (**)(uint64_t))(v43 + 16))(v55);
        v20[(v50 >> 6) + 8] |= 1 << v50;
        uint64_t v57 = (uint64_t *)(v20[6] + 16 * v50);
        *uint64_t v57 = v40;
        v57[1] = v41;
        *(void *)(v20[7] + 8 * v50) = v56;
        BOOL v58 = v20[2];
        uint64_t v59 = __OFADD__(v58, 1);
        uint64_t v60 = v58 + 1;
        if (v59) {
          goto LABEL_56;
        }
        v20[2] = v60;
        swift_bridgeObjectRetain();
      }
      uint64_t v61 = v20[7];
      swift_bridgeObjectRelease();
      char v62 = *(void *)(v61 + 8 * v50);
      unint64_t v63 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v61 + 8 * v50) = v62;
      if ((v63 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        char v62 = v65;
        *(void *)(v61 + 8 * v50) = v65;
      }
      unint64_t v64 = *(void *)(v62 + 16);
      if (v64 >= *(void *)(v62 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        char v62 = v66;
        *(void *)(v61 + 8 * v50) = v66;
      }
      *(void *)(v62 + 16) = v64 + 1;
      *(void *)(v62 + 8 * v64 + 32) = v42;
      swift_bridgeObjectRelease();
      uint64_t v19 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      uint64_t v18 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      uint64_t v28 = v116;
      if (v32) {
        goto LABEL_8;
      }
    }
LABEL_36:
    swift_release();
    uint64_t v116 = *(void **)v104;
    uint64_t v22 = v106;
    dispatch thunk of Collection.endIndex.getter();
    if (v116 != v117) {
      continue;
    }
    break;
  }
LABEL_37:
  outlined destroy of DefaultIndices<DataFrame.Rows>(v21, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Double]>>>);
  swift_bridgeObjectRetain_n();
  uint64_t v67 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v117 = v67;
  uint64_t v68 = v102[1];
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v117);
  if (v68)
  {
LABEL_63:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v69 = v117;
  if (!v117[2])
  {
    uint64_t v116 = (void *)MEMORY[0x263F8EE78];
LABEL_53:
    (*(void (**)(uint64_t))(*(void *)(v102[0] - 8) + 8))(v103);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    return (uint64_t)v116;
  }
  if (!v20[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v114 = v117[2];
  uint64_t v70 = v117[4];
  uint64_t v71 = (void *)v117[5];
  swift_bridgeObjectRetain_n();
  int64_t v115 = v70;
  unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, (uint64_t)v71);
  if ((v73 & 1) == 0) {
    goto LABEL_61;
  }
  unint64_t v111 = 0;
  uint64_t v112 = (char *)v69;
  uint64_t v74 = (void **)(v69 + 7);
  uint64_t v116 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v75 = *(void *)(v20[7] + 8 * v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v76 = specialized _arrayForceCast<A, B>(_:)(v75);
    swift_bridgeObjectRelease();
    uint64_t v77 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v76);
    if (v78 == -1) {
      break;
    }
    uint64_t v79 = v77;
    char v80 = v78;
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v113 = v71;
    if ((v81 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v116 = v89;
    }
    unint64_t v82 = v116[2];
    if (v82 >= v116[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v116 = v90;
    }
    uint64_t v84 = v115;
    uint64_t v83 = v116;
    v116[2] = v82 + 1;
    int64_t v85 = &v83[4 * v82];
    uint64_t v86 = v113;
    v85[4] = v84;
    v85[5] = v86;
    v85[6] = v79;
    *((unsigned char *)v85 + 56) = v80;
    if (v114 == 1) {
      goto LABEL_53;
    }
    if (!v20[2]) {
      goto LABEL_59;
    }
    --v114;
    char v87 = (uint64_t)*(v74 - 1);
    uint64_t v71 = *v74;
    swift_bridgeObjectRetain_n();
    int64_t v115 = v87;
    unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v87, (uint64_t)v71);
    v74 += 2;
    if ((v88 & 1) == 0) {
      goto LABEL_61;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v117 = 0;
  uint64_t v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v91._uint64_t object = (void *)0x80000002272DB160;
  v91._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v91);
  v92._uint64_t countAndFlagsBits = v115;
  v92._uint64_t object = v71;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._uint64_t countAndFlagsBits = 0x6C6F63206E692027;
  v93._uint64_t object = (void *)0xED000027206E6D75;
  String.append(_:)(v93);
  uint64_t v94 = v102[0];
  Swift::String v95 = v103;
  v96._uint64_t countAndFlagsBits = Column.name.getter();
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._uint64_t countAndFlagsBits = 0xD000000000000028;
  v97._uint64_t object = (void *)0x80000002272DB180;
  String.append(_:)(v97);
  unint64_t v98 = v117;
  uint64_t v99 = v118;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(void *)uint64_t v100 = v98;
  *(void *)(v100 + 8) = v99;
  *(_OWORD *)(v100 + 16) = 0u;
  *(_OWORD *)(v100 + 32) = 0u;
  *(unsigned char *)(v100 + 48) = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v95, v94);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  return (uint64_t)v116;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  void *v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(void **, void);
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  Swift::Int v49;
  unint64_t v50;
  char v51;
  Swift::Bool v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  char v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  char v88;
  void *v89;
  void *v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  Swift::String v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t result;
  void v102[2];
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void *v113;
  int64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  unint64_t v118;

  uint64_t v103 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Float]>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Float]>>>);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  Swift::String v9 = (char *)v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v102 - v10;
  uint64_t v117 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String : Float]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Float]>);
  v102[0] = v12;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v109 = v2 + 16;
  v108(v9, v4, v1);
  uint64_t v13 = v1;
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Float]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Float]>>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v110 = v4;
  unint64_t v111 = v2 + 8;
  uint64_t v107 = v15;
  v15(v4, v13);
  *(void *)&v9[*(int *)(v6 + 44)] = v117;
  outlined init with take of (offset: Int, element: Layer)?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Float]>>>);
  uint64_t v16 = &v11[*(int *)(v6 + 44)];
  uint64_t v17 = *(void **)v16;
  uint64_t v112 = v11;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v117)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = (void *)MEMORY[0x263F8EE80];
    uint64_t v21 = (uint64_t)v112;
    goto LABEL_37;
  }
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v22 = v13;
  uint64_t v23 = v16;
  uint64_t v20 = (void *)MEMORY[0x263F8EE80];
  uint64_t v105 = v14;
  uint64_t v106 = v13;
  uint64_t v104 = v23;
  while (2)
  {
    uint64_t v24 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    uint64_t v26 = *v25;
    swift_bridgeObjectRetain();
    v24(&v117, 0);
    uint64_t v27 = v110;
    v108(v110, v112, v22);
    dispatch thunk of Collection.formIndex(after:)();
    v107(v27, v22);
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)(v26 + 64);
    uint64_t v113 = (void *)(v26 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v26 + 32);
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v32 = v31 & v29;
    uint64_t v114 = (unint64_t)(v30 + 63) >> 6;
    int64_t v115 = v26;
    if ((v31 & v29) != 0)
    {
LABEL_8:
      unint64_t v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      uint64_t v116 = v28;
      int64_t v34 = v33 | ((void)v28 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      unint64_t v35 = (int64_t)v28 + 1;
      uint64_t v21 = (uint64_t)v112;
      if (__OFADD__(v28, 1)) {
        goto LABEL_57;
      }
      if (v35 >= v114) {
        break;
      }
      int64_t v36 = v113[v35];
      uint64_t v37 = (int64_t)v28 + 1;
      if (v36) {
        goto LABEL_22;
      }
      uint64_t v37 = (int64_t)v28 + 2;
      if ((uint64_t)v28 + 2 >= v114) {
        break;
      }
      int64_t v36 = v113[v37];
      if (v36) {
        goto LABEL_22;
      }
      uint64_t v37 = (int64_t)v28 + 3;
      if ((uint64_t)v28 + 3 >= v114) {
        break;
      }
      int64_t v36 = v113[v37];
      if (v36) {
        goto LABEL_22;
      }
      uint64_t v38 = (uint64_t)v28 + 4;
      if ((uint64_t)v28 + 4 >= v114) {
        break;
      }
      int64_t v36 = v113[v38];
      if (!v36)
      {
        while (1)
        {
          uint64_t v37 = v38 + 1;
          if (__OFADD__(v38, 1)) {
            goto LABEL_58;
          }
          if (v37 >= v114) {
            goto LABEL_36;
          }
          int64_t v36 = v113[v37];
          ++v38;
          if (v36) {
            goto LABEL_22;
          }
        }
      }
      uint64_t v37 = (int64_t)v28 + 4;
LABEL_22:
      unint64_t v32 = (v36 - 1) & v36;
      uint64_t v116 = (void *)v37;
      int64_t v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_23:
      uint64_t v39 = (uint64_t *)(*(void *)(v115 + 48) + 16 * v34);
      uint64_t v40 = *v39;
      uint64_t v41 = v39[1];
      uint64_t v42 = *(_DWORD *)(*(void *)(v115 + 56) + 4 * v34);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(void *)(v43 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v117 = v20;
      char v45 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      BOOL v47 = v20[2];
      Swift::Int v48 = (v46 & 1) == 0;
      unint64_t v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      char v50 = v45;
      Swift::Bool v51 = v46;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Float]>);
      unint64_t v52 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49);
      uint64_t v20 = v117;
      if (v52)
      {
        char v53 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
        if ((v51 & 1) != (v54 & 1)) {
          goto LABEL_62;
        }
        char v50 = v53;
      }
      swift_bridgeObjectRelease();
      uint64_t v55 = swift_bridgeObjectRetain();
      if ((v51 & 1) == 0)
      {
        uint64_t v56 = (*(uint64_t (**)(uint64_t))(v43 + 16))(v55);
        v20[(v50 >> 6) + 8] |= 1 << v50;
        uint64_t v57 = (uint64_t *)(v20[6] + 16 * v50);
        *uint64_t v57 = v40;
        v57[1] = v41;
        *(void *)(v20[7] + 8 * v50) = v56;
        BOOL v58 = v20[2];
        uint64_t v59 = __OFADD__(v58, 1);
        uint64_t v60 = v58 + 1;
        if (v59) {
          goto LABEL_56;
        }
        v20[2] = v60;
        swift_bridgeObjectRetain();
      }
      uint64_t v61 = v20[7];
      swift_bridgeObjectRelease();
      char v62 = *(void *)(v61 + 8 * v50);
      unint64_t v63 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v61 + 8 * v50) = v62;
      if ((v63 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        char v62 = v65;
        *(void *)(v61 + 8 * v50) = v65;
      }
      unint64_t v64 = *(void *)(v62 + 16);
      if (v64 >= *(void *)(v62 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        char v62 = v66;
        *(void *)(v61 + 8 * v50) = v66;
      }
      *(void *)(v62 + 16) = v64 + 1;
      *(_DWORD *)(v62 + 4 * v64 + 32) = v42;
      swift_bridgeObjectRelease();
      uint64_t v19 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      uint64_t v18 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      uint64_t v28 = v116;
      if (v32) {
        goto LABEL_8;
      }
    }
LABEL_36:
    swift_release();
    uint64_t v116 = *(void **)v104;
    uint64_t v22 = v106;
    dispatch thunk of Collection.endIndex.getter();
    if (v116 != v117) {
      continue;
    }
    break;
  }
LABEL_37:
  outlined destroy of DefaultIndices<DataFrame.Rows>(v21, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Float]>>>);
  swift_bridgeObjectRetain_n();
  uint64_t v67 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v117 = v67;
  uint64_t v68 = v102[1];
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v117);
  if (v68)
  {
LABEL_63:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v69 = v117;
  if (!v117[2])
  {
    uint64_t v116 = (void *)MEMORY[0x263F8EE78];
LABEL_53:
    (*(void (**)(uint64_t))(*(void *)(v102[0] - 8) + 8))(v103);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    return (uint64_t)v116;
  }
  if (!v20[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v114 = v117[2];
  uint64_t v70 = v117[4];
  uint64_t v71 = (void *)v117[5];
  swift_bridgeObjectRetain_n();
  int64_t v115 = v70;
  unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, (uint64_t)v71);
  if ((v73 & 1) == 0) {
    goto LABEL_61;
  }
  unint64_t v111 = 0;
  uint64_t v112 = (char *)v69;
  uint64_t v74 = (void **)(v69 + 7);
  uint64_t v116 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v75 = *(void *)(v20[7] + 8 * v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v76 = specialized _arrayForceCast<A, B>(_:)(v75);
    swift_bridgeObjectRelease();
    uint64_t v77 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v76);
    if (v78 == -1) {
      break;
    }
    uint64_t v79 = v77;
    char v80 = v78;
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v113 = v71;
    if ((v81 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v116 = v89;
    }
    unint64_t v82 = v116[2];
    if (v82 >= v116[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v116 = v90;
    }
    uint64_t v84 = v115;
    uint64_t v83 = v116;
    v116[2] = v82 + 1;
    int64_t v85 = &v83[4 * v82];
    uint64_t v86 = v113;
    v85[4] = v84;
    v85[5] = v86;
    v85[6] = v79;
    *((unsigned char *)v85 + 56) = v80;
    if (v114 == 1) {
      goto LABEL_53;
    }
    if (!v20[2]) {
      goto LABEL_59;
    }
    --v114;
    char v87 = (uint64_t)*(v74 - 1);
    uint64_t v71 = *v74;
    swift_bridgeObjectRetain_n();
    int64_t v115 = v87;
    unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v87, (uint64_t)v71);
    v74 += 2;
    if ((v88 & 1) == 0) {
      goto LABEL_61;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v117 = 0;
  uint64_t v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v91._uint64_t object = (void *)0x80000002272DB160;
  v91._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v91);
  v92._uint64_t countAndFlagsBits = v115;
  v92._uint64_t object = v71;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._uint64_t countAndFlagsBits = 0x6C6F63206E692027;
  v93._uint64_t object = (void *)0xED000027206E6D75;
  String.append(_:)(v93);
  uint64_t v94 = v102[0];
  Swift::String v95 = v103;
  v96._uint64_t countAndFlagsBits = Column.name.getter();
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._uint64_t countAndFlagsBits = 0xD000000000000028;
  v97._uint64_t object = (void *)0x80000002272DB180;
  String.append(_:)(v97);
  unint64_t v98 = v117;
  uint64_t v99 = v118;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(void *)uint64_t v100 = v98;
  *(void *)(v100 + 8) = v99;
  *(_OWORD *)(v100 + 16) = 0u;
  *(_OWORD *)(v100 + 32) = 0u;
  *(unsigned char *)(v100 + 48) = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v94 - 8) + 8))(v95, v94);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  return (uint64_t)v116;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t *v16;
  void *v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  void *v20;
  uint64_t v21;
  void (*v22)(void **, void);
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  char v45;
  uint64_t v46;
  BOOL v47;
  Swift::Int v48;
  unint64_t v49;
  char v50;
  Swift::Bool v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  int64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  char v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t v92;
  Swift::String v93;
  Swift::String v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t result;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  _OWORD *v114;
  void *v115;
  uint64_t (*v116)();
  int64_t v117;
  uint64_t v118;
  unsigned char v119[32];
  long long v120;
  _OWORD v121[2];
  void *v122;
  unint64_t v123;
  char v124;
  void *v125;

  uint64_t v102 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Any?]>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Any?]>>>);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  Swift::String v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v99 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t v122 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[String : Any?]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Any?]>);
  uint64_t v100 = v12;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v108 = v2 + 16;
  uint64_t v107 = v13;
  v13(v9, v4, v1);
  uint64_t v14 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Any?]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Any?]>>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v109 = v4;
  uint64_t v110 = v2 + 8;
  uint64_t v106 = v15;
  v15(v4, v1);
  *(void *)&v9[*(int *)(v6 + 44)] = v122;
  outlined init with take of (offset: Int, element: Layer)?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Any?]>>>);
  uint64_t v16 = (uint64_t *)&v11[*(int *)(v6 + 44)];
  uint64_t v17 = (void *)*v16;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v122)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_43;
  }
  uint64_t v21 = v1;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v114 = v121;
  uint64_t v20 = (void *)MEMORY[0x263F8EE80];
  uint64_t v116 = (uint64_t (*)())&v124;
  uint64_t v105 = v21;
  unint64_t v111 = v14;
  uint64_t v104 = v16;
  do
  {
    uint64_t v22 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    uint64_t v24 = *v23;
    swift_bridgeObjectRetain();
    v22(&v122, 0);
    uint64_t v25 = v109;
    v107(v109, v11, v21);
    dispatch thunk of Collection.formIndex(after:)();
    v106(v25, v21);
    uint64_t v117 = 0;
    uint64_t v26 = *(void *)(v24 + 64);
    uint64_t v112 = v24 + 64;
    int64_t v115 = (void *)v24;
    uint64_t v27 = 1 << *(unsigned char *)(v24 + 32);
    if (v27 < 64) {
      uint64_t v28 = ~(-1 << v27);
    }
    else {
      uint64_t v28 = -1;
    }
    uint64_t v29 = v28 & v26;
    uint64_t v113 = (unint64_t)(v27 + 63) >> 6;
    uint64_t v103 = v113 - 1;
    if ((v28 & v26) != 0)
    {
LABEL_8:
      uint64_t v30 = __clz(__rbit64(v29));
      uint64_t v31 = (v29 - 1) & v29;
      unint64_t v32 = v30 | (v117 << 6);
LABEL_9:
      unint64_t v33 = v115[7];
      int64_t v34 = (void *)(v115[6] + 16 * v32);
      unint64_t v35 = v34[1];
      *(void *)&uint64_t v120 = *v34;
      *((void *)&v120 + 1) = v35;
      outlined init with copy of Any?(v33 + 32 * v32, (uint64_t)v114);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    while (1)
    {
      int64_t v36 = v117 + 1;
      if (__OFADD__(v117, 1)) {
        goto LABEL_64;
      }
      if (v36 < v113)
      {
        uint64_t v37 = *(void *)(v112 + 8 * v36);
        if (v37) {
          goto LABEL_13;
        }
        uint64_t v38 = v117 + 2;
        ++v117;
        if (v36 + 1 < v113)
        {
          uint64_t v37 = *(void *)(v112 + 8 * v38);
          if (v37) {
            goto LABEL_16;
          }
          uint64_t v117 = v36 + 1;
          if (v36 + 2 < v113)
          {
            uint64_t v37 = *(void *)(v112 + 8 * (v36 + 2));
            if (v37)
            {
              v36 += 2;
              goto LABEL_13;
            }
            uint64_t v38 = v36 + 3;
            uint64_t v117 = v36 + 2;
            if (v36 + 3 < v113)
            {
              uint64_t v37 = *(void *)(v112 + 8 * v38);
              if (v37)
              {
LABEL_16:
                int64_t v36 = v38;
LABEL_13:
                uint64_t v31 = (v37 - 1) & v37;
                unint64_t v32 = __clz(__rbit64(v37)) + (v36 << 6);
                uint64_t v117 = v36;
                goto LABEL_9;
              }
              while (1)
              {
                int64_t v36 = v38 + 1;
                if (__OFADD__(v38, 1)) {
                  break;
                }
                if (v36 >= v113)
                {
                  uint64_t v117 = v103;
                  goto LABEL_27;
                }
                uint64_t v37 = *(void *)(v112 + 8 * v36);
                ++v38;
                if (v37) {
                  goto LABEL_13;
                }
              }
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }
          }
        }
      }
LABEL_27:
      uint64_t v31 = 0;
      memset(v121, 0, sizeof(v121));
      uint64_t v120 = 0u;
LABEL_28:
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)&v120, (uint64_t)&v122, &demangling cache variable for type metadata for (key: String, value: Any?)?);
      uint64_t v39 = v123;
      if (!v123) {
        break;
      }
      uint64_t v118 = v31;
      uint64_t v40 = v11;
      uint64_t v41 = (uint64_t)v122;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v116, (uint64_t)&v120, &demangling cache variable for type metadata for Any?);
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
      outlined init with copy of Any?((uint64_t)&v120, (uint64_t)v119);
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(void *)(v42 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v125 = v20;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v39);
      uint64_t v46 = v20[2];
      BOOL v47 = (v45 & 1) == 0;
      Swift::Int v48 = v46 + v47;
      if (__OFADD__(v46, v47))
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      unint64_t v49 = v44;
      char v50 = v45;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Any?]>);
      Swift::Bool v51 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v48);
      uint64_t v20 = v125;
      if (v51)
      {
        unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v39);
        if ((v50 & 1) != (v53 & 1)) {
          goto LABEL_69;
        }
        unint64_t v49 = v52;
      }
      swift_bridgeObjectRelease();
      uint64_t v54 = swift_bridgeObjectRetain();
      if ((v50 & 1) == 0)
      {
        uint64_t v55 = (*(uint64_t (**)(uint64_t))(v42 + 16))(v54);
        v20[(v49 >> 6) + 8] |= 1 << v49;
        uint64_t v56 = (uint64_t *)(v20[6] + 16 * v49);
        uint64_t *v56 = v41;
        v56[1] = v39;
        *(void *)(v20[7] + 8 * v49) = v55;
        uint64_t v57 = v20[2];
        BOOL v58 = __OFADD__(v57, 1);
        uint64_t v59 = v57 + 1;
        if (v58) {
          goto LABEL_63;
        }
        v20[2] = v59;
        swift_bridgeObjectRetain();
      }
      uint64_t v60 = v20[7];
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void *)(v60 + 8 * v49);
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v60 + 8 * v49) = v61;
      if ((v62 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v61 = v64;
        *(void *)(v60 + 8 * v49) = v64;
      }
      unint64_t v63 = *(void *)(v61 + 16);
      if (v63 >= *(void *)(v61 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v61 = v65;
        *(void *)(v60 + 8 * v49) = v65;
      }
      *(void *)(v61 + 16) = v63 + 1;
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)v119, v61 + 32 * v63 + 32, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease();
      outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v120, &demangling cache variable for type metadata for Any?);
      uint64_t v19 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      uint64_t v18 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      uint64_t v11 = v40;
      uint64_t v29 = v118;
      if (v118) {
        goto LABEL_8;
      }
    }
    swift_release();
    uint64_t v118 = *v104;
    uint64_t v21 = v105;
    dispatch thunk of Collection.endIndex.getter();
  }
  while ((void *)v118 != v122);
LABEL_43:
  outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Any?]>>>);
  swift_bridgeObjectRetain_n();
  uint64_t v66 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v122 = v66;
  uint64_t v67 = v101;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v122);
  if (v67)
  {
LABEL_70:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = v122;
  uint64_t v69 = v122[2];
  if (!v69)
  {
    uint64_t v75 = MEMORY[0x263F8EE78];
    goto LABEL_60;
  }
  if (!v20[2]) {
    goto LABEL_67;
  }
  uint64_t v116 = v19;
  uint64_t v117 = v69;
  uint64_t v70 = v122[4];
  uint64_t v71 = (void *)v122[5];
  swift_bridgeObjectRetain_n();
  uint64_t v118 = v70;
  unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, (uint64_t)v71);
  if ((v73 & 1) == 0)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_69:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v114 = 0;
  int64_t v115 = v68;
  uint64_t v74 = (void **)(v68 + 7);
  uint64_t v75 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v76 = *(void *)(v20[7] + 8 * v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v77 = specialized _arrayForceCast<A, B>(_:)(v76);
    swift_bridgeObjectRelease();
    char v78 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v77);
    if (v79 == -1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v122 = 0;
      uint64_t v123 = 0xE000000000000000;
      _StringGuts.grow(_:)(77);
      v89._uint64_t object = (void *)0x80000002272DB160;
      v89._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v89);
      v90._uint64_t countAndFlagsBits = v118;
      v90._uint64_t object = v71;
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      v91._uint64_t countAndFlagsBits = 0x6C6F63206E692027;
      v91._uint64_t object = (void *)0xED000027206E6D75;
      String.append(_:)(v91);
      Swift::String v92 = v100;
      uint64_t v75 = v102;
      v93._uint64_t countAndFlagsBits = Column.name.getter();
      String.append(_:)(v93);
      swift_bridgeObjectRelease();
      v94._uint64_t countAndFlagsBits = 0xD000000000000028;
      v94._uint64_t object = (void *)0x80000002272DB180;
      String.append(_:)(v94);
      Swift::String v95 = v122;
      Swift::String v96 = v123;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(void *)uint64_t v97 = v95;
      *(void *)(v97 + 8) = v96;
      *(_OWORD *)(v97 + 16) = 0u;
      *(_OWORD *)(v97 + 32) = 0u;
      *(unsigned char *)(v97 + 48) = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v75, v92);
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v116);
      return v75;
    }
    char v80 = v78;
    char v81 = v79;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v75 = v87;
    }
    unint64_t v82 = *(void *)(v75 + 16);
    uint64_t v83 = v75;
    if (v82 >= *(void *)(v75 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v83 = v88;
    }
    *(void *)(v83 + 16) = v82 + 1;
    uint64_t v75 = v83;
    uint64_t v84 = v83 + 32 * v82;
    *(void *)(v84 + 32) = v118;
    *(void *)(v84 + 40) = v71;
    *(void *)(v84 + 48) = v80;
    *(unsigned char *)(v84 + 56) = v81;
    if (v117 == 1) {
      break;
    }
    if (!v20[2]) {
      goto LABEL_65;
    }
    --v117;
    int64_t v85 = (uint64_t)*(v74 - 1);
    uint64_t v71 = *v74;
    swift_bridgeObjectRetain_n();
    uint64_t v118 = v85;
    unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v85, (uint64_t)v71);
    v74 += 2;
    if ((v86 & 1) == 0) {
      goto LABEL_68;
    }
  }
  uint64_t v19 = v116;
LABEL_60:
  (*(void (**)(uint64_t))(*(void *)(v100 - 8) + 8))(v102);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v18);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  return v75;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DynamicType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  long long v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  long long v36;
  uint64_t v37;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v5 = v2;
    do
    {
      outlined init with copy of Any?(v3, (uint64_t)&v36);
      outlined init with take of (offset: Int, element: Layer)?((uint64_t)&v36, (uint64_t)&v32, &demangling cache variable for type metadata for Any?);
      if (v33)
      {
        outlined init with take of Any(&v32, v34);
        outlined init with take of Any(v34, &v32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v4 = v7;
        }
        uint64_t v6 = *(void *)(v4 + 16);
        if (v6 >= *(void *)(v4 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v4 = v8;
        }
        *(void *)(v4 + 16) = v6 + 1;
        outlined init with take of Any(&v32, (_OWORD *)(v4 + 32 * v6 + 32));
      }
      else
      {
        outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
      }
      v3 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  specialized Collection.first.getter(v4, v34);
  swift_bridgeObjectRelease();
  if (!v35)
  {
    swift_bridgeObjectRelease();
    outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v34, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  outlined init with take of Any(v34, &v36);
  __swift_project_boxed_opaque_existential_1(&v36, v37);
  DynamicType = swift_getDynamicType();
  if (!v2)
  {
LABEL_23:
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 0;
    }
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 2;
    }
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 1;
    }
    if (swift_dynamicCastMetatype()
      || (type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber), swift_dynamicCastMetatype()))
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 3;
    }
    if (swift_dynamicCastMetatype())
    {
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = MEMORY[0x263F8EE78];
      if (v15)
      {
        uint64_t v29 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v17 = a1 + 32;
        do
        {
          outlined init with copy of Any?(v17, (uint64_t)v34);
          outlined init with copy of Any?((uint64_t)v34, (uint64_t)&v30);
          if (v31)
          {
            outlined init with take of Any(&v30, &v32);
            swift_dynamicCast();
            uint64_t v18 = v27;
            uint64_t v19 = v28;
          }
          else
          {
            outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
            uint64_t v18 = 0;
            uint64_t v19 = 0xE000000000000000;
          }
          outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v34, &demangling cache variable for type metadata for Any?);
          uint64_t v16 = v29;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v16 = v29;
          }
          uint64_t v20 = *(void *)(v16 + 16);
          uint64_t v21 = v20 + 1;
          if (v20 >= *(void *)(v16 + 24) >> 1)
          {
            uint64_t v25 = *(void *)(v16 + 16);
            uint64_t v26 = v20 + 1;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v20 = v25;
            uint64_t v21 = v26;
            uint64_t v16 = v29;
          }
          *(void *)(v16 + 16) = v21;
          uint64_t v22 = v16 + 16 * v20;
          *(void *)(v22 + 32) = v18;
          *(void *)(v22 + 40) = v19;
          v17 += 32;
          --v15;
        }
        while (v15);
      }
      specialized Set.init<A>(_:)(v16);
      swift_bridgeObjectRetain();
      specialized _copyCollectionToContiguousArray<A>(_:)();
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      v34[0] = v24;
      specialized MutableCollection<>.sort(by:)(v34);
      swift_bridgeObjectRelease();
      uint64_t v13 = v34[0];
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      swift_bridgeObjectRelease();
      return v13;
    }
    swift_bridgeObjectRelease();
LABEL_28:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
    return 0;
  }
  uint64_t v10 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any?(v10, (uint64_t)v34);
    uint64_t v11 = v35;
    outlined init with copy of Any?((uint64_t)v34, (uint64_t)&v32);
    if (v11) {
      break;
    }
    outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
    outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v34, &demangling cache variable for type metadata for Any?);
LABEL_21:
    v10 += 32;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  outlined init with copy of Any?((uint64_t)&v32, (uint64_t)&v30);
  if (v31)
  {
    __swift_project_boxed_opaque_existential_1(&v30, v31);
    uint64_t v12 = swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v30);
    outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
    outlined destroy of DefaultIndices<DataFrame.Rows>((uint64_t)v34, &demangling cache variable for type metadata for Any?);
    if (v12 != DynamicType)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void static ColumnDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, void *a7, char a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static ColumnDescriptor.ColumnTypeDescriptor.== infix(_:_:)(a3, a4, a7, a8);
  }
}

uint64_t ColumnDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6373654465707974 && a2 == 0xEE00726F74706972)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t ColumnDescriptor.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x6373654465707974;
  }
  else {
    return 1701667182;
  }
}

void ColumnDescriptor.encode(to:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ColumnDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_41_1();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  OUTLINED_FUNCTION_8_1();
}

uint64_t ColumnDescriptor.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ColumnDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_41_18();
    v7(v6);
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v8, v9);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v8, v9);
  }
  return v4;
}

void static ColumnDescriptor.ColumnTypeDescriptor.== infix(_:_:)(void *a1, char a2, void *a3, char a4)
{
  switch(a2)
  {
    case 4:
      if (a4 == 4) {
        specialized static Array<A>.== infix(_:_:)(a1, a3);
      }
      break;
    case 5:
      if (a4 == 5) {
        specialized static Array<A>.== infix(_:_:)((uint64_t)a1, (uint64_t)a3);
      }
      break;
    default:
      return;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ColumnDescriptor.CodingKeys()
{
  return ColumnDescriptor.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ColumnDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ColumnDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ColumnDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ColumnDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ColumnDescriptor@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ColumnDescriptor.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance ColumnDescriptor()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor(uint64_t a1, uint64_t a2)
{
  static ColumnDescriptor.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), *(unsigned char *)(a2 + 24));
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, uint64_t a2)
{
  static ColumnDescriptor.ColumnTypeDescriptor.== infix(_:_:)(*(void **)a1, *(unsigned char *)(a1 + 8), *(void **)a2, *(unsigned char *)(a2 + 8));
}

uint64_t specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)()
{
  return MEMORY[0x263F8EE78];
}

CreateML::ColumnDescriptor::FeatureType_optional __swiftcall ColumnDescriptor.FeatureType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ColumnDescriptor.FeatureType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return (CreateML::ColumnDescriptor::FeatureType_optional)10;
  }
  else {
    return (CreateML::ColumnDescriptor::FeatureType_optional)v3;
  }
}

uint64_t ColumnDescriptor.FeatureType.rawValue.getter(char a1)
{
  uint64_t result = 7630441;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x363174616F6C66;
      break;
    case 2:
      uint64_t result = 0x74616F6C66;
      break;
    case 3:
      uint64_t result = 0x656C62756F64;
      break;
    case 4:
      uint64_t result = 0x6570616853746E69;
      break;
    case 5:
    case 6:
      uint64_t result = 0xD000000000000012;
      break;
    case 7:
      uint64_t result = 0xD000000000000011;
      break;
    case 8:
      uint64_t result = OUTLINED_FUNCTION_19_35();
      break;
    case 9:
      uint64_t result = 0x616E6F6974636964;
      break;
    default:
      return result;
  }
  return result;
}

CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional __swiftcall ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional)4;
  }
  else {
    return (CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional)v3;
  }
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.rawValue.getter()
{
  uint64_t result = OUTLINED_FUNCTION_39_20();
  switch(v1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_42_20();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_19_35();
      break;
    case 3:
      uint64_t result = 0x7470697263736564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.stringValue.getter()
{
  uint64_t result = OUTLINED_FUNCTION_39_20();
  switch(v1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_42_20();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_19_35();
      break;
    case 3:
      uint64_t result = 0x7470697263736564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor.FeatureType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ColumnDescriptor.FeatureType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ColumnDescriptor.FeatureType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColumnDescriptor.FeatureType(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

CreateML::ColumnDescriptor::FeatureType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ColumnDescriptor.FeatureType@<W0>(Swift::String *a1@<X0>, CreateML::ColumnDescriptor::FeatureType_optional *a2@<X8>)
{
  result.unint64_t value = ColumnDescriptor.FeatureType.init(rawValue:)(*a1).value;
  a2->unint64_t value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ColumnDescriptor.FeatureType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ColumnDescriptor.FeatureType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ColumnDescriptor.FeatureType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ColumnDescriptor.FeatureType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys@<W0>(Swift::String *a1@<X0>, CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional *a2@<X8>)
{
  result.unint64_t value = ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(rawValue:)(*a1).value;
  a2->unint64_t value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  return ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.stringValue.getter();
}

CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys@<W0>(uint64_t a1@<X0>, CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional *a2@<X8>)
{
  result.unint64_t value = ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->unint64_t value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ColumnDescriptor.ColumnTypeDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_24_4();
  uint64_t v4 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    switch((char)v22)
    {
      case 1:
        uint64_t v8 = OUTLINED_FUNCTION_7_50();
        v9(v8);
        uint64_t v4 = 1;
        break;
      case 2:
        uint64_t v10 = OUTLINED_FUNCTION_7_50();
        v11(v10);
        uint64_t v4 = 2;
        break;
      case 3:
        uint64_t v12 = OUTLINED_FUNCTION_7_50();
        v13(v12);
        uint64_t v4 = 3;
        break;
      case 4:
      case 6:
      case 7:
        uint64_t v4 = OUTLINED_FUNCTION_13_43();
        uint64_t v16 = OUTLINED_FUNCTION_7_50();
        v17(v16);
        break;
      case 5:
        uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v14 = OUTLINED_FUNCTION_7_50();
        v15(v14);
        break;
      case 8:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
        OUTLINED_FUNCTION_25_33();
        uint64_t v18 = OUTLINED_FUNCTION_7_50();
        v19(v18);
        uint64_t v4 = v22;
        break;
      case 9:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
        lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor);
        OUTLINED_FUNCTION_25_33();
        uint64_t v20 = OUTLINED_FUNCTION_7_50();
        v21(v20);
        uint64_t v4 = v22;
        break;
      default:
        uint64_t v6 = OUTLINED_FUNCTION_7_50();
        v7(v6);
        uint64_t v4 = 0;
        break;
    }
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v4;
}

void ColumnDescriptor.ColumnTypeDescriptor.encode(to:)()
{
  OUTLINED_FUNCTION_9_0();
  char v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ColumnDescriptor.ColumnTypeDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_41_1();
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  ColumnDescriptor.ColumnTypeDescriptor.featureType.getter(v5, v3);
  lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v0)
  {
    switch(v3)
    {
      case 4:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
        goto LABEL_6;
      case 5:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ColumnDescriptor]);
        lazy protocol witness table accessor for type [ColumnDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [ColumnDescriptor] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ColumnDescriptor and conformance ColumnDescriptor);
LABEL_6:
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        break;
      case 6:
        break;
      default:
        KeyedEncodingContainer.encode(_:forKey:)();
        break;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
  OUTLINED_FUNCTION_8_1();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ColumnDescriptor.ColumnTypeDescriptor@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ColumnDescriptor.ColumnTypeDescriptor.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance ColumnDescriptor.ColumnTypeDescriptor()
{
}

void outlined consume of MLMultiArray??(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t outlined consume of [Double]??(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
      }
      return;
    }
    goto LABEL_144;
  }
  Swift::Int v5 = v4;
  uint64_t v99 = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v100 = v3;
  uint64_t v97 = a1;
  if (v3 <= 0)
  {
    uint64_t v101 = (char *)MEMORY[0x263F8EE78];
    unint64_t v31 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v99 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    uint64_t v89 = *v97;
    while (1)
    {
      unint64_t v90 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v89) {
        goto LABEL_153;
      }
      Swift::String v91 = v101;
      uint64_t v92 = *(void *)&v101[16 * v90 + 32];
      uint64_t v93 = *(void *)&v101[16 * v31 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)();
      if (v1) {
        goto LABEL_106;
      }
      if (v93 < v92) {
        goto LABEL_139;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v91 = specialized _ArrayBuffer._consumeAndCreateNew()();
      }
      if (v90 >= *((void *)v91 + 2)) {
        goto LABEL_140;
      }
      uint64_t v94 = &v91[16 * v90 + 32];
      *(void *)uint64_t v94 = v92;
      *((void *)v94 + 1) = v93;
      unint64_t v95 = *((void *)v91 + 2);
      if (v31 > v95) {
        goto LABEL_141;
      }
      memmove(&v91[16 * v31 + 16], &v91[16 * v31 + 32], 16 * (v95 - v31));
      uint64_t v101 = v91;
      *((void *)v91 + 2) = v95 - 1;
      unint64_t v31 = v95 - 1;
      Swift::Int v3 = v100;
      if (v95 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  Swift::Int v98 = v5;
  Swift::Int v6 = 0;
  uint64_t v7 = *a1;
  uint64_t v96 = *a1 + 8;
  uint64_t v101 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    Swift::Int v8 = v6++;
    if (v6 >= v3) {
      goto LABEL_32;
    }
    uint64_t v9 = (uint64_t *)(v7 + 16 * v6);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = (void *)(v7 + 16 * v8);
    if (v10 == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v8 + 2;
      if (v8 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      uint64_t v16 = (void *)(v96 + 16 * v15);
      do
      {
        uint64_t v17 = (void *)(v7 + 16 * v6);
        if (*(v16 - 1) == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else if ((v14 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
        {
          goto LABEL_23;
        }
        v16 += 2;
        Swift::Int v19 = v15 + 1;
        Swift::Int v6 = v15;
        Swift::Int v15 = v19;
      }
      while (v19 < v3);
      Swift::Int v15 = v19;
      goto LABEL_23;
    }
    int v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    Swift::Int v15 = v8 + 2;
    if (v8 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v6 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v8) {
      goto LABEL_148;
    }
    if (v8 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v8;
      Swift::Int v22 = v15;
      Swift::Int v23 = v8;
      do
      {
        if (v23 != --v22)
        {
          if (!v7) {
            goto LABEL_152;
          }
          uint64_t v24 = v7 + v20;
          uint64_t v25 = *(void *)(v7 + v21);
          uint64_t v26 = *(void *)(v7 + v21 + 8);
          *(_OWORD *)(v7 + v21) = *(_OWORD *)(v7 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    Swift::Int v6 = v15;
LABEL_32:
    if (v6 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v6, v8)) {
      goto LABEL_143;
    }
    if (v6 - v8 >= v98) {
      goto LABEL_41;
    }
    if (__OFADD__(v8, v98)) {
      goto LABEL_146;
    }
    if (v8 + v98 >= v3) {
      Swift::Int v27 = v3;
    }
    else {
      Swift::Int v27 = v8 + v98;
    }
    if (v27 < v8) {
      goto LABEL_147;
    }
    if (v6 == v27)
    {
LABEL_41:
      uint64_t v28 = v101;
    }
    else
    {
      uint64_t v79 = (void *)(v7 + 16 * v6);
      uint64_t v28 = v101;
      do
      {
        char v80 = (uint64_t *)(v7 + 16 * v6);
        uint64_t v81 = *v80;
        uint64_t v82 = v80[1];
        Swift::Int v83 = v8;
        uint64_t v84 = v79;
        do
        {
          BOOL v85 = v81 == *(v84 - 2) && v82 == *(v84 - 1);
          if (v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v7) {
            goto LABEL_150;
          }
          uint64_t v81 = *v84;
          uint64_t v82 = v84[1];
          *(_OWORD *)uint64_t v84 = *((_OWORD *)v84 - 1);
          *(v84 - 1) = v82;
          *(v84 - 2) = v81;
          v84 -= 2;
          ++v83;
        }
        while (v6 != v83);
        ++v6;
        v79 += 2;
      }
      while (v6 != v27);
      Swift::Int v6 = v27;
    }
    if (v6 < v8) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v86 = (char *)OUTLINED_FUNCTION_53_14();
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v86, v87, v88, v28);
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v31;
    unint64_t v32 = v28 + 32;
    unint64_t v33 = &v28[16 * v30 + 32];
    *(void *)unint64_t v33 = v8;
    *((void *)v33 + 1) = v6;
    uint64_t v101 = v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    Swift::Int v3 = v100;
    if (v6 >= v100) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      uint64_t v39 = &v32[16 * v31];
      uint64_t v40 = *((void *)v39 - 8);
      uint64_t v41 = *((void *)v39 - 7);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *((void *)v39 - 6);
      uint64_t v43 = *((void *)v39 - 5);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      BOOL v47 = &v32[16 * v31 - 32];
      uint64_t v49 = *(void *)v47;
      uint64_t v48 = *((void *)v47 + 1);
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        uint64_t v69 = &v32[16 * v34];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *((void *)v28 + 4);
        uint64_t v64 = *((void *)v28 + 5);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *((void *)v28 + 4);
      uint64_t v35 = *((void *)v28 + 5);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    unint64_t v52 = &v32[16 * v31 - 32];
    uint64_t v54 = *(void *)v52;
    uint64_t v53 = *((void *)v52 + 1);
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    BOOL v58 = &v32[16 * v34];
    uint64_t v60 = *(void *)v58;
    uint64_t v59 = *((void *)v58 + 1);
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    uint64_t v65 = &v32[16 * v34];
    uint64_t v67 = *(void *)v65;
    uint64_t v66 = *((void *)v65 + 1);
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v7) {
      goto LABEL_151;
    }
    uint64_t v74 = &v32[16 * v73];
    uint64_t v75 = *(void *)v74;
    uint64_t v76 = &v32[16 * v34];
    uint64_t v77 = *((void *)v76 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)();
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > *((void *)v101 + 2)) {
      goto LABEL_125;
    }
    *(void *)uint64_t v74 = v75;
    *(void *)&v32[16 * v73 + 8] = v77;
    unint64_t v78 = *((void *)v101 + 2);
    if (v34 >= v78) {
      goto LABEL_126;
    }
    uint64_t v28 = v101;
    unint64_t v31 = v78 - 1;
    memmove(&v32[16 * v34], v76 + 16, 16 * (v78 - 1 - v34));
    *((void *)v101 + 2) = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v100 < -1) {
    goto LABEL_145;
  }
  *(void *)(v99 + 16) = 0;
  swift_bridgeObjectRelease();
}

char *specialized _ArrayBuffer._consumeAndCreateNew()()
{
  uint64_t v0 = (char *)OUTLINED_FUNCTION_4_30();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  char v0 = OUTLINED_FUNCTION_4_30();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  OUTLINED_FUNCTION_4_30();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_4_30();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_4_30();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  char v0 = OUTLINED_FUNCTION_4_30();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  OUTLINED_FUNCTION_4_30();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ColumnDescriptor.FeatureType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ColumnDescriptor.FeatureType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227260A18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for ColumnDescriptor.FeatureType()
{
}

unsigned char *storeEnumTagSinglePayload for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227260B18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
}

uint64_t initializeBufferWithCopyOfBuffer for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1)
{
  return outlined consume of ColumnDescriptor.ColumnTypeDescriptor(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v5, v6);
  return a1;
}

uint64_t assignWithTake for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnDescriptor.ColumnTypeDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 5u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for ColumnDescriptor.ColumnTypeDescriptor(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void type metadata accessor for ColumnDescriptor.ColumnTypeDescriptor()
{
}

uint64_t destroy for ColumnDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v2, v3);
}

uint64_t initializeWithCopy for ColumnDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for ColumnDescriptor(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v4, (char)v2);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  char v6 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = (_BYTE)v2;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v5, v6);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ColumnDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnDescriptor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ColumnDescriptor()
{
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ColumnDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227261238);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ColumnDescriptor.CodingKeys()
{
  return &unk_26DB44C68;
}

uint64_t OUTLINED_FUNCTION_3_68()
{
  return *(void *)(v0 - 112);
}

uint64_t OUTLINED_FUNCTION_7_50()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_41()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_9_43()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t OUTLINED_FUNCTION_13_43()
{
  *(unsigned char *)(v0 - 80) = 1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_16_40()
{
  return *(void *)(v0 - 256);
}

uint64_t OUTLINED_FUNCTION_17_33()
{
  return type metadata accessor for AnyColumn();
}

uint64_t OUTLINED_FUNCTION_18_27()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19_35()
{
  return 0x69726F6765746163;
}

uint64_t OUTLINED_FUNCTION_20_37()
{
  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_24_34()
{
  *(void *)(v0 - 104) = 0x206E6D756C6F43;
  *(void *)(v0 - 96) = 0xE700000000000000;
  return AnyColumn.name.getter();
}

uint64_t OUTLINED_FUNCTION_25_33()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_27_27()
{
  return outlined consume of [Double]??(v0);
}

uint64_t OUTLINED_FUNCTION_30_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_20()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_36_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_39_20()
{
  return 0x54746E656D656C65;
}

uint64_t OUTLINED_FUNCTION_41_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_20()
{
  return 1702521203;
}

uint64_t OUTLINED_FUNCTION_43_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45_17()
{
  return *(void *)(v0 - 576);
}

uint64_t OUTLINED_FUNCTION_46_15()
{
  return *(void *)(v0 - 456);
}

uint64_t OUTLINED_FUNCTION_47_19()
{
  return *(void *)(v0 - 480);
}

uint64_t OUTLINED_FUNCTION_48_13()
{
  return *(void *)(v0 - 608);
}

uint64_t OUTLINED_FUNCTION_49_11()
{
  return *(void *)(v0 - 512);
}

uint64_t OUTLINED_FUNCTION_50_13()
{
  return *(void *)(v0 - 544);
}

uint64_t OUTLINED_FUNCTION_52_13()
{
  return *(void *)(v0 - 112);
}

uint64_t OUTLINED_FUNCTION_53_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_55_11()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_56_14()
{
  return v0;
}

void MLSoundClassifier.Model.export(internalMetadata:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v4 = type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v29 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33();
  uint64_t v16 = v14 - v15;
  MEMORY[0x270FA5388](v17);
  Swift::Int v19 = (char *)&v25 - v18;
  MLSoundClassifier.Model.createFeatureExtractorModel(internalMetadata:)(a1, (uint64_t)&v25 - v18);
  if (!v2)
  {
    uint64_t v25 = v9;
    uint64_t v26 = v4;
    uint64_t v27 = v10;
    uint64_t v28 = v12;
    MLSoundClassifier.Model.createClassifierModel(internalMetadata:)(a1, v16);
    Model.outputs.getter();
    Model.inputs.setter();
    Model.init()();
    Model.inputs.getter();
    Model.inputs.setter();
    Model.outputs.getter();
    Model.outputs.setter();
    Model.predictedFeatureName.getter();
    Model.predictedFeatureName.setter();
    Model.predictedProbabilitiesName.getter();
    Model.predictedProbabilitiesName.setter();
    uint64_t v20 = Model.nestedModels.getter();
    uint64_t v21 = Model.nestedModels.getter();
    uint64_t v31 = v20;
    specialized Array.append<A>(contentsOf:)(v21);
    uint64_t v22 = v25;
    PipelineClassifierConfiguration.init(models:names:)();
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v22, *MEMORY[0x263F53408], v26);
    Model.kind.setter();
    uint64_t v23 = v27;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v24(v16, v27);
    v24((uint64_t)v19, v23);
  }
}

void MLSoundClassifier.Model.createFeatureExtractorModel(internalMetadata:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v68 = type metadata accessor for AudioFeaturePrint();
  OUTLINED_FUNCTION_0();
  uint64_t v76 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v77 = v5;
  uint64_t v67 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v63 = v6;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33();
  uint64_t v66 = v8 - v9;
  MEMORY[0x270FA5388](v10);
  BOOL v62 = (char *)&v59 - v11;
  type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v73 = v13;
  uint64_t v74 = v12;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_33_0();
  uint64_t v71 = v14;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v69 = v16;
  uint64_t v70 = v15;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_3_0();
  uint64_t v72 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v80 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_33();
  uint64_t v21 = v19 - v20;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_47_8();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v59 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v59 - v27;
  uint64_t v29 = self;
  id v30 = objc_msgSend(v29, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();

  if (!v31)
  {
    uint64_t v60 = v21;
    uint64_t v61 = 0;
    id v32 = objc_msgSend(v29, sel_defaultManager);
    NSFileManager.temporaryModelDirectory.getter();

    UUID.init()();
    uint64_t v33 = UUID.uuidString.getter();
    uint64_t v35 = v34;
    uint64_t v36 = OUTLINED_FUNCTION_7_51();
    v37(v36);
    v79[0] = v33;
    v79[1] = v35;
    uint64_t v39 = v73;
    uint64_t v38 = v74;
    uint64_t v40 = v71;
    (*(void (**)(uint64_t, void, uint64_t))(v73 + 104))(v71, *MEMORY[0x263F06E50], v74);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v38);
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    uint64_t v42 = v72;
    v41(v2, v72);
    uint64_t v43 = v28;
    OUTLINED_FUNCTION_4_61();
    URL.appendingPathExtension(_:)();
    uint64_t v44 = v42;
    v41((uint64_t)v26, v42);
    uint64_t v45 = type metadata accessor for MLSoundClassifier.ModelParameters();
    outlined init with copy of DataFrame?(v75 + *(int *)(v45 + 28), (uint64_t)v79, &demangling cache variable for type metadata for Any?);
    if (v79[3])
    {
      char v46 = swift_dynamicCast();
      uint64_t v47 = v76;
      uint64_t v48 = v67;
      if ((v46 & 1) != 0 && (v78 & 1) == 0)
      {
        uint64_t v49 = v62;
        uint64_t v50 = v61;
        static MLSoundClassifier.VGGishFeatureExtractor.buildCoreMLSpec(outputName:)(0x7365727574616566, 0xE800000000000000);
        if (!v50)
        {
          uint64_t v58 = Model.metadata.getter();
          specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v58, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v64);
          v41((uint64_t)v43, v42);
          (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v65, v49, v48);
          return;
        }
        uint64_t v51 = v42;
        unint64_t v52 = v43;
        goto LABEL_11;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v79);
      uint64_t v47 = v76;
    }
    MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
    uint64_t v53 = v77;
    AudioFeaturePrint.init(windowDuration:overlapFactor:)();
    lazy protocol witness table accessor for type AudioFeaturePrint and conformance AudioFeaturePrint();
    uint64_t v54 = v68;
    uint64_t v55 = v61;
    TemporalTransformer.export(to:)();
    if (v55)
    {
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v53, v54);
      uint64_t v51 = v44;
      unint64_t v52 = v43;
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v80 + 16))(v60, v43, v44);
      uint64_t v56 = v66;
      Model.init(contentsOf:)();
      uint64_t v57 = Model.metadata.getter();
      specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v57, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(v65, v56, v67);
      $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v77, v54);
      unint64_t v52 = v43;
      uint64_t v51 = v44;
    }
LABEL_11:
    v41((uint64_t)v52, v51);
  }
}

void MLSoundClassifier.Model.createClassifierModel(internalMetadata:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v67 = a2;
  uint64_t v66 = type metadata accessor for Model();
  OUTLINED_FUNCTION_0();
  uint64_t v84 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v68 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v73 = v7;
  uint64_t v74 = v6;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  uint64_t v72 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_0();
  uint64_t v70 = v10;
  uint64_t v71 = v9;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  uint64_t v69 = v11;
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  MEMORY[0x270FA5388](v81);
  OUTLINED_FUNCTION_33_0();
  uint64_t v82 = v12;
  type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0();
  uint64_t v78 = v14;
  uint64_t v79 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v17 = v16 - v15;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v75 = v19;
  uint64_t v76 = v18;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_3_0();
  uint64_t v22 = v21 - v20;
  uint64_t v80 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v87 = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_33();
  uint64_t v27 = v25 - v26;
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_47_8();
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  id v32 = (char *)&v62 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v77 = (char *)&v62 - v33;
  uint64_t v34 = self;
  id v35 = objc_msgSend(v34, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();

  if (!v36)
  {
    uint64_t v63 = v27;
    uint64_t v64 = 0;
    id v37 = objc_msgSend(v34, sel_defaultManager);
    NSFileManager.temporaryModelDirectory.getter();

    UUID.init()();
    uint64_t v38 = UUID.uuidString.getter();
    uint64_t v40 = v39;
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v22, v76);
    uint64_t v85 = v38;
    uint64_t v86 = v40;
    uint64_t v42 = v78;
    uint64_t v41 = v79;
    (*(void (**)(uint64_t, void, uint64_t))(v78 + 104))(v17, *MEMORY[0x263F06E50], v79);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v17, v41);
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    uint64_t v44 = v80;
    v43(v2, v80);
    uint64_t v45 = v77;
    OUTLINED_FUNCTION_4_61();
    URL.appendingPathExtension(_:)();
    v43((uint64_t)v32, v44);
    uint64_t v46 = type metadata accessor for MLSoundClassifier.Model();
    uint64_t v47 = v82;
    outlined init with copy of DataFrame?(v83 + *(int *)(v46 + 20), v82, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32))(v72, v47, v74);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
      uint64_t v48 = v64;
      Transformer.export(to:)();
      uint64_t v49 = v84;
      if (v48)
      {
        uint64_t v50 = OUTLINED_FUNCTION_6_45();
        v51(v50);
LABEL_12:
        v43((uint64_t)v45, v44);
        return;
      }
      uint64_t v64 = 0;
      uint64_t v55 = OUTLINED_FUNCTION_6_45();
      v56(v55);
      uint64_t v57 = v68;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v69, v47, v71);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type LogisticRegressionClassifierModel<Float, String> and conformance LogisticRegressionClassifierModel<A, B>, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
      uint64_t v52 = v64;
      Transformer.export(to:)();
      uint64_t v49 = v84;
      if (v52)
      {
        uint64_t v53 = OUTLINED_FUNCTION_5_55();
        v54(v53);
        goto LABEL_12;
      }
      uint64_t v64 = 0;
      uint64_t v58 = OUTLINED_FUNCTION_5_55();
      v59(v58);
      uint64_t v57 = v68;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v87 + 16))(v63, v45, v44);
    uint64_t v60 = v64;
    Model.init(contentsOf:)();
    if (!v60)
    {
      uint64_t v61 = Model.metadata.getter();
      specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v61, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v65);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v67, v57, v66);
    }
    $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
    goto LABEL_12;
  }
}

unint64_t lazy protocol witness table accessor for type AudioFeaturePrint and conformance AudioFeaturePrint()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioFeaturePrint and conformance AudioFeaturePrint;
  if (!lazy protocol witness table cache variable for type AudioFeaturePrint and conformance AudioFeaturePrint)
  {
    type metadata accessor for AudioFeaturePrint();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFeaturePrint and conformance AudioFeaturePrint);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_61()
{
  return 0x6C65646F6D6C6D2ELL;
}

uint64_t OUTLINED_FUNCTION_5_55()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_51()
{
  return v0;
}

void static Dense.loadLayer(from:layerName:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v73 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x270FA5388](v7 - 8);
  OUTLINED_FUNCTION_49();
  uint64_t v74 = v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v76 = (uint64_t)v65 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v75 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v72 = v14;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v79 = (uint64_t)v65 - v19;
  uint64_t v20 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_0();
  uint64_t v22 = v21;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_49();
  uint64_t v71 = v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v78 = (char *)v65 - v26;
  OUTLINED_FUNCTION_3_69();
  v27._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_2_64() & 0xFFFFFFFFFFFFLL | 0x74000000000000;
  v27._uint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v27);
  uint64_t v28 = specialized Dictionary.subscript.getter(v80, v81, a1);
  swift_bridgeObjectRelease();
  uint64_t v77 = v28;
  if (!v28)
  {
    uint64_t v80 = 0;
    unint64_t v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v80 = a2;
    unint64_t v81 = a3;
    unint64_t v37 = 0x80000002272D60E0;
    unint64_t v38 = 0xD000000000000025;
LABEL_14:
    String.append(_:)(*(Swift::String *)&v38);
    uint64_t v40 = v80;
    unint64_t v39 = v81;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v41 = v40;
    *(void *)(v41 + 8) = v39;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(unsigned char *)(v41 + 48) = 2;
    swift_willThrow();
    return;
  }
  uint64_t v82 = v20;
  OUTLINED_FUNCTION_3_69();
  v29._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_2_64() & 0xFFFFFFFFFFFFLL | 0x2E74000000000000;
  v29._uint64_t object = (void *)0xED00006570616873;
  String.append(_:)(v29);
  uint64_t v70 = a1;
  uint64_t v30 = specialized Dictionary.subscript.getter(v80, v81, a1);
  swift_bridgeObjectRelease();
  if (!v30)
  {
    swift_bridgeObjectRelease();
    uint64_t v80 = 0;
    unint64_t v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v80 = a2;
    unint64_t v81 = a3;
    unint64_t v38 = 0xD00000000000002BLL;
    unint64_t v37 = 0x80000002272D6110;
    goto LABEL_14;
  }
  uint64_t v67 = v18;
  uint64_t v68 = a2;
  uint64_t v69 = v13;
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    OUTLINED_FUNCTION_1_56(MEMORY[0x263F8EE78]);
    uint64_t v32 = 0;
    uint64_t v33 = v80;
    while (1)
    {
      double v34 = *(double *)(v30 + 8 * v32 + 32);
      if ((~*(void *)&v34 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v34 <= -9.22337204e18) {
        goto LABEL_32;
      }
      if (v34 >= 9.22337204e18) {
        goto LABEL_33;
      }
      uint64_t v80 = v33;
      unint64_t v36 = *(void *)(v33 + 16);
      unint64_t v35 = *(void *)(v33 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v33 = v80;
      }
      ++v32;
      *(void *)(v33 + 16) = v36 + 1;
      *(void *)(v33 + 8 * v36 + 32) = (uint64_t)v34;
      if (v31 == v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = MEMORY[0x263F8EE78];
LABEL_16:
  uint64_t v42 = v76;
  uint64_t v43 = v78;
  MEMORY[0x22A672540](v33);
  uint64_t v44 = v22;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v46 = (uint64_t)v75;
  uint64_t v47 = v82;
  v65[1] = v22 + 16;
  uint64_t v66 = v45;
  v45(v75, (uint64_t)v43, v82);
  __swift_storeEnumTagSinglePayload(v46, 0, 1, v47);
  Array<A>.floatTensor(shape:)(v46, v77, v79);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: Any?)(v46, &demangling cache variable for type metadata for TensorShape?);
  uint64_t v48 = v69;
  __swift_storeEnumTagSinglePayload(v42, 1, 1, v69);
  OUTLINED_FUNCTION_3_69();
  v49._uint64_t countAndFlagsBits = 0x736169622ELL;
  v49._uint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v49);
  uint64_t v50 = v70;
  uint64_t v51 = specialized Dictionary.subscript.getter(v80, v81, v70);
  swift_bridgeObjectRelease();
  uint64_t v77 = v51;
  if (!v51)
  {
LABEL_30:
    uint64_t v63 = v72;
    uint64_t v64 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v67, v79, v48);
    outlined init with copy of Tensor?(v42, v74);
    Dense.init(weight:bias:)();
    outlined destroy of (key: String, value: Any?)(v42, &demangling cache variable for type metadata for Tensor?);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v48);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v78, v47);
    return;
  }
  v65[0] = v44;
  OUTLINED_FUNCTION_3_69();
  v52._uint64_t countAndFlagsBits = 0x68732E736169622ELL;
  v52._uint64_t object = (void *)0xEB00000000657061;
  String.append(_:)(v52);
  uint64_t v53 = specialized Dictionary.subscript.getter(v80, v81, v50);
  swift_bridgeObjectRelease();
  if (!v53)
  {
    swift_bridgeObjectRelease();
    uint64_t v42 = v76;
    uint64_t v44 = v65[0];
    goto LABEL_30;
  }
  uint64_t v54 = *(void *)(v53 + 16);
  if (!v54)
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = MEMORY[0x263F8EE78];
LABEL_29:
    uint64_t v60 = v74;
    uint64_t v61 = v71;
    MEMORY[0x22A672540](v56);
    uint64_t v62 = (uint64_t)v75;
    v66(v75, v61, v47);
    __swift_storeEnumTagSinglePayload(v62, 0, 1, v47);
    Array<A>.floatTensor(shape:)(v62, v77, v60);
    swift_bridgeObjectRelease();
    outlined destroy of (key: String, value: Any?)(v62, &demangling cache variable for type metadata for TensorShape?);
    uint64_t v44 = v65[0];
    (*(void (**)(uint64_t, uint64_t))(v65[0] + 8))(v61, v47);
    uint64_t v42 = v76;
    outlined destroy of (key: String, value: Any?)(v76, &demangling cache variable for type metadata for Tensor?);
    uint64_t v48 = v69;
    __swift_storeEnumTagSinglePayload(v60, 0, 1, v69);
    outlined init with take of Tensor?(v60, v42);
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_1_56(MEMORY[0x263F8EE78]);
  uint64_t v55 = 0;
  uint64_t v56 = v80;
  while (1)
  {
    double v57 = *(double *)(v53 + 8 * v55 + 32);
    if ((~*(void *)&v57 & 0x7FF0000000000000) == 0) {
      break;
    }
    if (v57 <= -9.22337204e18) {
      goto LABEL_35;
    }
    if (v57 >= 9.22337204e18) {
      goto LABEL_36;
    }
    uint64_t v80 = v56;
    unint64_t v59 = *(void *)(v56 + 16);
    unint64_t v58 = *(void *)(v56 + 24);
    if (v59 >= v58 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
      uint64_t v56 = v80;
    }
    ++v55;
    *(void *)(v56 + 16) = v59 + 1;
    *(void *)(v56 + 8 * v59 + 32) = (uint64_t)v57;
    uint64_t v47 = v82;
    if (v54 == v55)
    {
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void OUTLINED_FUNCTION_1_56(uint64_t a1@<X8>)
{
  *(void *)(v2 - 120) = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
}

uint64_t OUTLINED_FUNCTION_2_64()
{
  return 0x68676965772ELL;
}

uint64_t OUTLINED_FUNCTION_3_69()
{
  *(void *)(v2 - 120) = v0;
  *(void *)(v2 - 112) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t MLDecisionTreeClassifier.ModelParameters.init(validation:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_3_0();
  uint64_t v16 = v15 - v14;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(void *)(a4 + 56) = a3;
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1, v15 - v14);
  void v19[3] = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
  outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData(v16, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v19, a4 + 8);
  return outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validation.getter()
{
  uint64_t result = outlined init with copy of Any?(v0 + 8, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.init(validationData:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(void *)(a4 + 56) = a3;
  uint64_t v9 = v6;
  char v10 = v7;
  return MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v9);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 10;
  v1._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _StringGuts.grow(_:)(23);
  v2._uint64_t countAndFlagsBits = 0xD000000000000014;
  v2._uint64_t object = (void *)0x80000002272D3F20;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_1_1();
  v3._uint64_t countAndFlagsBits = 0;
  v3._uint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  v4._uint64_t object = (void *)0x80000002272D3F40;
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_1_1();
  v5._uint64_t countAndFlagsBits = 0;
  v5._uint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v8, "Random Seed: ");
  HIWORD(v8._object) = -4864;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_1();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.maxDepth.getter()
{
  return *(void *)v0;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.maxDepth.setter(uint64_t result)
{
  *Swift::String v1 = result;
  return result;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.maxDepth.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validationData.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_0();
  uint64_t v6 = v5 - v4;
  uint64_t result = outlined init with copy of Any?(v1 + 8, (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    swift_dynamicCast();
    MLDecisionTreeClassifier.ModelParameters.ValidationData.asTable()(a1);
    return outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLDecisionTreeClassifier.ModelParameters.validationData : MLDecisionTreeClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = MLDecisionTreeClassifier.ModelParameters.validationData.getter((uint64_t)&v4);
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for MLDecisionTreeClassifier.ModelParameters.validationData : MLDecisionTreeClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1 = *(unsigned char *)(a1 + 8);
  id v3 = *(id *)a1;
  unsigned __int8 v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  long long v8 = *(void **)a1;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  v13[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  if (v9 == 255)
  {
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(void *)uint64_t v7 = v8;
    *(unsigned char *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v13, v2 + 8);
}

void (*MLDecisionTreeClassifier.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  MLDecisionTreeClassifier.ModelParameters.validationData.getter(a1);
  return MLDecisionTreeClassifier.ModelParameters.validationData.modify;
}

void MLDecisionTreeClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    outlined copy of MLDataTable?(v2, v3);
    MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    uint64_t v4 = *(void **)a1;
    unsigned __int8 v5 = v3;
    MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLDecisionTreeClassifier.ModelParameters.validation : MLDecisionTreeClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLDecisionTreeClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  v5[3] = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1 + 8);
}

uint64_t outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*MLDecisionTreeClassifier.ModelParameters.validation.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[16] = v1;
  v3[17] = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  size_t v5 = *(void *)(v4 + 64);
  v3[18] = malloc(v5);
  v3[19] = malloc(v5);
  uint64_t result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v1 + 8, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    swift_dynamicCast();
    return MLDecisionTreeClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLDecisionTreeClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[18];
  uint64_t v4 = (void *)(*a1)[19];
  uint64_t v5 = (*a1)[17];
  uint64_t v6 = (*a1)[16] + 8;
  if (a2)
  {
    outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v6);
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    long long v8 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v8);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v6);
  }
  free(v4);
  free(v3);

  free(v2);
}

double MLDecisionTreeClassifier.ModelParameters.minLossReduction.getter()
{
  return *(double *)(v0 + 40);
}

void MLDecisionTreeClassifier.ModelParameters.minLossReduction.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.minLossReduction.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeClassifier.ModelParameters.minChildWeight.getter()
{
  return *(double *)(v0 + 48);
}

void MLDecisionTreeClassifier.ModelParameters.minChildWeight.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.minChildWeight.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.randomSeed.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.randomSeed.setter(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.randomSeed.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLDecisionTreeClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_227263B44()
{
  return MLDecisionTreeClassifier.ModelParameters.validation.getter();
}

uint64_t initializeWithCopy for MLDecisionTreeClassifier.ModelParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(void *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v7 = a2[4];
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    long long v8 = v4[1];
    *uint64_t v6 = *v4;
    v6[1] = v8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  return a1;
}

void *assignWithCopy for MLDecisionTreeClassifier.ModelParameters(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[4];
  if (!a1[4])
  {
    if (v6)
    {
      a1[4] = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
      goto LABEL_8;
    }
LABEL_7:
    long long v7 = v5[1];
    *uint64_t v4 = *v5;
    v4[1] = v7;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(a1 + 1));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0(a1 + 1, a2 + 1);
LABEL_8:
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for MLDecisionTreeClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  v4[1] = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 32);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeClassifier.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDecisionTreeClassifier.ModelParameters()
{
  return &type metadata for MLDecisionTreeClassifier.ModelParameters;
}

uint64_t ResultBox.__deallocating_deinit()
{
  outlined destroy of Result<Any, Error>?(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResultBox()
{
  return self;
}

uint64_t outlined destroy of Result<Any, Error>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Any, Error>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_57()
{
  **(void **)(v0 + 48) = *(void *)(v0 + 64);
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_3_70()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_4_62()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 48);
  return outlined init with take of (key: String, value: MLDataValueConvertible)?(v4, v3, v0);
}

uint64_t OUTLINED_FUNCTION_7_52(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_43(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_9_44()
{
  return outlined init with take of (key: String, value: MLDataValueConvertible)?(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_10_37()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_11_45(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_12_37()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_33(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 16) = result;
  *(void *)(v2 + 24) = a2;
  return result;
}

id static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void **)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t inited = swift_initStackObject();
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(inited + 32) = MEMORY[0x263F8EE78];
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 16) = v6;
  *(unsigned char *)(inited + 24) = v7;
  if (v3) {
    return outlined copy of Result<_DataTable, Error>(v6, v7);
  }
  outlined copy of Result<_DataTable, Error>(v6, v7);
  MLHandPoseClassifier.FeatureExtractor.extractFeaturesFromFileTable(startingSessionId:)(a2, a3);
  return (id)swift_release();
}

uint64_t static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for MLHandPoseClassifier.DataSource();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLHandPoseClassifier.DataSource(a1, (uint64_t)v9);
  uint64_t result = MLHandPoseClassifier.FeatureExtractor.__allocating_init(source:)((uint64_t)v9);
  if (!v3)
  {
    MLHandPoseClassifier.FeatureExtractor.extractFeaturesFromFileTable(startingSessionId:)(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t MLHandPoseClassifier.FeatureExtractor.__allocating_init(source:)(uint64_t a1)
{
  MLHandPoseClassifier.DataSource.imagesWithAnnotations()();
  uint64_t result = _s8CreateML13_TablePrinterVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for MLHandPoseClassifier.DataSource);
  if (!v1)
  {
    uint64_t result = swift_allocObject();
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(result + 32) = MEMORY[0x263F8EE78];
    *(void *)(result + 40) = v4;
    *(void *)(result + 48) = v4;
    *(void *)(result + 56) = v4;
    *(void *)(result + 16) = v5;
    *(unsigned char *)(result + 24) = v6;
  }
  return result;
}

uint64_t MLHandPoseClassifier.FeatureExtractor.extractFeaturesFromFileTable(startingSessionId:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v121 = a1;
  uint64_t v113 = a2;
  uint64_t v122 = type metadata accessor for URL();
  uint64_t v129 = *(char **)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  uint64_t v132 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for Date();
  Swift::Int v131 = *(void *)(v145 - 8);
  MEMORY[0x270FA5388](v145);
  unint64_t v130 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for _TablePrinter(0);
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char **)((char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(char **)(v2 + 16);
  char v11 = *(unsigned char *)(v2 + 24);
  uint64_t v141 = (uint64_t)v10;
  LOBYTE(v142) = v11;
  outlined copy of Result<_DataTable, Error>(v10, v11);
  MLDataTable.size.getter();
  uint64_t v12 = (char *)specialized RandomAccessCollection<>.distance(from:to:)();
  outlined consume of Result<_DataTable, Error>(v10, v11);
  uint64_t v141 = 0;
  unint64_t v142 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  uint64_t v141 = 0x69737365636F7250;
  unint64_t v142 = 0xEB0000000020676ELL;
  uint64_t v138 = v12;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0xD000000000000011;
  v14._uint64_t object = (void *)0x80000002272DB250;
  String.append(_:)(v14);
  uint64_t v15 = v141;
  uint64_t v16 = (void *)v142;
  os_log_type_t v17 = static os_log_type_t.info.getter();
  v18._uint64_t countAndFlagsBits = v15;
  v18._uint64_t object = v16;
  log(_:type:)(v18, v17);
  uint64_t v19 = v9;
  swift_bridgeObjectRelease();
  uint64_t v20 = (char *)v9 + v7[7];
  Date.init()();
  *uint64_t v19 = v12;
  type metadata accessor for OS_os_log();
  uint64_t v21 = OS_os_log.init(subsystem:category:)();
  uint64_t v114 = v7[8];
  *(char **)((char *)v19 + v114) = (char *)v21;
  uint64_t v22 = (char **)((char *)v19 + v7[9]);
  void *v22 = 0xD000000000000010;
  v22[1] = 0x80000002272DB2A0;
  uint64_t v23 = v130;
  Date.init()();
  uint64_t v24 = *(void (**)(void, void, void))(v131 + 40);
  uint64_t v120 = v20;
  v24(v20, v23, v145);
  _TablePrinter.beginTable()();
  _TablePrinter.printRow(currentFileIndex:)(0);
  uint64_t v141 = (uint64_t)v10;
  LOBYTE(v142) = v11;
  uint64_t v124 = (char **)(v3 + 48);
  uint64_t v125 = (uint64_t *)(v3 + 32);
  uint64_t v123 = (void **)(v3 + 40);
  uint64_t v126 = (uint64_t *)(v3 + 56);
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  outlined copy of Result<_DataTable, Error>(v10, v11);
  uint64_t v138 = v10;
  LOBYTE(v139) = v11;
  if (MLDataTable.size.getter())
  {
    uint64_t v25 = 0;
    uint64_t v118 = (void (**)(char *, uint64_t))(v129 + 8);
    long long v117 = xmmword_2272CB370;
    int64_t v115 = (void *)0x80000002272DB330;
    uint64_t v116 = (void *)0x80000002272DB310;
    unint64_t v119 = v19;
    while (1)
    {
      MLDataTable.Rows.subscript.getter(v25, (uint64_t *)&v138);
      Swift::String v27 = v138;
      uint64_t v26 = v139;
      uint64_t v145 = v140;
      char v28 = v11 & 1;
      outlined copy of Result<_DataTable, Error>(v10, v11 & 1);
      uint64_t v29 = specialized RandomAccessCollection<>.index(after:)(v25);
      outlined consume of Result<_DataTable, Error>(v10, v28);
      uint64_t v143 = v29;
      uint64_t v30 = v144;
      if (__OFADD__(v144, 1)) {
        break;
      }
      ++v144;
      if (!v26[2]) {
        goto LABEL_23;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(0x7461506567616D69, 0xE900000000000068);
      if ((v32 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_23;
      }
      unint64_t v130 = v30 + 1;
      Swift::Int v131 = (Swift::Int)v30;
      uint64_t v33 = *(void *)(v26[7] + 8 * v31);
      swift_retain_n();
      uint64_t v34 = v33;
      uint64_t v35 = v133;
      CMLSequence.value(at:)(v34);
      if (v35) {
        goto LABEL_29;
      }
      uint64_t v37 = v36;
      swift_release();
      MLDataValue.init(_:)(v37, (uint64_t)&v138);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      unint64_t v39 = v138;
      id v38 = v139;
      char v40 = v140;
      if (v140 != 2)
      {
        uint64_t v99 = v138;
        id v100 = v139;
        goto LABEL_20;
      }
      if (!v26[2]) {
        goto LABEL_19;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C6562616CLL, 0xE500000000000000);
      if ((v42 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_19:
        uint64_t v99 = v39;
        id v100 = v38;
        char v40 = 2;
LABEL_20:
        outlined consume of MLDataValue(v99, v100, v40);
LABEL_22:
        uint64_t v30 = (char *)v131;
LABEL_23:
        uint64_t v138 = 0;
        uint64_t v139 = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v101._uint64_t countAndFlagsBits = 0xD000000000000029;
        v101._uint64_t object = (void *)0x80000002272DB2C0;
        String.append(_:)(v101);
        uint64_t v137 = v30;
        v102._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v102);
        swift_bridgeObjectRelease();
        v103._uint64_t object = (void *)0xE900000000000065;
        v103._uint64_t countAndFlagsBits = 0x6C626174206E6920;
        String.append(_:)(v103);
        uint64_t v104 = v138;
        id v105 = v139;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v106 = v104;
        *(void *)(v106 + 8) = v105;
        *(_OWORD *)(v106 + 16) = 0u;
        *(_OWORD *)(v106 + 32) = 0u;
        *(unsigned char *)(v106 + 48) = 0;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Result<_DataTable, Error>((id)v141, v142);
        goto LABEL_24;
      }
      uint64_t v43 = *(void *)(v26[7] + 8 * v41);
      swift_retain_n();
      CMLSequence.value(at:)(v43);
      uint64_t v45 = v44;
      swift_release();
      MLDataValue.init(_:)(v45, (uint64_t)&v138);
      swift_bridgeObjectRelease();
      uint64_t v129 = v27;
      swift_release();
      swift_release_n();
      uint64_t v46 = v138;
      id v47 = v139;
      if (v140 != 2)
      {
        outlined consume of MLDataValue(v138, v139, v140);
        outlined consume of MLDataValue(v39, v38, 2);
        goto LABEL_22;
      }
      uint64_t v128 = v26;
      id v48 = objc_msgSend(self, sel_defaultManager);
      Swift::String v49 = (void *)MEMORY[0x22A674AE0](v39, v38);
      unsigned __int8 v50 = objc_msgSend(v48, sel_fileExistsAtPath_, v49);

      if ((v50 & 1) == 0)
      {
        outlined consume of MLDataValue(v46, v47, 2);
        uint64_t v138 = 0;
        uint64_t v139 = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        uint64_t v138 = (char *)0xD000000000000018;
        uint64_t v139 = (void *)0x80000002272DB2F0;
        v109._uint64_t countAndFlagsBits = (uint64_t)v39;
        v109._uint64_t object = v38;
        String.append(_:)(v109);
        outlined consume of MLDataValue(v39, v38, 2);
        uint64_t v110 = v138;
        id v111 = v139;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(void *)uint64_t v112 = v110;
        *(void *)(v112 + 8) = v111;
        *(_OWORD *)(v112 + 16) = 0u;
        *(_OWORD *)(v112 + 32) = 0u;
        *(unsigned char *)(v112 + 48) = 0;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Result<_DataTable, Error>((id)v141, v142);
        uint64_t v107 = (uint64_t)v119;
        return _s8CreateML13_TablePrinterVWOhTm_0(v107, type metadata accessor for _TablePrinter);
      }
      uint64_t v51 = (uint64_t)v132;
      URL.init(fileURLWithPath:)();
      outlined consume of MLDataValue(v39, v38, 2);
      uint64_t v52 = URL.lastPathComponent.getter();
      uint64_t v54 = v53;
      uint64_t v55 = static _VideoUtilities.getHandKeyPointsFromImageUrl(url:)(v51);
      uint64_t v56 = v119;
      uint64_t v57 = (uint64_t)v55;
      Swift::Int v58 = v131;
      if (__OFADD__(v131, v121)) {
        goto LABEL_28;
      }
      uint64_t v133 = 0;
      uint64_t v59 = v55[2];
      uint64_t v127 = specialized Array.init(repeating:count:)(v131 + v121, v59);
      specialized Array.init(repeating:count:)((uint64_t)v46, (uint64_t)v47, v59);
      specialized Array.init(repeating:count:)(v52, v54, v59);
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v57);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v127);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      Swift::Int v60 = v58;
      uint64_t v19 = v56;
      _TablePrinter.printRow(currentFileIndex:)(v60);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = v117;
      Date.timeIntervalSinceNow.getter();
      *(void *)(v61 + 56) = MEMORY[0x263F8D538];
      *(void *)(v61 + 64) = MEMORY[0x263F8D5B8];
      *(double *)(v61 + 32) = -v62;
      uint64_t v63 = String.init(format:_:)();
      uint64_t v65 = v64;
      uint64_t v138 = 0;
      uint64_t v139 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v66._uint64_t countAndFlagsBits = 0xD000000000000018;
      v66._uint64_t object = v116;
      String.append(_:)(v66);
      uint64_t v137 = v130;
      v67._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      v68._uint64_t countAndFlagsBits = 0x20666F2074756F20;
      v68._uint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v68);
      uint64_t v137 = *v56;
      v69._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v69);
      swift_bridgeObjectRelease();
      v70._uint64_t countAndFlagsBits = 0xD000000000000026;
      v70._uint64_t object = v115;
      String.append(_:)(v70);
      v71._uint64_t countAndFlagsBits = v63;
      v71._uint64_t object = v65;
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      uint64_t v72 = (uint64_t)v138;
      id v73 = v139;
      os_log_type_t v74 = static os_log_type_t.default.getter();
      v75._uint64_t countAndFlagsBits = v72;
      v75._uint64_t object = v73;
      log(_:type:)(v75, v74);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      (*v118)(v132, v122);
      uint64_t v25 = v143;
      uint64_t v10 = (char *)v141;
      char v11 = v142;
      uint64_t v138 = (char *)v141;
      LOBYTE(v139) = v142;
      if (v25 == MLDataTable.size.getter()) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_release();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_14:
    outlined consume of Result<_DataTable, Error>(v10, v11);
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_2272CB370;
    uint64_t v77 = MEMORY[0x263F8D750];
    *(void *)(v76 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v76 + 64) = v77;
    *(void *)(v76 + 32) = 3;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2272CB360;
    *(void *)(inited + 32) = 0x6C6562616CLL;
    *(void *)(inited + 40) = 0xE500000000000000;
    uint64_t v79 = v123;
    swift_beginAccess();
    uint64_t v138 = (char *)*v79;
    MEMORY[0x270FA5388](v138);
    *(&v113 - 2) = &v138;
    swift_bridgeObjectRetain();
    uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v82 = v81;
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
    *(unsigned char *)(inited + 56) = v82 & 1;
    *(void *)(inited + 64) = 0x5F6E6F6973736573;
    *(void *)(inited + 72) = 0xEA00000000006469;
    uint64_t v83 = v124;
    swift_beginAccess();
    uint64_t v137 = *v83;
    MEMORY[0x270FA5388](v137);
    *(&v113 - 2) = &v137;
    swift_bridgeObjectRetain();
    uint64_t v84 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v86 = v85;
    swift_bridgeObjectRelease();
    *(void *)(inited + 80) = v84;
    *(unsigned char *)(inited + 88) = v86 & 1;
    *(void *)(inited + 96) = 0x746E696F7079656BLL;
    *(void *)(inited + 104) = 0xE900000000000073;
    uint64_t v87 = v125;
    swift_beginAccess();
    uint64_t v136 = *v87;
    MEMORY[0x270FA5388](v136);
    *(&v113 - 2) = &v136;
    swift_bridgeObjectRetain();
    uint64_t v88 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    char v90 = v89;
    swift_bridgeObjectRelease();
    *(void *)(inited + 112) = v88;
    *(unsigned char *)(inited + 120) = v90 & 1;
    *(void *)(inited + 128) = 0x7461506567616D69;
    *(void *)(inited + 136) = 0xE900000000000068;
    Swift::String v91 = v126;
    swift_beginAccess();
    uint64_t v134 = *v91;
    MEMORY[0x270FA5388](v134);
    *(&v113 - 2) = &v134;
    swift_bridgeObjectRetain();
    uint64_t v92 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    char v94 = v93;
    swift_bridgeObjectRelease();
    *(void *)(inited + 144) = v92;
    *(unsigned char *)(inited + 152) = v94 & 1;
    uint64_t v95 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v96 = v133;
    specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v95, (uint64_t)&v134);
    if (!v96)
    {
      char v97 = v135;
      Swift::Int v98 = v113;
      *uint64_t v113 = v134;
      *((unsigned char *)v98 + 8) = v97;
    }
LABEL_24:
    uint64_t v107 = (uint64_t)v19;
    return _s8CreateML13_TablePrinterVWOhTm_0(v107, type metadata accessor for _TablePrinter);
  }
  return result;
}

uint64_t type metadata accessor for MLHandPoseClassifier.FeatureExtractor()
{
  return self;
}

uint64_t _s8CreateML13_TablePrinterVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k106OIegnrzr_TR143_s8CreateML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v60 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::String v69 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>)
      - 8;
  MEMORY[0x270FA5388](v74);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator)
      - 8;
  MEMORY[0x270FA5388](v75);
  Swift::String v68 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  uint64_t v7 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v8 = a1;
  uint64_t v9 = v2;
  uint64_t v10 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v10 >= v7) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v77 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  outlined init with copy of Zip2Sequence<Column<String>, Column<String>>(v8, (uint64_t)v5);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  Swift::String v13 = v69;
  v12(v69, v5, v2);
  uint64_t v14 = (uint64_t)v68;
  dispatch thunk of Sequence.makeIterator()();
  v12(v13, &v5[*(int *)(v74 + 60)], v2);
  uint64_t v15 = v75;
  uint64_t v66 = v14 + *(int *)(v75 + 60);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v67 = *(int *)(v15 + 64);
  *(unsigned char *)(v14 + v67) = 0;
  if (v11 < 0)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    uint64_t v65 = v2;
    if (v11)
    {
      uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
                   + 36);
      os_log_type_t v17 = (uint64_t *)(v14 + v16);
      uint64_t v18 = v66;
      uint64_t v19 = (uint64_t *)(v66 + v16);
      uint64_t v61 = (uint64_t *)(v66 + v16);
      double v62 = (uint64_t *)(v14 + v16);
      uint64_t v63 = (void (**)(char *, uint64_t))(v60 + 8);
      uint64_t v64 = (void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      do
      {
        if (*(unsigned char *)(v14 + v67))
        {
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v20 = *v17;
        lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
        dispatch thunk of Collection.endIndex.getter();
        if (v20 == v76[0]) {
          goto LABEL_52;
        }
        uint64_t v74 = v11;
        uint64_t v21 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v23 = *(void *)(v22 + 8);
        id v73 = *(void (**)(void, void, void))v22;
        uint64_t v75 = v23;
        swift_bridgeObjectRetain();
        v21(v76, 0);
        uint64_t v24 = v69;
        uint64_t v72 = *v64;
        v72(v69, v14, v9);
        dispatch thunk of Collection.formIndex(after:)();
        Swift::String v71 = *v63;
        v71(v24, v9);
        uint64_t v25 = *v19;
        dispatch thunk of Collection.endIndex.getter();
        if (v25 == v76[0]) {
          goto LABEL_54;
        }
        uint64_t v26 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
        unint64_t v28 = v27[1];
        Swift::String v70 = (void (**)(void, void, void))*v27;
        swift_bridgeObjectRetain();
        v26(v76, 0);
        v72(v24, v18, v9);
        dispatch thunk of Collection.formIndex(after:)();
        v71(v24, v9);
        if (v75) {
          uint64_t v29 = v73;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v75) {
          unint64_t v30 = v75;
        }
        else {
          unint64_t v30 = 0xE000000000000000;
        }
        if (v28) {
          unint64_t v31 = v70;
        }
        else {
          unint64_t v31 = 0;
        }
        if (v28) {
          unint64_t v32 = v28;
        }
        else {
          unint64_t v32 = 0xE000000000000000;
        }
        uint64_t v33 = v77;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v33 = v77;
        }
        uint64_t v34 = v74;
        unint64_t v35 = *(void *)(v33 + 16);
        if (v35 >= *(void *)(v33 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v33 = v77;
        }
        *(void *)(v33 + 16) = v35 + 1;
        uint64_t v36 = (void *)(v33 + 32 * v35);
        v36[4] = v29;
        v36[5] = v30;
        v36[6] = v31;
        void v36[7] = v32;
        uint64_t v11 = v34 - 1;
        uint64_t v9 = v65;
        uint64_t v18 = v66;
        uint64_t v14 = (uint64_t)v68;
        uint64_t v19 = v61;
        os_log_type_t v17 = v62;
      }
      while (v11);
      if (v68[v67]) {
        goto LABEL_50;
      }
    }
    lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
    uint64_t v37 = (void (**)(void, void, void))(v60 + 16);
    Swift::String v70 = (void (**)(void, void, void))(v60 + 16);
    Swift::String v71 = (void (*)(char *, uint64_t))(v60 + 8);
    while (1)
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      uint64_t v39 = *(void *)(v14 + *(int *)(v38 + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v39 == v76[0]) {
        break;
      }
      char v40 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v42 = v41[1];
      uint64_t v74 = *v41;
      uint64_t v75 = v42;
      swift_bridgeObjectRetain();
      v40(v76, 0);
      uint64_t v43 = v69;
      id v73 = *v37;
      v73(v69, v14, v9);
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))v71;
      ((void (*)(char *, uint64_t))v72)(v43, v9);
      uint64_t v44 = v66;
      uint64_t v45 = *(void *)(v66 + *(int *)(v38 + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v45 == v76[0])
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = (uint64_t)v68;
        break;
      }
      uint64_t v46 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v48 = *v47;
      unint64_t v49 = v47[1];
      swift_bridgeObjectRetain();
      v46(v76, 0);
      v73(v43, v44, v9);
      dispatch thunk of Collection.formIndex(after:)();
      ((void (*)(char *, uint64_t))v72)(v43, v9);
      unint64_t v50 = v75;
      if (v75) {
        uint64_t v51 = v74;
      }
      else {
        uint64_t v51 = 0;
      }
      if (!v75) {
        unint64_t v50 = 0xE000000000000000;
      }
      uint64_t v75 = v50;
      if (v49) {
        uint64_t v52 = v48;
      }
      else {
        uint64_t v52 = 0;
      }
      if (v49) {
        unint64_t v53 = v49;
      }
      else {
        unint64_t v53 = 0xE000000000000000;
      }
      uint64_t v54 = v77;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v54 = v77;
      }
      uint64_t v14 = (uint64_t)v68;
      unint64_t v55 = *(void *)(v54 + 16);
      if (v55 >= *(void *)(v54 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v54 = v77;
      }
      *(void *)(v54 + 16) = v55 + 1;
      uint64_t v56 = (void *)(v54 + 32 * v55);
      uint64_t v57 = v75;
      v56[4] = v51;
      v56[5] = v57;
      v56[6] = v52;
      v56[7] = v53;
      uint64_t v9 = v65;
      uint64_t v37 = v70;
      if (*(unsigned char *)(v14 + v67)) {
        goto LABEL_50;
      }
    }
    *(unsigned char *)(v14 + v67) = 1;
LABEL_50:
    outlined destroy of (key: String, value: Any?)(v14, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
    return v77;
  }
  return result;
}

uint64_t MLTextClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v2 = static _TextUtilities.getTextLabeledDictionary(from:)(a1);
  uint64_t v3 = unpackLabeledTexts(_:)(v2);
  specialized static MLTextClassifier.evaluation<A>(on:using:)(v3, *v1);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

{
  void **v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = unpackLabeledTexts(_:)(a1);
  specialized static MLTextClassifier.evaluation<A>(on:using:)(v2, *v1);

  return swift_bridgeObjectRelease();
}

uint64_t MLTextClassifier.evaluation(on:textColumn:labelColumn:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  v34._uint64_t countAndFlagsBits = a3;
  v34._uint64_t object = a4;
  unint64_t v35 = a5;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  MEMORY[0x270FA5388](v30);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_0();
  uint64_t v31 = v10;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v29 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  uint64_t v17 = swift_allocObject();
  long long v33 = xmmword_2272CB370;
  *(_OWORD *)(v17 + 16) = xmmword_2272CB370;
  uint64_t v18 = MEMORY[0x263F8D310];
  *(void *)(v17 + 32) = MEMORY[0x263F8D310];
  v29[1] = a1;
  v29[2] = a2;
  v19._uint64_t countAndFlagsBits = a1;
  v19._uint64_t object = a2;
  v20._uint64_t countAndFlagsBits = 1954047316;
  v20._uint64_t object = (void *)0xE400000000000000;
  DataFrame.validateColumnTypes(_:_:context:)(v19, (Swift::OpaquePointer)v17, v20);
  swift_bridgeObjectRelease();
  if (v21
    || (uint64_t v22 = swift_allocObject(),
        *(_OWORD *)(v22 + 16) = v33,
        *(void *)(v22 + 32) = v18,
        v23._uint64_t countAndFlagsBits = 0x6C6562614CLL,
        v23._uint64_t object = (void *)0xE500000000000000,
        DataFrame.validateColumnTypes(_:_:context:)(v34, (Swift::OpaquePointer)v22, v23),
        swift_bridgeObjectRelease(),
        v21))
  {
    *unint64_t v35 = v21;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    DataFrame.subscript.getter();
    DataFrame.subscript.getter();
    uint64_t v25 = v31;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v26(v8, v16, v9);
    v26(&v8[*(int *)(v30 + 52)], v14, v9);
    uint64_t ML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k106OIegnrzr_TR143_s8CreateML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)v8);
    outlined destroy of (key: String, value: Any?)((uint64_t)v8, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
    specialized static MLTextClassifier.evaluation<A>(on:using:)(ML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n, *v32);
    unint64_t v28 = *(void (**)(char *, uint64_t))(v25 + 8);
    v28(v14, v9);
    v28(v16, v9);
    return swift_bridgeObjectRelease();
  }
}

uint64_t MLTextClassifier.evaluation(on:textColumn:labelColumn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for DataFrame();
  OUTLINED_FUNCTION_0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = *(unsigned char *)(a1 + 8);
  id v20 = *(id *)a1;
  char v21 = v18;
  outlined copy of Result<_DataTable, Error>(v20, v18);
  DataFrame.init(_:)((uint64_t)&v20, (uint64_t)v17);
  MLTextClassifier.evaluation(on:textColumn:labelColumn:)(a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v12);
}

uint64_t outlined init with copy of Zip2Sequence<Column<String>, Column<String>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(uint64_t a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v5 = v3;
  uint64_t v11 = MEMORY[0x263F8EE80];
  uint64_t v9 = (void *)MEMORY[0x22A675AA0]();
  closure #1 in MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(v5, a1, (uint64_t)&v11, a3, a2);
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  else {
    return v11;
  }
}

uint64_t MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)(uint64_t *a1, uint64_t a2)
{
  *(void *)(v3 + 112) = v2;
  uint64_t v6 = type metadata accessor for Event();
  *(void *)(v3 + 120) = v6;
  OUTLINED_FUNCTION_1(v6);
  *(void *)(v3 + 128) = v7;
  *(void *)(v3 + 136) = OUTLINED_FUNCTION_5();
  uint64_t v8 = type metadata accessor for MetricsKey();
  *(void *)(v3 + 144) = v8;
  OUTLINED_FUNCTION_1(v8);
  *(void *)(v3 + 152) = v9;
  *(void *)(v3 + 160) = OUTLINED_FUNCTION_5();
  uint64_t v10 = type metadata accessor for Tensor();
  *(void *)(v3 + 168) = v10;
  OUTLINED_FUNCTION_1(v10);
  *(void *)(v3 + 176) = v11;
  *(void *)(v3 + 184) = OUTLINED_FUNCTION_5();
  uint64_t v12 = type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_17(v12);
  *(void *)(v3 + 192) = swift_task_alloc();
  *(void *)(v3 + 200) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for TrainingTablePrinter(0);
  *(void *)(v3 + 208) = v13;
  OUTLINED_FUNCTION_17(v13);
  *(void *)(v3 + 216) = OUTLINED_FUNCTION_5();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  OUTLINED_FUNCTION_17(v14);
  *(void *)(v3 + 224) = OUTLINED_FUNCTION_5();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  OUTLINED_FUNCTION_17(v15);
  *(void *)(v3 + 232) = OUTLINED_FUNCTION_5();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  *(void *)(v3 + 240) = v16;
  OUTLINED_FUNCTION_1(v16);
  *(void *)(v3 + 248) = v17;
  uint64_t v18 = OUTLINED_FUNCTION_5();
  uint64_t v19 = *a1;
  *(void *)(v3 + 256) = v18;
  *(void *)(v3 + 264) = v19;
  *(unsigned char *)(v3 + 304) = *((unsigned char *)a1 + 8);
  *(void *)(v3 + 272) = *(void *)a2;
  *(unsigned char *)(v3 + 305) = *(unsigned char *)(a2 + 8);
  return MEMORY[0x270FA2498](MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:), 0, 0);
}

uint64_t MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)()
{
  uint64_t v73 = v0;
  char v1 = *(unsigned char *)(v0 + 305);
  uint64_t v2 = *(void *)(v0 + 272);
  char v3 = *(unsigned char *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v6 = *(void ***)(v0 + 112);
  uint64_t v7 = *v6;
  uint64_t v69 = *(void *)(v0 + 264);
  char v70 = v3;
  uint64_t v71 = v2;
  LOBYTE(v72) = v1;
  uint64_t v8 = type metadata accessor for MLHandActionClassifier();
  uint64_t v9 = (uint64_t)v6 + *(int *)(v8 + 28);
  static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(v4, v5, v7, (uint64_t)&v69, (uint64_t)&v71, v9);
  MLHandActionClassifier.GraphCNN.loadPretrainedCoreMLModel()();
  if (v10)
  {
    uint64_t v11 = *(void *)(v0 + 232);
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 240));
    uint64_t v12 = v11;
LABEL_3:
    outlined destroy of URL?(v12, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  uint64_t v68 = v8;
  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 240);
  MLHandActionClassifier.GraphCNN.initDevice()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  uint64_t v17 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey))
                  - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2272CB370;
  id v20 = (void *)(v19 + v18);
  *id v20 = 0xD000000000000011;
  v20[1] = 0x80000002272DA5F0;
  static MetricsKey.trainingAccuracy.getter();
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v0 + 80) = v21;
  if (__swift_getEnumTagSinglePayload(v16, 1, v15) != 1)
  {
    uint64_t v22 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 144);
    static MetricsKey.validationAccuracy.getter();
    __swift_storeEnumTagSinglePayload(v22, 0, 1, v23);
    specialized Dictionary.subscript.setter();
    uint64_t v21 = *(void *)(v0 + 80);
  }
  uint64_t v24 = *(void *)(v0 + 208);
  uint64_t v25 = *(void *)(v0 + 216);
  *(void *)(v25 + *(int *)(v24 + 24)) = v21;
  type metadata accessor for OS_os_log();
  *(void *)(v25 + *(int *)(v24 + 20)) = OS_os_log.init(subsystem:category:)();
  Date.init()();
  TrainingTablePrinter.beginTable()();
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  uint64_t v26 = *(void *)(v9 + *(int *)(result + 24));
  if (v26 < 0)
  {
    __break(1u);
    return result;
  }
  if (v26)
  {
    Swift::Int v27 = 0;
    unint64_t v28 = (_OWORD *)(v0 + 16);
    uint64_t v66 = (_OWORD *)(v0 + 48);
    uint64_t v67 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 176) + 8);
    uint64_t v65 = v26;
    while (1)
    {
      uint64_t v29 = MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(*(void *)(v0 + 256), *(void *)(v0 + 232), v27);
      specialized Dictionary.subscript.getter(0xD000000000000012, 0x80000002272D4230, v29, v28);
      if (!*(void *)(v0 + 40))
      {
        swift_bridgeObjectRelease();
        outlined destroy of URL?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
        goto LABEL_23;
      }
      type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(**(void **)(v0 + 112), *(double **)(v0 + 200));
      uint64_t v30 = *(void *)(v0 + 184);
      uint64_t v31 = *(void *)(v0 + 168);
      uint64_t v32 = *(void *)(v0 + 112);
      outlined assign with take of MLClassifierMetrics(*(void *)(v0 + 200), v32 + *(int *)(v68 + 32));
      _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
      static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v30, *(void *)(*(void *)v32 + 16));
      uint64_t v34 = v33;
      unint64_t v35 = *v67;
      (*v67)(v30, v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MetricsKey, Double)>);
      uint64_t v36 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetricsKey, Double))
                  - 8);
      unint64_t v37 = (*(unsigned __int8 *)(*(void *)v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v36 + 80);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_2272CB370;
      unint64_t v39 = v38 + v37;
      uint64_t v40 = v36[14];
      static MetricsKey.trainingAccuracy.getter();
      *(void *)(v39 + v40) = v34;
      _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, MEMORY[0x263F042E0]);
      uint64_t v41 = Dictionary.init(dictionaryLiteral:)();
      specialized Dictionary.subscript.getter(0xD000000000000014, 0x80000002272D4280, v29, v66);
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 72))
      {
        if (swift_dynamicCast())
        {
          static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(**(void **)(v0 + 112), *(double **)(v0 + 192));
          uint64_t v42 = *(void *)(v0 + 184);
          uint64_t v43 = *(void *)(v0 + 160);
          uint64_t v64 = *(void *)(v0 + 168);
          uint64_t v44 = *(void *)(v0 + 112);
          outlined assign with take of MLClassifierMetrics(*(void *)(v0 + 192), v44 + *(int *)(v68 + 36));
          static MetricsKey.validationAccuracy.getter();
          _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
          static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v42, *(void *)(*(void *)v44 + 16));
          double v46 = v45;
          v35(v42, v64);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v71 = v41;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, isUniquelyReferenced_nonNull_native, v46);
          uint64_t v41 = v71;
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_25_0();
          v48();
          swift_release();
        }
      }
      else
      {
        outlined destroy of URL?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v49 = *(void *)(v0 + 136);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v41);
      swift_bridgeObjectRelease();
      Event.init(origin:itemCount:totalItemCount:metrics:)();
      TrainingTablePrinter.print(_:)(v49);
      swift_release();
      OUTLINED_FUNCTION_25_0();
      v50();
      ++v27;
      unint64_t v28 = (_OWORD *)(v0 + 16);
      if (v65 == v27) {
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRelease();
LABEL_23:
    uint64_t v55 = *(void *)(v0 + 248);
    uint64_t v54 = *(void *)(v0 + 256);
    uint64_t v56 = *(void *)(v0 + 232);
    uint64_t v57 = *(void *)(v0 + 240);
    uint64_t v58 = *(void *)(v0 + 216);
    uint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    v59._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
    v59._uint64_t object = (void *)0x80000002272DB630;
    String.append(_:)(v59);
    *(void *)(v0 + 88) = v27;
    v60._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    uint64_t v61 = v71;
    unint64_t v62 = v72;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v63 = v61;
    *(void *)(v63 + 8) = v62;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(unsigned char *)(v63 + 48) = 0;
    swift_willThrow();
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVWOhTm_0(v58, (void (*)(void))type metadata accessor for TrainingTablePrinter);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v57);
    uint64_t v12 = v56;
    goto LABEL_3;
  }
LABEL_18:
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_2272CB370;
  uint64_t v52 = MEMORY[0x263F8D750];
  *(void *)(v51 + 56) = MEMORY[0x263F8D6C8];
  *(void *)(v51 + 64) = v52;
  *(void *)(v51 + 32) = 3;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  unint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v53;
  void *v53 = v0;
  v53[1] = MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:);
  return MLHandActionClassifier.GraphCNN.compile()();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  char v1 = v0[37];
  char v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v6 = v0[14];
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVWOhTm_0(v0[27], (void (*)(void))type metadata accessor for TrainingTablePrinter);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);

  *(void *)(v6 + 16) = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  char v1 = v0[29];
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVWOhTm_0(v0[27], (void (*)(void))type metadata accessor for TrainingTablePrinter);
  uint64_t v2 = OUTLINED_FUNCTION_10_38();
  v3(v2);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:);
  }
  else
  {
    *(void *)(v4 + 296) = a1;
    uint64_t v5 = MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t MLHandActionClassifier.GraphCNN.evaluate(_:)(unint64_t a1)
{
  uint64_t v3 = v1;
  unint64_t v76 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LossReduction?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  uint64_t v78 = v6;
  uint64_t v66 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v69 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33();
  uint64_t v11 = v9 - v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_45_3();
  uint64_t v65 = v13;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_45_3();
  uint64_t v64 = v15;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v16);
  uint64_t v63 = (char *)v61 - v17;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  OUTLINED_FUNCTION_0();
  uint64_t v68 = v18;
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_3_0();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  uint64_t v24 = OUTLINED_FUNCTION_17(v23);
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_27_7();
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_3_0();
  uint64_t v28 = v27 - v26;
  uint64_t v29 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_0();
  uint64_t v31 = v30;
  MEMORY[0x270FA5388](v32);
  OUTLINED_FUNCTION_3_0();
  uint64_t v35 = v34 - v33;
  (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v34 - v33, *MEMORY[0x263F583B0], v29);
  OUTLINED_FUNCTION_81_2();
  uint64_t v79 = (void *)type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.prepare(for:)();
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v29);
  uint64_t v36 = *(void *)(*(void *)(v1 + 16) + 16);
  type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
  swift_allocObject();
  uint64_t v37 = v80;
  uint64_t result = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v36);
  if (!v37)
  {
    uint64_t v77 = result;
    v61[1] = 0;
    uint64_t v75 = v2;
    uint64_t v72 = v11;
    uint64_t v73 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
    Dataset.makeIterator()();
    uint64_t v67 = (void (**)(uint64_t *))(v28 + *(int *)(v71 + 44));
    unint64_t v76 = lazy protocol witness table accessor for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator();
    uint64_t v80 = 0;
    uint64_t v71 = v68 + 32;
    unsigned int v70 = *MEMORY[0x263F583C0];
    v68 += 8;
    ++v69;
    float v39 = 0.0;
    uint64_t v40 = v66;
    uint64_t v41 = v62;
    uint64_t v74 = v28;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
      dispatch thunk of IteratorProtocol.next()();
      if (v82)
      {
        uint64_t v42 = *v67;
        uint64_t v81 = v82;
        uint64_t v43 = v75;
        v42(&v81);
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v45 = v43;
        uint64_t v46 = 0;
      }
      else
      {
        uint64_t v44 = v75;
        uint64_t v45 = v75;
        uint64_t v46 = 1;
      }
      __swift_storeEnumTagSinglePayload(v45, v46, 1, v41);
      if (__swift_getEnumTagSinglePayload(v44, 1, v41) == 1)
      {
        outlined destroy of URL?(v74, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
        return v77;
      }
      uint64_t v47 = v40;
      uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v71)(v22, v44, v41);
      uint64_t v49 = (void *)MEMORY[0x22A675AA0](v48);
      DataSample.features.getter();
      DataSample.labels.getter();
      MLHandActionClassifier.GraphCNN.callAsFunction(_:)();
      uint64_t v50 = type metadata accessor for LossReduction();
      OUTLINED_FUNCTION_8();
      uint64_t v52 = v78;
      (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))(v78, v70, v50);
      __swift_storeEnumTagSinglePayload(v52, 0, 1, v50);
      uint64_t v53 = v72;
      softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)();
      uint64_t v54 = v52;
      uint64_t v55 = v53;
      outlined destroy of URL?(v54, &demangling cache variable for type metadata for LossReduction?);
      _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)();
      uint64_t result = Tensor.scalar<A>(as:)();
      if (__OFADD__(v80, 1)) {
        break;
      }
      float v39 = v39 + *(float *)&v82;
      uint64_t v79 = v49;
      uint64_t v56 = *v69;
      uint64_t v57 = v55;
      uint64_t v40 = v47;
      uint64_t v58 = v47;
      uint64_t v59 = v80;
      ((void (*)(uint64_t, uint64_t))*v69)(v57, v58);
      OUTLINED_FUNCTION_14_33();
      v56();
      OUTLINED_FUNCTION_14_33();
      v56();
      OUTLINED_FUNCTION_14_33();
      v56();
      OUTLINED_FUNCTION_25_0();
      v60();
      uint64_t v80 = v59 + 1;
    }
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall MLHandActionClassifier.GraphCNN.initDevice()()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for ComputeDevice();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_33();
  uint64_t v14 = v12 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v28 - v16;
  static ComputeDevice.gpu.getter();
  if (__swift_getEnumTagSinglePayload(v7, 1, v8) == 1)
  {
    static ComputeDevice.cpu.getter();
    outlined destroy of URL?(v7, &demangling cache variable for type metadata for ComputeDevice?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v17, v7, v8);
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static MLHandActionClassifier.logger);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v14, v17, v8);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    v28[1] = v2;
    uint64_t v22 = v21;
    v28[0] = swift_slowAlloc();
    v29[0] = v28[0];
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v1 = (void (*)(uint64_t))(v22 + 12);
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1(&lazy protocol witness table cache variable for type ComputeDevice and conformance ComputeDevice, MEMORY[0x263F58398]);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    void v28[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = OUTLINED_FUNCTION_7_53();
    ((void (*)(uint64_t))(v22 + 12))(v25);
    _os_log_impl(&dword_22704D000, v19, v20, "Using %s to create model", (uint8_t *)v22, 0xCu);
    uint64_t v26 = v28[0];
    swift_arrayDestroy();
    MEMORY[0x22A676210](v26, -1, -1);
    MEMORY[0x22A676210](v22, -1, -1);
  }
  else
  {
    uint64_t v27 = OUTLINED_FUNCTION_7_53();
    v1(v27);
  }

  swift_beginAccess();
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.place(on:)();
  swift_endAccess();
  ((void (*)(char *, uint64_t))v1)(v17, v8);
}

uint64_t closure #1 in MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int a4, uint64_t a5)
{
  uint64_t v27 = a5;
  Swift::Int v24 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MLHandActionClassifier.GraphCNN.train(_:)(a2);
  if (!v5)
  {
    uint64_t v17 = result;
    uint64_t v23 = v12;
    uint64_t v26 = MEMORY[0x263F8D538];
    v25[0] = v16;
    specialized Dictionary.subscript.setter((uint64_t)v25, 0x676E696E69617274, 0xED000073736F6C5FLL);
    uint64_t v18 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
    uint64_t v26 = v18;
    v25[0] = v17;
    swift_retain();
    v22[1] = a3;
    specialized Dictionary.subscript.setter((uint64_t)v25, 0xD000000000000012, 0x80000002272D4230);
    MLHandActionClassifier.GraphCNN.adjustLearningRate(epoch:)(v24);
    outlined init with copy of Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?(v27, (uint64_t)v10);
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
    {
      swift_release();
      return outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
    }
    else
    {
      uint64_t v27 = v18;
      uint64_t v19 = v23;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v14, v10, v11);
      uint64_t v20 = MLHandActionClassifier.GraphCNN.evaluate(_:)((unint64_t)v14);
      uint64_t v26 = MEMORY[0x263F8D538];
      v25[0] = v21;
      specialized Dictionary.subscript.setter((uint64_t)v25, 0x69746164696C6176, 0xEF73736F6C5F6E6FLL);
      uint64_t v26 = v27;
      v25[0] = v20;
      specialized Dictionary.subscript.setter((uint64_t)v25, 0xD000000000000014, 0x80000002272D4280);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, v11);
    }
  }
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.train(_:)(uint64_t a1)
{
  uint64_t v80 = a1;
  uint64_t v3 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v74 = v5;
  uint64_t v6 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v63 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_33();
  uint64_t v73 = v9 - v10;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_45_3();
  uint64_t v13 = v12;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_45_3();
  uint64_t v71 = v15;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v59 - v17;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  OUTLINED_FUNCTION_0();
  uint64_t v62 = v19;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_33_0();
  uint64_t v76 = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  uint64_t v23 = OUTLINED_FUNCTION_17(v22);
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_33_0();
  uint64_t v77 = v24;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_33_0();
  uint64_t v78 = v26;
  uint64_t v27 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_0();
  uint64_t v29 = v28;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_27_7();
  (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v2, *MEMORY[0x263F583A8], v27);
  uint64_t v79 = v1;
  uint64_t v31 = (uint64_t)v1 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  OUTLINED_FUNCTION_81_2();
  uint64_t ML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1 = _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v75 = v3;
  uint64_t v70 = ML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1;
  uint64_t v72 = v31;
  Layer.prepare(for:)();
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v2, v27);
  if (specialized Dataset.isEmpty.getter())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(void *)uint64_t v33 = 0xD000000000000036;
    *(void *)(v33 + 8) = 0x80000002272DB3A0;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(unsigned char *)(v33 + 48) = 1;
    swift_willThrow();
    return v27;
  }
  uint64_t v34 = v79;
  uint64_t v35 = *(void *)(v79[2] + 16);
  type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
  swift_allocObject();
  unint64_t v36 = v69;
  uint64_t v37 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v35);
  if (v36) {
    return v27;
  }
  uint64_t v68 = v37;
  v59[1] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  uint64_t v39 = v78;
  Dataset.makeIterator()();
  uint64_t v61 = (void (**)(uint64_t *))(v39 + *(int *)(v66 + 44));
  uint64_t v66 = (uint64_t)v34 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer;
  unint64_t v69 = lazy protocol witness table accessor for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator();
  uint64_t v40 = 0;
  uint64_t v65 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 32);
  uint64_t v64 = (void (**)(uint64_t, uint64_t, uint64_t))(v63 + 4);
  ++v63;
  v62 += 8;
  float v41 = 0.0;
  uint64_t v42 = v60;
  uint64_t v43 = v76;
  uint64_t v67 = v6;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v44 = v77;
    if (v82)
    {
      uint64_t v45 = *v61;
      v81[0] = v82;
      v45(v81);
      swift_bridgeObjectRelease();
      uint64_t v46 = v44;
      uint64_t v47 = 0;
    }
    else
    {
      uint64_t v46 = v77;
      uint64_t v47 = 1;
    }
    __swift_storeEnumTagSinglePayload(v46, v47, 1, v42);
    uint64_t v27 = v68;
    if (__swift_getEnumTagSinglePayload(v44, 1, v42) == 1)
    {
      outlined destroy of URL?(v78, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
      return v27;
    }
    uint64_t v48 = (*v65)(v43, v44, v42);
    uint64_t v79 = (void *)MEMORY[0x22A675AA0](v48);
    DataSample.features.getter();
    uint64_t v49 = v71;
    DataSample.labels.getter();
    uint64_t v80 = v40;
    uint64_t v50 = v13;
    uint64_t v51 = v74;
    uint64_t v52 = outlined init with copy of MLHandActionClassifier.GraphCNNModel(v72, v74);
    MEMORY[0x270FA5388](v52);
    v59[-4] = v18;
    v59[-3] = v49;
    v59[-2] = v27;
    uint64_t v53 = v73;
    valueWithGradient<A>(at:of:)();
    uint64_t v54 = v51;
    uint64_t v55 = v67;
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVWOhTm_0(v54, (void (*)(void))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    (*v64)(v50, v53, v55);
    OUTLINED_FUNCTION_81_2();
    OUTLINED_FUNCTION_81_2();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
    uint64_t v56 = v80;
    SGD.update(_:with:)();
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v13 = v50;
    uint64_t result = Tensor.scalar<A>(as:)();
    if (__OFADD__(v56, 1)) {
      break;
    }
    float v41 = v41 + *(float *)&v82;
    uint64_t v57 = *v63;
    OUTLINED_FUNCTION_11_46();
    v57();
    OUTLINED_FUNCTION_11_46();
    v57();
    OUTLINED_FUNCTION_11_46();
    v57();
    uint64_t v43 = v76;
    OUTLINED_FUNCTION_25_0();
    v58();
    uint64_t v40 = v56 + 1;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall MLHandActionClassifier.GraphCNN.adjustLearningRate(epoch:)(Swift::Int epoch)
{
  if (one-time initialization token for adjustLearningRateSteps != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(static MLHandActionClassifier.GraphCNN.ModelTrainingInternalParameters.adjustLearningRateSteps + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(static MLHandActionClassifier.GraphCNN.ModelTrainingInternalParameters.adjustLearningRateSteps
                      + 32);
    float v5 = 0.01;
    do
    {
      Swift::Int v6 = *v4++;
      if (v6 <= epoch) {
        float v5 = v5 * 0.1;
      }
      --v3;
    }
    while (v3);
  }
  else
  {
    float v5 = 0.01;
  }
  uint64_t v7 = (float *)(v1 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer);
  swift_beginAccess();
  *uint64_t v7 = v5;
}

BOOL specialized Dataset.isEmpty.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  MEMORY[0x270FA5388](v3);
  float v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  Dataset.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
  lazy protocol witness table accessor for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator();
  dispatch thunk of IteratorProtocol.next()();
  if (v14)
  {
    Swift::Int v6 = *(void (**)(uint64_t *))&v5[*(int *)(v3 + 44)];
    uint64_t v13 = v14;
    v6(&v13);
    swift_bridgeObjectRelease();
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
    uint64_t v8 = (uint64_t)v2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
    uint64_t v8 = (uint64_t)v2;
    uint64_t v9 = 1;
  }
  __swift_storeEnumTagSinglePayload(v8, v9, 1, v7);
  outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v2, 1, v10);
  if (EnumTagSinglePayload != 1) {
    outlined destroy of URL?((uint64_t)v2, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  }
  return EnumTagSinglePayload == 1;
}

uint64_t closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LossReduction?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Tensor();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.callAsFunction(_:)();
  uint64_t v13 = *MEMORY[0x263F583C0];
  uint64_t v14 = type metadata accessor for LossReduction();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v8, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v14);
  softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)();
  outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for LossReduction?);
  uint64_t v17 = a4;
  uint64_t v18 = v12;
  uint64_t v19 = a3;
  withoutGradient<A>(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t partial apply for closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)()
{
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x263F8EE78];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t _s8CreateML22MLHandActionClassifierV13GraphCNNModelVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_25_0();
  v3();
  return a1;
}

uint64_t _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_53()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_34()
{
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingTablePrinter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    id v11 = v10;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TrainingTablePrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  id v10 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22726AE58);
}

uint64_t sub_22726AE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Date();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_7_54(*(void *)(a1 + *(int *)(a3 + 20)));
  }

  return __swift_getEnumTagSinglePayload(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22726AEEC);
}

void sub_22726AEEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_3_71();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(v5, v4, v4, v8);
  }
  else
  {
    *(void *)(v5 + *(int *)(a4 + 20)) = (v4 - 1);
  }
}

uint64_t type metadata accessor for TrainingTablePrinter(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for TrainingTablePrinter);
}

uint64_t type metadata completion function for TrainingTablePrinter()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized EnumeratedSequence.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  uint64_t v7 = -1 << v2;
  if (-v7 < 64) {
    uint64_t v3 = ~(-1 << -(char)v7);
  }
  a2[1] = result;
  a2[2] = ~v7;
  a2[3] = 0;
  a2[4] = v3 & v5;
  a2[5] = 0;
  return result;
}

uint64_t specialized EnumeratedSequence.Iterator.next()()
{
  int64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  int64_t v3 = v2;
  if (!v1)
  {
    int64_t v6 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_26;
    }
    int64_t v7 = (unint64_t)(v0[2] + 64) >> 6;
    if (v6 < v7)
    {
      uint64_t v8 = v0[1];
      uint64_t v9 = *(void *)(v8 + 8 * v6);
      if (v9)
      {
LABEL_8:
        uint64_t v4 = (v9 - 1) & v9;
        int64_t v3 = v6;
        goto LABEL_3;
      }
      int64_t v10 = v2 + 2;
      int64_t v3 = v2 + 1;
      if (v2 + 2 < v7)
      {
        uint64_t v9 = *(void *)(v8 + 8 * v10);
        if (v9)
        {
LABEL_11:
          int64_t v6 = v10;
          goto LABEL_8;
        }
        int64_t v3 = v2 + 2;
        if (v2 + 3 < v7)
        {
          uint64_t v9 = *(void *)(v8 + 8 * (v2 + 3));
          if (v9)
          {
            int64_t v6 = v2 + 3;
            goto LABEL_8;
          }
          int64_t v10 = v2 + 4;
          int64_t v3 = v2 + 3;
          if (v2 + 4 < v7)
          {
            uint64_t v9 = *(void *)(v8 + 8 * v10);
            if (v9) {
              goto LABEL_11;
            }
            int64_t v6 = v2 + 5;
            int64_t v3 = v2 + 4;
            if (v2 + 5 < v7)
            {
              uint64_t v9 = *(void *)(v8 + 8 * v6);
              if (v9) {
                goto LABEL_8;
              }
              int64_t v3 = v7 - 1;
              int64_t v11 = v2 + 6;
              while (v11 < v7)
              {
                uint64_t v9 = *(void *)(v8 + 8 * v11++);
                if (v9)
                {
                  int64_t v6 = v11 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v5 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v5;
  }
  uint64_t v4 = (v1 - 1) & v1;
LABEL_3:
  v0[3] = v3;
  v0[4] = v4;
  uint64_t v5 = v0[5];
  if (!__OFADD__(v5, 1))
  {
    v0[5] = v5 + 1;
    swift_bridgeObjectRetain();
    return v5;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized EnumeratedSequence.Iterator.next()@<X0>(void *a1@<X8>)
{
  unint64_t v36 = a1;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey));
  MEMORY[0x270FA5388](v37);
  int64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  MEMORY[0x270FA5388](v4 - 8);
  int64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MetricsKey();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x270FA5388](v7);
  int64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v14 = v1[2];
  int64_t v15 = v1[3];
  unint64_t v16 = v1[4];
  uint64_t v35 = v3;
  if (!v16)
  {
    int64_t v29 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_32;
    }
    int64_t v30 = (unint64_t)(v14 + 64) >> 6;
    if (v29 >= v30)
    {
      uint64_t v17 = 0;
      uint64_t v19 = 1;
      goto LABEL_4;
    }
    unint64_t v31 = *(void *)(v12 + 8 * v29);
    if (v31) {
      goto LABEL_12;
    }
    int64_t v32 = v15 + 2;
    if (v15 + 2 < v30)
    {
      unint64_t v31 = *(void *)(v12 + 8 * v32);
      if (v31) {
        goto LABEL_16;
      }
      if (v15 + 3 >= v30) {
        goto LABEL_29;
      }
      unint64_t v31 = *(void *)(v12 + 8 * (v15 + 3));
      if (v31)
      {
        int64_t v29 = v15 + 3;
        goto LABEL_12;
      }
      int64_t v32 = v15 + 4;
      if (v15 + 4 >= v30)
      {
        uint64_t v17 = 0;
        uint64_t v19 = 1;
        v15 += 3;
        goto LABEL_4;
      }
      unint64_t v31 = *(void *)(v12 + 8 * v32);
      if (v31)
      {
LABEL_16:
        int64_t v29 = v32;
LABEL_12:
        uint64_t v17 = (v31 - 1) & v31;
        unint64_t v18 = __clz(__rbit64(v31)) + (v29 << 6);
        int64_t v15 = v29;
        goto LABEL_3;
      }
      int64_t v29 = v15 + 5;
      if (v15 + 5 >= v30)
      {
LABEL_29:
        uint64_t v17 = 0;
        uint64_t v19 = 1;
        int64_t v15 = v32;
        goto LABEL_4;
      }
      unint64_t v31 = *(void *)(v12 + 8 * v29);
      if (v31) {
        goto LABEL_12;
      }
      int64_t v29 = v30 - 1;
      int64_t v33 = v15 + 6;
      while (v33 < v30)
      {
        unint64_t v31 = *(void *)(v12 + 8 * v33++);
        if (v31)
        {
          int64_t v29 = v33 - 1;
          goto LABEL_12;
        }
      }
    }
    uint64_t v17 = 0;
    uint64_t v19 = 1;
    int64_t v15 = v29;
    goto LABEL_4;
  }
  uint64_t v17 = (v16 - 1) & v16;
  unint64_t v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_3:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(void *)(v13 + 56) + *(void *)(v8 + 72) * v18, v7);
  uint64_t v19 = 0;
LABEL_4:
  __swift_storeEnumTagSinglePayload((uint64_t)v6, v19, 1, v7);
  *uint64_t v1 = v13;
  v1[1] = v12;
  v1[2] = v14;
  v1[3] = v15;
  void v1[4] = v17;
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of (key: String, value: Any?)((uint64_t)v6, &demangling cache variable for type metadata for MetricsKey?);
    uint64_t v20 = (uint64_t)v36;
    uint64_t v21 = v37;
    uint64_t v22 = 1;
    return __swift_storeEnumTagSinglePayload(v20, v22, 1, v21);
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v23(v11, v6, v7);
  uint64_t v24 = v37;
  uint64_t v25 = &v35[*(int *)(v37 + 48)];
  uint64_t v26 = v1[5];
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v23)(v25, v11, v7);
  if (!__OFADD__(v26, 1))
  {
    v1[5] = v26 + 1;
    uint64_t v27 = v36;
    uint64_t v28 = (char *)v36 + *(int *)(v24 + 48);
    *unint64_t v36 = v26;
    v23(v28, v25, v7);
    uint64_t v20 = (uint64_t)v27;
    uint64_t v22 = 0;
    uint64_t v21 = v24;
    return __swift_storeEnumTagSinglePayload(v20, v22, 1, v21);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized EnumeratedSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t result = CMLSequence.size.getter();
  if (v3 == result)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = -1;
    return result;
  }
  swift_retain();
  CMLSequence.value(at:)(v3);
  uint64_t v6 = v5;
  swift_release();
  MLDataValue.init(_:)(v6, (uint64_t)v12);
  uint64_t v7 = v12[0];
  uint64_t v8 = v12[1];
  char v9 = v13;
  swift_retain();
  uint64_t v10 = CMLSequence.size.getter();
  uint64_t result = swift_release();
  if (v3 < 0 || v3 >= v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  *(void *)(v1 + 8) = v3 + 1;
  uint64_t v11 = *(void *)(v1 + 16);
  if (__OFADD__(v11, 1))
  {
LABEL_9:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  *(void *)(v1 + 16) = v11 + 1;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  return result;
}

Swift::Void __swiftcall log(_:type:)(Swift::String _, os_log_type_t type)
{
  uint64_t object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2272CB370;
  uint64_t v5 = MEMORY[0x263F8D310];
  *(void *)(v4 + 56) = MEMORY[0x263F8D310];
  *(void *)(v4 + 32) = countAndFlagsBits;
  *(void *)(v4 + 40) = object;
  swift_bridgeObjectRetain();
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  type metadata accessor for OS_os_log();
  uint64_t v6 = (void *)static OS_os_log.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2272CB370;
  *(void *)(v7 + 56) = v5;
  *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 32) = countAndFlagsBits;
  *(void *)(v7 + 40) = object;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _TablePrinter.beginTable()()
{
  uint64_t v1 = type metadata accessor for _TablePrinter(0);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = MEMORY[0x263F8D6C8];
  *(_OWORD *)(v2 + 16) = xmmword_2272CB370;
  uint64_t v4 = MEMORY[0x263F8D750];
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = v4;
  *(void *)(v2 + 32) = 0;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2272CB4A0;
  OUTLINED_FUNCTION_8_44();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = 0xEC000000656D6954;
  uint64_t v8 = (uint64_t *)(v6 + 40);
  char v9 = (uint64_t *)(v0 + *(int *)(v1 + 28));
  uint64_t v10 = *v9;
  uint64_t v11 = (void *)v9[1];
  uint64_t v20 = *v9;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 0x737365636F725020;
  v12._uint64_t object = (void *)0xEA00000000006465;
  String.append(_:)(v12);
  *(void *)(inited + 48) = v20;
  *(void *)(inited + 56) = v11;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v10;
  v13._uint64_t object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  *(void *)(inited + 64) = 0xD000000000000010;
  *(void *)(inited + 72) = 0x80000002272DB6F0;
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  uint64_t v15 = MEMORY[0x263F8E9C0];
  uint64_t v16 = MEMORY[0x263F8D310];
  do
  {
    uint64_t v18 = *(v8 - 1);
    uint64_t v17 = *v8;
    swift_bridgeObjectRetain();
    static os_log_type_t.info.getter();
    uint64_t v19 = OUTLINED_FUNCTION_1_58();
    *(_OWORD *)(v19 + 16) = xmmword_2272CB4A0;
    *(void *)(v19 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v19 + 64) = MEMORY[0x263F8D750];
    *(void *)(v19 + 32) = 1;
    *(void *)(v19 + 96) = MEMORY[0x263F8E970];
    *(void *)(v19 + 104) = v15;
    *(void *)(v19 + 72) = v14;
    *(void *)(v19 + 136) = v16;
    *(void *)(v19 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v19 + 112) = v18;
    *(void *)(v19 + 120) = v17;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_9_45();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 += 2;
    ++v14;
  }
  while (v14 != 3);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
}

Swift::Void __swiftcall _TablePrinter.printRow(currentFileIndex:)(Swift::Int currentFileIndex)
{
  type metadata accessor for _TablePrinter(0);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v3 = OUTLINED_FUNCTION_1_58();
  uint64_t v4 = MEMORY[0x263F8D6C8];
  *(_OWORD *)(v3 + 16) = xmmword_2272CB4A0;
  uint64_t v5 = MEMORY[0x263F8D750];
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = v5;
  *(void *)(v3 + 32) = 2;
  *(void *)(v3 + 96) = v4;
  *(void *)(v3 + 104) = v5;
  *(void *)(v3 + 72) = 0;
  Date.timeIntervalSinceNow.getter();
  uint64_t v6 = MEMORY[0x263F8D5B8];
  *(void *)(v3 + 136) = MEMORY[0x263F8D538];
  *(void *)(v3 + 144) = v6;
  *(double *)(v3 + 112) = -v7;
  OUTLINED_FUNCTION_2_65();
  swift_bridgeObjectRelease();
  static os_log_type_t.info.getter();
  uint64_t v8 = (__n128 *)OUTLINED_FUNCTION_1_58();
  OUTLINED_FUNCTION_4_63(v8, v9, v10, v11, v12, v13, v14, v15, v16);
  v17[9] = 1;
  v17[17] = v4;
  v17[18] = v5;
  v17[14] = currentFileIndex;
  OUTLINED_FUNCTION_2_65();
  swift_bridgeObjectRelease();
  static os_log_type_t.info.getter();
  uint64_t v18 = (__n128 *)OUTLINED_FUNCTION_1_58();
  OUTLINED_FUNCTION_4_63(v18, v19, v20, v21, v22, v23, v24, v25, v26);
  v27[9] = 2;
  uint64_t v28 = *v1;
  v27[17] = v4;
  v27[18] = v5;
  v27[14] = v28;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for _TablePrinter(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for _TablePrinter);
}

Swift::String __swiftcall getOSVersion()()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_processInfo);
  objc_msgSend(v1, sel_operatingSystemVersion);
  uint64_t v2 = v25;

  uint64_t v25 = v2;
  uint64_t v25 = OUTLINED_FUNCTION_5_56();
  __n128 v26 = v3;
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 46;
  v4._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = v25;
  uint64_t v5 = v26;
  id v7 = objc_msgSend(v0, sel_processInfo);
  objc_msgSend(v7, sel_operatingSystemVersion);
  uint64_t v8 = (uint64_t)v26;

  uint64_t v25 = v8;
  uint64_t v9 = OUTLINED_FUNCTION_5_56();
  uint64_t v11 = v10;
  uint64_t v25 = v6;
  __n128 v26 = v5;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v9;
  v12._uint64_t object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 46;
  v13._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = v25;
  uint64_t v14 = v26;
  id v16 = objc_msgSend(v0, sel_processInfo);
  objc_msgSend(v16, sel_operatingSystemVersion);
  uint64_t v17 = v27;

  uint64_t v25 = v17;
  uint64_t v18 = OUTLINED_FUNCTION_5_56();
  uint64_t v20 = v19;
  uint64_t v25 = v15;
  __n128 v26 = v14;
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = v18;
  v21._uint64_t object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = v25;
  uint64_t v23 = v26;
  result._uint64_t object = v23;
  result._uint64_t countAndFlagsBits = v22;
  return result;
}

Swift::Void __swiftcall TrainingTablePrinter.beginTable()()
{
  uint64_t v18 = type metadata accessor for TrainingTablePrinter(0);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8D6C8];
  *(_OWORD *)(v0 + 16) = xmmword_2272CB370;
  uint64_t v2 = MEMORY[0x263F8D750];
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = v2;
  *(void *)(v0 + 32) = 0;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.info.getter();
  uint64_t v3 = OUTLINED_FUNCTION_1_58();
  *(_OWORD *)(v3 + 16) = xmmword_2272CB4A0;
  *(void *)(v3 + 56) = v1;
  *(void *)(v3 + 64) = v2;
  *(void *)(v3 + 32) = 1;
  *(void *)(v3 + 96) = v1;
  *(void *)(v3 + 104) = v2;
  *(void *)(v3 + 72) = 0;
  uint64_t v4 = MEMORY[0x263F8D310];
  *(void *)(v3 + 136) = MEMORY[0x263F8D310];
  unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v3 + 144) = v5;
  *(void *)(v3 + 112) = 0x6F69746172657449;
  *(void *)(v3 + 120) = 0xE90000000000006ELL;
  OUTLINED_FUNCTION_9_45();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.info.getter();
  uint64_t v6 = OUTLINED_FUNCTION_1_58();
  *(_OWORD *)(v6 + 16) = xmmword_2272CB4A0;
  *(void *)(v6 + 56) = v1;
  *(void *)(v6 + 64) = v2;
  *(void *)(v6 + 32) = 1;
  *(void *)(v6 + 96) = v1;
  *(void *)(v6 + 104) = v2;
  *(void *)(v6 + 72) = 1;
  *(void *)(v6 + 136) = v4;
  *(void *)(v6 + 144) = v5;
  OUTLINED_FUNCTION_8_44();
  *(void *)(v7 + 112) = v8;
  *(void *)(v7 + 120) = 0xEC000000656D6954;
  OUTLINED_FUNCTION_9_45();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  specialized EnumeratedSequence.makeIterator()(*(void *)(v19 + *(int *)(v18 + 24)), &v20);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = specialized EnumeratedSequence.Iterator.next()();
  if (v11)
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    uint64_t v14 = v11;
    while (1)
    {
      static os_log_type_t.info.getter();
      uint64_t v15 = OUTLINED_FUNCTION_1_58();
      *(_OWORD *)(v15 + 16) = xmmword_2272CB4A0;
      *(void *)(v15 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v15 + 64) = MEMORY[0x263F8D750];
      *(void *)(v15 + 32) = 1;
      if (v12 < 0) {
        break;
      }
      *(void *)(v15 + 96) = MEMORY[0x263F8E970];
      *(void *)(v15 + 104) = MEMORY[0x263F8E9C0];
      *(void *)(v15 + 72) = v12 + 2;
      *(void *)(v15 + 136) = MEMORY[0x263F8D310];
      *(void *)(v15 + 144) = v5;
      *(void *)(v15 + 112) = v13;
      *(void *)(v15 + 120) = v14;
      OUTLINED_FUNCTION_9_45();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = specialized EnumeratedSequence.Iterator.next()();
      uint64_t v13 = v16;
      uint64_t v14 = v17;
      if (!v17) {
        goto LABEL_5;
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_5:
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_bridgeObjectRelease();
  }
}

uint64_t TrainingTablePrinter.print(_:)(uint64_t a1)
{
  uint64_t v39 = a1;
  uint64_t v34 = type metadata accessor for MetricsKey();
  uint64_t v33 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey)?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (uint64_t *)((char *)&v32 - v7);
  uint64_t v35 = type metadata accessor for TrainingTablePrinter(0);
  uint64_t v37 = *(int *)(v35 + 20);
  static os_log_type_t.info.getter();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v10 = OUTLINED_FUNCTION_1_58();
  long long v38 = xmmword_2272CB4A0;
  *(_OWORD *)(v10 + 16) = xmmword_2272CB4A0;
  uint64_t v11 = MEMORY[0x263F8D6C8];
  uint64_t v12 = MEMORY[0x263F8D750];
  OUTLINED_FUNCTION_6_46((void *)v10)[9] = 0;
  uint64_t v13 = Event.itemCount.getter();
  *(void *)(v10 + 136) = v11;
  *(void *)(v10 + 144) = v12;
  *(void *)(v10 + 112) = v13;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.info.getter();
  uint64_t v36 = v9;
  uint64_t v14 = OUTLINED_FUNCTION_1_58();
  *(_OWORD *)(v14 + 16) = v38;
  OUTLINED_FUNCTION_6_46((void *)v14)[9] = 1;
  uint64_t v15 = v40;
  Date.timeIntervalSinceNow.getter();
  uint64_t v16 = MEMORY[0x263F8D5B8];
  *(void *)(v14 + 136) = MEMORY[0x263F8D538];
  *(void *)(v14 + 144) = v16;
  *(double *)(v14 + 112) = -v17;
  uint64_t v18 = v34;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  specialized EnumeratedSequence.makeIterator()(*(void *)(v15 + *(int *)(v35 + 24)), &v44);
  swift_bridgeObjectRetain();
  specialized EnumeratedSequence.Iterator.next()(v6);
  outlined init with take of (offset: Int, element: MetricsKey)?((uint64_t)v6, (uint64_t)v8);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey));
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v19) == 1) {
    return outlined consume of [String : [Int]].Iterator._Variant();
  }
  uint64_t v35 = *(void *)(v33 + 32);
  uint64_t v20 = (void (**)(char *, uint64_t))(v33 + 8);
  while (1)
  {
    uint64_t v21 = *v8;
    ((void (*)(char *, char *, uint64_t))v35)(v2, (char *)v8 + *(int *)(v19 + 48), v18);
    uint64_t v22 = Event.metrics.getter();
    if (*(void *)(v22 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(), (v24 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v22 + 56) + 32 * v23, (uint64_t)&v42);
    }
    else
    {
      long long v42 = 0u;
      long long v43 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v43 + 1)) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_14;
    }
    uint64_t v25 = v41;
    static os_log_type_t.info.getter();
    uint64_t v26 = OUTLINED_FUNCTION_1_58();
    *(_OWORD *)(v26 + 16) = v38;
    uint64_t v27 = MEMORY[0x263F8D6C8];
    *(void *)(v26 + 56) = MEMORY[0x263F8D6C8];
    uint64_t v28 = MEMORY[0x263F8D750];
    *(void *)(v26 + 64) = MEMORY[0x263F8D750];
    *(void *)(v26 + 32) = 2;
    if (__OFADD__(v21, 2))
    {
      __break(1u);
      break;
    }
    *(void *)(v26 + 96) = v27;
    *(void *)(v26 + 104) = v28;
    *(void *)(v26 + 72) = v21 + 2;
    *(void *)(v26 + 136) = MEMORY[0x263F8D538];
    *(void *)(v26 + 144) = MEMORY[0x263F8D5B8];
    *(void *)(v26 + 112) = v25;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    (*v20)(v2, v18);
    specialized EnumeratedSequence.Iterator.next()(v6);
    outlined init with take of (offset: Int, element: MetricsKey)?((uint64_t)v6, (uint64_t)v8);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey));
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v19) == 1) {
      return outlined consume of [String : [Int]].Iterator._Variant();
    }
  }
  outlined destroy of (key: String, value: Any?)((uint64_t)&v42, &demangling cache variable for type metadata for Sendable?);
LABEL_14:
  *(void *)&long long v42 = 0;
  *((void *)&v42 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v30._uint64_t object = (void *)0x80000002272DB770;
  v30._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v30);
  _print_unlocked<A, B>(_:_:)();
  v31._uint64_t countAndFlagsBits = 46;
  v31._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of (offset: Int, element: MetricsKey)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TablePrinter(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    uint64_t v12 = a3[7];
    uint64_t v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = (uint64_t)v13;
    uint64_t v14 = (uint64_t *)((char *)v4 + v12);
    uint64_t v15 = (uint64_t *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    id v17 = v13;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for _TablePrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for _TablePrinter(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)((char *)a2 + v10);
  *(void *)((char *)a1 + v10) = v12;
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  id v16 = v12;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _TablePrinter(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  uint64_t v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  id v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for _TablePrinter(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

void *assignWithTake for _TablePrinter(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);

  uint64_t v12 = a3[7];
  id v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _TablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22726CB6C);
}

uint64_t sub_22726CB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_3_71();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) != v3) {
    return OUTLINED_FUNCTION_7_54(*(void *)(v4 + *(int *)(a3 + 24)));
  }
  uint64_t v8 = v6;
  uint64_t v9 = v4 + *(int *)(a3 + 20);

  return __swift_getEnumTagSinglePayload(v9, v3, v8);
}

uint64_t storeEnumTagSinglePayload for _TablePrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22726CBF8);
}

void sub_22726CBF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_3_71();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v5 + *(int *)(a4 + 20);
    __swift_storeEnumTagSinglePayload(v11, v4, v4, v10);
  }
  else
  {
    *(void *)(v5 + *(int *)(a4 + 24)) = (v4 - 1);
  }
}

uint64_t type metadata completion function for _TablePrinter()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_58()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_2_65()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t OUTLINED_FUNCTION_3_71()
{
  return type metadata accessor for Date();
}

__n128 OUTLINED_FUNCTION_4_63(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __n128 result = a9;
  a1[1] = a9;
  a1[3].n128_u64[1] = v9;
  a1[4].n128_u64[0] = v10;
  a1[2].n128_u64[0] = v11;
  a1[6].n128_u64[0] = v9;
  a1[6].n128_u64[1] = v10;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_56()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void *OUTLINED_FUNCTION_6_46(void *result)
{
  result[7] = v1;
  result[8] = v2;
  result[4] = 2;
  result[12] = v1;
  result[13] = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_54@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t BlobMetadata.dataType.getter()
{
  unsigned int v1 = *(_DWORD *)(v0 + 4);
  if (v1 >= 4) {
    return 3;
  }
  else {
    return 0x2010003u >> (8 * v1);
  }
}

uint64_t getEnumTagSinglePayload for BlobMetadata(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BlobMetadata(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BlobMetadata()
{
  return &type metadata for BlobMetadata;
}

ValueMetadata *type metadata accessor for Header()
{
  return &type metadata for Header;
}

uint64_t MLTextClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MLTextClassifier.ModelParameters() + 36));
}

uint64_t type metadata accessor for MLTextClassifier.ModelParameters()
{
  uint64_t result = type metadata singleton initialization cache for MLTextClassifier.ModelParameters;
  if (!type metadata singleton initialization cache for MLTextClassifier.ModelParameters) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MLTextClassifier.ModelParameters.init(validation:algorithm:language:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v13 = v12[5];
  uint64_t v14 = (_OWORD *)(a4 + v12[6]);
  _OWORD *v14 = 0u;
  v14[1] = 0u;
  uint64_t v15 = (void *)(a4 + v12[7]);
  *uint64_t v15 = 0;
  v15[1] = 0;
  OUTLINED_FUNCTION_4_64((uint64_t)v12);
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(a2, a4, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(void *)(a4 + v13) = a3;
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(a1, (uint64_t)v11, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  *uint64_t v15 = 0;
  v15[1] = 0;
  Swift::Int v18[3] = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v18);
  outlined init with take of MLTextClassifier.ModelParameters.ValidationData((uint64_t)v11, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v18, (uint64_t)v14);
  outlined destroy of MLTextClassifier.ModelAlgorithmType(a2, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  return outlined destroy of MLTextClassifier.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
}

uint64_t MLTextClassifier.ModelParameters.validation.getter()
{
  uint64_t v1 = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t result = outlined init with copy of Any?(v0 + *(int *)(v1 + 24), (uint64_t)&v3);
  if (v4)
  {
    outlined init with take of Any(&v3, &v5);
    type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLTextClassifier.ModelParameters.init(validationData:algorithm:language:textColumnValidationData:labelColumnValidationData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v28 = *(void **)a1;
  int v14 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v15 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v16 = (_OWORD *)(a8 + v15[6]);
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  uint64_t v29 = (uint64_t)v16;
  id v17 = (void *)(a8 + v15[7]);
  void *v17 = 0;
  v17[1] = 0;
  uint64_t v18 = (void *)(a8 + v15[8]);
  void *v18 = 0;
  v18[1] = 0;
  uint64_t v19 = a8 + v15[9];
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  if (v14 != 255)
  {
    if (a5)
    {
      if (a7) {
        goto LABEL_4;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_2272CB370;
      *(void *)(v25 + 56) = MEMORY[0x263F8D310];
      OUTLINED_FUNCTION_6_47(v25, 0xD00000000000005CLL);
      swift_bridgeObjectRelease();
      if (a7) {
        goto LABEL_4;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_2272CB370;
    *(void *)(v26 + 56) = MEMORY[0x263F8D310];
    OUTLINED_FUNCTION_6_47(v26, 0xD00000000000005ELL);
    swift_bridgeObjectRelease();
  }
LABEL_4:
  uint64_t v20 = v15[5];
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(a2, a8, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(void *)(a8 + v20) = a3;
  v31[3] = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v31);
  uint64_t v22 = boxed_opaque_existential_0;
  if (v14 == 255)
  {
    uint64_t *boxed_opaque_existential_0 = 0;
    boxed_opaque_existential_0[1] = 0;
    *((_WORD *)boxed_opaque_existential_0 + 8) = 256;
    OUTLINED_FUNCTION_42_12();
    swift_storeEnumTagMultiPayload();
    id v24 = a3;
  }
  else
  {
    id v23 = a3;
    if (MLDataTable.size.getter())
    {
      uint64_t *v22 = (uint64_t)v28;
      *((unsigned char *)v22 + 8) = v14 & 1;
      void v22[2] = 1954047348;
      v22[3] = 0xE400000000000000;
      v22[4] = 0x6C6562616CLL;
      v22[5] = 0xE500000000000000;
    }
    else
    {
      outlined consume of MLDataTable?(v28, v14);
    }
    OUTLINED_FUNCTION_42_12();
    swift_storeEnumTagMultiPayload();
  }
  outlined assign with take of Any?((uint64_t)v31, v29);
  MLTextClassifier.ModelParameters.textColumnValidationData.setter(a4, a5);
  MLTextClassifier.ModelParameters.labelColumnValidationData.setter(a6, a7);

  return outlined destroy of MLTextClassifier.ModelAlgorithmType(a2, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
}

unint64_t MLTextClassifier.ModelParameters.description.getter()
{
  v1._uint64_t countAndFlagsBits = MLTextClassifier.ModelAlgorithmType.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 0x676175676E614C0ALL;
  v2._uint64_t object = (void *)0xEB00000000203A65;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = *(id *)(v0 + *(int *)(type metadata accessor for MLTextClassifier.ModelParameters() + 20));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLLanguage?);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  v7._uint64_t object = v4;
  v5._uint64_t countAndFlagsBits = 10;
  v5._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

uint64_t MLTextClassifier.ModelParameters.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  return _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(v1, a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
}

uint64_t MLTextClassifier.ModelParameters.algorithm.setter(uint64_t a1)
{
  return outlined assign with take of MLTextClassifier.ModelAlgorithmType(a1, v1);
}

uint64_t (*MLTextClassifier.ModelParameters.algorithm.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void *MLTextClassifier.ModelParameters.language.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MLTextClassifier.ModelParameters() + 20));
  id v2 = v1;
  return v1;
}

void MLTextClassifier.ModelParameters.language.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLTextClassifier.ModelParameters() + 20);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*MLTextClassifier.ModelParameters.language.modify())(void)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t key path setter for MLTextClassifier.ModelParameters.validation : MLTextClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(a1, (uint64_t)v4, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  return MLTextClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLTextClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v4 = (void *)(v1 + *(int *)(v3 + 28));
  swift_bridgeObjectRelease();
  *uint64_t v4 = 0;
  v4[1] = 0;
  v7[3] = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v7);
  outlined init with take of MLTextClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  return outlined assign with take of Any?((uint64_t)v7, v1 + *(int *)(v3 + 24));
}

void (*MLTextClassifier.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[8] = v1;
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  size_t v5 = *(void *)(v4 + 64);
  v3[9] = malloc(v5);
  v3[10] = malloc(v5);
  uint64_t v6 = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t result = (void (*)(uint64_t, char))outlined init with copy of Any?(v1 + *(int *)(v6 + 24), (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    OUTLINED_FUNCTION_17_34();
    return MLTextClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLTextClassifier.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 72);
  uint64_t v4 = *(void **)(*(void *)a1 + 80);
  if (a2)
  {
    _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(*(void *)(*(void *)a1 + 80), (uint64_t)v3, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    MLTextClassifier.ModelParameters.validation.setter((uint64_t)v3);
    outlined destroy of MLTextClassifier.ModelAlgorithmType((uint64_t)v4, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  }
  else
  {
    MLTextClassifier.ModelParameters.validation.setter(*(void *)(*(void *)a1 + 80));
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t key path getter for MLTextClassifier.ModelParameters.maxIterations : MLTextClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = MLTextClassifier.ModelParameters.maxIterations.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for MLTextClassifier.ModelParameters.maxIterations : MLTextClassifier.ModelParameters(uint64_t a1)
{
  return MLTextClassifier.ModelParameters.maxIterations.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t MLTextClassifier.ModelParameters.maxIterations.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*MLTextClassifier.ModelParameters.maxIterations.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLTextClassifier.ModelParameters() + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  LOBYTE(v4) = *((unsigned char *)v4 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (_BYTE)v4;
  return MLTextClassifier.ModelParameters.maxIterations.modify;
}

uint64_t MLTextClassifier.ModelParameters.maxIterations.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16) + *(int *)(result + 12);
  char v2 = *(unsigned char *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = v2;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLTextClassifier.ModelParameters.validateRevision()()
{
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_41_1();
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(v0, v1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    if ((*(unsigned char *)(v1
                   + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                            + 48)
                   + 8) & 1) == 0
      && (NLPClassifierModelIsRevisionSupported() & 1) == 0)
    {
      OUTLINED_FUNCTION_21_39();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_8_45();
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_16_41((uint64_t)" is not supported.");
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v7 = swift_allocError();
      void *v8 = v9;
      v8[1] = v10;
      OUTLINED_FUNCTION_8_4(v7, (uint64_t)v8);
    }
    outlined destroy of MLTextClassifier.ModelAlgorithmType(v1, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
  }
  else if ((*(unsigned char *)(v1 + 8) & 1) == 0 && (NLPClassifierModelIsRevisionSupported() & 1) == 0)
  {
    OUTLINED_FUNCTION_21_39();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_45();
    v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_16_41((uint64_t)" is not supported.");
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = v9;
    v5[1] = v10;
    OUTLINED_FUNCTION_8_4(v4, (uint64_t)v5);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLTextClassifier.ModelParameters.validateCustomEmbeddingURL()()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v33 - v6;
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  int v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v33 - v15;
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(v0, (uint64_t)v10, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of MLTextClassifier.ModelParameters.ValidationData((uint64_t)v10, (uint64_t)v16, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0((uint64_t)v16, (uint64_t)v14, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    if (!__swift_getEnumTagSinglePayload((uint64_t)v14, 4, v1))
    {
      uint64_t v19 = OUTLINED_FUNCTION_42_12();
      v20(v19);
      char v21 = URL.isFileURL.getter();
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
      if (v21)
      {
        uint64_t v22 = URL.pathExtension.getter();
        char v24 = specialized Sequence<>.contains(_:)(v22, v23, outlined read-only object #0 of MLTextClassifier.ModelParameters.validateCustomEmbeddingURL());
        swift_bridgeObjectRelease();
        uint64_t v25 = *(void (**)(void))(v2 + 8);
        OUTLINED_FUNCTION_14_34();
        v25();
        if (v24)
        {
          OUTLINED_FUNCTION_14_34();
          v25();
          uint64_t v18 = type metadata accessor for MLTextClassifier.FeatureExtractorType;
          uint64_t v17 = (uint64_t)v16;
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v25 = *(void (**)(void))(v2 + 8);
        OUTLINED_FUNCTION_14_34();
        v25();
      }
      uint64_t v33 = 0;
      unint64_t v34 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v26._uint64_t object = (void *)0x80000002272DB870;
      v26._uint64_t countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v26);
      lazy protocol witness table accessor for type URL and conformance URL();
      v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v28._uint64_t object = (void *)0x80000002272DB890;
      String.append(_:)(v28);
      uint64_t v29 = v33;
      unint64_t v30 = v34;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      uint64_t v31 = swift_allocError();
      *uint64_t v32 = v29;
      v32[1] = v30;
      OUTLINED_FUNCTION_8_4(v31, (uint64_t)v32);
      ((void (*)(char *, uint64_t))v25)(v7, v1);
      outlined destroy of MLTextClassifier.ModelAlgorithmType((uint64_t)v16, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
      return;
    }
    outlined destroy of MLTextClassifier.ModelAlgorithmType((uint64_t)v16, (void (*)(void))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    uint64_t v17 = (uint64_t)v14;
    uint64_t v18 = type metadata accessor for MLTextClassifier.FeatureExtractorType;
  }
  else
  {
    uint64_t v18 = type metadata accessor for MLTextClassifier.ModelAlgorithmType;
    uint64_t v17 = (uint64_t)v10;
  }
LABEL_5:
  outlined destroy of MLTextClassifier.ModelAlgorithmType(v17, (void (*)(void))v18);
}

unint64_t MLTextClassifier.ModelParameters.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MLTextClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x263F8D310];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MLTextClassifier.ModelParameters.validationData.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_41_1();
  uint64_t v5 = type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t result = outlined init with copy of Any?(v1 + *(int *)(v5 + 24), (uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    OUTLINED_FUNCTION_17_34();
    MLTextClassifier.ModelParameters.ValidationData.table.getter(a1);
    return outlined destroy of MLTextClassifier.ModelAlgorithmType(v2, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLTextClassifier.ModelParameters.validationData : MLTextClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = MLTextClassifier.ModelParameters.validationData.getter((uint64_t)&v4);
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for MLTextClassifier.ModelParameters.validationData : MLTextClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1 = *(unsigned char *)(a1 + 8);
  id v3 = *(id *)a1;
  unsigned __int8 v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLTextClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLTextClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  v5[3] = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  __swift_allocate_boxed_opaque_existential_0(v5);
  if (v2 == 255)
  {
    OUTLINED_FUNCTION_2_66();
  }
  else if (OUTLINED_FUNCTION_23_24())
  {
    OUTLINED_FUNCTION_0_35();
  }
  else
  {
    OUTLINED_FUNCTION_5_57();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = type metadata accessor for MLTextClassifier.ModelParameters();
  return outlined assign with take of Any?((uint64_t)v5, v1 + *(int *)(v3 + 24));
}

void (*MLTextClassifier.ModelParameters.validationData.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  MLTextClassifier.ModelParameters.validationData.getter((uint64_t)(v3 + 4));
  return MLTextClassifier.ModelParameters.validationData.modify;
}

void MLTextClassifier.ModelParameters.validationData.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  unsigned __int8 v4 = *(void **)(*a1 + 32);
  int v5 = *(unsigned __int8 *)(*a1 + 40);
  *(void *)(v3 + 24) = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)v3);
  if (a2)
  {
    if (v5 == 255)
    {
      OUTLINED_FUNCTION_2_66();
    }
    else
    {
      outlined copy of MLDataTable?(v4, v5);
      if (MLDataTable.size.getter()) {
        OUTLINED_FUNCTION_0_35();
      }
      else {
        OUTLINED_FUNCTION_5_57();
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = type metadata accessor for MLTextClassifier.ModelParameters();
    outlined assign with take of Any?(v3, v6 + *(int *)(v7 + 24));
    outlined consume of MLDataTable?(*(void **)(v3 + 32), *(unsigned char *)(v3 + 40));
  }
  else
  {
    if (v5 == 255)
    {
      OUTLINED_FUNCTION_2_66();
    }
    else if (OUTLINED_FUNCTION_23_24())
    {
      OUTLINED_FUNCTION_0_35();
    }
    else
    {
      OUTLINED_FUNCTION_5_57();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v8 = *(void *)(v3 + 48);
    uint64_t v9 = type metadata accessor for MLTextClassifier.ModelParameters();
    outlined assign with take of Any?(v3, v8 + *(int *)(v9 + 24));
  }

  free((void *)v3);
}

uint64_t MLTextClassifier.ModelParameters.textColumnValidationData.getter()
{
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = OUTLINED_FUNCTION_9_46();
  uint64_t result = outlined init with copy of Any?(v1 + *(int *)(v3 + 24), (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    OUTLINED_FUNCTION_17_34();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v5 = *(void **)v0;
      char v6 = *(unsigned char *)(v0 + 8);
      uint64_t v7 = *(void *)(v0 + 16);
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v5, v6);
    }
    else
    {
      outlined destroy of MLTextClassifier.ModelAlgorithmType(v0, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      uint64_t v7 = *(void *)(v1 + *(int *)(v3 + 28));
      swift_bridgeObjectRetain();
    }
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLTextClassifier.ModelParameters.textColumnValidationData.setter(uint64_t a1, unint64_t a2)
{
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_13_13();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_20_38();
  uint64_t result = OUTLINED_FUNCTION_18_28(v10);
  if (v21)
  {
    outlined init with take of Any(&v20, &v22);
    OUTLINED_FUNCTION_13_45();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = *(void *)v5;
      char v13 = *(unsigned char *)(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 32);
      uint64_t v15 = *(void *)(v5 + 40);
      swift_bridgeObjectRelease();
      uint64_t v16 = (void *)(v2 + *(int *)(v4 + 28));
      swift_bridgeObjectRelease();
      uint64_t v17 = 1954047348;
      if (a2) {
        uint64_t v17 = a1;
      }
      *uint64_t v16 = 0;
      v16[1] = 0;
      unint64_t v18 = 0xE400000000000000;
      if (a2) {
        unint64_t v18 = a2;
      }
      *(void *)uint64_t v3 = v12;
      *(unsigned char *)(v3 + 8) = v13;
      *(void *)(v3 + 16) = v17;
      *(void *)(v3 + 24) = v18;
      *(void *)(v3 + 32) = v14;
      *(void *)(v3 + 40) = v15;
      swift_storeEnumTagMultiPayload();
      return MLTextClassifier.ModelParameters.validation.setter(v3);
    }
    else
    {
      outlined destroy of MLTextClassifier.ModelAlgorithmType(v5, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      uint64_t v19 = (uint64_t *)(v2 + *(int *)(v4 + 28));
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*MLTextClassifier.ModelParameters.textColumnValidationData.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MLTextClassifier.ModelParameters.textColumnValidationData.getter();
  a1[1] = v3;
  return MLTextClassifier.ModelParameters.textColumnValidationData.modify;
}

uint64_t MLTextClassifier.ModelParameters.textColumnValidationData.modify(uint64_t *a1, char a2)
{
  return MLTextClassifier.ModelParameters.textColumnValidationData.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MLTextClassifier.ModelParameters.textColumnValidationData.setter);
}

uint64_t MLTextClassifier.ModelParameters.init(validationData:algorithm:language:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v9 = v8[5];
  uint64_t v10 = (_OWORD *)(a4 + v8[6]);
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  uint64_t v11 = (void *)(a4 + v8[7]);
  *uint64_t v11 = 0;
  v11[1] = 0;
  uint64_t v12 = (void *)(a4 + v8[8]);
  *uint64_t v12 = 0;
  v12[1] = 0;
  uint64_t v13 = a4 + v8[9];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(a2, a4, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(void *)(a4 + v9) = a3;
  id v14 = a3;
  static _TextUtilities.getTextLabeledDictionary(from:)(a1);
  OUTLINED_FUNCTION_2_59();
  specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v15, v16, v17, v18, 0xE500000000000000, v19);
  swift_bridgeObjectRelease();
  uint64_t v25 = v27;
  int v26 = v28;
  uint64_t v29 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v27);
  uint64_t v21 = boxed_opaque_existential_0;
  if (v26 == 255)
  {
    uint64_t *boxed_opaque_existential_0 = 0;
    boxed_opaque_existential_0[1] = 0;
    *((_WORD *)boxed_opaque_existential_0 + 8) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *uint64_t v21 = (uint64_t)v25;
    *((unsigned char *)v21 + 8) = v26 != 0;
    v21[2] = 1954047348;
    uint64_t v21[3] = 0xE400000000000000;
    OUTLINED_FUNCTION_15_35();
    void v21[4] = v23;
    v21[5] = v22;
  }
  else
  {
    outlined consume of MLDataTable?(v25, v26);
  }
  swift_storeEnumTagMultiPayload();
  outlined assign with take of Any?((uint64_t)&v27, (uint64_t)v10);
  MLTextClassifier.ModelParameters.textColumnValidationData.setter(1954047348, 0xE400000000000000);
  OUTLINED_FUNCTION_22_28();

  outlined destroy of MLTextClassifier.ModelAlgorithmType(a2, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  return outlined destroy of MLTextClassifier.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLTextClassifier.DataSource);
}

uint64_t MLTextClassifier.ModelParameters.labelColumnValidationData.setter(uint64_t a1, unint64_t a2)
{
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_13_13();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_20_38();
  uint64_t result = OUTLINED_FUNCTION_18_28(v10);
  if (v21)
  {
    outlined init with take of Any(&v20, &v22);
    OUTLINED_FUNCTION_13_45();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = *(void *)v5;
      char v13 = *(unsigned char *)(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v19 = *(void *)(v5 + 24);
      swift_bridgeObjectRelease();
      uint64_t v15 = (void *)(v2 + *(int *)(v4 + 32));
      swift_bridgeObjectRelease();
      uint64_t v16 = 0x6C6562616CLL;
      if (a2) {
        uint64_t v16 = a1;
      }
      *uint64_t v15 = 0;
      v15[1] = 0;
      unint64_t v17 = 0xE500000000000000;
      if (a2) {
        unint64_t v17 = a2;
      }
      *(void *)uint64_t v3 = v12;
      *(unsigned char *)(v3 + 8) = v13;
      *(void *)(v3 + 16) = v14;
      *(void *)(v3 + 24) = v19;
      *(void *)(v3 + 32) = v16;
      *(void *)(v3 + 40) = v17;
      swift_storeEnumTagMultiPayload();
      return MLTextClassifier.ModelParameters.validation.setter(v3);
    }
    else
    {
      outlined destroy of MLTextClassifier.ModelAlgorithmType(v5, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      uint64_t v18 = (uint64_t *)(v2 + *(int *)(v4 + 32));
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t *v18 = a1;
      v18[1] = a2;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined assign with take of MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t MLTextClassifier.ModelParameters.init(validationData:algorithm:language:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  char v6 = (int *)type metadata accessor for MLTextClassifier.ModelParameters();
  uint64_t v7 = v6[5];
  uint64_t v8 = (_OWORD *)(a3 + v6[6]);
  _OWORD *v8 = 0u;
  v8[1] = 0u;
  uint64_t v9 = (void *)(a3 + v6[7]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  OUTLINED_FUNCTION_4_64((uint64_t)v6);
  _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(a1, a3, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(void *)(a3 + v7) = a2;
  id v10 = a2;
  OUTLINED_FUNCTION_2_59();
  specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v11, v12, v13, v14, 0xE500000000000000, v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v23;
  int v17 = v24;
  uint64_t v25 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v23);
  uint64_t v19 = boxed_opaque_existential_0;
  if (v17 == 255)
  {
    uint64_t *boxed_opaque_existential_0 = 0;
    boxed_opaque_existential_0[1] = 0;
    *((_WORD *)boxed_opaque_existential_0 + 8) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *uint64_t v19 = (uint64_t)v16;
    *((unsigned char *)v19 + 8) = v17 != 0;
    v19[2] = 1954047348;
    void v19[3] = 0xE400000000000000;
    OUTLINED_FUNCTION_15_35();
    uint64_t v19[4] = v21;
    v19[5] = v20;
  }
  else
  {
    outlined consume of MLDataTable?(v16, v17);
  }
  swift_storeEnumTagMultiPayload();
  outlined assign with take of Any?((uint64_t)&v23, (uint64_t)v8);
  MLTextClassifier.ModelParameters.textColumnValidationData.setter(1954047348, 0xE400000000000000);
  OUTLINED_FUNCTION_22_28();

  return outlined destroy of MLTextClassifier.ModelAlgorithmType(a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
}

uint64_t MLTextClassifier.ModelParameters.labelColumnValidationData.getter()
{
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = OUTLINED_FUNCTION_9_46();
  uint64_t result = outlined init with copy of Any?(v1 + *(int *)(v3 + 24), (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    OUTLINED_FUNCTION_17_34();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = *(void **)v0;
      char v6 = *(unsigned char *)(v0 + 8);
      uint64_t v7 = *(void *)(v0 + 32);
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v5, v6);
    }
    else
    {
      outlined destroy of MLTextClassifier.ModelAlgorithmType(v0, (void (*)(void))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      uint64_t v7 = *(void *)(v1 + *(int *)(v3 + 32));
      swift_bridgeObjectRetain();
    }
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for MLTextClassifier.ModelParameters.textColumnValidationData : MLTextClassifier.ModelParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t (*MLTextClassifier.ModelParameters.labelColumnValidationData.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MLTextClassifier.ModelParameters.labelColumnValidationData.getter();
  a1[1] = v3;
  return MLTextClassifier.ModelParameters.labelColumnValidationData.modify;
}

uint64_t MLTextClassifier.ModelParameters.labelColumnValidationData.modify(uint64_t *a1, char a2)
{
  return MLTextClassifier.ModelParameters.textColumnValidationData.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MLTextClassifier.ModelParameters.labelColumnValidationData.setter);
}

uint64_t MLTextClassifier.ModelParameters.textColumnValidationData.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v4);
  }
  swift_bridgeObjectRetain();
  a3(v5, v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_22726EEE8()
{
  return MLTextClassifier.ModelParameters.validation.getter();
}

uint64_t sub_22726EF20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLTextClassifier.ModelParameters.textColumnValidationData.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_22726EF4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLTextClassifier.ModelParameters.textColumnValidationData : MLTextClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MLTextClassifier.ModelParameters.textColumnValidationData.setter);
}

uint64_t sub_22726EF78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLTextClassifier.ModelParameters.labelColumnValidationData.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_22726EFA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MLTextClassifier.ModelParameters.textColumnValidationData : MLTextClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MLTextClassifier.ModelParameters.labelColumnValidationData.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTextClassifier.ModelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v8 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v8))
      {
        uint64_t v9 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v8);
      }
      uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      *(void *)uint64_t v12 = *(void *)v13;
      v12[8] = v13[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v14 = a3[5];
    uint64_t v15 = a3[6];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v16;
    int v17 = (char *)a1 + v15;
    uint64_t v18 = (_OWORD *)((char *)a2 + v15);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 24);
    id v20 = v16;
    if (v19)
    {
      *((void *)v17 + 3) = v19;
      (**(void (***)(char *, _OWORD *, uint64_t))(v19 - 8))(v17, v18, v19);
    }
    else
    {
      long long v21 = v18[1];
      *(_OWORD *)int v17 = *v18;
      *((_OWORD *)v17 + 1) = v21;
    }
    uint64_t v22 = a3[7];
    uint64_t v23 = a3[8];
    unsigned __int8 v24 = (uint64_t *)((char *)a1 + v22);
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    Swift::String v27 = (uint64_t *)((char *)a1 + v23);
    unsigned __int8 v28 = (uint64_t *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = a3[9];
    uint64_t v31 = (char *)a1 + v30;
    uint64_t v32 = (char *)a2 + v30;
    v31[8] = v32[8];
    *(void *)uint64_t v31 = *(void *)v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v4 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(a1, 4, v4)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    }
  }

  uint64_t v5 = a1 + *(int *)(a2 + 24);
  if (*(void *)(v5 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(v5);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
    {
      uint64_t v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
    }
    uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = *(void **)&a2[v12];
  *(void *)&a1[v12] = v14;
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  uint64_t v17 = *(void *)&a2[v13 + 24];
  id v18 = v14;
  if (v17)
  {
    *((void *)v15 + 3) = v17;
    (**(void (***)(char *, char *, uint64_t))(v17 - 8))(v15, v16, v17);
  }
  else
  {
    long long v19 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v19;
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = v24;
  uint64_t v25 = &a1[v21];
  uint64_t v26 = &a2[v21];
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v27;
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  v29[8] = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLTextClassifier.ModelAlgorithmType((uint64_t)a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    uint64_t v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
      {
        uint64_t v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
      }
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      char v12 = v11[8];
      *(void *)uint64_t v10 = *(void *)v11;
      v10[8] = v12;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v13 = a3[5];
  uint64_t v14 = *(void **)&a1[v13];
  uint64_t v15 = *(void **)&a2[v13];
  *(void *)&a1[v13] = v15;
  id v16 = v15;

  uint64_t v17 = a3[6];
  uint64_t v18 = (uint64_t)&a1[v17];
  long long v19 = &a2[v17];
  uint64_t v20 = *(void *)&a2[v17 + 24];
  if (!*(void *)&a1[v17 + 24])
  {
    if (v20)
    {
      *(void *)(v18 + 24) = v20;
      (**(void (***)(uint64_t, char *))(v20 - 8))(v18, v19);
      goto LABEL_15;
    }
LABEL_14:
    long long v21 = *((_OWORD *)v19 + 1);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v21;
    goto LABEL_15;
  }
  if (!v20)
  {
    __swift_destroy_boxed_opaque_existential_0(v18);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v18, (uint64_t *)v19);
LABEL_15:
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = *((void *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  return a1;
}

char *initializeWithTake for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
    {
      uint64_t v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
    }
    uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v12 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  long long v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  uint64_t v16 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  long long v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  return a1;
}

char *assignWithTake for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of MLTextClassifier.ModelAlgorithmType((uint64_t)a1, (void (*)(void))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    uint64_t v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
      {
        uint64_t v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
      }
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      *(void *)uint64_t v10 = *(void *)v11;
      v10[8] = v11[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v12 = a3[5];
  uint64_t v13 = *(void **)&a1[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];

  uint64_t v14 = a3[6];
  long long v15 = &a1[v14];
  if (*(void *)&a1[v14 + 24]) {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&a1[v14]);
  }
  long long v16 = *(_OWORD *)&a2[v14 + 16];
  *(_OWORD *)long long v15 = *(_OWORD *)&a2[v14];
  *((_OWORD *)v15 + 1) = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  long long v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22726FB18);
}

uint64_t sub_22726FB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22726FBC4);
}

void sub_22726FBC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_6_1();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
}

uint64_t type metadata completion function for MLTextClassifier.ModelParameters()
{
  uint64_t result = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of MLTextClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t _s8CreateML16MLTextClassifierV18ModelAlgorithmTypeOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLTextClassifier.ModelAlgorithmType(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_35()
{
  *(void *)uint64_t v0 = v1;
  *(unsigned char *)(v0 + 8) = v2;
  *(void *)(v0 + 16) = 1954047348;
  *(void *)(v0 + 24) = 0xE400000000000000;
  *(void *)(v0 + 32) = 0x6C6562616CLL;
  *(void *)(v0 + 40) = 0xE500000000000000;
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_66()
{
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(_WORD *)(v0 + 16) = 256;
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_64(uint64_t result)
{
  char v2 = (void *)(v1 + *(int *)(result + 32));
  *char v2 = 0;
  v2[1] = 0;
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_57()
{
  outlined consume of MLDataTable?(v1, v2);
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_47@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000;
  return print(_:separator:terminator:)();
}

void OUTLINED_FUNCTION_8_45()
{
  *(void *)(v0 - 48) = 0x6E6F697369766552;
  *(void *)(v0 - 40) = 0xE900000000000020;
}

uint64_t OUTLINED_FUNCTION_9_46()
{
  return type metadata accessor for MLTextClassifier.ModelParameters();
}

uint64_t OUTLINED_FUNCTION_13_45()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_16_41(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000012;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_17_34()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_18_28(uint64_t a1)
{
  uint64_t v4 = v1 + *(int *)(a1 + 24);
  return outlined init with copy of Any?(v4, v2 - 144);
}

uint64_t OUTLINED_FUNCTION_20_38()
{
  return type metadata accessor for MLTextClassifier.ModelParameters();
}

void OUTLINED_FUNCTION_21_39()
{
  *(void *)(v0 - 48) = 0;
  *(void *)(v0 - 40) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
}

uint64_t OUTLINED_FUNCTION_22_28()
{
  return MLTextClassifier.ModelParameters.labelColumnValidationData.setter(0x6C6562616CLL, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_23_24()
{
  return MLDataTable.size.getter();
}

uint64_t MLHandActionClassifier.GraphCNN.compile()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Model();
  v1[3] = v2;
  OUTLINED_FUNCTION_1(v2);
  void v1[4] = v3;
  v1[5] = swift_task_alloc();
  return MEMORY[0x270FA2498](MLHandActionClassifier.GraphCNN.compile(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _OWORD v5[4];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  MLHandActionClassifier.GraphCNN.export(metadata:)(v5, v1);
  type metadata accessor for MLModel();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = MLHandActionClassifier.GraphCNN.compile();
  uint64_t v3 = *(void *)(v0 + 40);
  return static MLModel.compile(_:)(v3);
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_9();
  v1();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 64);
  return v2(v3);
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_9();
  v1();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t MLHandActionClassifier.GraphCNN.compile()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = MLHandActionClassifier.GraphCNN.compile();
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = MLHandActionClassifier.GraphCNN.compile();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

void MLHandActionClassifier.GraphCNN.trainableSublayers()()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for BatchNorm();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_57_1();
  type metadata accessor for Dense();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_2_37();
  type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_14_0();
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(v4);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_15();
  uint64_t v6 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v6, v0);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.sublayers(recursively:)();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v0);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v21)
  {
    OUTLINED_FUNCTION_96_2();
    OUTLINED_FUNCTION_96_2();
    uint64_t v7 = MEMORY[0x263F8EE78];
    do
    {
      outlined init with take of BinaryFloatingPoint(&v20, (uint64_t)v19);
      outlined init with copy of TrainingSessionDelegate((uint64_t)v19, (uint64_t)v18);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      if (swift_dynamicCast())
      {
        OUTLINED_FUNCTION_134_0();
        OUTLINED_FUNCTION_27_28();
        v8();
      }
      else if (swift_dynamicCast())
      {
        OUTLINED_FUNCTION_134_0();
        OUTLINED_FUNCTION_25_0();
        v9();
      }
      else if (swift_dynamicCast())
      {
        OUTLINED_FUNCTION_134_0();
        OUTLINED_FUNCTION_110_2();
        OUTLINED_FUNCTION_25_0();
        v10();
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v19, v19[3]);
        uint64_t v11 = *(void *)(Layer.parameters(recursively:)() + 16);
        swift_bridgeObjectRelease();
        if (v11)
        {
          OUTLINED_FUNCTION_134_0();
        }
        else
        {
          uint64_t v17 = 0;
          long long v16 = 0u;
          long long v15 = 0u;
        }
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
      if (*((void *)&v16 + 1))
      {
        outlined init with take of BinaryFloatingPoint(&v15, (uint64_t)v18);
        outlined init with take of BinaryFloatingPoint(v18, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v7 = v13;
        }
        unint64_t v12 = *(void *)(v7 + 16);
        if (v12 >= *(void *)(v7 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v7 = v14;
        }
        *(void *)(v7 + 16) = v12 + 1;
        outlined init with take of BinaryFloatingPoint(&v15, v7 + 40 * v12 + 32);
      }
      else
      {
        outlined destroy of URL?((uint64_t)&v15, &demangling cache variable for type metadata for Layer?);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (v21);
  }
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_12_4();
}

uint64_t MLHandActionClassifier.GraphCNN.export(metadata:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v97 = a2;
  type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_0();
  uint64_t v95 = v5;
  uint64_t v96 = v4;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_33_0();
  uint64_t v94 = v6;
  OUTLINED_FUNCTION_65();
  type metadata accessor for NeuralNetworkClassifier.ClassLabels();
  OUTLINED_FUNCTION_0();
  uint64_t v91 = v8;
  uint64_t v92 = v7;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_33_0();
  char v90 = v9;
  OUTLINED_FUNCTION_65();
  type metadata accessor for NeuralNetwork.ArrayShapeMapping();
  OUTLINED_FUNCTION_0();
  uint64_t v85 = v11;
  uint64_t v86 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v84 = (char *)v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_65();
  type metadata accessor for NeuralNetworkClassifier();
  OUTLINED_FUNCTION_0();
  uint64_t v88 = v14;
  uint64_t v89 = v13;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_33_0();
  uint64_t v87 = v15;
  OUTLINED_FUNCTION_65();
  uint64_t v76 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_14_0();
  uint64_t v81 = type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_0();
  uint64_t v80 = v17;
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v21);
  uint64_t v22 = type metadata accessor for LearningPhase();
  OUTLINED_FUNCTION_0();
  uint64_t v24 = v23;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_3_0();
  uint64_t v28 = v27 - v26;
  v73[4] = *a1;
  uint64_t v82 = a1[1];
  v73[1] = a1[2];
  v73[0] = a1[3];
  v73[5] = a1[4];
  v73[6] = a1[5];
  v73[3] = a1[6];
  v73[2] = a1[7];
  uint64_t v74 = a1[8];
  uint64_t v29 = v2 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  uint64_t v30 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  *(unsigned char *)(v29 + *(int *)(v30 + 36)) = 1;
  OUTLINED_FUNCTION_68_5();
  v31();
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.prepare(for:)();
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v22);
  uint64_t v93 = v2;
  uint64_t v83 = MLHandActionClassifier.GraphCNN.updatedCoreMLLayers()();
  Model.init()();
  Model.specificationVersion.setter();
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  uint64_t v32 = type metadata accessor for FeatureDescription();
  OUTLINED_FUNCTION_1(v32);
  uint64_t v79 = *(void *)(v33 + 72);
  uint64_t v35 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v36 = (v35 + 32) & ~v35;
  uint64_t v77 = v35 | 7;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_2272CB370;
  uint64_t v75 = v37 + v36;
  OUTLINED_FUNCTION_68_5();
  v38();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB4A0;
  OUTLINED_FUNCTION_138_0();
  *(void *)(v39 + 32) = v40;
  *(_OWORD *)(v39 + 40) = xmmword_2272CB4B0;
  static FeatureType.shapedArray(dataType:shape:optional:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_4();
  v41();
  unint64_t v98 = 0;
  unint64_t v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(446);
  v42._uint64_t countAndFlagsBits = 8257;
  v42._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  OUTLINED_FUNCTION_138_0();
  if (v43 <= 1) {
    unint64_t v44 = 0x736F7020646E6168;
  }
  else {
    unint64_t v44 = 0xD000000000000016;
  }
  if (v43 <= 1) {
    unint64_t v45 = 0xE900000000000065;
  }
  else {
    unint64_t v45 = 0x80000002272DBDC0;
  }
  unint64_t v46 = v45;
  String.append(_:)(*(Swift::String *)&v44);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_51_14(0xD000000000000052, (uint64_t)" to classify. Its multiarray encoding uses the first dimension to index time over ");
  OUTLINED_FUNCTION_138_0();
  uint64_t v100 = v47;
  v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = 0x656D61726620;
  v49._uint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v49);
  OUTLINED_FUNCTION_138_0();
  if (v50 <= 1) {
    uint64_t v51 = 0;
  }
  else {
    uint64_t v51 = 115;
  }
  if (v50 <= 1) {
    unint64_t v52 = 0xE000000000000000;
  }
  else {
    unint64_t v52 = 0xE100000000000000;
  }
  unint64_t v53 = v52;
  String.append(_:)(*(Swift::String *)&v51);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_51_14(0xD00000000000015ELL, (uint64_t)". The second dimension indexes x, y, and confidence of hand pose keypoint locations. The last dimension indexes the keypoint type, ordered as wrist, thumbCMC, thumbMP, thumbIP, thumbTip, indexMCP, indexPIP, indexDIP, indexTip, middleMCP, middlePIP, middleDIP, middleTip, ringMCP, ringPIP, ringDIP, ringTip, littleMCP, littlePIP, littleDIP, littleTip.");
  FeatureDescription.init(name:type:description:)();
  Model.inputs.setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2272CB4D0;
  static FeatureType.dictionaryWithStringKeys(optional:)();
  OUTLINED_FUNCTION_111_1();
  FeatureDescription.init(name:type:description:)();
  FeatureType.StringParameters.init(optional:)();
  OUTLINED_FUNCTION_7_19();
  v54();
  unint64_t v98 = 0;
  unint64_t v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  unint64_t v98 = 0xD000000000000011;
  unint64_t v99 = 0x80000002272DBDA0;
  uint64_t v81 = v30;
  uint64_t v55 = *(int *)(v30 + 40);
  uint64_t v80 = v29;
  uint64_t v56 = *(void *)(v29 + v55);
  if (v56 <= 1) {
    uint64_t v57 = 1702063984;
  }
  else {
    uint64_t v57 = 0x6E6F69746361;
  }
  if (v56 <= 1) {
    unint64_t v58 = 0xE400000000000000;
  }
  else {
    unint64_t v58 = 0xE600000000000000;
  }
  unint64_t v59 = v58;
  String.append(_:)(*(Swift::String *)&v57);
  swift_bridgeObjectRelease();
  v60._uint64_t countAndFlagsBits = 0x726F676574616320;
  v60._uint64_t object = (void *)0xEA00000000002E79;
  String.append(_:)(v60);
  OUTLINED_FUNCTION_25_15();
  FeatureDescription.init(name:type:description:)();
  uint64_t v61 = v82;
  Model.outputs.setter();
  OUTLINED_FUNCTION_25_15();
  Model.predictedFeatureName.setter();
  OUTLINED_FUNCTION_111_1();
  Model.predictedProbabilitiesName.setter();
  if (v61)
  {
    swift_bridgeObjectRetain();
    Model.modelDescription.setter();
    swift_bridgeObjectRetain();
    Model.versionString.setter();
    swift_bridgeObjectRetain();
    Model.author.setter();
    swift_bridgeObjectRetain();
    Model.license.setter();
    if (!v74) {
      Dictionary.init(dictionaryLiteral:)();
    }
    swift_bridgeObjectRetain();
    Model.metadata.setter();
  }
  uint64_t v62 = v81;
  uint64_t v63 = v80;
  unint64_t v98 = *(void *)(v80 + *(int *)(v81 + 40));
  dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v64 = (void (*)(unint64_t *, void))Model.metadata.modify();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  v64(&v98, 0);
  uint64_t v65 = v87;
  NeuralNetworkClassifier.init(layers:preprocessors:)();
  OUTLINED_FUNCTION_7_19();
  v66();
  NeuralNetworkClassifier.arrayInputShapeMapping.setter();
  OUTLINED_FUNCTION_111_1();
  NeuralNetworkClassifier.labelProbabilityLayerName.setter();
  *char v90 = *(void *)(v93 + 16);
  OUTLINED_FUNCTION_7_19();
  v67();
  swift_bridgeObjectRetain();
  NeuralNetworkClassifier.classLabels.setter();
  uint64_t v69 = v88;
  uint64_t v68 = v89;
  OUTLINED_FUNCTION_18_3();
  v70();
  OUTLINED_FUNCTION_7_19();
  v71();
  Model.kind.setter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v65, v68);
  *(unsigned char *)(v63 + *(int *)(v62 + 36)) = 0;
  return result;
}

void specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v38 = type metadata accessor for LayerState();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OUTLINED_FUNCTION_65();
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(v6);
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_57_1();
  uint64_t v8 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  uint64_t v36 = v8;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v8, v1);
  _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  unint64_t v9 = Layer.layerStateKeyPaths(recursively:)();
  uint64_t v35 = v1;
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v1);
  if (v9 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_12_4();
    return;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    goto LABEL_22;
  }
LABEL_3:
  uint64_t v33 = v3 + 8;
  unint64_t v34 = v9 & 0xC000000000000001;
  uint64_t v11 = (void *)MEMORY[0x263F8EE80];
  uint64_t v12 = 4;
  unint64_t v32 = v9;
  while (1)
  {
    if (v34)
    {
      uint64_t v13 = MEMORY[0x22A6753B0](v12 - 4, v9);
    }
    else
    {
      uint64_t v13 = *(void *)(v9 + 8 * v12);
      swift_retain();
    }
    uint64_t v14 = v12 - 3;
    if (__OFADD__(v12 - 4, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v15 = v35;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v36, v35);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v15);
    uint64_t v3 = LayerState.id.getter();
    OUTLINED_FUNCTION_25_0();
    v16();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = v11;
    unint64_t v9 = (unint64_t)v11;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    uint64_t v20 = v11[2];
    BOOL v21 = (v19 & 1) == 0;
    Swift::Int v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_19;
    }
    unint64_t v23 = v18;
    char v24 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, WritableKeyPath<MLHandActionClassifier.GraphCNNModel, LayerState>>);
    unint64_t v9 = (unint64_t)&v39;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22)) {
      break;
    }
LABEL_12:
    uint64_t v11 = v39;
    if (v24)
    {
      uint64_t v27 = v39[7];
      swift_release();
      *(void *)(v27 + 8 * v23) = v13;
    }
    else
    {
      v39[(v23 >> 6) + 8] |= 1 << v23;
      *(_DWORD *)(v11[6] + 4 * v23) = v3;
      *(void *)(v11[7] + 8 * v23) = v13;
      uint64_t v28 = v11[2];
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_20;
      }
      void v11[2] = v30;
    }
    swift_bridgeObjectRelease();
    ++v12;
    unint64_t v9 = v32;
    if (v14 == v10) {
      goto LABEL_22;
    }
  }
  unint64_t v9 = (unint64_t)v39;
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v24 & 1) == (v26 & 1))
  {
    unint64_t v23 = v25;
    goto LABEL_12;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLHandActionClassifier.GraphCNN.loadPretrainedCoreMLModel()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  uint64_t v2 = OUTLINED_FUNCTION_17(v1);
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dense?);
  uint64_t v5 = OUTLINED_FUNCTION_17(v4);
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v6);
  uint64_t v7 = type metadata accessor for Dense();
  OUTLINED_FUNCTION_0();
  uint64_t v457 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v10);
  uint64_t v474 = type metadata accessor for NeuralNetwork.Layer.InnerProductParameters();
  OUTLINED_FUNCTION_0();
  uint64_t v439 = v11;
  MEMORY[0x270FA5388](v12);
  v478 = (char *)&v390 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_65();
  uint64_t v444 = type metadata accessor for LayerState();
  OUTLINED_FUNCTION_0();
  v458 = v14;
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BatchNorm?);
  uint64_t v19 = OUTLINED_FUNCTION_17(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v20);
  uint64_t v448 = type metadata accessor for BatchNorm();
  OUTLINED_FUNCTION_0();
  unint64_t v436 = v21;
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v23);
  uint64_t v451 = type metadata accessor for NeuralNetwork.Layer.BatchNormalizeParameters();
  OUTLINED_FUNCTION_0();
  uint64_t v435 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v26);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v28 = OUTLINED_FUNCTION_17(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v31);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v33 = OUTLINED_FUNCTION_17(v32);
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v34);
  uint64_t v454 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v434 = v35;
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v38);
  uint64_t v467 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_0();
  uint64_t v433 = v39;
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v45);
  uint64_t v473 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v432 = v46;
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_17_3(v51);
  uint64_t v470 = type metadata accessor for Parameter();
  OUTLINED_FUNCTION_0();
  v431 = v52;
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_45_2(v57);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conv2D?);
  uint64_t v59 = OUTLINED_FUNCTION_17(v58);
  MEMORY[0x270FA5388](v59);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v60);
  uint64_t v463 = type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_0();
  uint64_t v430 = v61;
  MEMORY[0x270FA5388](v62);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v63);
  uint64_t v464 = type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters();
  OUTLINED_FUNCTION_0();
  v429 = v64;
  MEMORY[0x270FA5388](v65);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v66);
  uint64_t v475 = type metadata accessor for NeuralNetwork.Layer.Kind();
  OUTLINED_FUNCTION_0();
  uint64_t v460 = v67;
  MEMORY[0x270FA5388](v68);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v69);
  uint64_t v477 = type metadata accessor for NeuralNetwork.Layer();
  OUTLINED_FUNCTION_0();
  uint64_t v479 = v70;
  MEMORY[0x270FA5388](v71);
  uint64_t v73 = (char *)&v390 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v75 = OUTLINED_FUNCTION_17(v74);
  MEMORY[0x270FA5388](v75);
  OUTLINED_FUNCTION_2_37();
  uint64_t v76 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0();
  uint64_t v78 = v77;
  MEMORY[0x270FA5388](v79);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v80);
  OUTLINED_FUNCTION_45_3();
  uint64_t v82 = v81;
  OUTLINED_FUNCTION_20_3();
  uint64_t v84 = MEMORY[0x270FA5388](v83);
  uint64_t v86 = (char *)&v390 - v85;
  MEMORY[0x270FA5388](v84);
  OUTLINED_FUNCTION_106();
  uint64_t v481 = v87;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v89 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v90 = outlined bridged method (mbbnn) of @objc NSBundle.url(forResource:withExtension:)(0xD00000000000001ELL, 0x80000002272DB8B0, 0x73746867696577, 0xE700000000000000, v89);

  if (!v90)
  {
    OUTLINED_FUNCTION_79_1();
    __swift_storeEnumTagSinglePayload(v363, v364, v365, v76);
    goto LABEL_100;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v480 = v78;
  uint64_t v91 = *(void (**)(uint64_t, char *, uint64_t))(v78 + 32);
  v91(v0, v86, v76);
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v76);
  if (__swift_getEnumTagSinglePayload(v0, 1, v76) == 1)
  {
LABEL_100:
    outlined destroy of URL?(v0, &demangling cache variable for type metadata for URL?);
    goto LABEL_119;
  }
  uint64_t v465 = v7;
  v476 = v73;
  uint64_t v92 = v481;
  v91(v481, (char *)v0, v76);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v93 = type metadata accessor for Logger();
  uint64_t v94 = __swift_project_value_buffer(v93, (uint64_t)static MLHandActionClassifier.logger);
  uint64_t v95 = v480;
  uint64_t v96 = *(void (**)(void))(v480 + 16);
  OUTLINED_FUNCTION_128_0();
  v96();
  uint64_t v456 = v94;
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v97, v98))
  {
    unint64_t v99 = (uint8_t *)swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    v482[0] = v100;
    v459 = v96;
    *(_DWORD *)unint64_t v99 = 136315138;
    v447 = v99 + 4;
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v485 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, v482);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Swift::String v103 = *(void (**)(void))(v480 + 8);
    uint64_t v96 = v459;
    OUTLINED_FUNCTION_9();
    v103();
    _os_log_impl(&dword_22704D000, v97, v98, "Loading pre-trained model at %s", v99, 0xCu);
    swift_arrayDestroy();
    uint64_t v104 = v100;
    uint64_t v92 = v481;
    MEMORY[0x22A676210](v104, -1, -1);
    id v105 = v99;
    uint64_t v95 = v480;
    MEMORY[0x22A676210](v105, -1, -1);
  }
  else
  {
    Swift::String v103 = *(void (**)(void))(v95 + 8);
    ((void (*)(uint64_t, uint64_t))v103)(v82, v76);
  }

  uint64_t v106 = v472;
  uint64_t v107 = v471;
  OUTLINED_FUNCTION_128_0();
  v96();
  uint64_t v108 = Data.init(contentsOf:options:)();
  if (v106)
  {
    ((void (*)(uint64_t, uint64_t))v103)(v107, v76);
    ((void (*)(uint64_t, uint64_t))v103)(v92, v76);
    return;
  }
  BlobsFile.init(data:)(v108, v109, (uint64_t)v484);
  uint64_t v472 = 0;
  uint64_t v400 = v76;
  v399 = v103;
  uint64_t v398 = v95 + 8;
  OUTLINED_FUNCTION_9();
  v103();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : Int])>);
  uint64_t v110 = swift_allocObject();
  *(_OWORD *)(v110 + 16) = xmmword_2272D35E0;
  *(void *)(v110 + 32) = 3485304;
  *(void *)(v110 + 40) = 0xE300000000000000;
  *(void *)(v110 + 48) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 56) = 3616376;
  *(void *)(v110 + 64) = 0xE300000000000000;
  *(void *)(v110 + 72) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 80) = 120;
  *(void *)(v110 + 88) = 0xE100000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 96) = v112;
  *(void *)(v110 + 104) = v111 & 0xFFFFFFFFFFFFLL | 0x33000000000000;
  *(void *)(v110 + 112) = 0xE700000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 120) = v114;
  *(void *)(v110 + 128) = v113 & 0xFFFFFFFFFFFFLL | 0x35000000000000;
  *(void *)(v110 + 136) = 0xE700000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 144) = v116;
  *(void *)(v110 + 152) = v115 & 0xFFFFFFFFFFFFLL | 0x37000000000000;
  *(void *)(v110 + 160) = 0xE700000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 168) = v118;
  *(void *)(v110 + 176) = v117 & 0xFFFFFFFFFFFFLL | 0x38000000000000;
  *(void *)(v110 + 184) = 0xE700000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 192) = v120;
  *(void *)(v110 + 200) = v119 & 0xFFFFFFFFFFFFLL | 0x39000000000000;
  *(void *)(v110 + 208) = 0xE700000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 216) = v122;
  *(void *)(v110 + 224) = v121 & 0xFFFFFFFFFFFFLL | 0x3231000000000000;
  *(void *)(v110 + 232) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 240) = v124;
  *(void *)(v110 + 248) = v123 & 0xFFFFFFFFFFFFLL | 0x3431000000000000;
  *(void *)(v110 + 256) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 264) = v126;
  *(void *)(v110 + 272) = v125 & 0xFFFFFFFFFFFFLL | 0x3531000000000000;
  *(void *)(v110 + 280) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 288) = v128;
  *(void *)(v110 + 296) = v127 & 0xFFFFFFFFFFFFLL | 0x3631000000000000;
  *(void *)(v110 + 304) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 312) = v130;
  *(void *)(v110 + 320) = v129 & 0xFFFFFFFFFFFFLL | 0x3931000000000000;
  *(void *)(v110 + 328) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 336) = v132;
  *(void *)(v110 + 344) = v131 & 0xFFFFFFFFFFFFLL | 0x3132000000000000;
  *(void *)(v110 + 352) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 360) = v134;
  *(void *)(v110 + 368) = v133 & 0xFFFFFFFFFFFFLL | 0x3232000000000000;
  *(void *)(v110 + 376) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 384) = v136;
  *(void *)(v110 + 392) = v135 & 0xFFFFFFFFFFFFLL | 0x3332000000000000;
  *(void *)(v110 + 400) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 408) = v138;
  *(void *)(v110 + 416) = v137 & 0xFFFFFFFFFFFFLL | 0x3632000000000000;
  *(void *)(v110 + 424) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 432) = v140;
  *(void *)(v110 + 440) = v139 & 0xFFFFFFFFFFFFLL | 0x3832000000000000;
  *(void *)(v110 + 448) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 456) = v142;
  *(void *)(v110 + 464) = v141 & 0xFFFFFFFFFFFFLL | 0x3932000000000000;
  *(void *)(v110 + 472) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 480) = v144;
  *(void *)(v110 + 488) = v143 & 0xFFFFFFFFFFFFLL | 0x3033000000000000;
  *(void *)(v110 + 496) = 0xE800000000000000;
  OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 504) = v146;
  *(void *)(v110 + 512) = v145 & 0xFFFFFFFFFFFFLL | 0x3333000000000000;
  *(void *)(v110 + 520) = 0xE800000000000000;
  *(void *)(v110 + 528) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 536) = v147 & 0xFFFFFFFFFFFFLL | 0x3533000000000000;
  *(void *)(v110 + 544) = 0xE800000000000000;
  *(void *)(v110 + 552) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 560) = v148 & 0xFFFFFFFFFFFFLL | 0x3633000000000000;
  *(void *)(v110 + 568) = 0xE800000000000000;
  *(void *)(v110 + 576) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 584) = v149 & 0xFFFFFFFFFFFFLL | 0x3933000000000000;
  *(void *)(v110 + 592) = 0xE800000000000000;
  *(void *)(v110 + 600) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 608) = v150 & 0xFFFFFFFFFFFFLL | 0x3134000000000000;
  *(void *)(v110 + 616) = 0xE800000000000000;
  *(void *)(v110 + 624) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 632) = v151 & 0xFFFFFFFFFFFFLL | 0x3234000000000000;
  *(void *)(v110 + 640) = 0xE800000000000000;
  *(void *)(v110 + 648) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 656) = v152 & 0xFFFFFFFFFFFFLL | 0x3334000000000000;
  *(void *)(v110 + 664) = 0xE800000000000000;
  *(void *)(v110 + 672) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 680) = v153 & 0xFFFFFFFFFFFFLL | 0x3634000000000000;
  *(void *)(v110 + 688) = 0xE800000000000000;
  *(void *)(v110 + 696) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 704) = v154 & 0xFFFFFFFFFFFFLL | 0x3834000000000000;
  *(void *)(v110 + 712) = 0xE800000000000000;
  *(void *)(v110 + 720) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 728) = v155 & 0xFFFFFFFFFFFFLL | 0x3934000000000000;
  *(void *)(v110 + 736) = 0xE800000000000000;
  *(void *)(v110 + 744) = OUTLINED_FUNCTION_18_29();
  OUTLINED_FUNCTION_22_29();
  *(void *)(v110 + 752) = v156 & 0xFFFFFFFFFFFFLL | 0x3035000000000000;
  *(void *)(v110 + 760) = 0xE800000000000000;
  *(void *)(v110 + 768) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 776) = 0x6C61756469736572;
  *(void *)(v110 + 784) = 0xEA0000000000312ELL;
  *(void *)(v110 + 792) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 800) = 0x6C61756469736572;
  *(void *)(v110 + 808) = 0xEA0000000000322ELL;
  *(void *)(v110 + 816) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 824) = 0x6C61756469736572;
  *(void *)(v110 + 832) = 0xEA0000000000332ELL;
  *(void *)(v110 + 840) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 848) = 0x6C61756469736572;
  *(void *)(v110 + 856) = 0xEA0000000000342ELL;
  *(void *)(v110 + 864) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 872) = 0x6C61756469736572;
  *(void *)(v110 + 880) = 0xEA0000000000352ELL;
  *(void *)(v110 + 888) = OUTLINED_FUNCTION_18_29();
  *(void *)(v110 + 896) = 0x6C61756469736572;
  *(void *)(v110 + 904) = 0xE800000000000000;
  *(void *)(v110 + 912) = OUTLINED_FUNCTION_18_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  uint64_t v440 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v157 = v461;
  MLHandActionClassifier.GraphCNN.defineCoreMLLayers(numberOfKeypointsChannels:numberOfKeypoints:)();
  uint64_t v159 = v158;
  MLHandActionClassifier.GraphCNN.coreMLTrainableLayerNames(from:)();
  uint64_t v427 = v160;
  uint64_t v161 = MLHandActionClassifier.GraphCNN.getCoreMLAndNeuralNetworksTrainableLayerMap(_:)(v160);
  MLHandActionClassifier.GraphCNN.trainableSublayers()();
  uint64_t v163 = v162;
  uint64_t v446 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter();
  uint64_t v418 = v164;
  uint64_t v165 = *(void *)(v159 + 16);
  uint64_t v441 = v163;
  uint64_t v397 = v159;
  if (!v165)
  {
LABEL_80:
    outlined release of BlobsFile((uint64_t)v484);
    OUTLINED_FUNCTION_84_1();
    OUTLINED_FUNCTION_141_0();
    OUTLINED_FUNCTION_81_4();
    OUTLINED_FUNCTION_82_3();
    OUTLINED_FUNCTION_90_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_83_3();
LABEL_81:
    OUTLINED_FUNCTION_25_0();
    v347();
    return;
  }
  v428 = (char *)v157 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  uint64_t v471 = *(void *)(v479 + 16);
  uint64_t v166 = v159 + ((*(unsigned __int8 *)(v479 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v479 + 80));
  v461 = (uint64_t (**)(void (*)(void), uint64_t))(v460 + 88);
  v459 = (void (*)(void))(v479 + 8);
  uint64_t v396 = v460 + 8;
  v447 = (uint8_t *)(v460 + 96);
  uint64_t v395 = v435 + 32;
  uint64_t v426 = v163 + 32;
  uint64_t v394 = v436 + 32;
  LODWORD(v460) = *MEMORY[0x263F53240];
  OUTLINED_FUNCTION_96_2();
  v431 = v167;
  OUTLINED_FUNCTION_96_2();
  v391 = v168;
  int v425 = *v169;
  v409 = (void (**)(uint64_t))(v433 + 16);
  OUTLINED_FUNCTION_96_2();
  v458 = v170;
  int v420 = *v171;
  uint64_t v401 = v172 + 8;
  uint64_t v392 = v173 + 8;
  uint64_t v393 = v174 + 8;
  v419 = v429 + 32;
  uint64_t v414 = v430 + 32;
  OUTLINED_FUNCTION_96_2();
  v413 = v175;
  uint64_t v415 = v176 + 8;
  uint64_t v416 = v177 + 8;
  uint64_t v435 = v439 + 32;
  uint64_t v412 = v457 + 32;
  uint64_t v417 = v457 + 8;
  uint64_t v434 = v439 + 8;
  uint64_t v479 = v178;
  uint64_t v457 = *(void *)(v178 + 56);
  long long v411 = xmmword_2272CB4D0;
  long long v408 = xmmword_2272CB370;
  long long v410 = xmmword_2272CB360;
  uint64_t v179 = v468;
  uint64_t v439 = v161;
  uint64_t v181 = v180;
  while (1)
  {
    OUTLINED_FUNCTION_18_3();
    v182();
    NeuralNetwork.Layer.kind.getter();
    int v183 = (*v461)(v179, v475);
    if (v183 != v460) {
      break;
    }
    uint64_t v480 = v166;
    uint64_t v184 = OUTLINED_FUNCTION_57_12();
    v185(v184);
    OUTLINED_FUNCTION_108_2();
    OUTLINED_FUNCTION_35();
    v186();
    uint64_t v187 = NeuralNetwork.Layer.name.getter();
    if (!*(void *)(v161 + 16)) {
      goto LABEL_98;
    }
    unint64_t v189 = specialized __RawDictionaryStorage.find<A>(_:)(v187, v188);
    if ((v190 & 1) == 0) {
      goto LABEL_98;
    }
    uint64_t v191 = *(void *)(*(void *)(v161 + 56) + 8 * v189);
    swift_bridgeObjectRelease();
    if (v191 == *(void *)(v427 + 16) - 1)
    {
      long long v192 = Logger.logObject.getter();
      os_log_type_t v193 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v192, v193))
      {
        long long v194 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v194 = 0;
        _os_log_impl(&dword_22704D000, v192, v193, "Skipping last innerProduct layer when loading the pretrained-model.", v194, 2u);
        uint64_t v195 = v194;
        uint64_t v161 = v439;
        MEMORY[0x22A676210](v195, -1, -1);
      }

      OUTLINED_FUNCTION_108_2();
      OUTLINED_FUNCTION_25_0();
      v196();
      OUTLINED_FUNCTION_110_2();
      OUTLINED_FUNCTION_25_0();
      v197();
      goto LABEL_76;
    }
    if (v191 < 0) {
      goto LABEL_88;
    }
    OUTLINED_FUNCTION_140_0();
    if (v207) {
      goto LABEL_90;
    }
    OUTLINED_FUNCTION_118_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    uint64_t v294 = v455;
    uint64_t v295 = v465;
    if (!swift_dynamicCast())
    {
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v378, v379, v380, v295);
      outlined destroy of URL?(v294, &demangling cache variable for type metadata for Dense?);
      OUTLINED_FUNCTION_52_14();
      _StringGuts.grow(_:)(81);
      OUTLINED_FUNCTION_43_15();
      OUTLINED_FUNCTION_51_14(v381 + 39, (uint64_t)"Cannot cast neural networks framework layer to innerProduct for ");
      v494._uint64_t countAndFlagsBits = NeuralNetwork.Layer.name.getter();
      OUTLINED_FUNCTION_56_15(v494);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_26_22();
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 698;
      goto LABEL_118;
    }
    uint64_t v296 = OUTLINED_FUNCTION_139_0();
    __swift_storeEnumTagSinglePayload(v296, v297, v298, v299);
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_35();
    v300();
    uint64_t v301 = NeuralNetwork.Layer.name.getter();
    uint64_t v303 = v440;
    if (!*(void *)(v440 + 16)
      || (unint64_t v304 = specialized __RawDictionaryStorage.find<A>(_:)(v301, v302), (v305 & 1) == 0)
      || (uint64_t v306 = *(void *)(*(void *)(v303 + 56) + 8 * v304),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          !*(void *)(v306 + 16))
      || (uint64_t v307 = OUTLINED_FUNCTION_137_0(),
          unint64_t v309 = specialized __RawDictionaryStorage.find<A>(_:)(v307, v308),
          (v310 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_52_14();
      _StringGuts.grow(_:)(58);
      OUTLINED_FUNCTION_43_15();
      OUTLINED_FUNCTION_51_14(v370 + 6, (uint64_t)"Cannot load innerProduct layer ");
      v490._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_56_15(v490);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_87_2((uint64_t)" in from MIL Blob Storage");
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 704;
      goto LABEL_118;
    }
    unint64_t v311 = *(void *)(*(void *)(v306 + 56) + 8 * v309);
    Dense.$weight.getter();
    unsigned int v312 = Parameter.id.getter();
    uint64_t v179 = *v431;
    OUTLINED_FUNCTION_9();
    v179();
    if (!*(void *)(v446 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v312), (v313 & 1) == 0))
    {
      OUTLINED_FUNCTION_136();
      unint64_t v371 = OUTLINED_FUNCTION_117_1();
      v491._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_56_15(v491);
      swift_bridgeObjectRelease();
      v372._uint64_t countAndFlagsBits = 46;
      v372._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v372);
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 707;
      goto LABEL_118;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v314 = swift_allocObject();
    *(_OWORD *)(v314 + 16) = v411;
    swift_retain();
    *(void *)(v314 + 32) = NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
    *(void *)(v314 + 40) = NeuralNetwork.Layer.InnerProductParameters.inputChannelCount.getter();
    MEMORY[0x22A672540](v314);
    uint64_t v315 = v472;
    uint64_t v316 = BlobsFile.floatBlob(at:)(v311);
    uint64_t v472 = v315;
    if (v315)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of BlobsFile((uint64_t)v484);
      OUTLINED_FUNCTION_81_4();
      OUTLINED_FUNCTION_82_3();
      OUTLINED_FUNCTION_90_1();
      OUTLINED_FUNCTION_123_0();
      OUTLINED_FUNCTION_83_3();
      OUTLINED_FUNCTION_84_1();
      OUTLINED_FUNCTION_25_0();
      v350();
      OUTLINED_FUNCTION_25_0();
      v351();
      OUTLINED_FUNCTION_125_0();
      OUTLINED_FUNCTION_25_0();
      v352();
      OUTLINED_FUNCTION_104_1();
      OUTLINED_FUNCTION_25_0();
      v353();
      OUTLINED_FUNCTION_141_0();
      goto LABEL_81;
    }
    v482[0] = v316;
    type metadata accessor for ComputeDevice();
    uint64_t v317 = OUTLINED_FUNCTION_95_2();
    *(void *)(v319 - 256) = v318;
    __swift_storeEnumTagSinglePayload(v317, v320, v321, v318);
    uint64_t v322 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v323 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
    uint64_t v161 = v449;
    uint64_t v433 = v322;
    uint64_t v432 = v323;
    Tensor.init<A>(shape:scalars:on:)();
    OUTLINED_FUNCTION_61_10();
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v324 = v450;
    Layer.updateValue<A>(_:for:)();
    swift_endAccess();
    uint64_t v430 = *v458;
    OUTLINED_FUNCTION_9();
    v325();
    outlined destroy of URL?(v324, &demangling cache variable for type metadata for Tensor?);
    if (*(void *)(v306 + 16))
    {
      unint64_t v326 = specialized __RawDictionaryStorage.find<A>(_:)(1935763810, 0xE400000000000000);
      if (v327)
      {
        unint64_t v328 = *(void *)(*(void *)(v306 + 56) + 8 * v326);
        swift_bridgeObjectRelease();
        uint64_t v329 = v438;
        Dense.$bias.getter();
        if (__swift_getEnumTagSinglePayload(v329, 1, v470) == 1)
        {
          outlined destroy of URL?(v329, &demangling cache variable for type metadata for Parameter?);
LABEL_117:
          OUTLINED_FUNCTION_52_14();
          _StringGuts.grow(_:)(62);
          OUTLINED_FUNCTION_43_15();
          v498._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
          OUTLINED_FUNCTION_56_15(v498);
          swift_bridgeObjectRelease();
          v389._uint64_t countAndFlagsBits = 46;
          v389._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v389);
          OUTLINED_FUNCTION_39_21();
          uint64_t v362 = 721;
          goto LABEL_118;
        }
        uint64_t v330 = Parameter.id.getter();
        OUTLINED_FUNCTION_9();
        v179();
        if (!specialized Dictionary.subscript.getter(v330, v446)) {
          goto LABEL_117;
        }
        uint64_t v331 = swift_allocObject();
        *(_OWORD *)(v331 + 16) = v408;
        *(void *)(v331 + 32) = NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
        MEMORY[0x22A672540](v331);
        uint64_t v332 = v472;
        uint64_t v333 = BlobsFile.floatBlob(at:)(v328);
        uint64_t v161 = v439;
        if (v332)
        {
          swift_release();
          swift_release();
          outlined release of BlobsFile((uint64_t)v484);
          OUTLINED_FUNCTION_81_4();
          OUTLINED_FUNCTION_82_3();
          OUTLINED_FUNCTION_90_1();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_83_3();
          OUTLINED_FUNCTION_84_1();
          OUTLINED_FUNCTION_25_0();
          v356();
          OUTLINED_FUNCTION_132_0();
          OUTLINED_FUNCTION_25_0();
          v357();
          OUTLINED_FUNCTION_125_0();
          goto LABEL_86;
        }
        uint64_t v472 = 0;
        v482[0] = v333;
        uint64_t v334 = OUTLINED_FUNCTION_95_2();
        __swift_storeEnumTagSinglePayload(v334, v336, v337, *(void *)(v335 - 256));
        OUTLINED_FUNCTION_127_0();
        Tensor.init<A>(shape:scalars:on:)();
        OUTLINED_FUNCTION_61_10();
        uint64_t v338 = v437;
        Layer.updateValue<A>(_:for:)();
        swift_endAccess();
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_9();
        v339();
        outlined destroy of URL?(v338, &demangling cache variable for type metadata for Tensor?);
        OUTLINED_FUNCTION_25_0();
        v340();
        OUTLINED_FUNCTION_25_0();
        v341();
        OUTLINED_FUNCTION_25_0();
        v342();
        uint64_t v179 = v468;
        goto LABEL_76;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_0();
    v343();
    OUTLINED_FUNCTION_25_0();
    v344();
    (*(void (**)(char *, uint64_t))v459)(v476, v477);
LABEL_75:
    OUTLINED_FUNCTION_80_4();
LABEL_76:
    uint64_t v166 = v480;
LABEL_77:
    v166 += v457;
    if (!--v181) {
      goto LABEL_80;
    }
  }
  if (v183 != v425)
  {
    if (v183 != v420)
    {
      OUTLINED_FUNCTION_110_2();
      OUTLINED_FUNCTION_25_0();
      v345();
      OUTLINED_FUNCTION_25_0();
      v346();
      goto LABEL_77;
    }
    uint64_t v480 = v166;
    uint64_t v236 = OUTLINED_FUNCTION_57_12();
    v237(v236);
    OUTLINED_FUNCTION_35();
    v238();
    uint64_t v239 = NeuralNetwork.Layer.name.getter();
    unint64_t v241 = specialized Dictionary.subscript.getter(v239, v240, v161);
    char v243 = v242;
    swift_bridgeObjectRelease();
    if (v243)
    {
      OUTLINED_FUNCTION_89_1();
      unint64_t v383 = OUTLINED_FUNCTION_77_5();
      OUTLINED_FUNCTION_51_14(v383, (uint64_t)"Cannot locate neural networks framework layer for ");
      v496._uint64_t countAndFlagsBits = NeuralNetwork.Layer.name.getter();
      OUTLINED_FUNCTION_56_15(v496);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_26_22();
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 641;
      goto LABEL_118;
    }
    uint64_t v244 = v448;
    uint64_t v245 = v472;
    if ((v241 & 0x8000000000000000) != 0) {
      goto LABEL_91;
    }
    if (v241 >= *(void *)(v441 + 16)) {
      goto LABEL_92;
    }
    outlined init with copy of TrainingSessionDelegate(v426 + 40 * v241, (uint64_t)v482);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    uint64_t v246 = v445;
    if (!swift_dynamicCast())
    {
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v384, v385, v386, v244);
      outlined destroy of URL?(v246, &demangling cache variable for type metadata for BatchNorm?);
      OUTLINED_FUNCTION_52_14();
      _StringGuts.grow(_:)(88);
      OUTLINED_FUNCTION_43_15();
      OUTLINED_FUNCTION_51_14(v387 + 46, (uint64_t)"Cannot cast neural networks framework batchnorm layer to batchnorm for ");
      v497._uint64_t countAndFlagsBits = NeuralNetwork.Layer.name.getter();
      OUTLINED_FUNCTION_56_15(v497);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_26_22();
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 644;
      goto LABEL_118;
    }
    __swift_storeEnumTagSinglePayload(v246, 0, 1, v244);
    OUTLINED_FUNCTION_131_0();
    OUTLINED_FUNCTION_35();
    v247();
    uint64_t v248 = NeuralNetwork.Layer.name.getter();
    uint64_t v250 = specialized Dictionary.subscript.getter(v248, v249, v440);
    swift_bridgeObjectRelease();
    if (!v250) {
      goto LABEL_107;
    }
    uint64_t v251 = specialized Dictionary.subscript.getter(1851876717, 0xE400000000000000, v250);
    if ((v252 & 1) != 0
      || (unint64_t v253 = v251,
          uint64_t v254 = specialized Dictionary.subscript.getter(0x65636E6169726176, 0xE800000000000000, v250),
          (v255 & 1) != 0)
      || (unint64_t v256 = v254,
          uint64_t v257 = specialized Dictionary.subscript.getter(1635018082, 0xE400000000000000, v250),
          (v258 & 1) != 0))
    {
      swift_bridgeObjectRelease();
LABEL_107:
      OUTLINED_FUNCTION_52_14();
      _StringGuts.grow(_:)(55);
      OUTLINED_FUNCTION_43_15();
      OUTLINED_FUNCTION_51_14(v373 + 3, (uint64_t)"Cannot load batchnorm layer ");
      v492._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_56_15(v492);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_87_2((uint64_t)" in from MIL Blob Storage");
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 653;
      goto LABEL_118;
    }
    unint64_t v259 = v257;
    unint64_t v260 = specialized Dictionary.subscript.getter(0x616D6D6167, 0xE500000000000000, v250);
    char v262 = v261;
    swift_bridgeObjectRelease();
    if (v262) {
      goto LABEL_107;
    }
    uint64_t v263 = NeuralNetwork.Layer.BatchNormalizeParameters.inputChannelCount.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v264 = swift_allocObject();
    *(_OWORD *)(v264 + 16) = v408;
    unint64_t v436 = v263;
    *(void *)(v264 + 32) = v263;
    MEMORY[0x22A672540]();
    uint64_t v265 = BlobsFile.floatBlob(at:)(v253);
    if (v245)
    {
      outlined release of BlobsFile((uint64_t)v484);
      OUTLINED_FUNCTION_81_4();
      OUTLINED_FUNCTION_82_3();
      OUTLINED_FUNCTION_90_1();
      OUTLINED_FUNCTION_123_0();
      OUTLINED_FUNCTION_83_3();
      OUTLINED_FUNCTION_84_1();
      OUTLINED_FUNCTION_25_0();
      v354();
      OUTLINED_FUNCTION_25_0();
      v355();
      goto LABEL_86;
    }
    uint64_t v433 = v265;
    uint64_t v407 = BlobsFile.floatBlob(at:)(v256);
    uint64_t v406 = BlobsFile.floatBlob(at:)(v259);
    uint64_t v403 = BlobsFile.floatBlob(at:)(v260);
    OUTLINED_FUNCTION_112_1();
    BatchNorm.$offset.getter();
    uint64_t v266 = Parameter.id.getter();
    v267 = *v431;
    OUTLINED_FUNCTION_79_4();
    v267();
    uint64_t v268 = v446;
    if (!specialized Dictionary.subscript.getter(v266, v446)) {
      goto LABEL_113;
    }
    OUTLINED_FUNCTION_107_2();
    BatchNorm.$scale.getter();
    uint64_t v269 = Parameter.id.getter();
    OUTLINED_FUNCTION_79_4();
    v267();
    if (!specialized Dictionary.subscript.getter(v269, v268)) {
      goto LABEL_112;
    }
    OUTLINED_FUNCTION_107_2();
    BatchNorm.$runningMean.getter();
    uint64_t v270 = LayerState.id.getter();
    v271 = *v391;
    OUTLINED_FUNCTION_79_4();
    v271();
    uint64_t v272 = v418;
    if (!specialized Dictionary.subscript.getter(v270, v418)) {
      goto LABEL_111;
    }
    OUTLINED_FUNCTION_107_2();
    BatchNorm.$runningVariance.getter();
    uint64_t v273 = LayerState.id.getter();
    OUTLINED_FUNCTION_79_4();
    v271();
    if (!specialized Dictionary.subscript.getter(v273, v272))
    {
      swift_release();
LABEL_111:
      swift_release();
LABEL_112:
      swift_release();
LABEL_113:
      OUTLINED_FUNCTION_52_14();
      _StringGuts.grow(_:)(74);
      OUTLINED_FUNCTION_43_15();
      OUTLINED_FUNCTION_51_14(v382 + 32, (uint64_t)"Cannot locate all parameter and layer state keypaths for ");
      v495._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_56_15(v495);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_26_22();
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 670;
      goto LABEL_118;
    }
    uint64_t v274 = v443;
    uint64_t v275 = v466;
    v405 = *v409;
    OUTLINED_FUNCTION_18_3();
    v276();
    uint64_t v277 = v469;
    uint64_t v179 = v442;
    v278 = (char **)v458;
    if ((v436 & 0x8000000000000000) != 0) {
      goto LABEL_93;
    }
    uint64_t v472 = 0;
    if (*(void *)(v433 + 16) < v436) {
      goto LABEL_94;
    }
    v482[0] = v433;
    v482[1] = v433 + 32;
    v482[2] = 0;
    unint64_t v483 = (2 * v436) | 1;
    uint64_t v433 = v483;
    uint64_t v432 = type metadata accessor for ComputeDevice();
    __swift_storeEnumTagSinglePayload(v277, 1, 1, v432);
    uint64_t v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
    uint64_t v280 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<Float>);
    uint64_t v430 = v279;
    uint64_t v424 = v280;
    Tensor.init<A>(shape:scalars:on:)();
    swift_beginAccess();
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v281 = v462;
    OUTLINED_FUNCTION_127_0();
    uint64_t v423 = v282;
    Layer.updateValue<A>(_:for:)();
    swift_endAccess();
    v429 = *v278;
    ((void (*)(void (*)(void), uint64_t))v429)(v179, v473);
    outlined destroy of URL?(v281, &demangling cache variable for type metadata for Tensor?);
    uint64_t v283 = v275;
    uint64_t v161 = (uint64_t)v409;
    v284 = v405;
    ((void (*)(uint64_t, uint64_t, uint64_t))v405)(v274, v283, v467);
    OUTLINED_FUNCTION_74_2();
    if (!v207) {
      goto LABEL_95;
    }
    OUTLINED_FUNCTION_31_21();
    OUTLINED_FUNCTION_64_6();
    OUTLINED_FUNCTION_127_0();
    Layer.updateValue<A>(_:for:)();
    swift_endAccess();
    OUTLINED_FUNCTION_25_0();
    v285();
    outlined destroy of URL?(v281, &demangling cache variable for type metadata for Tensor?);
    uint64_t v286 = OUTLINED_FUNCTION_85_1();
    v284(v286);
    OUTLINED_FUNCTION_74_2();
    if (!v207) {
      goto LABEL_96;
    }
    OUTLINED_FUNCTION_31_21();
    OUTLINED_FUNCTION_64_6();
    OUTLINED_FUNCTION_127_0();
    Layer.updateValue<A>(_:for:)();
    swift_endAccess();
    OUTLINED_FUNCTION_25_0();
    v287();
    outlined destroy of URL?(v281, &demangling cache variable for type metadata for Tensor?);
    uint64_t v288 = OUTLINED_FUNCTION_85_1();
    v284(v288);
    OUTLINED_FUNCTION_74_2();
    if (!v207) {
      goto LABEL_97;
    }
    OUTLINED_FUNCTION_31_21();
    OUTLINED_FUNCTION_64_6();
    OUTLINED_FUNCTION_127_0();
    Layer.updateValue<A>(_:for:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_25_0();
    v289();
    outlined destroy of URL?(v281, &demangling cache variable for type metadata for Tensor?);
    OUTLINED_FUNCTION_25_0();
    v290();
    OUTLINED_FUNCTION_131_0();
    OUTLINED_FUNCTION_25_0();
    v291();
    OUTLINED_FUNCTION_25_0();
    v292();
    OUTLINED_FUNCTION_25_0();
    v293();
    goto LABEL_75;
  }
  uint64_t v480 = v166;
  uint64_t v433 = v181;
  uint64_t v198 = OUTLINED_FUNCTION_57_12();
  v199(v198);
  OUTLINED_FUNCTION_35();
  v200();
  uint64_t v201 = NeuralNetwork.Layer.name.getter();
  if (!*(void *)(v161 + 16) || (unint64_t v203 = specialized __RawDictionaryStorage.find<A>(_:)(v201, v202), (v204 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_89_1();
    unint64_t v366 = OUTLINED_FUNCTION_77_5();
    OUTLINED_FUNCTION_51_14(v366, (uint64_t)"Cannot locate neural networks framework layer for ");
    v487._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
    OUTLINED_FUNCTION_56_15(v487);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_22();
    OUTLINED_FUNCTION_39_21();
    uint64_t v362 = 619;
    goto LABEL_118;
  }
  uint64_t v205 = *(void *)(*(void *)(v161 + 56) + 8 * v203);
  swift_bridgeObjectRelease();
  uint64_t v206 = v440;
  if ((v205 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_140_0();
    if (v207) {
      goto LABEL_89;
    }
    OUTLINED_FUNCTION_118_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    uint64_t v208 = v452;
    uint64_t v209 = v463;
    if (!swift_dynamicCast())
    {
      OUTLINED_FUNCTION_79_1();
      __swift_storeEnumTagSinglePayload(v374, v375, v376, v209);
      outlined destroy of URL?(v208, &demangling cache variable for type metadata for Conv2D?);
      OUTLINED_FUNCTION_52_14();
      _StringGuts.grow(_:)(80);
      OUTLINED_FUNCTION_43_15();
      OUTLINED_FUNCTION_51_14(v377 + 38, (uint64_t)"Cannot cast neural networks framework layer to convolution for ");
      v493._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_56_15(v493);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_26_22();
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 622;
      goto LABEL_118;
    }
    __swift_storeEnumTagSinglePayload(v208, 0, 1, v209);
    OUTLINED_FUNCTION_35();
    v210();
    uint64_t v211 = OUTLINED_FUNCTION_69_7();
    if (!*(void *)(v206 + 16)
      || (unint64_t v213 = specialized __RawDictionaryStorage.find<A>(_:)(v211, v212), (v214 & 1) == 0)
      || (uint64_t v215 = *(void *)(*(void *)(v206 + 56) + 8 * v213),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          !*(void *)(v215 + 16))
      || (uint64_t v216 = OUTLINED_FUNCTION_137_0(),
          unint64_t v218 = specialized __RawDictionaryStorage.find<A>(_:)(v216, v217),
          (v219 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_52_14();
      _StringGuts.grow(_:)(57);
      OUTLINED_FUNCTION_43_15();
      OUTLINED_FUNCTION_51_14(v367 + 5, (uint64_t)"Cannot load convolution layer ");
      v488._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_56_15(v488);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_87_2((uint64_t)" in from MIL Blob Storage");
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 628;
      goto LABEL_118;
    }
    unint64_t v436 = *(void *)(*(void *)(v215 + 56) + 8 * v218);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_112_1();
    MEMORY[0x22A6729C0]();
    unsigned int v220 = Parameter.id.getter();
    OUTLINED_FUNCTION_21_4();
    v221();
    if (!*(void *)(v446 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v220), (v222 & 1) == 0))
    {
      OUTLINED_FUNCTION_136();
      unint64_t v368 = OUTLINED_FUNCTION_117_1();
      v489._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_69_7();
      OUTLINED_FUNCTION_56_15(v489);
      swift_bridgeObjectRelease();
      v369._uint64_t countAndFlagsBits = 46;
      v369._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v369);
      OUTLINED_FUNCTION_39_21();
      uint64_t v362 = 631;
      goto LABEL_118;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v223 = swift_allocObject();
    *(_OWORD *)(v223 + 16) = v410;
    swift_retain();
    *(void *)(v223 + 32) = NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter();
    *(void *)(v223 + 40) = NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.getter();
    NeuralNetwork.Layer.ConvolutionParameters.kernelSize.getter();
    NeuralNetwork.Extent.height.getter();
    v224 = *v413;
    OUTLINED_FUNCTION_21_4();
    v224();
    uint64_t v179 = v453;
    NeuralNetwork.Layer.ConvolutionParameters.kernelSize.getter();
    NeuralNetwork.Extent.width.getter();
    OUTLINED_FUNCTION_21_4();
    v224();
    OUTLINED_FUNCTION_112_1();
    MEMORY[0x22A672540](v223);
    uint64_t v225 = v472;
    uint64_t v226 = BlobsFile.floatBlob(at:)(v436);
    if (v225)
    {
      swift_release();
      outlined release of BlobsFile((uint64_t)v484);
      OUTLINED_FUNCTION_81_4();
      OUTLINED_FUNCTION_82_3();
      OUTLINED_FUNCTION_90_1();
      OUTLINED_FUNCTION_123_0();
      OUTLINED_FUNCTION_83_3();
      OUTLINED_FUNCTION_84_1();
      OUTLINED_FUNCTION_109_2();
      OUTLINED_FUNCTION_25_0();
      v348();
      OUTLINED_FUNCTION_25_0();
      v349();
      OUTLINED_FUNCTION_93_1();
LABEL_86:
      OUTLINED_FUNCTION_25_0();
      v358();
      OUTLINED_FUNCTION_104_1();
      OUTLINED_FUNCTION_25_0();
      v359();
      OUTLINED_FUNCTION_141_0();
      OUTLINED_FUNCTION_25_0();
      v360();
      return;
    }
    uint64_t v472 = 0;
    v482[0] = v226;
    type metadata accessor for ComputeDevice();
    uint64_t v161 = v469;
    OUTLINED_FUNCTION_79_1();
    __swift_storeEnumTagSinglePayload(v227, v228, v229, v230);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
    Tensor.init<A>(shape:scalars:on:)();
    OUTLINED_FUNCTION_61_10();
    _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v231 = v462;
    Layer.updateValue<A>(_:for:)();
    swift_endAccess();
    swift_release();
    outlined destroy of URL?(v231, &demangling cache variable for type metadata for Tensor?);
    OUTLINED_FUNCTION_108_2();
    OUTLINED_FUNCTION_25_0();
    v232();
    OUTLINED_FUNCTION_25_0();
    v233();
    OUTLINED_FUNCTION_93_1();
    OUTLINED_FUNCTION_25_0();
    v234();
    OUTLINED_FUNCTION_25_0();
    v235();
    OUTLINED_FUNCTION_80_4();
    uint64_t v181 = v433;
    goto LABEL_76;
  }
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_89_1();
  unint64_t v361 = OUTLINED_FUNCTION_77_5();
  OUTLINED_FUNCTION_51_14(v361, (uint64_t)"Cannot locate neural networks framework layer for ");
  v486._uint64_t countAndFlagsBits = NeuralNetwork.Layer.name.getter();
  OUTLINED_FUNCTION_56_15(v486);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_22();
  OUTLINED_FUNCTION_39_21();
  uint64_t v362 = 690;
LABEL_118:
  uint64_t v390 = v362;
LABEL_119:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void MLHandActionClassifier.GraphCNN.coreMLTrainableLayerNames(from:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for NeuralNetwork.Layer.Kind();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for NeuralNetwork.Layer();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_15();
  uint64_t v14 = *(void *)(v2 + 16);
  if (v14)
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = v2 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v48 = *(void *)(v15 + 56);
    uint64_t v49 = v16;
    uint64_t v47 = (uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
    int v46 = *MEMORY[0x263F53240];
    int v43 = *MEMORY[0x263F53238];
    int v42 = *MEMORY[0x263F53248];
    swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t v44 = v3;
    uint64_t v45 = v10;
    while (1)
    {
      v49(v0, v17, v10);
      NeuralNetwork.Layer.kind.getter();
      int v19 = (*v47)(v9, v3);
      if (v19 == v46) {
        break;
      }
      if (v19 == v43)
      {
        uint64_t v26 = NeuralNetwork.Layer.name.getter();
        uint64_t v22 = v27;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_73_2();
          uint64_t v18 = v37;
        }
        unint64_t v28 = *(void *)(v18 + 16);
        if (v28 >= *(void *)(v18 + 24) >> 1)
        {
          OUTLINED_FUNCTION_71_7();
          uint64_t v18 = v38;
        }
        *(void *)(v18 + 16) = v28 + 1;
        uint64_t v29 = v18 + 16 * v28;
        *(void *)(v29 + 32) = v26;
        uint64_t v25 = v29 + 32;
        goto LABEL_21;
      }
      if (v19 == v42)
      {
        uint64_t v41 = NeuralNetwork.Layer.name.getter();
        uint64_t v22 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_73_2();
          uint64_t v18 = v39;
        }
        unint64_t v31 = *(void *)(v18 + 16);
        if (v31 >= *(void *)(v18 + 24) >> 1)
        {
          OUTLINED_FUNCTION_71_7();
          uint64_t v18 = v40;
        }
        *(void *)(v18 + 16) = v31 + 1;
        uint64_t v32 = v18 + 16 * v31;
        *(void *)(v32 + 32) = v41;
        uint64_t v25 = v32 + 32;
        goto LABEL_21;
      }
LABEL_22:
      OUTLINED_FUNCTION_25_0();
      v33();
      OUTLINED_FUNCTION_27_28();
      v34();
      v17 += v48;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    uint64_t v20 = NeuralNetwork.Layer.name.getter();
    uint64_t v22 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_73_2();
      uint64_t v18 = v35;
    }
    unint64_t v23 = *(void *)(v18 + 16);
    if (v23 >= *(void *)(v18 + 24) >> 1)
    {
      OUTLINED_FUNCTION_71_7();
      uint64_t v18 = v36;
    }
    *(void *)(v18 + 16) = v23 + 1;
    uint64_t v24 = v18 + 16 * v23;
    *(void *)(v24 + 32) = v20;
    uint64_t v25 = v24 + 32;
    uint64_t v3 = v44;
LABEL_21:
    *(void *)(v25 + 8) = v22;
    uint64_t v10 = v45;
    goto LABEL_22;
  }
LABEL_24:
  OUTLINED_FUNCTION_12_4();
}

void MLHandActionClassifier.GraphCNN.defineCoreMLLayers(numberOfKeypointsChannels:numberOfKeypoints:)()
{
  OUTLINED_FUNCTION_19_4();
  uint64_t v455 = v1;
  uint64_t v458 = v3;
  uint64_t v457 = v4;
  uint64_t v441 = type metadata accessor for NeuralNetwork.Layer.Kind();
  OUTLINED_FUNCTION_0();
  uint64_t v440 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_17_3(v7);
  uint64_t v444 = type metadata accessor for NeuralNetwork.Layer.PoolParameters();
  OUTLINED_FUNCTION_0();
  uint64_t v443 = v8;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_45_2(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v12 = OUTLINED_FUNCTION_17(v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v464 = (char *)v435 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_65();
  uint64_t v462 = type metadata accessor for NeuralNetwork.Layer.PoolParameters.Kind();
  OUTLINED_FUNCTION_0();
  uint64_t v461 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v463 = (char *)v435 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v18 = OUTLINED_FUNCTION_17(v17);
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_10();
  uint64_t v466 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  OUTLINED_FUNCTION_0();
  uint64_t v473 = v19;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  unint64_t v23 = (char *)v435 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v465 = type metadata accessor for NeuralNetwork.Layer();
  OUTLINED_FUNCTION_0();
  uint64_t v471 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_16_2();
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)v435 - v28;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)v435 - v32;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v34);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)v435 - v38;
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v42);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v48);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v50);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v51);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v52);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v53);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v54);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v57);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v58);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v59);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v60);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v61);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v62);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v63);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v64);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v65);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v66);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v67);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v68);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v69);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v70);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v71);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v72);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v73);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v74);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v75);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v76);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v77);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v78);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v79);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v80);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v81);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v82);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v83);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v84);
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v85);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v86);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v87);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v88);
  OUTLINED_FUNCTION_45_3();
  uint64_t v470 = v89;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v90);
  OUTLINED_FUNCTION_45_3();
  uint64_t v469 = v91;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v92);
  OUTLINED_FUNCTION_45_3();
  v468 = v93;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v94);
  OUTLINED_FUNCTION_45_3();
  uint64_t v467 = v95;
  OUTLINED_FUNCTION_20_3();
  MEMORY[0x270FA5388](v96);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v97);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v98);
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_16_2();
  MEMORY[0x270FA5388](v99);
  OUTLINED_FUNCTION_45_3();
  uint64_t v472 = v100;
  OUTLINED_FUNCTION_20_3();
  uint64_t v102 = MEMORY[0x270FA5388](v101);
  uint64_t v104 = (char *)v435 - v103;
  uint64_t v105 = MEMORY[0x270FA5388](v102);
  MEMORY[0x270FA5388](v105);
  uint64_t v107 = (char *)v435 - v106;
  uint64_t v479 = (char *)MEMORY[0x263F8EE78];
  static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)();
  char v108 = OUTLINED_FUNCTION_122_0();
  uint64_t v439 = v29;
  uint64_t v438 = v33;
  v453 = v39;
  if ((v108 & 1) == 0)
  {
    OUTLINED_FUNCTION_48_14();
    uint64_t v2 = v364;
  }
  unint64_t v109 = *((void *)v2 + 2);
  uint64_t v110 = v465;
  if (v109 >= *((void *)v2 + 3) >> 1)
  {
    OUTLINED_FUNCTION_59_8();
    uint64_t v2 = v365;
  }
  *((void *)v2 + 2) = v109 + 1;
  uint64_t v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v471 + 32);
  unint64_t v475 = (*(unsigned __int8 *)(v471 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v471 + 80);
  v476 = v111;
  uint64_t v474 = *(void *)(v471 + 72);
  v471 += 32;
  v111((uint64_t)&v2[v475 + v474 * v109], (uint64_t)v107, v110);
  uint64_t v479 = v2;
  static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_122_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_48_14();
    uint64_t v2 = v366;
  }
  unint64_t v112 = *((void *)v2 + 2);
  if (v112 >= *((void *)v2 + 3) >> 1)
  {
    OUTLINED_FUNCTION_59_8();
    uint64_t v2 = v367;
  }
  *((void *)v2 + 2) = v112 + 1;
  OUTLINED_FUNCTION_35_23();
  v113();
  uint64_t v479 = v2;
  uint64_t v454 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v114 = swift_allocObject();
  *(_OWORD *)(v114 + 16) = xmmword_2272CB4A0;
  *(void *)(v114 + 32) = 1;
  uint64_t v115 = v455 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  uint64_t v116 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  *(void *)(v114 + 40) = *(void *)(v115 + *(int *)(v116 + 40));
  *(void *)(v114 + 48) = -1;
  static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)();
  swift_bridgeObjectRelease();
  if ((OUTLINED_FUNCTION_122_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_48_14();
    uint64_t v114 = v368;
  }
  unint64_t v117 = *(void *)(v114 + 16);
  if (v117 >= *(void *)(v114 + 24) >> 1)
  {
    OUTLINED_FUNCTION_59_8();
    uint64_t v114 = v369;
  }
  *(void *)(v114 + 16) = v117 + 1;
  OUTLINED_FUNCTION_35_23();
  v118();
  uint64_t v479 = (char *)v114;
  OUTLINED_FUNCTION_120();
  static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v104 = v370;
  }
  OUTLINED_FUNCTION_75_2();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v104 = v371;
  }
  uint64_t v120 = OUTLINED_FUNCTION_55_12();
  v476(v120, v472, v110);
  uint64_t v479 = v104;
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
  uint64_t v121 = v479;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v121 = v372;
  }
  uint64_t v122 = (char *)*((void *)v121 + 2);
  if ((unint64_t)v122 >= *((void *)v121 + 3) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v121 = v373;
  }
  *((void *)v121 + 2) = v122 + 1;
  OUTLINED_FUNCTION_35_23();
  v123();
  if ((unsigned __int128)(v457 * (__int128)v458) >> 64 == (v457 * v458) >> 63)
  {
    uint64_t v472 = v116;
    OUTLINED_FUNCTION_17_35();
    static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
    unint64_t v124 = *((void *)v121 + 2);
    uint64_t v122 = (char *)(v124 + 1);
    if (v124 < *((void *)v121 + 3) >> 1) {
      goto LABEL_23;
    }
  }
  else
  {
    __break(1u);
  }
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v121 = v374;
LABEL_23:
  *((void *)v121 + 2) = v122;
  OUTLINED_FUNCTION_35_23();
  v125();
  uint64_t v479 = v121;
  static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_122_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_48_14();
    uint64_t v122 = v375;
  }
  unint64_t v126 = *((void *)v122 + 2);
  if (v126 >= *((void *)v122 + 3) >> 1)
  {
    OUTLINED_FUNCTION_59_8();
    uint64_t v122 = v376;
  }
  *((void *)v122 + 2) = v126 + 1;
  OUTLINED_FUNCTION_119_0();
  OUTLINED_FUNCTION_35_23();
  v127();
  uint64_t v479 = v122;
  OUTLINED_FUNCTION_113_1();
  OUTLINED_FUNCTION_120();
  static NeuralNetwork.Layer.squeeze(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_122_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_48_14();
    uint64_t v122 = v377;
  }
  unint64_t v128 = *((void *)v122 + 2);
  if (v128 >= *((void *)v122 + 3) >> 1)
  {
    OUTLINED_FUNCTION_59_8();
    uint64_t v122 = v378;
  }
  *((void *)v122 + 2) = v128 + 1;
  OUTLINED_FUNCTION_119_0();
  OUTLINED_FUNCTION_35_23();
  v129();
  OUTLINED_FUNCTION_113_1();
  static NeuralNetwork.Layer.innerProduct(name:inputName:outputName:inputChannelCount:outputChannelCount:)();
  unint64_t v130 = *((void *)v122 + 2);
  if (v130 >= *((void *)v122 + 3) >> 1)
  {
    OUTLINED_FUNCTION_59_8();
    uint64_t v122 = v379;
  }
  *((void *)v122 + 2) = v130 + 1;
  OUTLINED_FUNCTION_119_0();
  OUTLINED_FUNCTION_35_23();
  v131();
  uint64_t v479 = v122;
  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_2272CB360;
  *(void *)(v132 + 32) = 1;
  *(void *)(v132 + 40) = *(void *)(v115 + *(int *)(v472 + 40));
  *(_OWORD *)(v132 + 48) = xmmword_2272D35F0;
  OUTLINED_FUNCTION_113_1();
  OUTLINED_FUNCTION_120();
  static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)();
  swift_bridgeObjectRelease();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v132 = v380;
  }
  OUTLINED_FUNCTION_75_2();
  uint64_t v133 = v471;
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v132 = v381;
  }
  OUTLINED_FUNCTION_55_12();
  OUTLINED_FUNCTION_32_27();
  v134();
  uint64_t v479 = (char *)v132;
  OUTLINED_FUNCTION_113_1();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v132 = v382;
  }
  OUTLINED_FUNCTION_75_2();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v132 = v383;
  }
  OUTLINED_FUNCTION_55_12();
  OUTLINED_FUNCTION_32_27();
  v135();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_75_2();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v132 = v384;
  }
  OUTLINED_FUNCTION_55_12();
  OUTLINED_FUNCTION_32_27();
  v136();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_75_2();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v132 = v385;
  }
  OUTLINED_FUNCTION_55_12();
  OUTLINED_FUNCTION_32_27();
  v137();
  uint64_t v479 = (char *)v132;
  uint64_t v477 = 1;
  uint64_t v478 = 1;
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v138 = *MEMORY[0x263F53230];
  uint64_t v139 = type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind();
  OUTLINED_FUNCTION_8();
  uint64_t v141 = *(void (**)(void, void, void))(v140 + 104);
  LODWORD(v470) = v138;
  uint64_t v467 = v140 + 104;
  v468 = v141;
  v141(v0, v138, v139);
  uint64_t v472 = v139;
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v139);
  uint64_t v477 = 1;
  uint64_t v478 = 1;
  OUTLINED_FUNCTION_11_47();
  uint64_t v142 = v435[3];
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v143 = v473 + 8;
  uint64_t v144 = (void (*)(void))*((void *)v473 + 1);
  uint64_t v145 = v466;
  OUTLINED_FUNCTION_21_4();
  v144();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v473 = v143;
  OUTLINED_FUNCTION_21_4();
  v144();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v145 = v386;
  }
  OUTLINED_FUNCTION_13_46();
  uint64_t v469 = v144;
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v145 = v387;
  }
  *(void *)(v145 + 16) = v143;
  OUTLINED_FUNCTION_32_27();
  v146();
  uint64_t v479 = (char *)v145;
  OUTLINED_FUNCTION_112_1();
  uint64_t v148 = *(void *)(v147 + 104);
  uint64_t v149 = v463;
  LODWORD(v458) = v150;
  uint64_t v151 = v462;
  uint64_t v459 = v147 + 104;
  uint64_t v457 = v148;
  OUTLINED_FUNCTION_68_5();
  v152();
  OUTLINED_FUNCTION_58_7();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_34_21();
  uint64_t v460 = type metadata accessor for NeuralNetwork.Layer.PoolParameters.Padding();
  OUTLINED_FUNCTION_6_48(v133, 0, 1, v460);
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.pool(name:inputName:outputName:kind:kernelSize:strides:padding:)();
  uint64_t v153 = (uint64_t (*)(void))v469;
  OUTLINED_FUNCTION_21_4();
  uint64_t v154 = v153();
  OUTLINED_FUNCTION_94_1(v154, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v155 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v153)(v155);
  uint64_t v156 = *(void (**)(void, void))(v142 + 8);
  uint64_t v461 = v142 + 8;
  uint64_t v456 = v156;
  v156(v149, v151);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  uint64_t v157 = v469;
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v158();
  OUTLINED_FUNCTION_46_16();
  uint64_t v159 = MEMORY[0x263F8D6E8];
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_38_20();
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v472);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v160 = v473;
  OUTLINED_FUNCTION_27_28();
  v157();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v161 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v157)(v161);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v160 = v388;
  }
  uint64_t v162 = v435[4];
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v160 = v389;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v163();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v160 = v390;
  }
  *((void *)v160 + 2) = v159;
  OUTLINED_FUNCTION_5_58();
  v164();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v165 = OUTLINED_FUNCTION_21_40();
  v166(v165);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v162);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v167 = v473;
  uint64_t v168 = v469;
  OUTLINED_FUNCTION_27_28();
  v168();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v169 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v168)(v169);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v167 = v391;
  }
  uint64_t v170 = v435[5];
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v167 = v392;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v171();
  OUTLINED_FUNCTION_148_0();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_147_0();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v167 = v393;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v172();
  uint64_t v479 = v167;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_45_18();
  static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v167 = v394;
  }
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v167 = v395;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v173();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v167 = v396;
  }
  *((void *)v167 + 2) = v168;
  OUTLINED_FUNCTION_5_58();
  v174();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v175 = OUTLINED_FUNCTION_21_40();
  v176(v175);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v170);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v177 = v469;
  OUTLINED_FUNCTION_27_28();
  ((void (*)(uint64_t))v177)(v178);
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v179 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v177)(v179);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v181(v180);
  uint64_t v182 = OUTLINED_FUNCTION_20_39();
  v183(v182);
  OUTLINED_FUNCTION_58_7();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_34_21();
  OUTLINED_FUNCTION_6_48(v133, 0, 1, v460);
  unint64_t v436 = v23;
  uint64_t v437 = v133;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_65_5();
  uint64_t v184 = OUTLINED_FUNCTION_33_24();
  uint64_t v185 = ((uint64_t (*)(uint64_t))v177)(v184);
  OUTLINED_FUNCTION_94_1(v185, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v186 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v177)(v186);
  uint64_t v187 = OUTLINED_FUNCTION_29_29();
  v188(v187);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v189();
  OUTLINED_FUNCTION_46_16();
  uint64_t v190 = MEMORY[0x263F8D6E8];
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_38_20();
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v472);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v191 = v473;
  OUTLINED_FUNCTION_27_28();
  ((void (*)(uint64_t))v177)(v192);
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v193 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v177)(v193);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v191 = v397;
  }
  uint64_t v194 = v435[6];
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v191 = v398;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v196(v195);
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v191 = v399;
  }
  *((void *)v191 + 2) = v190;
  OUTLINED_FUNCTION_5_58();
  v198(v197);
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v199 = OUTLINED_FUNCTION_21_40();
  v200(v199);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v194);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v201 = v473;
  uint64_t v202 = v469;
  OUTLINED_FUNCTION_27_28();
  v202();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v203 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v202)(v203);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v201 = v400;
  }
  uint64_t v204 = v435[7];
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v201 = v401;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v205();
  OUTLINED_FUNCTION_142_0();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_50_14();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v201 = v402;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v206();
  uint64_t v479 = v201;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_45_18();
  static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v201 = v403;
  }
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v201 = v404;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v207();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v201 = v405;
  }
  *((void *)v201 + 2) = v202;
  OUTLINED_FUNCTION_5_58();
  v208();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v209 = OUTLINED_FUNCTION_21_40();
  v210(v209);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v204);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v211 = v469;
  OUTLINED_FUNCTION_27_28();
  v211();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v212 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v211)(v212);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v213();
  uint64_t v214 = OUTLINED_FUNCTION_20_39();
  v215(v214);
  OUTLINED_FUNCTION_58_7();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_34_21();
  OUTLINED_FUNCTION_6_48(v133, 0, 1, v460);
  uint64_t v443 = v23;
  uint64_t v444 = v133;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_65_5();
  uint64_t v216 = OUTLINED_FUNCTION_33_24();
  uint64_t v217 = ((uint64_t (*)(uint64_t))v211)(v216);
  OUTLINED_FUNCTION_94_1(v217, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v218 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v211)(v218);
  uint64_t v219 = OUTLINED_FUNCTION_29_29();
  v220(v219);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v221();
  OUTLINED_FUNCTION_46_16();
  uint64_t v222 = MEMORY[0x263F8D6E8];
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_38_20();
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v472);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v223 = v473;
  OUTLINED_FUNCTION_27_28();
  v211();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v224 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v211)(v224);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v223 = v406;
  }
  uint64_t v225 = v435[8];
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v223 = v407;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v226();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v223 = v408;
  }
  *((void *)v223 + 2) = v222;
  OUTLINED_FUNCTION_5_58();
  v227();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v228 = OUTLINED_FUNCTION_21_40();
  v229(v228);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v225);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v230 = v473;
  uint64_t v231 = v469;
  OUTLINED_FUNCTION_27_28();
  v231();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v232 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v231)(v232);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v230 = v409;
  }
  uint64_t v233 = v435[9];
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v230 = v410;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v234();
  OUTLINED_FUNCTION_142_0();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_50_14();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v230 = v411;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v235();
  uint64_t v479 = v230;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_45_18();
  static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v230 = v412;
  }
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v230 = v413;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v236();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v230 = v414;
  }
  *((void *)v230 + 2) = v231;
  OUTLINED_FUNCTION_5_58();
  v237();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v238 = OUTLINED_FUNCTION_21_40();
  v239(v238);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v233);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  uint64_t v240 = v469;
  OUTLINED_FUNCTION_27_28();
  v240();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v241 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v240)(v241);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v242();
  uint64_t v243 = OUTLINED_FUNCTION_20_39();
  v244(v243);
  OUTLINED_FUNCTION_58_7();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_34_21();
  OUTLINED_FUNCTION_6_48(v133, 0, 1, v460);
  uint64_t v445 = v23;
  uint64_t v446 = v133;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_65_5();
  uint64_t v245 = OUTLINED_FUNCTION_33_24();
  uint64_t v246 = ((uint64_t (*)(uint64_t))v240)(v245);
  OUTLINED_FUNCTION_94_1(v246, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v247 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v240)(v247);
  uint64_t v248 = OUTLINED_FUNCTION_29_29();
  v249(v248);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v250();
  OUTLINED_FUNCTION_46_16();
  OUTLINED_FUNCTION_10_39();
  uint64_t v477 = 2;
  uint64_t v478 = 2;
  OUTLINED_FUNCTION_11_47();
  OUTLINED_FUNCTION_38_20();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v472);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_27_28();
  v240();
  uint64_t v251 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v240)(v251);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v252();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v253();
  OUTLINED_FUNCTION_42_21();
  uint64_t v254 = MEMORY[0x263F8D6E8];
  OUTLINED_FUNCTION_10_39();
  uint64_t v477 = 2;
  uint64_t v478 = 2;
  OUTLINED_FUNCTION_11_47();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v255 = v472;
  OUTLINED_FUNCTION_7_19();
  v256();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v255);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v257 = v473;
  OUTLINED_FUNCTION_27_28();
  v240();
  uint64_t v258 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v240)(v258);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v257 = v415;
  }
  uint64_t v259 = (uint64_t)v436;
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v257 = v416;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v260();
  OUTLINED_FUNCTION_142_0();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_50_14();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v257 = v417;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v261();
  uint64_t v479 = v257;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_45_18();
  static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v257 = v418;
  }
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v257 = v419;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v262();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v257 = v420;
  }
  *((void *)v257 + 2) = v254;
  OUTLINED_FUNCTION_5_58();
  v263();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v264 = OUTLINED_FUNCTION_21_40();
  v265(v264);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v259);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_121();
  uint64_t v266 = v469;
  OUTLINED_FUNCTION_27_28();
  v266();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v267 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v266)(v267);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v268();
  uint64_t v269 = OUTLINED_FUNCTION_20_39();
  v270(v269);
  OUTLINED_FUNCTION_58_7();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_34_21();
  OUTLINED_FUNCTION_6_48(v133, 0, 1, v460);
  v447 = v23;
  uint64_t v448 = v133;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_65_5();
  uint64_t v271 = OUTLINED_FUNCTION_33_24();
  uint64_t v272 = ((uint64_t (*)(uint64_t))v266)(v271);
  OUTLINED_FUNCTION_94_1(v272, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v273 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v266)(v273);
  uint64_t v274 = OUTLINED_FUNCTION_29_29();
  v275(v274);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v276();
  OUTLINED_FUNCTION_46_16();
  uint64_t v277 = MEMORY[0x263F8D6E8];
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_38_20();
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v472);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  v278 = v473;
  OUTLINED_FUNCTION_27_28();
  v266();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v279 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v266)(v279);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    v278 = v421;
  }
  uint64_t v280 = v437;
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    v278 = v422;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v281();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    v278 = v423;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v282();
  uint64_t v479 = v278;
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_45_18();
  static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    v278 = v424;
  }
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    v278 = v425;
  }
  *((void *)v278 + 2) = v277;
  OUTLINED_FUNCTION_5_58();
  v283();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v284();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v285 = OUTLINED_FUNCTION_21_40();
  v286(v285);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v280);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_121();
  v287 = v469;
  OUTLINED_FUNCTION_27_28();
  v287();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v288 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v287)(v288);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v289();
  uint64_t v290 = OUTLINED_FUNCTION_20_39();
  v291(v290);
  OUTLINED_FUNCTION_58_7();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_34_21();
  OUTLINED_FUNCTION_6_48(v133, 0, 1, v460);
  uint64_t v449 = v23;
  uint64_t v450 = v133;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_65_5();
  uint64_t v292 = OUTLINED_FUNCTION_33_24();
  uint64_t v293 = ((uint64_t (*)(uint64_t))v287)(v292);
  OUTLINED_FUNCTION_94_1(v293, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v294 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v287)(v294);
  uint64_t v295 = OUTLINED_FUNCTION_29_29();
  v296(v295);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v297();
  OUTLINED_FUNCTION_46_16();
  OUTLINED_FUNCTION_10_39();
  uint64_t v477 = 2;
  uint64_t v478 = 2;
  OUTLINED_FUNCTION_11_47();
  OUTLINED_FUNCTION_38_20();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v472);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_27_28();
  v287();
  uint64_t v298 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v287)(v298);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v299();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v300();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  uint64_t v477 = 2;
  uint64_t v478 = 2;
  OUTLINED_FUNCTION_11_47();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v301 = v472;
  OUTLINED_FUNCTION_7_19();
  v302();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v301);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_121();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v303 = v473;
  OUTLINED_FUNCTION_27_28();
  v287();
  uint64_t v304 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v287)(v304);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_65();
    uint64_t v303 = v426;
  }
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v303 = v427;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v305();
  OUTLINED_FUNCTION_142_0();
  OUTLINED_FUNCTION_17_35();
  OUTLINED_FUNCTION_50_14();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119)
  {
    OUTLINED_FUNCTION_1_59();
    uint64_t v303 = v428;
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v306();
  uint64_t v479 = v303;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_45_18();
  static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v307();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v308();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v309 = OUTLINED_FUNCTION_21_40();
  v310(v309);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, (uint64_t)v287);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  unint64_t v311 = v469;
  OUTLINED_FUNCTION_27_28();
  v311();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v312 = OUTLINED_FUNCTION_23_25();
  ((void (*)(uint64_t))v311)(v312);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_2_67();
  v313();
  uint64_t v314 = OUTLINED_FUNCTION_20_39();
  v315(v314);
  OUTLINED_FUNCTION_58_7();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_34_21();
  OUTLINED_FUNCTION_6_48(v133, 0, 1, v460);
  uint64_t v451 = v23;
  uint64_t v452 = v133;
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  OUTLINED_FUNCTION_65_5();
  uint64_t v316 = OUTLINED_FUNCTION_33_24();
  ((void (*)(uint64_t))v311)(v316);
  outlined destroy of URL?(v133, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  uint64_t v317 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v311)(v317);
  uint64_t v318 = OUTLINED_FUNCTION_29_29();
  v319(v318);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_32_27();
  v320();
  OUTLINED_FUNCTION_46_16();
  OUTLINED_FUNCTION_10_39();
  OUTLINED_FUNCTION_38_20();
  OUTLINED_FUNCTION_6_48(v0, 0, 1, v472);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  OUTLINED_FUNCTION_126_0();
  OUTLINED_FUNCTION_21_4();
  v311();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v321 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v311)(v321);
  if ((OUTLINED_FUNCTION_30_28() & 1) == 0) {
    OUTLINED_FUNCTION_4_65();
  }
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_32_27();
  v322();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_13_46();
  if (v119) {
    OUTLINED_FUNCTION_1_59();
  }
  OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_32_27();
  v323();
  OUTLINED_FUNCTION_42_21();
  OUTLINED_FUNCTION_10_39();
  NeuralNetwork.ValidPaddingParameters.init()();
  uint64_t v324 = OUTLINED_FUNCTION_21_40();
  v325(v324);
  OUTLINED_FUNCTION_6_48(v0, 0, 1, (uint64_t)v311);
  OUTLINED_FUNCTION_28_23();
  OUTLINED_FUNCTION_8_46();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  OUTLINED_FUNCTION_126_0();
  unint64_t v326 = v469;
  OUTLINED_FUNCTION_21_4();
  v326();
  outlined destroy of URL?(v0, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  uint64_t v327 = OUTLINED_FUNCTION_37_19();
  ((void (*)(uint64_t))v326)(v327);
  unint64_t v328 = v479;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_124_0();
    unint64_t v328 = v429;
  }
  uint64_t v329 = (uint64_t)v439;
  if (*((void *)v328 + 2) >= *((void *)v328 + 3) >> 1)
  {
    OUTLINED_FUNCTION_72_6();
    unint64_t v328 = v430;
  }
  OUTLINED_FUNCTION_129_0();
  OUTLINED_FUNCTION_32_27();
  v330();
  OUTLINED_FUNCTION_148_0();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_147_0();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  if (*((void *)v328 + 2) >= *((void *)v328 + 3) >> 1)
  {
    OUTLINED_FUNCTION_72_6();
    unint64_t v328 = v431;
  }
  OUTLINED_FUNCTION_129_0();
  OUTLINED_FUNCTION_32_27();
  v331();
  uint64_t v479 = v328;
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_45_18();
  static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
  uint64_t v332 = v479;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_124_0();
    uint64_t v332 = v432;
  }
  unint64_t v333 = *((void *)v332 + 2);
  if (v333 >= *((void *)v332 + 3) >> 1)
  {
    OUTLINED_FUNCTION_72_6();
    uint64_t v332 = v433;
  }
  *((void *)v332 + 2) = v333 + 1;
  OUTLINED_FUNCTION_32_27();
  v334();
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_16_42();
  OUTLINED_FUNCTION_9_47();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  uint64_t v479 = v332;
  unint64_t v335 = *((void *)v332 + 2);
  if (v335 >= *((void *)v332 + 3) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v479 = v434;
  }
  uint64_t v336 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v335, v329);
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v336);
  OUTLINED_FUNCTION_68_5();
  v337();
  uint64_t v477 = 0;
  uint64_t v478 = 0;
  NeuralNetwork.Extent.init(height:width:)();
  uint64_t v477 = 0;
  uint64_t v478 = 0;
  NeuralNetwork.Extent.init(height:width:)();
  NeuralNetwork.ValidPaddingParameters.init()();
  OUTLINED_FUNCTION_7_19();
  v338();
  uint64_t v339 = OUTLINED_FUNCTION_139_0();
  __swift_storeEnumTagSinglePayload(v339, v340, v341, v342);
  OUTLINED_FUNCTION_112_1();
  NeuralNetwork.Layer.PoolParameters.init(kind:kernelSize:strides:padding:)();
  NeuralNetwork.Layer.PoolParameters.averageExcludesPadding.setter();
  NeuralNetwork.Layer.PoolParameters.doesGlobalPooling.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v343 = swift_allocObject();
  uint64_t v344 = specialized static Array._adoptStorage(_:count:)(v343, 1);
  void *v345 = 0x32352E7475706E69;
  v345[1] = 0xE800000000000000;
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v344);
  uint64_t v346 = swift_allocObject();
  specialized static Array._adoptStorage(_:count:)(v346, 1);
  OUTLINED_FUNCTION_113_1();
  uint64_t v348 = v347 + 196608;
  void *v349 = v347 + 196608;
  v349[1] = 0xE300000000000000;
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v350);
  v351 = (void (**)(uint64_t, uint64_t))v443;
  uint64_t v352 = v444;
  OUTLINED_FUNCTION_18_3();
  v353();
  OUTLINED_FUNCTION_7_19();
  v354();
  uint64_t v355 = v442;
  NeuralNetwork.Layer.init(name:inputNames:outputNames:kind:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v356 = *((void *)v479 + 2);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v356);
  uint64_t v357 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v356, v355);
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v357);
  uint64_t v358 = swift_allocObject();
  uint64_t v359 = specialized static Array._adoptStorage(_:count:)(v358, 2);
  _OWORD *v360 = xmmword_2272D3600;
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v359);
  OUTLINED_FUNCTION_12_38();
  OUTLINED_FUNCTION_14_35();
  static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)();
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_105_1();
  uint64_t v361 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v348, v355);
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v361);
  specialized Array.count.getter(*(void *)(v455 + 16));
  OUTLINED_FUNCTION_17_35();
  static NeuralNetwork.Layer.innerProduct(name:inputName:outputName:inputChannelCount:outputChannelCount:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_105_1();
  uint64_t v362 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v348, v355);
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v362);
  static NeuralNetwork.Layer.softmaxND(name:inputName:outputName:axis:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_105_1();
  uint64_t v363 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v348, v355);
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v363);
  v351[1](v329, v352);
  OUTLINED_FUNCTION_12_4();
}

uint64_t MLHandActionClassifier.GraphCNN.getCoreMLAndNeuralNetworksTrainableLayerMap(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (uint64_t)v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *(v5 - 1);
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    uint64_t v11 = v2[2];
    BOOL v12 = (v10 & 1) == 0;
    Swift::Int v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    unint64_t v14 = v9;
    char v15 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13))
    {
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_16;
      }
      unint64_t v14 = v16;
    }
    if (v15)
    {
      *(void *)(v2[7] + 8 * v14) = v4;
    }
    else
    {
      v2[(v14 >> 6) + 8] |= 1 << v14;
      uint64_t v18 = (uint64_t *)(v2[6] + 16 * v14);
      uint64_t *v18 = v7;
      v18[1] = v6;
      *(void *)(v2[7] + 8 * v14) = v4;
      uint64_t v19 = v2[2];
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_15;
      }
      v2[2] = v21;
      swift_bridgeObjectRetain();
    }
    ++v4;
    v5 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3 == v4)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.updatedCoreMLLayers()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dense?);
  MEMORY[0x270FA5388](v0 - 8);
  unint64_t v124 = (char *)&v96 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for Dense();
  uint64_t v150 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  uint64_t v122 = (char *)&v96 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t countAndFlagsBits = type metadata accessor for NeuralNetwork.Layer.InnerProductParameters();
  v148._uint64_t object = *(void **)(countAndFlagsBits - 8);
  MEMORY[0x270FA5388](countAndFlagsBits);
  uint64_t v140 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BatchNorm?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v102 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for BatchNorm();
  v148._uint64_t countAndFlagsBits = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  uint64_t v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for NeuralNetwork.Layer.BatchNormalizeParameters();
  unint64_t v147 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v110 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conv2D?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v114 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for Conv2D();
  unint64_t v146 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v121 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters();
  uint64_t v13 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112);
  uint64_t v123 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for NeuralNetwork.Layer.Kind();
  uint64_t v15 = *(void *)(v149 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v149);
  uint64_t v131 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v145 = (char *)&v96 - v18;
  uint64_t v143 = type metadata accessor for NeuralNetwork.Layer();
  uint64_t v19 = *(void *)(v143 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v143);
  uint64_t v141 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v142 = (char *)&v96 - v22;
  MLHandActionClassifier.GraphCNN.defineCoreMLLayers(numberOfKeypointsChannels:numberOfKeypoints:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRetain();
  MLHandActionClassifier.GraphCNN.coreMLTrainableLayerNames(from:)();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = MLHandActionClassifier.GraphCNN.getCoreMLAndNeuralNetworksTrainableLayerMap(_:)(v26);
  MLHandActionClassifier.GraphCNN.trainableSublayers()();
  uint64_t v29 = *(void *)(v24 + 16);
  uint64_t v133 = v28;
  uint64_t v139 = v29;
  if (!v29)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v24;
  }
  uint64_t v132 = v27;
  uint64_t v126 = v26;
  uint64_t v106 = v8;
  unint64_t v30 = 0;
  uint64_t v138 = v19 + 8;
  uint64_t v137 = (uint64_t (**)(uint64_t, uint64_t))(v15 + 88);
  uint64_t v101 = (void (**)(char *, uint64_t))(v15 + 8);
  unsigned int v144 = *MEMORY[0x263F53240];
  unint64_t v130 = (void (**)(uint64_t, uint64_t))(v15 + 96);
  uint64_t v100 = (void (**)(char *, char *, uint64_t))(v147 + 32);
  unsigned int v127 = *MEMORY[0x263F53238];
  uint64_t v129 = v28 + 32;
  uint64_t v99 = (void (**)(char *, uint64_t, uint64_t))(v148._countAndFlagsBits + 32);
  unsigned int v115 = *MEMORY[0x263F53248];
  uint64_t v98 = (void (**)(char *, char *, uint64_t))(v147 + 16);
  unint64_t v128 = (void (**)(uint64_t, void, uint64_t))(v15 + 104);
  uint64_t v97 = (void (**)(char *, uint64_t))(v148._countAndFlagsBits + 8);
  uint64_t v96 = (void (**)(char *, uint64_t))(v147 + 8);
  char v108 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v107 = (void (**)(char *, uint64_t, uint64_t))(v146 + 32);
  uint64_t v105 = (void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v104 = (void (**)(char *, uint64_t))(v146 + 8);
  uint64_t v103 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))((char *)v148._object + 32);
  char v119 = (void (**)(char *, uint64_t, uint64_t))(v150 + 32);
  uint64_t v118 = (void (**)(char *, char *, uint64_t))((char *)v148._object + 16);
  unint64_t v117 = (void (**)(char *, uint64_t))(v150 + 8);
  uint64_t v116 = (void (**)(char *, uint64_t))((char *)v148._object + 8);
  uint64_t v31 = v143;
  uint64_t object = v19;
  uint64_t v135 = v19 + 16;
  uint64_t v136 = countAndFlagsBits;
  uint64_t v134 = v19;
  while (1)
  {
    if (v30 >= *(void *)(v24 + 16))
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      swift_bridgeObjectRelease();
LABEL_62:
      uint64_t v151 = 0;
      unint64_t v152 = 0xE000000000000000;
      _StringGuts.grow(_:)(80);
      v79._uint64_t object = (void *)0x80000002272DBDE0;
      v79._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
      String.append(_:)(v79);
      v80._uint64_t countAndFlagsBits = countAndFlagsBits;
      v80._uint64_t object = (void *)object;
      String.append(_:)(v80);
      v81._uint64_t countAndFlagsBits = 0x65726F63206E6920;
      v81._uint64_t object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v81);
      goto LABEL_70;
    }
    unint64_t v146 = (*(unsigned __int8 *)(object + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(object + 80);
    unint64_t v147 = *(void *)(object + 72) * v30;
    uint64_t countAndFlagsBits = v24 + v146 + v147;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(object + 16);
    uint64_t v34 = v142;
    v33(v142, countAndFlagsBits, v31);
    uint64_t v150 = v24;
    v148._uint64_t countAndFlagsBits = NeuralNetwork.Layer.name.getter();
    v148._uint64_t object = v35;
    uint64_t v36 = *(void (**)(char *, uint64_t))(object + 8);
    v36(v34, v31);
    if (v30 >= *(void *)(v150 + 16)) {
      goto LABEL_47;
    }
    uint64_t object = v30;
    uint64_t v37 = v141;
    v33(v141, countAndFlagsBits, v31);
    uint64_t countAndFlagsBits = (uint64_t)v145;
    NeuralNetwork.Layer.kind.getter();
    v36(v37, v31);
    uint64_t v38 = v149;
    int v39 = (*v137)(countAndFlagsBits, v149);
    if (v39 == v144)
    {
      (*v130)(countAndFlagsBits, v38);
      (*v120)(v140, countAndFlagsBits, v136);
      uint64_t v40 = v132;
      uint64_t v41 = (uint64_t)v124;
      uint64_t countAndFlagsBits = v148._countAndFlagsBits;
      uint64_t object = (uint64_t)v148._object;
      if (!*(void *)(v132 + 16)) {
        goto LABEL_62;
      }
      swift_bridgeObjectRetain();
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, object);
      uint64_t v43 = v125;
      uint64_t v44 = v126;
      if ((v45 & 1) == 0) {
        goto LABEL_61;
      }
      unint64_t v46 = *(void *)(*(void *)(v40 + 56) + 8 * v42);
      swift_bridgeObjectRelease();
      if ((v46 & 0x8000000000000000) != 0) {
        goto LABEL_48;
      }
      if (v46 >= *(void *)(v133 + 16)) {
        goto LABEL_49;
      }
      outlined init with copy of TrainingSessionDelegate(v129 + 40 * v46, (uint64_t)&v151);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      if (!swift_dynamicCast())
      {
        __swift_storeEnumTagSinglePayload(v41, 1, 1, v43);
        outlined destroy of URL?(v41, &demangling cache variable for type metadata for Dense?);
        uint64_t v151 = 0;
        unint64_t v152 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v82._uint64_t countAndFlagsBits = 0xD000000000000040;
        v82._uint64_t object = (void *)0x80000002272DB980;
        String.append(_:)(v82);
        v83._uint64_t countAndFlagsBits = countAndFlagsBits;
        v83._uint64_t object = (void *)object;
        String.append(_:)(v83);
        v84._uint64_t countAndFlagsBits = 0x65726F63206E6920;
        v84._uint64_t object = (void *)0xEF63657073206C6DLL;
        String.append(_:)(v84);
        goto LABEL_70;
      }
      __swift_storeEnumTagSinglePayload(v41, 0, 1, v43);
      swift_bridgeObjectRelease();
      uint64_t v47 = v122;
      (*v119)(v122, v41, v43);
      uint64_t countAndFlagsBits = *(void *)(v44 + 16) - 1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (v46 == countAndFlagsBits)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          uint64_t v150 = v74;
        }
        uint64_t v49 = v150;
        if (v30 >= *(void *)(v150 + 16)) {
          goto LABEL_53;
        }
      }
      else
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          uint64_t v150 = v76;
        }
        uint64_t v49 = v150;
        if (v30 >= *(void *)(v150 + 16)) {
          goto LABEL_55;
        }
      }
      uint64_t v73 = v140;
      NeuralNetwork.Layer.loadInnerProductFromNeuralNetworks(_:useBias:into:)();
      uint64_t object = (uint64_t)v131;
      uint64_t countAndFlagsBits = v136;
      (*v118)(v131, v73, v136);
      (*v128)(object, v144, v149);
      if (v30 >= *(void *)(v49 + 16)) {
        goto LABEL_50;
      }
      uint64_t v24 = v49;
      NeuralNetwork.Layer.kind.setter();
      (*v117)(v47, v43);
      (*v116)(v73, countAndFlagsBits);
      goto LABEL_44;
    }
    if (v39 != v127) {
      break;
    }
    uint64_t v50 = v145;
    (*v130)((uint64_t)v145, v149);
    uint64_t v51 = v112;
    (*v108)(v123, v50, v112);
    uint64_t v52 = v132;
    uint64_t v54 = v148._countAndFlagsBits;
    uint64_t v53 = v148._object;
    if (!*(void *)(v132 + 16)) {
      goto LABEL_65;
    }
    swift_bridgeObjectRetain();
    unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v54, (uint64_t)v53);
    uint64_t v56 = v113;
    if ((v57 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_65:
      uint64_t v151 = 0;
      unint64_t v152 = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v85._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
      v85._uint64_t object = (void *)0x80000002272DBEA0;
      String.append(_:)(v85);
      v86._uint64_t countAndFlagsBits = v54;
      v86._uint64_t object = v53;
      String.append(_:)(v86);
      v87._uint64_t countAndFlagsBits = 0x65726F63206E6920;
      v87._uint64_t object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v87);
      goto LABEL_70;
    }
    unint64_t v58 = *(void *)(*(void *)(v52 + 56) + 8 * v55);
    swift_bridgeObjectRelease();
    uint64_t v59 = (uint64_t)v114;
    if ((v58 & 0x8000000000000000) != 0) {
      goto LABEL_51;
    }
    if (v58 >= *(void *)(v133 + 16)) {
      goto LABEL_52;
    }
    outlined init with copy of TrainingSessionDelegate(v129 + 40 * v58, (uint64_t)&v151);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    if ((swift_dynamicCast() & 1) == 0)
    {
      __swift_storeEnumTagSinglePayload(v59, 1, 1, v56);
      outlined destroy of URL?(v59, &demangling cache variable for type metadata for Conv2D?);
      uint64_t v151 = 0;
      unint64_t v152 = 0xE000000000000000;
      _StringGuts.grow(_:)(80);
      v88._uint64_t object = (void *)0x80000002272DBB40;
      v88._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
      String.append(_:)(v88);
      v89._uint64_t countAndFlagsBits = v54;
      v89._uint64_t object = v53;
      String.append(_:)(v89);
      v90._uint64_t countAndFlagsBits = 0x65726F63206E6920;
      v90._uint64_t object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v90);
      goto LABEL_70;
    }
    __swift_storeEnumTagSinglePayload(v59, 0, 1, v56);
    swift_bridgeObjectRelease();
    (*v107)(v121, v59, v56);
    uint64_t v24 = v150;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v24 = v75;
    }
    uint64_t v60 = v121;
    uint64_t v61 = v123;
    if (v30 >= *(void *)(v24 + 16)) {
      goto LABEL_54;
    }
    NeuralNetwork.Layer.loadConv2DFromNeuralNetworks(_:useBias:into:)();
    uint64_t object = (uint64_t)v131;
    (*v105)(v131, v61, v51);
    (*v128)(object, v127, v149);
    if (v30 >= *(void *)(v24 + 16)) {
      goto LABEL_56;
    }
    NeuralNetwork.Layer.kind.setter();
    (*v104)(v60, v56);
    (*v103)(v61, v51);
LABEL_44:
    uint64_t object = v134;
    ++v30;
    uint64_t v31 = v143;
    if (v139 == v30) {
      goto LABEL_45;
    }
  }
  uint64_t v62 = v111;
  uint64_t v24 = v150;
  if (v39 != v115)
  {
    swift_bridgeObjectRelease();
    (*v101)(v145, v149);
    goto LABEL_44;
  }
  uint64_t v63 = v145;
  (*v130)((uint64_t)v145, v149);
  (*v100)(v110, v63, v62);
  uint64_t v64 = v132;
  if (!*(void *)(v132 + 16)) {
    goto LABEL_68;
  }
  uint64_t v65 = v148._object;
  swift_bridgeObjectRetain();
  uint64_t object = v148._countAndFlagsBits;
  unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v148._countAndFlagsBits, (uint64_t)v65);
  if (v67)
  {
    unint64_t v68 = *(void *)(*(void *)(v64 + 56) + 8 * v66);
    swift_bridgeObjectRelease();
    uint64_t v69 = (uint64_t)v102;
    if ((v68 & 0x8000000000000000) != 0) {
      goto LABEL_57;
    }
    if (v68 >= *(void *)(v133 + 16)) {
      goto LABEL_58;
    }
    outlined init with copy of TrainingSessionDelegate(v129 + 40 * v68, (uint64_t)&v151);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    uint64_t v70 = v109;
    if (!swift_dynamicCast())
    {
      __swift_storeEnumTagSinglePayload(v69, 1, 1, v70);
      outlined destroy of URL?(v69, &demangling cache variable for type metadata for BatchNorm?);
      uint64_t v151 = 0;
      unint64_t v152 = 0xE000000000000000;
      _StringGuts.grow(_:)(78);
      v93._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      v93._uint64_t object = (void *)0x80000002272DBE60;
      String.append(_:)(v93);
      v94._uint64_t countAndFlagsBits = object;
      v94._uint64_t object = v65;
      String.append(_:)(v94);
      v95._uint64_t countAndFlagsBits = 0x65726F63206E6920;
      v95._uint64_t object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v95);
      goto LABEL_70;
    }
    __swift_storeEnumTagSinglePayload(v69, 0, 1, v70);
    swift_bridgeObjectRelease();
    (*v99)(v106, v69, v70);
    uint64_t v24 = v150;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v24 = v77;
    }
    uint64_t v71 = v110;
    if (v30 >= *(void *)(v24 + 16)) {
      goto LABEL_59;
    }
    uint64_t v72 = v106;
    NeuralNetwork.Layer.loadBatchNormFromNeuralNetworks(_:into:)();
    uint64_t object = (uint64_t)v131;
    (*v98)(v131, v71, v62);
    (*v128)(object, v115, v149);
    if (v30 >= *(void *)(v24 + 16)) {
      goto LABEL_60;
    }
    NeuralNetwork.Layer.kind.setter();
    (*v97)(v72, v109);
    (*v96)(v71, v62);
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
LABEL_68:
  uint64_t v151 = 0;
  unint64_t v152 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v91._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  v91._uint64_t object = (void *)0x80000002272DBE20;
  String.append(_:)(v91);
  String.append(_:)(v148);
  v92._uint64_t countAndFlagsBits = 0x65726F63206E6920;
  v92._uint64_t object = (void *)0xEF63657073206C6DLL;
  String.append(_:)(v92);
LABEL_70:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void NeuralNetwork.Layer.loadConv2DFromNeuralNetworks(_:useBias:into:)()
{
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_143_0(v2, v3);
  type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_10();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_62_6(v7, v27);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_100_1();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_149_0();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_101_1();
  uint64_t v16 = NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter();
  if (v16 == MEMORY[0x22A672960]())
  {
    Conv2D.weight.getter();
    Tensor.scalars<A>(as:)();
    uint64_t v17 = *(void (**)(void))(v12 + 8);
    OUTLINED_FUNCTION_27_28();
    v17();
    NeuralNetwork.WeightParameters.init(_:updatable:)();
    NeuralNetwork.Layer.ConvolutionParameters.weights.setter();
    if (v28)
    {
      Conv2D.bias.getter();
      if (__swift_getEnumTagSinglePayload(v1, 1, v10) == 1)
      {
        outlined destroy of URL?(v1, &demangling cache variable for type metadata for Tensor?);
      }
      else
      {
        uint64_t v18 = OUTLINED_FUNCTION_97_2();
        v19(v18);
        Tensor.scalars<A>(as:)();
        NeuralNetwork.WeightParameters.init(_:updatable:)();
        OUTLINED_FUNCTION_145_0();
        NeuralNetwork.Layer.ConvolutionParameters.bias.setter();
        ((void (*)(uint64_t, uint64_t))v17)(v0, v10);
      }
    }
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_103_1();
    v21(v20);
    _StringGuts.grow(_:)(99);
    v22._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    v22._uint64_t object = (void *)0x80000002272DBEE0;
    String.append(_:)(v22);
    MEMORY[0x22A672960]();
    v23._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_88_1();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t object = (void *)0x80000002272DBF20;
    v24._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v24);
    NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter();
    v25._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_88_1();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x6C656E6E61686320;
    v26._uint64_t object = (void *)0xEA00000000002E73;
    String.append(_:)(v26);
    OUTLINED_FUNCTION_135_0();
    __break(1u);
  }
}

void NeuralNetwork.Layer.loadBatchNormFromNeuralNetworks(_:into:)()
{
  OUTLINED_FUNCTION_19_4();
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  uint64_t v4 = OUTLINED_FUNCTION_17(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_146_0();
  BatchNorm.scale.getter();
  OUTLINED_FUNCTION_133_0();
  Tensor.scalars<A>(as:)();
  uint64_t v5 = *(void (**)(uint64_t))(v1 + 8);
  uint64_t v6 = OUTLINED_FUNCTION_67_6();
  v5(v6);
  OUTLINED_FUNCTION_91_2();
  type metadata accessor for NeuralNetwork.WeightParameters();
  OUTLINED_FUNCTION_49_12();
  NeuralNetwork.Layer.BatchNormalizeParameters.scale.setter();
  OUTLINED_FUNCTION_146_0();
  BatchNorm.offset.getter();
  OUTLINED_FUNCTION_133_0();
  Tensor.scalars<A>(as:)();
  uint64_t v7 = OUTLINED_FUNCTION_67_6();
  v5(v7);
  OUTLINED_FUNCTION_91_2();
  OUTLINED_FUNCTION_49_12();
  NeuralNetwork.Layer.BatchNormalizeParameters.offset.setter();
  OUTLINED_FUNCTION_146_0();
  BatchNorm.runningMean.getter();
  OUTLINED_FUNCTION_133_0();
  Tensor.scalars<A>(as:)();
  uint64_t v8 = OUTLINED_FUNCTION_67_6();
  v5(v8);
  OUTLINED_FUNCTION_91_2();
  OUTLINED_FUNCTION_49_12();
  NeuralNetwork.Layer.BatchNormalizeParameters.mean.setter();
  OUTLINED_FUNCTION_146_0();
  BatchNorm.runningVariance.getter();
  OUTLINED_FUNCTION_133_0();
  Tensor.scalars<A>(as:)();
  uint64_t v9 = OUTLINED_FUNCTION_67_6();
  v5(v9);
  OUTLINED_FUNCTION_91_2();
  OUTLINED_FUNCTION_49_12();
  NeuralNetwork.Layer.BatchNormalizeParameters.variance.setter();
  OUTLINED_FUNCTION_12_4();
}

void NeuralNetwork.Layer.loadInnerProductFromNeuralNetworks(_:useBias:into:)()
{
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_143_0(v2, v3);
  type metadata accessor for Dense();
  OUTLINED_FUNCTION_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_10();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  uint64_t v6 = OUTLINED_FUNCTION_17(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_62_6(v7, v26);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  uint64_t v9 = OUTLINED_FUNCTION_17(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = OUTLINED_FUNCTION_100_1();
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_52_1();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_149_0();
  OUTLINED_FUNCTION_8();
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_101_1();
  uint64_t v16 = NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
  if (v16 == Dense.unitCount.getter())
  {
    Dense.weight.getter();
    Tensor.scalars<A>(as:)();
    uint64_t v17 = *(void (**)(void))(v12 + 8);
    OUTLINED_FUNCTION_27_28();
    v17();
    NeuralNetwork.WeightParameters.init(_:updatable:)();
    NeuralNetwork.Layer.InnerProductParameters.weights.setter();
    if (v27)
    {
      Dense.bias.getter();
      if (__swift_getEnumTagSinglePayload(v1, 1, v10) == 1)
      {
        outlined destroy of URL?(v1, &demangling cache variable for type metadata for Tensor?);
      }
      else
      {
        uint64_t v18 = OUTLINED_FUNCTION_97_2();
        v19(v18);
        Tensor.scalars<A>(as:)();
        NeuralNetwork.WeightParameters.init(_:updatable:)();
        OUTLINED_FUNCTION_145_0();
        NeuralNetwork.Layer.InnerProductParameters.bias.setter();
        ((void (*)(uint64_t, uint64_t))v17)(v0, v10);
      }
    }
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_103_1();
    v21(v20);
    _StringGuts.grow(_:)(86);
    v22._uint64_t countAndFlagsBits = 0xD000000000000041;
    v22._uint64_t object = (void *)0x80000002272DBF40;
    String.append(_:)(v22);
    Dense.unitCount.getter();
    v23._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_88_1();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t object = (void *)0x80000002272DBF90;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
    v25._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_88_1();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_135_0();
    __break(1u);
  }
}

id outlined bridged method (mbbnn) of @objc NSBundle.url(forResource:withExtension:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = (void *)MEMORY[0x22A674AE0]();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)MEMORY[0x22A674AE0](a3, a4);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a5, sel_URLForResource_withExtension_, v8, v9);

  return v10;
}

uint64_t _s8CreateML22MLHandActionClassifierV13GraphCNNModelVAE14NeuralNetworks5LayerAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_1_59()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_4_65()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_6_48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
  *(void *)(v5 - 136) = v4;
  *(void *)(v5 - 128) = v4;
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_7_55()
{
  *(void *)(v0 + 16) = v1;
  return v0 + *(void *)(v3 - 152) + v2 * *(void *)(v3 - 160);
}

uint64_t OUTLINED_FUNCTION_8_46()
{
  return 0x2E7475706E69;
}

uint64_t OUTLINED_FUNCTION_10_39()
{
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_11_47()
{
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_12_38()
{
  return 0x2E7475706E69;
}

uint64_t OUTLINED_FUNCTION_18_29()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_20_39()
{
  *(void *)(v1 - 96) = v0;
  return *(void *)(v1 - 248);
}

uint64_t OUTLINED_FUNCTION_21_40()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_25()
{
  return v0;
}

void OUTLINED_FUNCTION_26_22()
{
  uint64_t v1 = 0x65726F63206E6920;
  unint64_t v2 = 0xEF63657073206C6DLL;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_29_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_28()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_31_21()
{
  *(void *)(v2 - 216) = v0;
  *(void *)(v2 - 208) = v0 + 32;
  uint64_t v3 = *(void *)(v2 - 744);
  *(void *)(v2 - 200) = 0;
  *(void *)(v2 - 192) = v3;
  __swift_storeEnumTagSinglePayload(v1, 1, 1, *(void *)(v2 - 752));
  return Tensor.init<A>(shape:scalars:on:)();
}

uint64_t OUTLINED_FUNCTION_33_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_21()
{
  return MEMORY[0x270F48AF8](0, 0, 1, 1);
}

uint64_t OUTLINED_FUNCTION_37_19()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_20()
{
  return MEMORY[0x270F48B50](4, 4, 0, 0);
}

void OUTLINED_FUNCTION_42_21()
{
  *(void *)(v1 - 96) = v0;
  *(void *)(v1 - 136) = 1;
  *(void *)(v1 - 128) = 1;
}

void OUTLINED_FUNCTION_43_15()
{
  uint64_t v1 = *(void *)(v0 - 208);
  *(void *)(v0 - 216) = *(void *)(v0 - 216);
  *(void *)(v0 - 208) = v1;
}

void OUTLINED_FUNCTION_46_16()
{
  *(void *)(v1 - 96) = v0;
  *(void *)(v1 - 136) = 1;
  *(void *)(v1 - 128) = 9;
}

void OUTLINED_FUNCTION_48_14()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_49_12()
{
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return v0;
}

void OUTLINED_FUNCTION_51_14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_52_14()
{
  *(void *)(v0 - 216) = 0;
  *(void *)(v0 - 208) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_55_12()
{
  *(void *)(v0 + 16) = v1;
  return v0 + *(void *)(v3 - 152) + v2 * *(void *)(v3 - 160);
}

void OUTLINED_FUNCTION_56_15(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_57_12()
{
  return v0;
}

void OUTLINED_FUNCTION_58_7()
{
  *(void *)(v0 - 136) = 3;
  *(void *)(v0 - 128) = 1;
}

void OUTLINED_FUNCTION_59_8()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_61_10()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_62_6(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_64_6()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_65_5()
{
  return static NeuralNetwork.Layer.pool(name:inputName:outputName:kind:kernelSize:strides:padding:)();
}

uint64_t OUTLINED_FUNCTION_67_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_69_7()
{
  return NeuralNetwork.Layer.name.getter();
}

void OUTLINED_FUNCTION_71_7()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_72_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_73_2()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

unint64_t OUTLINED_FUNCTION_77_5()
{
  uint64_t v1 = *(void *)(v0 - 208);
  *(void *)(v0 - 216) = *(void *)(v0 - 216);
  *(void *)(v0 - 208) = v1;
  return 0xD000000000000032;
}

uint64_t OUTLINED_FUNCTION_81_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_82_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_83_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_85_1()
{
  return v0;
}

void OUTLINED_FUNCTION_87_2(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000019;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_88_1()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_89_1()
{
  *(void *)(v0 - 216) = 0;
  *(void *)(v0 - 208) = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
}

uint64_t OUTLINED_FUNCTION_90_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_91_2()
{
  return NeuralNetwork.WeightParameters.init(_:updatable:)();
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  return *(void *)(v0 - 392);
}

uint64_t OUTLINED_FUNCTION_94_1(uint64_t a1, uint64_t *a2)
{
  return outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_95_2()
{
  return *(void *)(v0 - 336);
}